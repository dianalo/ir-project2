<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-224-952  </DOCNO><DOCID>08 224 952.andM;</DOCID><JOURNAL>Computing Canada  Feb 15 1990 v16 n4 p40(1)* Full Text COPYRIGHT Plesman Publications Ltd. (Canada) 1990.andM;</JOURNAL><TITLE>Implementing an integration strategy: the ability to add new toolsextends the productivity of a 4GL environment. (fourth generationlanguage)</TITLE><AUTHOR>Shouldice, Harley.andM;</AUTHOR><SUMMARY>Management information systems (MIS) managers are placingincreased emphasis on the capability of fourth generationlanguages (4GLs) to extend productivity by providing the basis foran integration strategy.andP;  The key issue is the ability of aninformation environment to work with existing applications anddata structures, as well as to accommodate new products.andP;  Thisapplies in particular to the core functions of data management andapplications development.andP;  The full function 4GL needs a 'globaljoin facility' to enable an application to use data from differentfile structures.andP;  Increasingly, an attempt is being made toaddress the shell functions of analysis and design, end-useraccess and application maintenance as well.andP;  The ability tointegrate such tools into the development environment will beincreasingly crucial as competition grows.andM;</SUMMARY><DESCRIPT>Topic:     Function AnalysisFourth-Generation LanguagesApplications ProgrammingComputer Systems IntegrationProgram Development ToolsMISData Base Management Systems.andO;Feature:   illustrationchart.andO;Caption:   An information environment consists of five functions. (chart)andM;</DESCRIPT><TEXT>Implementing an integration strategyandM;The vendors of fourth generation languages (4GLs) can no longer rest on theirlaurels.andP;  The MIS (management information systems) managers who purchased4GLs in the past to boost programmer efficiency in application developmentare now looking to extend productivity gains to every aspect of theirbusiness, from application management to information capture and analysis byend-users.andM;Traditionally, 4GLs were viewed as a replacement for third generationlanguages such as Cobol.andP;  However, application development is only one partof the MIS mandate -- ongoing maintenance, for example, can consume up totwo-thirds of a shop's programming resources.andM;This means that fewer resources are available to build new systems inresponse to changing business conditions such as those brought about bymergers and acquisitions.andP;  New systems are also being demanded at all levelsin an organization so employees can take advantage of the increasedavailability of inexpensive computing resources to automate manual processesor provide new value-added information services.andM;Consequently, control and management of the complete application developmentenvironment is becoming more important as MIS copes with these challenges andwith multiple applications, data engines and hardware platforms.andP;  Theserequirements have not been met with traditional, limited function 4GLs, asthey typically fall in the domain of application management products such asCASE offerings and prototyping tools.andM;A complete environmentandM;The industry response to the demands of MIS for a wider range of productivitytools has been to introduce a variety of new products, targeted at one of thefive functions that round out the comprehensive information environment shownin Figure 1.andM;The two &quot;core&quot; information management functions -- data management andapplication development -- are currently addressed by a good selection ofmature products.andP;  A number of standards have emerged and today, all seriousvendors can be expected to offer an application development environment --either a full function 4GL or a shell of tools -- or a database engine thatis well integrated.andM;The issue is the ability of current offerings to integrate with existingapplications and data structures, and to accomodate new products from othervendors in the future.andP;  In particular, attention should be paid to the degreeof forward and backward compatibility offered by application developmenttools.andM;A full function 4GL, for example, should offer a &quot;global join facility&quot; thatallows an application to work with data in different file structuressimultaneously.andP;  For example, a sales application may need to access customerdata stored on flat files and link it with inventory data in a newerrelational database designed, perhaps, for the manufacturing arm of thecorporation.andP;  As well, the file structures may reside on separate platforms.andM;Complementing these core functions is an increasing number of solutionsaddressing the three &quot;shell&quot; functions--analysis and design, applicationmaintenance, and end-user access.andP;  Unfortunately, most offerings availableare &quot;point products&quot; that do not conform to any standards, as no widelyaccepted standards have emerged in these areas.andM;Consequently, tools from one vendor cannot work well with an offering fromanother vendor, or with existing applications and data structures.andP;  Thisforces MIS to design and write code to stitch together these tools.andP;  Forexample, special files must be generated to reformat data to meet thespecifications of a particular product, such as a report generator orstatistical analysis tool designed for end-users.andM;The most obvious cases are data formats used by PC-based products.andP;  Thisproblem both contributes to and exacerbates the increasingly heterogeneousnature of hardware environments, where MIS must deal with mainframe, midrangeand personal computers.andP;  These platforms all use different operating systemsand are the target of different software offerings.andM;As well, the introduction of enhancements to products is often uneven andunco-ordinated, causing MIS additional management headaches.andP;  For instance, areport writer may add graphics capabilities that are too rudimentary toreplace a graphics package, or a graphics package may add basic reportingfunctions that duplicate those offered by a powerful report writer already inuse.andP;  The result is that the &quot;enhancements&quot; offer few real advantages tousers, but cause confusion as to which products should be used.andM;Another problem is the use of often radically different syntax andconventions for each tool.andP;  Consequently, the learning curve for each ishigh, and programmers who have mastered one tool have only a modest advantagein learning or using another.andP;  To cope with this situation, certainindividuals in the MIS department are often designated the &quot;guru&quot; or expertfor a particular tool.andM;Unfortunately, this dependency on gurus makes the organization vulnerable tostaff turnover as replacements require a long training period to achieveproficiency.andP;  Compounding this problem is the difficulty of maintainingconsistent organization-wide standards for programming and documentationpractices in an environment where tools are inconsistent and have conflictingrequirements.andM;Towards integrationandM;Increasingly, tools that address functions such as application design andanalysis are being integrated with the application development environment.andO;This allows MIS programmers to use the code developed at this stage of theapplication life cycle with the more powerful 4GL tools when the full blownproduction version is implemented.andM;In many cases, MIS decision makers have faced a dilemma when adding to theircore information systems.andP;  On the one hand, they see the advantages ofintegration, but on the other, they fear the integrated product will notoffer a full set of capabilities across the board.andM;In the 1990s, MIS planners will face even greater demands than they do now.andO;To respond, they must adopt a strategy that gives integration an even greateremphasis without sacrificing functionality.andP;  Freed from the costs ofincompatibility, MIS can focus its resources on its core responsibilities andimprove the efficiency of its operations.andM;In implementing an integration strategy.andP;  MIS should strongly encouragevendors to make integration a driving factor in product development, bothwhen enhancing existing products and introducing new ones.andP;  Enlightenedvendors will respond, because customer loyalty is the only sure path tosuccess.andM;Harley Shouldice is manager of PowerHouse technology at Ottawa-based CognosInc., developer of the PowerHouse fourth generation language.andO;</TEXT></DOC>