<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-041-259 </DOCNO><DOCID>11 445 183</DOCID><JOURNAL>C Users Journal  Oct 1991 v9 n10 p33(7)* Full Text COPYRIGHT R andamp; D Publications Inc 1991.andM;</JOURNAL><TITLE>A call-tree generator for C programs. (tutorial)</TITLE><AUTHOR>Bergman-Terrell, Eric.andM;</AUTHOR><SUMMARY>Call trees give information about the hierarchy of function callsin a program.andP;  Call trees can be illustrated using text andindentation or graphically, and still provide the sameinformation.andP;  A utility to generate call trees is useful forprogrammers, since the call trees can clarify the functioninteraction of complex programs.andP;  C_CALLS is a program thatgenerates text call trees for Turbo C or Microsoft C programs.andO;C_CALLS can be compiled by both Turbo C and the Microsoft Ccompiler.andP;  Calls can be generated with C_CALLS by first compilingthe target program using an option to create an assembly languagefile.andP;  C_CALLS is then run with the assembly language filename asan argument.andP;  C_CALLS source code is presented with directions forimplementation and use.andM;</SUMMARY><DESCRIPT>Product:   Turbo C (Compiler) (Computer programs)Microsoft C (Compiler) (Computer programs).andO;Topic:     TutorialProgramming InstructionCodesCall MechanismsTree StructuresData Flow DiagramsSource CodeOptimization.andO;Feature:   illustrationcharttableprogram.andO;Caption:   Call Tree (graphical representation). (chart)Call Tree (textual representation). (table)C_CALLS source code. (program)andM;</DESCRIPT><TEXT>IntroductionandM;A call tree shows the hierarchy of function calls in a program.andP;  For example,the call tree in Figure 1 shows:andM;* main calling functions one, two, and threeandM;* function one calling three and fourandM;* two calling itself four and six and so on.andM;While graphic displays of call trees, such as Figure 1, are clearest, calltrees can also be displayed using text and indentation, as in Table 1.andP;  Notethat Figure 1 and Table 1 give the same information.andM;C_CALLSandM;Since call trees can clarify the function interaction of complex programs, autility to generate call trees belongs in every programmer's toolbox.andP;  Thisarticle describes a program named C CALLS that generates text call trees forTurbo C or Microsoft C programs.andP;  C CALLS can be compiled by either the TurboC or the Microsoft C compiler.andM;C CALLS uses the assembly output from the compiler, so if you don't use theTurbo C or the Microsoft C compiler you may need to modify C_CALLS to workwith your compiler's output.andP;  The section on customizing C_CALLS providesfurther details.andM;Recursive Function CallsandM;When a function calls itself either directly or indirectly, that call is saidto be &quot;recursive.&quot; In C CALLS output, recursive calls are marked by anellipsis ( .......andP;  ).  In Table 1, function three (line 8) calls itselfdirectly on line 13, and indirectly (through function one) on line 11.andM;When a program runs, recursive calls bottom out with some base case(arguments that don't require a recursive call), but the static call treecontains a loop back to a previous node, creating an infinite branch in thetree (since the call tree doesn't have access to any arguments).andP;  So, when afunction makes a recursive call (such as in line 13 of Table 1), that branchof the function call tree is abandoned and an ellipsis is printed.andM;How C_CALLS WorksandM;The following sections present the C_CALLS source code and discuss itsimplementation and use.andM;A Directed GraphandM;When you compile a program using Turbo C or Microsoft C, you can specify anoption that saves the assembly language translation of the program to a diskfile.andP;  Using the assembly language file as input, C_CALLS builds a directedgraph representing the function calls in the program.andM;C_CALLS.HandM;The data structures used for the directed graph (CELL and LIST) are definedin the C_CALLS.H header file shown in Listing 1.andP;  Note that &quot;function&quot; isabbreviated as &quot;fcn&quot; in the code.andM;BLD_GRA.andP;  CandM;Function build_graph creates the directed graph by parsing the assemblylanguage file.andP;  build_graph is defined in file BLD_GRA.C shown in Listing 2.andM;LISTS.CandM;The directed graph structure uses several linked lists.andP;  These lists aremanipulated by functions insert_cell, delete_cell, and find_cell, which aredefined in file LISTS.andP;  C shown in Listing 3.andM;PRINT.CandM;Once the directed graph has been built, the call tree is printed by callingprint_all_calls, defined in PRINT.andP;  C.andM;C_CALLS &quot;expands&quot; a function, say main, by printing the function name &quot;main&quot;followed by the names of all functions called by that function (one, three,two).andM;To avoid infinite loops while expanding recursive functions, a list namedfcns is used.andP;  fcns contains the names of the functions currently beingexpanded.andP;  If print_calls is called for a function already in fcns, thatfunction name is printed followed by an ellipsis (.......andP;  ) and thatfunction is not expanded further.andP;  See Listing 4.andM;C_CALLS.CandM;The main program, C_CALLS (defined in C_CALLS.C), takes one command-lineargument, the name of an assembly language file.andP;  C_CALLS parses the file,builds the directed graph, and prints out the call tree.andP;  See Listing 5.andM;Compiling C_CALLSandM;The following commands show the appropriate options for compiling the C_CALLSmodules (when they are the only .andP;  c files in the current directory).andM;Turbo C: tcc -mh -N *.candM;Microsoft C: cl /AH /F 8000andM;/Fec_calls.exe *.candM;Using C_CALLSandM;To generate a call tree with C_CALLS first compile the target program usingan option to create an assembly language file, then run C_CALLS with theassembly language filename as an argument.andM;The MS-DOS batch files shown in Listings 6 and 7 generate the assemblylanguage file and run C_CALLS.andP;  Turbo C users can use TC_CALLS.BAT, andMicrosoft C users can use MS_CALLS.BAT.andP;  The batch files expect only thetarget files in the current directory.andP;  For further details on generatingassembly language files, see your compiler's user guide.andM;Customizing C_CALLSandM;Users may want to customize C_CALLS.andP;  Possible extensions include excludingstandard library functions from call trees or supporting additionalcompilers.andP;  To support another compiler, the first step requires studying theformat of assembly language files generated by the compiler.andP;  The remainingstep is to modify the function build_graph, adjusting its parsing process tothe new format.andM;CaveatsandM;Since optimizing compilers can change the function calling hierarchy of aprogram by removing or changing function calls, you should disableoptimization when generating assembly language files for C CALLS.andP;  Fordetails on optimization and possible interaction with call trees, see yourcompiler's user guide.andM;If your compiler's assembly-language file format changes in subsequentreleases, function build_graph may need to be modified.andM;C  CALLS has been tested with Turbo C v1.5 and Microsoft C v5.1.andO;</TEXT></DOC>