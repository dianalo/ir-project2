<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-538-436  </DOCNO><DOCID>08 538 436.andM;</DOCID><JOURNAL>PC Magazine  July 1990 v9 n13 p355(7)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1990.andM;</JOURNAL><TITLE>PMVIEW: a Presentation Manager file browser. (Utilities, includesa related article on how to obtain utilities from PC Magazine)(tutorial)</TITLE><AUTHOR>Boling, Douglas.andO;AttFile:   PCMAG\V09N13\PMVIEW.EXE;2 Program:  PMVIEW.EXE  PM browser (self-exec archive).andM;</AUTHOR><SUMMARY>Users who have converted from DOS computing to the OS/2environment have left behind their utility programs for doingthings like file browsing.andP;  This tutorial provides a file browsingutility called PMVIEW that can be downloaded from PC MagNet, aswell as complete documentation for this Presentation Managerutility.andP;  PMVIEW enables users to quickly scan a file withouthaving to enter an editor.andP;  The program will allow files to beviewed as either ASCII text or in hexadecimal.andP;  The program alsocomes with a search feature that will find a given phrase or willallow easy movement within a file.andP;  Other features of the programinclude a movable, resizable window, configurable color and fontsize, and mouse or keyboard compatibility.andM;</SUMMARY><DESCRIPT>Product:   OS/2 Presentation Manager (Graphical user interface) (computerprograms).andO;Topic:     TutorialUtility ProgramsFile DirectoriesShareware.andO;Feature:   illustrationtable.andO;Caption:   PC utilities upgrades. (table)andM;</DESCRIPT><TEXT>PMVIEW: A Presentation Manager File Browser If you've already braved thetransition to OS/2, you know how much more productive your machine can be.andO;The Presentation Manager is the environment that Microsoft Windows ought tohave been--an easy-to-learn user interface that doesn't make you wait for oneprogram to finish before you can begin working on another.andP;  Gone are such oldDOS bugaboos as RAM cram, the extended/expanded memory division, and TSRconflicts.andM;Gone too, however, are all those nice little DOS utilities you knew, loved,and used so often.andP;  They just don't work under OS/2; a whole new set must bewritten to replace them.andP;  One such utility everyone needs is a file browser,which allows you quickly to view a file without entering a large, clumsyeditor.andP;  This issue's utility, PMVIEW, is a Presentation Manager-based filebrowser that lets you look at your files either as ASCII text or inhexadecimal.andP;  A search feature is provided to quickly find that neededphrase, and you can also jump directly to any location within the file.andM;As a Presentation Manager program, PMVIEW displays files in a movable,resizable window.andP;  Both window colors and font size are configurable.andP;  Scrollbars are provided for mouse-based navigation through the file, but areremovable for keyboard-bound users.andP;  As with all PM programs, multiple copiesof PMVIEW can be run simultaneously.andM;As you might want to start PMVIEW now and use it later, a command-line switchis provided that automatically shrinks PMVIEW down to an icon on start-up.andO;The name of the file being viewed is displayed in the title bar of the windowand also as the title of the icon when the window is minimized.andM;GETTING AND USING PMVIEWandM;The details on downloading a fully compiled copy of PMVIEW from PC MagNet aregiven in the sidebar &quot;PMVIEW by Modem.&quot;andP;  The source code (which is written inC) and its ancillary files may also be down loaded from PC MagNet.andP;  Thespecific files that you need to create this utility for yourself are PMVIEW,PMVIEW.C, PMVIEW.DEF, PMVIEW.DLG, PMVIEW.H, PMVIEW.ICO, and PMVIEW.RC.andP;  Youshould note that this requires OS/2 1.2 using the IBM or Microsoft OS/2Presentation Manager Toolkit, as well.andM;The program syntax is very simple:andM;PMBROWSE [filename] [/i]andM;To invoke PMVIEW either from an OS/2 window or from a full-screen commandline, just type PMVIEW, followed by the name of the file you want to view.andO;Alternatively, as shown in Figure 1, you can add PMVIEW to a group under theProgram Manager that you can then start simply by clicking on the appropriateitem in that menu.andP;  If you do not enter a filename, a dialog box window willopen and prompt you for it.andP;  This dialog box lists the drives, directories,and files on the disk, as exemplified by Figure 2.andP;  You can simply wanderthrough the list of files until you find the one you want.andM;By including the optional /i switch on the command line (or as a parameterfrom the Start Programs menu), you can tell PMVIEW to shrink immediately toan icon.andP;  This option is valuable because it allows you to load a frequentlyreferenced file into PMVIEW and minimize its window so that it's at yourdisposal at the click of a mouse button.andM;Once a file has been selected, a window appears that displays the file inASCII text format.andP;  You can change this to display the file in hex notation.andO;This option is shown in Figure 3.andP;  As with most PM programs, PMVIEW isconsumately easy to learn because its features are displayed right on themenu bar.andM;The two selections under the Search menu let you quickly move to differentparts of the file.andP;  To find a specific phrase, select the Find selection anda dialog box will appear in which you enter the search phrase.andP;  Selecting theGoto option lets you jump directly to an offset within the file.andM;The Display menu, shown in Figure 4, allows you to customize various aspectsof the display format without entering a dialog box.andP;  The Configure optionbrings up a dialog box for picking the color of the screen, the size of thefont, the display format, the tab stop value, and whether or not the scrollbars should be shown.andP;  Your selections can be saved to disk so that PMVIEWwill use the same configuration the next time the program is run.andM;The help menu has a selection to display the About Box, which, as usual,contains the name of the program and its author, together with the copyrightinformation.andM;PM PROGRAMMINGandM;Creating a PM program is in some ways more involved than writing a programfor DOS.andP;  PM programs are usually written in a high-level language (normallyC) rather than in assembly language, and the programmer needs the OS/2Toolkit sold by Microsoft and IBM.andP;  While the cost of the Programmers Toolkitis by no means negligible, the tools included are invaluable to a PMprogrammer.andM;The Toolkit provides not only the proper binding files to call the OS/2Application Program Interface, but it also includes programs that help youcreate icons, new fonts, and dialog boxes.andP;  Probably the most valuablefeature of the Toolkit is the extensive documentation it provides.andP;  In theOS/2 1.2 Toolkit, this documentation is presented both in hard copy manualsand in a surprisingly convenient on-line form.andM;One of the nice features of PM programming is the implicit structure thesystem encourages.andP;  PM programs are naturally broken into the functionsnecessary to implement various windows.andP;  Just as a window is created, writtento, resized, and destroyed, so a PM program is composed of functions thatrespond to these events.andP;  Since all PM programs are written this way, readingthem becomes much easier.andM;PM programs are divided into procedures that control the various aspects ofthe program.andP;  There is a main procedure that receives control of the programwhen it is run and there is a procedure for each window in the program.andO;Since each type of window has its own procedure, each window reacts to eventsin its own way.andM;The main procedure must perform a set routine of functions to establish thenecessary structures for the program.andP;  This litany begins by registering withthe Presentation Manager and creating a message queue.andP;  The message queue isvital, for this is the way in which the system communicates with the program.andO;A window class is created that defines the properties of the applicationwindow.andP;  The class also tells PM the address of the procedure that controlsthe window.andP;  Once the class is defined, multiple copies of the window can becreated, but all windows of the same class will be handled by the same windowprocedure.andM;After its initialization work, the main procedure spends its time simplyreading messages from the message queue and dispatching them to the windowprocedures.andP;  As the function of this structure implies, most of the work in aPM program is handled by the individual window procedures.andP;  The strength ofthis design is that each window procedure needs to concern itself only withthe function of its window; it doesn't have to worry about other events orwindows in the system.andM;The function of a window procedure is to respond to messages sent to thewindow.andP;  These messages can come from the system, can be sent from otherwindows, or can even be sent by the window procedure itself.andP;  As there areapproximately 100 messages, programming responses to all of them would bequite a job.andP;  But fortunately, the system provides a default procedure thatcan respond to all messages properly.andP;  Consequently, an individual windowprocedure can simply pass any message that it does not process itself ontothe default window procedure.andM;Since messages are the PM's method of communication, it is important tounderstand the concept of messages.andP;  While a message-based environment makesa program amazingly easy to write, it does force you to rethink the way youwrite your program.andP;  Instead of your writing procedures to query the systemfor keys and mouse movements, or to check whether you need to write to thescreen, the system sends you messages to tell you that these events havehappened.andP;  In fact, a window procedure does nothing but react to the messagesit receives.andM;For example, when a window is created, its window procedure receives amessage indicating that a window has been created.andP;  If a window is resized, asize message is sent.andP;  If a window is uncovered and needs redrawing, a paintmessage is sent.andP;  When a window is destroyed, a destroy message is sent.andO;Once a message is received, the program reacts to the specific situation onthe basis of its current state.andP;  The power of this structure is that the codefragment responding to the paint message does not care how the current statewas entered, only that the window needs to be redrawn.andM;Once again, PM programming encourages an easy-to-read compartmentalstructure.andP;  Just as each window procedure needs to concern itself only withits own window, the code to respond to each message needs to concern itselfonly with that particular message.andM;Another way in which PM encourages structured programming is in its use ofresource files.andP;  Resource files define the initial structure of the menus anddialog boxes and provide a place to save message strings, as well.andP;  Resourcescan either be bound to the executable program at link time or can reside asseparate files loaded only as needed.andM;Resource files allow a programmer to remove the user interface structure fromthe code and place it in a separate file.andP;  This allows the user interface ofa program (its dialog boxes, menus, messages, and so forth) to be rewrittenwithout having to recompile the code.andP;  This segregation of the user interfaceprovides a simple way to modify a program for a foreign language.andP;  It alsomakes it possible to have the resource file created by the &quot;human factorsgroup&quot; of a development organization.andP;  Menus, dialog boxes, and messages canthus be designed and redesigned without impacting the code development.andM;THE PMVIEW SOURCE CODEandM;Once you understand the general structure of a PM program, reading and makingsense of PMVIEW.C is very easy.andP;  Like all PM programs, PMVIEW has a mainprocedure and a window procedure for each type of window.andP;  In the case ofPMVIEW, one standard window and a number of dialog box procedures are needed.andM;The main procedure in PMVIEW does more than simple create a message queue andloop.andP;  First, it requests a memory segment in which to store the browsed filefrom the system.andP;  The memory buffer control structure is then initialized.andO;The system is queried using WinQueryProfileData to retrieve any profile datapreviously stored by the program.andP;  Finally, the command line is parsed todetermine the name of the file to browse and whether the program shouldinitially be minimized to an icon.andM;The window class is registered with the system by calling WinRegisterClass.andO;This call provides the parameters for the window class and a pointer to theclient window procedure.andM;The window is created with the call WinCreateStdWindow.andP;  This call providesan easy way to create the normal window used by most programs.andO;WinCreateStadWindow can actually create up to five windows.andP;  Four of thesewindows are controlled by system procedures, while the final window, known asthe client window, is the responsibility of the application program.andM;The four system-driven windows are the title bar, the system menu, theminimize-maximize buttons, and the frame.andP;  The frame window is the mostimportant, as it is the parent of the other four windows (including theclient window).andP;  By being children of the frame window, the remaining fourwindows are automatically referenced to the frame.andP;  That is, when the framemoves, the children automatically move.andP;  Further, child windows are clippedto the parent--that is, they can be seen only within the frame.andP;  Thus theframe is an integral aspect of the concept of a standard window.andM;Window parameters are indicated by a set of flags.andP;  Called Frame Creationflags, these indicate what controls the window has, such as menus, minimizeand maximize buttons, a title bar, and scroll bars.andP;  The flags also providethe system with guidelines about which messages to send to the window.andM;Since PMVIEW can either save the window position from a previous invocationor start as an icon, a call must be made to WinSetWindowPos.andP;  This callpositions and sizes the window and sets the appropriate minimize/restoredstate.andM;Once the client window has been created and positioned, the main procedure isleft with its usual task of reading messages from the message queue anddispatching them to the windows.andP;  The loop is terminated when WinGetMsgreturns the value of 0.andP;  Conveniently, the only message that returns thisvalue is WM_QUIT--the message indicating that the program itself should beterminated.andM;After the message loop is terminated, any opened files are closed and thememory buffer is released.andP;  The client window and message queue aredestroyed, the anchor block is released, and the program is terminated.andM;The client window procedure is simply one large switch statement.andP;  Theprocedure switches on the type of message received.andP;  All messages notprocessed are passed to the default window procedure.andP;  Since the structure ofthe program is divided by the message type, the description of the procedurewill also be discussed that way.andM;The first message received by the window procedure is WM_CREATE.andP;  If afilename was not specified on the command line and the minimization was notselected, the file open dialog box is displayed to ask the user for afilename.andP;  If a filename was entered, that file is opened using the OpenFileroutine.andP;  The name, handle, and size of the file is saved in the fileinformation structure.andM;During WM_CREATE, PMVIEW determines the window handles assigned to the scrollbars, the menu, and the frame.andP;  These handles are needed so that messages canbe sent to the various windows.andP;  The values of the handles are determined byusing WinQueryWindow to determine the parent of the client window (the framewindow.)andP;  A series of Calls to WinWindowFromID with the appropriate flagsreturns the handles of the remaining windows.andM;After this, an AVIO space is created.andP;  An AVIO space is an area in thecomputer's memory that appears to the PM program as a virtual text-modescreen.andP;  In order to create the AVIO space, a presentation space is firstrequested using GpiCreatePS.andP;  Then the AVIO space is created by usingVioCreatePS.andP;  The two spaces are then associated with VioAssociate.andM;The video driver is queried to determine the number and sizes of theavailable cell sizes.andP;  Since the AVIO space is a text space, the cell sizedetermines the font size.andP;  Two cell sizes are available for EGA and VGAdevices, and eight cell sizes are available for the 8514.andP;  The cell size readfrom the profile data is set and then read back.andP;  If the cell size saved doesnot match one available from the driver, the driver makes the closest matchit can.andM;A WM_PAINT message is sent when the system determines that a part of theclient window needs to be redrawn.andP;  PMVIEW assumes that the entire AVIO spaceneeds redrawing, and the DisplayLine routine is called to write each line tothe screen.andM;The DisplayLine routine writes the contents of the file pointed to by1LinePTr to the line specified by sRow.andP;  The file is written as ASCII if thefDisplayASCII flag is set; otherwise 16 bytes of the file are converted fromhex to ASCII and displayed.andM;Routines that need file data, such as DisplayLine, call GetFileDataPtr toreturn a pointer to a buffer area containing the data.andP;  GetFileDataPtr ispassed an offset into the file and returns a long pointer to the file data.andO;A limit value, which represents the number of bytes until the end of thecurrent buffer, is also returned.andP;  If a routine needs data past the end ofthe current buffer, GetFileDataPtr is called again with an updated fileoffset.andM;PMVIEW keeps four data buffers, which contain the last four regions of thefile requested.andP;  When GetFileDataPtr is called, it compares the file offsetpassed with the buffer-control structure to determine whether that part ofthe file is in memory.andP;  If the data is in a buffer, the pointer to thatbuffer is returned; otherwise, that part of the file is read into the bufferwith the least-recently used data.andM;When a WM_SIZE message is received, indicating that the window has beenresized, the new size of the window is recorded and the scroll bars areadjusted.andP;  The new size of the window is passed in the mp2 parameter.andP;  Thethumb size is adjusted by sending an SBM_SETTHUMBSIZE message to both thehorizontal and vertical scroll bar handles.andP;  The horizontal scroll positionis adjusted if the new window size exposes the far-right edge of the AVIOspace.andM;The WM_COMMAND message processing uses the majority of the window procedure:it is here that menu selections are processed.andP;  Like the messages, menuselections are parsed using a switch statement.andP;  The identity of the itemselected is passed in the mp1 parameter.andP;  The processing of selections isusually quite simple.andM;When the File Open (IDM_OPEN) menu item is selected, the file open dialog boxis displayed using the WinDlgBox function.andP;  The WinDlgBox routine is actuallya combination of three functions: WinLoadDlg, to load the dialog resource;WinProcessDlg, to transfer control to the dialog box procedure; andWinDestroyWindow, to remove the window.andP;  WinDlgBox provides a simple way toquery the user for input.andP;  The formal of the dialog box is defined in theresource file, and the function of the box is provided by thefile-open-dialog-box procedure.andM;The file-open-dialog-box procedure returns a Boolean value that indicateswhether the user selected a file or selected the cancel button instead.andP;  If afile was selected, OpenFile is called to attempt to open the file.andP;  If theattempt is successful, the old file is closed, and the new name and filehandle are placed in the file information structure.andP;  WinInvalidateRect iscalled in order to force a WM_PAINT message to be sent.andM;When the user selects Exit (IDM_EXIT), to end the program, PMVIEW simplyposts a WM_QUIT message to itself.andP;  Since the WM_QUITT message returns aFALSE to the WinDispatchMsg function, the message processing loop is exited.andO;Once the message loop is terminated, the main procedure destroys the windowand terminates the program.andM;When Find (IDM_FIND) is selected, a dialog box is displayed to ask the userto enter the search string.andP;  If the dialog box returns a TRUE value, thesearch routine is called to find the string.andP;  If the string is found,1ViewPtr is updated to the new location and WinInvalidateRect is called.andM;As with Find, when Goto (IDM_GOTO) is selected, a dialog box is displayed todetermine the new view pointer.andP;  If TRUE is returned, the view pointer isupdated and WinInvalidate is called.andM;Configure (IDM_CONFIGURE) displays a dialog box to query the user for variousparameters--window color, font size, display format, tab stop value, andscroll bar visibility.andP;  Upon a successful return from the dialog boxprocedure, routines are called to set the proper menu attributes and to setthe visibility of the scroll bars.andP;  Since the format of the display haschanged, WinInvalidateRect is called to force the window to be repainted.andM;Display ASCII (IDM_DISPLAY-ASCII) sets the display ASCII flag, modifies themenu attributes, and invalidates the window.andP;  The SetASCII routine modifiesthe menu attribute by sending a MMSETITEMATTR message to the menu window.andO;This message defines the attribute to modify--in this case, the checkmark--and its new state.andP;  This selection and the Display Hex selection aremutually exclusive, so the routine removes the check from the Display Hexselection.andP;  WinInvalidateRect is then called to display the new format.andM;The Display Hex (IDM_DISPLAY-HEX) selection has the same function as theDisplay ASCII selection, but the Display ASCII flag is cleared.andP;  As above,the window is invalidated to produce a repaint that will show the new format.andM;The Scroll Bar selection (IDM_DISPSCROLLBARS) toggles the visibility of thewindow scroll bars.andP;  To hide the scroll bars, PMVIEW sets the parent of thescroll bars to HWND_OBJECT.andP;  The frame is then updated.andP;  Since the scrollbars are no longer children of the frame, they are overwritten by the clientwindow.andP;  To restore the scroll bars, a message is sent to reset them aschildren of the frame window.andP;  As in the Display ASCII selection, the menu isupdated with a check mark to indicate the status.andM;The Font Size selection (IDM_FONT-SIZE) is of interest because the text ofthe menu is actually modified according to the state of the window.andP;  For CGAsystems the selection is disabled, since there is only one AVIO cell size.andO;On EGA and VGA systems, two font sizes are available.andP;  The menu item forthese systems is set to Small Font when the large cell size is enabled and toLarge Font for the small cell size.andP;  On 8514/A systems, the menu selection isFont Size.andP;  Selecting the item displays a dialog box with the possible cellsizes listed in a list box.andP;  The cell size is changed by callingVioSetDeviceCellSize.andM;The About selection under the help menu simply displays a dialog box thatcontains program information.andP;  The About dialog box demonstrates how simple adialog procedure can be.andM;WM_CHAR messages are received each time the user presses a key.andP;  PMVIEWignores all keys, however, except those needed for scrolling the file.andP;  Thereis no need to interpret the accelerator keys for the menu items, since anaccelerator table is defined in the resource file.andP;  PM translates acceleratorkeys into menu selection messages automatically.andP;  To simplify the keyboardprocessing still further, when cursor and page keys are received, PMVIEWsimply posts messages to the appropriate scroll bar window so that these areprocessed as scroll bar events.andP;  Thus, the only two keys directly interpretedby PMVIEW are the Home and End keys.andP;  These two keys cause the File Viewpointer to be updated (to 0 or to the file size) and further cause the windowto be invalidated, then repainted.andM;The scroll bars communicate to the client window by sending WM_HSCROLL andWM_VSCROLL messages.andP;  For both of these messages, mp2 contains the event toprocess.andM;PMVIEW handles horizontal scrolling simply by panning across the AVIO space.andO;DisplayLine writes a line to the next carriage return or to the end of thepresentation space, regardless of what part of the space is visible.andP;  To panacross the AVIO space VioSetOrg is called to adjust the starting column ofthe AVIO space to display.andM;Vertical scrolling is handled by scrolling the AVIO space the necessarynumber of lines, then calling DisplayLine to fill in the lines made vacant.andO;The MoveViewPtr routine is called to determine the number of bytes to movethe view pointer forward or backward.andP;  MoveViewPtr counts the number ofcarriage returns if displaying ASCII characters, or counts blocks of 16 bytesper line, if in hex mode.andM;A WM_DESTROY message is sent when the client window is about to be destroyed.andO;When this message is received, the AVIO space is disassociated from thepresentation space and both are then destroyed.andM;Just as the client window has a procedure to accomplish its functions, soeach dialog box has a dialog box procedure.andP;  In PMVIEW the dialog proceduresrange from the almost trivial About dialog box to the fairly complex FileOpen and Configure dialog procedures.andP;  Dialog procedures are interesting inthat there is much more interaction with controls such as buttons, listboxes, and entry fields.andP;  As with almost everything else in PM, controls aresimply windows that are communicated with using messages.andP;  Each control has adefined set of messages that it recognizes and sends.andM;Resource files are a great timesaver for the application programmer.andP;  Sincethe arrangement of menus and dialog boxes is defined by a set of tables, theycan be rearranged or supplemented quickly.andP;  For PMVIEW, the resources aredivided between the PMVIEW .DLG file, which describes the configuration ofthe dialog boxes, and PMVIEW .RC, which describes the menus and acceleratortable.andP;  PMVIEW .DLG is included in the resources via an include statement inPMVIEW .RC.andM;OS/2: A CLEAR WINNERandM;PMVIEW shows that a powerful Presentation Manager program, though complex inoutward appearance, can really be written easily by a competent programmer.andO;Since PM performs the difficult jobs, an application program has to concernitself only with its unique function.andP;  Mundane procedures such as screenhandling and keyboard reading are a thing of the past.andM;While the future of OS/2 is argued by the industry pundits, to theapplication programmer the choice is clear: the power of the PM programmingenvironment makes OS/2 a big winner.andP;  Now for some more of those utilities toreplace!andM;PMVIEW BY MODEMandM;The programs published in PC Magazine are available by modem from PC MagNet.andM;To join PC MagNet, set your communications software for either 300 or 1,200bits per second, 7 data bits, even parity, 1 stop bit, and full duplex.andP;  Tofind the number nearest your dialing exchange, dial (800) 346-3247.andP;  When themodem connects, press Enter.andP;  At the HOST NAME prompt, enter PHONES.andP;  Followthe menus and note the number closest to you.andM;After you have found the phone number nearest you, hang up and redial usingthat number.andP;  When you connect with PC MagNet, press Ctrl-C.andP;  At the HOSTNAME prompt, enter CIS.andP;  At the USER ID prompt, enter 177000,5000.andP;  EnterPC*MAGNET at the PASSWORD prompt and Z10D9013 at the ENTER AGREEMENT NUMBERprompt.andP;  For Customer Service, call (800) 848-8990; outside the UnitedStates, call (614) 457-8650.andM;To download PMVIEW.EXE and/or its C language source listing and relatedfiles, log on to PC MagNet.andP;  Enter GO UTILITIES or choose PC MAGAZINEUTILITIES from the top menu, then DIRECT UTILITY DOWNLOAD from the next menu.andO;Enter the filename, then select the file you want to download from thosepresented.andP;  Answer yes (Y) to DO YOU WISH TO DOWNLOAD?andP;  Press Enter to seethe transfer protocols.andP;  Choose a protocol and download the file.andM;You don't have to be a member of CompuServe to access PC MagNet.andP;  It costs$12.80 an hour for 1,200/2,400-bps service and $6.30 for 300-bps, viaMasterCard, VISA, or American Express.andP;  These programs can be copied but arecopyrighted and are made available only for noncommercial use.andP;  You may makecopies for others as long as no charge is involved, but making copies for anycommercial purpose is prohibited.andM;PC UTILITIES UPGRADESandM;Like all good software, the programs presented in PC Magazine are upgradedand improved.andP;  The only way to obtain the modified versions is to downloadthem from PC MagNet.andP;  Here is a partial list of the programs that have beenupgraded to fix minor bugs and system incompatibilities: ANSI.COM, Version1.3 CARDFILE.COM, Version 1.1 CHKFRAG.EXE, Version 1.2 (now works withvolumes greater than 32MB) DIRMATCH.COM, Version 2.0 EMS40.SYS, Version 1.1(fixes a problem that EMS40 had with Lotus 1-2-3) LITES.COM, Version 1.1LOG.COM, Version 1.1 MENU.COM, Version 1.1 RN.COM, Version 2.0 (now worksunder DOS 4.x) SLICE.COM, Version 1.3 SNIPPER.COM, Version 1.2 ZCOPY.COM,Version 1.2andM;For a complete list of all the programs available from the PC MagNetUtilities Database, download UDCAT.ARC.andM;A downloadable index to PC Magazine's product reviews is also available.andO;PCM.EXE is a self-extracting file that contains the Computer Library PCMagazine Reviews Index for January 1988 to December 1989.andP;  This easy-to-usedatabase is a subset of Computer Library's Periodicals Database, which isavailable on CD-ROM and on PC MagNet.andP;  It requires the search files inPCSRCH.EXE.andM;PCSRCH.EXE is a self-extracting archive containing the software used toretrieve citations from the PC Magazine Reviews Index.andP;  Please read theinformation file PCM.INF before you download any of these files.andM;Douglas Boling is a contributing editor of PC Magazine.andO;</TEXT></DOC>