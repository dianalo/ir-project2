<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-188-548  </DOCNO><DOCID>08 188 548.andM;</DOCID><JOURNAL>AI Expert  March 1990 v5 n3 p26(11)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Object-oriented knowledge bases. (Part 1)</TITLE><AUTHOR>Manola, Frank.andM;</AUTHOR><SUMMARY>Today's heterogeneous computing environments demandinterconnectivity and interoperability for effective resourcemanagement.andP;  'Intelligent' interoperability requires multipleintelligent information systems to interact.andP;  Knowledge-basedintegrated information systems may use object orientation toachieve this goal.andP;  Object-oriented systems represent data asself-contained entities consisting of private data and sets ofoperations.andP;  Objects are grouped into classes that define theirinternal form.andP;  An object-oriented data base management system(OODBMS) adds to this concept by emphasizing concurrency controland set-oriented queries.andP;  It supports user-defined datastructures via inheritance.andP;  OODBMSs are limited in their supportfor heterogeneous data integration and do not integrate existingcode.andP;  Heterogeneous distributed DBMSs use a global data managerto create global views of heterogeneous data Both new types ofdatabases provide extensions of existing database technology thatwill be very valuable in future knowledge-based applications.andM;</SUMMARY><DESCRIPT>Topic:     Object-Oriented Data BasesKnowledge-Based SystemsExpert SystemsArtificial IntelligenceResource Management.andO;Feature:   illustrationchart.andO;Caption:   From separate applications to the database. (chart)Objects and object classes in a CAD application. (chart)An object-oriented database-management system. (chart)andM;</DESCRIPT><TEXT>Part IandM;Database-technology extensions can address the stringent requirements ofinteroperative information systemsandM;Computers have expanded into every facet of large organizations.andP;  Thisexpansion is manifested in the widespread appearance of powerful personalcomputers for desktop uses and workstations for more specialized ones, whichare becoming common in routine business functions of all kinds.andP;  As a resultof this trend, future information-processing environments will comprise vastnetworks of heterogeneous mainframe and personal computers,information-intensive applications, and data resources (files or databases).andM;With the increase in heterogeneous information resources, includingprocessors (hardware), process descriptions (programs), and data resources,corresponding requirements to manage these resources in unanticipatedcombinations also increase.andP;  Proper resource management allows you to addressnew requirements and obtain the greatest possible leverage from availableresources.andM;These requirements can be met in two phases.andP;  The first is interconnectivity.andO;Most computer systems are disjointed and unable to communicate with othersystems; two or more systems are interconnected if they can exchangemessages.andP;  Demands are increasing (for example, greater use of LANS) forinterconnectivity to enable different people, functions, and organizations tocommunicate and share data and processing resources.andP;  Effectiveinterconnectivity requires universal interface capabilities among informationsystems, and these needs are not fully addressed by current communications ordistributed systems technologies.andP;  The heterogeneity of existing systems is amajor barrier to addressing these needs.andP;  Furthermore, interconnectivityguarantees only communication; the network user (human or computer) stillmust understand the system's particular interface.andM;The second phase is the more ambitious goal of interoperability.andP;  For ourpurposes, two or more systems are interoperable if they can interact toexecute tasks jointly.andP;  Simple tools for achieving interoperability areappearing as distributed programming capabilities, including protocols suchas IBM's LU 6.2 [1,2] and various remote procedure call capabilities found,for example, in distributed operating systems.andP;  [3]andM;A more advanced form of interoperability called intelligent interoperabilityrequires interaction among information systems, some of which may beintelligent and capable of functioning as intelligent agents.andP;  Distributedquery processing is one very simple example of intelligent interoperability:a global access plan is developed that attempts to optimize use of individualdatabase systems attached to a network.andP;  The intelligent interaction isachieved by an external global query optimizer component.andP;  Other capabilitiesthat may be involved in intelligent interoperability include automaticinvocation of required translation between the interacting systems' languagesand data structures, advanced forms of synchronization to coordinate accessto shared resources, and systems that use knowledge of the cooperatingactivities to optimize overall performance.andP;  Such advanced forms ofinteroperability could employ computing resources to perform new tasks andhelp integrate new computing resources to support changing requirements.andM;These interoperative systems are sometimes called knowledge-based integratedinformation systems (KBIIS).[4] They involve integrating any heterogeneousinformation sources, including heterogeneous distributed databases,knowledge-based systems (such as expert systems) involving heterogeneousknowledge representations, and conventional application programs and theirassociated processors.andM;The full range of KBIIS requirements are only beginning to be addressed byresearchers.andP;  This article describes how database-technology extensions canaddress some of these requirements, the status of these technologies, andresearch on further extensions to better address KBIIS requirements.andM;INFORMATION INTEGRATIONandM;The KBIIS concept is a continuation of technical trends that motivated thedevelopment of database technology.andP;  Database-management systems wereoriginally introduced to integrate and manage information resourcesrestricted to data used by application programs in business-data processing.andO;Before these systems were introduced, data was dispersed among multipleapplications, organized according to the needs of individual applications andaccessible only through them.andP;  Consequently, accessing and organizing datafor new and unanticipated purposes was difficult.andP;  Redundancy, both of dataand program code required to manipulate and maintain the multiple applicationfiles, was common.andM;Redundancy and its associated costs an potential for errors was reduced bydatabase-management systems.andP;  But their primary benefit was the central datarepository (and accompanying data-management facilities) equally accessibleby multiple applications (Figure 1).andP;  Using the database-management system asa centralized management facility, the data in this repository could beaccessed in any amount or combination desired by applications or queries,providing a new degree of uniformity and flexibility in response to changingdata requirements.andM;In practice, this view of the central database proved to be an illusion.andO;First, sections of organizations developed independent databases, frequentlyusing different, heterogeneous database-management systems.andP;  Second, theconventional database systems could integrate only a fraction of the dataused in most organizations.andM;Database technology is being extended in two ways to address additionalrequirements for integrating information resources: first, object-orienteddatabase-management systems attempt to extend flexibility to &quot;unconventional&quot;data and associated processing tasks (including text, graphics, and voicedata) that cannot be handled and integrated by conventional database systems.andO;Second, heterogeneous distributed database-management systems try to solvethe problem of integrating separately developed, heterogeneous databases.andM;OBJECT-ORIENTED SYSTEMSandM;The original object concept is generally attributed to the Simula programminglanguage.[5] However, object-oriented programming did not really emerge as anew programming paradigm until the development of Smalltalk.[6] To date, manyobject-oriented languages have been developed and some are widely used.andM;The facilities a language or system must have to make it &quot;object-oriented&quot; isdebatable, and object languages differ greatly even in the fundamentals.andP;  Asa result, I primarily use the concepts and terminology of Smalltalk,considered a fairly &quot;pure&quot; object-oriented language.andP;  Surveys ofobject-oriented language principles and their characteristics [7-10] andpapers illustrating the scope of object-oriented technology [11-14]  areavailable.andM;In a pure object-oriented language or system, all information is representedin the form of objects.andP;  An object is a self-contained entity consisting ofits own private data (called instance variables in Smalltalk) and a set ofoperations (sometimes called its protocol).andP;  These operations constitute theobject's external interface to the rest of the system.andP;  All interaction withan object occurs through messages sent to it requesting an operationexecution in its protocol.andP;  (A message is a form of procedure call; it is notnecessarily the same as a message representing a unit of communication in adistributed system.)andM;A computation is defined as a sequence of interactions among objects in thesystem.andP;  Instead of naming a procedure to perform an operation on an object,the object is identified and a message sent to it.andP;  A selector in the messagespecifies the operation to be performed.andP;  An object that receives a messageis responsible (conceptually, at runtime) for deciding how to respond to themessage using its own procedures (called methods) for performing therequested operation.andP;  These methods have the exclusive capability ofmanipulating the object's private data and can also send messengers to askother objects to perform operations and return appropriate results.andM;In most object-oriented systems, objects are defined as members of one ormore classes.andP;  The class defines the internal form of every object of theclass and the protocol associated with objects of the class.andP;  In manyobject-oriented languages, an object class is represented by a class object.andO;This object stores, among other things, the code for the methods of allobjects of the class so they need not be duplicated in each individualobject.andM;Object-oriented language users can define new object classes, which can beused in the same way as object classes supplied with the language.andP;  Thiscapability allows the extension of the language with types specific toapplication requirements.andP;  New object classes can also be defined asextensions of existing ones by a technique called inheritance.andP;  If object Bis specified as inheriting from object A, B will respond to the same messagesas A in addition to those defined specifically for B. Using inheritance inobject definitions assists in defining object protocols in a relativelystandardized way.andP;  This technique, and the use of messages, provides afacility called polymorphsm (technically a form of operator overloading).andO;Polymorphism is a message's capability to elicit different (but semanticallysimilar) responses depending on the class of the receiving object.andP;  Thisfacility enables a program to treat objects from different classes uniformly.andO;The characteristics of definable objects in an object-oriented language, suchas which classes or kinds of inheritance exist or whether explicit deletionis allowed, are sometimes referred to as the language's object model.andM;Figure 2 shows some simple object classes and objects that may be defined fora computer-aided design application and that illustrate variousobject-oriented system capabilities.andP;  The top-left object represents a partobject class.andP;  The object class has display, weight, specification, andpart_number methods.andP;  The top-right object represents a part object(instance) with the associated messages that can be sent to it around theoutside and instance variables representing the state of the individualobject within the object.andP;  A weight message sent to this object would returna number (object) representing the weight of the part.andP;  The exact mechanismused by the object to respond to such messages is encapsulated within theobject and is not visible outside.andM;The bottom-left object represents the object class for a specialized type ofpart object, a 3Dsolid object.andP;  Because the 3Dsolid object (instance) on thebottom right is defined as a specialization of object class part, it inheritsall the messages that apply to part objects.andP;  In addition, the 3Dsolid objectclass defines two additional methods that apply only to 3Dsolid objects,union and intersection.andP;  union and intersection messages sent to a 3Dsolidobject include another 3Dsolid object as an argument and return the 3Dsolidthat represents the union or intersection of the argument object and theoriginal object.andP;  The 3Dsolid object class also redefines the weight methodinherited from class part.andP;  For example, the weight method for class part maylook up the value of the part's weight in an instance variable, while theweight method for class 3Dpart may compute the weight from information storedin instance variables about the part's geometry and density.andP;  Due to methodinheritance from class part, only the three new methods must be explicitlydefined for object class 3Dsolid.andM;Because the exact method used to respond to a given message is encapsulatedwithin the object, users need know only how to send the appropriate messagesto use the operations associated with any object.andP;  For example, a user mighthave a set of types of parts to be displayed.andP;  The user need only send thedisplay message to each object in the set.andP;  The object determines how todisplay itself (this might be different for each kind of part).andP;  The sameapplies if the user wishes to know the weight of the objects.andP;  In this case,the user need not know whether a given object is an ordinary part or a3Dsolid but only that all kinds of parts respond to a weight message.andP;  Theobject itself determines how to respond to that message.andM;Some advantages cited for object-oriented programming include:andM;* Defining a system in terms of objects facilitates the construction ofsoftware components that closely parallel the application domain, thusassisting in system design and understandabilityandM;* Using objects and messages encourages modular design since, at least in apure object-oriented language, the implementation of one object cannot dependon internals of another, only on how they respond to messages.andP;  Also, becausethe private information of an object can be accessed only by the object'smethods, modularity is reinforced and software can be made more reliable.andM;* Using classes and inheritance provides a simple and expressive model forthe relationship of various parts of the system's definition and assists inmaking components reusable or extensible in system construction.andM;OBJECT-ORIENTED DATABASESandM;Object-oriented database management systems (OODBMSs) [15-19] use the sameconcepts as object-oriented programming but emphasize additionalcharacteristics necessary to support large, shared, persistent object stores(facilities for objects that must persist beyond a single program execution'slife-span).andP;  These characteristics include efficient processing over largesecondary storage organizations, concurrency control, recovery facilities,and (sometimes) efficient processing of set-oriented requests or queries.andM;An OODBMS stores objects: encapsulated combinations of data structures withassociated procedures, not data.andP;  This characteristic allows instances ofarbitrary data types to be stored within the &quot;database&quot; (Figure 3).andP;  TheOODBMS provides data integration, overall control, and database-managementsystem support facilities for all types of objects.andP;  Applications cancommunicate via the shared database (although object base would be a moreappropriate term).andM;In contrast to a conventional relational database-management system, atypical OODBMS supports user-defined data structures and operations on themin terms of object classes and method inheritance.andP;  Other OODBMS aspectsinclude support for object identity (the object has an identity independentof its attribute values) and direct object relationships.andP;  (Objects relatedto a given object are accessed by invoking a method of the given object, asif the related objects were part of the given object's internal data.)andM;These systems have been developed to support applications whose datastructures are too rich for the simple structure of conventional databasemodels, such as the tables provided in the relational model.andP;  Applicationsinclude support for spatial objects, graphics objects, AI knowledgerepresentations, and software-engineering environments.andP;  Some commercialOODBMSs are Servio Logic's GemStone, [20] Ontologic's Vbase [21] and itssuccessor Ontos, Graphael's G-Base, and Innovative Systems' VISION.andM;The basic goal of an object-oriented database is to represent an entity orobject in the real world that is modeled with a corresponding object in thedatabase.andP;  This representation includes modeling the behavior of each objectand its structure and relationship to other objects.andP;  The one-to-one mappingreduces the semantic gap between the real world and the database modeling ofthat world.andP;  Further, when coupled with an object-oriented programming style,this technique reduces the semantic gap between a program and its supportingdata.andM;The term &quot;object-oriented&quot; describes various collections of facilities inprogramming languages&quot; and database systems.andP;  For example, three levels ofobject orientation have been defined for database systems: [16]andM;1.andP;  If the data model allows the definition of data structures to represententities of any complexity (sometimes called complex objects in the databaseliterature), the model is structurally object-oriented.andM;2.andP;  If the data model includes generic operators to manage complex objects intheir entirety rather than forcing the decomposition of the operations into aseries of simpler ones, the model is operationally object-oriented.andP;  Modelsin this class are necesssarily structurally object-oriented.andM;3.andP;  If the data model (like an object-oriented programming language) allowsthe definition of arbitrarily complex object types together with a set ofspecific operators so that objects may be used only by calling theseoperators, and the internal structure of the objects may be accessed only bythe implementation of these operators, the model is behaviorallyobject-oriented.andP;  Models in this class are necessarily both structurally andoperationally object-oriented.andP;  For our purposes, I'll use the term&quot;object-oriented database-management system&quot; to refer only to behaviorallyobject-oriented database systems.andM;These systems are being developed as research prototypes and commercialproducts since they contribute the advantages of database processing toapplications involving data types such as text, images, graphics, andknowledge representations.andP;  But even this technology is not enough to supportthe requirements of KBIISs fully.andM;First, OODBMSs provide only limited support for integrating data in existing,possibly heterogeneous, databases with the database maintained by the OODBMS.andO;(Of course, existing data can always be reformatted and reloaded.andO;Additionally, in some commercial products, an existing relational databasecan be accessed from the OODBMS via a query interface to create new objects.)andO;This rather limited ability to integrate existing data is a handicap inmanaging the existing databases and a possible future environment in whichmultiple heterogeneous OODBMSs are present within the organization.andM;Second, typical OODBMSs do not integrate existing database-application codewith the object methods maintained by the system (except by rewriting theprocedures in the OODBMS' language).andP;  This point is somewhat similar to theprevious one but concerns procedures rather than data: an object-orienteddatabase stores object procedures (methods) and object data (instancevariables).andM;Finally, some OODBMSs do not emphasize the efficient processing ofset-oriented queries, although most of the commercial OODBMSs provide someform of query facility.andP;  This processing is a difficult problem since itrequires extensible query optimizers to process queries involving calls toobject methods the query optimizer may know little or nothing about.andP;  [23,24]However, failing to support set-oriented queries even for conventional datatypes might lead to increased heterogeneity when an OODBMS is introduced.andP;  Itmay be necessary to operate a OODBMS for unconventional data types and arelational database-management system for applications requiring efficientquery and transaction processing.andM;HETEROGENEOUS DATABASESandM;One issue not addressed by OODBMS technology and conventional databasetechnology generally is existing (and new) database systems.andP;  Multipleheterogeneous database systems in organizations model the independentapplications and files described earlier.andP;  Instead of separate files, eachwith its own application, there are separate databases, each with its owncluster of applications.andP;  Data redundancy and inflexibility problems exist inboth cases.andM;One approach to this problem is the heterogeneous distributed database system(HDDBMS).andP;  A HDDBMS is a set of components designed to integrate existingdatabase-management systems and their associated databases.andP;  This subject isa very active area of research.andP;  [25-31] The general approach taken by manyof these systems is illustrated by the generic component architecture shownin Figure 4.andM;In this approach, a global data manager (GDM) component is responsible forcreating a global view of the collection of heterogeneous databases.andO;Requests expressed in terms of this global view and a global query languageare translated by the GDM into requests on the local databases containingdata needed to satisfy the request.andP;  Each local request, expressed in theglobal query language, is sent to the local data interface (LDI) componentresponsible for that system.andP;  The LDI is responsible for translating therequest into the language used by the local database-management system,accepting its response, translating it into a system-wide protocol, andreturning the response to the GDM for further processing and integration intothe final result.andM;Variants of the HDDBMS approach may be appropriate, depending on thecircumstances.andP;  For example, a HDDBMS may have one or more GDMs.andP;  The globalview presented by the GDM may be a single schema formed by complex mappingsfrom the local schemas of the attached databases, or it may simply be thecollection of the local schemas themselves.andP;  [28] The system may allow localdatabases to use multiple data models or require that all databases supportthe same model, as long as the systems are heterogeneous in some way.andP;  Thesystems may allow varying types of schemas or views to be defined at variouslevels of the architecture, and so on.andP;  This range of capabilities isillustrated in Figure 5.andP;  One way or another, the user sees some view of themultiple databases, and the system provides some transformation from requestson that view to those on the local systems.andM;Most HDDBMSs are research prototypes, although some commercialdatabase-management systems are beginning to provide gateways to otherdatabase-management and file systems.andP;  In most cases, global transparentaccess provided by HDDBMSs is query-only, with updating restricted to singlesites, due to problems with guaranteeing concurrency control overheterogeneous databases.andM;Many developers are working on heterogeneous database-management systemsbecause they promise to provide common accessibility to many databases.andO;However, like OODBMSs, conventional HDDBMS technology is not enough tosupport the requirements of KBIIS systems.andP;  For example, typical HDDBMSsprovide only for the integration of conventional database data, not for thegeneral types of objects found, for example, in OODBMSs.andP;  (This fact suggeststhat future HDDBMSs will need to be object-oriented, or at least extensible,to support integration of conventional DBMSs and OODBMSs.)andM;In addition, HDDBMSs restrict themselves to heterogeneous data and do notprovide for the integration of existing applications.andP;  Finally, typicalHDDBMSs are inflexible in how they integrate data.andP;  For example, one type ofHDDBMS may not allow the integration of data into a global schema, whileanother may not allow the individual local databases to be queried in theirnative languages.andM;THE NEED FOR EXTENSIONSandM;Both the OODBMS and the HDDBMS extend database technology in ways thatincrease the ability to integrate previously diverse information resources.andO;But several problems remain.andP;  For example, neither system supports trueintegration of processing as opposed to data.andP;  Creating unanticipatedcombinations of processing components is not supported.andP;  HDDBMSs only providefor integrating data; some integration of processing (such as the proceduresassociated with the objects) is supported in OODBMSs.andP;  However, processingassociated with applications is not fully integrated, and a single OODBMSdoes not allow integration of processing defined in multiple object models.andO;Furthermore, neither technology is designed to support advanced forms ofinteroperability, such as cooperation in staging data between database and anapplication, or any other forms of cooperation among components.andM;I believe that KBIIS applications require the ability to:andM;* Integrate existing heterogeneous databases, as in a generalized HDDBMSandM;* Integrate both conventional and unconventional data types, as in ageneralized OODBMSandM;* Provide full relational functionality for the integrated data, includingappropriate forms of query processing, concurrency control, and recoveryandM;* Use existing applications in defining object methodsandM;* Form unanticipated combinations of processing components in responding to agiven requestandM;* Support almost arbitrary levels of integration (essentially, from none tototal)andM;* Support advanced forms of interoperability among cooperating (possiblyknowledge-based) components.andM;Desktop publishing provides a simple illustration of some of thesecapabilities.andP;  Suppose you use a Macintosh to prepare a report involvingtext, graphics of various kinds, spreadsheet information, and informationfrom a database, such as the page shown in Figure 6A.andP;  In the Macintoshenvironment, you can import heterogeneous data into many text processorsusing the cutting and pasting facilities.andP;  This capability enables creationof pages such as the one shown in the figure.andP;  However, the ability to usethe operators normally available in the creation of that data is lost.andP;  Forexample, if the triangle in the figure had to be modified, it would benecessary to go back into the original application (MacDraw in this case) tomodify the original figure, and then reimport the figure into the textprocessor.andM;A preferable facility is shown in Figure 6B.andP;  Here, selecting a particulartype of data or object within the page allows use of the operations normallyavailable with that object.andP;  One approach would be to write an entirely newapplication containing the union of the desired features.andP;  Some recenttext-processing systems (as well as Apple's Hypercard) illustrate thisapproach.andP;  However, a better approach is to construct the new applicationfrom the existing ones.andP;  In this case, selecting a particular data type orobject within the page would trigger the existing application (effectivelyrepresenting the object methods) used to create the object in the firstplace.andM;Obviously, some additional coding would be required to construct this new,integrated application.andP;  For example, the ability to create a unified userinterface to the multiple existing applications and document structurescontaining components of the heterogeneous types (text, graphics, and so on)should be added.andP;  However, the ability to access the heterogeneous objectsand applications themselves is fundamental.andP;  Hewlett-Packard's NewWaveenvironment [32] is an example of this type of facility, although it requiresthat the applications involved be specialized to run under NewWave; similarfacilities are under development for other computing environments.andM;In addition, given our assumptions about future information processingenvironments KBIIS applications will also require support for a furthergeneralization in which the applications and the associated (object) data maybe distributed throughout a computer network and possibly run onheterogeneous hardware.andP;  Providing such a facility would require the abilityto store and retrieve arbitrary data types from files or databases, invokearbitrary application programs and create arbitrary combinations of invokedapplication functions, and move data between invoked applications as needed.andO;These capabilities are a combination of those provided by operating systems,database systems, and programming languages.andP;  The UNIX operating system is asimple example of the facility.andP;  It combines basic operating system services,shell-language facilities enabling invocation of arbitrary programs, andpipes to enable applications to communicate with each other.andP;  However, suchfacilities must be considerably more uniform and support greaterheterogeneity to support KBIIS requirements fully.andM;So far, we have described how database technology, and in particularobject-oriented and heterogeneous distributed database systems, haveattempted to address the requirements of integrating information andinformation processing resources, and some requirements not addressed bythose types of systems.andP;  Part 11 will describe an extension calleddistributed object-management technology and discuss how object-orienteddatabase technology and distributed object management can be applied inintegrating KBIIS resources.andP;  Part II will also survey relevant technologyand research areas.andM;REFERENCESandM;1.andP;  Systems Network Architecture: Format and Protocol Reference Manual:Architecture Logic for LU Type 6.2 IBM Corp., SC30-3269-3, Dec. 1985.andM;2.andP;  Griswold, C. &quot;LU 6.2: A View from the Database,&quot; DATABASE PROGRAMMING andamp;DESIGN, May 1988.andM;3.andP;  Tanenbaum, A.S., and R. van Renesse.andP;  &quot;Distributed Operating Systems.&quot;andO;ACM Computing Surveys 17(4), Dec. 1985.andM;4.andP;  Gupta, A., and S. Madnick, eds.andP;  Technical Opinions RegardingKnowledge-Based Integrated Systems Engineering MIT-KBIISE-8.andP;  MassachusettsInstitute of Technology, Cambridge, Mass., 1987.andM;5.andP;  Dahl, O.J., and K. Nygaard.andP;  SIMULA-AN Algol-based Simulation Language,&quot;Communications of the ACM 9: 671-678.andM;6.andP;  Goldberg, A., and D. Robson.andP;  Smalltalk-80: The Language and ItsImplementation.andP;  Reading, Mass.: Addison-Wesley, 1983.andM;7.andP;  Micallef,J.andP;  &quot;Encapsulation, Reusability and Extensibility inObject-Oriented Programming Languages.&quot; Journal of Object-OrientedProgramming l(l), April/May 1988.andM;8.andP;  Stefik, M., and D.G.andP;  Bobrow.andP;  &quot;Object-Oriented Programming: Themes andVariations.&quot; AI Magazine 6(4), 1986.andM;9.andP;  Stroustrup, B. &quot;What Is Object-Oriented Programming?&quot; IEEE Software 5(3),May 1988.andM;10.andP;  Yonezawa, A., and M. Tokoro, eds.andP;  Object-Oriented ConcurrentProgramming.andP;  Cambridge, Mass.: MIT Press, 1987.andM;11.andP;  Meyrowitz, N., ed.andP;  OOPSLA  86 Conference Proceedings, ACM, Sept. 1986,published as SIGPLAN Notices 21 (11), Nov. 1986.andM;12.andP;  Meyrowitz, N. ed.andP;  OOPSLA  87 Conference Proceedings, ACM, Oct. 1987,published as SIGPLAN Notices 22(12), Dec. 1987.andM;13.andP;  Meyrowitz, N., ed.andP;  OOPSLA  88 Conference Proceedings, ACM, Sept. 1988,published as SIGPLAN Notices 23(11), Nov. 1988.andM;14.andP;  Shriver, B. and P. Wegner, eds.andP;  Research Directions in Object-OrientedProgramming.Cambridge, Mass.: MIT Press, 1987.andM;15.andP;  Lochovsky, F., ed.andP;  Database Engineering 8(4), Special Issue onObject-Oriented Systems, IEEE Computer Society, 1985.andM;16.andP;  Dittrich, K.R., and U. Dayal, eds.andP;  Proceedings of the InternationalWorkshop on Object-Oriented Database Systems, Pacific Grove, Calif., 1986.andM;17.andP;  Dittrich, K.R., ed.andP;  Advances in Object-Oriented Database Systems.andO;Berlin, FRG: Springer-Verlag, 1988.andM;18.andP;  Kim, Won, and FH.andP;  Lochovsky, eds.andP;  Object-Oriented Concepts, Databases,and Applications.andP;  Reading, Mass.: ACM Press/Addison-Wesley, 1989.andM;19.andP;  Zdonik, S.B., and David Maier, eds.andP;  Readings in Object-OrientedDatabase Systems.andP;  Palo Alto, Calif.: Morgan-Kaufmann, 1989.andM;20.andP;  Maier, D., J. Stein, A. Otis, and A. Purdy.andP;  &quot;Development of anObject-Oriented DBMS.&quot; In Meyrowitz, N. (ed.) OOPSLA Conference Proceedings,ACM, Sept. 1986, published as SIGPLAN Notices 2 1 (I 1), Nov. 1986.andM;21.andP;  Andrews, T., and C. Harris.andP;  &quot;Combining Language and Database Advancesin an Object-Oriented Development Environment.&quot; In Meyrowitz, N. (ed.) OOPSLAConference Proceedings, ACM, Oct. 1987, published as SIGPLAN Notices 22(12),Dec. 1987.andM;22.andP;  Wegner, P. &quot;Dimensions of Object-Based Language Design.&quot; In Meyrowitz,N. (ed.) OOPSLA Conference Proceedings, ACM, Oct. 1987, published as SIGPLANNotices 22(12), Dec. 1987.andM;23.andP;  Graefe, G., and D.J.andP;  DeWitt.andP;  &quot;The EXODUS Optimizer Generator,&quot;Proceedings of the ACM-SIGMOD International Conference on Management of Data,ACM, San Francisco, Calif., 1987.andM;24.andP;  Graefe, G., and D. Maier.andP;  Query Optimization in Object-OrientedDatabase Systems: The Revelation Project.&quot; Technical Report CS/E 88-025,Oregon Graduate Center, Beaverton, Ore., 1988.andM;25.andP;  Jakobson, G., et al.andP;  &quot;An Intelligent Database Assistant,&quot; IEEE Expert1, Summer, 1986.andM;26.andP;  Jakobson, G., et al.andP;  &quot;CALIDA: A KnowledgeBased System for IntegratingMultiple Heterogeneous Databases.&quot; In Beeri, C., J.W.andP;  Schmidt, and U. Dayal(eds.) Proceedings of the Third International Conference on Data andKnowledge Bases, Palo Alto, Calif.:, MorganKaufmann,1988.andM;27.andP;  Landers, T., and R.L.andP;  Rosenberg.andP;  &quot;An Overview of MULTIBASE.&quot; In H.J.andO;Schneider (ed.) Proceedings of the 2nd International Symposium on DistributedDatabases, Berlin, FRG, 1982.andM;28.andP;  Litwin, N., and A. Abdellatif.andP;  &quot;Multidatabase Interoperability.&quot; IEEEComputer 19(12), Dec. 1986.andM;29.andP;  Stocker, P., et.andP;  al.andP;  &quot;Proteus: A Heterogeneous Distributed DatabaseProject.&quot; In Gray, P., and M. Atkinson (eds.) Databases-Role and Structure.andO;Cambridge, U.K.: Cambridge University Press, 1984.andM;30.andP;  Templeton, M., et.andP;  al.andP;  &quot;Mermaid-Experiences with Network Operation,&quot;Proceedings of the International Conference on Data Engineering, Los Angeles,Calif., 1986.andM;31.andP;  Gupta, A., ed.andP;  Integration of Information Systems: BridgingHeterogeneous Databases.andP;  New York, N.Y.: IEEE Press, 1989.andM;32.andP;  Hewlett-Packard Journal 40, August 1989 (papers on aspects of theNewWave environment).andM;Frank Manole is on the research staff of GTE Laboratories, Waltham, Mass.andO;</TEXT></DOC>