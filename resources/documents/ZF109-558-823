<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-558-823  </DOCNO><DOCID>09 558 823.andM;</DOCID><JOURNAL>Dr. Dobb's Journal  Nov 1990 v15 n11 p168(6)* Full Text COPYRIGHT Mandamp;T Publishing 1990.andM;</JOURNAL><TITLE>The MVC paradigm in Smalltalk/V: model-view-controller becomesobject-pane dispatcher. (MVC in Smalltalk-80 becomes object, paneand dispatcher in Smalltalk/V286)</TITLE><AUTHOR>Ayers, Kenneth E.andM;</AUTHOR><SUMMARY>Applications in the Smalltalk/V286 version of the Smalltalkprogramming language consist of three components analogous to theclasses Model, View and Controller in Smalltalk-80.andP;  The classmodel is eliminated, as the application itself becomes the model,and dependent notification mechanisms become available through theclass Object.andP;  View becomes an instance of the Smalltalk/V286class Pane or one of its subclasses.andP;  Controllers become instancesderived from the class Dispatcher.andP;  Details of the functioning ofeach class are discussed.andP;  Smalltalk V/286 is used to develop,open and frame a window.andM;</SUMMARY><DESCRIPT>Product:   Smalltalk-80 (Computer program language) (Design and construction)Smalltalk-V 286 (Computer program language) (Design andconstruction).andO;Topic:     SmalltalkApplications ProgrammingProgramming InstructionTutorialComparisonProgram Development TechniquesWindowingSoftware DesignProgram Development ToolsObject-Oriented Programming.andO;Feature:   illustrationtableprogram.andO;Caption:   Description of the principal Pane classes. (table)Messages optionally sent by the Model to configure a window.andO;(table)Procedure for framing subpanes. (program)andM;</DESCRIPT><TEXT>The MVC Paradigm in Smalltalk/VandM;My recent efforts at unraveling more of Smalltalk's mysteries centered aroundthe windowing system.andP;  After creating a few applications and spending many,many hours browsing through the source code (thank heaven for the sourcecode!), I finally began to form a mental picture of how theandM;windowing system behaves.andP;   The pictureandM;is not a simple one.andP;  For instance, the example code presented in thisarticle was extracted from the six pages of code involved just in opening awindow.andM;I'll begin by describing the Model-View-Controller (MVC) paradigm asimplemented in classic Smalltalk.andP;  Secondly, I'll describe how thearchitecture under Smalltalk/V286 differs from the classic paradigm.andO;Finally, I'll focus in more detail on the mechanisms of creating, opening,and framing a window.andM;The MVC ParadigmandM;The classic Smalltalk system, as designed at Xerox PARC in the 1970s, isbased on the Model-View-Controller paradigm, the conceptual framework ofwhich was discussed in &quot;Information Models, Views, and Controllers,&quot; by AdeleGoldberg (DDJ, July 1990).andM;An application in Smalltalk-80 consists of three components: A model thatproduces the information, a view that displays it, and a controller thatmanages input events.andM;The model is in some sense the core of the application, the data structuresthat represent what the application is trying to accomplish.andP;  A view is anobject that actually presents the information contained in a model on thedisplay screen.andP;  Various types of view objects are provided by the system,each designed to display specific types of information.andP;  For example, onekind of view can display data as a scrollable list, while another presentstext so it can be edited.andM;Contrllers exist to process input from the keyboard and mouse.andP;  Generallyspeaking, for each type of view there is a corresponding type of controller.andO;For example, a list controller recognizes particular input events asindicating a selection from the displayed list of items.andP;  The text editor'scontroller handles specific events for marking, cutting, or pasting a blockof text or for scrolling a page.andM;In the Smalltalk-80 implementation, the MVC architecture is embodied in thehierarchies for the classes Model, View, and Controller.andP;  The implementors ofDigitalk's Smalltalk/V286 concentrated the functionality of the MVC paradigminto a smaller set of more complex classes.andP;  The mechanisms are differentenough that the two platforms are largely incompatible at the applicationlevel (even though the language implementations are almost identical at thesyntactic level).andM;How Smalltalk/V and Smalltalk-80 DifferandM;The most obvious difference between Smalltalk/V and Smalltalk-80 is in theclass names.andP;  First of all, class Model is gone!andP;  This isn't a seriousproblem.andP;  Ultimately, the application is the model; and the dependentnotification mechanisms are available anyway -- through class Object.andM;In Smalltalk/V286, a view object is an instance of class Pane or one of itssubclasses.andP;  Figure 1 shows the basic hierarchy for class Pane and Table 1describes its principal classes.andP;  Similarly, controllers are derived fromclass Dispatcher, which is detailed in Figure 2 and Table 2.andM;Smalltalk/V286 has several classes and global objects that provide high-levelmanagement functions for the window system.andP;  One of these is the globalvariable Display--the only instance of class DisplayScreen.andP;  Displayrepresents the physical display and provides access to the screen as abitmap.andM;Another major player is the global object Scheduler.andP;  The only allowableinstance of class DispatchManager, Scheduler maintains a list of all thewindows on the screen and manages their activation and deactivation.andM;The global variable Processors is the only instance of classProcessScheduler, whose responsibility it is to manage the various processesthat might be active in the system at any given time.andP;  Among these is theuser interface process that fields interrupts from the keyboard and the mouseand translates them into suitable input events.andM;Raw input is handed off to the global object Terminal--an instance of classTerminalStream.andP;  Terminal takes care of the housekeeping associated with theinput stream.andP;  Internally, its state machine maps multistage input events(mouse movements, button clicks, key scan codes, and so on) into a set ofglobal event function codes (which are defined in the pool dictionaryFunctionKeys).andM;Finally, the global variable Transcript is an instance of class TextEditor.andO;Transcript is used much like a console window to relay error or statusinformation.andP;  However, being a generic text editor, Transcript is alsoavailable for use in evaluating any Smalltalk expression, via the &quot;do it&quot; or&quot;show it&quot; menu selections.andM;The Chain of CommandandM;Each of the application's panes, including the top pane, has a Dispatcherassociated with it for handling input events.andP;  Input comes into theapplication via the active dispatcher.andP;  How is this dispatcher activated?andM;First, let's assume that the cursor is initially positioned on the backgroundscreen, outside any window.andP;  Under these conditions, the system scheduler(Scheduler) is calling the shots.andP;  Basically, Scheduler sits in a loop andsteps through its list of windows, sending each one of the messageisControlWanted (which, by default, merely tests to see if the cursor ispositioned within the window's borders).andM;The first window that answers &quot;yes&quot; becomes the active window.andP;  Schedulerputs the window at the head of its list and sends its dispatcher (usually aTopDispatcher) the message activateWindow.andM;Once a TopDispatcher acquires control, it enters its own control loop.andP;  Here,the TopDispatcher polls the dispatchers associated with each of the window'ssubpanes, asking if one of them wants control.andP;  The pane that contains thecursor is then marked as the active pane and its dispatcher assumes controlof the input stream.andM;When the dispatcher for a subpane gains control, it goes through anactivation sequence which, in the case of a GraphPane, for instance, includessending the message activatePane to its model.andM;Finally, the subpane's dispatcher enters its own control loop to monitorinput events.andP;  The specific type of dispatcher that ultimately gets controldetermines the nature of the system's reaction to input events.andM;Keeping Everybody InformedandM;Much of the power (and the complexity) of the Smalltalk/V286 windowing systemis a result of the dialogue between a window (the pane and/or dispatcher) andits model.andP;  For almost every type of event that a user can generate, there isa mechanism for notifying the model about potential changes.andP;  Some events arehandled transparently by the pane or its dispatcher, so they don't &quot;bother&quot;the application.andP;  However, from the viewpoint of a model's implementation,these event response capabilities are considered optional.andP;  Consequently, inmost cases, the pane or dispatcher &quot;asks&quot; the model about its implementation,using a sequence of statements similar to that in Example 1(a).andM;The methods that a model may implement to handle window related events arelisted in Table 3.andM;In addition to the messages described in Table 3, still other messages may besent to the model by selecting one of the iconic &quot;buttons&quot; that appear in awindow's title bar.andP;  The actions associated with these buttons, such asclosing, collapsing, moving, or resizing, are directly related to thebehavior of window.andP;  However, these same actions may also affect the way themodel carries out its internal operations.andM;Therefore, when the top dispatcher detects a left mouse button click with thecursor positioned inside one of these buttons, it fetches the name of theicon (a Symbol) from a class variable.andP;  The icon's name is actually the nameof a method that is supposed to perform the action.andP;  If the model is capableof responding to the message, it will be sent; otherwise, the top dispatcherperforms some default operation.andP;  These messages are described in Table 4.andM;All of the messages mentioned in Tables 3 and 4 are sent to the model by thewindow -- typically as the result of a user-initiated event.andP;  There are alsomany ways in which the model can influence the configuration and operation ofits iwndows.andP;  In fact, much of the public protocol for the Dispatcher andPane class hierarchies is available for just this purpose.andP;  Some of the moreimportant messages involved in these operations are given in Table 5.andM;Constructing a WindowandM;The first step in constructing an application window at runtime is to createthe top pane for the window.andP;  This step, illustrated by the open method foundin Listing One (page 175), is marked by the line: topPane:= TopPane new.andO;Following this is a series of cascaded messages, directed at the newlycreated topPane, that specify the initial setup for the window (itsassociated model, label, menu, and so on).andM;Once the topPane has been taken care of, the subpanes can be created andadded to the topPane as in Example 1(b).andP;  Here the cascaded messages providesetup information to the subpane.andM;Notice that in Listing One there are three subpanes created and added to thetopPane.andP;  One of these is a ListPane, while the other two are GraphPanes.andO;Also notice that each subpane is assigned a &quot;name&quot; by the statement:name:andless;aSymbolandgt;;andM;This can be confusing, because the name given is not really the &quot;name&quot; of thesubpane.andP;  It is, in fact, the name of a method selector that will be sent tothe model during the process of opening the window.andP;  This method is supposedto perform application-specific initialization for the pane.andP;  In the case ofthe ListPane, the method should answer an array containing the list of itemsto be displayed.andP;  For a GraphPane, the initialization method is expected toanswer a Form (bitmap) whose size is the same as the pane's frame (the frameis passed as an argument to the message).andM;Framing a WindowandM;Framing a window is one of the more obscure parts of creating a windowapplication in Smalltalk/V286.andP;  Each subpane must possess a means ofdetermining its position and size relative to the window as a whole.andP;  Thecalculations must be such, that if the window's position or size is allowedto change, the position and size of each subpane can be adjusted toaccommodate the new frame.andM;There are two ways of framing subpanes.andP;  Either of the messagesframing-Ratio:aRectangle or framingBlock: aBlock can be used, depending uponthe level of precision required.andP;  If the absolute position or size of thesubpanes is not critical, framingRatio: is far easier to use.andP;  This messagespecifies the position and size of a subpane as fractions of the wholewindow.andP;  For example, framingRatio:(0@ (3/4) extent:1/4 @ (1/4)); tells asubpane that it will be positioned at the left edge of the window and threequarters of the way down from the top.andP;  The subpane's size will be onequarter of the width of the window and one quarter of its height.andP;  In otherwords, it will occupy the lower left-hand corner of the parent window.andM;However, in those cases when an application demands that one or more of itssubpanes be located in a specific position or be framed to a certain absolutesize, the procedure becomes a bit more complicated.andP;  Listing Two (page 175)is a modified version of the open method in which the list pane isconstrained to be ten characters wide and ten lines high.andP;  Here the messageframingBlock: is sent to each subpane with a block of code as its argument.andO;The block of code is not evaluated at the time this message is sent to thesubpane, but when the window is opened or reframed.andP;  At that time, it ispassed a single argument -- a rectangle defining the the window's interiorframe.andP;  The block should answer a new rectangle -- the frame of the subpane.andM;Any variables local to the open method that are referenced within the framingblock, will have the values they had when the open method completed.andP;  Becareful with this one -- don't try to calculate the dimensions of the subpaneframes incrementally, using one set of variables.andP;  The results will not bewhat you expect!andM;Wrapping UpandM;There's no doubt that Smalltalk is a big and complex system and that thepowerful array of features it offers can be quite intimidating.andP;  Fortunately,the environment provides the kinds of tools that make explorationconsiderably less difficult.andM;Ken is a software engineer at Eaton/IDT in Westerville, Ohio.andP;  He is involvedin the design of real-time software for industrial graphic workstations.andP;  Healso works part time as a consultant, specializing in prototypingcustom-software systems and applications.andP;  Ken can be contacted at 7825Larchwood St., Dublin, OH 43017.andO;</TEXT></DOC>