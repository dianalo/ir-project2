<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-524-614  </DOCNO><DOCID>07 524 614.andM;</DOCID><JOURNAL>Dr. Dobb's Journal of Software Tools  Sept 1989 v14 n9 p128(7)* Full Text COPYRIGHT Mandamp;T Publishing Inc. 1989.andM;</JOURNAL><TITLE>Admitting objects to Pascal. (column)</TITLE><AUTHOR>Duntemann, Jeff.andM;</AUTHOR><SUMMARY>New Pascal compilers such as Microsoft's $99 QuickPascal andBorland's Turbo Pascal 5.5 incorporate object-oriented extensions.andO;The two compilers use identical syntax, but QuickPascal produces alarger .EXE file than Turbo Pascal.andP;  QuickPascal includes mousesupport, a source-level integrated debugger, and a multi-fileeditor.andP;  Its major drawback is the fact that the user must qualifyobject data fields with a new predefined identifier called SELF.andO;QuickPascal and Turbo Pascal 5.5 differ in the names given toobjects and their types and use different implementation methods.andO;Turbo Pascal treats objects like records, while QuickPascal allowsobject instance variables to reside only on the heap.andP;  A sampleobject-oriented Pascal program for printing the ASCII chart ispresented, along with a discussion of the REXX language.andM;</SUMMARY><DESCRIPT>Product:   Microsoft Quick Pascal (Compiler) (product specifications)Turbo Pascal 5.5 (Program development software) (productspecifications).andO;Topic:     Object-Oriented ProgrammingPASCALCompilersProgram Development TechniquesStructured Programming.andO;Feature:   illustrationprogram.andO;Caption:   Listings (program)andM;</DESCRIPT><TEXT>Admitting Objects to PascalandM;I graduated from Lane Technical High School in Chicago in 1970.andP;  Three yearslater they first admitted girls.andP;  I had an opportunity to go back seven oreight years after graduation to speak to one of the student groups, and thechange stopped me in my tracks.andM;Girls!andM;What a though ...andM;The sense of balance, of progress, or rightness was astounding.andP;  The placewas no longer permeated by that old testosterone fog.andP;  Right there in frontof me, gawky boy-nerds were walking down the hall in animated conversationwith gawky girl-nerds.andP;  It made me wonder why this hadn't been done fiftyyears earlier, and for a moment I ached to be fourteen again.andM;Over the past couple of months, both Borland and Microsoft have admittedobjects to the Pascal language, and the effect is much the same.andP;  It feelsrights, right in a way that makes you want to turn the clock back to 1972 andstart all over again.andM;Nonetheless, having objects now is sufficient.andP;  And I promise you,programming in Pascal will never be the same again.andM;QuickPascalandM;Microsoft's QuickPascal has finally shipped, and at $99 list (street priceconsiderably less, if you follow the mail order houses) it now ties withSmalltalk/V as the least expensive DOS OOP product.andM;QuickPascal's environment is quite slick, with mouse support and a multifileeditor its main features.andP;  There are a source-level intergrated debugger anda very good on-line help system.andP;  Users of MS Pascal 5.0 should note thatQuickPascal is only very broadly compatible with MS Pascal, but instead is asyntactic clone of Turbo Pascal 5.0.andP;  All Turbo Pascal 5.0 code I've tried tocompile under QuickPascal has compiled and run correctly, but ...andO;QuickPascal's .EXE file is considerably larger than Turbo Pascal's, and thesize of the largest compilable program under Quick is correspondinglysmaller.andM;The two compilers' object-oriented features are different enough to be anuisance but similar enough to treat together.andM;Parallel EvolutionandM;Considering that the two products were developed in isolation, Microsoft'sQuickPascal and Borland's Turbo Pascal 5.5 have a remarkably similar slant onobject orientation.andP;  Their differences can be attirubted to ancestry:QuickPascal adheres pretty closely to the Apple Object Pascal specification,whereas Turbo Pascal 5.5 draws about equally on Object Pascal and C++.andP;  In aninterlocking directorate like this, similarities are likely to outnumberdifferences.andM;For both products, objects are closely related to records and are defined injust about the same way.andP;  The important thing to notice about objectdefintions is that code and data are defined together, within a namedstructure.andP;  This is how object-oriented Pascal implements encapsulation: TYPEPrintByte= OBJECT BV: Byte; [Byte Value] FUNCTION DontPrint(ShouldI: Byte):Boolean; PROCEDURE PrintDecimal; PROCEDURE PrintHex; PROCEDURE PrintBinary;PROCEDURE PrintSymbol; END;andM;The new reserved word OBJECT makes this an object definition.andP;  Referencingcode and data is done through another record-like convention, dotting.andO;Assuming an object instance named MyByte, you would reference field BV asMyByte.andP;  Bv, and call the PrintHex method as MyByte.andP;  PrintHex.andM;Object Types with No ClassandM;Adam gave all the animals unique names because when he said, &quot;Hey you withthe four legs and a tail!&quot; half of creation ambled over.andP;  The naming of namesis a critical issue in object-oriented programming, because so many of theconcepts are new.andP;  Sadly, there are major disparites in how QuikcPascal andTurbo Pascal refer to certain concepts.andM;The worst and most confusing is what to call objects themselves.andP;  Just asvariable types and variables are not the same things, objects and their typesare not the same either.andP;  An object type in Turbo Pascal is simply an &quot;objecttype,&quot; and an object variable (what we also call an instance of an objecttype) is just an &quot;object.&quot;andP;  QuickPascal uses the term &quot;class&quot; instead of&quot;object type,&quot; but the meaning is exactly the same.andP;  The term &quot;class&quot; comesfrom Smalltalk, as I described last month.andP;  In this column I'll be using theterm &quot;objective type&quot; rather than &quot;class&quot; in this column (regardless of whichPascal is under discussion) because it's more descriptive and sounds lessmystical/magical.andM;Creating ObjectsandM;Turbo and Quick diverge most sharply in their means of creating objects.andO;Turbo Pascal objects are true to their record-like heritage.andP;  You can createan object in the same ways you create a record, either as a static variablein the data segment, or as a dynamic variable on the heap: VAR [Declaring astatic object:] MyByte : PrintByte; [A pointer to a dynamic object:]MyBytePtr: *PrintByte; [Allocating a dynamic object:] New(MyBytePtr);andM;These items could as well be records as objects.andP;  The syntax is the same.andM;QuickPascal implements objects as something truly different.andP;  An objectinstance variable may exist only on the heap; there is no way to create anobject in the data segment.andP;  Syntactically, object variables sit on the fencehalfway between records and pointers.andP;  An object is treated like a recordwhen defined, treated like a pointer when created, and then treated like arecord when used, with a couple of twists: VAR [Allocates no space!!]andO;QuickByte: PrintByte; [Allocates object on heap:] New(QuickByte); [Referencewithout caret:] QuickByte.BV:=42;=andM;This is supposed to be a sort of short-hand, allowing programmers to dispensewith the multitude of caret symbols that would be necessary if objects on theheap really were treated as pointer references.andP;  An while shorthand isconvenient, it's hard to read, and I'm afraid this somewhat inconsistentsyntax is something (like irregular verbs in Spanish) that you just have tobite the mnemonic bullet and remember.andM;Once a Quick objec is created, it can be referenced just as a Turbo Pascalobject can be.andP;  The inconsistency returns when you want to reclaim anobject's heap space.andP;  You pass the object's identifier to Dispose, again asthough the object were a pointer: Dispose(QuickByte);andM;Overriding MethodsandM;Creating a child object type that inherits from a parent object type is doneidentically in both impementations.andP;  The name of the parent type is enclosedin parentheses after the child type's OBJECT reserved word: TYPE PrintByteHP= OBJECT(PrintByte) PROCEDURE Print Symbol [; OVERRIDE;] END;andM;The differences between the two products emerge again when a method definedin the parent object type is redefined, or overridden, by a new method withthe same name.andP;  Turbo Pascal simply allows the method to be overridden byrefefinig it.andP;  QuickPascal requires that the overriding method be flagged tothe compiler with the OVERRIDE reserved word.andP;  I kind of like that: It makesthe code easier to comprehend by flagging unmistakably whether a method isbrand new in the object hierarchy, or whether it redefines a method fartherup the hierarchy tree.andM;In Search of SelfandM;The one thing that drives me truly berserk about QuickPascal is itsSelfishness.andP;  Within the body of a method, the object's data fields need tobe qualified by the use of a new predefined identifier, Self.andP;  Here's asimple QuickPascal method definition belonging to the PrintByte object type:PROCEDURE PrintByte.andP;  PrintDecimal; BEGIN Write(LST,Self.BV:3); END;andM;This is peculiar -- traditional Pascal scoping should allow the compiler torecognize a reference to an object's fields as local variables.andP;  After all,the method definition begins with the PrintByte.qualifier, and field BV is asmuch a part of PrintByte as the PrintDecimal method.andP;  Most remarkably, usingthe WITH Self DO structure does not work with methods.andP;  (It does work withobject data fields, however.)andP;  Methods must be qualified by Self itself,directly.andP;  This may be a bug or it may be a feature, depending on how youlook at it, but every time I look, I see six legs.andM;Yet another interesting wrinkle here is that Turbo Pascal allows, but doesnot require, the use of the Selfidentifier in the same context.andM;A Simple Object Pascal ExampleandM;This column's listings present a simple but useful example of Object Pascalin action.andP;  I've given it for both Turbo Pascal 5.5 and QuickPascal, andcomparing the two will give you a reasonable feel for the way the twoimplementations go about things.andP;  Listings One and Two, page 146, are forTurbo Pascal, and Listings Three and Four, page 149, are for QuickPascal.andM;The program itself prints an ASCII table, including all 256 characterpatterns from the smiley faces on up through the box drawing and mathcharacters.andP;  The catch in creating such a program is that while manyPC-compatible printers can print a smiley face or its brothers, the nature ofthe command to print such special characters varies all over the map.andM;The PRINBYTE.PAS (and PRINT-BYTQ.PAS for QuickPascal) implements a simpleobject that is nothing more than a byte value with some methods to display itto the printer in various formats, including decimal, hex, binary, and&quot;literal,&quot; that is, in the form of a single character.andP;  The value is storedin the PrintByte object's sole data field, BV.andP;  The value-added in thePrintByte object lies in the object's methods.andM;Most ASCII characters can be printed as literal symbols simply by sendingthem to the printer port.andP;  Send a 65 value and you'll get an A on theprinter.andP;  Send the value 236 and you'll get an infinity symbol.andP;  Somecharacters, however, are control characters, and exist not to be displayed somuch as to dictate commands to the printer.andP;  These control characters includecarriage return (13), line feed (10), and BEL (7).andP;  Send a control characterto the printer and you won't see any symbol, but instead the printer willindex or beep or do something else that involves its mechanism rather thanits output.andM;As you might imagine, some characters do double duty as both controlcharacters and symbols.andP;  The control character guise of such characters(typically, values 1-31) takes priority.andP;  Send a 7 to the printer, and theprinter's beeper will beep.andP;  To get a hardcopy of the small circular bulletthat is character 7's symbolic guise, you must send a control sequence to theprinter.andP;  Such a control sequence is often an ESC character (27) followed bythe control character, but each printer has its own way of responding tocontrol sequences, and no standard prevails.andM;Go Print Yourself!andM;Printing the ASCII chart on any arbitrary printer would mean a program thatknew about every printer on the market, which is obviously impossible.andP;  Theway out is for the PrintByte object to take the low road and refuse to printany control character at all -- and let the user of the PrintByte objectextend PrintByte to match the user's specific printer.andP;  The example shownuses the HP LaserJet II printer as the specific printer.andP;  You can modify (andshould, for practice) ASCII.PAS or ASCIIQ.PAS to match the needs of your ownprinter, whatever it might be.andM;Extendability of code is one of the major benefits of object-orientedprogramming.andP;  The way is to define a child object of the PrintByte object,and override only the method that prints the symbol to the printer.andP;  This isthe PrintSymbol method.andM;ASCII.PAS and ASCIIQ.PAS (for Quick-Pascal) demonstrates this.andP;  A childobject type, PrintByteHP, is defined so that it inherits all of PrintByte'sdata and methods.andP;  PrintByteHP changes only what must be changed -- nounnecessary duplication of code is needed.andP;  The only change is to thePrintSymbol method, which is redefined in ASCII.PAS and ASCIIQ.PAS.andP;  Note thepresence of the OVERRIDE reserved word in ASCIIQ.PAS.andM;The sense of the PrintByteHP object type is that it extends the PrintByteobject type by &quot;knowing&quot; how to print control symbols to the LaserJet IIprinter.andP;  (The PrintByte type simply punts by printing a space for anycontrol character.)andP;  So you as a programmer don't have to fuss with controlsequences.andP;  You simply tell a particular PrintByteHP object to go printitself, and shazam!andP;  You've got smiley faces all over the place.andM;Look Ma, No Source!andM;One of the interesting benefits of this process is that an object can beextended by a programmer without having the source code.andP;  I provide you withPRINBYTE.PAS, but all you really need is the object type's definition(basically, the procedure headers and data definitions) and the linkable unitfile implementing the object.andP;  This can be done to some extent with Pascalunits right now, in that you can write a different version of a routine in aunit, and as long as your rewritten routine is linked after the routine itreplaces, the replacement routine will be used by all code linked afterwards.andM;The real, real slick wrinkle (not shown in this example) is the way that theoriginal object can make use of its child objects that did not exist when theparent object was compiled.andP;  (Think about that for a moment.)andP;  It's part ofthe mind-warping notion of polymorphism, and I'll return with some concreteexamples in a future column.andM;In the meantime, I powerfully recommend that you pick up either Turbo Pascal5.5 or QuickPascal and start practicing your objects now.andM;Nothing more important has happened to programming languages since proceduresparted the in-line code chaos in the seventies.andM;Blows Against the EmpireandM;As my sixties Day-Glo Desiderata poster used to say, &quot;No doubt the universeis unfolding as it should.&quot;andP;  Those ubiquitous 370-class mainframes (asdistinct from what are now called -- gakkh! -- supercomputers) are evolvinginto their appropriate ecological niche as relatively dumb but cavernous fileservers under the control of personal computers out where the real work getsdone.andM;Not surprisingly, your average MIS/DP department doesn't see things this way.andO;(Just as T. Rex didn't say, &quot;Hi, Boss!&quot; to the shrew with egg yolk on hiswhiskers.)andP;  Ask DP for a mainframe application, and the schedule will besomething like six months plus a fudge factor of three months to two years,depending on how recently the MIS manager got a promotion.andP;  I can smile now(having been out of Xerox MIS for six years) but the DP backlog is still aserious problem out in pinstripe land.andM;And I don't normally have much truck with teenage mutant Ninja languages, butone has recently come to light that has landed some serious blows against theDP empire.andP;  It's called REXX, and if you're in the position of living in thewalls of T. Rex's nest, it's a great way of making omelets out of the bigguy.andM;REXX is a structured language developed originally for 370-class mainframesby a delightful IBM curmudgeon named Mike Cowlishaw.andP;  It was designed as areplacement for the mainframe batch processor cancer they call JCL, and hastherefore been called a &quot;super batch language.&quot;andP;  REXX can be used as a batchlanguage, but it's a real programming language in its own right with all thebody parts a proper language ought to have.andP;  (Including GOTO -- now that'sauthentic!)andP;  It's most similar to Basic in that it's usually interpreted andhas that inescapable line-oriented mainframe flavor about it.andM;REXX is important to this column: It has a crisp definition published byCowlishaw that has enabled identical implementations on both mainframes andon PCs under DOS.andP;  This means that you can build a REXX application in thesafety and comfort of your cubicle, and upload it to your mainframe userswhen T. Rex isn't looking.andP;  Shazam!andP;  You've cut the development time for asimple readafile/writearecord DP application from ten months to ten hours.andM;There are numerous mainframe implementations of REXX, and I'm told one can behad for almost any of the innumerable different 370 operating environments.andO;The only commercial implementation for DOS is the one I tested and willdescribe later, Personal REXX from The Mansfield Software Group.andM;With Feet in Two WorldsandM;I've not had the honor of sweating blood over the VM/CMS mainframe operatingsystem, so I can't tell you how REXX looks from its perspective.andP;  From DOS,however, REXX is very much a language with feet in two worlds.andP;  On one hand,as I've said, REXX is a perfectly ordinary and reasonable interpretedlanguage.andP;  All the familiar program structures are there and implementedquite nicely.andP;  On the other hand, when REXX encounters a clause it does notrecognize as part of a REXX statement, it automatically passes that clause toDOS to execute.andP;  This ability is what makes REXX a super-batch language.andM;Mansfield allows REXX to be loaded from disk as a transient program thatremains in memory only while the current REXX program is being interpreted,or REXX can be loaded as a TSR that remains in memory until unloaded or untilreboot.andP;  The TSR REXX takes 150K of RAM, which prevents its use with many ofthe larger business applications.andP;  My hunch is that memory management is thereal kicker in making REXX pay off under DOS.andP;  You'll have to experiment toget a feel for what's possible and what's impossible.andM;REXX as a batch processor doesn't interest me nearly as much as REXX as amainframe bridge, and as a mainframe bridge it won't be managing DOSapplications.andM;Language HighlightsandM;Space is short, so I won't rehash how REXX implements ordinary structuredelements like DO loops, IF statements, and so on.andP;  They're all there, andresemble Pascal's strongly.andP;  REXX does contain some remarkable features thatI would like to call attention to.andP;  For the full story on REXX, getCowlishaw's &quot;white book&quot; on the language, which defines it thoroughly and isone of the most readable such white books as well: The REXX Language, M.F.andO;Cowlishaw, Prentice-Hall, 1985.andP;  (Note that The Mansfield Software Groupbundles Cowlishaw's book with their Personal REXX product, so if you buy thebook and then buy Personal REXX, you'll be buying the book twice.)andM;The PARSE instruction provides a generalized string parser that dismantles astring value into several separate variables according to a template.andP;  A goodexample is entry of date values: SAY &quot;Enter the date as mm/dd/yy&quot; PARSE PULLmo '/' da '/' yrandM;Here, the user is told what string data to enter with the SAY instruction.andO;The PULL instruction is roughly analogous to Readln, in that it pulls data infrom an input queue.andP;  The template is mo '/' da '/' yr, indicating that thestring data accepted through PULL is to be separated out into three stringvariables, with slash symbols acting as separators.andM;This is about as simple as a useful template gets, and REXX's parser iscapable of a lot more.andP;  Patterns to be matched may be stored in variables andmay be looked for in specific positions in the string if desired.andP;  Parsersare elemental code machines that should be a part of every language, but infact are part of almost none.andM;Perhaps the most intriguing REXX construct is INTERPRET, which allows a REXXprogram to build a mini-REXX program on the fly and then interpret it.andO;Interpreted Prolog implementations can do something like this, but none ofthe traditional languages (Pascal, C, Modula-2, Basic, Fortran, ADA) haveanything that comes even close.andP;  In his book, Cowlishaw does little withINTERPRET but uses it to write a simple formula calculator emulator, but infact this way of treating code as data is used in a lot of AI research -- ifany readers have used REXX in this fashion, I'd like to hear about it.andM;That Old Mainframe GoblinandM;While REXX the language is easy to program in and relatively easy to read,REXX the language processor is haunted by that old mainframe goblin,complexity.andP;  There are any number of ways to feed statements to REXX, andlots of niggling little gotchas that must be digested and understood to makethe program operate to its best advantage.andP;  Many of these seem unnecessary,like the separate TSR that does nothing but grab interrupt vector 60.andO;Grabbing vectors is not time consuming and should be done in aninitialization section/exit procedure manner inside the language processor,as with Turbo Pascal.andP;  A much simpler Personal REXX could be created if TheMansfield Software Group decided to go the distance.andM;On the other hand, if you can (or must) handle mainframes, you can handleREXX.andP;  Give it a shot.andM;Sometimes a Great Notion ...andM;...  never quite seems to set the world on fire as it should.andP;  I ampersonally fond of technical anthologies; that is, books to which severalexperts on a subject have each contributed a chapter.andP;  Such books are rare,and publishers for some reason don't like them.andM;So you'll have to forgive me for recommending one such book here, even thoughI was a (relatively minor) contributor.andP;  It's from a small publisher and hashad little distribution, but get it if you can: Turbo Pascal Innovations,edited by Judie Overbeek and Rick Gessner.andP;  If you can't find it at abookstore (likely) the book can be ordered directly from the publisher.andM;The book contains eight chapters in all, each on a different subject by adifferent author.andP;  The topics include (among others) DOS time and datetopics, directory management, high-precision code timing, graphics, andprocedural types.andP;  I don't have time to describe them all, but there are twoabsolutely essential chapters: One by Rick Gessner on user-interface design,and another by Lane Ferris describing a unit allowing you to write TSRprograms that multitask with ordinary DOS programs.andM;For all that user-interface design is touted as the key to improved userproductivity, there's been little published on just how such interface codeis designed.andP;  Gessner does an excellent job of providing some guidelines foruser interface components, along with sample implementations of various lineeditors and menus.andP;  The code is solid and easy to read, and the approachdemonstrates a sensitivity to human needs that rarely turns up in theprogrammer press.andM;The real blockbuster in this book, however, is Lane Ferris's multitasking TSRunit.andP;  Code like this doesn't happen by very often, and when it does, it israrely opened up and dissected with such clarity.andP;  Lane's unit uses around-robin time-slicing system to allow a TSR to pre-emptively executemultiple tasks while the DOS foreground program multitasks on equal terms.andO;This means you can put something as simple as a real-time clock in the cornerof your screen, or something as complex as a pop-up calculator that doesn'tfreeze your telecommunications session in the foreground.andP;  Very heavy stuff,and beautifully implemented.andM;Best of all, it's not written in C.andM;The reason books like this are valuable is that no one person is equally goodat everything, and by presenting the best that several intelligent personshave to offer, the book becomes far more diverse and useful than a book anysingle person could create.andP;  In that respect it's like a very thick magazinewith no ads.andP;  Nothing quite like it ...andP;  even though there should be.andM;When the Good Die YoungandM;I was at the American Booksellers Association convention in Washington, D.C.andO;when I got the news that Kent Porter had died in the saddle, doing what bothhe and I do every day: Writing and editing.andP;  I met Kent when he submitted araft of articles to TURBO TECHNIX, and acted as his editor there for anoutstanding series of projects, including his popular &quot;Mouse Mysteries&quot;series.andP;  Later, when TURBO TECHNIX became history, the partitions swapped alittle and Kent became my editor here at DDJ.andP;  We understood one another inthe way that only two editors -- who have edited one another's work -- can.andM;Kent's mission and mine were the same: To wipe the fuzz away from yourwindows onto the programming craft, and in doing so spread the magic aroundto the uninitiated.andP;  Magazines and books don't just happen -- behind each isa strong mind and a strong hand; writer and editor working together in acommon cause.andP;  It takes some skill to see the work of the editor's handsometimes -- unless you're another editor.andM;Good night, good friend.andP;  As to your mission: Stet.andM;It will stand.andM;AvailabilityandM;All source code for articles in this issue is available on a single disk.andP;  Toorder, send $14.95 (Calif.andP;  residents add sales tax) to Dr. Dobb's Journal,501 Galveston Dr., Redwood City, CA 94063; or call 800-356-2002 (from insideCalif.) or 800-533-4372 (from outside Calif.).andP;  Please specify the issue andformat (MS-DOS, Macintosh, Kaypro).andO;</TEXT></DOC>