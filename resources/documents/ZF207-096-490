<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-096-490  </DOCNO><DOCID>07 096 490.andM;</DOCID><JOURNAL>Dr. Dobb's Journal of Software Tools  March 1989 v14 n3 p38(4)* Full Text COPYRIGHT Mandamp;T Publishing Inc. 1989.andM;</JOURNAL><TITLE>Writing portable applications with X-GEM.andO;</TITLE><AUTHOR>Fitler, Bill.andM;</AUTHOR><SUMMARY>This article explores how the X-GEM windowing system implementsforeign language versions of software, handles the basicdifferences among different hardware platforms, and achievesportability in graphic applications.andP;  The X-GEM solutions arecompared to other common windowing systems.andP;  X-GEM originates fromthe older Graphical Environment Manager (GEM), which was developedin 1984 by Digital Research Inc (DRI).andP;  GEM allows graphicsapplications to operate on a wide range of computers.andP;  X-GEMfurnishes a GEM-compatible application program interface thatworks on higher-end workstations, thereby letting GEM programsport more easily.andP;  X-GEM works in conjunction with DRI's FlexOS,but versions for Presentation Manager and the X Window System areplanned.andM;</SUMMARY><DESCRIPT>Company:   Digital Research Inc. (products).andO;Product:   X-GEM (Program development software) (usage).andO;Topic:     WindowingComparisonSoftware MigrationGraphics Software.andO;Feature:   illustrationchartprogram.andO;Caption:   X-GEM structure. (chart)X-GEM portable application. (program)andM;</DESCRIPT><TEXT>Writing Portable Applications with X/GEMandM;What are the main issues in creating portable graphics applications?andP;  Forexample, how do you implement foreign language versions of your software?andO;And how do you handle the fundamental differences among various hardwareplatfomrs?andP;  To achieve portability, you need to follow certain generalguidelines.andP;  The rules depend partly on what your application does, andpartly on what you want to port to.andP;  This article explores these and otherproblems, showing how iths done with X/GEM, and comparing the X/GEM solutionwith other common windowing systems.andM;Let's begin by discussing what X/GEM is.andM;X/GEM is based on the older Graphical Environment Manager (GEM), introducedin 1984 by Digital Research (DRI).andP;  GEM enables graphics applications to runon a broad range of computers, ranging from Ataris to low-end 8088 based PCsand compatibles.andP;  X/GEM provides a GEM compatible application programinterface (API) that functions on higher-end workstations, thus allowing GEMprograms to be more easily ported to these more powerful computers.andP;  X/GEMcurrently works with DRI's FlexOS (a multitasking, multiuser, real-timeoperating system), and versions are in the works for Presentation Manager andthe X Window system.andM;The X/GEM API provides two sets of run-time application services, shown inFigure 1.andP;  The first, called the virtual device interface (VDI), is wheregraphics portability is implemented.andP;  The second is the applicationenvironment services (AES), which provides the user interface building blocksfor an application.andP;  Built on top of the VDI, the AES also providesfunctions, that enhance portability to both single tasking and multitaskingoperating environments.andP;  X/GEM doesn't provide file system functions.andO;Instead, GEM applications rely on the services provided by the underlyingoperating system.andM;This basic structure of the X/GEM API--a user-interface-function set restingatop device independent graphics--is similar to Windows and the Macintosh.andO;All three systems implement a user interface &quot;policy:&quot; that is, the basiclook and feel shared by all applications running in that windowingenvironment.andM;X Window takes a different approach.andP;  Its implementors went to great lengthsto provide a &quot;policy-free&quot; interface.andP;  For example, the Xlib interface doesnot contain any window control mechanisms.andP;  Instead it abdicates this policyto an X &quot;window manager&quot; responsible for providing the look and feel of theinterface.andP;  This design has merits, because all X applications can be made tobehave in a fashion deemed appropriate by the window manager.andP;  At MIT, beforeX was developed, there were many different vendors supplying software andhardware, leading to a Tower of Babel effect.andP;  Now for applications that useX, a person needs to learn only one window manager in order to use anapplication from any vendor.andP;  This also allows new ways of interacting withthe user to be developed, which is useful because the art of user-interfacedesign is still in its infancy.andM;The X Window philosophy, however, also has drawbacks.andP;  One is increasedapplication complexity due to the need to negotiate with a window managerwhich, for example, may not allow a window to be arbitrarily located on thedisplay device.andP;  A second problem is that this design requires more computingresources.andP;  That might not be an issue in a workstation environment, but itis on a low-end personal computer.andM;Another X Window problem is the proliferation of window managers, each ofwhich sets forth its own user-interface policy.andP;  As of this writing no clearwinner has emerged, with the result that end users are confused about whichwindow manager to select.andP;  The Open Software Foundation (OSF) hopes to endthe dilemma by choosing one as the X Window user-interface standard.andP;  Anumber of vendors have proposed their solutions to OSF,  including DRI withX/GEM.andP;  Whatever the outcome, end users could benefit by having a singlestyle of user interface across the entire range of supported applications andcomputers.andP;  Another beneficiary is programmers, who will then be able towrite portable applications for a consistent environment with few worriesabout hardware and operating system differences.andM;Now let's consider some specific issues that arise when you want to make yourgraphics application portable.andM;Dealing with Graphics DevicesandM;Windowing systems such as Presentation Manager and X Window provide a set offunctions that draw to the screen as independently of the actual physicaldevice as possible.andP;  These functions also return information about the deviceso that the program can deal with specifics and idiosyncrasies consistently.andM;In X/GEM, the VDI handles graphics-device portability.andP;  The VDI is builtaround a conceptual graphics model called a workstation (not to be confusedwith those powerful high-end personal computers going by the same name).andO;X/GEM VDI workstations are specific graphical devices available to anapplication.andP;  Thus, the display and the printer are both VDI workstations.andO;When an application opens a workstation, the appropriate graphical devicedriver is loaded.andP;  The device driver translates high-level VDI commands intothe low-level actions necessary to produce graphical information on thetarget device or to receive information from it.andM;This approach is similar to that taken by other windowing systems.andP;  InWindows the approximate equivalent is called a display context, on theMacintosh it is called a grafPort, and in Xlib it is called a graphicscontext.andM;X/GEM furnishes multiple classes of workstation.andP;  These include screens,plotters, printers, cameras, scanners, and metafiles (files containing setsof graphic commands).andP;  In general, the application can send a given set ofcommands to the screen and then issue the same set of commands to the printeror metafile device to create a more enduring copy of the output.andP;  Graphicsystems such as the Macintosh and X don't have the same kind of generalitybuilt into their graphics models, choosing instead to support primarily thescreen display device.andM;One of the most important issues in writing portable graphics applicationsconcerns the concept of uniform rendering.andP;  Graphical devices span a widerange of addressability and resolution.andP;  Many displays for PCs --theMacintosh being a notable exception --use pixels that are not square.andP;  Thismeans that a square box with ten units of measurement in height and widthwill show up as a rectangle.andP;  The ratio of height to width is called theaspect ratio of the device.andM;Microsoft Windows handles the aspect ratio by providing some half-dozenfunctions to scale coordinates for a display context.andP;  The applicationprogrammer selects from coordinate systems that are metric, English,arbitrary, or raster dependent.andP;  Each coordinate is scaled automatically atoutput time.andM;In contrast, the X/GEM VDI uses primarily raster coordinates.andP;  This means theapplication must do its own scaling.andP;  The GEM designers felt that theapplication is best able to decide how to do the scaling in the mostefficient manner.andP;  For example, some CAD applications need to scale infloating point, whereas many publishing applications can use integer or fixedpoint scaling.andM;The X/GEM VDI provides aspect ratio information so that the application canhandle coordinate translation in the most appropriate manner.andP;  The height andwidth of a pixel (in microns) is returned by the VDI call that opens theworkstation.andP;  Listing One, page 92, illustrates how this is done with asimple integer scaling function.andM;Speaking in Foreign TonguesandM;As new markets open, it becomes increasingly important to be able totranslate applications into other languages.andP;  Doing this easily requires astrategy other than the traditional use of embedded text literals in thesource code.andM;With X/GEM, foreign language portability can be achieved by placing all theapplication's text messages in resource files.andP;  One of the system's mostimportant portability feature is the AES function for object and resourcehandling.andP;  The GEM Programmer's Tool to build and edit these resources iscalled the resource construction set or RCS.andM;RCS provides tools for constructing and displaying menus, windows, and dialogboxes in files independent of the application code.andP;  Each object has aposition and size, along with type and data information.andP;  The objects areorganized hierarchically, thus allowing them to be defined, displayed, andmanipulated relative to each other.andP;  Examples include icons, text, boxedtext, boxes, editable text fields, and programmer-defined objects.andM;The collection of objects for a given application is grouped together in aresource file.andP;  When a GEM application initializes itself at run time, itcalls the AES to load the resource file.andP;  The resource file contains all thetext that the user sees, separate from the executable code.andP;  This allows aprogrammer to prepare a resource file for each supported foreign languagewithout recompiling the application.andM;One warning: If you intend to translate menu and dialog items, leave plentyof extra visual space in the enclosing boxes for the translated messages.andO;For example, translating from English to German usually requires between 50and 100 percent more characters per message.andM;The RCS also allows an application designer to get quick feedback about theuser interface, even before a large amount of code is written.andP;  Instead ofusing the application's programming language, you use the interactive RCStools to specify exactly what gets placed where.andP;  Thus, for example, you canuse RCS to place a string object in a dialog box, change the text asnecessary, reposition and tweak it, and then label the object for access bythe application.andP;  The difference between constructing a moderately complexdialog with the RCS versus a compiled language is incredible.andM;The RCS produces a resource file.andP;  It can also produce a file format suitablefor compiling directly into the program.andP;  You might do this for a variety ofreasons, such as protecting the resource information or reducing distributioncomplexity by eliminating the resource file altogether.andP;  The penalty fordoing so is loss of portability to some extent.andM;The resource file shown in Listing Two, page 92, contains a single dialog boxwith two button objects.andP;  Without going into detail about the construction ofa resource, there are a few things to note.andP;  First, it took less than threeminutes from start to finish to create the dialog.andP;  Figure 2 shows the RCSdisplay during the design.andP;  Next, the structure of the resource file is welldefined and therefore described by the first few defines, which give criticalarray sizes.andP;  Finally, the RCS generates an include file with the contents:#define SAMPLDLG 0 /*TREE*/ #define BTNCANCL 4 /*OBJECT in TREE #0 */ #defineBTNOK 3 /* OBJECT in TREE #0*/andM;The #defines give indices into the resource array so that the appication canrefer to specific objects.andP;  These data objects change values according touser input, thus allowing the application to determine exactly what the userentered.andM;What about the OS?andM;The capabilities and characteristics of various operating systems (DOS vsFlexOS vs Unix vs OS/2) also influence strategy in writing portableapplications.andP;  Two critical areas are file and event handling.andP;  Many GEMapplications call directly the native operating system's file-handlingprimitives.andP;  This is done primarily to avoid the overhead of C run-timelibraries.andP;  Another reason for avoiding the run-time libraries is that theyusually build in bulky support to handle screen output, such as printf().andP;  Ingeneral, applications running under a windowing manager such as GEM andWindows cannot use the operating system's screen and keyboard I/O services atall; all I/O must go through the environment manager.andM;An application targeted toward several operating systems needs a file systeminteface that can be readily ported to any of them.andP;  One way to deal withthis problem is to use the standard routines (that is, fopen (), fclose (),fread (), fwrite (), and so on) provided with the C run-time library, and paythe price in overhead for portability.andP;  Another way is to emulate the filesystem calls of one operating system on another.andP;  For example, DRI furnishesa DOS emulation run-time library for the X/GEM product on FlexOS.andM;The AES provides a degree of operating system independence by providing afile-selector mechanism enabling an application to solicit a filespecification from the end user.andP;  This lets the user navigate through thefile system and change directories as necessary to find or specify thedesired file.andP;  DRI plans to tailor the mechanism for each supported operatingsystem in order to hide the subtleties of file system naviation from theuser.andM;The AES als provides an event driven input model with which applications canwork effectively in a broad range of environments.andP;  The application waits formultipple events, where an event could be a keypress, a mouse button press, atimer tick, or certain kinds of messages.andP;  These messages includenotifications that the user has requested a menu item, or changed the size orposition of a window.andP;  A message can also be information from otherapplications.andP;  The point is that the application doesn't have to activelypoll the environment looking for something to happen.andP;  Instead it suspendsactivity until a specified event occurs.andP;  This greatly enhances portabilityto multitasking environments; the application becomes a &quot;good neighbor&quot; inthe computing environment by not wasting unnecessary CPU resources.andM;The X/GEM event structure in Listing Three, page 92, looks complicated, butit's easy to understand.andP;  The program fills in the e flags field with abitmask containing those events that it wants to wait for.andP;  When a bit for aspecific event is turned on, the structure element controlling that eventmust be filled in.andP;  In the example shown in Listing Four, page 92, theprogram waits for one of two things to happen: either a keypress or anelapsed time of ten seconds.andP;  The application can also wait for a bu ttonpress, a message, or for the mouse to enter or leave one of two rectangularregions on the screen.andM;In Windows and in X, the application notifies the system that it will waitfor a number of different types of messages.andP;  This is roughly equivalent tothe evnt event() mechanism of GEM, except that events are serialized becausethe application can only receive a single message at a time.andP;  The Macintoshhas a much cruder mechanism, where it cycles through a loop, polling certainfunctions to see if anything has happened.andP;  This works fine when a singleapplication is running on the machine, but it causes conflicts and excessiveoverhead when multiple applications are polling at the same time.andM;Moving Among DifferentandM;ProcessorsandM;The wide differences among microprocessor architectures demand a carefulstrategy where portability is in the picture.andP;  The main requirements areprogramming in a portable language such as C, along with careful attentionto, and independence of, byte ordering, integer size, and correct andconsistent use of pointers.andP;  These and other concerns were discussed in GregBlackham's article &quot;Building Software for Portability&quot; (DDJ, December 1988).andM;With respect to X/GEM programs, there is one additional set of portabilityissues.andP;  In other to minimize the amount of code in GEM applications, theX/GEM bindings are defined to use the mixed model programming applicable tothe segmented Intel architectures.andP;  To simplify, an application can useeither long pointers-access to the entire address space at  the expense ofcode compactness--or short pointers, which decrease executable program sizebut can only address to 64K from a fixed location.andP;  GEM applications aremostly in small models (short pointers) with certain kinds of pointers beingkept in long format.andP;  Although this is an extra burden to the applicationprogrammer, it can be readily handled by the strict parameter type checkingavailable in most up-to-date C compilers.andM;Writing portable applications takes a different design philosophy and toolset than developing for a single system.andP;  There's nothing mysterious aboutthe process; it's just different, requiring observance of some common senserules.andP;  A well-crafted user-interface subsystem such as X/GEM, which wasspecifically creat ed for multiplatform, mult-device portability, can alsogreatly ease the headaches of moving software from one environment to anotherthat differs radically.andM;Availability</TEXT></DOC>