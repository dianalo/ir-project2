<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-596-639  </DOCNO><DOCID>07 596 639.andM;</DOCID><JOURNAL>PC Magazine  June 13 1989 v8 n11 p297(13)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>Moving up to Dbase IV. (PC Lab Notes)(includes related article ontransaction processing in Dbase IV) (column)</TITLE><AUTHOR>Shaw, Richard Hale; Lima, Tony.andO;AttFile:   PCMAG\V08N11\SCAN;0 Program:  SCAN  Dbase IV scan process.andO;PCMAG\V08N11\UDF;0 Program:  UDF  Dbase IV-user defined functions.andO;PCMAG\V08N11\VOLTEST.BAT;0 Program:  VOLTEST.BAT  Check label with disk.andO;PCMAG\V08N11\WINTEST.PRG;0 Program:  WINTEST.PRG  Dbase IV - windowing and menuing.andM;</AUTHOR><SUMMARY>With its large number of new features and improvements from pastversions, Ashton-Tate's Dbase IV requires about as much usereducation for those moving from dBase III as altogether new users.andO;To help assist users in their switch to the new environment, anintroductory primer is offered with helpful tips on the variousnew functions and commands.andP;  Included in the discussion are themajor enhancements in indexing, managing multiple file relations,the various new end user commands and user-defined functions,windows, pop-up-down menus and lists, strategies for convertingdBase III Plus programs to dBase IV, compiling code, the BUILD andDBLINK utilities, arrays and automatic multiuser features.andM;</SUMMARY><DESCRIPT>Company:   Ashton-Tate (products).andO;Ticker:    TATE.andO;Product:   dBASE IV (Data base management system) (usage).andO;Topic:     Data base management systemsTutorialProgramming Instruction.andO;Feature:   illustrationtableprogram.andO;Caption:   Multiple file relations. (table)Demo program. (program)andM;</DESCRIPT><TEXT>MOVING UP TO DBASE IVandM;Ashton-Tate Corp.'s long-awaited dBASE IV has finally arrived.andP;  With it comesnot only a new look, but a host of new facilities, including a new userinterface, more than 300 new commands and functions, an SQL (Structured QueryLanguages) interface, a template language, windowing, and a menu-building.andO;The template language is used for reports, labels, and screen forms.andP;  Newalso in the dBASE IV program are an application generator; the DOCUMENT .GENprogram documenter; and FORMBROW .GEN, which allows you to browse a &quot;child&quot;table in the screen form that belongs to its parent.andM;The sheer abundance of these new features means that moving from the familiardBASE III environment to the improved dBASE IV environment is a big a step asyou had to take when you advanced from dBASE II to dBASE III.andP;  This PC LabNotes will try to simplify your passage to dBASE IV and assist you in movingold applications over to the new environment.andP;  Specifically, we will discussandM;* major enhancements in indexingandM;* managing multiple file relationsandM;* various new end-user commandsandM;* user-defined functions (UDFs)andM;* user interface issuesandM;* windowsandM;* pop-up/pull-down menus and listsandM;* strategies for converting dBASE III Plus programs to dBASE IVandM;* compiling codeandM;* the BUILD and DBLINK utilitiesandM;* arraysandM;* automatic multiuser features.andM;In addition to all of this information, there's a sidebar, &quot;TransactionProcessing in dBASE IV.&quot;andM;As if this weren't a large enough selection of topics, we have neverthelessbeen forced to leave out several of the program's new features, most notablythe template language and dBASE-SQL.andP;  Fortunately for users, however, theseomissions should not seriously affect most relevant transition issues.andM;THE NEW INDEXING SYSTEMandM;The older dBASE III Plus program incorporates a simple indexing scheme thatis used for ordering and reordering the records in a database file.andP;  An indexis a file (usually referred to as an .NDX file) that contains an entry foreach record in a given database.andP;  Each individual entry in the .NDX file iscomposed of an index key and the physical record number of the recordassociated with that entry.andP;  The entries are maintained in ascendingalphabetical order.andP;  The index file enables dBASE III Plus to present youwith a sorted view of records that are physically unsorted.andM;Maintaining index files eliminates the enormous overhead that would berequired to maintain a physically sorted database.andP;  Index files can becreated quickly and easily; sort orders and keys to sort on can be changedliterally on the fly; and as long as an index is active, any records that arenewly added to the database will automatically be made available as part ofthe sorted index.andM;Under dBASE III Plus, each index required its own file (and DOS file handle).andO;A more serious disadvantage to dBASE III Plus was that a maximum of ten indexfiles could be open at once.andP;  You were thus limited to using only ten indexkeys on a database at any one time.andP;  Enter dBASE IV and its new multipleindex file--the .MDX file, for short.andM;The dBASE IV .MDX file lets you create and store up to 47 different indexkeys in a single file.andP;  You can mix and match UNIQUE indexes, compound indexexpressions, and conventional single-field index keys in the same .MDX file.andO;You are allowed to have only one .MDX file open at one time, but if 47 indexkeys aren't enough, you can still open as many as ten single-key index files.andO;Thus, under dBASE IV you can have 47 (.MDX) + 10 .(NDX) = 57 indexes.andM;In order to maintain compatibility with dBASE III Plus, dBASE IV cannot onlyread old .NDX files, but it can also create files with an .NDX extension.andO;Unlike dBASE III Plus, however, whose index files could only be created inascending alphabetical order, dBASE IV now allows you to build indexes ineither ascending or descending order.andM;The first time an .MDX file is created for a database, if you don't supply aname for the index file, dBASE gives it the same name as the database butwith an .MDX extension.andP;  For example, if your database is named CUSTCODE.DBF,the index file will be named CUSTCODE.MDX.andP;  This .MDX file becomes a uniquefile called the production index file.andP;  dBASE IV will always recognize thisas a special index file that is to be opened and updated automaticallywhenever the related database file is in use, ensuring that the index file isalways kept up to date.andP;  The program does this by checking the .MDX flag bytein the database file header.andP;  If byte 28 is set to 01h, dBASE IV will lookfor the file with an .MDX extension; if the flag is set to 00h, it won't.andM;As indicated, in dBASE III Plus each index that you create results in an .NDXfile.andP;  Under dBASE IV each index becomes part of the same ,MDX file.andP;  Inorder to distinguish between indexes within the .MDX file, each of theindexes has an associated tag that provides access to it.andP;  Consider thefollowing example: USE CUSTCODE INDEX ON CUSTID TAG CUSTID INDEX ONLASTNAME+FIRSTNAME TAG CUSTNAME INDEX ON STATE+ZIP TAG LOCATIONandM;In this example, the .MDX file is automatically created as CUSTCODE.MDX.andO;Three indexes are created in CUSTCODE.MDX, and each is given its own tag.andO;Using these tags, the user or application then simply tells dBASE IV whichindex from the .MDX file to use.andP;  The index in current use is always referredto as the primary key; all other indexes are called secondary keys.andP;  dBASE IVdoes not automatically select a primary key.andP;  That must be done by the useror by the application.andM;The .MDX files must be carefully managed, and many of the new dBASE IVcommands are dedicated to this task.andP;  Clearly, however, the use of multipleindex files allows you to streamline your code and makes dBASE IV's indexingscheme much more efficient than that of dBASE III Plus.andM;MULTIPLE FILE RALATIONSandM;Previous dBASE version severely limited your ability to express and controlrelationships between more than one database file.andP;  In essence, you could notrelate a file to more than one other file.andM;Both in dBASE III Plus (though only through its programming language) and indBASE IV, you can create a one-to-many relationship between a parent file anda single child file.andP;  In such a situation the child file has one or morerecords for every record in the parent.andP;  For instance, suppose the customerdatabase mentioned above was related to a database of orders placed by thecustomers.andP;  For each customer, ther are one or more orders in the ordersdatabase.andP;  You can link the two databases on the customer ID field (cust_id),as shown in figure 1.andM;Note the use of the Set Skip command.andP;  This command tells dBASE IV that morethan one child record may be found in addition to the initial match betweenthe two files.andP;  dBASE IV does not automatically update or access anyadditional child records.andP;  Without the Set Skip command, additional recordswould not be found or displayed.andM;Set Skip determines the order in which database files are accessed andupdated.andP;  When you issue this command, dBASE IV will ensure that the recordpointer in the child file's work area is updated before the parent file'srecord pointer is changed.andP;  This lets you access more than one occurrence ofthe same key in the two fileS.andM;In dBASE IV youcan also create multiple file relations between databaseswhere more than one child database file is related to the parent.andP;  Asillustrated in the lower portion of Figure 1, you can, for example, relatethe customer database file to three other files: an orders database, adatabase of customer contacts (individuals to contact at each customercompany), and a sales call log (a database that tracks each call made to eachcustomer over time).andP;  Again, the linking field is the customer ID number(cust_id).andM;This is one situation in which using the production indexes of dBASE IV canreally pay off.andP;  One weakness of the older version becomes obvious if youopen two database files in different work areas, create an .NDX index foreach one, and use the same name for both .NDX files.andP;  If the index name isthe same for each, only one index is actually created.andP;  That means that anychanges made to the index in one work area will overwrite those in the otherwork area.andP;  By using the index tags in production index, however, thisproblem is avoided, since the production index for each database has adifferent name--the same name as the database.andP;  Thus, a production indexsystem of dBASE IV lets you use the same index tag names in each work area.andM;NEW COMMANDSandM;Whether you're an end user or an application developer, there are a number ofnew dBASE IV commands you'll quickly find interesting and useful.andM;Set Autosave ON/OFF.andP;  This command allows you to force dBASE IV to save eachrecord to disk as soon as it is modified.andP;  Normally, dBASE IV buffers diskupdates, holding a batch of changed records in memory until the buffer isfull.andP;  The whole buffer fill of records is then written to disk at once.andO;This is generally the most efficient way to perform disk I/O.andM;Autosave lets you turn this buffering facility off, reducing the chance ofdata loss due to power outages or other potential problems.andP;  The downside toproviding this additional security is that you then can't back out of editsand changes where you normally could (such as in Edit or Browse).andP;  And, ofcourse, the additional disk I/O on every record slows down updatesconsiderably.andM;LookUp0.andP;  This function lets you find records in a database you're opened inanother work area.andP;  LookUp will perform a sequential search unless you happento have ordered the database with an index that uses the searched-for fieldas a key.andP;  To use LookUp you must specify a search criteria, a field tosearch, and a field whose value will be returned.andM;LookUp's advantage is that it can reduce the work of several commands to asingle step.andP;  Suppose, for instance, that you wanted to query the ordersdatabase mentioned earlier.andP;  Ordinarily, you would have to switch to workarea 2, find a record, save the contents of a field, and switch back to workarea 1.andP;  In dBASE IV you can simply call LookUp instead.andM;Unlike Seek and Find, LookUp can use an alias and search any database in anywork area.andP;  With Seek and Find you have to take an extra step to retrieve thecontents of a field from the record that's found.andP;  LookUp will perform thelookup and retrieve the field in one step.andM;Scan.andP;  The new Scan command in dBASE IV is a programming construct thatcombines elements of do While, Locate, Find, and Seek.andP;  It limits the numberof records that you might otherwise have to process and simplifies complexprogramming loops.andM;Scan's scope expression and For condition provide bounds for the number ofrecords being processed.andP;  If you do not specify a scope, it will defaulttoall of the records in the file.andP;  The While condition allows termination ofa scan when a given condition is no longer true.andM;Both the Loop and Exit keywords perform as they would in a Do Whilestatement.andP;  A Loop command jumps back to the top of the Scan statement, whilean Exit command breaks out of the Scan altogether.andP;  The EndScan marks the endof the statement, just as an EndDo does for a Do While statement.andM;Scan can take a scope just like Locate.andP;  For example, SCAN NEXT 5 willprocess the current and next four records.andP;  SCAN REST will process the restof the records, starting with the current pointer position.andP;  You can use theFor and While conditions to limit this.andP;  Figure 2 shows a Do While statementand a comparable Scan that produce identical results.andP;  In most cases usingScan will result in better, faster executionandM;Calculate.andP;  Calculate, like Scan, allows you to combine several commands intoa single step.andP;  It can perform several mathematical functions on an entireset of database records.andP;  Further, it can accomplish this with only a singlepass through the database.andP;  Calculate eliminates the need for writing severalcoding loops that would make multiple passes through the database.andM;Calculate can execute any combination of the following functions against adatabase: Npv(), Std(), Var(), Min(), Max(), Avg(), Sum(), and Cnt().andP;  Youcan use For and While to limit the records processed by Calculate.andP;  If theseare not present, Calculate will process the entire database.andM;USER-DEFINED FUNCTIONSandM;User-defined functions (UDFs) are a welcome addition to dBASE IV.andP;  They allowyou to create your own functions and add them to the dBASE IV language duringthe course of your application.andP;  You identify and use UDFs in the same way asother dBASE IV functions: with a function name followed by parentheses.andP;  Theparentheses contain a list of parameters passed to the function.andP;  Each UDFmust have an explicit function definition.andP;  The syntax for creating UDFs isshown in Figure 3.andM;Each function definition consists of the Function keyword followed by thefunction name, the Parameter keyword followed by a parameter list, and thecode that constitutes the body of the function.andP;  Note that, like theProcedure keyword, the Function keyword identifies the ensuring code as afunction.andP;  UDFs must return a value appropriate to the call, and they mustend with a Return statement.andM;Macro substittution is not allowed inside a function, and there are manycommands that cannot be used in user-defined functions.andP;  Note that you shouldnot write functions with the same name as any of dBASE IV's built-infunctions, nor can you substitute one of your own functions for one that'sbuilt in: dBASE IV will always ignore your function in favor of one of itsown.andM;Like procedures, however, UDFs allow you to create highly structured programsin which you can encapsulate and hide the details of a specialized task.andP;  Youcan make your program smaller and more efficient by using the same functionover and over again for a particular task.andP;  This simplifies programmaintenance by isolating the code that does the work for any given task.andO;While the dBASE language does not have all the attributes that are found inthe more popular high-level languages, the addition of user-defined functionsto dBASE IV is a step in the right direction.andP;  Figures 4 provides a commentedexample of a UDF.andM;IMPROVED USER INTERFACEandM;In comparisons with its predecessor, dBASE IV offers substantially betterscreen control by providing commands for creating and manipulating windowsand three types of menus.andP;  Indeed, there are so many windowing commands thatlearning them may initially appear a formidable task.andP;  Fortunately, theybecome a little easier to deal with as you become familiar with the dBASE IVwindowing terminology, which includesandM;* Window--a specific screen are in which ensuing operations will take place.andM;* Horizontal menu--a list of selectable items that appear horizontally acrossthe screen.andM;* Pop-up menu--a list of selectable items that appear vertically on thescreen within a framed border.andM;* Pull-down menu--a pop-up menu attached to an item in a horizontal menu.andO;When the menu items is highlighted, the associated pull-down menu appears.andM;* Pads--the prompts or selections in a horizontal menu.andM;* Bars--the prompts or selections in a pop-up or pull-down menu.andM;Your application can utilize dBASE IV's windowing capabilities in severalways.andP;  You can create a window that acts as a &quot;view&quot; into a series ofdatabase records.andP;  You can also display the memo fields from a databaserecord in a window.andP;  Or you can use a window to display error message or userprompts.andM;There is a strict set of steps to follow when creating and manipulating thesescreen objects.andP;  Before you can do anything with a window or menu, you mustdefine it.andP;  Next, you must activate the window or menu when you want it toappear on the screen.andP;  Finally, you must deactivate it when you're throughwith it.andM;When you issue the Define Window command, you supply a name for the windowand specify the upper-left and lower-right window coordinates.andP;  Thesecoordinates must fit within the boundaries of the screen.andP;  Optionally, youcan specify the screen border characters and colors in the window definition.andO;Window borders may consist of single or double lines, a reverse-videocharacter, or a character string.andP;  You can define up to 20 windows at a time.andM;Once defined, a window is activated (appears on the screen) through theActivate Window Command.andP;  When you make a window active, dBASE IV maps allscreen input and output to the area within the window's borders.andP;  Theupper-left cursor position of a window becomes the reference position 0,0that governs all subsequent screen commands.andP;  Only dot prompt commands areexceptions to this rule.andM;When a window is activated it appears on-screen and covers whatever iscurrently within its screen coordinates.andP;  Anything in the covered area isautomatically saved, however.andP;  The Active Window command can take asparameters either a list of window names or the All keyword.andP;  If you give ita list of window names, the last window named becomes the active window.andO;Windows can be moved about the screen with the Move Window command.andM;Logically enough, the DeActivate Window command deactivates a window.andP;  Whendeactivated, the window simply disappears.andP;  dBASE IV then restores to thescreen whatever was originally beneath the deactivated window.andP;  If there areonly two windows on the screen and you deactivate the active window, dBASE IVautomatically activates the remaining window.andP;  If you deactivate the activewindow and more than one window remains, the most recently activated windowbecomes the new active window.andM;You can use the Activate Screen command to write to the screen outside theactive window while still leaving the window on-screen.andP;  This resets thescreen coordinates so that output once again does to the full screen.andP;  Inthis case, however, if any of the screen output falls within the boundariesof the displayed windows, that output will be lost when you activate ordeactivate the windows.andP;  While the full screen is active, some commands (likeList) can scroll a window off the screen altogether.andP;  You can reactivate anyof the windows again with Activate Window.andM;dBASE IV does not remove a window from memory when you deactivate it.andP;  Thatrequires a separate command.andP;  You can remove all windows from the screen andfrom memory with the Clear Windows command.andP;  Or, you can remove specificwindows from the screen and memory with Release Windows.andM;You can save windows to a disk file for later use with Save Window, orrestore them from the disk file with Restore Window.andP;  dBASE IV stores windowsin files designated with a WIN extension.andP;  The ability to save windows is avery useful feature, since it lets you use the same windows in differentapplications.andM;HORIZONTAL MENUSandM;dBASE IV lets you define horizontal menus with the Define Menu command.andP;  Anoptional Message parameter lets you display a message centered on the bottomline of the screen while the horizontal menu is active.andP;  The selections in ahorizontal menu are called pads.andP;  You must use the Define Pad command todefine each individual pad before you can use it in a horizontal menu.andM;The Activate Menu command displays the named menu, with the prompt padsaccessed in the order in which they were defined.andP;  By default, Activate Menuhighlights the first pad defined, but any pad can be designated for initialhighlighting.andP;  The Left and Right Arrow keys move the highlight between themenu pads.andM;The On Selection Pad command lets you associate a menu pad with a dBASE IVcommand, procedure, or program.andP;  So, if the user presses the Enter key toselect that pad, the specified command or program is executed.andM;You can remove a menu from the screen with DeActivate Menu.andP;  Thissimultaneously restores whatever screen information had been covered by themenu.andP;  Like their window counterparts, you can use Release Menus to erasemenus and remove them from memory and Clear Menus to erase and remove menusthat are not in use.andM;POP-UPS, PULL-DOWNS, LISTSandM;AdBASE IV pop-up menu presents a list of selectable items in a framed border.andO;Items can be selected either by typing the first letter of the item or bymoving the highlight to the item and pressing Enter.andP;  Since popups arevertically oriented, you use the Up and Down Arrow keys to move betweenitems.andM;As with windows and horizontal menus, you must define a pop-up menu beforeyou can use it.andP;  To do this you use the Define Popup command and provide thescreen coordinates for the menu.andP;  Each selectable item in a pop-up menu iscalled a bar, which is defined using the Define Bar command.andP;  Each line in apop-up menu is referred to by number, starting with 1 on the top line.andM;The Skip clause in the Define Bar command lets you make a given barnonselectable.andP;  This permits you to create bar selections that will beavailable and selectable only under specific conditions.andP;  For example, theclause.andP;  Skip for RecCount( ) = 0 will cause a bar to be skipped if there areno records in the database file.andP;  You can create blank lines between menuitems simply by omitting the bar definition for the line that you want to beblank.andP;  For example, if you define lines 4 and 6 in a pop-up menu, line 5will be blank and the highlight will automatically skip over it.andM;Again, you activate a pop-up menu with the Activate Popup command.andP;  When apop-up menu is activated, dBASE IV leaves any previously activated pop- upson the screen and places the new pop-up on top of them.andP;  A menu bar in apop-up menu can activate another pop-up menu, or execute a dBASE IV programor command.andP;  You control the action that takes place when the user selects amenu bar with the On Selection Popup command.andM;When you're through with the pop-up menu, you deactivate it with DeActivatePopup.andP;  You must use some care in doing this, however, for when youdeactivate a pop-up menu, dBASE IV terminates it along with any menus andprocedures that it called via On Selection Popup.andP;  If there is any coderemaining in a called procedure, then that code will not be executed.andM;A pull-down menu is simply a pop-up menu that appears when you move thehighlight to a particular pad of a horizontal menu.andP;  Thus, it &quot;pulls down&quot;from the menu pad.andP;  A pull-down menu differs from a pop-up menu in onerespect: the user does not have to press Enter in order to activate it.andP;  Hesimply moves the highlight to the pad with which it is associated.andP;  In ahorizontal menu without pull-downs, the user must select an item to display asubmenu.andP;  Note that a pull-down menu's prompt for each bar takes priorityover any prompt from the light bar menu.andM;The On Pad command lets you designate a sequence of events that will occurwhen the user moves the highlight to the specified pad.andP;  These events mayrange from running a dBASE IV program or command to activating a pop-up menu.andO;You can use the Activate Popup clause in the On Pad command to connect pop-upmenus with a pad and creat pull-down menus.andP;  Figures 5 and 6 illustratetechniques using windows and menus.andM;dBASE IV provides a number of useful support functions for working withmenus.andP;  Menu() returns the name of the currently active menu.andP;  The Pad()function returns the title assigned to the currently selected pad.andP;  Bar()returns the number of the currently selected pop-up bar.andP;  The Prompt()function is the only effective way to work with file, field, and value picklists.andP;  It returns a character string that represents the value of the promptselected, whether from a light bar or a pop-up.andP;  These functions can be usedto let a program or subroutine &quot;know&quot; which menu, pad, or bar was selected,without requiring that you pass this information to the program itself.andM;Finally, dBASE IV also provides &quot;lists,&quot; which are actually a special kind ofpop-up menu.andP;  Lists come in three flavors, according to their contents: Filelists, Field lists, and Record lists.andP;  File lists pop-up a list of files onthe disk or in the current dBASE IV catalog.andP;  Field lists display a group offields defined by the Set Fields command.andP;  Record lists display the contentsof each record in a field.andM;CONVERSION STRATEGIESandM;Having covered the most important new features in dBASE IV, it's time to turnour attention to the issue of moving applications from dBASE IV to the newenvironment.andP;  It's important to note that dBASE IV program code is 100percent upwardly compatible from dBASE IV Plus.andP;  That can actually make thetransition from dBASE III Plus to dBASE IV easy: just run the old code underdBASE IV.andM;This easy path, however, precludes taking advantage of the new featuresavailable under dBASE IV.andP;  A more sensible strategy, then, is to portapplication code over by modifying any code that will benefit from specificdBASE IV features.andP;  Such modifications will result in improved programexecution speed, reduction in code volume, better distribution of completedprograms to users, and easier program maintenance in the future.andP;  Thetrade-off, as usual, is the amount of time you must devote to converting codeto new procedures and programs.andM;THE COMPILERandM;The new compiler, which is a tokenizer that reduces both the execution timeand (usually) the program size, is the major factor in producing the speedimprovement found in dBASE IV.andP;  Since the new version automatically compilesall programs before running them, virtually every one of your old dBASE IIIPlus programs will run noticeably faster under dBASE IV.andP;  Ashton-Tate claimsperformance improvements of nine to ten times; our own tests indicate than animprovement by a factor of at least seven can be anticipated.andP;  Because of itsfull compatibility with dBASE III Plus, the dBASE IV compiler's actions on anapplication are virtually transparent.andM;Unless you're using the debugger, dBASE IV will not run uncompiled codedirectly.andP;  All you have to do to compile a previously uncompiled program,however, is run it from the dot prompt using the DO program filenamestatement.andP;  If you wish, you can compile an old program directly from the DOScommand line when starting up dBASE IV by entering dbase program filenamedBASE IV will compile your .PRG file into a file with the same name and giveit a .DBO (DataBase Object file) extension.andP;  Alternatively, you can enterCOMPILE program filename from the dot prompt.andP;  Note also that if dBASE IVencounters a DO program filename command in the currently executing program,it will compile the new program module on the fly.andM;Suppose you compile a program file but then make some changes.andP;  Suppose thatyou forget to recompile the module and simply enter DO program filename Toavoid a problem, you can set up dBASE IV to compare the DOS date and timestamps on the .PRG and .DBO files and automatically recompile the .PRG fileif the date and time are different.andP;  To do this you SET DEVELOPMENT ON fromthe dot prompt or, better still, you can put the command DEVELOPMENT = ON inthe CONFIG.DB file.andP;  We strongly recommend leaving Development set On always,even though it does slow execution somewhat, since the date and time must becompared before execution of the .DBO file can begin.andM;THE BUILD UTILITY AND DBLINKandM;One easy way to make compiled code more efficient is to link program modulesinto a single tokenized file by using the BUILD utility.andP;  BUILD is availablewith the Developer's Edition of dBASE IV.andP;  Other programming tools includeDBLINK, template language source code files and the template languagecompiler and interpreter, several LAN key disks, and an unlimited Runtimewith no license fees.andP;  Most of the conversion strategies discussed in thiscolumn don't require the more expensive Developer's Edition of dBASE IV.andM;DBLINK and BUILD provide two of the traditional functions of linkers:combining individual .DBO files and selective recompilation.andP;  The syntax fordBLINK is quite simple: DBLINK main program filename [/L]andM;DBLINK processes the entire program tree, including any procedures andprogram files invoked in the main program or subprograms.andP;  Note that onlycompiled files can be processes with DBLINK.andP;  The /L option redirects thelinker output from the screen to a disk file.andP;  The file will have the samename as the main program file, but will have a .TXT extension.andM;When a single .DBO file has more than one module linked into it, it is notnecessary to recompile all the modules when individual modules are modified.andO;Only the modules that have been changed need to be recompiled.andP;  You thensimply relink the individual .DBO files.andM;BUILD is a menu-driven program that will automatically analyze, compile, andlink a set of program files.andP;  BUILD can be set up to include or excludedifferent file types.andP;  The utility has two main pop-up menus.andP;  As shown inFigure 7, the first menu lets you specify the name of the main program withthe Compile option.andP;  If linking isn't desired, it can be turned off bychanging the Link yes/no option to no.andP;  You can send the finished .DBO fileand all associated files to a different drive and directory (or to a floppydisk) by invoking the Output destination option.andP;  You should invoke the finaloption, Perform build, only after you have set all the other parameters,including those from the Options menu.andM;The second menu is the Options menu (see Figure 8).andP;  Generally, you'll acceptall of the default Option values.andP;  For example, the Search for new functionsyes/no option checks for user defined functions that have the same name asbuilt-in dBASE IV functions.andP;  When yes is specified for this option, BUILDwill include an error message for every redundant UDF name in a givenprogram.andP;  (Remember, dBASE IV will execute its own internal function if a UDFhas the same name as one of dBASE IV's own functions.)andP;  You must then changethe name of your function if you still want to use it.andP;  If you're sure youhave no functions with the same names as those of dBASE IV functions,however, changing this to no will speed compilation.andP;  The other choices allserve useful purposes, but we'll leave them to you to explore.andM;The compiler and linker are probably the two most important tools availablefor speeding up program execution.andP;  Utilizing these tools obviously ratesvery high on the list of strategies to pursue, since programs have to becompiled anyway, and linking is very fast and easy.andP;  Up to this point,however, nothing we've discussed involves changing your existing code.andP;  Let'stake a look now at how you can modify your programs to provide significantlybetter performance.andM;CODE CHANGESandM;The earlier discussion of .MDX files should make it clear that converting old.NDX files into the new .MDX format will gain performance points.andP;  There's noreal reason not to do so.andP;  Of course, code that specifically looks forcertain .NDX files will need to be changed.andM;Remember, too, that the Scan .andP;  .  .  Endscan construct is significantlyfaster than a comparable Do While structure.andP;  Do While code, therefore,becomes an obvious candidate for modification.andP;  If you're facing the problemof converting from dBASE III Plus to dBASE IV and your program frequentlymoves the pointer with Do While and Skip, this code change will make a majordifference.andM;We mentioned previously that Set Skip is designed to handle one-to-manyrelations.andP;  dBASE III Plus has a real problem handling the one-to-manyrelations, and the code necessary to implement such relations runs slowly.andO;Set Skip solves this problem, so any code that involves one-to-many relationsis also a prime candidate for modification.andM;ARRAYSandM;One very welcome addition to the dBASE IV environment that we haven't yetmentioned is its implementation of two-dimensional arrays.andP;  Array elementsare referenced by row-column coordinates.andP;  For example, the followingcommands set up a 3 by 16 array called CUST, initializes element (2,14) as anumeric type with a value of 0, and initialize element (3,5) as a charactertype with a value of &quot;PCMAG&quot;.andP;  DECLARE CUST [3,16] CUST[2,14] = 0 CUST[3,5] =&quot;PCMAG&quot;andM;As your see, data types can be mixed within an array.andP;  That means you can usethe new Copy To Array and Append From Array commands to move records from onedatabase to another.andP;  Suppose, for instance, that you want to move a recordfrom CUSTOMER to the temporary database CUSTTMP for editing.andP;  Here's how todo it in dBASE IV: DECLARE CUST1[16] andamp;andamp; CUSTOMER has 16 fields SELECT 1 USECUSTOMER COPY TO ARRAY CUST1 FOR CUSTCODE = '10001' SELECT 2 USE CUSTTMPAPPEND FROM ARRAY CUST1andM;If you were using the dBASE III Plus program, you would have to do somethinglike the following: SELECT 1 USE CUSTOMER COPY TO TMP FOR CUSTCODE = '10001'SELECT 2 USE CUSTTMP APPEND FROM TMPandM;The problem here is that TMP is a disk file.andP;  The DBASE III Plus procedurerequires one disk write and one disk read.andP;  Since arrays are in-memoryobjects, all the data transfer should instead be done through memory, with anobvious and possibly dramatic improvement in speed.andM;The dBASE IV Copy To Array command can include a fields list (FIELDS fieldlist), so partial database copies are easily done.andP;  With the use of thiscommand, fields are copied in the order listed, so you can reorder them inthe sequence needed for the database used by Append From Array.andP;  If you wantmore than one record in an array, the first dimension of the array determinesthe number of records; the second, the number of fields.andM;NEW CLAUSES FOR USEandM;The Use command now supports several new clauses.andP;  These allow you to open adatabase in the unSELECTed work area, to open a database in more than onework area, and to open a read-only version of a database.andP;  To open a databasein an unSELECTed work area, use the syntax USE filename IN work area numberandM;Note that this does not change your currently SELECTed work area.andM;One of the most unusual new clauses with Use is the keyword AGAIN.andP;  Note thatit is not described in the dBASE IV documentation, so read on!andP;  This keywordallows you to open the same database in two different work areas.andO;Effectively, you can maintain two different pointers and primary indexes forthe same database or use two different primary indexes.andP;  This means you cando SEEKs and FINDs on two different keys without changing the primary key.andM;To understand how AGAIN works, consider the following dBASE III Pluscommands: SELECT 1 USE CUSTOMER SELECT 2 USE CUSTOMERandM;You know, of course, that dBASE III Plus will dutifully report the errormessage &quot;File is already open&quot; after the last command.andP;  In dBASE IV, however,the commands below will work: SELECT 1 USE CUSTOMER AGAIN ORDER CUSTCODE USECUSTOMER AGAIN IN 2 ORDER ZIPandM;You can now do a FIND or SEEK on the CUSTCODE field in work area 1 and theZIP field in work area 2.andP;  Now, after the previous commands, try this: FINDandless;custcode valueandgt; DISPLAY CUSTCODE, ZIP SELECT 2 FIND andless;zip code valueandgt; DISPLAYCUSTCODE, ZIP You'll see the different record numbers and values displayed inthe two work areas.andP;  According to Ashton-Tate, problems can arise when usingthe keyword AGAIN in the Use command with the same index in two differentwork areas.andP;  Basically, the indexes can become corrupted if you are adding orediting data.andP;  Our advice, then, is simply not to use the same database intwo different work areas while you are adding or editing data.andM;Finally, USE filename NOUPDATE prevents any addition or editing of data inthat database.andP;  Implementing these clauses in place of more elaborate dBASEIII Plus code will shorten code considerably and speed program execution.andM;AUTOMATIC MULTIUSER FEATURESandM;dBASE IV includes a number of multiuser features that can (and should)replace existing dBASE III Plus code.andP;  dBASE IV will automatically lock arecord or a database, as necessary.andP;  Automatic retry and timeout are nowimplemented.andP;  And real-time screen updates are available for networkedediting.andM;You can therefore throw out many of the multiuser procedures you have writtento implement automatic retries of locked files and multifile locking.andP;  Ingeneral, commands that change a single record will lock that record.andP;  Forexample, EDIT n will attempt to lock record number n.andP;  Similarly, thecommands REPLACE field WITH expression will lock the current record.andP;  On theother hand, commands that change more than one record will lock the entiredatabase.andP;  Thus, REPLACE ALL field WITH value will lock the entire file.andM;These locking commands come at a price--somewhat larger databases.andP;  Beforethey can be used, the following commands must be issued for each database ina given application: USE database name CONVERTandM;CONVERT adds a single 16-byte field called _DBASELOCK to the database.andP;  Thisfield stores locking information for each record or file, including the dateand time the object was locked and the first eight characters of the networkname of the user who locked it.andP;  (If you want more or less of the networkname stored, give the command CONVERT n where n must lie between 8 and 16.andO;The n is the number of bytes allocated to _DBASELOCK.andP;  The space that isavailable for the network name is n-8.)andM;There are benefits to giving up the extra disk space this process consumes.andO;Since record and file locking is now automatic, it is now much faster thanprocedures you may have written.andP;  And though we won't be getting into detailshere, you can access the information in the _DBASELOCK field for use in yourprograms.andM;One of the most interesting aspects of dBASE IV's multiuser operations isthat real-time screen updates are provided.andP;  If one user is editing a record,any changes to the record will be reported, more or less in real time, to anyother users who are viewing that record.andP;  The actual length of time betweenscreen updates is controlled by the SET REFRESH TO expN command, where expNis the number of seconds between screen updates.andP;  Try a value of 5 secondsand increase or decrease it depending on how network performance isaffected--the more frequently the network updates screens, the less time itcan spend on other activites.andM;Taking advantage of these new multiuser features will not only speed upprogram execution but will also give users more information about who haslocked files and records.andM;PROCEDURALIZE CODEandM;dBASE IV allows you to put procedures--and not just those designated asprocedure files--at the end of any program file.andP;  This means that you canstructure your programming, using procedure files only for those proceduresthat are called by a number of program modules.andP;  Procedures used by only onemodule should be included with that module.andM;You can have up to 1,170 procedures active at one time, so you probably won'trun out soon.andP;  Procedures allow more-structured programming, making codeeasier to maintain.andP;  And a procedure can be a user-defined function.andP;  Figure9 shows a function (and the function call) that trims leading and trailingblanks froma character string.andM;Procedures and user-defined functions make code much easier to maintain andunderstand.andP;  They can also improve execution speed if used correctly.andM;AND THERE'S MOREandM;There is much we haven't been able to cover.andP;  For example, memo fields nowhave significantly more utility than they did in dBASE III.andP;  Make it a pointto experiement with their use.andP;  Make sure also to explore the possibilitiesof QBE (query by example), which is the easiest way to establish relationsbetween multiple data files.andP;  Figure 10 provides a useful example as astarting point.andP;  Finally, note that the CONFIG.DB file now supports theinstallation of up to four printers and up to five fonts for each printerdriver.andM;dBASE IV is not perfect.andP;  But it is a major step up on the evolutionaryladder.andP;  Porting your older applications to the new environment will resultin dramatic increases in performance.andP;  By utilizing the new windowing andmenuing capabilities provided in dBASE IV, you can visually enliven yourapplications, as well.andP;  Take into account what's new, consider carefully thestrategies suggested here, and the transition to the new environment willalmost take care of itself.andM;TRANSACTIONandM;PROCESSING IN DBASE IVandM;Transaction processing is a technique that gives applications a greaterability to ensure database integrity.andP;  This can be a crucial consideration ina networking or multiuser environment, where several users or processes canmake modifications to a database at any one time.andP;  In a single-userenvironment, you can implement transaction processing to provide insuranceagainst power outages, locked files or records, or other acts of God thatwould otherwise corrupt a database.andP;  When you use transaction processing, youcan always restore or recover database files if they become corrupted.andM;TRANSACTIONSandM;In simple terms, a dBASE IV transaction is a unit of work--a sequence of oneor more database operations--that modifies one or more database files.andO;Typically, the application programmer decides how many database commands areprocessed per transaction.andP;  Thus, it's up to you to define the extent of atransaction.andP;  Transaction processing ensures that database files are alwaysin a consistent state, both before and after a transaction takes place.andM;The key concept here is that during the course of a given transaction,database files are considered to be in an inconsistent state.andP;  If atransaction is interrupted, transaction processing makes sure that thedatabase can be rolled back to a previously known consistent state.andP;  (Thisrecovery process is called a roll-back.)andP;  When you roll back a transaction,all updates to the database (additions, deletions and changes) will reversed.andO;The database files are then left in their original, consistent state, as ifthe transaction had never taken place.andM;A TRANSACTION PERIODandM;Several dBASE IV commands give you significant control over transactionprocessing, both from within an application and from the dot prompt.andP;  BeginTransaction notifies dBASE IV that a transaction has begun.andP;  The transactioncontinues until an End Transaction command is encountered.andP;  Obviously, atransaction should not last for any extended period of time, so the number ofcommands issued during the transaction period should be kept to a minimum.andO;dBASE IV keeps all file and record locks created during the transaction ineffect until a transaction ends.andP;  Thus it becomes all the more crucial tokeep a transaction period to a minimum duration.andM;dBASE IV creates a transaction log file during each transaction and logs allchanges made to a database file during that period.andP;  It continues to do sountil the End Transaction command is encountered.andP;  End Transaction tellsdBASE IV that the transaction has been successfully completed.andP;  When dBASE IVencounters the End Transaction command, it purges the transaction log file,and releases any file locks against the database files involved in thetransaction.andP;  Note that transactions cannot be nested; you must issue an EndTransaction command before issuing another Begin Transaction.andM;If an error occurs during a transaction dBASE IV uses the transaction logfile to restore the database to the state it was in before the transactionbegan.andP;  The dBASE IV Rollback command rolls a database back to its stateprior to the issuing of a Begin Transaction command.andP;  Rollback uses the logfile to restore the database by reversing the transactions.andM;On a single user system, the transaction log file is called TRANSLOG LOG.andP;  Ona network workstation, it's called workstation.LOG, where workstation is thenetwork name of the workstation that issues the Begin Transaction command onthe network.andP;  Note that on a Novell network, the workstation name is itslog-in ID.andM;dBASE IV allows you to find out which users have locked a record or databasefile in the event this causes an error.andP;  You can use the Lksys() function toretrieve the name of the user who locks a file or record, and the date andtime the file or record was locked.andM;Before you can use Lksys(), however, an additional field must be added to thedata base structure of all databases that might be locked.andP;  The Lksys()function retrieves the locking information from this field.andP;  You add thisfield, called -dbaselock, with the dBASE IV Convert command.andP;  The field mayvary from 8 to 24 characters in size.andP;  How large you make -dbaselock dependson how much locking information you would like to be able to retrieve: themore information you need, the bigger the field must be.andP;  It also depends onhow much space (calculated by the size of the field times the number ofrecords in the database) you're willing to add to the database.andM;To use transaction processing on a network, each use must log in with adifferent user name.andP;  This is generally a good practice in any case, but itis doubly important here, because dBASE IV cannot distinguish between filelocks by users with the same name.andP;  The return values from Lksys() will beidentical in such a case.andM;dBASE IV provides several commands and functions that facilities errorprocessing in conjunction with transaction processing.andP;  The On Error commandlets you specify a program that will be run in the event that a dBASE IVerror (such as a locked file) occurs.andP;  That facility gives you control errorprocessing so you can, for example, notify the user and give him options.andO;You can use the Retry command to return from the error processing program andretry the error that occurred.andM;The Rollback() function tests the success of a Rollback command.andP;  TheIs-marked() function detects the presence of a transaction in progress.andP;  And,the Completed() function tests to see if a transaction was completedsuccessfully.andP;  This last is a kind of poor man's On Error: it tells youwhether the transaction was successful, but doesn't do anything about it.andM;HOW DOES IT MEASURE UP?andM;While transaction processing capability represents a step forward for dBASEIV, its implementation is certainly not state-of-the-art.andP;  In many relationaldatabase environments, changes to a database are recorded automatically, butthe changes are usually made to a &quot;shadow&quot; database--one that makes it appearas if the real database has been changed, when it actually hasn't.andM;In these other environments, once you're satisfied with the changes made to adatabase, you issue a Commit command, which forces the changes onto thedatabase.andP;  If you are not satisfied, you can back out of the changes byissuing a Rollback command, which undoes any changes back to the previousRollback or Commit.andP;  Thus, an application can use transaction processing toreverse changes routinely made by users--not just for error recovery.andM;With dBASE IV the opposite occurs: changes are immediately made to the realdatabase itself, and you must go through a &quot;physical&quot; rollback sequence toreverse them.andP;  Essentially, the difference is that traditional transactionprocessing implementations are application driven--the application (or insome cases the user) makes the decision about when a transaction will becommitted to the database.andP;  In dBASE IV the implementation is fundamentallyerror driven.andP;  The transactions are always committed to the database, but youcan undo them if an error occurs.andM;Nevertheless, even a somewhat limited transaction processing capability isbetter than none at all, and it's certainly good news for dBASE developersthat they now have much better error and data corruption control overapplications.andO;</TEXT></DOC>