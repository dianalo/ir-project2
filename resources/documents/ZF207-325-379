<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-325-379  </DOCNO><DOCID>07 325 379.andM;</DOCID><JOURNAL>Lotus  Feb 1989 v5 n2 p59(3)* Full Text COPYRIGHT Lotus Publishing Corporation 1989.andM;</JOURNAL><TITLE>Effective application design. (building 1-2-3 or Symphonyapplications)</TITLE><AUTHOR>Roshfeld, Larry.andM;</AUTHOR><SUMMARY>Before building a 1-2-3 or a Symphony application, consider thesequestions: What should the application do? How is it being done?andO;Is it worth doing in 1-2-3 or Symphony? If the answers to thesequestions are unclear, the application-development process willlikely be chaotic.andP;  A set of design principles devised by BobStahl of the Interface Design Group (Oakland, CA), are presentedthat follow Stahl's acronym TROPIC, which stands for transparency,resilience, orientation, productivity, integrity and control.andO;These principles are adapted from work that Stahl originally didin 1986, involving mainframe applications.andM;</SUMMARY><DESCRIPT>Company:   Interface Design Group (officials and employees).andO;Product:   Lotus 1-2-3 (Spreadsheet software) (usage)Symphony (Integrated software) (usage).andO;Topic:     TutorialSoftware DesignSpreadsheetsIntegrated SoftwareApplications Programming.andO;Feature:   illustrationphotograph.andO;Person:    Stahl, Bob (research).andM;</DESCRIPT><TEXT>EFFECTIVE APPLICATION DESIGNandM;Each PC user costs a corporation roughly $18,000 per year, according to astudy by Nolan, Norton andamp; Co.andP;  The single largest part of that cost is supportand training.andP;  Surprisingly, software and hardware are a minimal part of thetotal.andP;  Reduce the amount of time and support someone needs to get resultswith an application, and you'll save your company money.andM;This article explores theories for designing easy-to-use, yet effective,microcomputer applications.andP;  You won't learn how to lay out a model or writeand document a macro, but you will learn how an application should look,feel, and work in order for it to succeed.andM;Before building a 1-2-3 or Symphony application, answer these questions: Isthis task worth doing in 1-2-3 or Symphony?andP;  What should the application do?andO;How is the task being done today?andM;These questions force you to address certain critical issues up front.andP;  Ifyou're uncertain about the answers, the application-development process maybe chaotic.andM;Once you've answered these questions and determined that a custom applicationis justified, you need a set of design principles.andP;  In the article &quot;FriendlyMainframe Software Guides Users Toward Productivity&quot; (Computer-world,February 3, 1986), Bob Stahl, of The Interface Design Group in Oakland,Calif., devised the acronym TROPIC to describe the principles of good designfor mainframe applications.andP;  TROPIC stands for transparency, resiliance,orientation, productivity, integrity, control.andP;  These same principles areapplicable to the design of 1-2-3 and Symphony applications.andM;TRANSPARENCYandM;An application is &quot;transparent&quot; when the software is so easy to work withthat it leaves the user free to concentrate on the job at hand.andM;To design a transparent application, make it resemble a system wit which auser is familiar and comfortable.andP;  For example, if someone is used to workingon a paper form, make the application closely resemble the form.andM;If you cannot make the application fully transparent, make t intuitive.andP;  Anintuitive application lets someone anticipate what will happen next.andP;  Usefamiliar 1-2-3 and Symphony menu choices and make them operate just as theydo in 1-2-3 and Symphony.andP;  For example, 1-2-3 users are familiar with theSave, Retrieve, Print, and Graph options.andP;   When you use the same words andmeanings in your custom menu, the user can depend on previous experience andcommon sense to help in understanding the application.andM;Finally, make an application behave consistently.andP;  For example, if one Savemenu selection lets someone enter a new file name or automatically saves thefile under the current name, be sure that every Save option in yourapplication operates similarly.andM;RESILIENCEandM;An application should anticipate any mistake a person might make and providefor a graceful escape.andP;  The key to anticipating mistakes is to builderror-checking into the application.andP;  For example, a tax application may asksomeone to enter the amount withheld for Social Security.andP;  By law this amountshould be between 0 and $3,379 if the person is not self-employed.andP;  Once thefigure is entered, the application checks to see if it's a value, not a labelor a blank cell, and if it's in the acceptable range.andP;  If it meets bothcriteria, the application allows the user to continue.andP;  If it doesn't, theapplication displays a message indicating that the entry is out of theacceptable range or is a label or blank cell.andP;  Then the application asks theuser to reenter the amount withheld for Social Security.andP;  Providing agraceful escape--in this case, the chance to reenter a salary value--is vitalto this application's resilience.andM;ORIENTATIONandM;Users who are not sure where they are going are likely to get lost.andP;  At anypoint in the application, a person should be able to answer the questionsWhere am I?andP;  What can I do from here?andP;  How can I get out? and How can I getto other places?andM;To help answer the question Where am I? build the application so that thelabel in the indicator box changes when there's a move to a new part of theapplication.andP;  Accomplish this by using the [INDICATE] macro keyword to createa custom indicator in the upper-right corner of the screen.andP;  Then the currentlocation is always clear.andP;  This is valuable information when it's time torefer to the application's documentation or ask someone a question.andM;To help with the question What can I do from here? use the [MENUBRANCH] and[MENUCALL] commands to create a custom menu indicating the available options.andO;Keep each menu choice simple and its line of accompanying explanation clear.andM;To answer the question How can I get out? include in each menu a choice thatlets the user back up on menu level, just as the Escape key does in 1-2-3 andSymphony.andP;  You might alsi include Quit on each menu so that the user can exitfrom the application.andM;Finally, to answer the question How can I get to other places? include themenu choice Help, which calls a flowchart onto the screen, similar to the oneshown in the figure.andP;  For example, if someone chooses Help while working inthe Print section of an application and this flowchart appears, the cursorwould be in the Print section of the diagram.andM;You can also use the Range Input command within a macro to allow the user tomove around the flowchart.andP;  Then pressing Return would give more informationon that section or move the pointer to that setion of the application.andM;PRODUCTIVITYandM;To increase productivity, tell the user exactly how to enter data.andP;  Forexample, build into the prompt the correct format for entering a date: Enteryou birthdate (e.g., 12/25/60)andM;Another way to increase productivity is to build the application so that itaccepts different data-entry formats.andP;  The application translates whateverthe user enters into the required format.andP;  Suppose an application requires aserial date value.andP;  Someone enters a date as 2/25/89.andP;  An @DATEVALUE functionbuilt into the application would convert that entry into a serial number.andM;When possible, provide default values so that all the user has to do is pressReturn.andP;  For example, if the application requires entry of a cost-centernumber and 80% of the time the number will be 999, the prompt might read:Enter your cost center (press Return to enter 999):andM;When building a custom menu, arrange menu choices in order of frequency ofuse.andP;  The choices used most often should be to the left, followed by anyother selections.andP;  Choices that appear on many menus should appear in thesame location on each menu.andP;  For example, the Quit or Exit selection mightalways be the rightmost choice on the menu.andM;Help people avoid dead ends.andP;  If someone must enter data before printing orgraphing, create a self-modifying macro menu that displays only appropriatechoices.andP;  For example, before the user enters data, te menu might look likethis: Update (Print) (Graph) QuitandM;Here the Print and Graph choices are off-limits, as indicated by theparentheses.andP;  After the user chooses Update to enter data, the menu mightchange to make all menu choices valid and look like this: Update Print GraphQuitandM;To do this, use an @IF function within the macro.andP;  If the user choosesUpdate, the macro changes the value in a cell named counter from 0 to 1.andP;  The@IF formula in the cell containing the menu choice Print might read:@IF(counter=0,&quot;(Print)&quot;,&quot;Print&quot;)andM;This formula displays the option (Print) if the user has not already used theUpdate choice to enter data.andP;  If the user has already selected Update, thecelkl named counter equals 1 and the menu displays the option Print.andM;The cell containing the prompt for the Print menu choice might read:@IF(counter=0,&quot;This option not available.&quot;, &quot;Print Report&quot;)andM;And finally, the first line of the macro under the Print option can contain aformula such as the following: @IF(counter=0,&quot;[MENUBRANCH menu]&quot;,&quot;[print]&quot;)andM;If the user chooses (Print), the macro redisplays the menu.andP;  However, if theuser chooses Print, the macro calls the Print subroutine.andM;Another technique that increases productivity is to duplicate commonly usedmenu options with individual macros.andP;  Then, for example, to print out areport, a user can work through the custom menu or save time by simplyinvoking an individual print macro, which might be named \p.andM;INTEGRITYandM;In an application has integrity, it keeps the users from damaging any work.andO;Damage occurs when you lose data by accidentally deleting or by failing tosave a file.andP;  It also ensues if you obtain and save incorrect results.andM;One way to preserve the integrity of data is to use automatic error checking,discussed earlier, to ensure that the user enters logical data.andP;  then if theuser begins to enter illogical data--for example, labels instead ofnumbers--the application gives a warning and the opportunity to start again.andM;The application should tell the user that it's possible to lose just-added orupdated data when you try to exit from an application without having firstsaved the file.andP;  when the user edits existing data or enters new data, amacro could automatically change te value in a cell from 0 to 1.andP;  When theuser selects Quit, the application checks the contents of that cell.andP;  If itcontains 1, indicating newly entered or modified data, the file should besaved.andP;  Depending on how you write the application, the macro can eitherautomatically save the file or remind the user to save the changes.andP;  If thecell contains 0, the application allows the user to exit from the programimmediately.andM;Documentation also helps maintain the application's integrity.andP;  For example,include a Help selection on every custom menu.andP;  Depending on the menu,selecting Help migt present the user with the option to read on-screendocumentation or, as mentioned earlier, to view a flowchart.andP;   Another usefuloption allows the user to enter a question mark at any input prompt.andP;  A macrodetermines whether the input is a question mark.andP;  If so, it displays a Helpscreen that provides detail on that section of the application or refers theuser to the appropriate page is the printed documentation.andM;You might be concerned about the amount of memory that comprehensivedocumentation requires.andP;  If so, put the documentation in a separate file orfiles.andP;  Assign each &quot;page&quot; of the documentation an apropriate range name.andO;When the user chooses the Help option, the program displays a blank screenand uses the File Combine Named-Range command to &quot;retrieve&quot; the appropriatedocumentation.andP;  When finished with the documentation, the user can remove itfrom RAM.andP;  While using this technique increases the number of files neededfor the application, it decreases the total size of the application in RAM.andM;CONTROLandM;The user must feel in control of the application.andP;  For example, errormessages should be polite and explanatory.andP;  If someone puts the wrong disk indrive A, the error message should help the person correct the condition--forexample, The necessary files aren't on the disk in drive A.andP;  The same holdstrue if someone attempts inappropriate input.andP;  In this case, present a promptsuch as Input out of range.andP;  Please enter a value between $15 and $100.andO;Helpful messages like these remind both application developers and users thatthey are in a partnership.andO;</TEXT></DOC>