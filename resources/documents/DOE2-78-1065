<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> DOE2-78-1065 </DOCNO><TEXT>The applicative model of computation makes possible the development ofprogramming languages with several attractive features. Programs maybe proved to execute correctly. Features of these languages remove somesources of programmer error, and can make correct programs easier tobuild and maintain. In this report, the authors discuss how softwarefor applicative language programs can automatically detect and exploitparallelism to take advantage of current and future parallel processingsystems. The authors use an applicative language, SISAL, to show thesources of parallelism. A prototype SISAL system is available to executesome sample programs and help us examine how well the implementationexploits potential parallelism. An outstanding problem in applicativelanguage design and implementation is copy optimization. The single assignmentsemantics of these languages requires frequent data structure copyingin some programs. The authors exemplify the importance of minimizingcopying, and show that other optimizations, including high-quality codegeneration, are also important for applicative languages.</TEXT></DOC>