<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-147-084  </DOCNO><DOCID>08 147 084.andM;</DOCID><JOURNAL>Communications of the ACM  Feb 1990 v33 n2 p225(8)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>N-fold inspection: a requirements analysis technique. (technical)</TITLE><AUTHOR>Martin, Johnny; Tsai, W. T.andM;</AUTHOR><SUMMARY>N-fold inspection, an new technique for software requirementsanalysis, is discussed and compared with other developmentmethodologies.andP;  An investigation into the User RequirementsDocument (URD) is the traditional first step in the software lifecycle.andP;  The accuracy of the URD is crucial to its success orfailure, because detecting and fixing a software problem duringthe requirements and early design phases is far less costly thandoing so after delivery.andP;  Formal specification, design andimplementation, prototyping, and formal inspection of the URD arecommon requirements-analysis methods.andP;  N-fold inspectionreplicates formal inspections using N independent teams.andP;  Theresults of a pilot study observing 10 independent softwaredevelopment teams are presented.andP;  It is concluded that N-foldinspection can provide reliability at the URD level and can alsobe useful in other development phases.andM;</SUMMARY><DESCRIPT>Topic:     Software engineeringRequirements AnalysisNew TechniqueTechnologySoftware Metrics.andO;Feature:   illustrationtable.andO;Caption:   Fault detection process. (table)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>N-Fold Inspection: A Requirements Analysis Technique Every softwaredevelopment begins with an investigation of the User Requirements Document(URD).andP;  The URD describes the needs and boundaries of the software productand sometimes serves as a contractual (e.g., legal) agreement between theclient and the developer.andP;  In an exploratory software development paradigm[17] the URD plays an informal role, evolving as the software evolves.andO;Changes to the URD can be made while the design is being developed or even ina stage as late as coding.andP;  For mission-critical software (e.g., air trafficcontrol, nuclear reactor), however, the URD remains static.andP;  A complete andaccurate description of the product is needed before development can proceed.andO;The initial URD investigation is a crucial step for mission-critical softwaredevelopment.andM;The URD plays a key role in the success or failure of its development.andP;  Inparadigm, exploratory, or mission-critical, undetected faults in the URD canpropagate through the life cycle with a result in of major recoding effortsor poor system integrity.andP;  The number one item of Boehm's top-ten list onmetric says:andM;Finding and fixing a software problem after delivery is 100 times moreexpensive than finding and fixing it during the requirements and early designphases.andM;This insight has been a major driver in focusing industrial software practiceon thorough requirements analysis and design, on early verification andvalidation, and on up-front prototyping and simulation to avoid costlydownstream fixes [6].andM;Figure 1 shows how faults can be introduced and propagated at every phase ofsoftware development (i.e., during specification, design, and coding).andO;Clearly, faults in products of early phases have significant impact onsoftware development and need to be detected as quickly as possible.andO;According to Fagan:andM;While defects become manifest in the end product documentation or code, mostof them are actually injected as the functional aspects of the product andits quality attributes are being created; [SIC] during development of therequirements, the design and coding, or by insertion of changes [11].andM;Several methods can aid the detection of URD faults.andP;  These methods may applyonly to certain phases of development or may imply an overall methodologyprecluding the use of certain phases.andP;  Four methods of reducing URD faultsare listed here.andM;(1) Formal specification.andP;  A formal specification, such as VDM [13], can bedeveloped to determine the consistency and completeness of the URD, but itsprimary function is to provide a formal baseline for downstream softwaredevelopment, such as design, coding, and testing.andP;  Automated tools such asRSL/REVS [1] can assist some of these tasks.andP;  Formal specification may exposesome URD faults as the URD is translated into a formal specification, butundetected faults will be cast into a rigid document that may actually hindereventual detection.andP;  Developing a formal specification directly from the URDis expensive, and it requires detecting the URD faults at the same time.andM;(2) Design and Implementation.andP;  This phase can proceed directly from the URD,bypassing requirements inspection and formal specification.andP;  In other words,downstream development activities can be used to detect URD faults.andP;  But,design and implementation used in this context are not cost-effective indetecting URD faults, as indicated in Boehm's number one item.andM;(3) Prototyping.andP;  Building a software prototype directly from the URD willhelp determine its feasibility and soundness.andP;  Since a prototype is usuallyan incomplete system, its usefulness is limited to detecting faults in thosefragments of the URD where feasibility is an issue.andP;  Prototyping is probablybest used together with other development techniques.andM;(4) Formal Inspection of URD.andP;  Before software development begins, the URD isexamined manually using inspections.andP;  URD inspections give software engineersa chance to understand the URD and to detect its faults before thespecification phase.andP;  If feasibility is an issue, URD inspections andprototyping can be done simultaneously.andP;  For mission-critical software, aformal specification is also developed to ensure reliability.andM;Inspection is a method of checking that can be performed on any of theintermediate products of software development (i.e., the URD, specification,design, or code).andP;  Fagan [12] defines an inspection as a formal process whichis usually done manually by inspection teams.andP;  Claims are that it is aneffective testing technique.andP;  For example, item nine on Boehm's top-ten liststates:andM;Walkthroughs catch 60 percent of the errors.andM;The structured walkthrough (software inspection) has been the most costeffective technique to date for eliminating software errors.andP;  It also hassignificant side benefits in team building and in ensuring backup knowledgeif a designer or programmer leaves the project [6].andM;Proponents of inspections emphasize its use on software design and coding.andO;Code inspection methodologies are well developed.andP;  Specifically, checklistsfor code inspection are widely available, and the code author can readilyparticipate in the inspection process.andP;  URD inspection is different.andO;Checklist items are limited to consistency, completeness, and functionality[5, 7, 15].andP;  The URD developer may be available on only a limited basis.andO;Thus, URD inspection may not find URD faults as effectively as codeinspection finds coding faults.andM;N-Fold InspectionandM;N-Fold inspection uses formal inspections but replicates these inspectionactivities using N independent teams.andP;  The same software artifact (e.g., aURD or functional specification document) is given to all N teams.andP;  Anappointed moderator supervises the efforts of all N teams.andP;  Each teamperforms formal inspection using a checklist and analyzes the softwareartifact .andP;  Several teams may identify the same fault, but the moderatorgathers all results of the independent inspection efforts and records eachfault once in a database.andP;  After the faults are collected, they can be usedto rework a new version of the software artifact.andM;We suggest using N-Fold inspection for the initial phase of softwaredevelopment for mission-critical software.andP;  N-Fold inspection is designed todetect faults in the URD as early as possible, indirectly increasing thereliability and quality of the URD's implementation.andP;  The primary use ofN-Fold inspection is to identify faults that might not be detected by asingle inspection team.andP;  This article discusses URD inspection using theN-Fold technique, but this technique can also be used during other phases ofdevelopment,such as specification, design, or coding.andM;THE PILOT STUDYandM;To better understand N-fold inspection, we conducted a pilot study observingten independent software development teams doing requirement analysis.andP;  Eachconducted formal inspections on the same URD, a description of therequirements of a real-time railroad traffic control system.andP;  To learn howteams locate URD faults, we collected data about the number and kinds offaults detected by each team.andP;  Specifically, we wanted to know how much thecomplexity of a fault hindered its detection, how many faults a single teamcould find, and especially, the increase in fault detection that is gained byusing more than one team to inspect the URD.andM;While this study represents only one case, the results are encouraging.andO;Faults detected by different teams overlapped little, and the number of URDfaults found by any one team was small compared to the total number of faultsdetected.andP;  Thus, N-Fold inspection is effective in locating URD faults early,since two or more teams doing URD inspection uncover significantly more URDfaults than a single team.andM;ParticipantsandM;The study participants were: the user who developed the URD; a moderator whois responsible for coordinating the efforts of the team and collecting data;and forty software engineers organized into ten independent developmentteams.andM;In addition to monitoring the progress of each development team, themoderator served as a liaison between the user and all ten developmentefforts as shown in Figure 2.andP;  The moderator was also responsible forcollecting the study data.andP;  The team members were formed from a mix ofgraduate and undergraduate students; half of them have worked professionallyin software development.andP;  The user's primary duty was to develope the URD butwas also available on a limited basis for meeting the teams.andM;Each team carried out formal inspection of the URD.andP;  Using techniques similarto those described by Fagan [11, 12], teams read the URD with a critical eyeto detect faults.andP;  Each team looked for URD faults, assessed feasibility, andtried to arrive at an understanding of the user's needs.andP;  Team inspectionmeetings helped to identify glaring faults in the URD, and additionalmeetings with the user unearthed more faults.andP;  At the end of the inspectionphase, each team delivered a document that described faults in the URD to themoderator.andP;  To assure the independence of the team's efforts, the moderatorand the user were instructed to meet the teams individually, withoutdiscussing the efforts of other teams.andM;The User Requirement Document (URD)andM;During the synthesis of the URD for our study, we privately consulted withtwo major vendors (Digital Concepts Inc. and Union Switch and Signal) ofrailroad centralized traffic control (CTC) software.andM;The URD used in this study is modeled after a request for computer automationof a typical North American railway.andP;  (1)  The document is written in Englishby a user trained in railroad engineering.andP;  The hardware functionality isshown in Figure 3.andP;  The author of the URD is experienced in railroad trafficcontrol technology and has served as a project leader in the development of amajor railroad CTC system.andP;  The user was asked to deliver a reliabledocument, which he believes contains at most only one or two minor faults.andO;(2)andM;Data CollectionandM;Each team assembled a list of URD faults as they were detected.andP;  Themoderator met with a representative from each team to spend time validatingeach of the faults discovered.andP;  The moderator catalogued each URD fault in adatabase that contained the following information:andM;(1) A description of the fault (a short paragraph)andM;(2) URD cross-referencing information (line and page number),andM;(3) Miscellaneous classification information (fault repair, fault type,severity), (3) andandM;(4) Which team(s) found the fault and what method(s) were used to find thefault (e.g., individual reading, team inspection meeting, or meeting with themoderator).andM;The database was used for coordinating version control among the ten workingcopies of the URD (one per team).andP;  Each team was given a response to thefaults it reported but received no information regarding faults reported byother teams.andP;  At the end of the inspection phase (i.e., at the end of thestudy) each of the ten teams had compiled its own updated version of the URD.andM;Validating the DataandM;After URD inspection, faults detected by all ten teams were catalogued.andP;  Itwas not clear, however, whether or not all faults in the URD had been found.andO;To find as many of the remaining URD faults as possible, we asked the teamsto continue to develop from their revised URDs using rigorous specification,design, and verification and validation (Vandamp;V).andP;  To ensure maximum likelihoodof finding additional faults, both specification and design diversity [3]were used during these steps.andM;Specifically, the different methodologies use for specification were:structured analysis [9], structured english [5], MSG [4], and Ada PDL [10].andO;For design, only ADA and MSG were used.andP;  Structured analysis is a popularspecification methodology.andP;  This technique uses graphical diagrams with adata dictionary.andP;  The data dictionary is used to index and cross referencethe names of objects throughout the diagrams.andP;  It provides techniques forreducing incompleteness and inconsistencies within the specification.andO;Structured English is a less formal specification technique.andP;  Borrowingconstructs from programming languages, structured English provides a uniformformat for expressing system specifications in English [5].andP;  MSG, developedby Berzins and Gray [4], uses an object-based model and provides a variety ofbuilt-in-types to support the development of general purpose specificationsand designs.andP;  Although Ada is intended to be used as a programming language,its major syntactic elements provide a skeletal framework for encodingspecifications and designs supporting step-wise refinement.andP;  For adescription of Ada and its use in formal specification, see [8] and [14].andO;Each team performed rigorous independent verification after the formalspecification phase and again after the design phase.andP;  Each specification anddesign methodology was used in the framework of clearly delineated phases.andO;The URD faults found by each team during specification and design werecatalogued in addition to the URD faults found during inspection.andP;  (4)andM;It is possible that undetected faults still remain in the URD.andP;  By keepingtrack of URD faults that were discovered after the requirements inspectionphase, later phases could be compared with the inspection phase.andM;STUDY DATA ANALYSISandM;This section examines N-Fold inspection in light of the study data wecollected.andP;  Three phases of URD fault detection are recorded in the studydata: inspection, specification, and design.andP;  The following analysis anddiscussion give insight to the nature of faults teams found during theinspection as compared with other phases of development.andM;Incomplete DetectionandM;Looking at the collective efforts of all ten teams, most URD faults werefound during the inspection phase.andP;  A total of ninety-two URD faults wereidentified collectively by all ten teams after the inspection, specification,and design phases.andP;  Of these ninety-two faults, seventy-seven were found byat least one team during the inspection phase.andP;  The grand totals indicatethat inspection can locate most URD faults.andP;  Unfortunately, each individualteam's performance does not compare favorably with this.andM;A single team found very few URD faults compared with the total number offaults found during URD inspection.andP;  During the inspection phase, the averageteam found only twenty-five faults.andP;  Figure 4 shows the number of faultsfound by each team during inspection.andM;Proceeding with software development after only one team does a URDinspection is inviting disaster.andP;  Sixty-three known URD faults remain to bedetected during downstream phases.andP;  These faults are cast into a rigidspecification document and now must be detected during the specification anddesign phase lest the faults become incorporated into the code.andM;The sparsity of URD faults found by a single team deserves furtherinvestigation.andP;  In this study, not many teams found the same fault.andP;  Figure 5is a scatter plot, showing the number of teams that found each fault.andP;  On theaverage, fewer than four of the ten inspection teams identify the same fault.andO;It is precisely this difficulty which N-Ford inspection tries to overcome.andO;The biased detection manifested by the inspection teams of our study isovercome by using N independent teams instead of a single team.andP;  The combinedefforts of all N teams thus produces a more reliable investigation of theURD.andM;The Difficulty of Detecting FaultsandM;The average team is most successful finding URD faults during inspection, yetsome faults are found until the specification of design phase.andP;  This impliesinspection is good but not good enough.andP;  We need to address the reason thatthese faults are not detected during the inspection phase:andM;(1) Fault Complexity.andP;  Some URD faults are obvious mistakes and are easy todetect immediately, while other faults may involve complex interactions.andP;  Theramifications of more complex faults may not be discovered through staticchecking.andP;  Formal specification and design provide the rigor necessary tobring these faults to surface.andM;(2) Inspection Deficiency.andP;  The team inspection process is flawed.andP;  A team'sdemographic features or environmental factors may prevent the team fromperforming a complete URD inspection.andP;  A team may have an inherent bias fordetecting only certain types of faults or only faults occurring in somesubset of the URD.andM;Fifteen of the total 92 faults fall into the first category.andP;  These faultswere found by some teams during specification and design but were notdetected by any team during URD inspection.andP;  These fifteen faults are indeeddifficult to find.andP;  Fault complexity is a plausible explanation.andM;Most URD faults, however, fall into the second category.andP;  These faults weremissed by some teams during inspection, yet at the same time, foundindependently by other teams.andP;  One cannot assume a fault is complex justbecause a team misses it during inspection.andP;  For each fault, Figure 6 showsthe number of teams to find it both during URD inspection and afterinspection.andP;  Inspection by a single team is hardly effective.andP;  Of the totalfaults, the average team found only 37 percent during URD inspection.andO;Replicated inspection, using the N-Fold technique, is quite effectively sinceit can find faults that would otherwise only be found during later phases ofdevelopment.andM;During the first phase, the team's efforts are directed at inspecting theURD.andP;  During later phases, the team's emphasis has shifted to creating otherproducts, such as specification and design, which leaves less time forscrutinizing the URD.andP;  In the study, there was a substantial decrease in thenumber of URD faults identified after inspection.andP;  This trend is apparenteven if we examine the detection abilities team by team.andP;  Figure 7 shows thenumber of URD faults detected by each team during each phase.andP;  During URDinspection, the average team had already located 70 percent of the URD faultsit found during all three phases, i.e., URD inspection, specification, anddesign.andM;Choosing the Best Value for NandM;Obviously, increasing the number of URD inspection teams will result infinding more faults, but at some point adding more teams will notsignificantly increase the number of faults detected.andP;  Figure 8 shows thisphenomenon.andP;  This graph shows the number of faults detected by N teams duringURD inspection for various values of N.andP;  Using two teams on the average, 13.3more faults were found than using an average single team.andP;  Three teams foundapproximately 9.5 more faults on average than two teams.andP;  Eventually, thepayoff for larger values of N does not substantially increase the number offaults detected.andP;  For example, ten teams found only 2.2 more faults than theaverage set of nine teams.andP;  In general, choosing the best value for N willdepend on many factors such as the availability and cost of additionalinspection teams and the potential expense for letting a URD fault slip byundetected.andM;Is N-Fold Inspection Cost-Effective?andM;By examining the diagnostic efforts of all possible pairs of teams, wediscovered that, on average, a pair of teams found more faults during oneweek of inspection than a single team located after inspection,specification, and design.andP;  This leads us to consider the cost-effectivenessof N-Fold inspection compared to other methodologies.andP;  Three othermethodologies for reliable software construction are worth mentioning whichare illustrated in Figure 9.andM;(1) The traditional waterfall model of development.andM;(2) Dual development.andM;(3) N-version programming.andM;N-Fold inspection uses N independent teams to inspect the user requirements(N to be chosen), while later phases of development are carried out by only asingle team.andM;The traditional waterfall model is equivalent to N-Fold inspection when N is1.andP;  A single team does URD inspection and carries out the remainingdevelopment phases.andM;The dual development approach was used by Ramamoorthy, et.andP;  al., [16] intheir software development for a nuclear reactor.andP;  Dual development uses twoindependent teams throughout.andP;  While the efforts of the two teams areindependent, the two teams cross examine each other at the end of eachdevelopment phase.andM;Another methodology for increased reliability is N-version programming [2].andO;Avizienis uses the combined effort of N independent designs andimplementations to produce fault-tolerant code.andP;  N-version programming usesreplicated software and the multiple computation method for the tolerance ofdesign and implementation faults.andP;  He also uses N independent teams, but theemphasis is on producing design and code of greater reliability.andM;Except for the waterfall model, each development approach uses replicationduring some phases of development.andP;  N-Fold inspection uses N teams initially,then only one; Dual development uses two teams through-out.andP;  N-versionprogramming uses a single team and then N teams during design and coding.andM;Data in our study can be used to formulate a hypothetical model comparingthese four development approaches.andP;  The model measures the number of URDfaults detected againt the amount of replication used during development.andO;Specifically, the study data has recorded the independent efforts of tenteams during the first three phases of software development: one week on URDinspection, three weeks on building a specification, and three weeks ondesign.andP;  This data can be used to approximate the cost-effectiveness of thesemethods in detecting URD faults.andP;  Calculations are based on team-weeks sothat replicating development efforts (i.e., using N teams) at any phaseincreases team-week costs (5).andP;  N remains variable in calculating team-weekcosts for N-Fold inspection and for N-version programming.andP;  The team-weeksfor each of the four approaches is given in Table I. (6)andM;Although this model does not permit measurement of the quality of thesoftware products produced by each of the approaches, the number of URDfaults detected gives a strong indication of the teams' understanding of theURD.andP;  It does not account for other sources of reliability such as designdiversity, an obvious advantage of N-version programming.andP;  N-versionprogramming and dual development may offer increased reliability which cannotbe captured by our model, since we are interested only in the detection ofURD faults.andM;Figure 10 shows the average number of URD faults detected compared withdevelopment costs for all four approaches.andP;  The conventional waterfalldevelopment is really just a special case of N-Fold inspection when N equals1.andP;  The number of faults found by the N-fold inspection is taken by averagingall possible subsets of ten teams during inspection.andP;  The number of faultsfound by the N-version programming is taken by summing the average number offaults found by a single team inspection, the average number of faults foundby a single team requirement specification, and the average number of faultsfound by N teams during design.andP;  With N equals 4, N-fold inspection findsmore URD faults than dual development.andP;  When N equals 10, N-fold inspectionfinds almost 50 percent more URD faults than dual development, yet team-weekcosts are almost equal.andP;  By directing development efforts toward earlierphases, a more reliable product can be achieved for the same cost.andM;CONCLUSIONandM;In software engineering, requirements inspection and analysis are the mostimportant aspects of mission-critical software development.andP;  Our studypresents a case of N-fold inspection of the URD.andP;  The data suggest it is morecost-effective in locating URD faults than other methods which concentrate ondownstream activities.andM;The early detection of URD faults is an obvious advantage of N-foldinspection, but some indirect benefits of N-fold inspection can also berealized.andP;  In addition to producing more reliable URD at a lower developmentcost, more software engineers become familiar with the products developedwithin their organization.andP;  To reiterate Boehm's item 9, &quot;It also hassignificant side benefits in team building and in ensuring backup knowledgeif a designer or programmer leaves the project.&quot;andM;N-fold inspection has the side benefit of providing a foundation for laterstages of development, and it can be used as a precursor to other downstreamdevelopment activities.andP;  The N-version programming method is effective inproviding reliable designs and implementations, but its success hinges on thequality of the formal specification and a reliable interpretation of the URD.andO;Thus, one of the principal issues in N-version programming is the developmentof a robust specification, as outlined by Avizienis.andM;The most critical condition for the independence of design falts is theexistence of a complete and accurate specification of the requirements thatare to be met by the diverse designs.andP;  This is the &quot;hard core&quot; of this faulttolerance approach.andP;  Latent defects, such as inconsistencies, ambiguities,and omissions, in the specification are likely to bias otherwise entirelyindependent programming or logic design efforts toward related designfaults...andP;  With this approach, perfection is required only at the highestlevel of specification...andP;  The independent writing and subsequent comparisonof two specifications, using two formal languages is the next step that isexpected to increase the dependability of specification beyond the presentlimits [2].andM;N-fold inspection can provide this type of reliability at the URD andspecification level.andM;N-fold inspection can be useful in other phases of development, such asduring the development of a functional specification or design.andO;Specifically, one possible use of N-fold inspection in developing highlyreliable software is that N-fold inspection can find many faults in the URD.andO;Once these faults are corrected, a formal specification can be developed, andthe specification can be checked for correctness using N-fold inspection.andO;The design document can also be subjected to N-fold inspection.andP;  Furtherdownstream development can be done by borrowing the best aspects of dualdevelopment, N-version programming, and N-fold inspection, choosing the mostcost-effective techniques for each phase.andM;(1) There are about 200,000 miles of mainline rail in North America.andP;  Roughlyone fourth (500,000 miles) uses computerized CTC.andP;  This software primarilyprovides a human interface function, aimed at reducing support andmaintenance staff.andP;  In the U.S.andP;  there are 30 major railroads.andP;  On average,each purchases two computerized CTC systems per year.andP;  The typical systemcontrols 240 miles of traffic and costs an average 10,700 dollars per mile.andO;This industry is expected to spend 100 million dollars annually in 1990.andM;(2) The author of the URD was amazed at the number of faults detected andtheir severities.andP;  Seventy-seven URD faults were eventually detected duringinspection.andP;  Some faults were serious enough to jeopardize system integrityor result in operation mishaps.andM;(3) Faults were categorized by seven types: ambiguousness, functional,interface, omission, sequencing, typographical, and inconsistency.andO;Severities were assessed on a five-point scale.andP;  Although this informationwas recorded for each URD fault, analysis of the data did not provide enoughstatistical base to support any proposition relating to fault severity andfault types.andM;(4) In addition to reporting URD faults, the teams also reported defectsfound in their formal specification document and design document.andP;  thevariety of methodologies used did not permit a quantitative comparison ofthis data.andM;(5) Teams worked part-time and were composed of four members, so in ourstudy, one team-week equals approximately 100 person-hours.andM;(6) We do not consider URD faults detected during coding and later phases.andM;REFERENCESandM;[1] Alford, M. SREM at the age of eight: The distributed computing designsystem.andP;  IEEE Comput.andP;  18, 4 (Apr.andP;  1985), 36-46.andM;[2] Avizienis, A.andP;  The n-version approach to fault-tolerant software.andP;  IEEETrans.andP;  on Softw.andP;  Eng.andP;  11, 12 (Dec.andP;  1985), 1491-1501.andM;[3] Avizienis, A., Lyu, M. R., and Schutz, W.andP;  In research of effectivediversity: A six-language study of fault-tolerant flight-control software.andO;In Proceedings of the IEEE 18th International Symposium of Fault TolerantComputing (Tokyo, Japan, June 27-30.)andP;  IEEE/CS, New York, 1988, pp.andP;  15-22.andM;[4] Berzins V., and Gray, M. Analysis and design in MSG 84: Formalizingfunctional specifications.andP;  IEEE Trans.andP;  on Softw.andP;  Eng.andP;  11, 8 (Aug.andP;  1985),657-670.andM;[5] Birrell N. D., and Ould, M. A.andP;  A Practical Handbook for SoftwareDevelopment.andP;  CAmbridge University Press, Melbourne, Autralia, 1985.andM;[6] Boehm, B. Industrial software metrics top-10 list.andP;  IEEE Softw.andP;  3, 9(Sept.andP;  1987), 84-85.andM;[7] Boehm, B.andP;  Verifying and validating software requirements and designspecifications.andP;  IEEE Softw.andP;  1, 1 (Jan.andP;  1984), 75-88.andM;[8] Booch, G. Software Engineering with Ada.andP;  Benjamin Cummings PublishingCo., Inc., Menlo Park, Calif., 1983.andM;[9] DeMarco, T.andP;  Structured Analysis and System Specification.andP;  YourdonPress, New York, 1978.andM;[10] U. S. Department of Defense.andP;  Reference Manual for the Ada ProgrammingLanguage.andP;  ANSI-MIL-STD-1815A-1983, 1983.andM;[11] Fagan, M. E.andP;  Advances in software inspections.andP;  IEEE Trans.andP;  on Softw.andO;Eng.andP;  12, 7 (July 1986), 744-751.andM;[12] Fagan, M. E.andP;  Design and code inspections to reduce errors in programdevelopment.andP;  IBM Syst.andP;  J. 15, 3 (1976), 182-211.andM;[13] Jones, C. B.andP;  Systematic Software Development using VDM.andP;  Prentice-Hall,Englewood Cliffs, N. J., 1986.andM;[14] Nielsen K., and Shumate, K.andP;  Designing large real-time systems with Ada.andO;Commun.andP;  ACM 30, 8 (Apr.andP;  1987), 695-715.andM;[15] Ould A., and Unwin, C.andP;  Testing in Software Development.andP;  CambridgeUniversity Press, 1986.andM;[16] Ramamoorthy, C. V., et al.andP;  Application of a methodology for thedevelopment and validation of reliable process control software.andP;  IEEE Trans.andO;on Softw.andP;  Eng.andP;  7, 6 (Nov.andP;  1981), 537-555.andM;[17] Sheil, B.andP;  Power tools for programmers.andP;  Datamation, (Feb.andP;  1983),131-143.andM;ABOUT THE AUTHORS:andM;JOHNNY MARTIN is a Ph.D.andP;  candidate in the Department of Computer Science atthe University of Minnesota, where he served as President of the Universityof Minnesota Student ACM Chapter.andP;  His research interests include formallanguage theory, software engineering, and software development tools.andM;W.T.andP;  TSAI is currently an assistant professor in the Department of ComputerScience at the University of Minnesota.andP;  His areas of interest are softwareengineering, computer security, and computer systems.andP;  Author's PresentAddress: Department of Computer Science, University of Minnesota,Minneapolis, MN 55455.andO;</TEXT></DOC>