<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-170-524  </DOCNO><DOCID>07 170 524.andM;</DOCID><JOURNAL>AI Expert  Feb 1989 v4 n2 p22(8)* Full Text COPYRIGHT Miller-Freeman 1989.andM;</JOURNAL><TITLE>Merging expert systems and databases. (includes related article oninheritance and relational joins)</TITLE><AUTHOR>Cohen, Benjamin.andM;</AUTHOR><SUMMARY>Merging rule-based expert systems or logic data base applicationswith relational data base systems allows programmers to developsmarter, more powerful applications.andP;  A logic data baseapplication is distinguished from an ordinary data baseapplication by its inference engine and rule base.andP;  The advantagesof these new applications include reduction of expenses, increasedcompetitive strength, increased productivity and higher profits.andO;Information-critical businesses like the finance and airlineindustries can reap major benefits from this merger.andP;  Alreadycredit card companies are realizing a return on their investmentswith the reduction of incorrect authorizations and detection ofillegal charges.andP;  However, developing logic data base applicationsis still a risky and costly venture at this point.andP;  Companies aretaking a cautious approach.andM;</SUMMARY><DESCRIPT>Topic:     Expert SystemsMISData BasesStructured Query LanguageDistributed Data BasesKnowledge-Based SystemsRule-Based SystemsInformation Systems.andO;Feature:   illustrationchartgraph.andO;Caption:   Logic database system application architecture. (chart)Comparison of application development tools. (graph)Evolution of rule-based systems toward increasing integration.andO;(graph)andM;</DESCRIPT><TEXT>MERGING EXPERT SYSTEMS and DATABASESandM;When asked why he robbed banks, Willie Sutton said, &quot;Because that's where themoney is!&quot;andP;  The same reply can explain why rule-based expert systems aremerging with database and information systems: that's where the money is.andM;Combining the technologies of rule-based expert systems with relationaldatabase applications can enable people to build smarter, more powerfulapplications.andP;  For expert system people, management information systems (MIS)departments are a large, untapped market.andP;  From the MIS person's point ofview, building smarter information systems means the right information willget to the right people at the right time.andP;  Expenses will be reduced andcompetitive advantages, productivity, and profits will increase.andP;  This can beillustrated with a quasi-fictional case study.andP;  (For readers acquainted withthe American Express Authorizer's Assistant, any resemblance is purelyintentional.andP;  But we are not claiming to describe that actual system).andM;TRANSACTION AUTHORIZATIONandM;You are standing in the purchase line of 47th Street Computer, your creditcard in hand.andP;  You pass it to the friendly counter person who dials thetransaction authorization center.andP;  Within seconds your purchase request hasbeen approved or denied.andP;  About 25% of these transactions are routine; theauthorization is issued or withheld entirely by a rule-based logic databaseapplication.andP;  In the other 75% of cases, the logic database applicationassists the human authorizer by presenting one screen with a few key dataitems summarizing inference results and its own recommendation.andM;The corporation issuing the card gets a return on its investment in logicdatabase applications in several ways.andP;  It cuts losses by reducing incorrectauthorization decisions and detecting more illegal charges.andP;  It maximizesprofits by granting you the maximum credit consistent with company businesspolicies.andM;This system functions by combining three main sources of information:andM;* Distributed data stored in IBM mainframe, VAX mini, and 386-basedStructured Query Language (SQL) database servers and connected by a LANandM;* The inputs of the human authorizer in response to application dialoguescreensandM;* Corporate authorization policy guidelines stored in a logically separateinformation storage system called a knowledge base.andM;The knowledge base is the heart of the intelligent part of the logic databaseapplication.andP;  It stores the expertise of the best authorization personnelwith corporate policy rules designed to minimize losses and maximize employeeproductivity and company profit.andP;  This new breed of information system notonly assist authorizers in credit approval decisions, it also manages allinformation relating to your account, including your monthly bill.andP;  It'smainstream transaction processing with a logical twist.andM;For data processers, the &quot;expert&quot; component of this system merely generatesanother report, but it uses rule-based logical inference to make a smarterreport.andP;  American Express Authorizer's Assistant summarizes relevant data andauthorizes the transaction, a task previously reserved for human agents.andO;Many existing rule-based systems, including the XCON system at DigitalEquipment Corp. for configuring VAXes, can be viewed from this familiarreport-driven perspective.andP;  Logic database applications of this kind, witheven greater integration of transaction processing and logical inference,will undoubtedly appear in the 1990s.andM;LOGIC DATABASE APPLICATIONandM;What we call logic database applications are often called rule-based expertsystems or expert databases.andP;  We avoid the term &quot;expert,&quot; because it seems toimply that other applications, such as spreadsheets, are somehow inexpert.andO;Needless to say, plenty of smart spreadsheet applications exist, and we haveno shortage of inexpert expert systems.andP;  Thus, we use the more neutral term,&quot;logic database application.&quot;andM;What distinguishes a logic database application from an ordinary databaseapplication?andP;  The inference engine and rule base are two obviousarchitectural differences.andP;  An inference engine is a program containingprocessing logic that enables an application to make logical inferences froma knowledge base containing declaratively represented rules.andP;  The results ofthese inferences appear in reports and screens, among other places.andP;  The twomost common methods of inference are backward and forward chaining.andP;  However,more problem-specific inference algorithms can also be used.andP;  The knowledgebase itself can take a variety of forms, ranging in complexity from a simplelist of rules to an object-oriented hierarchy of nodes with attached rules.andM;Many properties may be associated with objects in an object-orientedknowledge base representation scheme, including different rules.andP;  A built-injoin operation known as inheritance is used as a default to access propertiesand behavior in the type hierarchy.andP;  Thus, if object A is a subtype of objectB and the supertype B has property P, the subtype A inherits P by default.andO;(This default inheritance may be overruled by the subtype.)andP;  The property Pcould be a procedure, an attribute, or a set of rules.andM;In a relational database, the same property P would be accessed by explicitlyjoining A and B, rather than by a built-in access mechanism.andP;  Unlikerelational joins, however, inheritance is recursive, so subtypes may inheritproperties from supertypes an arbitrary number of links above them in thehierarchy.andM;What an inference engine and knowledge base offer a logic databaseapplication is the ability to derive new data elements from primitive datausing if-then rules and logical inference.andP;  The data items of any databaseapplication can be divided into primitive and derived values.andP;  Primitivevalues are stored directly in the database.andP;  Derived values are computed fromprimitive values and their storage is optional (the choice depends in part onthe time and cost of recomputing them).andP;  In a conventional application, theyare computed by using an application program or aggregate database languagefunction, such as SUM or AVG in SQL (see Jussi Ketonen's sidebar accompanying&quot;Toward Reasoning About Data&quot;).andP;  In a logic database application, derivedvalues may also be computed using the full power of a backward- andforward-chaining logical inference engine with access to both the knowledgebase and database.andM;In the example entity-relationship PURCHASEORDER-ITEM diagram (Figure 1), allthe attributes are primitive except Total.andP;  If the database speaks SQL, theTotal cost for a given Order# (that is, Order#=10) may be easily computedusing a simple join query: select SUM(price * quantity) from purchaseorder,item where purchaseorder.orderno=10 and purchaseorder.orderno = item.ordernoandM;COMPUTING DERIVED VALUESandM;In the credit approval entity-relationship diagram (Figure 2), the attributesAmount and Recommendation are like the attribute Total in that they arederived.andP;  Unlike Total, however, they are computed not by a simple SUMfunction, but by making logical inferences from a rule base.andP;  The rule basemay contain rules like those in Listing 1.andM;Any system can evaluate a credit approval request by comparing the requestedamount with an internal threshold number to arrive at &quot;yes&quot; or &quot;no.&quot;andP;  Whatconventional systems cannot do without extra software is perform forward- orbackward-chaining inferences on hundreds of declaratively represented axiomsor rules.andP;  In addition to checking threshold amounts, the logic databaseapplication can run the request against rules that check your past borrowinghistory, examine distributed databases to see if your card has been reportedstolen, and fire rules designed to detect credit card fraud.andP;  That's whathappens while you stand in the checkout line waiting to complete yourpurchase.andM;The overall architecture of a logic database application includes at leastthe following components:andM;* Logic database application programandM;* Data model stored in an active data dictionaryandM;* Database access and storageandM;* Rule base (and knowledge network) access and storageandM;* Inference engineandM;* User dialogue inputandM;* Database transactionsandM;* Screens and reports.andM;The arrows in Figure 3 show outputs flowing from modules and serving asinputs to boxes where the information may be further transformed.andP;  Inaddition to user dialogue input, the diagram shows inputs to the logicdatabase application program from the database and inference engine resultingfrom (explicit or implicit) calls made by the application.andP;  The applicationprogram outputs depicted are screens, reports, and database transactions.andO;The inference engine gets its inputs from the database and rule base.andP;  (Theworking memory parameter space of the rule-based system and other importantdetails of the architecture are omitted.)andP;  In addition to its role indesigning and documenting the database, the data model may be part of anactive repository or data dictionary used to control access to the inferenceengine and knowledge base.andM;KNOWLEDGE BASE ACCESSandM;Access to the inference engine and knowledge base from inside a databaseapplication can be explicit, using a procedure call interface, or implicit,through an active data dictionary.andP;  An explicit call to the creditauthorization inference engine might look like this: Amount =QueryRule-BasedSystem(CREDITAMTAPPROVAL, Custno#, RequestedAmount, CreditCard#...)andM;This type of approach is used by both Aion and Cullinet's expert systemshells.andP;  In the implicit approach, the application itself does not explicitlycall the rule-based system.andP;  Instead, all access to the inference engine isthrough the same query interface used to access data.andP;  Behind the scenes, anactive repository triggers the knowledge base.andP;  Thus, given aninnocent-looking query such as: select amount, recommendation fromcreditapproval where custid# = 10 the repository knows that amount andrecommendation are derived and triggers the knowledge base.andP;  If the knowledgebase uses an object-oriented representation scheme, the values of amount andrecommendation would be determined by triggering rules and compiledprocedures attached to (corresponding) objects in the knowledge base.andP;  Oneadvantage of the implicit approach is a form of data independence: users andapplications need not know which values are determined by the rule-basedsystem and which are stored.andM;Most logic database applications will likely be developed on top ofrelational database technology.andP;  The declarative access offered by relationalsystems is a major advantage for them.andP;  Without it, database access wouldrequire much more programming, and dynamic queries would be virtuallyexcluded.andP;  In the future, object-oriented databases (for example, Vbase fromOntologic) will also likely be used, particularly in the CAD, CASE, andengineering fields.andP;  Even here, SQL will be available as the standardinterface language.andM;TOOLS AND METHODOLOGYandM;Methodologies for building logic database applications may prove to be muchthe same as those used for conventional systems.andP;  For example, the screen andreport components of the user interface may be approached in exactly the sameway as a standard database application.andP;  The only difference is that some ofthe input screens and values displayed are generated by the inference engine.andO;Even in the knowledge acquisition phase, an emphasis on what screens andreports are desired can help focus the knowledge-acquisition process.andM;Logic database applications currently fall into two categories--thosedeveloped using commercially available expert system shells and those thatare custom built.andP;  One custom approach is using PROLOG combined with C orAda.andP;  Different vendors support reasonably compatible versions of PROLOG onall standard platforms, from PCs to mainframes.andP;  PROLOG's strong relationalorientation and built-in database facilities fit well into a logic databaseenvironment.andP;  A sample list of recent PROLOG-based logic databaseapplications includes VLSI design verification, COBOL recoding, computerhardware configuration, scheduling, relational database query processing, Adasoftware development environments, a stock transaction, and a crimeidentification system.andM;Organizations in a prototyping phase are more likely to choose a shell.andP;  Mostcurrent shells offer an interface to external databases.andP;  One of the moreintegrated shells is Cullinet's recently announced Enterprise: Expert/MVS, asystem integrated with IDMS/R and its fourth generation language environment.andO;AI Corp.'s KBMS is also tightly integrated with the IBM mainframe environmentand database products such as SQL/DS and DB2.andP;  Neuron Data's Nexpert Objectruns on several platforms and allows a high degree of integration withstandard environments.andM;Are shells the right tools for building real logic database applications?andO;Beyond the prototype phase, many organizations with large mission-criticallogic database applications run into serious limitations with existingshells.andP;  These issues are very similar to those encountered withfourth-generation languages.andP;  Some customers swear by them; others swear atthem.andP;  If features such as flexible inference and knowledge representationschemes, compiled procedures, custom user interfaces, and database access areessential, larger organizations may be better off biting the bullet andbuilding custom systems.andP;  These systems could use graphical user interfacessuch as Microsoft Windows or Presentation Manager, relational DBMSs such asDB2 or SQL/DS, and a combination of programming languages such as C or Adaand PROLOG.andM;Whether or not shells are used, a LAN-based server-client architecture hasseveral advantages for logic database applications.andP;  Separating the serverfrom the client allows a single processor to be dedicated to performing onetask, thereby dramatically improving performance.andP;  The front-end userinterface runs on one machine called the client, and the rule base anddatabase back ends run on separate servers on the LAN.andP;  The server-clientarchitecture supports cooperative processing between mainframes, minis, andmicros.andP;  Existing databases can remain in the mainframe environment, whilethe graphical user interfaces can run on personal workstations.andP;  An exampleconfiguration is a Windows or Presentation Manager client front end runningon an AT or 386, connected by a LAN to a DB2 database server on an IBMmainframe, and a PROLOG inference engine and rule base on a 386 workstation(Figure 4).andM;PERSPECTIVES ON THE MERGERandM;To understand why this merger is taking place despite formidabletechnological, cultural, and organizational obstacles, let's review it frommanagement, vendor, and technical perspectives.andM;For management, logic database application technology has the potential toenable organizations to build smarter database applications.andP;  Having alreadyrealized a return on investment from information systems, leveraging themfurther makes a lot of sense.andP;  Whether it makes enough sense fororganizations to spend money is debatable.andP;  Even if we hear only a handful ofFortune 500 success stories (such as XCON and the American Express system),their return on investment cannot be denied.andM;Developing a logic database application today is a risky investment.andP;  Aproven development methodology, skilled personnel, and standard,cost-effective tools are in short supply.andP;  Without a solid designmethodology, the payoffs are uncertain in the beginning.andP;  Consequently, manyorganizations are still taking a cautious approach.andM;Yet caution has its price, too.andP;  Well-motivated employees can get frustratedby foot-dragging and move on to more forward-looking organizations.andP;  And ininformation-critical businesses, such as the financial or airline industry,the competition may gain significant advantages over a company that is toocautious.andP;  Paradoxically, the additional technical and organizationalcomplexity involved in merging the database and rule-based system sides ofthe house may make some organizations bolder.andP;  Personnel from the databasedepartments can get directly involved with leading-edge applications; if themerger theory is correct, the payoffs will be much greater than forstand-alone rule-based systems.andM;For expert system vendors, corporate MIS/DP departments comprise the largestsingle hardware and software market.andP;  In a major change, some leading vendorsare now marketing shells for the mainframe MIS market.andP;  Shells are thefourth-generation languages of rule-based system application development.andO;The market success of the first generation of shells--stand-alone systemswith little or no integration with standard programming environments andlimited capability for interfacing to data-bases--has been minimal.andP;  Byworking in the IBM mainframe environment and offering a reasonable degree ofintegration with existing software and database systems, the new shells arebound to change the equation substantially.andM;Organizationally and technically, MIS departments hold the key to the oneingredient that has so far been missing from stand-alone, rule-based systems:data.andP;  To be really useful, logic-based systems need more than rulescapturing some fragment of human expertise; they also need to know all thefacts about the current situation to which the expertise is being applied.andM;Rule-based systems are being used for many tasks.andP;  In virtually all cases,the need for data is the same.andP;  In many cases, the data needed by theinference engines is already managed by departmental information systems.andO;Coincidentally, many of these same information systems could benefit fromre-engineering using an inference engine and rule base.andP;  For example, systemsused to generate complex reports in an environment where policies and rulesare constantly changing may benefit by recording much of the reportgeneration information in a rule base, instead of embedding it in proceduralcode.andM;SIDE EFFECTSandM;A side effect of treating rule-based systems as an extension or add-on todatabase systems, rather than as an exotic new kind of processing, is lessindustry hype over rule-based systems and more focus on developing realapplications.andP;  The resulting systems will be integrated with mainstreamsoftware and will run on mainframes, minis, and micros, rather thanspecial-purpose LISP workstations.andP;  Of course, the merger process has onlybegun and many technological, organizational, and cultural issues must beaddressed before the merger is a reality.andM;The evolution of rule-based system technology toward increasing integrationwith database applications can be divided into three phases (Figure 5).andP;  Thefirst stand-alone (phase 1) was characterized by low compatibility withstandard software, hardware, and operating systems and by stand-alone systemstypically running in solitary splendor on dedicated LISP workstations.andO;Though many of these systems are technically brilliant, with state-of-the-artgraphics and window interfaces, few of their keyboards are pounded by manyreal users.andP;  Thus the issue of database integration seldom arises for phase1.andP;  Organizations committed to rule-based systems are wary of the traps ofphase 1, and even the label &quot;artificial intelligence&quot; carries some of thenegative connotations of this phase.andM;Phase 2 is characterized by systems with increasing compatibility withstandard hardware and operating systems and the capability to interface to avariety of database systems from dBASE to DB2.andP;  The interfaces usuallyinvolve the ability to query and update external databases.andP;  Most currentshells, including state-of-the-art systems from AI Corp., Neuron Data,Cullinet, and Aion, are in this phase; some are on their way to phase 3.andM;In phase 3, in the mid-1990s, databases and rule-based systems will be fullyintegrated, embedded, and completely compatible with standard software,hardware, and operating systems.andP;  COBOL application programmers won't thinktwice about adding rule-based capabilities to an application.andP;  Mergingrule-based programming with database applications will allow organizations toincorporate business goals and rules directly into their information systems.andO;With the advent of distributed enterprise-wide logic database applications,business rules may be applied throughout the company to maintain dataintegrity and maximize the cost-effective, productive use of information tomeet business goals.andM;The merger benefits will be major gains in the effective use of informationto maximize productivity and achieve competitive advantages.andP;  In the same waythat transaction-processing systems for airline reservations have transformedthe airline industry, logic database applications will transform manyinformation-critical industries.andP;  To achieve the merger in any givenorganization, many obstacles, both technical and managerial, need to beovercome.andP;  To realize the many benefits of the merger in a timely,cost-effective manner, managerial and technical leadership and a spirit ofcooperation on both sides will be essential.andO;</TEXT></DOC>