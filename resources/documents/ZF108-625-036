<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-625-036  </DOCNO><DOCID>08 625 036.andM;</DOCID><JOURNAL>Communications of the ACM  July 1990 v33 n7 p105(12)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Agenda: a personal information manager.andO;</TITLE><AUTHOR>Kaplan, S. Jerrold; Kapor, Mitchell D.; Belove, Edward J.;andO;Landsman, Richard A.; Drake, Todd R.andM;</AUTHOR><SUMMARY>The Agenda personal information management system (PIM) is basedon a data base design much freer in structure and use than thestandard data base management system originally conceived formainframe computer use.andP;  Microcomputer users who wish to manageindividual and idiosyncratic information need a system that isflexible, does not require a preset data base structure, andallows easy alterations of the structure and variable reportformats.andP;  Managers, professionals and other PIM users organizemany different kinds of data, so Agenda is built to handle thisneed.andP;  Agenda considers each piece of information or text an item.andO;Items can be connected to objects called notes and item/note pairscan be grouped or sorted into categories.andP;  This design permits themanagement and storage of thousands of pieces of information.andM;</SUMMARY><DESCRIPT>Company:   Lotus Development Corp. (products).andO;Product:   Agenda (Personal information management system) (design andconstruction).andO;Topic:     Personal Information Management SystemsData basesSoftware packagesSoftware Design.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>AGENDA: A PERSONAL INFORMATION MANAGERandM;The interactive, single-user format of personal computers has spawnedapplications quite different in character from mainframe applications.andP;  Likemainframes, personal computers can serve the needs of an organization inareas such as accounting, billing, or inventory.andP;  Unlike typical mainframes,however, they also serve personal needs, such as preparing memos, developingfinancial projections, and planning projects.andM;Two of the three major personal computer applications--spread-sheets and wordprocessing--are primarily used as personal productivity tools by individuals.andO;The third major application--database management systems--is different.andP;  Itis used almost exclusively as a scaled-down version of its mainframecounterpart.andP;  Mainframe database management systems do not typically servethe individual's needs, but rather the organization's needs.andM;Does this mean that individuals do not need to store, organize, retrieve, andotherwise manage information?andP;  No, they certainly do.andP;  But their needs--andthe character of their data--are quite different from organizational needsand data.andM;Personal InformationandM;In the course of their activities, professionals and managers encounter avariety of information that can be conveniently expressed as a short piece oftext, that we call an item.andP;  An item might represent (for example) an idea,task, reminder, or fact.andP;  Typically, an item consists of a single phrase or asentence and has little or no formal internal structure.andM;Some examples of items are:andM;* Call Fred on Tuesday about staff meeting.andM;* Hotel Bonadventure guaranteed late arrival 2/31 confirmation #148729.andP;  MeetMr. Silver and John Pell 6:30 in lobby, dinner at Chez Albert 7:15.andM;* Consider new approach to pricing--&quot;book club&quot; model with giveaways.andM;* Expect sales report from Sally next Wed.andM;* Cleaners: pick up three shirts, drop blue suit.andM;* John Milton believed that free will existed so that loving God would bemeaningful.andM;An individual may handle several items in a single day and have hundreds oreven thousands of &quot;active&quot; items that need to be stored, organized, andscanned regularly [8].andM;While much of the information that individuals need to manage is short andself-generated, sometimes the granularity is larger and comes from othersources.andP;  An individual may need to index or organize larger bodies of textsuch as memos, reports, messages, or news stories.andP;  It is useful to associatesuch objects with items, where the item may be a topic, summary, source, orheadline describing the text.andP;  We call such bodies of text notes.andM;To cope with the task of organizing items and notes, individuals group theminto sets--typically in the form of an ordered list or file.andP;  The items/notesthen can be manipulated conveniently as a unit.andP;  We call these setscategories and say that the items/notes are assigned to categories.andM;A representative range of categories for one individual is:andM;* Phone callsandM;* Things to readandM;* ErrandsandM;* Special dates and birthdaysandM;* Bring from home to officeandM;* IEEE speech notesandM;* Proposed picnic datesandM;* Program bugsandM;* Accomplishments for next performance appraisalandM;* Major upcoming expensesandM;* High priorityandM;* Fred SmithandM;* Pricing policy committeeandM;* Important concepts of Western philosophyandM;When many categories are defined, the categories take on specialsignificance: they provide the concepts for organizing and understanding theinformation at higher levels of abstraction.andP;  The set names become the wordsof a language, which can describe the information and its interrelationships.andO;This language can capture salient features of the universe of theinformation, reflecting the &quot;real world&quot; from which they are drawn.andM;When items/notes can be assigned to multiple categories, an individual canalter his or her focus to reflect different perspectives by organizing thesame information in multiple ways.andP;  We call each such organization a view.andO;This is difficult to accomplish with physical storage methods (such as paperin files), where each item or note exists in a unique place.andM;Most people are unaware of the volume of information they manage on a regularbasis, because they use a variety of mechanisms for this purpose.andP;  The styleof management is highly individual, but often includes such aids as notecards, rolodexes, yellow Posted notes, while-you-were-out messages, and listson paper that are recopied on a regular basis.andP;  In general, personalinformation is too ad hoc and poorly structured to warrant putting it into arecord-oriented on-line database.andM;Database ManagementandM;ParadigmsandM;In the 1960s, mainframe computers were owned primarily by large organizationsand businesses and were applied to their problems.andP;  These consisted mainly ofclerical database tasks, which usually involved filing, retrieving, sorting,processing, and reporting data.andP;  For these applications, the computerrepresented several advantages over the corresponding manual processes:andM;* Speed--data could be retrieved much faster than through manual methods.andM;* Accuracy--calculations and manipulations (such as sorting) could beperformed more accurately.andM;* Density--data could be stored in magnetic form (mainly tape) more compactlythan in physical files.andM;* Utility--The data could be presented in different formats for differentpurposes.andM;These advantages of computerized databases over manual processes promptedboth database theorists and practitioners to focus on the efficient, reliablemanipulation of large volumes of data.andP;  It was recongized, early on, thatunderstanding and describing the structure of the data in advance (i.e., atdatabase design time) was a major advantage.andP;  Most of the data beingmanipulated had a repeating, record-oriented structure that could be used toimprove processing and storage efficiency.andP;  Therefore, relatively littleattention was paid to providing richer data description languages ordesigning systems with more flexible data structures.andM;As a result, the dominant database management paradigms are not well suitedfor managing personal data.andP;  They are oriented toward the storage andretrieval of large volumes of data with a known, repetitive structure.andP;  Thesedatabases are mainly used for keeping corporate records and communicatingwithin an organization.andM;Personal data has different characteristics: it is often of relativelylimited volume; its structure is not known in advance and evolves over time.andO;It contains heterogeneous data types.andP;  This information may be generated andmanaged directly by an individual or may be some body of data that is indexedor accessed according to some idiosyncratic needs.andP;  Therefore, mainframedatabases and their personal computer counterparts are not very useful forpersonal data, where discovering, presenting, or modifying the structure ofinformation is more important.andP;  A different data management paradigm isrequired.andM;Many programs designed to manage personal data have adopted a completelyunstructured approach, treating all data as free text that is searched anddisplayed in response to ad hoc keyword queries.andP;  This approach confuses thelack of a fixed structure with no structure at all.andP;  Personal data hasstructure, but its structure is fluid, changing in response to evolvingneeds.andM;Hypertext systems, such as Hypercard for the Apple Macintosh, provide asimple structuring mechanism--links between data elements--which allows theuser to create a topological space of adjacent elements.andP;  However, structureis fluid, changing in of the grouping of similar items and relationshipsdefined among those groups, not the simple linking of individual itemstogether.andP;  Most hypertext systems assume that the information of interestresides exclusively in the data rather than in the structure.andP;  They do notprovide the user with the means to view and manipulate structure itself orcreate relationships among groups of data elements.andM;Agenda: A PersonalandM;Information ManagerandM;To study the requirements of personal database management, we constructedseveral prototype systems, culminating in a program suitable for release as acommercial product.andP;  This program, named &quot;Lotus Agenda,&quot; meets several designrequirements for managing personal information.andP;  These are:andM;* The user must be able to easily enter, edit, and manipulate free textualitems without concern for the underlying structure of the database.andM;* The user must not be required to specify the structure of the data inadvance and must be able to modify the database structure as it evolveswithout losing data or reorganizing the database.andM;* The user must be able to define reports in idiosyncratic formats.andP;  Throughthese reports, the user must be able to create and modify both databasestructure and content.andM;From the user's perspective, Agenda consists of a few simple elements thatare used to incrementally define and populate a database.andM;The first of these is the item, as described above.andP;  Items are the content ofthe database and can consist of up to several lines (350 characters) of text.andO;Items in Agenda are assigned to or filed in categories.andP;  Categories providethe structure of the database and are used to organize items and display themconveniently.andP;  Like items, the categories are not pre-defined--the usercreates, deletes, and modifies categories as necessary in order to manage theitems.andM;Each category defines a subset of those items assigned to it.andP;  Alternatively,categories can be understood as one-place predicates defined over theuniverse of items.andP;  Given the categories defined earlier, the user mightassign an item &quot;Call Fred next Tuesday about pricing policy plans&quot; to severalcategories: &quot;Phone calls,&quot; &quot;Fred Smith,&quot; and &quot;Pricing policy committee.&quot;andM;Figure 1 shows a simple list of items in Agenda assigned to a category called&quot;Tasks.&quot;andP;  A bar cursor serves as a pointer, highlighting the current item orcategory in reverse video.andP;  In the example, the cursor is on item &quot;Call Jeffabout the Randamp;D budget.&quot;andM;Both items and categories can optionally have an attached body of text calleda note.andP;  Notes can be up to about 10,000 characters in length and may beinternal to an Agenda database or contained in a separate ASCII file.andP;  Notesare easily accessible from an item or category by placing the bar cursor onthe item or category and pressing a function key.andM;Figure 2 illustrates a note attached to item &quot;Call Jeff about the Randamp;Dbudget.&quot;andP;  Typically, notes are used to capture some further detail or somesecondary information about an item or category.andP;  Another use of an item andits note is to make the note a short document and use the item itself as atitle.andP;  Notes on categories are often used to document the intent behind thecategory, i.e., what sorts of items should be assigned there.andM;The categories are organized into a tree structure called the categoryhierarchy.andP;  The purpose of the hierarchy is to conveniently describe twofundamental structuring principles: subsumption and mutual exclusion.andP;  Itemsthat are assigned to a category in the hierarchy are also implicitly assignedto the parent of that category in the hierarchy, i.e., a parent categorysubsumes its children.andP;  A category in the hierarchy can be optionallydesignated as exclusive, indicating that no item can be assigned to more thanone child in the category's subtree.andM;Figure 3 is a typical category nierarchy display.andP;  The brackets around thechildren of &quot;Priority&quot; indicate that Priority is exclusive.andP;  Since Priorityis a parent of &quot;High,&quot; any item assigned to High is implicitly assigned toPriority as well.andM;Subsumption and mutual exclusion, defined through this tree structure,implement a limited class of logical implications:  A implies B(subsumption); and A implies not B (mutual exclusion).andP;  Advanced featurescalled conditions and actions allow users to define more complex logicalinterrelationships between categories, including a form of declarativeif-then rules.andP;  Automatic assignment and other forms of intelligent behaviorare implemented in part by enforcing these relationships.andM;ViewsandM;Items are entered and displayed in Agenda through views.andP;  A view is analogousto a report in a typical database management system, except that it isdynamic: it is modified automatically when items or categories change.andP;  Theuser typically defines a number of different views and can quickly switchamong them.andP;  Views allow the user to focus on different aspects of thedatabase for different purposes by varying the content or format of thedisplay.andP;  For example, when deciding what to do next, the user might consulta view listing items by priority; in case a colleague drops in, another viewmight provide only the items that relate to that person, organized by topic.andM;The user constructs views visually by arranging categories into (possiblyirregular) row and column structures on the display.andP;  Formally, views aredefined via three mechanisms:andM;* Selection--A query, called criteria, can be specified to select a subset ofitems to be displayed.andP;  The basis for the selection is assignment (ornon-assignment) of the item to categories.andM;* Demarcation--Once a set of items is selected, they are organized fordisplay into a collection of lists called sections.andP;  Each section is headedby a category.andP;  The user defines the sections that are to appear andindicates their order by selecting a category to head each section.andP;  Within asection, the items appear as bullets and are wrapped to fit onto the displayas necessary.andM;* Annotation--Further information about the items that appear in each sectioncan be optionally displayed in columns either to the right or left of theitems in each section.andP;  The information displayed in the columns are othercategories that the items are assigned to.andP;  The user specifies a family ofinformation to be displayed in a column simply by selecting a category tohead that column; only categories in the hierarchy subtree of the selectedcategory are then displayed in the column.andP;  Note that a column may containmultiple entries for a single item, i.e., the information need not benormalized.andP;  The columns also can be different for each section in a view.andM;Figure 4 is an example of a complex view including many sections and columns.andO;Two sections are visible, one headed by the category &quot;Gust Clothes Dryer&quot; andone headed by the category &quot;Sparkle Dishwasher&quot; which is incomplete on thescreen.andP;  A column headed by &quot;Priority&quot; is to the left of the item text inboth sections, while a column headed by &quot;Department&quot; is present only in thefirst section.andP;  The &quot;People&quot; column displays which category in the &quot;People&quot;hierarchy the items are assigned to.andP;  Note that one item has multipleassignments within the &quot;People&quot; hierarchy.andM;Notice that all important aspects of a view are defined by selectingcategories.andP;  In addition to providing a simple, visually oriented definitionmethod for the user, this allows the program to modify the view structuresgracefully as the database structure evolves.andM;In summary, an Agenda database consists of four basic elements.andP;  Items andnotes provide the content; categories organized into a hierarchy provide thestructure; and views provide the data entry and reporting (output) mechanism.andM;Updating DatabasesandM;Through ViewsandM;The power of Agenda comes primarily from the user's ability to update thedatabase implicitly through the views.andP;  By manipulating items and categoriesin a view, the user can make changes to the underlying database that areimmediately reflected in other views, without concern for the internalorganization or storage of the information.andM;While this facility is a significant advantage to the user, it presents acomplex implementation problem.andP;  Theoretically, updating a database through aview is not always well defined [6, 7].andP;  Specifically, an action may beambiguous or even contradictory to interpret in the underlying database [4].andO;Agenda uses a variety of formal methods and heuristics to interpret theseactions in a reasonable way and affect reasonable changes to the database.andM;A normal suite of screen-oriented commands is provided to the user in orderto manipulate the objects visible in the view: insert, delete, move, copy,edit, or replace.andP;  The system interprets these commands by making thesimplest change to the underlying database, which results in the literalchange to the display indicated by the command.andP;  As a result, the actualinterpretation of a command is highly context sensitive.andM;Some simple examples are:andM;* Inserting a new item into a section assigns that item to the category thatheads the section.andM;* Deleting an item from a section removes the item from the category thatheads the section.andP;  For convenience, a separate command called discardremoves an item or category from the database completely.andM;* Copying an item into a section assigns the item to the category that headsthat section and removes the item from any category that is mutuallyexclusive with it.andM;Categories can appear in a view in three contexts--as a section heading, acolumn heading, or in association with an item such as the contents of acolumn.andP;  By far the most common operations on categories in a view are insertand replace, which involve the selection of a category for display in one ofthese three contexts.andM;One approach to allowing the user to select categories to define a view is topresent the category hierarchy and allow the user to select the desiredcategories.andP;  Experience with users, however, revealed that it wasdisconcerting to keep switching back and forth between the partiallyconstructed view and a display of the category hierarchy.andP;  We choose analternative approach, allowing the user to simply position the cursor on thescreen and type the name of the desired category.andM;The goal of these methods is to make the minimal logically consistent changeto the database that will produce the change to the view indicated by theuser.andP;  This often causes other views to be modified implicitly as well.andP;  Whenthe user makes a change to a view that is ambiguous with respect to adatabase (i.e., that has multiple interpretations), Agenda selects theinterpretation that causes the minimal disruption to other views.andP;  If thisheuristic provides no guidance for resolving the ambiguity, Agenda examinesassignments of similar items and categories in the vicinity of the user'schange.andM;While these techniques do not always yield an optimal result, they are quitesatisfactory in the majority of cases.andP;  The residual cases are minorannoyances, more than offset by the convenience of updating through views.andM;This introduces some ambiguities in interpreting the user's intent.andP;  Is theuser creating a new category or trying to select an existing one?andP;  What ifthere are multiple categories with the same name in different parts of thehierarchy?andP;  To resolve these questions, Agenda incorporates a concept calledcategory matching, illustrated in Figure 5.andP;  When the user begins to type, aspecial display appears at the top of the screen, which indicates how manycategories in the hierarchy match the string being entered and displays thefirst of these (in hierarchy display order).andP;  While typing the string, theuser can use arrow keys to display other matches, pop up a display boxcontaining the relevant portions of the hierarchy, accept the currentlydisplayed category, or create a new category simply by typing a uniquestring.andM;This process has several advantages.andP;  In most contexts, the user only types afew characters to select a category without sacrificing the ability to make aselection from the entire hierarchy when desired.andP;  Also, new categories canbe created without special commands--incrementally extending the structure ofthe database.andM;Perhaps the most powerful aspect of updating through views is the role ofcriteria (queries).andP;  When an item is entered into a view for which a criteriaselection is specified, it follows that the item is intended to satisfy thecurrent criteria.andP;  Agenda incorporates a special reverse query evaluationtechnique that can force a new item to satisfy a given set of criteria.andO;Thus, entering a new item into a view that displays only items associatedwith a particular project or date (for example) will assign that item to thatproject or date.andM;In some cases, there are multiple ways that a new item could satisfy thecriteria.andP;  When such ambiguities occur, the context of surrounding items inthe view are used to select a single interpretation.andM;Automatic AssignmentandM;and Implicit ActionsandM;Entering and categorizing data in a personal database can be a chore.andO;Ideally, a personal database system should aid the user in this process.andO;Agenda uses a wide variety of cues and contextual information to help theuser properly categorize items and manage the database.andP;  Updating thedatabase through views is one aspect of this process.andP;  Another mechanismallows the user to program automatic assignments and implict actions.andM;In addition to serving as the structure of the database, the categoryhierarchy embodies a declarative program that is executed against changeditems.andP;  Each time a new item is entered or an old one is modified, it isplaced on a queue, which is processed in the background when no other actionsare pending.andP;  The processing for each item takes place sequentially throughthe categories of the hierarchy in depth-first order (the order in which thehierarchy is displayed).andM;The user can associate with each category in the hierarchy a set ofconditions and a set of actions, assembled from a restricted vocabularyavailable for this purpose.andP;  The conditions are evaluated each time an itemis changed, and if the conditions are met, the changed item is automaticallyassigned to this category.andP;  Whenever an assignment is made to a category(including an explicit assignment by the user), any actions the user hasdefined for that category are immediately taken.andM;There are three types of conditions that can be tested for each category.andO;These are called string conditions, profile conditions, and date conditions.andM;(1) String cinditions perform a match between the content of the item and thecontent of the category (i.e., the category name), with the goal of computinga measure of semantic overlap between the two.andP;  This is done by comparing thewords appearing in each after stripping suffixes, looking for certain commonidentifiable data types (such as proper names, dates, times, and number), andperforming limited syntactic analysis.andP;  (The details of this process arebeyond the scope of this article.)andM;(2) Profile conditions apply a set of criteria to the item that is identicalin form to the view criteria described above.andP;  If the categorization of theitem meets the criteria, the condition succeeds.andM;(3) Date conditions test one of the three intrinsic dates associated with anitem (entry date, completion date, and user-assigned calendar date) forinclusion in a specified date range.andP;  If the item's date falls inside therange the condition succeeds.andM;Unless the user explicitly defines a profile condition or a date condition, acategory has only a string condition associated with it, since it existsimplicitly by virtue of the category's name.andP;  This is by far the most commonsituation, as it does not require any special action on the part of the user.andO;Indeed, the user does not even need to know about the subtleties of automaticassignment in order to benefit from string conditions.andM;In the simplest case, items will get assigned to categories that match one ormore words in the item.andP;  For instance, an item &quot;call Mr. Smith about thepolicy meeting&quot; might match the string conditions of categoris &quot;calls,&quot; &quot;JohnSmith,&quot; &quot;policy committee,&quot; and &quot;meetings&quot; and hence be automaticallyassigned to them.andM;A set of special symbols can be embedded into a category name to gainadditional control of string matching.andP;  These provide for alternativedescriptions of the category (called aliases); requiring precise matches;accepting any substrings; and fixing the order of matched words or casesensitivity.andM;A global setting called Initiative determines how strong a match must be inorder for the string conditions to succeed.andP;  By varying the initiative, theuser can control how freely the program will accept matches between items andcategories.andM;Another global setting, called Authority, determines whether matches over theinitiative threshold are carried out immediately or are put in a specialqueue of suggested categorizations to be reviewed with the user.andP;  Thistechnique, sometimes called mixed initiative [2, 3, 10], allows the programto engage the user in a clarification dialog for weak or potentially spuriousautomatic assignments.andP;  When this queue is non-empty, a special? symbolappears at the upper right of the screen.andP;  The user begins the dialog byselecting a menu item &quot;questions,&quot; after which the program presents itspending assignments and the strength of the evidence for them.andM;Profile conditions are used for implementing ad hoc logical implications.andO;For example, any item assigned to both &quot;John Smith&quot; and &quot;policy committee&quot;should be assigned to &quot;discuss with manager.&quot;andP;  They are also handy forimplementing default assignments, such as classifying any &quot;bug&quot; not alreadyassigned to a &quot;classification&quot; as &quot;serious.&quot;andM;Date conditions are mainly used to define calendar views--views in which theitems are displayed in sections according to dates.andP;  Using date conditions,it is possible to construct a daily calendar, weekly calendar, or any otherdesired arrangement.andP;  Date conditions are also useful for changing an item'sassignments based on some time-sensitive conditions.andP;  For example, an itemthat becomes overdue can be automatically assigned to a &quot;late&quot; category, orone due within three days can be moved into a &quot;high priority&quot; category.andM;Date conditions work in conjunction with a natural language date parser thatextracts English date expressions from items and assigns the appropriatedate.andP;  This grammar can correctly interpret expressions such as &quot;two weeksfrom last Tuesday,&quot; &quot;the day after tomorrow,&quot; and &quot;the last week in June,&quot; aswell as standard American date formats such as &quot;May 25, 1989&quot; and &quot;2/5/87.&quot;andM;Actions are somewhat simpler than conditions in that they are takenimmediately whenever assignments occur.andP;  They can be used to date an item(date actions), push an item onto one or more other categories (profileactions), or execute a limited set of special actions such as to discard theitem from the database.andM;Note that any change to an item that results from a successful condition oran action will place the item back onto the queue of changed items, causingit to be processed again through the hierarchy.andP;  Programs of considerablecomplexity can be constructed by cascading sequences of conditions andactions throughout the hierarchy.andP;  In effect, the hierarchy is a declarativeprogram that is run against each changed item.andM;Eliminating Field/ValueandM;DistinctionsandM;There are several structuring principles that are inherent in tabulardatabase organization, but that seem alien to personal data.andP;  Forcing usersto consider them inhibits their ability to organize their data.andM;The most important of these is a fixed field/value distinction.andP;  In a tabulardatabase, the fields (column headings), and possibly the set of legal valuesthat can appear in a field (data), are normally defined in advance--when thedatabase is designed.andP;  The organization into fields and values, however, isnot a characteristic of the data itself, but a representational convenience;the same information can be represented in different tabular forms.andM;For example, the &quot;employment status&quot; information in Figure 6a is representedin a different field/value format in 6b, by elevating the value &quot;full-time&quot;to a binary (yes/no) field.andP;  The same information appears in a differentformat in 6c, where the divisions have been represented as separate fields inthe database, with their departments as values.andP;  Explicitly representing theimplication that the departments belong to the divisions could beaccomplished by normalizing the information into two tables, such as in 6d.andM;In general, the fields represent the fixed information about what can be inthe domain, while the values indicate the changing information about what is.andO;The distinction is not inherent in the data, but rather reflects how the datamay change over time.andM;While data from a traditional database system could be transformed andpresented in any of these formats, it would be quite difficult to allowarbitrary updates to the transformed data, as this may require extensiveinternal reorganization.andP;  By not presuming a particular field/valueorientation at the database level, Agenda can present the data in any suchformat and support updates in real time.andM;In Agenda, both fields and values are represented by the more general conceptof category.andP;  whether a category serves as a field or a value depends on itsuse in a given context--what role it plays in a view.andP;  For example, thestructural information in Figure 6 might be represented in Agenda as thecategory hierarchy in Figure 7.andP;  This information could be presented indifferent forms in different views, as shown in Figure 8a, b, c, and d.andM;Views a, b, and c in Figure 8 display the data in a form similar to thecorresponding tables in Figure 6.andP;  The Agenda database is identical in eachcase, but the views are formatted to reflect different field/valuedistinctions.andP;  In this database, the people are treated as items.andM;Views 8a uses the same category (Division/Dept) to head two columns.andP;  Onecolumn uses a child format, however, to display only the immediate childrenof the column heading (the divisions), while the other uses an actual formatto display the departments.andP;  View 8b shows a column headed by the &quot;full-time&quot;category instead of the &quot;employment status&quot; category, with a &quot;Y/N&quot; format.andO;View 8c selects &quot;Test Equip.&quot; and &quot;Banking Software&quot; as column headings.andM;While it is possible in Agenda to create a multi-table structure as in Figure6d by adding an additional section to the view, it is misleading to do so inthis instance.andP;  Agenda databases can contain multiple record types, as in amulti-table database; however, only a limited form of join is possible.andP;  In atypical tabular database, each table contains one or more distinguishedfields constituting a unique key for each entry.andP;  The corresponding conceptin Agenda is the item itself, while the categories correspond to fullyindexed non-key fields.andP;  Some relational database joins implicitly alter theinterpretation of a given field from being a key to a non-key field.andP;  In thisexample, one might expect to join the two tables in 6d on DEPARTMENT,yielding a table as in 6b.andP;  However, this implies a conversion of DEPARTMENTfrom a key to a non-key field.andP;  The corresponding operation in Agendarequires converting an item to a category, which is not a view-leveloperation.andM;Nonetheless, the referential integrity [1] implied by the decomposition ofthe data into two tables in Figure 6 is enforced in Agenda.andP;  Specifically, anindividual could not be assigned to a department inconsistent with his or herdivision.andP;  In Figure 8a, for example, the user could position the cursor over&quot;Sales&quot; and type &quot;Development,&quot; thereby reassigning &quot;Fred Smith&quot; to&quot;Development,&quot; as in 8d.andP;  Subsumption in the category hierarchy insures that&quot;Fred Smith&quot; is now assigned to &quot;Banking Software&quot; and, further, is removedfrom &quot;Test Equip.&quot; through mutual exclusion.andM;Modifying DatabaseandM;Structure DynamicallyandM;In a conventional database, the tabular structure is fixed in advance and thecontent varies over time.andP;  When dealing with personal data, users must beable to reorganize their databases on-the-fly.andP;  The basic problem is that thestructure of a personal database may not be known in advance and, indeed, maycontinuously evolve over time as the nature of the information or the contextchangesandM;For example, consider the problem of organizing a new project to beundertaken.andP;  As the project begins to take shape, it becomes necessary toorganize the mass of ideas, tasks, and information into categories orclassifications so that the project can be understood and managed at anappropriate level of abstraction.andP;  A limited amount of detail can be handledat a time, and the structure provides the means to focus on manageablesub-tasks or aggregate the information into a meaningful big picture.andP;  Thecomplexity of the structure is often dictated by the volume of informationthat needs to be handled.andP;  The amount of information can vary dramatically asthe project actually unfolds over time--and therefore the structuralrequirements change as well.andM;In this context, the ratio of items to categories becomes important.andO;Experience with Agenda suggests that personal information tends to beorganized into a relatively small number of categories, each of whichtypically contains multiple items.andP;  If the items are too numerous, the usertends to refine the categories; if they are too few, the user tends toaggregate them.andP;  The purpose of this process seems to be to maintain thisratio at a comfortable level.andP;  This requirement is in contrast torecord-oriented databases, where the ratio of items to categories istypically either one-to-one--such as each person having a unique address--orvery-many-to-one--such as all people being assigned to either male or female.andM;We have also found that a single item tends to be filed in a relatively smallnumber of places.andP;  This is why filing cabinets--where an item can be filed atmost once--work acceptably, but do not provide the convenience or flexibilityof a personal information manager.andP;  There is a definite departure point inpower--a significant step up in utility--when items can be convenientlyassigned to multiple categories.andM;The evolution of personal database structure often follows a particularpattern.andP;  Users seem to like regular, normalized data.andP;  As they discover andrefine the structure of their data, however, it passes through non-standardstates and in fact may be only partially normalized in steady state.andM;To address the need for dynamic modification of the database structure,Agenda category hierarchies can be modified incrementally without making thedatabase, defined views, or other program structures obsolete.andM;As an example, suppose a user of the database of Figure 8 decided it would behandy to know which full-time employees are paid on an hourly basis and whichare paid a salary.andP;  This is easily accomplished by inserting two childcategories into the category hierarchies, as shown in Figure 9.andP;  The role of&quot;full-time&quot; as a binary-valued field in Figure 8c could be easily modified toshow the two new children in the column.andP;  Alternatively, &quot;hourly&quot; and&quot;salaried&quot; could be treated as a value of &quot;Employment Status&quot; in Figure 8a.andO;Of course, existing items in the database would have to be recategorized from&quot;full-time&quot; into &quot;hourly&quot; and &quot;salaried.&quot;andP;  But in the interim, they canremain assigned directly to the non-terminal &quot;full-time&quot; category.andM;Two design considerations allow Agenda to provide this flexibility.andP;  First,the physical storage of the items does not depend on the structure of thedatabase.andP;  Thus, no reformatting, reorganization, or indexing again at thephysical level is required to implement a change to the category hierarchy.andO;Second, no distinction is made internally between terminal and non-terminalcategories in the hierarchy.andP;  Consequently, an item can be assigned tocategories anywhere in the hierarchy, including the root category.andP;  To refinethe categorization for a set of items, the user moves the items' assignmentsfurther down the hierarchy; to aggregate, the user moves the items'assignments up the hierarchy.andM;As noted earlier, most aspects of a view are defined by selecting categories.andO;This allows Agenda to modify the views as the database structure changes.andO;Since categories are the vocabulary for defining the elements of a view(criteria, sections, and columns), the program can respond intelligently tochanges in the category hierarchy.andM;For example, deleting a category need not make a view obsolete--it may justremove a section or columns from a view or modify the selection criteria.andO;Similarly, simple heuristics can be used to augment a view when newcategories are added.andP;  For example, adding a new category as a child of the&quot;Division/Dept&quot; category would add a new section to a view in which all theexisting divisions already appear as sections.andM;Perhaps the most complex adjustment required when the category hierarchychanges is the reinterpretation of queries (criteria).andP;  In Agenda, the userdoes not directly specify a boolean expression in order to select the itemsthat will appear in a view.andP;  Rather, the user identifies the categories ofinterest, indicating whether items assigned to that category are to beincluded or excluded, and the system synthesizes an appropriate booleanexpression.andM;This expression is not a simple conjunction of the categoriesindicated--complex expressions of logical ANDs, ORs, and NOTs often result.andO;The heuristics for formulating these expressions derive from a simpleobservation: the user would never intend a query that would necessarilyresult in a null set of selected items [4].andM;For example, if a group of categories are selected that are exclusive, i.e.,andO;an item can appear in one of them, at most, these categories will be ORed inthe query, since conjoining them could never result in a non-empty set ofitems.andP;  While this approach limits the user's flexibility for specifyingarbitrary queries, the query synthesis algorithm almost always produces thedesired result in practice.andP;  Most queries are actually quite simple andfollow the heuristic rules used in the program.andP;  When a category is deleted,queries in the system are resynthesized when they are next needed, to reflectthe change.andM;Inter-DatabaseandM;CommunicationandM;Evolving databases create another challenge.andP;  How do you move data from onedatabase to another?andP;  In a database where the structure is defined inadvance, it is possible (though a bit tedious) to write a program that picksup information from one database, re-formats it, and copies it into anotherdatabase.andP;  In an Agenda database, such a program is in constant danger ofbecoming obsolete, as the category hierarchies of the source and destinationdatabase continue to evolve.andM;At the core of this problem is the indeterminacy of the translation [9].andO;From a linguistic perspective, an item and a category assignment form adeclarative proposition: the item is the subject, and the category assignmentis a statement about that subject.andP;  For example an item &quot;Write Agenda pressrelease&quot; may be assigned to a category &quot;Fred Smith,&quot; which has a parentcategory &quot;Task assignments,&quot; representing the proposition that Fred Smith isresponsible for writing a press release about Agenda.andP;  Each database containsa vocabulary of categories that, in their context, make assertions about theitems.andM;While items can be transferred easily, it is difficult to determine how anitem's assignments in one database should be interpreted in another database.andO;When is a category in one database the same as a category in another?andP;  Whatif there are multiple categories in the destination database that match acategory in the source database?andM;Our approach to this problem is to use partial match algorithms that attemptto find similarities between the structure of two databases.andP;  Moving datafrom one database to another involves assigning the data as similarly aspossible in the destination database to its category assignments in thesource database.andM;Two basic measures are used in the partial match process--comparing thecategory names (i.e., a string comparison) and comparing category hierarchystructures in the vicinity of the categories being compared.andP;  When an item isexported from one database to another, information is carried along with itindicating not only the specific category assignments in the source database,but certain information about the context of those categories in the categoryhierarchy.andP;  In the destination database, the hierarchy is searched formatching categories, and if these are found, the item is assigned to them.andO;If no matching categories are found, an optional attempt is made to locate anappropriate place in the destination category hierarchy for the orphanedcategory, and a corresponding category is created.andM;This approach to inter-database communication serves several purposes inaddition to the immediate requirement to move items around.andP;  It allowsdatabases with similar, but not necessarily identical, structures to remainrelated, even though each may evolve differently over time.andP;  For example,many users maintain a &quot;shadow&quot; database of completed action items as aseparate Agenda database.andP;  By exporting items from one or more primarydatabases to this database, the structure is incrementally refined asnecessary to reflect changes in the category hierarchies of the primarydatabases.andM;A similar benefit accrues to shared databases.andP;  Members of a work group maycommunicate by exporting items to each other or to a common shared database,which is consulted periodically.andP;  This can be used to accumulate changes totrack progress on a project, or simply to send messages back and forth.andM;Transferring items from one database to another is reminiscent of thetransfer of DNA in living organisms.andP;  An agent carries with it a geneticdescription that, in a suitably related environment, can serve to integratethe agent into this new environment.andP;  Under some conditions, the invadingagent not only becomes integrated into the host, but transforms the basicstructure of the host to accommodate it.andM;ConclusionsandM;The development of Agenda spanned approximately two and a half years fromconception to scheduled product release.andP;  During this time, many novel andinteresting concepts were developed that were not ultimately incorporatedinto the product and may form the basis for future versions or otherproducts.andM;User and market testing occurred throughout the final 12 months of thisprocess.andP;  The development team was often surprised by the range of novelapplications discovered by users.andP;  Several of these involved the analysis ofexisting bodies of text or information that was drawn in real-time fromexternal sources.andP;  These included:andM;* Tracking events around the world to help predict the availability and priceof oil.andM;* Automatic classification of UPI business stories according to qualitativemeasures (i.e., whether the news was positive, negative, etc.).andM;* Managing takeover rumors at a brokerage house.andM;* Planning office space and moves.andM;* Sharing experience and information among telephone product supportpersonnel.andM;* Tabulating survey responses.andM;* Selecting relevant precedents for legal cases.andM;Because Agenda incorporates a variety of heuristic methods for taking actionswithout an explicit command (such as automatic assignments), it requires asubtle paradigm shift on the part of the user.andP;  Few computer users areaccustomed to programs that interpret intentions in addition to simplyexecuting commands.andP;  We found that people were quite willing to accept thissharing of control, tolerating occasional mistakes in the program's judgmentin return for the benefits of improved personal organization andeffectiveness.andP;  The results of cascading program-initiated actions oftensurprise even experienced users, who continually fine-tune their databases tomore closely mirror their own judgment.andM;From a user's perspective, item/category databases are tools for controllingcomplexity.andP;  They make it possible to organize volumes of detail far greaterthan manual methods allow; quickly shift perspective in response to immediatedemands; centralize disparate notes, ideas, reminders, lists, and tasks; andget the big picture by examining information from multiple viewpoints and atvarying levels of detail.andP;  Personal information managers provide a means forcoping with the heterogeneous, evolving, free-form information thatindividuals must manage on a continuing basis.andM;ReferencesandM;[1] Date, C.J.andP;  Referential integrity.andP;  In Proceedings of the SeventhInternational Conference on Very Large Data Bases (Cannes, France, Sept.andO;9-11).andP;  IEEE, New Jersey, 1981, pp.andP;  2-12.andM;[2] Ehrenreich, S.L.andP;  Query languages: Design recommendations derived fromthe human factors literature.andP;  Human Factors 23, 6 (Dec.andP;  1981).andM;[3] Gershman, A., and Wolf, T.andP;  The dynamics of man-machine interaction in aconversational advisory system.andP;  In Proceedings of the InternationalConference on Systems, Man, and Cybernetics.andP;  IEEE, New Jersey, 1986.andM;[4] Kaplan, S.J.andP;  Cooperative responses from a portable natural languagequery system.andP;  Artif.andP;  Intel.andP;  19, 2 (Oct.andP;  1982), 165-187.andM;[5] Kaplan, S.J.andP;  and Davidson, J.E.andP;  Interpreting natural language databaseupdates.andP;  In Proceedings of the 19th Meeting of the Association forComputation Linguistics (Stanford, Ca., June).andP;  1981.andM;[6] Keller, A.M.andP;  Role of semantics in translating view updates.andP;  IEEEComput.andP;  19, 1 (Jan.andP;  1986), 63-73.andM;[7] Larson, P.A., and Yang, J.Z.andP;  Computing queries from derived relations.andO;In Proceedings of the 11th International Conference on Very Large Data Bases.andO;IEEE, New Jersey, 1985, pp.andP;  259-269.andM;[8] Lyngback, P., and McLeod, D.andP;  A personal data manager.andP;  In Proceedings ofthe 10th International Conference on Very Large Data Bases.andP;  IEEE, NewJersey, 1984, pp.andP;  14-25.andM;[9] Quine, W.V.andP;  Indeterminancy of translation again.andP;  J. Philos.andP;  84, 1(1987), 5-10.andM;[10] Whalen, T.andP;  A linguistic inference system with mixed-initiative dialog.andO;In Proceedings of the North American Fuzzy Information Processing Society(New Orleans, La.).andP;  1986.andM;CR Categories and Subject Descriptors: D.4.3 [Operating Systems]: FileSystems Management--directory structures; distributed file systems; E.5[Data]: Files--organization/structure; F.2.2 [Analysis of Algorithms andProblem Complexity]: Non-numerical Algorithms and Problems--pattern matching;H.1.2 [Models and Principles]: User/Machine Systems--human informationprocessing; H.2.1 [Database Management]: Logical Design; H.2.5 [InformationStorage and Retrieval]: Information Search and Retrieval--clustering; queryformulation; retrieval models; search process; selection process; H.4.m[Information Systems Applications]: Miscellaneous.andM;General Terms: Human FactorsandM;Additional Key Words and Phrases: Automatic classification, database viewupdate, flexible databases, personal information management, semantic datamodels, textual databasesandM;About the Author:andM;S.andP;  JERROLD KAPLAN is currently President and CEO of GO Corporation.andP;  Hisresearch interests are in hardware and software research and development.andO;Author's present address: GO Corporation, 950 Tower Lane Suite 140, FosterCity, CA 94404.andM;MITCHELL D. KAPOR is currently Chairman of the Board of ON Technology, Inc.andO;His current research interests are in software design.andP;  Author's presentaddress: ON Technology, Incorporated, One Cambridge Center, Cambridge, MA02142.andM;EDWARD J. BELOVE is currently Vice President of Corporate Research andDevelopment at Lotus Development Corporation.andP;  His current research interestsinclude multimedia usage in productivity application, direct manipulationuser interfaces, and new designs for analytical software.andP;  Author's presentaddress: Lotus Development Corporation, 55 Cambridge Parkway, Cambridge, MA02142.andM;RICHARD A. LANDSMAN is currently a System Architect at Lotus DevelopmentCorporation.andP;  His current research interests include workgroup technologiesand their applicability to spreadsheet products.andP;  Author's present address:Lotus Development Corporation, 55 Cambridge Parkway, Cambridge, MA 02142.andM;TODD R. DRAKE is currently a Senior Software Engineer at Lotus DevelopmentCorporation.andP;  His current research interests include dynamic hypermedia,information retrieval, intelligent interfaces, and the cognitive and socialaspects of computing.andP;  Author's present address: Lotus DevelopmentCorporation, 55 Cambridge Parkway, Cambridge, MA 02142.andM;Permission to copy without fee all or part of this material is grantedprovided that the copies are not made or distributed for direct commercialadvantage, the ACM copyright notice and the title of the publication and itsdate appear, and notice is given that copying is by permission of theAssociation for Computing Machinery.andP;  To copy otherwise, or to republish,requires a fee and/or specific permission.andO;</TEXT></DOC>