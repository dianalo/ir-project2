<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-948-754  </DOCNO><DOCID>07 948 754.andM;</DOCID><JOURNAL>Software Magazine  Nov 15 1989 v9 n14 p43(3)* Full Text COPYRIGHT Sentry Publishing Co. Inc. 1989.andM;</JOURNAL><TITLE>U.S. has no monopoly on software. (global software development inthe 1990s)</TITLE><AUTHOR>Yourdon, Ed.andM;</AUTHOR><SUMMARY>The US software industry faces intense foreign competition in the1990s.andP;  Software exports bring valued hard currencies.andP;  Thesoftware industry is easier to enter than the capital-intensivehardware industry.andP;  Foreign programming firms often offer lowersalaries, higher productivity and higher quality than US firms.andP;  Akey challenge of large nations in the 1990s will be building up aprogramming workforce.andP;  The cost of marketing and native languagecapabilities seem certain to hold back some nations.andP;  Nationsinterested in building a software export industry will use afour-part strategy, beginning with sending programmers to the USand moving to software development for US end users.andP;  The nextstage involves developing embedded software for maturetechnologies.andP;  The last stage involves building software thattakes advantage of unique national experiences, such asSingapore's port-management software.andM;</SUMMARY><DESCRIPT>Topic:     Foreign CompetitionSoftware PublishersInternational TradeStart-Up CostsStrategic PlanningOutlookCost of ProgrammingIndustry AnalysisProgrammers.andO;Feature:   illustrationtable.andO;Caption:   Explosive growth predicted in European software market. (table)andM;</DESCRIPT><TEXT>U.S.andP;  HAS NO MONOPOLY ON SOFTWAREandM;The American software industry is going to face intense competition in the1990s from countries that can exploit their advantage of lower salaries,higher productivity and (most important) higher quality.andM;I first began to feel these concerns in the mid-1980s when I read reports ofJapanese software factories.andP;  After trips in the last two years to Argentina,Australia, Brazil, England, India, Italy, Japan and Singapore--taken to gainan understanding of the level of software engineering technology and thegrowth of software export industries--these concerns have been confirmed.andM;This does not mean that every programmer in the U.S.andP;  will lose their job in1990, but it does mean the U.S.andP;  should wake up and realize that we no longerhave a monopoly when it comes to supplying software solutions to themarketplace.andM;To understand the issue of &quot;offshore programming,&quot; we need to ask severalquestions:andM;* Why do other countries want to get into the software business?andM;* Why should we worry?andM;* What are the strengths and weaknesses of foreign software developers?andM;* What is their strategy?andM;* What should we do?andM;What do countries want to get out of the software industry?andP;  The answer tothis question is very simple: it allows them to create value-added exports,which brings hard currencies into the country.andM;This is of particular concern to several Third World countries, whosetraditional exports of commodities and raw materials can fluctuatedramatically.andM;The United Nations recently approved a multimillion dollar project to set upsoftware technology centers in Egypt and Kuwait for the benefit of 22 Arabcountries.andP;  Sooner or later, these countries will have to depend on somethingother than oil for income.andM;Why software?andP;  Why not hardware?andP;  Actually, several countries do producecomputer hardware: Brazil and India, for example, have thriving PC-cloneindustries.andM;But there are two problems with a computer hardware industry: first, itrequires substantial capital to build and operate the manufacturingfacilities.andP;  And second, the hardware industry has rapidly become a&quot;commodity&quot; industry, except in such specialized areas as supercomputers.andM;Exporting PCs, floppy disk drives, and dot-matrix printers is not that muchdifferent from exporting potatoes or shoes; profit margins are razor-thin,and market cycles can be brutal.andM;Software, on the other hand, has the reputation of being a &quot;people&quot;business--an attractive prospect for a country like India, with a populationof 850 million and a good education system.andM;Software is also known as a &quot;boot-strap&quot; industry that requires little or nocapital to get started.andP;  (This perception is generally not true, but theillusion provides many countries with the possibility of software exports.)andM;The final reason is the simplest of all: software is a booming industry, andis growing faster than the hardware industry.andP;  International Data Corp., amarket research firm based in Framingham, Mass., estimates the worldwidesoftware industry will generate $120 billion in 1990.andM;Barry Boehm, formerly of TRW and now an independent consultant, says softwarenow represents more than 50% of a DP budget in most organizations--and thefigure is going up.andM;WHAT, ME WORRY?andM;The reaction of the typical U.S.andP;  programmer and/or DP manager is, &quot;So what?&quot;andM;Indeed, one could argue that as long as the demand for software continues toincrease by 15%, 20%, or even as much as 50% per year, there is nothing toworry about.andP;  Or, put another way, the software pie is so large--and isgrowing so rapidly--there is room for everyone.andM;On the other hand, some areas of the software industry have stabilized andbecome rather mature.andP;  How esoteric is a spreadsheet product or a wordprocessor today?andP;  How innovative is a mainframe sort utility or aplain-vanilla Case tool that draws simple data flow diagrams?andM;When technology matured and stabilized in the United States' high-cost,low-quality manufacturing approach, Japan became an intense competitor.andP;  Fromthis perspective, the software industry could face the same phenomenon thatthe auto industry faced in the 1970s.andM;Indeed, the most significant software competition in the long run will notcome from foreign companies that build better word processors or sortroutines, but from companies that can embed higher-quality, lower-costsoftware-intensive systems in a variety of consumer products.andM;Automobiles, dishwashers, cellular phones, televisions and a host of otherfamiliar products now have one or more embedded systems--often with 100,000lines or more of code.andP;  From this perspective, it may not just be Microsoftand IBM who should worry about competition, but General Electric, GeneralMotors and Citibank.andM;PROGRAMMING OFFSHOREandM;The strengths of offshore programming have already been mentioned: lowersalaries, higher productivity and higher quality.andP;  The salaries are typically5-to-10 times lower than in the U.S.andP;  For example, experienced programmers inArgentina earn about $3,000 per year, and talented programmers in India earnabout $3,600 per year.andM;Productivity is higher, partly because foreign programmers frequently workharder and longer hours; partly because of more careful management; andpartly because they cancel fewer projects in mid-stream.andP;  (In the U.S.,andO;approximately 25% of large development projects are cancelled beforecompletion, usually in the middle of the coding phase or even in the midst oftesting.)andM;Quality is typically much higher than in the U.S., partly because of morerigorous applications of well-known software engineering methodologies, andpartly because of a fanatical devotion to quality.andP;  This is particularly truein countries like Japan, where the resolve is carried over from othermanufacturing industries.andM;What about weaknesses?andP;  Ironically, one common weakness is the lack ofsufficiently trained software engineers.andP;  India, for example, looks at its850 million population as a major resource, yet there are only about 50,000software engineers in the country, compared to roughly 1 million in the U.S.andM;Japan has nearly 500,000 software engineers, but it faces a shortage ofapproximately the same number of people to meet its own domestic softwaredemands.andM;Singapore has increased the number of trained software engineers by a factorof 10 during the 1980s.andP;  But because the entire population of the tinycity-state is only about 2 million people, it is doubtful it will build a&quot;software army&quot; large enough to have a significant impact on the worldmarketplace.andM;For the large countries, though, a major question for the 1990s will be thespeed with which they can build up their software workforce.andM;In the short term, these countries face a problem which works against theirefforts.andP;  Because U.S.andP;  salaries are so much higher, countries like Indiaface a severe brain drain.andP;  Their best software people are tempted to leavethe country and emigrate to the U.S.andM;The problem is exacerbated by the short-sighted efforts of native body-shopfirms that have made a profitable business of shipping their programmers tothe U.S.andM;Another serious problem involves capital.andP;  Though software does not require afactory in the conventional sense of the word, it does require increasinglysophisticated automated support tools, such as Case.andM;But how can a country like India or Argentina compete in the marketplace whenits government places a 100% import duty on imported hardware and software?andO;A $10,000 Case tool seems expensive to many American software organizations.andO;But imagine how much more expensive it is when its price is doubled, and whenits purpose is to support a programmer whose annual salary is only $3,000.andM;As the foreign software firms grow larger and more sophisticated, theydiscover another capital-oriented problem: the cost of marketing.andM;For a PC product, such as a word processor or a spreadsheet, the cost ofmarketing is often four or five times higher than the cost of development.andO;Thus, the initial advantage of low-priced programmers becomes less of abenefit as the software companies move to high-volume product export.andM;An obvious weakness of some countries--in the ability to compete and marketin North America--is their native language.andP;  This is probably the single mostimportant reason for the lack of commercial software applications from Japan.andM;It is also a major reason for the lack of success by Brazil; how much demandcould there possibly be for Portuguese-language software products outsideBrazil and Portugal?andM;The problem is deeper than one may think.andP;  It often takes two or three yearsfor English-language textbooks to be translated into Japanese and otherlanguages.andM;FOUR STAGES OF EXPORT STRATEGYandM;Most countries interested in building a software export industry will employa four-stage strategy.andP;  The first stage is the export of cheap programmers tothe U.S.; India is a good example of a country at this stage.andP;  As mentionedearlier, though, this has a strongly negative long-term impact on thecountry's industry.andP;  It has to be viewed only as a way of gaining an entranceinto the marketplace.andM;&quot;Smart&quot; countries realize that the real competitive advantage is not lowerprice, but higher quality.andP;  If they make a credible claim that they are adependable, high-quality supplier, they will be able to advance to stage 2:local software development for a U.S.andP;  end user.andM;Ireland and India both have operations of this kind.andP;  Several U.S.andP;  insurancecompanies have set up software development groups in Ireland, and Citibankand Texas Instruments are examples of companies that have set up shops inIndia (in Bombay and Bangalore, respectively).andM;Stage 3 is the development of software products rather than softwareservices.andP;  This is likely to take place in application areas where thetechnology is relatively stable and mature.andP;  Remember, these not only includespreadsheets, but also dishwashers and VCRs.andM;Japan is definitely focusing on stage 3.andP;  Hitachi and Toshiba are goodexamples of companies building large, complex, expensive products thatcontain software-intensive embedded systems.andM;Stage 4 involves the export of products whose software encapsulates some formof unique national expertise.andP;  Singapore is currently building expert systemsto manage dock facilities and other aspects of deep-water ports.andP;  The countryhas the fourth largest deep-water port in the world, and its citizens haveacquired a great deal of expertise in port management over the years.andP;  If itcan capture that expertise in software, it can market that knowledge to portslike New York and Amsterdam.andM;Similarly, Brazil has developed great proficiency in banking systems: Acountry with inflation rates of 30% per month is forced to have one of themost efficient real-time banking systems in the world, for it simply cannotafford the phenomenon of &quot;float.&quot;andM;COMPETITION AROUND THE GLOBEandM;The most important thing for U.S.andP;  software professionals to do is to wake upand realize the competition they are facing.andP;  There are hundreds of thousandsof people around the world who are working harder and longer and better.andM;The U.S.andP;  must also shift its emphasis away from releasing mediocre systemsmore quickly, to an emphasis that develops higher-quality systems.andP;  Thiscannot be done by software professionals themselves.andM;As quality assurance guru Edward Deming (author of Out of the Crisis,published by the MIT Center for Advanced Engineering Study, Cambridge, 1986)points out, most workers are doing the best job they can and within theconstraints imposed upon them by management.andM;Higher quality is only possible if management recognizes the competitivethreat caused by offshore programming, and if it recognizes the need toinitiate, support and lead a movement toward total software quality.andM;Yourdon is the author of 16 software engineering books; his most recent,co-authored with Peter Coad, is Object Oriented Analysis (Prentice Hall).andP;  Heis alos the publisher of American Programmer, a journal which reports onsoftware technologies in and around the world.andO;</TEXT></DOC>