<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-486-604  </DOCNO><DOCID>07 486 604.andM;</DOCID><JOURNAL>Computer Language  August 1989 v6 n8 p103(11)* Full Text COPYRIGHT Miller Freeman Publications 1989.andM;</JOURNAL><TITLE>Object-oriented programming for C. (Software Review) (evaluation)</TITLE><AUTHOR>Dlugosz, John M.andM;</AUTHOR><SUMMARY>Three C language extensions that facilitate object-orientedprogramming in C are evaluated.andP;  CNS Inc's C_talk supports aSmalltalk-like class system and browser; includes simplepreprocessing, powerful message-passing, and straightforwardoutput facilities.andP;  But, the text editor is difficult to use,preprocessing errors are not caught, and the classes provided arenot very reusable.andP;  Complete Computer Corp's well-designedComplete C requires a text editor and either Microsoft C or TurboC and successfully translates object-oriented source code into C.andO;Complete C supports a Smalltalk-like class system, performssubstantial analysis of source code, and supports typelessvariables, messages to classes, and any type of arguments to amethod.andP;  Objective Systems C+O is a library of reusableobject-oriented code for Microsoft C, but it is not well thoughout and is difficult to use.andM;</SUMMARY><DESCRIPT>Company:   CNS Inc. (products)Complete Computer Corp. (products)Objective Systems (products).andO;Product:   C (talk (Program development software))Complete C (Program development software)C+O (Program development software).andO;Topic:     Software DesignEvaluationObject-Oriented ProgrammingAdd-In-On SoftwareC Programming LanguageSpecifications.andO;Feature:   illustrationprogramtable.andO;Caption:   Example of delimitation of a message-passing construct. (program)Generation of a C source file. (program)Object tools for C. (table)andM;</DESCRIPT><TEXT>Object-oriented programming for CandM;OBJECT TOOLS FOR CandM;C talk CNS Inc. 7090 Shady Oak Rd. Minneapolis, Minn.andP;  55344 (612) 944-0170andM;Complete C Complete Computer Corp. 111 W. 57th St., Ste.andP;  1400 New York, N.Y.andO;10019 (212) 582-2635andM;C+O Objective Systems 2443 Fillmore St., Ste.andP;  249 San Francisco, Calif.andO;94115 (415) 929-0964andM;C is an unlikely language for object-oriented programmers.andP;  Typelessvariables and dynamic binding--required for true object-orientedprogramming--are foreign to C.andP;  Yet C is a very flexible language in which,with a little ingenuity, typelessness can be represented.andP;  Likewise, it ispossible to simulate run-time binding of function calls.andP;  This occurs whenthe function to be called is determined at run time based on the types of itsarguments, which cannot be determined at compile time, thanks to typelessvariables.andM;Clever coding tricks and unorthodox use of language features can letprogrammers simulate objects in C.andP;  But true object-oriented programmingrequires extensions to the language.andP;  The most popular extensions are thoseprovided by C++, but many programmers find learning C++ a significantintellectual hurdle.andP;  This review focuses on three sets of extensions thatlet software developers adopt object-oriented programming techniques in C.andM;CNS Inc.andM;C TalkandM;C Talk makes C look like Smalltalk.andP;  It supports a class system based onSmalltalk's version.andP;  A preprocessor turns C talk's object-oriented sourcecode into ordinary C.andP;  And a make utility rebuilds a program after changesare made.andM;The browser runs in text mode and works like Smalltalk's hierarchy browser.andO;In the upper left corner is a list of classes.andP;  In the upper right is a listof methods.andP;  Below is an instance/class selector.andP;  The lower half of thescreen is a text editor that uses a mouse.andP;  The right button brings up a panemenu, and is used for the scrolling and other window gadgets; the left buttonis used for selecting.andM;CNS says the browser can be used without a mouse.andP;  The arrow keys move thecursor around, but there are problems.andP;  If you have a 101-key keyboard with aseparate cursor, you find the arrow keys move the cursor two rows or columnsat a time.andP;  This problem makes it impossible to point to the correct thinghalf the time.andP;  You have to turn off NumLock and use the number keys to movethe cursor properly.andP;  Pointing to the scroll-down arrow on the editor paneand pressing + to simulate the mouse button started the text scrolling, butit never stopped!andP;  The system goes into an infinite loop and must berebooted--so you can't really use C Talk without a mouse.andM;The browser makes understanding an application very easy.andP;  You click on aclass and method, and the code appears.andP;  You can quickly find and load theobjects you need.andP;  It is easy to see a program's overall organization andzoom in for a detailed look.andP;  The browser sure beats traditional sourceeditors in this respect.andM;If you want to add a new class, just select the parent and pick add subclassfrom the pane menu.andP;  After accepting a name for the new class, the editorwindow shows the class header all set up, and you can add code as needed.andO;Likewise, to add a method, you select add method from the pane menu, and theeditor clears to a blank screen ready for new code.andP;  The browser takes careof messy details like making sure class headers are defined properly andkeeping the lists of classes and method names updated.andM;The one problem with the browser is the text editor: it is too similar toSmalltalk's.andP;  Consequently, using the editor is nearly impossible.andP;  Thecursor keys don't work--you must position the cursor with the mouse and clickto start typing in the new place.andP;  All editor functions must be selected withthe mouse.andP;  Even for straight sections of new code the editor doesn'tautomatically indent each line.andP;  The editor will drive you bananas.andM;An interesting aside is that the editor does not expand tab characters.andP;  If afile contains a tab, it will appear as a little circle.andP;  The interesting partis that the README file and all the other disk-based documentation areformatted using tabs!andP;  You can't use the supplied editor to read CNS's ownfiles.andM;Once editing is completed, you can use the make utility to rebuild theprogram.andP;  It automatically runs the preprocessors, C compiler, and linker.andO;The browser allows you configure the make file and is very helpful.andM;The message-passing construct is delimited by @ signs.andP;  Take a look at thelisting of DUMMY.PRE (Listing 1).andP;  The information at the top of the filedefines class Dummy as a subclass of Object.andP;  The !-delimited bannersseparate the various parts of the program.andP;  All this was put in automaticallyby the browser when I created a new class.andP;  Lone !s are used by the browserto separate the file into individual methods.andM;The message expression, enclosed in @ signs, contains the receiver and themessage selector.andP;  If it takes parameters, the message selector separatesinto individual keywords with an argument following each word.andP;  A keywordfollowed by an argument always ends in an underscore.andP;  For instance, themessage @box add S@ is sent to box, the selector is add , and the parameteris s.andM;The typeless variable is implemented as type id in C.andP;  A variable of type idcan hold an instance of any class.andP;  In the example, box and s are bothvariables of type id.andP;  box is holding an ordered collection, and s is holdinga string.andM;The receiver of the message must always be a variable of type id.andP;  Thearguments will generally be id types as well, but not necessarily.andP;  Anythingcan be passed as an argument, as is sometimes required (for example, in thenew with message).andM;How else could you turn an ordinary C type into an instance of a class?andO;Generally this idea is not a good one because no type checking is involved.andO;When ids are passed you get run-time typing ability, but when plain C typesare passed you must make sure the proper type is passed.andP;  The followingexample shows message foo for two different classes expecting an int and achar *.andP;  If you sent the wrong variable to the wrong receiver, you would havea difficult time tracking down the error:andM;extern id Foo2; int x=5; char *s= &quot;Hello there!!&quot;; id anObject;andM;anObject=@Dummy new@; @anObject foo s@;andM;anObject=@Foo2 new@; @anObject foo x@;andM;This is not an implementation problem, but a paradigm limitation.andP;  Messagepassing is designed to work with typeless variables.andP;  C talk supports passingordinary variables because sometimes it is necessary to create an objectinitialized with a value, and you may do it sometimes for efficiency.andM;The preceding example shows how an object can be created with the new classmethod.andP;  Unlike Smalltalk, C talk has no garbage collection.andP;  This examplecreates garbage in memory when an Object is reused without the first valuebeing freed.andP;  In general, you must free objects when you are done with them.andM;In the sample C talk code you can see that messages can be sent to classes aswell as instances.andP;  In fact, the Dummy class example (Listing 1) clearlyshows that the class is actually a variable of type id just like any otherobject because full dual-inheritance is supported.andP;  Each object contains anisa field pointing to the class to which it belongs.andP;  The class is justanother object, containing information such as the size of the object, theall-important message table, and an isa field.andP;  The class is an instance of ametaclass, which has the same format as the class type and contains theclass's message table.andP;  Since a class is represented as an object, you canstore it in an id variable, send messages to it, and generally treat it justlike any other object.andP;  Classes contain class variables that are inheritedfrom the superclass and can be used by class methods, the same way !InstanceVariables! are inherited and used by instance methods.andM;Listing 1 shows how a message selector can be passed as a parameter.andP;  Puttingthe name in backquotes makes the preprocessor replace it with its number.andO;The example shows that this cannot be done in the message, but must be donein another statement.andM;Listing 1 also shows that methods are declared like functions and may havethe same name.andP;  The bodies of methods and functions are treated the same way,and may contain both C and message-passing statements.andM;The preprocessor takes the PRE file and a file containing a list of messagenames, generates a C source file.andP;  The DUMMY.C file (Listing 2) is whatemerges from the Dummy class source.andP;  You can see that the preprocessordefines the struct for the class by taking the &quot;instance variables&quot; section(and those it inherits from) and sandwiching it in a struct definition.andO;Method definitions are turned into function definitions, and the table ofmethods is built.andP;  Within the code, all the @-delimited message expressionsare turned into C function calls.andP;  The preprocessor does not know C, andanything else in your file comes through unchanged.andM;The nice thing about a simple preprocessor is that you can write C usingcompiler-specific constructs and the preprocessor will not complain.andP;  The badnews is that errors are not caught--for example, the preprocessor does notcheck to make sure that the !Instance Variables! section contains onlyvariable definitions and comments.andP;  Generally, any coding errors notinvolving message expressions will be caught by the C compiler.andP;  Thepreprocessor does not put in #line directives, which means that any errorswill be reported in terms of the generated code rather than the original.andM;The class model used is based on Smalltalk.andP;  The message-passing function issimple, elegant, and powerful.andP;  With the preprocessor, you can define classeseasily with a few lines and use a Smalltalk-like syntax to send messages.andO;Each object is only four bytes larger than an ordinary C struct with the sameinformation.andM;The C output is straightforward, easy to read and reconcile with the original.PRE file.andP;  In addition, the source code for the message-passing function andthe entire run-time system is provided.andP;  The simple message-passing functionuses a linear search and contains conditional compilation for a debug modethat notifies you about each message passed.andP;  An alternative version uses ahashing table.andM;C talk's class hierarchy is rather small (for example, it does not have aSortedCollection).andP;  But all the code for the classes is included, and you canuse this code as a basis for you own class system.andP;  You can even rewrite theroot Object code if you like.andM;I don't particularly like the classes the come with C talk.andP;  It appears thatprevious versions did not treat a message as a value-carrying expression butas a statement only.andP;  So any message that returned an object had to use apointer parameter.andP;  The class library shows this heritage, with @String new*ob with s@; preferred over ob= @String new s@.andP;  Of course, you can changeany of this.andP;  But the classes are more useful as coding examples than asreusable source code based classes.andM;The simplicity and openness of C talk make it interesting.andP;  If you likeSmalltalk, you might want to take a look at C talk.andP;  I like the concept, butI find it overpriced.andP;  CNS needs to work on the browser and provide a muchricher and cleaner class library (perhaps based on Smalltalk's, in keepingwith the package's theme).andM;CNS has recently released a version called C talk/Views which runs underMicrosoft Windows and is used to write Windows applications.andP;  The browser isdesigned using Windows standards, so it is somewhat different from the textversion.andP;  The class hierarchy is expanded, with classes for dealing withwindows, dialog boxes, and other aspects of Windows programming.andP;  Thisversion requires the Windows SDK v. 2.0 or greater.andP;  It seems to be astronger product than the plain C talk.andM;Complete Computer Corp.andM;Complete CandM;Complete C is a hybrid language that adds object-oriented features to C.andO;Like C talk, it uses a translator to turn object-oriented source files intoplan C.andP;  The translator is usually controlled by a driver program thatautomates rebuilding of the application.andP;  Also included is a streamlinerutility that adds functionality to the translator and a documentationgenerator that produces reports after reading your source code.andP;  Further, adebug-messenger can be linked into applications to provide interactivedebugging facilities.andM;To use Complete C, you need your own text editor and Microsoft C or Turbo C.andO;Source files come in two forms: a class file defines a class, and is dividedinto sections by keywords.andP;  You use keywords to name the class being defined,its superclass, instance variables, factory variables, methods, and so on.andP;  Asection at the end can contain ordinary (nonmethod) functions.andP;  The otherkind of file does not define a class; it contains functions that use messageexpressions and classes.andM;The driver is given the names of the various source files that make up theprogram.andP;  The source files do not have to be in the current directory:class-definition files and others can be referenced from standard places,such as/cc/classes/for the foundation classes, so you don't have duplicatecopies.andP;  The driver automatically searches for files that are not in thecurrent directory.andP;  The driver program only needs to be told once that asource file is part of the program: it remembers all the files in the programand automatically recompiles them when necessary.andP;  It knows about files thatare dependent on other files.andP;  You do not need any kind of include file orextern reference to use a class.andP;  The translator knows which classes are partof the program.andP;  Listing 3 shows an example of Complete C.andM;Complete C supports a class system similar to Smalltalk's.andP;  An object is aninstance of a class, and it type can be determined at run time.andP;  Complete Cuses the term &quot;factory object&quot; to refer to the class as an object.andP;  Everyclass has exactly one instance of a factory object, which contains variablesand methods just like any other object.andP;  Class methods are implemented asfactory methods.andM;Method expressions are delimited with brackets.andP;  Method expressions are muchlike Smalltalk's: the receiver comes first, followed by arguments separatedby keywords.andP;  A keyword that takes an argument has a trailing colon, so themessage [box add: s] is sent to box, the selector is add:, and the parameteris s.andM;Complete C also allows variable parameter lists.andP;  The last keyword can befollowed by two colons, indicating that a list of parameters follows.andO;Unfortunately, the manual does not explain how the method can access theseparameters.andM;The typeless variable is implemented as type id in C.andP;  While Complete Callows full typeless variables, it also allows variables of a class type.andO;While a variable of type Colletion can only hold an instance of classCollection, an id variable can hold a Collection or anything else.andP;  You alsohave the modifiers factory to define a variable that can hold a factoryobject and treeof to declare variables that can hold the named class oranything derived from it.andP;  Providing strong types allows the compiler to dotype checking and optimize programs.andM;The arguments to a method can be of any type.andP;  If it is an object type, themethod can check the parameter at run time to verify that it is of thecorrect type.andP;  If I define a method to take a String as a parameter, I wouldwant the option to have the compiler automatically insert a test to make suresomething of type string was in fact passed.andP;  For ordinary C types, themethod cannot check the type, and you must be careful to pass what the methodis expecting.andP;  Consider the following fragment:andM;int x=5; char *s= &quot;Hello therell&quot;; id anObject;andM;anObject= [Class1 new]; [anObject foo: s];andM;anObject= [Class2 new]; [anObject foo: x];andM;If you reverse the parameters, passing an int where a char* should have goneand vice versa, you get no indication of an error.andP;  The error isn't detectedeven when it could have been at compile time.andP;  Generally, parameters aren'tchecked for correct type and you need to be careful passing them.andP;  Thisproblem is an inherent one with the object paradigm.andP;  But Complete C's designis such that this problem can be overcome and will be addressed in a futureversion.andM;Messages can be sent to classes as well as instances.andP;  Class methods arecalled factory methods in Complete C.andP;  Dual-inheritance is supported, withinstances inheriting from their parent class's variables and methods andfactory objects inheriting from the parent's factory.andM;Aside from class variables and instance variables, Complete C adds a thirdkind of variable.andP;  Instance variables are unique to an instance, factoryvariables are common to all instances of a class, and static variables arecommon to all instances of a class and its derived classes.andM;Listing 3 shows that a message selector can be passed as a parameter.andP;  The @operator is analogous to taking the address of a function.andP;  The translator isnot a simple preprocessor but a C-producing compiler.andP;  Most syntax errors arecaught by the translator, which also puts in #line directives so anythingreported by the C compiler is in your context.andM;The translator does quite a bit of work in analyzing source code.andP;  Messageexpressions are value-carrying expressions and may be nested.andP;  Instance andclass variables can be referred to by name without a self-andgt; prefix.andP;  Allclass-name references are automatically detected without the need fordeclaring them first.andP;  Most impressive is that the message expression can bereplaced by the actual function call in cases where it can determine thefunction at compile time.andP;  Complete C even supports in-line methods.andM;You can see in Listing 4 that the new messages were replaced by functioncalls, bypassing the messenger competely.andP;  Generally, the amount of work themessenger needs to do is reduced by any information known at compile time.andO;Complete C produces programs that are quite efficient and not as slow andloose as other typeless languages.andP;  Because it supports strong typing, youcan use typeless id variables when necessary and more specific types whenpossible.andP;  Consequently, the compiler can catch errors in misuse and generatestatic function calls.andP;  This feature brings Complete C into the domain of thereal world and production programming.andM;You can write generic classes for container objects and such, and use thetypeless paradigm where needed.andP;  The translator and the streamliner willanalyze the program and use static binding wherever possible, as well asremove all unreachable code such as uncalled methods.andM;When dynamic binding is used, the messenger is quite fast.andP;  Complete Computerhas developed proprietary algorithms that allow dynamic binding nearly asfast as static binding.andP;  Complete C has overcome the objections of dynamicbinding: it is definitely useful for production-quality work.andM;The class hierarchy found in the included foundation classes is large anduseful.andP;  The source code takes up about 357K, with many kinds of collections,including SortedCollection.andP;  A Magnitude class serves as the parent ofclasses that support relational operations.andP;  The String class is extensive.andO;Many useful methods allow you to get and set the current working directory,scan a disk, create subdirectories, get and set the system time, and more.andO;This selection supposed to be even better in the new version, which should beout by the time you read this.andM;The package is not perfect.andP;  I found one bug in the library: [[Date today]print Yourself] told me the date was the third when it was the 13th.andP;  Syntaxerrors can cause run-time errors in the translator instead of being properlyreported.andP;  Accidentally misusing the the driver by giving it bad argumentscan cause bizarre behavior.andP;  One thing I don't like is that the translatorgives warning messages when processing the classes that came with it.andM;Another issue is memory managements.andP;  The manual contains examples like[[String new.&quot;andP;  hello!] print Yourself]; but does not mention anything aboutgarbage collection or the lack of it.andP;  In this example, what happens to theString object after this statement?andP;  Does it hang around in memory forever orget deallocated properly?andP;  The instructions aren't clear on this point.andM;But the problems are minor compared to the total value of the product.andO;Complete C is a well-designed language that succeeds in merging the typelessparadigm with the efficiency of C.andM;Objective SystemsandM;C + OandM;C + O stands for &quot;classes and objects.&quot;andP;  It is a collection of reusable codefor programmers working in Microsoft C, and is shipped as a .LIB file.andO;Several .LIBs are supplied for the different memory models and with orwithout extra debugging code.andP;  Source code is available at additional cost.andM;The library contains code for data structures such as lists, trees, graphs,and dynamic arrays.andP;  It also has code for dealing with Julian dates, memorymanagement, and strings.andM;What differentiates C + O from other source-code libraries is that it isbuilt along an object-oriented design.andP;  C + O is based on a programmingphilosophy that tries to make C look like C++.andP;  the ideas are similar toC++'s classes but not as well thought out and much more difficult to use.andM;First C+O tells us that a class is a C structure containing data for aninstance and a collection of functions for dealing with that data.andP;  All useof the class must go through the functions and you may not directly refer tothe fields in the struct.andP;  Most functions take a pointer to the struct as afirst parameter, and begin with a leading underscore.andP;  (ANSI reserves allnames beginning with a leading underscore.andP;  Names in your program should notdo this).andM;Further, every class has a three-letter mnemonic and uses typedefs and#defines (sometimes +defines are used improperly, as in #define PBIN structBinary Tree*) to create a bunch of names relating to the class.andP;  Allfunctions begin with the three-letter mnemonic of their class.andM;The idea of encapsulation is particularly well-suited to a reusable codelibrary.andP;  C+O takes the ideas farther.andP;  Imagine a container class such asBinaryTree, which C+O calls bin.andP;  The tree class contains a pair of pointersand functions for manipulating the tree.andP;  How do you use this tree when youwant your own data in each node, along with the two pointers?andM;You can derive a class Node from BinaryTree that adds your data (andfunctions for manipulating it) and inherits its basis behavior from theBinaryTree class.andP;  Unfortunately, C does not support anything like thatdirectly.andP;  What you do is define a struct for the Node and include a field oftype BinaryTree.andP;  To inherit from the parent class, you have to write anumber of little functions that take a Node pointer as a parameter and callthe corresponding function for BinaryTree, passing the address of the field toit.andM;What makes this interesting and useful is that the BinaryTree functions canrefer to a Node, even though Node did not exist when the BinaryTree class wascompiled (similar to C++'s virtual functions).andP;  Say a BinaryTree function todestroy a node existed.andP;  Normally, it would just free up the memory taken upby a BinaryTree struct.andP;  But now the BinaryTree struct is embedded in alarger struct.andP;  It must free the entire struct it is a part of, and do anyhousekeeping required by Node (perhaps some of the data fields are stringsthat must be freed).andM;Understanding how this process works requires a little background.andP;  Eachnon-primitive clas contains a field of type object as its very first field.andO;This field is a pointer to a collection of information about the class,including its size and a message table.andM;The ObjSendMessage() function can examine the table via the object pointerand call the correct function.andP;  All objects are allocated from memory withthe same function, which knows the size of the object and prevents theprogrammer from making a mistake with malloc().andP;  This creation function fillsin the object pointer.andM;The bad news is the tables for the class must be defined by the programmer.andO;The message call, inheritance, and all required definitions are ratherconvoluted.andP;  This programming philosophy cries out for a preprocessor toshift all the busy work off the programmer and onto an automatic program.andM;John M. Dlugosz is a programmer, writer, and consultant from Plano, Texas.andO;</TEXT></DOC>