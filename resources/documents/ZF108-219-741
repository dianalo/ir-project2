<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-219-741  </DOCNO><DOCID>08 219 741.andM;</DOCID><JOURNAL>The Seybold Report on Publishing Systems  Dec 18 1989 v19 n7 p7(7)* Full Text COPYRIGHT Seybold Publications Inc. 1989.andM;</JOURNAL><TITLE>A capsule view of the architecture. (Office Document Architecture)(technical)andM;</TITLE><DESCRIPT>Topic:     Document Management SystemsStandardsText CommunicationInformation Resources ManagementAutomationDesktop PublishingTechnologyPublishing IndustryElectronic Publishing.andO;Feature:   illustrationchart.andO;Caption:   Expanded document processing model. (chart)Layout structure model. (chart)Generic logical structure. (chart)andM;</DESCRIPT><TEXT>A Capsule View of the Architecture The ODA standard comprises seven parts(see box).andP;  In this section, we try to extract the salient points to eachpart and present them in much simpler from than the standard to make themeasier to digest.andM;Part I: Overview of the ArchitectureandM;In ODA, a document is &quot;an amount of structured information that can beinterchanged as a unit.&quot;andP;  The overall document architecture is the collectionof rules for defining the structure and representation of documents.andM;The ODA document architecture comprises a structural model and a descriptiverepresentation.andP;  The structural model offers two views: a logical structureand a layout structure.andP;  For each, the standard describes the semantics ofthe structure--types of elements and their relationships.andP;  The descriptiverepresentation is the set of specifications for describing the objects, orelements, themselves, including their properties, or attributes.andP;  Thedescriptive representation is the syntax for describing how the elements andtheir properties are represented, or encoded, in a data stream.andM;Three forms of exchange.andP;  The structures of the document, which are describedbelow, are represented at the time of interchange in one of three forms:andM;* Formatted.andP;  First, there is formatted form, which is the interchange of theimage of a finished document.andP;  It allows the final (not to be edited) form ofthe document to be presented (for example, displayed or printed) by anothersystem.andP;  It is analogous to sending a PostScript file to another system thatdisplays or prints PostScript.andP;  A PostScript file is an image that isinterpreted for a raster device; a formatted ODA document is imaged by thesoftware application, using whatever page description language, display orprinter drivers that are resident in the application.andM;* Processable.andP;  Second, there is processable form, in which documents may beboth edited and formatted.andP;  It is the form for the exchange of revisabledocuments without including instructions for presentation.andM;* Formatted, processable.andP;  Third, there is formatted, processable form, whichallows documents to be presented as well as edited and formatted.andP;  This thirdtype of interchange would be quite useful, since in many typical officeapplications the user will format a document as it is created.andP;  Through theuse of this form, the recipient may image the document as it was formatted bythe author or edit it, making use of the logical structure.andP;  If it is editedby the recipient, then the original formatted version would no longer apply,and the recipient would have to reformat it for imaging.andP;  To format an ODAdocument requires an ODA-compliant editor or a translation from the ODAformat into your publishing system.andP;  Unfortunately, because of thearchitecture of ODA, it will be impossible for most publishing systems to bemodified to conform to the ODA model for layout and formatting.andP;  And, becausecurrent publishing systems support more structures than ODA, exporting acomposed file from a publishing system into ODA-formatted form may result insome of the formatting information being lost.andM;Components of the architectureandM;In its structural model, ODA takes a hierarchical approach.andP;  (We haveconsciously avoided terming it an object-oriented approach, because thelayout view does not conform to object orientation in the way that term isused in the computer industry.andP;  See sidebar on page 6.)andP;  At the top of thestructure, objects are grouped into types.andP;  ODA provides several types forboth logical and layout views.andM;For each type, there are constituents, and for each constituent, there areattributes, or properties, that have defined or default values.andM;The details of what is allowed, what is required, what is optional and howeach is handled are discussed in the 289-page second section of the standard,Document Structures.andP;  Without elaborating in excruciating detail, we willsimply say that ODA defines what is permissible at each of those levels.andP;  Itdoes not define what objects are used in a given type of document, but itdoes specify what objects and properties are allowed.andM;Specific information about what is contained in a given document is outlinedin a document profile.andP;  The document's profile provides information about thedocument as a whole, giving the recipient's system some notion of what toexpect in the document that follows.andP;  The profile sets forth the object typesand content elements that will be used in the accompanying document.andP;  Theprofile of a document may be sent separately from the document itself, so,for example, the recipient can determine if his system can process thedocument before it is actually transmitted.andM;Then there are the interchange formats, which set forth the coding fortransferring documents from one system to another.andM;Finally, there are content architectures: the specification of the dataformats for text, graphics and images.andM;This is the overall framework for ODA.andP;  The remaining parts of the standardgo into more detail on specific issues.andM;Part 2: Document StructuresandM;The second part of the standard answers the question, &quot;How does ODA see anddescribe a document?&quot;andP;  It is this section that lays forth the basicfoundation of ODA: what can be in a document and how it is described.andM;In addition to describing the document's content (the actual text, graphicsand images), ODA specifies that the document adhere to certain conventionsregarding its structure and layout.andP;  It is these aspects that enable thestandard to work as an architecture for interchanging compound documents, asopposed to just transferring a formatted document (like sending a PostScriptfile) or groups of pictures or text without regard for logical structure ortheir placement on a page.andP;  These concepts are also the key sticking pointsin defining the standard, because some systems (like most word processors)have no notion of the document's structure; some understand the document'sphysical layout but not its underlying logic (PageMaker, Quark Xpress, RSG,commercial composition systems); while others (such as Ventura or Interleaf)have their own method of defining both logical and physical layout.andP;  Thedifferences between what an application does and what ODA supports are pointsto be reconciled by an ODA filter that is run when importing or exporting anODA document in and out of a software application.andM;What a document must have.andP;  There are three central concepts to the ODAdocument:andM;* Existence of layout, or physical appearance, and logical, or abstractoutline, views of a document.andP;  These are complementary views of a documentthat provide two means of interchange.andP;  The layout view is useful forexchange of information regarding a document's appearance; the logical viewis useful for exchanging content that may be revised (see Figure 2).andP;  Inprinciple, the two are independent of each other, but the standard allows forlayout to be specified as part of the logical structure, as when a stylesheet is applied to a structured document.andP;  It is thus possible to send arevisable document with only its logical structure and layout style, withoutsending it in formatted form.andM;There need not be a one-to-one correspondence between layout and logicalviews.andM;* Existence of specific and generic structure.andP;  The generic structures aretemplates that may be used in a given document.andP;  In the logical view, thespecific structure is the actual content; the generic structure provides theoverall framework for the document.andP;  In the layout view, the specific layoutstructure makes it possible to define elements that do not conform to thegeneric structure, or layout template.andM;* Use of profiles.andP;  To facilitate exchange, ODA provides a means to describea document profile and supports document application profiles.andP;  These aresent ahead of the file itself to give the receiving system some notion ofwhat to expect.andP;  The document's profile contains overall information aboutwhat type of structures are used within this particular document.andP;  Documentapplication profiles (DAPs), which are not part of the standard, describegenerically an entire set of documents.andP;  When a document conforms to the DAP,it may be sufficient to send the DAP without the document's profile, becausepresumably the document will contain only structures that have been definedby the DAP.andP;  The profiles are discussed in Part 4 of the standard.andM;The structural modelandM;Logical structure.andP;  Like SGML, ODA makes it possible to describe a documentin terms of a logical outline or hierarchical model that shows how thecontent is organized.andP;  The overall document is made up of &quot;objects,&quot; whichare simply its logical divisions (chapters, sections, paragraphs, forexample) connected in a tree-like structure (see Figures 6 andamp; 7).andM;The logical structure is useful in exchanging revisable documents, becausethe recipient is able to preserve not only the content but also the frameworkof the original document.andP;  Such a view is inherent in SGML editors, such asSoftQuad's Author/Editor.andP;  Datalogics's WriterStation, IBM's TextWrite andYard's Mark-It.andM;But ODA goes one step farther than a text-based, generic SGML editor byoffering a complementary view of the same content.andP;  The layout structureassociates content with presentation elements, such as areas of a page.andP;  Inessence, the two structures are complementary was of looking at the hierarchyof objects that are the document's contents.andM;Generic vs.andP;  specific structure.andP;  Groups of objects may be gathered into atemplate of the document's layout or logical structure.andP;  These are defined inODA as generic structures.andM;The structure that is particular to a document is considered its specificstructure.andP;  An example would be a specific document that used a genericstructure a sits template but had its own peculiarities.andP;  Examples of genericand specific logical and layout structures are shown on pages 10-11.andM;Object classes.andP;  In ODA, objects may be grouped into classes within thegeneric structure.andP;  Classes may be visualized as sets of objects that share aset of attributes.andM;Their use in profiles is meant to reduce the amount of overhead associatedwith the file: if objects inherit attributes from their class, then theirattributes need not be spelled out in the document.andM;ODA does not define object classes.andP;  Class definitions are created by adocument application profile for a group of documents or by a singledocument's profile for just that document.andP;  ODA simply provides a mechanismfor defining whatever classes are chosen by the person(s) defining theprofile.andP;  At present, several organizations are involved in developingdocument application profiles, including the U.S.andP;  National Institute forStandards and Technology (NIST), the European Strategic Programme forResearch (ESPRIT) and the CCITT.andP;  More detail on these is provided in Part 4of the standard, discussed below.andM;Logical and layout specifics.andP;  ODA allows three types of logical objects:basic, composite and root.andP;  Basic objects have no subordinates; compositeshave subordinates; and the root is the top level.andP;  (It is always acomposite.)andP;  Every object is of a specific type (from those defined by thestandard), which determines its attributes and its relationship within thestructure.andP;  In the logical structure, every object also has content.andM;The counterpart to the logical view is the layout structure: the descriptionof the physical layout, also in terms of a hierarchical structure of objects.andO;ODA defines four layout objects, which are the places in which a document'sparts reside.andP;  There are sets of pages, individual pages, frames and blocks.andO;(The root object is the document as a whole.)andM;A generic layout structure might be a simple page with one layout block fortext and frames at the top and bottom for running heads and feete (see Figure4).andP;  It provides sufficient information for the transfer of revisable text.andO;The specific layout structure would describe individual pages, which mighthave alterations on the basic template, such as frames for illustrations.andO;The specific layout structure provides enough information for formatting andimaging the document (see Fig.andP;  5).andM;Descriptive representation of documentsandM;The structural model is the backdrop for the actual description of thedocument's structure and properties that accompanies its content as part ofthe file that is exchanged (see Figure 8).andP;  Using the structural model, thedescriptive representation describes groups, or classes, of structuralelements that have things in common.andP;  The types of classes that users orvendors may construct are defined in the standard.andP;  With common terms fordescribing the basic elements of the structure and content, ODA provides ameans of exchanging revisable documents among otherwise incompatible systems.andO;The use of common class descriptions is also intended to maintain consistencywithin a document when it is modified.andM;ODA's descriptive representation defines eight constituents of a document:document profile; logical object class; layout object class; logical objectdescription; layout object description; content portion description;presentation style; layout style; each of these constituents is characterizedby its attributes, or properties.andM;Attributes.andP;  The document and its constituents have attributes associatedwith them.andP;  For all objects covered in Part 2 of the standard, the propertiesare called &quot;document architecture attributes.&quot;andP;  There are five types:andM;* Document profile (described in the next section)andM;* Component description, which is categorized as shared, layout or logical.andO;One object may have all three subattributes.andM;* Layout styleandM;* Presentation styleandM;* Content portion (the actual content)andM;The attributes and their values change according to the type of object.andP;  Forexample, attributes of layout objects refer to an object's physical position;attributes of logical objects refer to their relationship to other contentobjects.andP;  All attributes may be mandatory, defaultable or nonmandatory.andM;Attributes of structures defined in Parts 4, 5, 6, 7 and 8 of the standard(document profiles and the specific content formats) are defined separatelyfrom those that make up the document's structure, but they operate in asimilar fashion.andM;Layout Styles.andP;  Some attributes regarding the formatting of content may besent as layout styles, much like a style sheet.andP;  The layout styles do notdescribe the actual formatting; they are used as input to the formattingprocess (see Figure 2).andP;  Layout attributes include such things as x/yposition, dimensions, border, path, imaging order, transparency and color.andO;In addition, there are layout directives, such as block alignment,concatenation, fill order, indivisibility (across pages for example) andsynchronization (aligning last lines of columns).andP;  Layout directives guidethe formatter in implementing the styles.andM;The layout styles in ODA are comparable to those used by advanced wordprocessors (WordPerfect 5.0 or Microsoft Word) or desktop publishing programs(PageMaker).andP;  A key limitation of the layout styles is that rankedpreferential parameters are not specified.andP;  In sophisticated publishingprograms, the pagination process is controlled but user-definable try-tables.andO;Through a try table, a user may paginate a document in a variety of wayswithout touching the content.andP;  For example, a chapter that is heavilyillustrated might have less strict rules for placing floating illustrationsin order to achieve better page breaks.andP;  Such a mechanism is not provided forin ODA.andM;Presentation styles.andP;  Part of describing a document that is formatted istelling how it is presented for a specific presentation medium, whether it bepaper, screen display, 35mm slide or something else.andM;The presentation of an ODA document is represented through its own set ofattributes, which describe the presentation of each content element.andP;  Theseattributes change depending on whether the content is text, graphical objector image.andM;In its current form, ODA is rather limited in the types of presentations itsupports.andP;  For example, in text, it makes no provisions for different typesof hyphenation; sizes, leading or indents in noninteger values; rotationsother than in 90-degree increments; different rule weights; and manualkerning.andP;  There are no presentation attributes at all for vector graphics,beyond basic layout attributes such as its position and dimensions.andP;  Thatleaves out such basic information as line width, shape of line endings, typesof line joins and fill patterns.andP;  Raster graphic presentation attributes arelimited to the pel path, spacing, line progression and density of the pels,omitting such things as compression scheme.andM;Part 4: Document and ApplicationandM;ProfilesandM;The ODA standard is very broad, often providing several ways of describingthe same information.andP;  For example, there are eight ways to describe aparagraph indent.andP;  To help ensure that different systems will be able tointerchange documents with a high degree of fidelity, ODA provides two typesof profiles.andP;  The document profile, the form of which is specified in thestandard, lays out the conventions that will be used in the document thataccompanies it.andP;  Document application profiles, which ae not in the standarditself but are blessed by ISO, lay the ground rules for different types ofdocuments created by ODA-compliant programs.andM;Document profilesandM;The document profile is sent as a header at the start of the data stream.andO;The first part identifies the title, author and date the document wascreated.andP;  The second part identifies the set of attributes applied to thedocument as a whole.andP;  In other words, it lists the features that are used inthe document so that the recipient system can easily determine whichcapabilities are required for editing or presenting the document.andP;  Thedocument profile is independent of the document itself and may beinterchanged alone, so that if the receiving system is not able to processthe profile, the user need not bother sending the attached document.andM;Specifically, the document profile states the form of the document(formatted, processable or formatted processable), a list of the contentarchitectures used and a list of the fonts, character sets and characterattributes used within the entire document.andM;In basic documents that follow both the generic layout and logicalstructures, it may be sufficient to specify the document profile and assumethat all subsequent objects inherit their properties from the attributesdescribed in the profile.andM;Document application profilesandM;Specific document profiles are useful when a document does not conform to apublic application.andP;  By reading the incoming document's profile, a receivingsystem can tell if it could handle the structures present in the document.andO;To do so for any document requires implementing the full feature set of ODA.andO;In order to read a document profile, the ODA editor or translator must beable to handle the full feature set; otherwise the sending system might makeuse of structures that aren't supported on the receiving system's filter.andO;But there ae many applications that could make use of ODA without using thefull feature set.andP;  This is one reason why ISO is encouraging the developmentof document application profiles, which specify the subset of features usedin a given class of similar documents.andP;  By conforming to the DAP, an ODAfilter or editor can exchange documents with other systems that use the sameDAP--much as some SGML products only support specific SGML DTDs.andM;Another reason for developing DAPs is that they establish a common profilethat makes a document-specific profile unnecessary, if the document conformsto the DAP.andP;  Even among systems that can handle the full ODA feature set, theuse of a DAP can save processing time: if the DAP is known to the receivingsystem then it need not parse the profile of that document before importingit.andM;There are several levels of public DAPs currently under development:andM;* Level 1.andP;  A DAP for exchanging plain text.andM;* Level 2.andP;  This DAP adds character attributes, fonts and fixed illustrationsbut does not include such things as floating illustrations.andP;  One Level 2 DAPwas developed by the Piloting ODA (PODA) group, which is funded by theEuropean Strategic Program for Research and development in InformationTechnology (ESPRIT), a consortium of firms from private industry, governmentand academia.andM;* Level 3.andP;  The highest-level DAP at this time makes use of most of the ODAfeatures.andP;  It is intended for desktop publishing or technical publishing.andO;One is being developed by the National Institute for Standards and Technology(NIST); others are being developed in Europe, the UK and Japan.andP;  Aninternational standards group, Pagoda, is responsible for making sure thatthe different DAPs developed in different countries are harmonized on aninternational basis.andM;ODA application profiles vs.andP;  SGML DTDs.andP;  It may seem that the DAP parallelsan SGML DTD, but it differs in several respects.andP;  In SGML, the syntax isspecified in the language itself, but not the semantics (what the contentelements are and what they mean); the DTD (the application) specifies thestructure and the allowable content elements of the class of documents beingdescribed.andP;  In ODA, the semantics are part of the standard itself.andP;  The DAPdefines which structures and properties, drawn from the master set providedby the ODA standard, are used in a particular application.andP;  The DAP alsospecifies which interchange format (ODIF or ODL) is being used to describethe document.andM;This difference points out a critical difference between the two standards.andO;In SGML, any application can make use of any object the user wants to(whether it be a type of text object, musical note, graphical object or videosequence).andP;  In ODA, users (and applications) are limited to the constructsthe ODA committee included in the specification.andP;  To add extensions to ODA inorder to support alternative forms of content is possible by defining them as&quot;private constructs,&quot; but there is no predefined syntax for doing so.andP;  Thus,private constructs may not be interpreted by all ODA editors, unlike SGMLparsers, which can read any DTD.andM;Part 5: ODIF and ODLandM;Part five of the standard defines the format of the data stream used tointerchange documents that conform to ODA and the representation ofconstituents that may appear in such documents.andP;  As we mentioned at theoutset, if you use ODA, then you can transfer three types of documents:processable, revisable and processable revisable.andP;  The interchange formatworks with all three types.andM;ODA provides two formats for interchange.andP;  They may be briefly summarized as:andM;* Office Document Interchange Format (ODIF), which is a binary encoding ofthe document written that conforms to that of other computer standards.andP;  ODIFis a machine-read-able format disgned for use in OSI networks.andM;* Office Document Language (ODL), which is an application of SGML that usesSDIF, the binary-encoded interchange format of SGML.andP;  Essentially, thisformat consists of marked-up text files that could be read by humans as wellas machines.andM;Originally, there was only one interchange format, ODIF, which is why in thestandard the title for this part reads simply ODIF.andP;  Later, a second fromat,ODL, was added.andM;The standard says that ODIF and ODL are &quot;technically equivalent; a documentcan be transformed from one to the other without loss of information aboutthe document constituents and attributes.&quot;andP;  Most ODA supporters claim thatthe only reason for using ODL is for transferring a human-readable file,which may explain why ODL is downplayed in the standard (it is not mentionedin the part title and its description is covered in an appendix rather thanin the main text) and is not receiving muct support in the ODA community.andP;  Wevelieve that there are at least two other differences that may make ODL moreuseful to publishers.andP;  We discuss these differences in the ODL section.andM;Office Document interchange FormatandM;ODIF is a binary representation of the document that conforms to ISO 8824(1987), Information Processing--Open Systems Interconnection(OSI)--Specification of Abstract Syntax Notation One (ASN.1).andP;  This is thepreferred data format for exchanging files on OSI networks.andP;  (The electronicmail standard, X.400, uses ASN.1, for example.)andP;  ODIF is part of ODA becausethe CCITT group uses ASN.1 for transmitting information, and it wanted aconsisten implementation within ODA.andM;Within a data stream, the information is ordered according to the rules ofthe standard.andP;  There are two sets of rules for ODIF:andM;* Interchange format class A.andP;  This set of rules is used to exchage any typeof ODA document: formatted, processable or formatted processable.andM;* Interchange format class B.andP;  This set does not support the generic orspecific logical structures and is therefore only used to exchange formatteddocuments for presentation (but not editing) on another system.andP;  This formatis equivalent to sending a file in a page description language.andM;Even though all documents created by an ODA editor will, by definition, becompatible with ODA, that doesn't necessarily mean those documents will beread by all other ODA editors.andP;  Whether they can would depend on theimplementation, just as with SGML editors that handle only specific DTDs.andP;  AnODa editor written to support only specific DAPs, for example, would notfully support all possible ODA decuments.andM;Office Document Language (ODL)andM;The counterpart to ODIF is ODL, which is an SGML application for describingODa documents in human-readable form.andP;  Through the use of the StandardDocument Interchange Format (SDIF), ODL files may be sent as binary-encodeddata.andM;ODL may be technically equivalent to ODIF, but there are several significantdifferences.andM;First, in ODIF a document must be sent as one complete file; in ODL it may bebroken into several files.andP;  In publishing, where it is increasingly common tobreak a document into separate parts, there is a definit need to be able tosend multiple files for one document.andP;  The issue is not just that thedocument may be long (files can always be concatenated together fortransmission); there may be good reason for keeping the files separate.andO;Different writers may want to work on different pieces at the same time.andP;  Thecompostion system might include graphics by references to external files inorder to preserve differenc access rights.andP;  (It is not unusual to placerestricted privileges on illustrations, for example.)andP;  In ODA, the only wayto support such things is through ODL.andM;Another difference, related to the first, is that ODIF provides no means ofretaining the entiry structure of a document.andP;  If, for example, you wanted tomake use of features not defined in the ODA standard, in ODIF you would makeup your own syntax for doing so.andP;  In ODL, you would use SGML syntax, whichcould be interpreted by any true SGML parser.andP;  To use the multiple-fileexample above, in ODL, you could define the structure of the entitiesexternal to the document (how many files and where they physically reside),and make changes to that structure, and still pass it along to anothersystem.andP;  ODIF does not allow external entities; hence there is no provisionfor passing along a structure for them--all entities related to a documentare transmitted as part of the itself.andM;As we mentioned above, the other advantage of ODL over ODIF is that it isclear-text (ASCII), which means it may be read by humans as well as bymachines.andP;  The difference is useful if you want to examine files that can'tbe processed by your system.andM;ODL may prove more convenient for those in the publishing industry whoalready make use of SGML, because it means dealing with only one syntax.andO;Because ODL conforms to SGML, an SGML parser should easily handleODL-prepared documents, once a DTD for the type of document is established.andO;Some people who have worked with ODA claim that SGML applications will not beable to make use of ODA structures, even if the file is sent in ODL.andO;Although to our knowledge no DTDs for ODA applications have been made public,we see no reason why one couldn't be developed.andP;  (The logical structure inODA follows the conventions of an SGML, DTD.)andP;  Unitl ODA applications andproducts become available, it may be difficult to test this assertion.andP;  Weinvite readers who have opinions on this subject to write us regarding theirexperiences.andM;&quot;Fully integrated architecture.&quot;andP;  Proponents of ODA point out that because itis an architecture that extends to the binary level, ODA is not just aninterchange format, it is a development environment.andM;New compound document processors can be developed that use ODIR or ODL astheir native file format, thereby eliminating the need for translationaltogether.andP;  At the time that ODA was being developed, this concept mighthave been useful in the computing world, where every developed wrote his owninternal format.andP;  Today, the trend in new text processing applications is tobuild the translation step into the program in such a way that the userdoesn't see it at all.andP;  When the user goes to open a new document, a list offormats to look for is presented by the system.andP;  Depending on the type offormat selected, the system will display the available files and then invokethe appropriate filters as the document is opened.andP;  A reverse translationtakes palce when the document is exported.andP;  Translation becomes part of theprocess of opening and closing a document; the user is shielded from aseparate filtering step.andM;Developers who write a new editor from scratch can use ODIF or ODL as theirstarting point.andP;  Bit in ODIF, you have no guarantee that your program will becompatible with future ODA applications, because the syntax for suchapplications is not yet developed.andP;  At least in SGMK, if you take the time todevelop (or acquire) a parser, you know it will work with any SGML-conformingapplication, including ones that use ODL.andM;Parts 6, 7 and 8:andM;Contents ArchitecturesandM;Parts 6, 7 and 8 of the standard detail the specific architecture and formatsof the content of the document.andP;  The formats for storing the actual contentare fairly straightforward, because it makes use of existing standards:andM;* Text conforms to ISO character sets and attibutes and the ISO fontstandard;andM;* Vector graphics are represented by CGM; andandM;* Raster graphics are represented by CCITT Group IV.andM;These standards were briefly summarized in our overview of CALS-relatedstandards a year ago (see Vol.andP;  18, No.andP;  2).andO;</TEXT></DOC>