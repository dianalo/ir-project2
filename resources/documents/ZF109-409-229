<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-409-229  </DOCNO><DOCID>09 409 229.andM;</DOCID><JOURNAL>Hewlett-Packard Journal  August 1990 v41 n4 p31(9)* Full Text COPYRIGHT Hewlett Packard 1990.andM;</JOURNAL><TITLE>HP MAP 3.0 Manufacturing Message Specification/800.andO;(Hewlett-Packard's Manufacturing Automation Protocol 3.0implementation)</TITLE><AUTHOR>Lagoni, Peter A.; Crall, Christopher; Bartz, Thomas.andM;</AUTHOR><SUMMARY>HP's Manufacturing Automation Protocol (MAP) 3.0 implements theManufacturing Message Specification (MMS) developed by the MAPTask Force and adopted by the Electronic Industries Associationand ISO as HP MAP 3.0 MMS/800.andP;  MMS addresses the content ofmessages sent over a network but does not address the applicationprogram interface provided by an implementation of MMS to be usedby an application developer.andP;  HP's MMS/800 is the first MMSproduct supporting the definition for the MMS interface in the MAP3.0 specification.andP;  MMS is an application layer (layer 7) protocolwithin the OSI networking reference model and as such providestools and programmatic access to facilitate applicationdevelopment.andP;  Among the MMS services described are contextmanagement, virtual manufacturing device (VMD) support, domainmanagement, operator communication, variable access and eventmanagement.andM;</SUMMARY><DESCRIPT>Company:   Hewlett-Packard Co. (products).andO;Ticker:    HWP.andO;Product:   HP MAP MMS/800 (Communications software) (design andconstruction).andO;Topic:     SpecificationsManufacturing Automation Protocol (Computer Network Protocol)Message SwitchingComputer-Integrated ManufacturingSoftware DesignOSI StandardApplication Layer Control.andO;Feature:   illustrationchart.andO;Caption:   The manufacturing floor from the networking point of view. (chart)The HP MMS/800 implementation of the HP MAP 3.0 two-process model.andO;(chart)Data structure for context management. (chart)andM;</DESCRIPT><TEXT>The first release of HPs implementation of the MMS standard offers powerfulcommunication tools for monitoring and controlling robots, PLCS, and otherfactory floor devices in the manufacturing environment.andM;THE MANUFACTURING FLOOR of the 1990s is a highly competitive and complexenvironment.andP;  Sophisticated factory-floor devices such as sensors, logicalcontrollers, and robots are used to manufacture a variety of products.andP;  Thesefactory-floor devices require powerful communication links to create a fullyautomated manufacturing environment.andM;To establish an environment such as this is not an easy undertaking, andrequires some critical components.andP;  First, the tools and devices must besufficiently sophisticated to be applied to the task.andP;  Second, a means forcontrolling and coordinating all of these tools in the environment mustexist.andP;  By some well-defined method, distributed or hierarchical control mustbe established and communicated among the computers and devices.andM;Before the advent of the Manufacturing Automation Protocol (MAP), many ofthese components already existed.andP;  Developers of factory-floor devices andcontrollers have for some time provided mechanisms for controlling andmonitoring their products.andP;  However, these devices have lacked anothercritical component-standardization which provides reduced development andimplementation costs.andP;  When each robot or device requires its own proprietarycontrol language, the work required to develop a fully automaticmanufacturing environment is complicated greatly.andP;  If a designer consciouslydecides to reduce this complexity by limiting the number of proprietarycontrol languages to be used, a corresponding limitation of available devicesresults.andM;The Manufacturing Message Specification (MMS) standard was developed to meetthis need.andP;  Its success hinges not only on its standardization, but also onits sophistication.andP;  To be a viable alternative to existing methods, it mustoffer minimally the same level of control previously available throughproprietary means.andP;  We believe MMS achieves this goal, and we will devotemuch of this article to describing the powerful functionality that MMSdelivers and how we've implemented much of it in HP's first MMS productoffering, HP NMS/800.andP;  Before exploring this functionality in greater detail,the development of MMS and the value it provides will be discussed.andM;History of MMSandM;In 1980 General Motors Corporation formed the GM MAP Task Force to identifyor create standards for multivendor factory-floor communication.andP;  The MAParchitecture developed by this task force is based on the InternationalOrganization for Standardization (ISO) Reference Model for Open SystemsInterconnection  (OSI).andP;  It uses standards or subsets of standards that areappropriate for manufacturing at each layer of the OSI reference model.andO;Because there was no existing standard or even work in progress on a standardthat addressed the application layer (layer 7) communication needs betweencell controllers and the devices that they controlled, the MAP Task Forcedeveloped the Manufacturing Message Format Standard (MMFS, pronounced&quot;Memphis&quot;) to meet this need.andP;  MMFS was part of the MAP 2.1 specification,which was published in 1985 and became the first generally useful version ofMAP.andM;While MMFS provided a description of an application layer protocol that couldbe used for factory-floor communication, an international standard in thisarea was still needed.andP;  Even before publication of the MAP 2.1 specification,the Electronic Industries Association (EIA) agreed to adopt all of MMFS andto reissue it in a form that would be acceptable as an ISO standard.andP;  Thisnew version became known as the Manufacturing Message Specification (MMS).andO;MMS is identified by the document numbers issued by both EIA and ISO.andP;  TheEIA number is RS-511 and the ISO number is ISO 9506.andP;  While these numbersrefer to documents maintained by two different organizations, the documentsare identical.andM;While MMS was initially based on MMFS, the current form of the specificationshows little resemblance to its predecessor.andP;  One of the reasons for this isthat the documentation format required by ISO is different from the one usedfor MMFS.andP;  Another is that ISO application layer specifications are designedto be implemented above an ISO presentation layer.andP;  MAP 2.1 had a nullpresentation layer.andP;  A third reason for this change is that the MMSspecification was developed by a committee made up of employees of manycompanies, not just General Motors, and input from these different sourcesresulted in the specification's being expanded to meet newly identifiedneeds.andM;MMS went through many drafts as it progressed through the standardizationprocess.andP;  By the time MAP 3.0 was issued, MMS had progressed to an ISO draftinternational standard (DIS).andP;  It is this version that is included in the MAP3.0 specification and implemented in the HP MMS/ 800 product.andM;An ISO DIS is one level below the most stable designation given by ISO, whichis ISO international standard (IS).andP;  A specification is almost always changedas it moves from DIS to IS status, and MMS is no exception.andP;  Since MAP 3.0was published, MMS has become an international standard, and there aredifferences between the version of MMS specified in MAP 3.0 and the versionof MMS specified by ISO IS 9506.andP;  While these differences are not major, theydo make MAP 3.0 implementations incompatible with IS-based implementations.andM;After the MAP 3.0 specification was published, General Motors turned over theresponsibility for continued work on MAP to the MAP/TOP Users Group.andP;  TheMAP/TOP Users Group sponsors an NMS technical committee to address MMStechnical questions.andP;  This committee is currently addressing the MMSincompatibility between MAP 3.0 and IS 9506 and should have a solution in thenear future.andM;While it is necessary to have a well-defined standard to allow multivendorcommunication, a standard cannot address all of the implementation details.andO;No matter how carefully standards are written, there can be differences intheir interpretation.andP;  To address these problems, implementation agreementsare necessary.andP;  Before publication of theandM;3.0 specification, an MMS special interest group was created by theIndustrial Technology Institute in Ann Arbor, Michigan.andP;  This group developedimplementation agreements that were used to demonstrate the feasibility ofMAP at the Enterprise Network Event held in Baltimore, Maryland in June 1988.andO;Many of these implementation agreements are also included in the KM 3.0specification.andM;Following the move of MMS from DIS to IS, MMS was included in the U.S.andO;National Institute of Science and Technology (NIST) OSI workshop.andP;  It isexpected that future versions of the MAP specification will include theimplementation agreements from this workshop.andM;MMS interface MMS addresses the content of the messages sent over thenetwork.andP;  It does not, however, address the application program interfaceprovided by an implementation of NMS for use by an application developer.andP;  Anapplication program interface is the set of library calls provided by an MMSimplementation to the MMS user.andP;  These library calls are used both to sendand to receive MMS messages.andP;  The KUP 3.0 specification includes a definitionfor the MMS interface (MMSI).andP;  The definition specifies the function calls,their parameters, and how each function call will be used.andP;  This interfaceallows application developers to write applications that can easily be portedto other vendor's products that support the MMSI.andP;  This interface wasdeveloped by the MAP application programming interface committee.andP;  Followingthe publication of the KM 3.0 specification, this committee moved to theMAP/TOP Users Group.andP;  The HP MMS/800 product is the first MMS product thatsupports this interface.andM;During the time that HP MMS/800 was being developed, the committees workingon the MMS standard, the MMSI standard, and the implementation agreementswere very active.andP;  Two of the members of HP's development team participated,and continue to participate, in meetings pertaining to NMS.andP;  This activeinvolvement in these committees allowed the development team to track changesand incorporate them into the product in a timely manner.andP;  It also allowedHewlett-Packard to have a voice in the decisions made by these committees andto contribute to the success of both MMS and MAP 3.0.andM;Now that KMS has reached international standard status, most of the futureLMS work will involve the creation of companion standards to work with MMS tomeet the special communication needs of the various types of devices that useMMS.andP;  Work is currently progressing on companion standards for robots,programmable logic controllers, numerical controllers, and productionmanagement (or cell controllers).andP;  Companion standards may also be used toaddress the special needs of certain industries.andP;  The process controlindustry is currently creating a companion standard for its use.andO;Implementation agreements will be needed for these companion standards asthey become stable enough to implement.andP;  The MMS special interest group atthe NIST OSI workshop will create these agreements.andM;The Problem MMS SolvesandM;Within the OSI networking reference model, MMS is an application layer (layer7) protocol.andP;  A layer 7 entity is not an application; instead, it providestools and programmatic access to facilitate application development.andO;Manufacturing software design engineers develop their own applicationsdirectly above the MMS services to solve a specific manufacturing problem.andM;MMS functionality is organized into ten service sets, each of which targets aspecific set of tasks or areas of control, such as connection establishmentand maintenance, device status monitoring, uploading and downloading of dataand executable images, remote execution management, and variable creation andaccess.andM;Before delving into the specifics of these and other service sets, it ishelpful to develop a basic understanding of the manufacturing environment andits layout.andP;  Fig.andP;  1 shows a classic layout of the manufacturing floor fromthe networking point of view.andP;  There are four levels of hierarchy: plantmanager, area manager, cell controller, and factory floor devices.andM;Primary plant control and information assimilation are coordinated by theplant manager.andP;  Area managers are responsible for controlling what is to bemanufactured at any time by specifying this information and coordinating itamong the various cells on the factory floor.andP;  The cells are linked togetheraccording to the chain of steps required to assemble a given product.andP;  Eachcell consists of a cell controller and a number of devices.andP;  These devicesmay be programmable logic controllers, numerical controllers, robots, orsensors.andP;  The cell controller directs the activities of its devices based onits assigned responsibilities.andP;  The area manager monitors progress as it ismade and is alerted by cell controllers of any problems that may arise.andP;  Asthis information is collected, it is made available to other sites such asthe corporate offices via wide area networks or dedicated links.andM;Communication between the area manager and the cell controllers within itsjurisdiction is normally accomplished through a file transfer protocol, suchas FTAM (File Transfer, Access, and Management-see article, page 24).andP;  Theinformation exchange often consists of instructions (binary executables) andtables of data (e.g., Car X1, 2-door, color blue, convertible; Car X2,4-door, color brown, sedan; etc.) that dictate what is to be manufactured andin what order.andP;  Data tables can also consist of event logs (for diagnostic orinventory purposes) collected by the cell controllers and showing what wasindeed manufactured and the times at which corresponding events took place.andO;MMS also provides file transfer capability that can be used in this capacity,but it is less efficient than FTAM.andM;Once a cell controller has received a set of instructions, it is responsiblefor carrying them out.andP;  Doing so will normally consist of establishing aconnection to each device in its cell and downloading executable and dataimages over these connections.andP;  MMS remote process management can then beused over this connection to start the executable images.andP;  At this point,specific MMS variables can be created and initialized at the devices forcontrol and monitoring purposes.andP;  The cell controller will likely establishconnections with neighboring cell controllers for peer-to-peer MMScommunication.andP;  Variables, semaphores, and event monitors associated withthese peer-to-peer connections will then be created to providesynchronization of the activities on the assembly line (e.g., as a car passesfrom one cell to the next, each cell must be notified of its arrival.)andM;This example is one manner in which MMS can be used to facilitate andcoordinate the production process.andP;  There are certainly many other approachesto organizing a factory floor and incorporating MMS.andM;We are now ready for a more detailed explanation of the MMS services.andM;MMS ServicesandM;There are ten service sets in the MMS standard, each of which defines anumber of unique MMS messages.andP;  These services sets are as follows:andM;Context Management.andP;  The context management services offer the ability toadminister associations or connections and the environment in which thoseconnections are established.andP;  This includes opening, closing, and abortingconnections, as well as notifying applications of aborted connections andprotocol errors as they occur.andP;  Also included are utilities to prepare theenvironment before any connections can be initiated or received.andP;  Theseutilities spawn any necessary processes and initialize global variables,tables, and lists.andM;Connections have associated with them a certain context for communication,which is negotiated at the time of establishment.andP;  This context dictates whatcan be communicated on that connection and ensures that both ends understandthe contents of the messages to be exchanged.andP;  For example, a context for MMSwill differ significantly from an FTAM context because the message structuresare very different.andP;  MMS and its companion standards have their own contexts.andO;The context to be used is specified by the initiator of the connection.andP;  Ifthe responder cannot support the specified context, it is forced to deny theconnection request.andM;VMD Support.andP;  VMD stands for virtual manufacturing device.andP;  It refers to themodel used and described by the MMS documents to characterize the behavior ofa manufacturing device.andP;  A VMD can be thought of as the name MMS uses torefer to a device under its control.andP;  The VNM support services are used toobtain information about a device, such as its identity (manufacturer andmodel number), its status, what MMS objects it has defined (variables,semaphores, journals, etc.), and what resources it has available.andP;  DomainManagement.andP;  A domain is an abstract object defined within the VNM model.andP;  Itrepresents a subset of a VNM's resources.andP;  Domains are analogous to objectfiles and can be grouped together to form an executable program.andP;  Examples ofVMD resources gathered within a domain are data files, object code, andmemory.andP;  The domain management services are used to create domains byreserving a set of VMD capabilities (or resources), associating a name withthem, and downloading the corresponding binary image data.andP;  Furthermore,domains can be uploaded and stored for future use, deleted, or interrogatedto determine their attributes.andP;  Some manufacturers provide static domainswith their devices; these require no downloading.andP;  Program InvocationManagement.andP;  These services are used to define a program invocation as acollection of domains, and then control its execution.andP;  When creating aprogram invocation, a list of existing or downloaded domains is sent to theVNM and a name is given that binds them together.andP;  Once created, theinvocation can be controlled by issuing start, stop, resume, reset, kill, ordelete commands.andP;  The domains that make up the program invocation willusually consist of executable device code and the data the device uses toperform its assigned task.andP;  Variable Access.andP;  The variable access servicesmake it possible to define remote variables and their types, and to read andwrite those variables as needed.andP;  The variables may be simple types, complexstructures, or lists of other variables.andP;  Named variables are defined byassociating a name and a previously defined type with a given memory addressat the VMD.andP;  Once defined, variables are easily accessed with read and writemessages.andM;Semaphore Management.andP;  The semaphore management services allow applicationsto create and access semaphores for synchronization, control and coordinationof shared resources.andP;  Two types of semaphores can be managed by MMS toprovide this.andP;  Pool semaphores have a one-to-one correspondence withacquirable, logical, or physical entities at the device.andP;  By taking controlof a pool semaphore, an application locks the corresponding resource forexclusive use.andP;  Token semaphores are provided for synchronization.andP;  If agiven application has control of a token semaphore, subsequent requests byother applications to control the semaphore are queued.andM;Operator Communication.andP;  These services provide communication with remoteoperator stations.andP;  Remote operator stations are simple input/display devicesthat provide for human interaction with the devices and cell controllers.andO;The input service is used to request entry data from a device such as a barcode reader, keyboard, or optical sensor.andP;  A device such as a monitor orprinter may be used as an operator station to display data from the outputservice.andP;  Event Management.andP;  Event management allows a client MMS user todefine and manage events at a VMD and to be notified when those events occur.andO;This is accomplished by explicitly defining event conditions and eventactions.andP;  These are then tied together through event enrollments at the VMD.andO;An event enrollment dictates what event action (MMS service) is to be takenby the VKM when a given event condition occurs.andP;  Events can be triggerednormally, as they occur, or artificially by the MMS user.andP;  Additional MMSservices are provided to obtain current status summaries of event conditionsand enrollments.andP;  journal Management.andP;  journal management offers a facilityfor recording and retrieving chronologically ordered information such asevents, variables corresponding to those events, or general textual comments.andO;These services allow the MMS user to create, delete, initialize, read, andwrite journals and obtain status information about them.andP;  File Management.andO;These services offer simple file transfer and file management capabilities.andO;MMS services are provided to open, read, and close files.andP;  When usedtogether, these three services are used to transfer a file from the remote tothe local system.andP;  To transfer a file to a remote system, the obtain-fileservice is used.andP;  This tells the remote system to obtain a file from aspecified file server.andP;  The requesting system may be that file server.andP;  Filescan also be deleted or renamed, and directory listings can be obtainedthrough a file directory service.andM;All of these MMS services are either confirmed services or unconfirmedservices.andP;  Both confirmed and unconfirmed services are initiated by an MMSuser issuing a service request.andP;  This request is sent out on the network andis received by the peer MMS user as a service indication.andP;  For an unconfirmedservice, the service has been completed at this point.andP;  In the case of aconfirmed service, the NIMS user that received the indication must send aresponse back to the requesting MMS user, as shown in Fig.andP;  2.andP;  This responseis called a confirm when it is received by the MMS user that issued theoriginal request.andP;  At this point the confirmed service is complete.andP;  Most ofthe services defined for MMS are confirmed services.andM;HP MMS/800 DefinitionandM;The services provided by MMS allow a wide range of applications.andO;Unfortunately, it was not feasible for the MMS team to provide all eighty-sixMMS services in the HP MMS/800 product.andP;  A narrower focus had to bedeveloped.andP;  In determining this focus, the typical HP MMS/800 application wasevaluated.andP;  This typical application consists of an HP-UX computer runningNMS as a cell controller in the automotive, aerospace, and electronicsindustries.andP;  The factory-floor devices in this type of application includeprogrammable logic controllers (PLCs), numerical controllers (NC or CNCmachines), and robots.andM;To control these types of devices, a cell controller needs to support thecontext management, VMD support, domain management, program invocation,variable access, operator communication, and file services.andP;  The variableaccess and file services used in peer-to-peer communication are alsoincluded.andP;  The peer in this case may be another cell controller or an areamanager.andM;The remaining services-semaphores, journals, and events-are mainly used inthe process control industry.andP;  NMS/800 is not designed for this type ofapplication at this time.andM;HP MMS/800 ServicesandM;Careful consideration was given to the set of services to be implemented.andO;This set had to be large enough to provide the functionality needed for acell controller, but small enough to allow the services to be implemented andtested in time to meet the HIP-UX 7.0 operating system release schedule.andM;The major source of information used in choosing the set of functionality toimplement was the KM 3.0 specification.andP;  The specification defines sevenclasses of devices for which MMS will be used.andP;  The classes are:andM;* MAP1.andP;  Used for NC machinesandM;* MAP2.andP;  Used for PLCs  simple)andM;* MAP3.andP;  Used for PLCs  complex)andM;* MAP4.andP;  Used for robotsandM;* MAP5.andP;  Used for process control applications (simple)andM;* MAP6.andP;  Used for process control applications (medium)andM;* MAP7.andP;  Used for process control applications (complex).andM;A product considered MAP 3.0-conformant must implement all services definedin at least one of these classes.andP;  The set of services chosen for the firstrelease of HP's MMS satisfies classes MAP1, MAP2, and MA.P3.andP;  In addition,over 86% of the services in MAP4 are included in the first release.andP;  The boxon page 38 lists the services provided in the first release.andM;HP MMS implementation ModelandM;As explained in the article on page 11 describing the upper layerarchitecture, the HP MAP 3.0 product is based on a two-process model.andP;  Thetwo processes are the user process and the service provider process.andM;In the MMS version of the model (Fig.andP;  3), the application program interfaceis the standard MMS interface (MMSI) introduced earlier in this article.andP;  Theapplication entity coordinator is known as the high-level service providerand the application service element is known as the MMS protocol machine.andO;Each of these MMS elements is described in more detail below.andM;The MMS User ProcessandM;The purpose of the MMSI is to allow the application program to exchange MMSmessages with devices or peer applications.andP;  Therefore, much of the NMSI codesimply takes input from the user in the form of parameters and input buffersand validates it.andP;  This data is then sent to the service provider processthrough the messaging socket.andP;  The service provider process expects the datain a format compatible with its data structures, which are derived from theAbstract Syntax Notation One (ASN.1) standard.' The MMSI performs thetranslation from MMSI standard structures to the service provider process'sASN.1-derived structures.andP;  The interface is also responsible for translatinginbound data from the service provider process into the user's MMSI datastructures.andM;The following algorithm describes the processing for most of the MMS requestand response functions.andM;1  Validate the status of the connection and the input dataandM;2.andP;  Translate the data from MMSI format to service provider process ASN.andP;  1-derived structuresandM;3.andP;  Place the data in a standard message format to be sent to the serviceprovider processandM;4.andP;  Add the event to event managementandM;5.andP;  Send the message to the service provider processandM;6.andP;  if the event is synchronousandM;{wait for a replyandM;copy the data to the user's output bufferandM;}7.andP;  Return control to the user.andM;After control returns to the user for asynchronous events, the user can callthe event management wait function.andP;  This function waits for the nextcompleted event.andP;  At this time the interface copies the data for thecompleted event into the user's output buffer.andP;  To receive indications(requests from the remote device), the application must explicitly ask forthem.andP;  This is accomplished via the indication receive request IReceive.andP;  TheIReceive function sends a message to the local service provider processindicating that the user is willing to receive one indication.andP;  It is theresponsibility of the service provider process to pair the Ireceive requestswith indications received from the network.andP;  The service provider processwill queue any indications it has received for which the user process has notissued an Ireceive.andP;  The service provider process will also queue Ireceiverequests for which indications have not yet been received.andP;  When the serviceprovider process is able to pair an indication and an IReceive request, theindication is passed to the user process.andP;  The indication is then placed inthe user's Ireceive output buffer where it can be processed by theapplication program.andP;  The scenarios above for requests, responses,indications, and confirms describe the general processing that takes placefor most of the VMD support, domain management, program invocation, operatorcommunication, and file services.andP;  However, the context management andvariable access services require the interface to perform additional work andstore complex information.andM;The context management services require the interface to keep track of localVMDS, application entities, and connections.andP;  Local VMDs are used when theapplication process wants to act as a server for the variable accessservices.andP;  To be a server, the local side must be viewed as a VMD by theremote client.andP;  These local VMDs are created by executing a function callindicating which application entities will belong to the VMD.andP;  An applicationentity is the part of an application that uses networking services.andP;  In anISO environment, these application entities have addresses that the interfaceis required to store to facilitate the communication with the remote devices.andO;In our implementation, an application entity corresponds to a serviceprovider process.andM;The interface keeps track of the VMDS, application entities, and allconnections to perform validity checking on operations requested by the user.andO;The information for each VMD, application entity, or connection is stored ina separate data structure that is placed in the interface's VMD table.andP;  Asimplified version of the VMD table is shown in Fig.andP;  4.andP;  Hash functions areused to provide quick access to particular entries in the VMD table anddoubly linked lists allow easy additions and deletions.andM;The VMD table also provides a means for storing MMS objects defined by theuser.andP;  In our current implementation, variable and type objects are the onlyuser-definable MMS objects supported.andP;  These MMS objects have an associatedscope that dictates a range over which they can be used.andP;  For example, aconnection-specffic variable can be accessed only on the connection for whichit was defined, whereas a variable with a VMD-specific scope can be accessedon any connection to the VNM.andP;  Since we support both connection andVMD-specific variable access, the objects for variables and types are storedunder the structure corresponding to the particular connection or VMD.andM;Variable AccessandM;The variable access services are one of the most powerful and complicatedportions of MMS.andP;  The purpose of these services is to allow the user to readand write variables on the remote device.andP;  However, this is much more than asimple interprocess communication mechanism.andP;  Once the user has performed thenecessary setup, the interface can access the user's program variablesdirectly to place data received from the remote device or retrieve the datato be sent to the remote device.andM;To achieve this level of variable access, the interface must know all aboutthe local variable.andP;  The interface must know the type of the variable, whichis either simple, an array, or a structure.andP;  The interface must also know theaddress of the program variable, its name, and how the variable should lookon the network.andP;  The MMSI provides functions that allow the user to providethis information to the interface dynamically.andP;  Once the information has beensupplied, a function call is used to define the variable to the interface.andO;This results in a variable access object structure being added to the VMDtable in Fig.andP;  4.andP;  The variable access object is placed under the VMD orconnection structure defined by the scope of the object.andM;One final piece of information needed by the interface is knowledge of the Ccompiler packing rules.andP;  This information has been built into the interface.andO;The packing rules, along with the type of the variable and its startingaddress, allow the interface to access the C program variable directly.andM;Once the user has defined the local program variable to the interface, readsand writes can be performed.andP;  For a read, the interface retrieves the datafrom the remote device and places it directly into the application program'sC variable.andP;  On a write, the interface takes the data directly from theapplication program's C variable and sends it to the remote device.andP;  Thelocal C variables in the application program can then be used in normalcomputations.andM;The MMS Service Provider ProcessandM;The MMS service provider process contains two modules that are specific toMMS.andP;  The first is the high-level service provider and the second is the MMSprotocol machine.andP;  The rest of the modules that make up the NMS serviceprovider process are the same service provider process modules used by theother HP MAP 3.0 components.andP;  The service provider process is spawned by theuser process as the result of the MMS user issuing an application entityactivation function call.andP;  The service provider process provides thecommunication pathway between the user process and the HP OSI Express card'and the network.andP;  This call must be made before any connections to the remotedevice can be set up.andP;  Once a service provider process has been activated,the MMS user can set up connections and issue and receive MMS messages overthose connections.andP;  The high-level service provider has two primaryfunctions.andP;  The first is to manage all communication between the serviceprovider process and the user process.andP;  This is accomplished with functioncalls to the service provider process messaging module.andP;  One managementfunction is to pack messages being sent to the user process into a form thatthe user process can interpret and to unpack messages being received from theuser process.andP;  The routines to pack and unpack MMS messages are discussedlater in this article.andP;  The second function of the high-level serviceprovider is to process all incoming indications that are responded toautomatically by this product.andP;  When the high-level service provider receivesan incoming indication it checks to see if it is for an autoresponse service.andO;If it is not an autoresponse service, the indication is sent to the userprocess to be processed by the MMS user.andP;  If it is an autoresponse function,the high-level service provider performs the related operation, creates theresponse, and sends it out on the network without notifying the MMS user.andO;Eight autoresponse services are supported in the HP MMS/800 product.andP;  Theseinclude the identify service and all seven of the file services.andM;The primary function of the MMS protocol machine is to enforce the MMSprotocol as it is defined in ISO DIS 9506.andP;  This entails validating thevalues of MMS message parameters and verifying that the state diagramsdefined by the MMS specification are not violated.andP;  In the event that aprotocol violation is discovered on an outbound MMS message, an error isreturned to the local MMS user.andP;  If a protocol violation is discovered on aninbound MMS message, an MMS reject message is sent back to the remote device.andO;In the case of a rejected inbound message, the local MMS user is alsonotified of a rejected inbound message with an MMS reject indication.andM;Both the high-level service provider and the MMS protocol machine mustmaintain information about connections and confirmed services.andP;  A common datastructure is used to store all of this information.andP;  Fig.andP;  5 illustrates thebasic design of this data structure.andP;  When either a connect request or aconnect indication is processed by the service provider process, a connectionentry is added to the hash table with its state indicating that theconnection is in progress.andP;  When a corresponding positive connect response orconfirm is processed, the state of the connection entry is updated to showthat the connection is valid.andP;  If the corresponding response or confirm isnegative, the connection attempt failed, and the corresponding connectionentry is removed.andP;  A similar process occurs when the connection is concluded.andM;When a confirmed service request or indication is processed by the serviceprovider process, a request entry is added to the request entry list for thecorresponding connection entry.andP;  When the response or confirm is processed,the request entry is removed.andM;Doubly linked lists are used for both the connection entries and the requestentries.andP;  A common set of data structure manipulation routines is used tomanage these lists.andP;  This includes initializing the data structures, addingnew elements to the list, retrieving the next element on the list, andremoving elements from the list.andP;  These routines are designed to manipulategeneral doubly linked lists and are used to manage data structures within theservice provider process and the user process.andP;  Because they were written andtested early in the project, very few errors were discovered in these datastructures during product testing.andM;ASN.1 CompilerandM;Many of the modules in the HP MAP 3.0 product rely on the ASN.1 standard.andO;For all of these modules, including HP MMS/800, the ASN.1 compiler describedin the article on page 11 was used to generate encoding and decoding routinesand data structures.andP;  While the purpose of the encoding and decoding routinesis to translate MMS messages between the ASN.1-derived data structures andthe bit patterns sent and received on the network, the MMS product uses themfor an additional purpose: to validate certain MMS protocol requirements.andM;During connection establishment, the nesting level for variables and theparameter conformance building block are among several parameters negotiatedfor the connection.andP;  The value of the nesting level determines the extent towhich structures can exist within other structures for variables defined forthe connection.andP;  The value of the parameter conformance building blockdescribes which fields within specific NMS messages will be valid for theconnection.andP;  If the negotiated nesting level is exceeded or if an invalidfield is present as determined by the parameter conformance building block, aprotocol error occurs.andP;  To determine if either of these situations exists,the entire MMS message must be parsed and information must be gatheredregarding both of these values.andP;  Since the encoding and decoding routinesalready parse KMS messages, additional code was simply inserted into theseroutines to collect this information and validate that neither the nestinglevel nor the parameter conformance building block is violated.andP;  Since thecreation of the encoding and decoding routines by the ASN.1 compiler is anautomated process, the insertion of this additional code was also automated.andO;Use of the encoding and decoding routine saves an additional parse iterationof each KMS message and allows faster processing of each MMS message.andM;Automatic Generation of Pack and Unpack RoutinesandM;The ASN.1-derived data structures are used throughout the service providerprocess and to send the MMS messages to and from the user process.andP;  In theuser process the MMS messages are translated between the ASN.1-derived datastructures and those used by the MMSI.andP;  Since the ASN.1derived datastructures are automatically generated by the ASN.1 compiler, there is apattern to their design, including the naming convention used for fieldswithin the structures and their corresponding types.andP;  The MMS developmentteam took advantage of this to generate the code to pack these datastructures into a buffer when sending them across the channel linking theservice provider process and the user process.andP;  After determining the natureof the data structure patterns, routines were written to process the headerfile generated by the ASN.1 compiler and locate each pointer field withinevery structure.andP;  Each pointer field represents a new structure within an MMSmessage which requires packing into the buffer.andP;  Once these fields weredetected, it was easy to derive their pointer types from their names, and,together with some structural information for each data type, generate thepacking code.andM;A two-step process was employed.andP;  First, the ASN.1-generated header file wasparsed to generate lists containing the information required for packing.andO;The elements on these lists indicated the opening and closing ofsubstructures and unions, union tags, and pointers.andP;  Second, a recursive setof routines was written to interrogate these lists and generate thecorresponding packing code for each data structure.andM;With minor modifications, the two-step process was repeated to generate theunpacking code as well.andP;  Over ten thousand lines of code were automaticallygenerated using this process, saving an enormous amount of tedious coding anddebugging time.andM;MMS interoperabilityandM;As discussed earlier in this article, the reason for the development of theManufacturing Message Specification was to provide a mechanism formultivendor communication on the factory floor.andP;  To provide this multivendorcommunication, the HP MMS/800 product must be able to communicate with MMSproducts from other vendors.andP;  HP is actively conducting interoperabilitytesting with the MMS products of other vendors to ensure this communication.andO;At the present time, interoperability has been demonstrated with a wide rangeof products from several other manufacturers.andP;  As new MMS products appear onthe market, HP will continue this testing to provide MMS users a wide rangeof devices to be used with the HP MMS/800 product.andM;ConclusionandM;Until the advent of MMS, interconnecting factory-floor devices was a costlyand complicated process.andP;  Each device and computer vendor had proprietaryprotocols that required specialized communication hardware and software toconnect devices.andM;MMS and MAP 3.0 solve this problem by providing one common communicationstandard for all factory-floor devices.andP;  MMS provides the necessaryfunctionality for controlling these devices.andP;  This allows engineers in thefactory to choose the best vendor and device for a task without having toworry about the cost of specialized communication hardware and software toconnect this new device.andM;In addition to providing factory-floor communication with MMS, MAP 3.0 hasdefined a standard MMS interface (MMSI).andP;  This standard interface reducesprogrammer training costs and allows applications to be ported easily fromone vendor's computer to another.andP;  This provides the ability to createflexible applications and reduce development costs.andM;The BP MMS/800 product provides the application programmer with MAP 3.0 MMSfunctionality through the standard MMS interface.andP;  All the necessaryfunctionality for controlling factory-floor devices and peer-to-peercommunication with other cell controllers has been included in this product.andO;AcknowledgmentsandM;We would like to thank Steve Booth for his assistance in the code developmentof the MMSI module and Mike Robinson for helping in the automatic generationof the service provider process pack and unpack routines.andP;  Thanks also go toJohn Beckman, Hugh Mahon, Neal Bauer, and Mickey Gittler for their efforts inthe development and testing of this product.andP;  We would also like to thank ourmanagers, Don Tiller and Jeff Lindberg, for their support and guidance duringthis project.andP;  Finally, thanks go to the marketing people who helped makethis into a real product.andP;  Tim Antonsen developed an excellent set of manualsthat make MMS understandable.andP;  Isabel Garity provided training and sampleprograms, and Paul Morrison provided product marketing guidance.andM;ReferencesandM;1.andP;  Information Processing Systems - Open Systems Interconnection -Specification of Abstract Syntax Notation One (ASN.1), ISO 8824: 1987 (E).andM;2.andP;  W.R.andP;  Johnson, &quot;An Overview of the BP OSI Express Card,&quot; Hewlett-Packardjournal, Vol.andP;  41, no.andP;  1, February 1990, pp.andP;  6-8.andM;BibilographyandM;1.andP;  A.H.andP;  Stacy, The MAP Book: An Introduction to Industrial Networking,Industrial Networking Incorporated, 1987.andM;2.andP;  Manufacturing Automation Protocol Specification Version 2.andP;  1, GeneralMotors Corporation, 1985.andM;3.andP;  Manufacturing Automation Protocol Specification Version 3.0, GeneralMotors Corporation, 1988.andM;4.andP;  Manufacturing Message Specification, ISO DIS 9506, InternationalOrganization for Standardization, 1985.andM;5.andP;  V.C.andP;  Jones, MAP/TOP Networking: A Foundation for ComputerIntegratedManufacturing, McGraw-Hill Book Company, 1988.andO;</TEXT></DOC>