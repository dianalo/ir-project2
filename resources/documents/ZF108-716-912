<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-716-912  </DOCNO><DOCID>08 716 912.andM;</DOCID><JOURNAL>Government Computer News  August 6 1990 v9 n16 p75(2)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1990.andM;</JOURNAL><TITLE>Know what to look for when analyzing software. (Spotlight onSoftware Quality)</TITLE><AUTHOR>Hyatt, Lawrence E.andM;</AUTHOR><SUMMARY>Guidelines for analyzing software quality are presented.andO;Important factors in software quality engineering includereliability, maintainability, portability, interoperability, andefficiency.andP;  Sometimes one of these desirable qualities can bemaximized only at the expense of others.andP;  The most efficientversion of a program may be written in assembly language, but sucha program is less portable and less easy to maintain than onewritten in a high-level language.andP;  No complete set of softwaremetrics has yet been widely accepted, but reliability andmaintainability are the two qualities receiving the mostattention.andP;  Modular code attributes can improve both these areas.andO;High-reliability environments should incorporate data checking anderror tolerance techniques, proofs of correctness, N-item votingand independent development.andM;</SUMMARY><DESCRIPT>Topic:     Software QualitySoftware SelectionProgramming ManagementGuidelinesReliabilitySoftware MetricsProgram Development Techniques.andM;</DESCRIPT><TEXT>Know What to Look for When Analyzing SoftwareandM;Software quality refers to how well a program measures up in reliability,maintainability, transportability and other vital characteristics.andM;Software quality must be determined by analysis, in contrast with functionalrequirements that actually can be tested.andP;  The measure of hardwarereliability known as mean-time-to-failure also applies to software.andP;  However,failure mechanisms differ and the mathematical predictions for hardwarefailure do not translate well to software.andM;Here ae some factors important in software quality engineering.andM;Reliability: How well a program performs with the required precision over agiven period of time.andP;  Reliability engineering not only detects and correctserrors, it also tries to compensate for unknown software errors and forproblems in the hardware and data.andM;Maintainability: How easy it is to find and correct software errors;analogous to mean-time-to-repair for hardware.andP;  Although there is no way tomeasure or predict maintainability, certain attributes do make softwareeasier to maintain.andP;  These attributes are readability and structured coding.andM;They also improve sustainability: The software's capacity to acceptimprovements.andM;Transportability: How well a set of software moves to a new hardware oroperating system environment.andM;Interoperability: Exchange and mutual use of information between two or moresoftware systems.andM;Efficiency: Minimum use of hardware resources.andM;Though all these qualities are desirable, maximizing some of them mayundermine others.andP;  For example, increasing the efficiency of a piece ofsoftware might require writing parts of it in assembly language, whichdecreases its transportability and maintainability.andM;However, all such qualities remain nebulous in the absence of metrics, orquantitative values, computed from the design or code.andP;  Many metrics havebeen invented and a number apply to specific environments, but none has metwidespead acceptance.andM;The two qualities that command the most attention today are reliability andmaintainability.andP;  Practical techniques exist to improve both of them.andM;The software quality engineer's first task is to decide what qualities mattermost for the specific software being developed.andM;In developing flight software, for instance, reliability and efficiency wouldhave the highest priority.andP;  If revisions were to be uplinked to the aircraftduring flight, maintainability might be of interest, too.andP;  Buttransportability would not drive the design of flight software.andM;On the other hand, scientific analysis software might need ease of change andmaintainability the most.andP;  Reliability also would be a concern but efficiencywould not.andM;After ranking the desired qualities, the software quality engineer mustidentify specific attributes that boost those qualities.andP;  Modularity, forexample, tends to increase both reliability and maintainability.andM;Modular design apportions the code into small, self-contained, functionallyunique components.andP;  Modular code is easy to maintain because the interactionsbetween units of code are easy to understand, and low-level functions arecontained in a few units of code.andP;  Modular code are contained in a few unitsof code.andP;  Modular code also is more reliable because of its small,self-contained units.andM;Not all software qualities translate so smoothly into code attributes, and noquality is simple enough to measure easily.andP;  The ideal is to devisemeasurable, analyzable or testable design and code attributes that promotethe desired qualities.andP;  Such attributes include information hiding, strength,cohesion and coupling.andM;Once decisions have been made about the quality objectives and softwareattributes, it is time to evaluate quality by measuring the effectiveness ofa standard or procedure in promoting the desired attributes.andP;  For example,design and coding standards always should undergo quality evaluation.andM;If modularity is important, the standards should say so clearly and shoulddefine the size of units or components.andP;  Because internal documentationaffects maintainability, the documentation standards need to be clear.andM;Quality of design or code also should be evaluated.andP;  This can be part of thewalkthrough or inspection, or else a quality audit can be done.andP;  In eithercase, the software must be evaluated against the standard and against theevaluator's knowledge of good software engineering practices.andM;One very useful activity is to analyze a project's non-conformance recordsfor high numbers of events in specific sections of code.andM;If certain areas show an unusually high error count -- assuming it is notbecause those areas have been tested more thoroughly -- the reason might bepoor coding, inappropriate design or poorly understood requirements.andM;Besides code problems, analysis also may reveal development or maintenanceprocedures that cause a high proportion of errors.andP;  If so, these procedurescan be changed, or an audit might show that the procedures are not beingfollowed.andM;Special techniques for high-reliability environments include:andM;* Input data checking and error tolerance.andP;  If out-of-range or missing inputdata affects reliability, then error checking and datainterpolation/extrapolation schemes may improve reliability a great deal.andM;* Proof of correctness.andP;  For small programs, formal proofs may be able todemonstrate that no errors exist.andM;* N-item voting.andP;  If a number of independent sets of software and hardwareprocess the same input, a comparison or voting scheme should determine whichoutput to accept.andP;  This is especially important where subtle tioming orhardware errors can creep in.andM;* Independent development.andP;  This keeps N-item components from failingsimultaneously due to the same coding error.andM;Other resources for analyzing nonconformance data include standardstatistical techniques, failure modes and effects analysis adapted fromhardware reliability engineering.andM;Further tools are system and software simulators to model system behavior;dynamic analyzers, which detect the most-used portions of code; tools forcomputing metrics from code or design; and special-purpose tools fordetecting all system calls to determine the limits of portability.andM;Lawrence E. Hyatt sets software assurance requirements at Goddard SpaceFlight Center, Greenbelt, Md.andP;  This article was adapted by permission fromNASA's Software Assurance Guidebook.andO;</TEXT></DOC>