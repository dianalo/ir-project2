<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-564-761  </DOCNO><DOCID>09 564 761.andM;</DOCID><JOURNAL>Communications of the ACM  Oct 1990 v33 n10 p85(13)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Random numbers for simulation. (Discrete Event Simulation)(technical)</TITLE><AUTHOR>L'Ecuyer, Pierre.andM;</AUTHOR><SUMMARY>Random number generators (RNG) on ordinary microcomputers and incommonplace single-user applications may be adequate for theeveryday user.andP;  For more mathematically sophisticated orcomputationally complex purposes, however, the algorithmsunderlying such RNG may surprisingly bad.andP;  The difficulty is thateven RNG on larger computer systems may be faulty enough to notmeet the basic definition of randomness so that undesired regularpatterns are noticeable.andP;  For high-level computer simulation, RNGthat more closely approximate the uniform distributionprobabilities are needed.andP;  Research to develop such RNG depends onan understanding of the theories of pseudorandomness and'PT-perfect' idealized generation.andP;  Linear congruential, multiplerecursive, matrix linear congruential recurrence, inversions,lattice structures and combined generators are some possibleapproaches to RNG design.andM;</SUMMARY><DESCRIPT>Topic:     Simulation of Computer SystemsRandom Number GenerationMathematics of ComputingComputational complexity.andO;Feature:   illustrationtable.andO;Caption:   Lattice properties of some matrix linear congruential recurrences.andO;(table)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>RANDOM NUMBERS FOR SIMULATIONandM;In the mind of the average computer user, the problem of generating uniformvariates by computer has been solved long ago.andP;  After all, every computersystem offers one or more function(s) to do so.andP;  Many software products, likecompilers, spreadhseets, statistical or numerical packages, etc.andP;  also offertheir own.andP;  These functions supposedly return numbers that could be used, forall practical purposes, as if they were the values taken by independentrandom variables, with a uniform distribution between 0 and 1.andP;  Many peopleuse them with faith and feel happy with the results.andP;  So, why bother?andM;Other (less naive) people do not feel happy with the results and with goodreasons.andP;  Despite renewed crusades, blatantly bad generators still abound,especially on microcomputers [55, 69, 85, 90, 100].andP;  Other generators widelyused on medium-sized computers are perhaps not so spectacularly bad, butstill fail some theoretical and/or empirical statistical tests, and/orgenerate easily detectable regular patterns [56, 65].andM;Fortunately, many applications appear quite robust to these defects.andP;  Butwith the rapid increase in desktop computing power, increasinglysophisticated simulation studies are being performed that require more andmore &quot;random&quot; numbers and whose results are more sensitive to the quality ofthe underlying generator [28, 40, 65, 90].andP;  Sometimes, using a not-so-goodgenerator can give totally misleading results.andP;  perhaps this happens rarely,but can be disastrous in some cases.andP;  For that reason, researchers are stillactively investigating ways of building generators.andP;  The main goal is todesign more robust generators without having to pay too much in terms ofportability, flexibility, and efficiency.andP;  In the following sections, we givea quick overview of the ongoing research.andP;  We focus mainly on efficient andrecently proposed techniques for generating uniform pseudorandom numbers.andO;Stochastic simulations typically transform such numbers to generate variatesaccording to more complex distributions [13, 25].andP;  Here, &quot;uniformpseudorandom&quot; means that the numbers behave from the outside as if they werethe values of i.i.d.andP;  random variables, uniformly distributed over somefinite set of symbols.andP;  This set of symbols is often a set of integers of theform {0, .andP;  .  .  , m - 1} and the symbols are usually transformed by somefunction into values between 0 and 1, to approximate the U(0,1) distribution.andO;Other tutorial-like references on uniform variate generation include [13, 23,52, 54, 65, 84, 89].andM;Views of RandomnessandM;Classical DefinitionsandM;In the classical (Kolmogorov) sense, a string of bits is random if it cannotbe described by a shorter string than itself.andP;  A generalization is that itcannot be produced efficiently (e.g., in polynomial time), by a programsmaller than itself.andP;  For references and other definitions, see [43, 52].andO;These definitions do not tell us how to generate such bits on computers.andM;In the early days, physical devices (like noise diodes, Geiger counters,etc.) have been attached to computers with the aim of producing such &quot;true&quot;random bits (see the references in [18]).andP;  These method were abandoned formany reasons, including the following: using such specialized hardware is notconvenient; a sequence of numbers cannot be repeated without storing it; andthe numbers produced are not necessarily uniformly distributed [12, 18].andO;Work is still being done on ways to extract &quot;random-looking&quot; bits fromimperfect physical sources of randomness [18], but at the present time, thesetechniques are not practical enough for standard simulation applications.andM;A Framework for PRNGsandM;The so-called &quot;random number generators&quot; that are used in practice are infact deterministic functions that produce a periodic sequence of numbers.andO;When their initial state (called the seed) is truly random, they can beviewed as extensors of randomness, whose purpose is to save &quot;coin tosses.&quot;andO;They stretch a short truly random seed into a long sequence of values that issupposed to appear and behave like a true random sequence.andP;  For this reason,they are often called pseudorandom.andP;  we now sketch a framework for studyingsuch generators.andP;  In [60] a pseudorandom number generator (PRNG) is definedas a family {[G.sub.n], n [is greater than or equal to] 1} of structures,increasing in size.andP;  This will be discussed a little further in the nextsubsection, but for the remainder of the paper, we adopt a simplifieddefinition, in which we fix the size (as is always the case in practice).andP;  Wesimply use the term generator.andM;DEFINITION 1.andP;  A generator is a structure G = (S,[mu],U,g), where S is afinite set of states, [mu] is a probability distribution on S, called theinitial distribution, f : S [right arrow] is the transition function, U is afinite set of output symbols, and g : S [right arrow] is the output function.andM;A generator operates as follows:andM;(1)  Select the initial state [s.sub.0] [Epsilon] S according to [mu]; let[u.sub.0] : g([s.sub.0]);andM;(2) for i := 1,2, .andP;  .  .  , let [s.sub.i] := f([s.sub.i] - 1) and[[mu].sub.i] := g([s.sub.i]).andM;The sequence of observations ([u.sub.0], [u.sub.1], [u.sub.2], .andP;  .  .) isthe output of the generator.andP;  The initial state [s.sub.0] is called the seed.andO;We assume that efficient procedures are available to compute f and g and togenerate the seed [s.sub.0] according to [mu].andP;  Sometimes, in practice, theseed is a fixed constant, which means that real randomness is completelyeliminated.andP;  In other cases, some people would determine the seed by readingfor example the computer's clock; this is not necessarily a good idea becauseit makes replication and debugging hard.andP;  Of course, the aim of a generatorwill be to output a much longer sequence than its input seed [s.sub.0].andP;  Theoutput sequence should also look to some extent (when the seed is random) asif the [u.sub.1]'s were the values of i.i.d.andP;  random variables, uniformlydistributed over U.andP;  In practice, this should be supported by a soundtheoretical basis and assessed empirically by powerful statistical tests.andO;Since S is finite, the sequence of states is ultimately periodic.andP;  The periodis the smallest positive integer [rho] such that for some integer [pi] [isgreater than or equal to] 0 and for all n [is greater than or equal to] [pi],[S.sub.p+n] = [S.sub.n].andP;  The smallest [pi] that satisfies this is called thetransient.andP;  When [pi] = 0, the sequence is said to be purely periodic.andM;PT-perfect generatorsandM;In an idealized generator, nobody using reasonable computing resources andreasonable time, could distinguish between the generator's output and asequence of truly i.i.d.andP;  uniform variates over U better than by flipping afair coin to guess which is which.andP;  Note that this is reminiscent of Turing'stest for intelligence.andM;L'Ecuyer and Proulx [60] (and other references given there) give a moreprecise definition, based on computational complexity.andP;  This definitionapplies to a family {[G.sub.n], n [is greater than or equal to] 1} ofgenerators.andP;  Informally, the family is called PT-perfect if [G.sub.n] &quot;runs&quot;in polynomial-time (in n) and if no polynomial-time (in n) statistical testcan distinguish the output of the generator from a truly random sequence (orequivalently, no polynomial-time algorithm can predict [u.sub.i+1] from([u.sub.0], .andP;  .  .  , [u.sub.i])) significantly better than by picking avalue uniformly from U.andP;  Also see [6, 9, 43, 87].andM;The generators used most often in simulation--linear congruential, multiplerecursive, GFSR, .andP;  .  .--are not PT-perfect.andP;  &quot;Efficient&quot; algorithms havebeen designed to infer their sequence by looking at the firt few numbers [10,91].andP;  But in practice, they remain the most useful generators for simulation.andO;They are efficient and show good statistical behavior with respect to mostreasonable empirical tests.andP;  Binary (or m-ary) expansions of algebraicnumbers (roots of polynomials with integral coefficients) or of sometranscendental numbers (including [pi]) do not define either PT-perfectgenerators.andP;  Kannan et al.andP;  [51] give efficient algorithms to compute furtherdigits given a long enough initial segment of the expansion.andM;PT-perfect generators were introduced by researchers in cryptology.andP;  Thesepeople proposed various generators that are conjectured to be PT-perfect.andO;Typically, those generators (at least those currently proposed) are much tooslow for simulation use.andP;  Also, the very existence of any PT-perfectgenerator has not been proven.andM;Matrix LinearandM;Congruential RecurrencesandM;Most generators used in practice are based on linear recursions with modulararithmetic.andP;  Typically, they are special cases or variants of the followingmatrix formulation.andP;  For some positive integers m and k, let F be the set ofintegers {0,1, .andP;  .  .  , m - 1} and S the set of k-dimensional vectors withcomponents in F, i.e., S = {X = ([x.sub.l], .andP;  .  .  , [x.sub.k])' |[x.sub.i] integer and 0 [is greater than or equal to] [ x.sub.i] [is lessthan] m for 1 [is greater than or equal to] i [is greater than or equal to]k}.andP;  Let A = ([a.sub.ij]) be a k x k matrix with elements in F and C[Epsilon] S a constant vector.andP;  Define a linear transformation f:S [rightarrow] S by f(X) = (AX + C) mod m (where the modulo operation is takenelementwise).andP;  Let [mu] be an initial distribution on S.andP;  Choosing [mu], Uand g:S [right arrow] U defines a generator in the sense of Definition 1 (wewill examine ways of defining U and g later).andP;  Here, the generator's stateevolves asandM;[X.sub.n] : ([AX.sub.n-1] + C) mod m, (1)andM;Where the initial state [X.sub.0] is the seed.andP;  Equation (1) defines a linearcongruential generator (LCG) in matrix form.andP;  In the simulation literature,the term LCG usually refers to the case k = 1, but here, we adopt the moregeneral definition.andP;  When C = 0 (the most popular case), the generator iscalled multiplicative (MLCG) and (1) becomesandM;[X.sub.n] : = [AX.sub.n-1] mod m.andM;Here, obviously, the vector [X.sub.n] = 0 must be avoided.andP;  MLCGs in matrixform have been studied, for example, in [3, 44, 45, 58, 73, 83].andP;  In fact,any LCG of order k can be expressed as a MLCG of order k + 1 as follows: addto A a (k + 1)-th column that contains C, then a (k + 1)-th line thatcontains a 1 in position (k + 1) and zeros elsewhere; add a 1 as the (k +1)-th component of [X.sub.n].andM;Prime ModulusandM;Suppose m is prime and C = 0.andP;  (When m is prime, taking C [is not equal to] 0has no significant interest.)andP;  In that case, F and S can be identifiedrespectively with GF(m) and GF([m.sup.4]),where for any e [is greater than]0, GF([m.sup.e]) denotes the Galois field with [m.sup.e] elements [63, 76].andO;GF([m.sup4]) can also be viewed as a field of polynomials of degree smallerthan k, with coefficients in GF(m).andP;  Let S* be the set obtained by removingthe vector 0 from S.andP;  The maximal possible period for the [X.sub.'.s] is thecardinality of S*, i.e., p = [m.sup.k] - 1.andP;  It is attained if and only ifall powers of A in arithmetic mod m, plus the matrix 0, form a vector spacewith [m.sup.k] elements, isomorphic to GF([m.sup.4].).andP;  An equivalentcondition is that the characteristic polynomial of A.andM;f(x) = |xI - A| mod m [Mathematical  Expression Omitted]andM;with coefficients [a.sub.i] in GF(m), is a primitive polynomial modulo m,which means that all powers of x modulo f(x) and modulo m contitute S*.andM;Let r = ([m.sup.k] - 1)/(m - 1).andP;  The following conditions are necessary andsufficient for f(x) to be primitive modulo m [152]:andM;(a) [([(-1).sup.k+1.a.sub.k]).sup.(m-1)/q] mod m [is not equal to] 1 for eachprime factor q of m - 1;andM;(b) (([x.sup.r] mod f(x)) mod m) = ([(-1).sup.k+1.a.sub.k]) mod m;andM;(c) (([x.sup.r/q] mod f(x)) mod m) has degree [is greater than]0 for eachprime factor q of r, 1 [is less than] q [is less than] r. *andM;For large values of [m.sup.k], factorizing r is often very difficult.andP;  Itbecomes the bottleneck in checking the above conditions [57, 58].andP;  It is agood idea then to seek couples (m, k) such that r is prime, since checkingprimality is much easier than factoring [71].andP;  Given m, k and thefactorizations of m - 1 and r, it is relatively easy to find primitivepolynomials simply by random search for proper [a.sub.i]'s.andP;  For prime m,there are exactly.andM;N(m, k) = ([m.sup.k] - 1)(1 - 1/[q.sub.1]) (1 - [1/q.sub.2])...(1 -[1/q.sub.h])/kandM;choices of ([a.sub.1], .andP;  .  .  , [a.sub.k]) that satisfy the abovesufficient conditions, where [q.sub.1], .andP;  .  .  , [q.sub.h] are the distinctprime factors of [m.sup.k] - 1 [52].andP;  In the case k = 1, a primitivepolynomial x - [a.sub.1] means that [a.sub.1] is a primitive element modulom, and whenever one such [a.sub.1] has been found, all others can be foundeasily, since they are exactly all the integers of the form [a.sup.j/.sub.1]mod m where j is relatively prime to m - 1.andM;For the maximal period to be attained, A must be nonsingular in arithmeticmodulo m, since otherwise AX mod m = 0 for some vector X [is not equal to] 0.andO;Then, if [A.sup.-1] denotes the inverse of A, we have [X.sub.n-1] =[A.sup.-1] [X.sub.n] mod m, so that the sequence can be generated in reverseorder.andP;  The matrix [A.sup.-1] = [A.sup.-1] mod m can be computed using&quot;divide-to-conquer&quot; as we will see later.andM;Composite ModulusandM;When m is not prime and C = 0, the maximal period is typically much smallerthan [m.sup.k].andP;  For m = [p.sup.e], p prime and e [is greater than or equalto] 1, the maximal possible period is ([p.sup.k] - 1)[p.sup.e-1], except forp = 2 and k = 1, where it is [2.sup.e-2] [33, 52].andP;  Sufficient conditionsunder which this period is attained and a simple method for constructingmatrices A giving maximal period generators are given in [33].andP;  The exceptionp - 1 = k = 1 is treated in [52].andP;  The case where p = 2 has some interest interms of implementation, but the cost in terms of period length, for a givenapproximate size of m, is important.andP;  For example, for p = 2 and k = 1, themaximal period is m/4, while it is m - 1 for prime m.andP;  For m = [2.sup.31] andk = 5, the longest possible period is [([2.sup.5] - 1)2.sup.31-1] =[2.sup.35] - [2.sup.30], while [m.sup.k] - 1 = [2.sup.155] - 1 is about[2.sup.120] times longer!andP;  This is one reason why it is often recommendedthat only prime values of m be used.andP;  There are also other important reasons.andO;A major one is that for small p, the low order bits do not look random atall.andP;  For p = 2 and k = 1, the i-th least significant bit of [X.sub.n] hasperiod equal to max ([1,2.sup.i-2]) [13, 24].andP;  If the period of such agenerator is split into [2.sup.d] equal segments, then all segments areidentical except for their d most significant bits [24, 28].andP;  For i =[2.sup.e-d-2] [is greater than] 0, all points ([x.sub.n.,x.sub.n+i]) lie onat most max([2,2.sup.d-1]) parallel lines [24].andP;  For k [is greater than] 1(still with p = 2), the maximal period for the d-th least significant bit is[([2.sup.k] - 1)2.sup.d-1].andM;With C [is not equal to] 0, for k = 1, it is possible to obtain a periodlength of m.andP;  Conditions are given in Knuth [52].andP;  For p = 2 and k = 1, theperiod of the i-th least significant bit of [X.sub.n] is at most [2.sup.i]and the pairs ([X.sub.n,x.sub.n+i]), for i = [2.sup.e-d], lie in at most max(2, [2.sup.d-1]) parallel lines [24].andP;  For k [is greater than] 1, since anyk-th order LCG is equivalent to some (k + 1)-th order MLCG, a general upperbound on the period length is [([p.sup.k+1] - 1)p.sup.e-1].andP;  Again, for largee and k, this is much smaller than [m.sup.k].andM;Jumping Ahead, Splitting, andandM;VectorizationandM;Jumping ahead in the sequence of a MLCG can be done efficiently usingandM;[X.sub.n+j] = ([A.sup.J.X.sub.n]) mod m = [([A.sup.j]mod m)X.sub.n] and m.andM;The matrix ([A.sup.j] mod m) can be pre-computed using the divide-to-conqueralgorithm [11]:andM;[A.sup.j] mod m = A  if j = 1; A X [A.sup.j-1] mod m  if j [is greater than]2, j odd; [A.sup.j/2] X [A.sup.j/2] mod m  if j [is greater than] 1, j even.andM;Such &quot;jumping ahead&quot; facilities are required for splitting the sequence intolong disjoint subsequences.andP;  This is useful for many simulation applications[13, 28, 59].andM;On parallel computers, vectorization techniques can be used to generate manysubsequences simultaneously [16, 24, 53].andP;  Given J processors, one canprecompute [A.sup.J] mod m and use it as a multiplier on all the processors,starting with seed [X.sub.j-1] on processor j.andP;  This way, each processorgenerates values that are J positions apart in the basic sequence.andP;  A secondapproach is to use multipler [A.sub.j] mod m processor j, with a common seedon all the processors, and use the &quot;new state&quot; of processor J as a seed forthe next step.andP;  This way, the successive seeds are J values apart in thebasic sequence and the processors generate exactly the same values as in thefirst approach.andP;  One drawback is that all processors must have access to thestate of processor J.andP;  A third approach which we recommend, called splitting,is to keep multiplier A on each processor, but to start with different seedsthat are far apart in the basic sequence.andP;  This is more appealing inpractice, since it does not change the multiplier A whose choice, typically,is dictated by case of implementation criteria.andP;  The first approach is infact equivalent to splitting, but combined with a change of multiplier.andP;  Togenerate the (far apart) seeds, we use mutliplier [A.sup.v] mod m for somehuge value of v, often a power of two (but beware if m is itself a power oftwo; see following).andP;  New seeds could be computed only as needed.andO;Implementation with this &quot;jumping&quot; multiplier could be more complicated andmuch slower than for A, but it is used only to produce the seeds.andP;  (Also see[59].)andM;One concern with splitting is that long-range correlations become important.andO;Vectors formed by output values from different substreams should be welldistributed in the unit hypercube.andP;  For instance, if seeds are spaced vvalues apart, we might have special interest for lag v correlation.andP;  Asmentioned, if m and v are powers of two, the substreams are identical exceptfor their (few) most significant bits.andP;  Further, for c such that [2.sup.c] issmaller than the number of substreams, each substreams has [2.sup.c]companion substreams that differ only in the c most significant bits.andO;Clearly, in this case, v should not be equal to (or near) a power of two.andO;Durst [28] suggests choosing seeds randomly, after comparing that to regularspacing with v = 1,000,001 for m = [2.sup.48].andP;  For prime m, k = 1, and fullperiod, all pairs of the form ([x.sub.n,X.sub.n+(m-1)/2]) lie on a line withslope -1 [24].andM;Another approach, suggested for instance in [49, 86], is to use differentadditive constants C (and the same A and m) for the different substreams.andO;But in fact, as mentioned by Durst [28], changing the constant does notreally change the generator.andP;  As we will see below, the multidimensionallattice structure of a LCG is independent of C (except for some shifting).andO;Also, consider the LCG (1) and letandM;[Y.sub.n] = ([X.sub.n] - D) mod m (4)andM;for some constant vector D.andP;  Then, one hasandM;[Y.sub.n+1] = ([AY.sub.n] + C + (A - I)D) mod m (5)andM;where I is the identity matrix.andP;  That is, all generators with additiveconstant of the form C + (A - I)D for D * S produce the same sequence as (1),except for a shift of -D, modulo m.andP;  For maximal period generators with k = 1for which a mod 8 = 5, there are only two such sequences (one for c = 1 andone for c = 3) and they are in fact antithetical.andM;Of course, one can use completely different generators on the differentprocessors (or for the differnet substreams), or simply differentmultipliers.andP;  This appears more troublesome in terms of management.andP;  However,finding millions of good generators is not really a problem [28].andM;ImplementationsandM;Implementing (1) in a portable way, in high-level language, is tricky ingeneral, because m is typically near the largest integer representable on themachine and the products involved in computing (1) will overflow.andP;  We nowdiscuss ways of computing ax mod m for integers a and x.andM;If m = [2.sup.e] where e is the number of bits on the computer word, and ifone can use unsigned integers without overflow checking, the products modulom are easy to compute: just discard the overflow.andP;  This is quick and simple.andO;For that reason, MLCGs with moduli of this form are used abundantly inpractice, despite their serious drawbacks.andP;  Some nuclear physicists, forinstance, perform simulations that use billions of random numbers onsupercomputers and are quite reluctant to give up using them [28, 49].andO;Usually, they also generate many substreams in parallel.andP;  In view of theabove remarks, all this appears dangerous.andP;  Perhaps some people like playingwith fire.andM;For more general m, representable as an integer on the target computer, [13,56, 85] give an efficient and esily implementable way to compute ax mod m,for 0 [is less than] x [is less than] m, whenandM;a(m mod a) [is less than] m.andP;  (6)andM;If we decompose m = aq + r where r [is less than] a, that condition becomes r[is less than] q, in which case a = (m - r)/q = [m/q].andP;  It is then easy tosee that all multipliers a satisfying r [is less than] q are of the form a =i or a = [m/i] for i [is less than] [square root of m].andP;  Note that in view ofthis condition, it might be worthwhile considering negative multipliers a.andO;Using a [is less than] 0 is equivalent to using a + m, but condition (6)might hold for -a and not for a + m.andP;  In the following Pascal-like code toperform x := ax mod m, if r [is less than] q, all values during thecomputations will remain between -m and m.andM;k := x DIV q; x := a * (x - k * q) - k * r; IF x [is less than] THEN x := x +mandM;For small a, another approach is to perform the computations indouble-precision floating-point [56].andP;  This could be faster on some computerswith floating-point co-processors.andP;  Carta [15] describes a differentlow-level implementation technique for m = [2.sup.b-1] - 1 on b-bit machines.andO;The smaller is a, the faster it goes (in average).andP;  He also introduces afaster &quot;alternative algorithm&quot; which actually changes the generator.andP;  Webelieve that this is dangerous and should be avoided.andP;  Techniques forcomputing ax mod m in a high-level language for the more general case arestudied in [59], which also gives portable codes.andM;Multiple Recursive GeneratorsandM;For a given prime m, whether a MLCG has full period or not depends only onthe characteristic polynomial of its matrix.andP;  Any polynomial of the form (3)has a companian matrixandM;[Mathematical Expression Omitted] (7)andM;whose f(x) is the characteristic polynomial.andP;  When the matrix A has thisspecial structure, the first k - 1 components of [X.sub.n] are obtained byshifting the last k - 1 components of [X.sub.n] is a linear combination ofthe [X.sub.n] is a linear combination of the components of [X.sub.n-1].andP;  Thiscan be viewed as producing a sequence of integers, each one defined as alinear combination modulo m of the k previous ones.andP;  This kind of generatoris called multiple recursive (MRG) [46, 52].andP;  With a matrix of this form, anddenotingandM;[X.sub.n] = ([X.sub.n], .andP;  .  .  , [X.sub.n]+k-1)', (8)andM;equation (2) is equivalent to the recursionandM;[Mathematical Expression Omitted] mod m. (9)andM;Restricting our search to generators of this class is certainly supported bytheir ease of implementation.andP;  It is further reinforced by the followingproperty [45, 58, 76]: for any generator defined by (2), with thecharacteristic polynomial of A defined by (3), the sequence of states obeysthe recursionandM;[Mathematical Exprssion Omitted] mod m, (10)andM;In other words, each component of [X.sub.n] evolves according to the samerecursion [9], which means that we just have k copies of the same MRGevolving in parallel (hopefully, with different and &quot;far apart&quot; seeds).andP;  Thisgives a good argument supporting the direct use of [9].andM;Another interesting special case in terms of implementation is when thecharacteristic polynomial f(x) is only a trinomial, of the form f(x) =[x.sup.k] [a.sub.1.X.sup.k-1] - [a.sub.k], for 1 [is less than or equal to] j[is less than] k.andP;  Primitive trinomials of this form are easy to find [57,58].andP;  The corresponding recursion becomes:andM;[Mathematical Expression Omitted] mod m. (11)andM;The generator can be implemented directly in this form, with its stateredefined as the vector ([X.sub.n-1], ..., [X.sub.n-k]).andP;  The &quot;vectorized&quot;recursion (10) becomesandM;[X.sub.n] := ([a.sub.1.X.sub.n-1] + [a.sub.k.X.sub.n-k]) mod m. (12)andM;The state then becomes the matrix [S.sub.n] = ([X.sub.n-1], ...,andO;[X.sub.n-1]).andP;  It can have interest for parallel computers (Also see sectionon GFSR and Laggd-Fibonacci generators)andM;Lattice Structure andandM;Spectral TestandM;Consider a maximal period MRG, of the form [9], and letandM;[T.sub.t] = {([X.sub.n], ..., [X.sub.n+t-1]), n [is greater than or equal to]O{ [union] {0}andM;be the set of all overlapping t-tuples of successive values, plus the zerovector.andP;  It is well known [25, 45, 46, 52, 57, 58, 64] that the periodiccontinuation of [T.sub.1] with period m,andM;[Mathematical Expression Omitted]andM;forms a lattice with unit cell volume of max(1, [m.sup.t-k]).andP;  Recall that at-dimensional lattice is a set of the formandM;[Mathematical Expression Omitted]andM;where [V.sub.1], ..., [V.sub.t] is a set of linearly independent vectorscalled a basis.andP;  A set of vectors [W.sub.1], ..., [W.sub.t] such that thescalar products obey [V.sub.1] .andP;  [W.sub.t] = [[delta].sub.ij] form a basisof the dual lattice.andP;  Bases for [L.sub.t] and its dual can be constructedeasily as explained in [45, 48].andM;For t [is less than or equal to] k, the lattice [L.sub.t] contains allpossible integer vectors and the unit cell colume is one.andP;  For t = k, eachvector except the zero vector occurs once and only once over the period.andP;  Fort [is greater than] k, the unit cell volume can be huge compard to 1, whichis the value that one would expect from truly random integer vectors.andP;  Thiscan be viewed as a strong limitation of simple LCGs (with k = 1) and suggestsusing large values of k.andP;  A unit cell of the lattice is determined by thevectors of a Minkowski-reduced lattice base (MRLB) [2, 3, 45].andP;  It istraditionally accepted that &quot;better&quot; generators are obtained when the unitcells of the lattice are more &quot;cubic-like&quot; (i.e.andP;  when the vectors of theMRLB have about the same size).andP;  The ratio [q.sub.t] of the sizes of theshortest and longest vectors of a MRLB is called the Beyer-quotient.andP;  It canbe used to assess the quality of the lattice.andP;  Values near one are said to bemore desirable.andP;  Note however that reducing the unit cell volume (byincreasing m, or k, or both) can be much more effective in improving thequality than getting a larger Beyer-quotient with fixed m and k.andP;  Afflerbachand Grothe [2, 45] give efficient algorithms to compute a MRLB and theBeyer-quotient for a given lattice.andP;  A figure of merit can be [Q.sub.T] =[min.sub.k[is less than]t[is less than or equal to]T] [q.sub.t] for somelarge enough T.andM;The lattice structure also means that all points of [T.sub.t] lie in a familyof equidistant parallel hyperplanes.andP;  Among all such families of hyperplanesthat cover all the points, choose the one for which the successivehyperplanes are farthest apart, and let [D.sub.t], which is in fact equal toone over the length of the shortest vector in the dual lattice to [L.sub.t].andO;This shortest vector can also be computed using the algorithms of [2, 45],which are faster for large t.andP;  For given m and k, the number of hyperplanesin the chosen family cannot exceed =(t!(=m.sup.k] -- 1)).sup.1/t] and thereis also a theoretical lower bound [D*.sub.t] on [D.sub.t] [36, 52, 56].andP;  Onecan define the figures of merit [S.sub.t] = [D*.sub.t./D.sub.t] and [M.sub.T]= [min.k[is less than or equal to]t[is less than or equal to]T [S.sub.t],which lie between 0 and 1.andP;  For k = 1 and using [M.sub.6] as a criterion,computer searchs to find good generators have been done by Fishman and Moore[36] (for m = [2.sup.31] - 1), by Fishman [35] (for m = [2.sup.32] and m =[2.sup.48]), by L'Ecuyer [56] (for different values of m near [2.sup.31] and[a.sup.2.sub.1] [is less than] m), and by Park and Miller [85] (for m =[2.sup.31] - 1 and [a.sub.1] (m mod [a.sub.1]) [is less than] m).andP;  L'Ecuyerand Blouin have performed more extensive searchs, for 1 [is less than orequal to] k [is less than or equal to] 7 and different values of m up to near[2.sup.63], first using [M.sub.8] as a criterion [57], then using [Q.sub.20][58].andM;The results of [58] show that for k [is greater than] 2, generators of thespecial form [11] have Beyer quotients much smaller than 1.andP;  But thesegenerators are faster than those of the general form.andP;  In fact, for a givengenerator of the general form [9] with k [is greater than] 2, one can usuallyfind a generator of order k' [is greater than] k, of the special form (1i),that will be faster and will have smaller [D.sub.t] for all t [is greaterthan] k.andP;  its Beyer quotients might be smaller, but this is compensated forby much smaller unit cell volumes.andP;  In that case, [D.sub.t] appears to be abetter &quot;absolute&quot; criterion for comparing generators with different values ofk and m.andM;Table I gives a few values.andP;  For the first 3 columns, all multipliers[a.sub.i] satisfy condition [6]: [a.sub.i] (m mod [a.sub.i]) [is less than]m.andP;  (The last column will be discussed later.)andP;  For m = [2.sub.31] - 1 and k= 1, the multiplier given is the one with the largest [Q.sub.20] among allthose that satisfy this condition.andP;  Those in columns 2 and 3 (for k [isgreater than] 1) were obtained by extensive random search and are believed tobe close to the best ones with respect to [Q.sub.20].andP;  For comparison, for m= [2.sub.31] - 1 and k = 1, the multiplier a = 742938285 recommended Fishmanand Moore [36] has [Q.sub.20] = .5808, while for a = 16807, a = 48271 and a =69621, which are mentioned in Park and Miller [85] and satisfy [6], therespective values are .1315, .4563 and .5373.andM;Asimilar lattice structure appears when all components of [X.sub.n] are usedat each iteration [3, 44, 45].andP;  It can be analyzed in a similar way.andP;  Whenthe generator is not multiplicative (C [is not equal to] 0), the lattice isshifted by a constant vector, yielding what is called a grid.andP;  Thecorresponding lattice can be analyzed in the same way, since its structuredoes not depend on C.andP;  When [T.sub.t] is replaced by the set ofnon-overlapping t-tuples, [L.sub.t] does not form a lattice in general [1].andM;Tausworthe, GFSR, Lagged-FibonacciandM;When [a.sub.j] = |[a.sub.k]| = 1, the recursion (12' is a special case of theso-called lagged-Fibonacci generator (LFG) [65, 66].andP;  A LFG is defined byandM;[X.sub.n] : = ([X.sub.n-j] * [X.sub.n-k]) mod m (13)andM;where * is any componentwise binary operation (sum, product, subtraction,etc.) and [X.sub.n] is a vector of any size, with components in {0,..., m -u}.andP;  These generators are analyzed in [65, 66], for different operators *,and m = [2.sup.e].andP;  For such values of m, their maximal period lengths aretypically much smaller than [m.sup.k] - 1.andM;Increasing the period of a LCG can be done by taking a larger m or a largerk.andP;  Typical MLCGs use m near [2.sup.31] and small k.andP;  An opposite extreme isto take m = 2, with large k.andP;  In this case, [X.suv.n] is a vector of k bits.andO;For b [is less than or equal to] k, one can interpret, say, the last b bitsof [X.sub.n] as a b-bit integer.andP;  The generator thus obtained is calledGeneralized Feedback Shift Register (GFSR) [37, 38, 39, 40, 41, 42, 62, 66,93, 94, 95, 96].andP;  For the &quot;efficient&quot; special case (12), with [a.sub.j] =[a.sub.k] = 1, it becomes a special kind of lagged-Fibonacci generator, withoperator * = * (the bitwise exclusive or).andP;  Since the first k - b bits (ifany) are unused, [X.sub.n] can be viewed as a b-bit vector.andP;  The generator'sstate [s.sub.n] is a b X k matrix of bits.andP;  Recommended values are forexample b = 31 and k = 521 or 607 [37].andM;For b = 1, one gets a MRG which produces a sequence of bits (also called aM-sequence, for maximal period generators.andP;  Tausworthe [92] suggestedregrouping blocks of successive bits to form integers or reals.andP;  TheseTausworthe (or simple shift register) generators are rather slow and arealmost not used anymore in practice.andP;  But see also [96].andP;  GFSR generators arefaster but use more memory.andP;  Since a GFSR generator corresponds in fact to bcopies of the same M-sequence evolving in parallel, one should use &quot;jumpingahead&quot; techniques to compute an initial matrix of bits so that these bbit-generators have their seeds far enough apart.andP;  (This also applied to FLGsin general.)andP;  Initialization procedures have been proposed (e.g., in [8, 21,42]).andP;  But Fushimi [39] gives a much simpler and faster procedure, whichguarantees equidistributivity in all dimensions t [is less than or equal to][k/b] and good autocorrelation properties for lags up to [([2.sup.k] - 1 -b)/b].andP;  The basic idea is to find a Tausworthe generator that is equivalentto the target GFSR and use the former to compute an initial matrix of bits.andM;Marsaglia [65, 66] argues against the use of GFSR generators.andP;  He describes astatistical test, based on the ranks of random binary matrices, that someGFSR generators fail.andP;  But in fact, such specific tests to &quot;catch-up&quot;generators of a given class can be built for most classes of generatorscurrently in use.andP;  Recent studies [7, 38, 41, 77, 93, 94, 95] indicate thatGFSRs with large order and properly chosen parameters have excellentstatistical properties in general.andP;  One problem, though, is that they use alarge amount of memory.andP;  This is particularly true when many generators haveto be run in parallel.andP;  A better idea could be to stay away from the twoextreme cases k = 1 and m = 2.andP;  Pick a large but practical m and increase kas needed.andM;Other VariantsandM;The ACORN generator proposed recently in [101] is in fact equivalent to aMLCG with matrix A such that [a.sub.ij] = 1 for i [is greater than or equalto] 0 otherwise.andP;  Generators based on cellular automata are discussed in [22,98] and other references given there.andP;  The generators proposed by Tindo [98]are equivalent to LCGs where the constant C is a vector of ones, while thematrix A has identical elements [a.sub.0] on its diagonal, identical elements[a.sub.1] on its subdiagonal, and zeros elsewhere.andP;  The maximal possibleperiod is [m.sup.k] - m and finding generators that reach it is relativelyeasy.andP;  The elements of the vectors [X.sub.n] are combined to produce theoutput.andM;Non-Linear GeneratorsandM;LCGs can be generalized to quadratic generators of the formandM;[X.sub.n] : = ([X.sup.'][sub.n-1][AX.sub.n-1] + [BX.sub.n-1] + C) mod m,andM;where A and B are k X k matrices, or more generally toandM;[X.sub.n] : = P([X.sub.n-1]) mod mandM;where P is some multivariate polynomial.andP;  See [74].andP;  For k = 1, quadraticgenerators are analyzed in [52, 30].andP;  The latter authors show that formaximal period generators (p = m), the non-overlapping t-tuples determine aunion of grids (shifted lattices).andM;A class of generators based on Tchebychev mixing are known to have badstatistical properties [50].andP;  Classes of LCGs with randomly varyingmultipliers and/or additive constants are discussed in [17, 19].andP;  They haveinteresting theoretical properties, but they require truly random bits ateach step.andM;A Class of Generators byandM;InversionandM;Eichenauer et al.andP;  [29, 31] introduced a class of &quot;non-linear&quot; generatorsusing a sequence {[x.sub.n], n [is greater than or equal to] 0} that obeys(9) for prime m.andP;  Let [*.sub.1] be the i-th non-zero value [x.sub.n] in thatsequence.andP;  Define [z.sub.n] = (*.sub.n]+1[*.sup.- 1][sub.n]) mod m, where[*.sup.andP;  - 1'][sub.n] denotes the inverse element of [*.sub.n] in GF(m).andP;  The[z.sub.n]'s are then used to produce the [u.sub.n]'s.andP;  A version of Euclid'salgorithm, whose average running time is approximately 12(ln2)(lnm)/* [52],can be used to compute the inverse [*.sup.-1][sub.n].andP;  Divide-to-conquer canalso be used as mentioned previously, since jumping back one value isequivalent to jumpting ahead *-1 values.andP;  Computing this inverse in softwareon a standard computer is slow, which makes these generators somewhatinefficient.andP;  However, if implemented in hardware, the inversion procedurecan be practically as fast as an ordinary floating-point division [29, andpersonal communication from D. E. Knuth to J. Lehn].andM;For prime m, the maximal possible period length for the [z.sub.n]'s is[m.sup.k-1].andP;  Sufficient conditions for it to be attained are given in [31].andO;Maximal period generators are easy to find.andP;  For k = 2 or 3, one can write arecursion directly for the [z.sub.n]'s.andP;  For k = 2, it isandM;[Mathematical expression omitted]andM;The main motivation behind these generators is that the sequence they producedoes not share the lattice property of the usual LCGs.andP;  Their structure ishighly non-linear: any t-dimensional hyperplane contains at most toverlapping t-tuples of successive values [34, 78, 79, 84[.andP;  Niederreiter[82] shows that they behave very much like truly random generators withrespect to discrepancy.andP;  Therefore, their theoretical properties look quitegood.andM;These non-linear generators can also be viewed as a way of implementing g : S[right arrow] U for a LCG, (i.e.andP;  as a supplementary step when transformingthe state of the LCG into a value between 0 and 1).andP;  Other ways of defining gwill be discussed later.andM;Combined GeneratorsandM;To increase the period and try to get rid of the regular patterns displayedby LCGs, it has often been suggested that different generators be combined toproduce a &quot;hybrid&quot; one [20, 47, 48, 52, 56, 65, 67, 73, 99, 100].andP;  Suchcombination is often viewed as completely heuristic and is sometimesdiscouraged.andP;  Ripley [90], for instance, views it as &quot;better the unknown thanthe devil we know&quot; attitude.andP;  But besides being strongly supported byempirical investigations, combination has some theoretical support.andP;  First,in most cases, the period of the hybrid is much longer than that of each ofits components, and can be computed.andP;  Second, there are theoretical resultssuggesting that some forms of combined generators generally have betterstatistical behavior.andP;  For instance, suppose two random sequences {[x.sub.n],n [is greater than or equal to] 0} and {[y.sub.n],n n [is greater than orequal to] 0} are combined elementwise to form a third sequence {z.sub.n], n[is greater than or equal to] 0}, where [z.sub.n] = [x.sub.n] * [y.sub.n] and* denotes some binary operator.andP;  Assume the three sequences are defined overthe same finite set.andP;  Then, under fairly reasonable conditions, the t-tuplesof successifve values are &quot;more&quot; (or at least as much) uniformly distributedin some sense for the third sequence than for any of its two constituents.andO;See [14, 65].andP;  Recall, however, that the generators used in practice producecompletely deterministic sequences.andP;  In that context, the above results mightraise optimism, but give no guarantee of quality.andP;  As pointed out in [13],combination can conceivably worsen things.andP;  Niederreiter (personalcommunication) points out that if [x.sub.n] and [y.sub.n] have inverses withrespect to *, which is often the case in deterministic settings, then[x.sub.n = [z.sub.n] * [y.sup.-1.sub.n] and [y.sub.n] = [x.sup.-1.sub.n] $[z.sub.n], and the same argument as above suggests that [x.sub.n] and[y.sub.n] have &quot;better&quot; statistical properties than [z.sub.n]'!andM;Some combination approaches are based on shuffling [13, 52, 54, 73].andP;  In oneof the variants, two simple generators are used, one to fill the cells of abuffer and the other to select which cell the next output value will be takenfrom.andP;  At each step, the second generator selects a cell, outputs itscontent, then the first generator fills it back.andP;  Shuffling is not so wellunderstood and has some practical drawbacks [13].andP;  For instance, there is noobvious efficient way to jump ahead in the sequence.andM;L'Ecuyer [56] proposed a combination method for MLCGs of order k = 1 withdistinct prime moduli [m.sub.1], .andP;  .  .  , [m.sub.j].andP;  If [x.sub.jm] denotesthe state of generator j at step n, define the combination (slightly moregeneral than in [56]):andM;[Mathematical expression omitted]andM;for some integers [*.sub.j].andP;  In [56], [*.sub.j] = [(-1).sup.j-1] issuggested.andP;  This is related to the following generalization of thecombination approach proposed by Wichmann and Hill [99], which is a bitslower because it requires more divisions:andM;[Mathematical expression omitted]andM;If each individual MLCG has full period [m.sub.j] - 1, then the period of thelatter is always equal to the least common multiple of [m.sub.1] - 1, .andP;  .  .andO;, [m.sub.j] - 1 [61].andM;It turns out [61, 97] that there exists a MLCG with modulus m =*=[sub.1][m.sub.j] whose lattice structure approximates quite well thebehavior of (14) in higher dimensions, and which is exactly equivalent to(15).andP;  This MLCG does not depend on the *'s.andP;  The equivalence of the Wichmanand Hill generator to a MLCG was already pointed out by Zeisel [99].andP;  Suchstructural properties are not so deceptive as it might appear.andP;  In fact, itshows that these combinations can be viewed as efficient ways of implementing(sometimes with added noise) generators with moduli much larger than thelargest integer representable on the target computer.andP;  However, these largemoduli are not prime.andM;One generator suggested in [56] had J = 2, [m.sub.1] = 2147483563, [m.sub.2]= 2147483399, [a.sub.1] = 40014, [a.sub.2] = 40692, [*.sub.1] = 1 and[*.sub.2] = -1.andP;  Its &quot;approximating&quot; MLCG has m = 4611685301167870637 and a =1968402271571654650 (see Table I) [61, 97].andP;  The approximation is quite goodin dimensions t [is greater than or equal to] 3.andP;  Figures of merit for thelattice associated with this MLCG are given in the last column of Table 1.andO;They show that for t [is greater than or equal to] 3 (where the approximationis good), the combined generator has a better structure than the best MLCG oforder one (and modulus m = [2.sup.31] - 1), and is quite comparable to thebest MLCGs of order 2.andP;  In two dimensions, the combined generator is alsomore &quot;noisy&quot; than these MLCGs.andP;  Before suggesting that generator, the authorhad been unable to detect graphically, with reasonable computer time, anytwo-dimensional structural property.andP;  For the same size, one can also findbetter combined generators than this one.andP;  See [61].andM;Transforming Into u(0,1)andM;VariatesandM;There are different ways of using the state vector [X.sub.n] =([X.sub.n1.,...,X.sub.nk])' of a LCG to produce real values between 0 and 1,that is of defining g : S [right arrow] U where U is some finite subset of[0,1].andP;  When m is large, a component [x.sub.ni] can be simply divided by m,yielding a result in [0,1).andP;  But it is often necessary to make sure that theresult lies strictly between 0 and 1.andP;  This can be accomplished by dividinginstead by m + 1, replacing first [x.sub.ni] by m when [x.sub.ni] = 0.andP;  Otherslightly more involved techniques are proposed in [68, 70].andM;Afflerbach and Grothe [3, 44, 45] use all the components of [X.sub.n] toobtain k U(0,1) variates at each iteration.andP;  L'Ecuyer and Blouin [57, 58] useonly [x.sub.nk] (the last component), which is equivalent to using a MRG.andP;  Asdiscussed previously, the former is equivalent to splitting.andM;When dividing [x.sub.ni] by (m + 1), the mesh size (or &quot;granularity&quot;) of theoutput is 1/(m + 1).andP;  For some applications, a smaller mesh size might benecessary (see, e.g., [29, 88]).andP;  One can then use a digital method, in whicha value [u.sub.n] [epsilon] (0,1) is produced byandM;[Mathematical Expression Omitted]andM;where p [is less than or equal to] m + 1 and t [is greather than or equal to]1 are integers (p could be for instance a power of two), and {[x.sub.i], i[is greater than or equal to] 0} is the sequence of all used vectorscomponents (or a sequence produced by (9)).andP;  Other variants are discussed in[72, 76, 80].andP;  Tausworthe and GFSR generators use a similar technique with p= 2.andP;  In the MRG case, the period of the [u.sub.n]'s always divides [m.sub.k]- 1.andP;  When [m.sup.k] - 1 and t are relatively prime, it is almost always[m.sup.k] - 1.andM;Statistical TestingandM;Knuth [52] describes a set of empirical statistical tests, usually viewed asthe &quot;standard&quot; ones.andP;  Many of them are included in the package of Dudewiczand Ralley [27].andP;  Marsaglia [65] describes others, supposedly more powerful.andO;Statistical tests are rather easy to design: any function of a finite set ofi.i.d.andP;  uniform random variables can be used as a statistic to define a testof hypothesis, if its distribution is known.andP;  To gain power, the test can berepeated N times, and the empirical distribution of the values of thestatistic can be compared to its theoretical distribution, using, forinstance, the Kolmogorov-Smirnov test [27, 56].andP;  Of course, the quality of agenerator can never be proven by any statistical test.andM;DisrecpancyandM;Besides empirical tests, some theoretical tests can give information aboutthe statistical behavior of certain generators, often over the full periodbut sometimes also for just part of the period.andP;  Examining the latticestructure of LCGs yields such tests.andP;  Other tests are based on the notion ofdiscrepancy.andP;  Informally, the discrepancy [Mathematical Expression Omitted]in t dimensions is the absolute difference between the expected number andactual number of vectors ([x.sub.n.,...,x.sub.n+t-1]), 0 [is less than orequal to] n [is less than] N, falling into a hyper-rectangular region withsides parallel to the axes, maximized over all such regions (or in somedefinitions, over those regions with a corner at the origin).andP;  Intuitively, adiscrepancy that is &quot;too high&quot; should be avoided.andP;  Also, a discrepancy thatis &quot;too low&quot; can indicate a sequence that is &quot;too regular&quot;.andP;  Some &quot;veryregular&quot; (so-called quasirandom) sequences, whose discrepancy has an order ofmagnitude lower than that of genuinely random sequences, are useful for someapplications [12, 75, 84].andP;  For many different classes of generators, boundson [Mathematical Expression Omitted] are available [72, 75, 76, 77, 80, 81,82, 84, 94, 95].andP;  These bounds can give some sort of &quot;protection&quot;.andP;  But onlyin rare cases, exact values can be computed.andP;  For instance, two-dimensionaldiscreptancy can  be computed efficiently for a class of LCGs [5].andP;  Aspointed out in [4, 52], the discrepancy is very sensitive to rotations of theaxis, in contrast to the Beyer-quotient or spectral test.andP;  This suggests thatrating generators on the basis of their discrepancy bounds is not necessarilythe best idea.andP;  On the other hand, discrepancy is a useful measure forgetting error bounds in numerical integration or for random searchprocedures.andP;  Further, bounds on some statistical quantities such as serialcorrelation can be obtained in terms of bounds on the discrepancy.andO;Niederreiter's survey [84] puts more emphasis on discrepancy and quasirandomsequences.andM;ConclusionandM;A lot has been written on uniform variate generation, but certainly, the lastword has not been said.andP;  As computing power gets progressively cheaper,applications will require increasingly robust generators.andP;  Classical LCGs oforder 1 are becoming unsatisfactory for some applications.andP;  For example, mylaptop computer needs less than 6 hours to loop around the whole period of aMLCG with modulus m = [2.sup.32] (and period length [2.sup.30]).andO;Supercomputers do the same in a few seconds.andP;  Increasing the modulus leads toimplementation problems.andP;  At the other extreme, GFSR generators, which usemodulus 2, can attain much longer periods and good statistical properties byusing a large order k.andP;  However, they use more space.andP;  But why stick to thesetwo extreme cases?andM;MRGs with a trinomial characteristic function, large m and say k [is greaterthan or equal to] 5, appear to be an excellent choice in terms of efficiencyand statistical quality.andP;  The unit cell volume of the associatedt-dimensional lattice, for t [is greater than] k, can be reduced byincreasing k.andP;  The mesh size can be reduced without increasing m by using adigital method to produce the output.andP;  Note that the digital method can beimplemented using different MRGs (evolving in parallel) for different digits.andO;Non-linear transformations can also be used at this stage, but at the expenseof reduced speed if no hardware implementation is at hand.andP;  PT-perfectgenerators offer a good stimulus for further research.andM;ReferencesandM;[1] Afflerbach, L.andP;  The sub-lattice structure of linear congruential randomnumber generators.andP;  Manusc.andP;  Math.andP;  55 (1986), 455-465.andM;[2] Afflerbach, L. and Grothe, H. Calculation of Minkowski-reduced latticebases.andP;  Computing 35 (1985), 269-276.andM;[3] Afflerbach, L. and Grothe, H.andP;  The lattice structure of pseudorandomvectors generated by matrix generators.andP;  J. of Comput.andP;  and Applied Math.andP;  23(1988), 127-131.andM;[4] Afflerbach, L. and Weilbacher, R.andP;  On Using Discrepancy for theAssessment of Pseudorandom Number Generators.andP;  Submitted for publication,1988.andM;[5] Afflerbach, L. and Weilbacher, R.andP;  The exact determination of rectanglediscrepancy for linear congruential pseudorandom numbers.andP;  Math.andP;  of Comput.andO;53, 187 (July 1989) 343-354.andM;[6] Alexi, W., Chor, B., Goldreich, O. and Schnorr, C. P. RSA and RabinFunctions: Certain parts are as hard as the whole.andP;  SIAM J. on Comput.andP;  17, 2(1988) 194-209.andM;[7] Andre, D. L., Mullen, G. L., and Niederreiter, H. Figures of merit fordigital multistep pseudorandom numbers.andP;  Math.andP;  of Comput.andP;  To be published,1990.andM;[8] Arvillias, A. C. and Maritsas, D. G.andP;  Partitioning the period of a classof m-sequences and application to pseudorandom number generation.andP;  J. ACM 25,4 (1978) 675-686.andM;[9] Blum, L., Blum, M. and Schub, M. A simple unpredictable pseudorandomnumber generator.andP;  SIAM J. Comput.andP;  15, 2 (1986) 364-383.andM;[10] Boyar, J.andP;  Inferring sequences produced by pseudo-random numbergenerators.andP;  J. ACM 36, 1 (1989) 129-141.andM;[11] Brassard, G. and Bratley P. Algorithmics, Theory and Practice.andO;Prentice-Hall, Englewood Cliffs, N.J., 1988.andM;[12] Bratley, P. and Fox, B. L. Algorithm 659: Implementing Sobol'squasirandom sequence generator.andP;  ACM Trans.andP;  on Math.andP;  Softw.andP;  14, 1 (Mar.andO;1988) 88-100.andM;[13] Bratley, P. Fox, B. L. and Schrage, L. E.andP;  A Guide to Simulation.andP;  2ded.andP;  Springer-Verlag, New York, 1987.andM;[14] Brown, M. and Solomon, H.andP;  On combining pseudorandom number generators.andO;Ann.andP;  Stat.andP;  1 (1979) 691-695.andM;[15] Carta, D. G.andP;  Two fast implementations of the &quot;minimal standard&quot; randomnumber generator.andP;  Commun.ACM 33, 1 (Jan.andP;  1990) 87-88.andM;[16] Celmaster, W. and Moriarty, K. J. M.andP;  A method for vectorized randomnumber generators.andP;  J. Comput.andP;  Phys.andP;  64 (1986) 274-275.andM;[17] Chassaing, P.andP;  An optimal random number generator on [Z.sub.p].andP;  Stat.andO;and Prob.andP;  Lett.andP;  7 (1989) 307-309.andM;[18] Chor, B. and Goldreich, O. Unbiased bits from sources of weakrandomeness and probabilistic communication complexity.andP;  SIAM J. Comput.andP;  17,2 (1988) 230-261.andM;[19] Chung, F. R. K., Diaconis, P., and Graham, R. L. Random walks arising inrandom number generation.andP;  Ann.andP;  Probab.andP;  15, 3 (1987) 1148-1165.andM;[20] Collings, B. J. Compound random number generators.andP;  J. Am.andP;  Stat.andO;Assoc.andP;  82, 398 (1987) 525-527.andM;[21] Collings, B. J. and Hembree, G. B.andP;  Initializing generalized feedbackshift register pseudorandom number generators.andP;  J. ACM 33 (1986) 706-711.andP;  A,also in J. ACM, 35, 4 (1988) 1001.andM;[22] Compagner, A. and Hoogland, A.andP;  Maximum length sequences, cellularautomata, and random numbers.andP;  J. Comput.andP;  Phys.andP;  71 (1987) 391-428.andM;[23] Dagpunar, J. Principles of Random Variate Generation.andP;  Oxford UniversityPress, 1988.andM;[24] De Matteis, A. and Pagnutti, S.andP;  Parallelization of random numbergenerators and long-range correlations.andP;  Numerische Mathematik 53 (1988)595-608.andM;[25] Devroye, L.andP;  Non-Uniform Random Variate Generation.andP;  Springer-Verlag,New York, 1986.andM;[26] Dieter, U.andP;  How to calculate shortest vectors in a lattice.andP;  Math.andO;Comput., 29, 131 (1975) 827-833.andM;[27] Dudewicz, E. J. and Ralley, T. G.andP;  The Handbook of Random NumberGeneration and Testing with TESTRAND Computer Code.andP;  American Sciences Press,Columbus, Ohio, 1981.andM;[28] Durst, M. J.andP;  Using linear congruential generators for parallel randomnumber generation.andP;  In Proceedings of the 1989 Winter Simulation Conference.andO;IEEE Press (1989) pp.andP;  462-466.andM;[29] Eichenauer, J. and Lehn, J.andP;  A Nonlinear congruential pseudorandomnumber generator.andP;  Statistische Hefte, 27 (1986) 315-326.andM;[30] Eichenauer, J. and Lehn, J.andP;  On the structure of quadratic congruentialsequences.andP;  Manusc.andP;  Math., 58 (1987) 129-140.andM;[31] Eichenauer, J., Grothe, H., Lehn, J. and Topuzoglu, A.andP;  A multiplerecursive nonlinear congruential pseudorandom number generator.andP;  Manus.andO;Math.andP;  59 (1987) 331-346.andM;[32] Eichenauer, J., Lehn, J. and Topuzoglu, A.andP;  A nonlinear congruentialpseudorandom number generator with power of two modulus.andP;  Math.andP;  Comput.andP;  51,184 (1988) 757-759.andM;[33] Eichenauer-Herrmann, J., Grothe, H. and Lehn, J.andP;  On the period lengthof pseudorandom vector sequences generated by matrix generators.andP;  Math.andO;Comput.andP;  52, 185 (1989) 145-148.andM;[34] Eichenauer-Herrmann, J.andP;  Inversive congruential pseuderandom numbersavoid the planes.andP;  Math.andP;  Comput.andP;  (1990).andP;  To be published.andM;[35] Fishman, G. S. Multiplicative congruential random number generators withmodulus [2.sup.[beta]]: an exhaustive analysis for [beta] = 32 and a partialanalysis for [beta] = 48.andP;  Math.andP;  Comput.andP;  54, 189 (Jan 1990) 331--344.andM;[36] Fishman, G. S. and Moore III,andM;L.andP;  S.andP;   An exhaustive analysis ofandM;multiplicative congruential random number generators with modulus [2.sup.31]- 1.andP;  SIAM J. Sci.andP;  and Stat.andP;  Comput.andP;  7, 1 (1986) 24-45.andM;[37] Fushimi, M.andP;  Increasing the orders of equidistribution of the leadingbits of the Tauworthe sequence.andP;  Inf.andP;  Proc.andP;  Lett.andP;  16 (1983) 189-192.andM;[38] Fushimi, M.andP;  Designing a uniform random number generator whosesubsequences are k-distributed.andP;  SIAM J. Comput.andP;  17, 1 (1988) 89-99.andM;[39] Fushimi, M.andP;  An equivalence relation between Tausworthe and GFSRsequences and applications.andP;  Applied Math.andP;  Let.andP;  2, 2 (1989) 135-137.andM;[40] Fushimi, M. Random number generation on parallel processors.andP;  InProceedings of the 1989 Winter Simulation Conference.andP;  IEEE Press (1989) pp.andO;459-461.andM;[41] Fushimi, M. Random number generation with the recursion [X.sub.t] =[X.sub.t-3p] [unkeyable character] * [X.sub.T-3q].andP;  In Comput.andP;  and AppliedMath.andP;  (1990).andP;  To be published.andM;[42] Fushimi, M. and Tezuka, S.andP;  The k-distribution of generalized feedbackshift register pseudorandom numbers.andP;  Commun.andP;  ACM 26, 7 (1983) 516-523.andM;[43] Goldreich, O., Goldwasser, S. and Micali, S.andP;  How to construct randomfunctions.andP;  J. ACM 33, 4 (1986) 792-807.andM;[44] Grothe, H. Matrix generators for pseudo-random vectors generation.andO;Stat.andP;  Hefte 28 (1987) 233-238.andM;[45] Grothe, H.andP;  Matrixgeneratoren zur Erzeugung gleichverteilterPseudozufallsvektoren (in german).andP;  Dissertation (thesis), Tech.andP;  HochschuleDarmstadt, Germany, 1988.andM;[46] Grube, A. Mehrfach rekursiverzeugte Pseudo-Zufallszahlen (in german).andO;Zeitschrift fur angewandte Math.andP;  und Mechanik 53 (1973) T223-T225.andM;[47] Guinier, D.andP;  A fast uniform &quot;Astronomical&quot; random number generator.andP;  ACMSIGSAC Rev.andP;  7, 1 (Spring 1989), 1-13.andM;[48] Haas, A.andP;  The multiple prime random number generator.andP;  ACM Trans.andP;  Math.andO;Softw.andP;  13, 4 (1987) 368-381.andM;[49] Halton, J. H.andP;  Pseudo-random trees: Multiple independent sequencegenerators for parallel and branching computations.andP;  J. Comput.andP;  Phys.andP;  84(1989) 1-56.andM;[50] Hosack, J. M.andP;  The use of cebyse mixing to generate pseudo-randomnumbers.andP;  J. Computer.andP;  Phys.andP;  67 (1986) 482-486.andM;[51] Kannan, R., Lenstra, A. K. and Lovasz, L.andP;  Polynomial factorization andnonrandomness of bits of algebraic and some transcendental numbers.andP;  Math.andO;Comput.andP;  50, 181 (1988) 235-250.andM;[52] Knuth, D. E.andP;  The Art of Computer Programming Vol.andP;  2 SeminumericalAlgorithms, 2d ed.andP;  Addision-Wesley, 1981.andM;[53] Koniges, A. E. and Keith, C. E. Parallel processing of random numbergeneration for Monte Carlo turbulence simulation.andP;  J. of Comput.andP;  Phys.andP;  81(1989) 230-235.andM;[54] Law, A. M. and Kelton, W. D.andP;  Simulation Modeling and Analysis, 2d ed.,andO;McGraw-Hill, 1991.andP;  To be pub lished.andM;[55] L'Ecuyer, P.andP;  A portable random number generator for 16-bit computers.andO;Modeling and Simulation on Microcomputers 1987.andP;  The Society for ComputerSimulation (1987), pp.andP;  45-49.andM;[56] L'Ecuyer, P.andP;  Efficient and portable combined random number generators.andO;Commun.andP;  ACM 31, 6 (1988) 742-749 and 774.andP;  Also see the correspondance inCommun.andP;  ACM 32, 8 (1989) 1019-1024.andM;[57] L'Ecuyer, P. and Blouin, F.andP;  Linear congruential generators of order k[is greater than] 1.andP;  In Proceedings of the 1988 Winter SimulationConference, IEEE Press, (1988), pp.andP;  432-439.andM;[58] L'Ecuyer, P. and Blouin, F.andP;  Multiple Recursive and Matrix LinearCongruential Generators.andP;  Submitted for publication, 1990.andM;[59] L'Ecuyer, P. and Cote, S.andP;  Implementing a random number package withsplitting facilities.andP;  ACM Trans.andP;  on Math.andP;  Softw.andP;  1990.andP;  To be published.andM;[69] L'Ecuyer, P. and Proulx, R.andP;  About Polynomial-Time &quot;Unpredictable&quot;Generators.andP;  In Proceedings of the 1989 Winter Simulation Conference, IEEEPress, (1989), pp.andP;  467-476.andM;[61] L'Ecuyer, P. and Tezuka, S.andP;  Structural Properties for Two Classes ofCombined Generators.andP;  Submitted for publication, 1990.andM;[62] Lewis, T. G. and Payne, W. H.andP;  Generalized feedback shift registerpseudorandom number algorithm.andP;  J.andP;  ACM 20, 3 (1973) 456-468.andM;[63] Lidl, R. and Niederreiter, H.andP;  Introduction to Finite Fields and TheirApplications.andP;  Cambridge University Press, Cambridge, 1986.andM;[64] Marsaglia, G.andP;  Random numbers fall mainly in the planes.andP;  In Proceedingsof the National Academy of Sciences of the United States of America 60 (1968)pp.andP;  25-28.andM;[65] Marsaglia, G.andP;  A Current View of Random Number Generation.andP;  Computerscience and statistics.andP;  In Proceedings of the Sixteenth Symposium on theInterface (Atlanta, March 1984).andP;  Elsevier Science Publ., North-Holland,1985, pp.andP;  3-10.andM;[66] Marsaglia, G. and Tsay, L.-H.andP;  Martrices and the structure of randomnumber sequences.andP;  Linear Algebra and its Appl.andP;  67 (1985) 147-156.andM;[67] Marsaglia, G., Zaman, A., and Tsang, W. W.andP;  Towards a universal randomnumber generator.andP;  Stat.andP;  and Prob.andP;  Lett.andP;  8 (1990) 35-39.andM;[68] Marse, K. and Roberts, S. D.andP;  Implementing a portable FORTRAN uniform(0,1) generator.andP;  Simulation 41, 4 (1983) 135-139.andM;[69] Modianos, D. T., Scott, R. C. and Cornwell, L. W.andP;  Testing intrinsicrandom number generators.andP;  Byte, 12, 1 (1987) 175-178.andM;[70] Monahan, J. F.andP;  Accuracy in Random Number Generation.andP;  Math.andP;  ofComput., 45, 172 (1985) 559-568.andM;[71] Morain, F.andP;  Implementation of the Atkin-Goldwaster-Kilian primalitytesting algorithm.andP;  Rap.andP;  de recherche 911, INRIA, Rocquencourt, France,1988.andM;[72] Mullen, G. L. and Niederreiter, H.andP;  Optimal characteristic polynomialsfor digital multistep pseudorandom numbers.andP;  Computing 39 (1987) 155-163.andM;[73] Nance, R. E. and Overstreet, C., Jr.andP;  Some experimental observations onthe behavior of composite random number generators.andP;  Oper.andP;  Res.andP;  26, 5(1978) 915-935.andM;[74] Narkiewicz, W.andP;  Uniform Distribution of Sequences of Integers in ResidueClasses.andP;  Lecture Notes in Mathematics, 1087, Springer-Verlag, 1984.andM;[75] Niederreiter, H.andP;  Quasi-Monte Carlo methods and pseudorandom numbers.andO;Bull.andP;  Am.andP;  Math.andP;  Soc.andP;  84, 6 (1978) 957-1041.andM;[76] Niederreiter, H.andP;  A pseudorandom vector generator based on finite fieldarithmetic.andP;  Math.andP;  Japonica 31, 5 (1986) 759-774.andM;[77] Niederreiter, H.andP;  A statistical analysis of generalized feedback shiftregister pseudorandom number generators.andP;  SIAM J. Sci.andP;  Stat.andP;  Comput.andP;  8, 6(1987) 1035-1051.andM;[78] Niederreiter, H.andP;  Remarks on non-linear congruential pseudorandomnumbers.andP;  Metrika 35 (1988) 321-328.andM;[79] Niederreiter, H.andP;  Statistical independence of nonlinear congruentialpseudorandom numbers.andP;  Monatshefte fur Mathematik 106 (1988) 149-159.andM;[80] Niederreiter, H.andP;  The Serial Test for Digital k-Step PseuderandomNumbers.andP;  Math.andP;  J. Okayama Univ.andP;  30 (1988) 93-119.andM;[81] Niederreiter, J.andP;  The serial test for congruential pseudorandom numbersgenerated by inversions.andP;  Math.andP;  of Comput.andP;  52, 185 (1989) 135-144.andM;[82] Niederreiter, H. Lower bounds for the discrepancy of inversivecongruential pseudorandom numbers.andP;  Math.andP;  Comput.andP;  1990.andP;  To be published.andM;[83] Niederreiter, H.andP;  Statistical independance properties of pseudorandomvectors produced by matrix generators.andP;  J. Comput.andP;  Appl.andP;  Math.andP;  1990.andP;  Tobe published.andM;[84] Niederreiter, H.andP;  Recent trends in random number and random vectorgeneration.andP;  Ann.andP;  Oper.andP;  Res.andP;  1990.andP;  To be published.andM;[85] Park, S. K. and Miller, K. W. Random number generators: Good ones arehared to find.andP;  Commun.andP;  ACM 31, 10 (1988) 1192-1201.andM;[86] Percus, D. E. and Kalos, M. Random number generators for MIMD parallelprocessors.andP;  J. Parallel and Distributed Comput.andP;  6 (1989) 477-497.andM;[87] Reif, J. H. and Tygar, J. D.andP;  Efficient parallel pseudorandom numbergeneration.andP;  SIAM J. Comput.andP;  17, 2 (1988) 404-411.andM;[88] Ripley, B. D.andP;  The Lattice Structure of Pseudo-random Number Generators.andO;In Proceedings of the Royal Society of London, 389 Ser.andP;  A, (1983) pp.andO;197-204.andM;[89] Ripley, B. D.andP;  Stochastic Simulation.andP;  Wiley, New York, 1987.andM;[90] Ripley, B. D.andP;  Uses and abuses of statistical simulation.andP;  Math.andP;  Prog.,andO;42 (1988) 53-68.andM;[91] Stern, J.andP;  Secret linear congruential generators are notcryptographically secure.andP;  In Proceedings of the 28th IEEE Symposium onFoundations of Computer Science (1987) pp.andP;  421-426.andM;[92] Tausworthe, R. C.andP;  Random numbers generated by linear recurrence modulotwo.andP;  Math.andP;  of Comput., 19 (1965) 201-209.andM;[93] Tezuka, S. Walsh-spectral test for GFSR pseudorandom numbers.andP;  Commun.andO;ACM 30, 8 (Aug.andP;  1987) 731-735.andM;[94] Tezuka, S.andP;  On the disrepancy of GFSR pseudorandom numbers.andP;  J.andP;  ACM 34,4 (Oct.andP;  1987), 939-949.andM;[95] Tezuka, S.andP;  On optimal GFSR pseudorandom number generators.andP;  Math.andP;  ofComputat.andP;  50, 182 (Apr.andP;  1988) 531-533.andM;[96] Tezuka, S. Random number generation based on the polynomial arithmeticmodulo two.andP;  Rep.andP;  RT-0017, IBM Research, Tokyo Research Laboratory, Oct.andO;1989.andM;[97] Tezuka, S.andP;  Analysis of L'Ecuyer's combined random number generator.andO;RT-5014.andP;  IBM Research, Tokyo Research Laboratory, Nov. 1989.andM;[98] Tindo, G. Automates cellulaires; application a la modelisation decertains systemes discrets et a la conception d'une architecture parallelepour la generation de suites pseudo-aleatoires.andP;  These de doctorat eninformatique, Universite de Nantes, France, Jan. 1990.andM;[99] Wichmann, B. A. and Hill, I. D.andP;  An Efficient and portable pseudorandomnumber generator.andP;  Appl.andP;  Stat.andP;  31 (1982) 188-190.andP;  Also see corrections andremarks in the same journal by Wichmann and Hill 33 123; (1984) McLeod 34(1985) 198-200; Zeisel 35 (1986) 89.andM;[100] Wichmann, B. A. and Hill, I. D.andP;  Building a random number generator.andO;Byte 12, 3 (1987) 127-128.andM;[101] Wikramaratna, R. S. ACORN--A new method for generating sequences ofuniformly distributed pseudo-random numbers.andP;  J. Comput.andP;  Phys.andP;  83 (1989)16-31.andM;PIERRE L'ECUYER is a professor at the Universite de Montreal.andO;</TEXT></DOC>