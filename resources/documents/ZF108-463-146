<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-463-146  </DOCNO><DOCID>08 463 146.andM;</DOCID><JOURNAL>Computer Language  June 1990 v7 n6 p11(3)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Feedback. (letter to the editor)</TITLE><AUTHOR>Bulaon, Steven; Sturmer, Carl; Moriarty, Mark F.; Merriam,Rudyard; Schindler, Max J.; Constantine, Larry L.; Elo, Arpad, Jr.andM;</AUTHOR><DESCRIPT/><TEXT>FEEDBACKandM;Elitist ZealandM;Dear Editor:andM;As I read Karen Hooten's &quot;Technical professional responsibilities&quot;(Programming by Profession, Apr. 1990), I began to wonder if I should bewashing dishes at a diner instead of programming.andP;  According to Hooten, Ihave been masquerading as a &quot;professional&quot; programmer for more than 10 yearswhen I am really just an uneducated, self-taught hacker.andM;Hooten rightly cites the damage the Robert Morris/Internet Worm has done tothe computing profession.andP;  Unsatisfied with the negative publicity alreadyshowered upon this event, Hooten, with elitist zeal, has denigrated an entiresegment of the programming community by labeling us &quot;unprofessional&quot; solelyon the basis of education.andM;I would like to remind Hooten that the qualities of professionalism andcompetence, in any endeavor, are not handed out on graduation day in the formof a degree.andP;  These qualities are a culmination of character, experience, andeducation (formal or not).andM;Please keep these thoughts in mind and remember to ask for proof of anelectrical engineering degree before the electriciaan installs that newceiling fan.andP;  Who knows what damage the idiot could do? Steven Bulaon Davie,Fla.andM;Durable ObjectsandM;Dear Editor:andM;I agree with the views in Karen Hooten's column and have soapboxed themmyself for the past two years.andP;  The only fault I can find with her column isthe suggestion that programmers be licensed.andP;  If that had been an industrystandard when I started, I would never have gotten my first job or theopportunity to see if I could cut it in the real world (at least not withinthe time frame I did).andM;I am more in favor of an apprenticeship program that requires you to studyunder someone until they are ready to send you off with letters ofcompetence.andP;  Doctors, lawyers, and architects do it, and our profession issimilar to theirs in many ways.andP;  Universities can only teach so much in thetime they have.andP;  Besides, you need real work experience to be useful to theprofession or a client.andM;This field is one of the few that doesn't require a degree.andP;  Being good insoftware development takes as much (if not more) time and study as themedical and legal professions.andP;  It takes more time to become a goodprogrammer than a good doctor--our architecture changes daily, whereas thedoctor's remains the same, and our complexity is doubled and sometimesquadrupled every year.andM;How will it be for the kids who are trying to get a foothold 10 years fromnow?andP;  We won't be able to spend four to 10 years preparing someone for anentry-level position.andP;  I don't think we could find anyone willing to endureit.andM;I once gave a lecture at a junior college--one of those nasty career days.andP;  Itold the kids what it took to make it as a programmer, and they thought I wascrazy.andP;  They asked, &quot;Why in the world would you want to study 10 to 16 hoursa day, for no pay, for three to four years--just to get a job, then spend therest of your life studying to be good at it?&quot;andP;  The only answer I had was:&quot;For the love, challenge, and excitement of it.&quot;andP;  I am sure most of them wentaway thinking, &quot;That's not for me.&quot;andP;  But it's o.k.; I was looking to sparkthat one individual in a thousand who sees the logic behind it.andM;We are rapidly approaching a time when you may create an object that willlive longer than you do.andP;  Programs are revised, annotated, and made morecomplete as time goes on without the code ever being touched by human hands.andO;Building these systems will take special individuals.andP;  We need them to starttraining now!andP;  In 20 years, the logic behind programming may be taught fromthe first grade up, and the actual programming may involve speech commandsinstead of typing or mousing.andP;  However, I can't see the day when programmmingis not required to build and maintain new systems.andM;The most important thing I try to remember is that schools can't teachprogramming right now, so we must.andP;  It is our responsibility as professionalsto make ourselves available to those willing to learn.andP;  If we are trueprogrammers, we have nothing to lose and everything to gain by teaching whatwe know now and continuing to study for tomorrow's lesson.andM;Hooten's column was moving.andP;  It showed a great deal of enthusiasm andpassion.andP;  I have only met a handful of people who have her drive andcommitment.andP;  I am proud to know that I am not the only one who loves thisstuff and is willing to fight to keep it an honored profession and art format all costs.andP;  Carl Sturner Stephenville, TexasandM;Misguided MissileandM;Dear Editor:andM;Karen Hooten's column was interesting.andP;  However, I take strong exception tothe statement, &quot;One COBOL course, and we unleash these programmers to writeapplications that control...space exploration and defense systems.&quot;andM;Hooten should be aware that professionals do not make gross misstatements inareas of which they claim knowledge.andP;  Even neophytes to the acquisition ofmajor government systems (space and defense) are aware of the stringentcontrols placed on software, as embodied in numerous military standards,requirements for detailed company software policy and procedure manuals, andextensive review and validation phases.andM;In my work on both sides of the procurement fence, I have observed uniformlyhigh quality in both personnel training and dedication to professionalism.andO;The errors that do occur have been generally attributable to the extremecomplexity of the product involved.andP;  Comparing these highly trainedindividuals with those who have had one.andP;  COBOL course is a tremendousdisservice.andP;  Mark F. Moriarty Baldwinsville, N.Y.andM;Sorry, AbeandM;Dear Editor:andM;I have a problem accepting programmers or engineers as professionals.andP;  KarenHooten defines a professional as someone &quot;...engaged in...a profession.&quot;andO;Webster defines a profession as an &quot;occupation requiring advanced training insome liberal art or science...&quot; and later includes engineering (I'll acceptthat as covering programming) as an example profession.andM;But what &quot;advanced training&quot; is required to be an engineer orprogrammer--especially compared to the standard professions of law, medicine,and accounting?andP;  A bachelor's degree does not qualify.andP;  If it did, mostmanagers would be &quot;business professionals.&quot;andP;  How many programmers even have afour-year college degree?andP;  Many are vocational- or trade-school graduates.andM;How many people do you know who read a book on BASIC 10 years ago, puttogether some business program on a TRS-8-, and became programmers byexpanding on that background?andP;  Are they to be considered professionals?andO;Would you accept legal representation from someone who learned law by readinga book?andP;  I wouldn't today--even if his name was Abe Lincoln.andM;That is not to say that programmers shouldn't work toward professionalstandards.andP;  The Independent Computer Consultants Association is presentlyaddressing the issue of ethical programming standards.andP;  ACM and IEEE alsoprovide ethical guidelines, but their provisions for the average workingprogrammer are very limited and more oriented toward academia and management.andO;Rudyard Merriam Houston, TexasandM;Et voilaandM;Dear Editor:andM;Jack Weaver's &quot;Professionalism!&quot;andP;  (Apr.andP;  1990) may seem farfetched to mostreaders, so let me share an experience I had some years ago.andP;  I was visitingthe group of people who developed Ada at Honeywell-Bull outside Paris.andP;  LaGrande Nation had just turned the lab into pure Bull and most of the teammembers were marking time--except for one busy bunch.andP;  I insisted on learningwhat they were up to, and finally one of them volunteered, with a sheepishgrin: &quot;We are translating UNIX into Pascal.&quot;andM;Dumbfounded, I wanted to know why.andP;  It seems Pascal had just been declaredthe national language.andP;  &quot;You see,&quot; my friend enlightened me, &quot;we want to haveall that you have, but it must be a leetle different.&quot;andP;  Q.E.D.andP;  Max J.andO;Schindler Boonton, N.J.andM;Just the factsandM;Dear Editor:andM;In their concise introduction to &quot;Recursive Design&quot; (Mar.andP;  1990), SallySchlaer and Stephen Mellor present an appealing conceptual framework forlinking systems analysis and design.andP;  &quot;By contrast,&quot; they state, &quot;structureddesign was developed to express the design of a single program as opposed toa whole system.&quot;andP;  They cite for this assertion the 1980 edition of MeilirPage-Jone's The Practical Guide of Structured Systems Design, an excellent,readable interpretation, but not the primary source.andM;Structured design was developed to express the design of whole system's.andP;  Theoriginal source (which is, or course, my book with Ed Yourdon, StructuredDesign), makes clear that a &quot;program&quot; is just another kind of module orparticular packaging of modules, that packaging a system into discreteprograms is a deferrable set of design decisions, and that the structurespecification of the system as a whole is the appropriate target ofstructured design.andP;  The notion of separate &quot;packaging&quot; as a form ofimplementation mapping is included in Page-Jone's book, but perhaps lessforcefully.andM;Furthermore, the capabilities of modeling multitasking, messages, and so on(which Schlaer and Mellor assert are lacking in structured design) are andalways have been part of the model and the method, as a reading of StructuredDesign will reveal.andP;  I had to fight with editors to keep such &quot;futuristic&quot;and &quot;theoretical&quot; material in the book.andP;  But I had developed structure chartsas a fully generalized modeling tool, and, as early as 1968, the notationincorporated carefully thought-out features for representing tasks,coroutines, asynchronous messages, and the like.andM;Structured design, as typically practiced by software developers, isgenerally limited to hierarchical designs of single programs.andP;  However, thisis not a feature of the method or models but of the restricted subset thatmost developers bother to learn about or use.andM;Recursive design my indeed have some useful features or potential advantages,but if readers of COMPUTER LANGUAGE are to make informed decisions aboutdifferent methods, they need to have the real facts.andP;  Larry L. ConstantineActon, Mass.andM;Resourceful usersandM;Dear Editor:andM;Stan Kelly-Bootle's reflections on exit in the March issue (&quot;Consistency:Friend or foe?&quot;) evoked some nearly 25-year-old memories that hold importantlessons for human interface designers and user-manual writers even today.andM;At the time, my organization subscribed to a primitive time-sharing servicein which the command to log off was FINISH and no abbreviations wereaccepted.andP;  I had left one of my assistants to perform a simple statisticalanalysis, using what was (for its day) some very user-friendly cannedsoftware.andP;  When he didn't return in an hour, I went to see what was wrong.andO;The statistical analysis was done, but my assistant had spent nearly half anhour trying to log off.andP;  He had tried a number of intuitively obviouscommands, such as QUIT, END, and BYE, but, possibly owing to some deep-seatedancestral memory, when he tried FINISH, he spelled it FINNISH!andP;  After that,we were careful to teach new users how to log off before teaching them how tolog on.andM;A few weeks later, the same man became one of the earliest practitioners ofgoto-less programming.andP;  As a not-very-advanced student of FORTRAN, he hadlearned to use the arithmetic if statement, but not the goto.andP;  His ingenioussolution to the need for an unconditional transfer of control came to beknown in the shop as the &quot;Mandel if&quot;: IF (JUNK) 10,10,10.andM;Users will experiment until they find something that works, provided thesystem gives them the freedom to do so.andP;  I question the wisdom of providing arigid human-machine interface that encourages users to employ tools withoutunderstanding them.andP;  Any short-term gain in user productivity occurs at theexpense of leaving users totally unprepared to cope with unforeseen events.andO;Industrial psychologists have long known that people respond more favorablyto a reasonable challenge than spoon-feeding.andP;  An interface can challenge theuser's intelligence without overtaxing it, provided the system issufficiently bulletproof to survive experimentation.andP;  Arpad Elo, Jr.andP;  St.andO;Johnsbury, Vt.andO;</TEXT></DOC>