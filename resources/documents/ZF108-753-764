<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-753-764  </DOCNO><DOCID>08 753 764.andM;</DOCID><JOURNAL>Computing Canada  July 19 1990 v16 n15 p20(1)* Full Text COPYRIGHT Plesman Publications Ltd. (Canada) 1990.andM;</JOURNAL><TITLE>Developing software Unix-style. (Unix) (column)</TITLE><AUTHOR>Fitzmaurice, Shev.andM;</AUTHOR><SUMMARY>Because of its origins as an operating system designed tofacilitate software engineering, the Unix system offerssignificant advantages for software developers.andP;  In fact, thesystem was designed to include a number of tools that make iteasier to share software programs and data.andP;  The portability ofthe software to other Unix systems is what gives the Unix systemits key applications programming advantage.andP;  The X/OpenPortability Guide (XPG) standard establishes guidelines thatassure the portability of the source code.andP;  Ideally, the resultantsystem will be portable, on-time and within budgetary limits.andM;</SUMMARY><DESCRIPT>Topic:     UNIXSoftware EngineeringSource CodeSoftware MigrationApplications Programming.andM;</DESCRIPT><TEXT>Developing software Unix-styleandM;Is software development easier on Unix than on other systems?andP;  Is it anydifferent on Unix systems?andM;This is an interesting question because technological advances seem to bebottlenecked behind software.andP;  We are now at a stage where hardware advancesare easily outpacing software advances.andP;  So, will the move to Unix help orhinder or have no effect?andM;Certain aspects of software development are, or should be, universal.andP;  First,working without a specification will almost certainly guarantee a failure.andO;That doesn't mean all of the 'i's must be dotted on the specification beforecoding begins.andP;  Many developers now use prototype software to help pin downsystem requirements.andP;  This is fine as long as someone has the authority tolimit the prototyping stage.andM;Once the specification is complete, development cannot begin in earnest untila development plan is in place.andP;  Simply put, this plan will describe whatmust be done (with help from the specification), when it must be complete,who will do it and how to determine that the software is complete.andM;In order to know when the software will be complete, it will be necessary toestimate the time required to develop the software.andM;This is the weakest link of any project.andP;  The critical issue here is to breakthe specification into small tasks and estimate each task individually.andM;Once estimation is complete on each task, the development plan can proceedwith a schedule of who will complete which task and when.andM;For large systems it will be necessary to subdivide the final deliverableinto monthly milestones.andM;Is the development plan done?andP;  No quite.andP;  Never forget acceptance tests.andO;These are conditions or tests which the software must pass before it isconsidered complete.andP;  What else can go wrong with a project?andP;  One person mustbe in charge.andM;It is my opinion that much software is delayed in the specification stagebecause it is designed by committees consisting of people strong on ideas andweak on authority.andM;Imperfect softwareandM;It is better to produce imperfect software on time than to produce perfectsoftware two years late.andP;  Remember that when it comes to software, time is ofessence.andM;How does Unix affect this process?andP;  Unix was initially created for softwaredevelopers, so it comes with a variety of tools to aid the process.andO;Programmers will find Unix systems offer convenient methods to share softwareand data.andM;The critical advantage of developing on Unix systems is that with a littleeffort the resulting software will be easily portable to other Unix systems.andO;This adds tremendous value to software.andM;Portable softwareandM;Capitalizing on Unix, therefore, requires that software be portable.andP;  In mostcases, writing portable software is no more expensive than writingnon-portable software.andM;An excellent Unix programming standard exists called X/Open Portability Guide(XPG).andP;  Program within these guidelines and your code will be portable.andP;  Ifportability is of prime importance, monthly milestones should be delivered toa Unix system running a different version of Unix and possessing a differentprocessor (i.e.andP;  CISC vs RISC).andM;Unix can leverage tremendous value into software development if the resultingsoftware is portable.andP;  The ideal system is portable, on-time and on budget.andO;It is a result of disciplined planning, clear lines of authority and theefforts of talented people.andO;</TEXT></DOC>