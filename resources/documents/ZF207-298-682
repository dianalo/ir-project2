<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-298-682  </DOCNO><DOCID>07 298 682.andM;</DOCID><JOURNAL>Computer Language  Feb 1989 v6 n2 p117(11)* Full Text COPYRIGHT Miller-Freeman 1989.andM;</JOURNAL><TITLE>Three Cs for the Macintosh.andO;</TITLE><AUTHOR>Gordon, Bob.andM;</AUTHOR><SUMMARY>An evaluation and comparison of the current versions of three Ccompilers for the Macintosh computer (Symantec Corp's $175 Think C3.0, Manx Software Systems' $189 Aztec C 3.6, and the AppleProgrammers and Developer Association's $200 MPW C) suggests thatthe compiler to select depends in large part upon the Cprogramming environment that is being used.andP;  The favored Cprogramming environments are usually the MPW and Think products.andO;Consequently, the Think C compiler would be chosen for the Think Cprogramming environment, though the compiler also offers excellentspeed for debugging.andP;  The Aztec C compiler is found to be moresuitable for the MPW C programming environment than the MPW Ccompiler because the Manx product fits better with the Macintoshtool box.andP;  Details, comparison, and benchmarking of the Ccompilers are described.andM;</SUMMARY><DESCRIPT>Product:   Think C 3.0 (Compiler) (product specifications)Aztec C 3.6 (Compiler) (product specifications)MPW C (Compiler) (product specifications)Apple Macintosh (Microcomputer) (computer programs).andO;Topic:     CompilersComparisonC Programming Language.andO;Feature:   illustrationtable.andO;Caption:   Rebuilding the program. (table)Performance benchmarks - seconds. (table)Dhrystone benchmarks - interations-sec. (table)andM;</DESCRIPT><TEXT>Three Cs for the Macintosh This review is not finished.andP;  The problem is notmy ability to review but that the companies making C compilers for theMacintosh are releasing new versions all the time.andP;  C is one of the morepopular languages available for the Macintosh, and has been used to developmany programs.andP;  I examined current versions of three C compilers:ManxSoftware Systems' Aztec C, Symantec Corp.'s Think C, and the Apple Corp.'sMPW C.andP;  However, Symantec had just released a new version, Aztec is in theprocess of releasing completely updated documentation, and a new MPW C is inbeta test.andM;Programming the Macintosh isn't like programming DOS machines.andP;  Certainissues you consider in evaluating a compiler are unique to the Macintoshenvironment.andP;  Before discussing these compilers, I will discuss some issuesto consider when choosing among them.andM;Built-in functionsandM;The Macintosh is well known for its ease of use and consistent userinterface.andP;  This consistency is only partly explained by Apple's interfaceguidelines; much is the result of built-it ROM-based programmer's aids -- theprogrammer's toolbox.andP;  The toolbox contains about 500 functions that handlewindows, menus, dialogues, memory management, and a dozen or so other usefulservices.andP;  When you use these functions, your program looks and feels like aMacintosh program.andM;The toolbox functions assume you are writing in Pascal.andP;  C and Pascal arereasonably similar, and programmers who know C should have little troublereading documentation that assumes Pascal literacy.andP;  However, you must beaware of several differences in the way C and Pascal work.andP;  In particular, Cprogrammers must attend to calling sequence, structures, and strings.andP;  Forthe most part, the C compilers reviewed here resolve these problems,generating tool-box-compatible code.andP;  But because each vendor resolved theproblems differently, moving code from one Macintosh C to another can be acomplex task.andM;Many striking characteristics of the Macintosh user interface are kept instructured files called resources.andP;  Actually, every file has two forks: adata fork and a resource fork.andP;  Programs typically consist only of resourcesbecause the code is a kind of resource.andP;  Each component, such as a menu item,dialogue, string, and icon, has its own type of resource.andP;  The advantage ofusing resources is that user-interface information is kept outside code.andM;Various Macintosh toolbox functions allow resource loading as needed.andP;  Thefunctions not being used are kept out of memory on the disk.andP;  You can thenmodify without recompiling the program.andP;  In fact, users have been known tomodify the user-interface sections of their programs to their own liking!andM;The question for the developer is how to generate resources and combine themwith the source code.andP;  All of the compilers provide a set of resource toolsand varying amounts of documentation.andM;NumbersandM;Two areas of concern surround integers.andP;  The first is the size.andP;  On mostsmall computers a short integer is 16 bits and a long integer is 32 bits.andO;The integer type varies; it is supposed to be the most natural size for theprocessor.andP;  Ordinary Macintoshes use a 68000 CPU, which has 32-bit registersand a 16-bit data bus.andP;  Some compilers use 32-bit integers and others use 16bits.andP;  Integer size affects portability among Macintosh C compilers.andP;  Forthose wishing to port programs from other systems to the Macintoshenvironment, size can also affect the speed of a program.andP;  If most of thearithmetic requirements fit in 16 bits, moving 32-bit integers around willslow things down.andP;  The toolbox functions assume 16-bit Pascal integers.andP;  Onthe other hand, the Macintosh II class machines use processors for which32-bit integers are the most natural size.andM;Possibly more important for those wishing to port a program from anotherenvironment is the byte ordering of integers and floating-point numbers.andP;  The68000 CPU keeps the higher-order byte lower in memory, while the 8086 familyputs the higher-order byte higher in memory.andP;  If you have code that dependson the byte order within a number, you need to adjust the order to have itrun correctly on the Macintosh.andM;A final numeric issue concerns floating point.andP;  The Macintosh containsfloating-point software called the Standard Apple Numeric Environment (SANE),a robust set of functions based on the IEEE 754 standard that provides arange of types and precisions.andP;  In SANE, all floating-point arithmetic iscarried out in extended type: an 80-bit, 10-byte floating-pointrepresentation.andM;If a compiler uses SANE, it must translate the C floating point to a SANEextended type at some point.andP;  If done at run time, this process will increasefloating-point execution time.andP;  If a compiler does not use SANE, it mayprovide considerably faster floating-point arithmetic on the Macintosh SE andearlier machines.andP;  On the Macintosh II, which includes a floating-pointprocessor, a different consideration applies.andP;  On the Macintosh II, the SANEfunctions automatically use the built-in floating point processor (FPP) at aconsiderable gain in speed.andP;  For even greater speed, you can use the FPPdirectly.andM;Manx SoftwareandM;Aztec CandM;Aztec C was one of the earliest C compilers available for the Macintosh.andO;Manx supplies compilers for a wide range of equipment from the Commodore 64and up.andP;  The version reviewed here is 3.6C, released in July 1988.andM;Manx stresses the flexibility of its package, which operates under its ownshell program or the MPW shell, uses MPW libraries or its own, comes withthree math libraries, two editors, and can generate a wide range of Macintoshprograms such as applications, desk accessories, and HyperCard XCMDs.andP;  I usedthe Aztec shell.andM;The package comes with five disks; only three are needed to install the Aztecshell.andP;  The other two provide the MPW shell and related files.andP;  Installationis very easy.andP;  All you do is put in the first disk and double click theAztecInstall icon.andP;  The software takes it from there.andP;  All the necessaryfiles are copied to the hard disk, and the installation process prompts youto insert the next disk.andP;  Oddly, on insertion you still have to push an O.K.andO;button to continue the process and Quit after the last disk, which is notautomatically ejected.andP;  The shell is placed in the system folder, which is alittle awkward if you want to launch the shell directly.andM;Installation is not complete until you actually run the shell because itneeds a console driver, which Aztec installs as a resource in the system.andP;  Ifa driver is not present, the shell will install it; this is not discoveredduring the normal installation process.andP;  The documentation gives no clueabout how to uninstall the console driver.andP;  A call to Manx revealed that youmust use ResEdit to remove it.andM;The installation process copies all the files into appropriate folders andplaces them in a 2,150,400-byte folder called Aztec.andP;  Included are all theutilities that come with the shell, both editors, and all the library sourcecode.andP;  You can also run Aztec C from floppy disks.andP;  In fact, Manx points outthat one reason to use the Aztec shell as opposed to MPW's is that Aztec willwork from floppies.andP;  Unhappily, Manx does not provide installationinstructions for floppy users.andM;The flexibility inherent in the Aztec system placed an extra burden on thedocumentation.andP;  Given the variety of options and tools available, you mustfind the bits of text that refer to your own choices.andP;  The use of parallelchapters might have helped the Aztec C manual.andP;  For example, since Manxprovides two editors, the manual should provide two versions of Chapter onefor the Z editor and one for the mouse-based Edit editor.andP;  As it is, Z is inChapter 8 and Edit is given two pages in the Utilities chapter.andM;Assuming you can find it, the information you need is available.andP;  The manualconsists of over 600 pages in 8-1/2-by-5-1/2, three-ring binder format.andP;  Thebinder is quite full.andP;  It is not possible to add the debugger documentation,which comes in the same format without the binder.andP;  Chapter 11 (&quot;Toolbox&quot;),which covers the Macintosh-specific libraries, is missing it will bedelivered as part of the next release.andP;  This omission may not be serious, asAztec has followed the Inside Macintosh names and calling conventions.andM;The largest chapter covers the collection of utilities available under theshell.andP;  The Aztec shell enables the Macintosh to resemble running UNIX.andP;  Thischapter contains instructions for useful programs that have cryptic two- tofour-character names.andP;  Most of the discussions are brief but thorough.andP;  Eachhas a description, examples, and sometimes a comparison with a similar UNIXfeature.andP;  A few of the descriptions are quite detailed: the discussion of themake utility, for example, covers 25 pages.andM;The chapter of most interest to C programmers is undoubtedly the one coveringlibraries.andP;  A discussion of the Macintosh libraries was not available.andO;Standard C libraries are covered in Chapter 10, which lists functions inalphabetical order by their most typical names.andP;  Thus, memory-allocationfunctions such as malloc(), calloc, and free() are all listed under malloc().andM;Using Aztec C under the Aztec shell is easy if you know UNIX.andP;  The shell,utilities, and Z editor all mimic UNIX programs (Z resembles vi).andP;  If youdon't know UNIX, you will find the shell only slightly Macintosh-like.andP;  Itdoes have a menu bar with four menus of interest.andP;  The Commands menu listsall available commands.andP;  Commands in the top section actually run from thepull-down menu; these commands require no additional information.andP;  The restof the Commands menu is simply for reference.andP;  Select an item and you receivebrief instructions on how to use it.andM;Two menus, Source and Compile, appear only when the current directory orfolder contains source files.andP;  Source lists all the source files (.c and .a).andO;You can select one file and make it current.andP;  Compile contains Edit, Compile,Assemble, Link, and Run items.andP;  The lower half of this menu are items toautomatically assemble, link, and run after the compile.andP;  TheEdit/Compile/Etc items all operate on the currently selected file in theSource menu.andM;The last menu is titled Programs.andP;  It can hold any text, such as programs,executable files, or a standard command with options.andP;  Select any of theitems and it will start executing.andP;  When you select a menu item, the shellissues the appropriate command line and a carriage return.andM;The defaults can be configured your liking.andP;  A file called .profile containsa set of commands run at start-up.andP;  This file can be edited as you see fit.andM;When programming seriously with this system, you set up .EXE files toautomate the compiling and linking process with the multitude of optionsavailable.andP;  If you installed these .EXE files in the program menu, youoperate from the command line or menu at will.andP;  You must build in ease-of-useyourself, which involves learning the .EXE language and make utility.andM;As already mentioned, Aztec C has two.andP;  I used Z Editor just enough to decideI wanted no part of it (UNIX vi veterans: pay no attention to this warning).andO;Z Editor is a command-driven screen editor.andP;  The third time I tried it, Icouldn't remember the command to exit, and couldn't find it quickly in themanual.andP;  Z Editor keeps all text in memory, and I did not determine how muchtext this could be.andP;  Z Editor might be quite useful if you likecommand-oriented editors.andP;  Aztec C has it running on almost anything from aTRS-80 to the Macintosh, offering a macro facility and some featuresspecifically directed at C, such as finding matching parentheses, brackets,and braces and locating the beginning of a function.andM;Edit, the mouse-based editor, should seem familiar to most Mac programmers.andO;It works well and can have up to four files open at once.andM;It is possible to use other editors with Aztec C.andP;  Since the editor is notembedded inside the development system but only called, you may install someother, more useful editor.andP;  You could still call it directly from the Compilemenu by setting the EDIT environment variable.andM;As might be expected from a company that has C compilers for almost everykind of small computer, Aztec C's standard library is quite complete.andP;  It hasover 130 functions, with several versions of some functions.andP;  For example,the library contains three versions of the math library: m.lib, the Manxfloating-point library; ms.lib, the SANE version; and m8.lib, a version thatdirectly calls a 68881 floating-point processor.andP;  I was able to compile,link, and run the benchmark programs with no trouble.andM;Symantec Corp.andM;Think CandM;Think C has been out for several years.andP;  The version reviewed here is thenewly released v. 3.0.andP;  From the start, Symantec has emphasized rapidturnaround time and the use of an integrated, Macintosh user-interfaceenvironment.andM;Think C comes on two disks.andP;  Installation involves copying the files andfolders to your hard disk.andP;  Symantec provides a diagram showing where eachfolder should be.andP;  The only critical item is that the project folders (wheresource code is kept) should not be in the Think C folder.andM;Unlike previous releases, v. 3.0 requires a minimum of 1MB of memory.andP;  Thedebugger requires 2MB and MultiFinder.andM;The package comes with two thin paperback books totaling 476 pages.andP;  TheUser's Manual covers all the operations of the system, including the editor,compiler, debugger, tutorial introduction, and a project concept thatorganizes source files and libraries.andP;  The other volume is a straightforwarddescription of the standard libraries supplied with the package.andM;Although the documentation appears skimpy, I didn't feel anything wasmissing.andP;  The integrated environment is almost automatic; for example,instead of having pages to describe setting up a make file to automate theapplication building process, you simply add a file to a project at the clickof the mouse.andP;  The project will then handle the application-building processautomatically.andM;The manuals do not provide any discussion of Macintosh-specific programmingissues or reference to Macintosh libraries.andP;  Instead they refer users toInside Macintosh and other programming references, including MacTutor andCompuServe.andP;  The Standard Libraries Reference is organized alphabeticallywithin libraries, with each function on its own page.andM;One of Think C's most impressive features is how easy it is to learn and use.andO;Most interaction that occurs outside the editor uses the mouse.andP;  To start,you create a folder to hold the project, then launch Think C and specify anew project in the folder.andP;  You then use the editor to create your sourcefiles and add them to the project (a simple menu item will do this).andP;  Anothermenu item will compile or run the project.andP;  The arcane command line flags forvarious options used in other systems are available through menus anddialogues.andP;  Option settings are kept as part of the project so you need notset them every time.andM;The built-in editor is a standard Macintosh editor.andP;  It can handle multiplefiles and generally behaves as you would expect.andP;  To edit a file alreadyinstalled in the project, you double click on the file's name listed in theproject window.andM;Since Think C is closely tied to the Macintosh, I was pleasantly surprised tofind a complete set of standard libraries with over 180 functions.andP;  As withAztec C, I generated the standard benchmarks with little difficulty.andM;Think C only makes Macintosh programs.andP;  By using the standard libraries, youcan create a window to act as the console.andP;  If a program requirescommand-line options, you must rename main() to __main() and add the filemain.c to your project.andP;  When your program starts, it will display a windowin which you provide the command-line arguments.andM;Think C is fast.andP;  The time to compile a small drawing program was about 45seconds.andP;  I was not able to time how long it takes to link.andP;  The only time Isaw any indication of the link step was when a problem occurred.andM;As an integrated environment, Think C provides more than a fast compiler andlinker.andP;  When the compiler finds a problem, it immediately stops, opens theeditor, and displays the offending line.andP;  Unlike many compilers, it does notattempt to keep compiling and reporting subsequent errors, which are oftencaused by the first error.andP;  You can fix the problem, hit Command-K, and sendthe compiler back to work.andM;When you are ready to run your program, you select Run from a menu or pressCommand-R.andP;  Think C will recompile any files necessary, bring the system upto date, and link and launch your program.andP;  You can test recent additions,admire your first window, then Quit.andP;  You return to Think C ready to continuemodifying and debugging.andP;  One improvement in this edit-compile-run-edit loopis the state of the environment after quitting your program.andP;  You arereturned to the Think C environment, but the editor is closed.andP;  You caneasily reopen the editor by double-clicking the desired source file,returning to the top of the file.andP;  It would be nice if you were returned towhere you last were in the file.andM;In Think C, integers are 16 bits and doubles are the SANE extended type (80bits).andP;  Strings are standard C, null-terminated arrays.andP;  Think C provides apair of functions to convert C strings to and from Pascal strings and a wayto create Pascal strings directly.andM;Resources are handled automatically by creating the resources and calling thefile the same name as your project plus .rsrc.andP;  Both files will be availablewhen you run the project from inside Think C and added when you build yourapplication.andM;Apple Computer Inc.andM;MPW CandM;MPW C is the C available from Apple for the Macintosh Programmer's Workshop.andO;MPW C is a complete development environment designed to support a widevariety of tools and languages.andP;  Apple also offers an assembler and a Pascalcompiler.andM;MPW comes on five disks, with the C compiler on a sixth.andP;  Installation issimply a matter of copying all disks to a folder on your hard disk.andP;  MPWconsumes about 3.5MB.andP;  Unlike the other systems reviewed here, you cannot runMPW C from floppies.andM;The documentation will make you realize that this is serious software.andP;  TheMPW manual is a two-inch-thick, 8-1/2-by-11 document.andP;  The reason for allthis paper is the quantity of tools provided, the fact that several areprogrammable, and that you can make and install your own tools.andM;The MPW C manual deals exclusively with C.andP;  It describes how to createapplications, MPW tools, and desk accessories.andP;  Most of the manual, however,is devoted to the libraries.andP;  One chapter describes the standard C library.andO;This is organized alphabetically by typical names as in the Aztec C manual,and the descriptions are clear and well organized.andM;The rest of the manual describes the Macintosh interface libraries, whichconnect your C program to the facilities provided with the Macintosh.andP;  Themanual lists all header files and shows any #defines, data structures,function calls, and return types.andP;  In addition, an appendix lists eachMacintosh function alphabetically with its header file and page number.andP;  Thismanual won't replace Inside Macintosh, but it is a handy reference.andM;All MPW C tools expect to receive input on the command line.andP;  However, MPW Cprovides a menu bar and a facility called Commando.andP;  It is possible to buildup the necessary commands without having to learn all the options from themanual.andP;  A few clicks of the mouse will get you started.andP;  For example, MPW Cincludes a sophisticated make facility.andP;  You can generate simple make filesdirectly through screen interaction.andP;  I was able to generate all thebenchmarks and a small Macintosh application with little difficulty.andP;  Sinceyou can examine the files the system generates, you can use them as a basefor more complex instructions.andM;The integrated, mouse-driven editor is similar to other editors.andP;  Inaddition, MPW C has a command-based editor.andP;  You will have no problemcontrolling the editor.andP;  All commands are issued to the Worksheet in the topwindow.andP;  The commands then act on the second window (your file).andP;  You canwork directly on your file with the mouse and keyboard by making your filethe top window.andP;  The power of the commands is only a click away.andM;As with the make facility the editor provides a way to enter MPW C withouthaving to learn all the commands.andP;  As you reveal the features, they are readyto use.andP;  While not as easy to use as Think C, MPW C was much easier to getstarted than Aztec C.andM;MPW comes with both standard C and Macintosh libraries.andP;  The standardlibraries are slightly less than complete.andP;  However, they do have a purposeother than simply providing standard C compatibility.andP;  You use them when youconstruct an MPW tool.andP;  The system also contains a full set of math librariesfor SANE and the 68881.andM;What took 45 seconds to compile with Think C took over four minutes tocompile with MPW C, with another 20 seconds for linking.andP;  The bulk of thetime was spent in the make facility as it figured out exactly what files tocompile.andP;  When the compiler is finished, it leaves the name of the program onthe screen as a command.andP;  Hit Enter and the program runs.andP;  When you Quit,you're back in the MPW C environment, ready to make any additional changes.andM;A number of ways exist to enable C to talk to the Macintosh.andP;  MPW C uses avery odd set.andP;  The compiler automatically converts C strings to Pascalstrings when passed to Toolbox functions (and reconverts them on return).andO;However, MPW C only performs this for strings passed directly, not thoseembedded in structures.andM;MPW C passes all structures by address, including the point type (x, y screencoordinates), which, being only four bytes, Pascal passes directly.andP;  SinceMPW C can pass structures by value as well as by reference, this extra stepseems a little odd.andM;To offer alternatives, MPW C provides a set of functions that do not convertstrings and accept points by value.andP;  These functions have the same names asthe standard functions, but are all upper case.andM;These alternatives make it more difficult to move source code betweencompilers.andP;  Think C requires explicit programmer conversion of strings byusing CtoPstr() and PtoCstr() functions.andP;  When I moved my Macintosh program,I solved this problem by #defining those two names as empty.andM;The point type issue is more problematic.andP;  One solution would be to build ascript to replace all the standard names with all uppercase names for theappropriate functions.andP;  This solution would at least automate the conversionprocess.andM;Integers are different in MPW C as well.andP;  MPW C uses 32-bit integers.andO;However, when the Toolbox expects an integer, it expects 16 bits.andP;  Thesolution to this anomaly is easy: never use integers.andP;  Since this data typeis the most likely to change size, it causes most of the difficulty whenporting.andP;  If you use integers, you'll have to track them down and see if thechange in size is important.andM;DebuggingandM;Think C and Aztec C have source-level debuggers.andP;  The Think C debugger isincluded with the package, while the Aztec C debugger is an extra-costoption.andP;  MPW C will make a debugger available in its next release.andP;  You canalso use assembly-level debuggers such as MacsBug or TMON; all threecompilers supply a copy of MacsBug.andM;The Think C debugger is a separate application.andP;  Once it is copied to theThink C folder, it is accessed through the Think C environment.andM;Once installed, you can use the debugger on your project.andP;  Select UseDebugger from the Project menu and a little bug will appear in projectwindow.andP;  Click on the file names to select those for which you wish to havedebugging information and run your project.andP;  Think C will recompile any filesneeded and generate debugging information for the files selected.andP;  Thisdebugger is an impressive tool.andP;  It is completely integrated in the Think Cenvironment, very easy to learn, and for the most part, it can operate withminimal keyboard input.andM;The Aztec C debugger, sdb, is a separate program that can run under eitherthe Aztec or MPW shell.andP;  Installation is a matter of copying sdb to the samefolder as the compiler.andP;  A program must first be compiled and linked withcertain options set by changing the command-line commands to the compiler andlinker.andM;To run the debugger, give it any of several options, the name of the programto debug, and any command-line arguments to the program.andP;  It is also possibleto run the debugger from the Finder by double-clicking on the specialdebugging file generated by the linker.andM;Like all Aztec C tools, the debugger is command-driven.andP;  Roughly 70 one- tothree-letter commands control the debugger.andP;  With these commands, you can setbreakpoints, view data, and step or trace through the program.andP;  If anything,sdb appears a little more powerful than the Think C debugger.andP;  For example,sdb contains commands that operate within an assembly-level mode, while ThinkC's debugger merely allows invoking an installed low-level debugger such asTMON or MacsBug.andM;Like the Think C debugger, sdb allows viewing and manipulating code andvariables or a running program.andP;  However, sdb, being command-driven, is muchharder to learn.andP;  On the other hand, the Aztec C shell and sdb run in a 1MBenvironment.andM;BenchmarksandM;The benchmark results cover a range of measures and provide some index oncompiler quality.andP;  After running these programs and collecting the timingdata, these three compilers appeared to generate roughly comparable code.andO;However, some big differences appeared in the results.andP;  The differences arefocused on basic decisions made about how the compilers handle various datatypes.andM;The test for compile times is a program I used for a series of articles inMacTutor.andP;  It currently consists of 13 files and about 5,600 lines.andP;  Table 1shows how long it took to compile and link all files using each compiler'smake facility, how long it took to rebuild the program after making a smallchange to one file, and the size of the final, ready-to-run program.andM;Obviously, Think C's compiler provides a faster development environment.andO;Both Aztec C and Think C provide the ability to have precompiled headers.andO;These header files are compiled and stored on the disk in compiled form.andO;When they are #included, the compiler simply loads the uses them.andP;  Thesetests did not use this ability.andP;  MPW C also recommends a small RAM cache,which was not used.andM;To measure relative performance, I used the suite presented in Jim Brodie'sreview of Microsoft C v. 5.0 (&quot;Microsoft C with QuickC,&quot; Software Reviews,COMPUTER LANGUAGE, Feb. 1988, pp.andP;  120-135).andP;  All timing was done with thebuilt-in time() function.andP;  (MPW does not have a time() function, so I wroteone using the Macintosh toolBox call).andP;  The file ran each test for at least aminute.andP;  If the test time for a certain number of iterations did not exceedone minute, the iterations were doubled and the test was run again.andP;  Theresults are shown in Table 2 and reported in average time per operator, whichis a useful measure because it's independent of the number of times the testis run.andM;The six tests were:andM;* Functions: repeated empty function callsandM;* Shorts: a mix of short integer operationsandM;* Register shorts: the same mix with register variablesandM;* Longs: the same mix with long variablesandM;* Short mult: multiplying a series of the the same variable by itselfandM;* Double: a mix of floating-point operations very similar to the shorts.andM;These results may appear a bit odd.andP;  Remember that MPW C's preferred integersize is 32 bits, which caused a more efficient result in the longs test and asomewhat slower result in the shorts test.andP;  I believe the reason for theconsiderable slowness of MPW C on the short mult test was that the shortswere being converted to 32-bit integers prior to the multiply test.andM;The double test results are also based on how the compilers routinely dealwith floating-point integers.andP;  Aztec C supplies two floating-point libraries.andO;The linker typically uses the Aztec C library, which operates on 64-bitdoubles.andP;  As an option, you can link a SANE-based library.andP;  From the results,Aztec C appears to store the doubles as 64-bit values and convert them to use80 bits.andP;  MPW C also uses a 64-bit double when a variable is a double andconverts it to do computations.andP;  You may, however, declare an extendedfloating point, yielding the second result.andP;  Think C stores doubles as 80-bitvalues extended so its default is its fastest possible floating point.andP;  Ifyou need to conserve space, you may use float (32 bits) or short double (64bits) at the cost of slower computation time.andM;While Aztec C's floating-point performance is superior, two issues should beconsidered.andP;  First, since Aztec C does not use SANE, it will notautomatically take advantage of any floating-point processor.andP;  Second, sinceAztec C is based on 64 bits, it will be somewhat less accurate.andM;The Dhrystone benchmark consists of a program containing a typical mix ofinstructions.andP;  I ended up running it four times: with and without registervariables, and for shorts and integers.andP;  Table 3 shows the results reportedin number of iterations per second.andM;When using integers, MPW C is slower because it uses a 32-bit integer, whileThink C and Aztec C use 16-bit integers.andP;  I chaged all the integers to shortsto reveal how MPW C compared using the same size data type.andP;  Two points areevident.andP;  First, MPW does very well.andP;  Second, MPW uses registeres whether youask for them or not.andP;  MPW C can do a better job of figuring out what shouldbe in a register than the user.andM;You must really make two sets of choices when selecting a C compiler.andP;  Thefirst involves the environment.andP;  Most programmers will want to choose betweenMPW and Think environments.andP;  The Aztec C shell, although compatible with UNIXand able to run on a 512M machine, does not have the flexibility or power ofthe other two.andP;  Manx Software suggests using the MPW shell as well, which issupplied with the package.andP;  The strengths of the MPW shell are itsintegration with other Macintosh development tools and its ability to acceptuser-written tools.andP;  The strengths of the Think C environment are its speedand total integration.andM;The choice of the compiler is only partly dictated by the choice ofenvironment.andP;  Of course, if you like the Think C environment, you use theThink C compiler and linker.andP;  Again, its turnaround speed provides an idealdebugging environment, especially with the debugger, if you have the memory.andO;If you choose the MPW environment, the Aztec C and MPW C compilers areroughly equivalent.andP;  I would choose Aztec because it seems to fit with theMacintosh toolbox better than MPW C.andP;  The kinds of numbers your applicationwould be dealing with are important factors when making a decision.andP;  If youare doing a lot of floating-point work, check the benchmarks and use shortsand longs, not integers.andM;Aztec C would be a better selection if it contained an enhanced SANEfloating-point option.andP;  While the Aztec C floating point is by far thefastest, its SANE is the slowest.andP;  Adding an extended type to eliminate theconversions should make it comparable in speed to MPW.andO;</TEXT></DOC>