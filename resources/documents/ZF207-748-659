<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-748-659  </DOCNO><DOCID>07 748 659.andM;</DOCID><JOURNAL>Release 1.0  June 27 1989 v89 n6 p17(6)* Full Text COPYRIGHT EDventure Holdings 1989.andM;</JOURNAL><TITLE>Some experiments. (theory of self-organizing systems)andM;</TITLE><DESCRIPT>Company:   Thinking Machines Corp. (research)Xerox Corp. Palo Alto Research Center (research).andO;Topic:     Self-Organizing SystemsSimulationPerformance PredictionAlgorithmsTheory of Computation.andO;Feature:   illustrationgraph.andO;Caption:   Performance. (graph)andM;</DESCRIPT><TEXT>Large-scale self-organizing software systems are still pretty rare.andP;  With theexception of Reliable Water Company's REX (page 4), the only ones we know ofare research efforts.andP;  Two of the more prominent are the work of Danny Hillisat Thinking Machines, the company he founded, and Bernardo Huberman at XeroxPARC.andP;  Hillis is using the capabilities of the powerful Connection Machine hedesigned to model population dynamics and evolution and trends such as thespread of disease, while Huberman is more directly concerned with the use ofself -organizing market-style systems to manage computer resources -- or whathe terms &quot;the ecology of computation&quot; (the title of a book he recently editedon the topic).andM;What's the difference between a marketplace system and an evolutionary one?andO;One is probably simply the time scale; the other is that in evolution theagents are replaced over time, while in the market it's the goods or servicestraded and used by the agents that go in and out of existence depending ondemand for them (consider demand the criterion of survival in the market, butit's only the resources and market structure, not the agents, that evolve.andO;(Of course, most systems are hybrids over the long run.)andM;In the Hillis model, adaptation of individual elements is the focus, whereasin the Huberman approach the issue is the organization of the system and theallocation of resources.andP;  Interactions between the elements in Hillis's modelare simply competition for resources and high scores; in the Huberman model,agents negotiate each other in structured auctions for a variety ofresources.andP;  (Note: these are not different approaches to the same problem,but different problems and different approaches that are both part of thebroad field of self-organizing systems.)andM;BERNARDO AND THE MARKETSandM;Perhaps the most visible simulated market system is Spawn, the work ofHuberman and his colleagues at PARC.andP;  Huberman is a former physicist whoworked in chaos theory early, and has now moved on to self-organizingsystems.andP;  Spawn is a computational &quot;ecology,&quot; running mostly on networked Sunworkstations, which has attracted considerable press attention of late.andP;  itenables PARC to make use of idle computer time through market allocation ofprocessor time -- and of course to study the effects and effectiveness of avariety of algorithms for doing so.andM;Huberman takes a rewarding physicist's approach, focusing on experiments andmeasurements, and he's getting interesting results.andP;  The system has been upjust a few months and produced the results described here, but it's not ingeneral use: It's still easier to simulate than deal with the network'scryptic reporting interface and occasional failures.andP;  (Guess we need aselforganizing system to maintain as well as allocate resources.) The initialobservations are hardly surprising: It takes only a few agents competing forresources to establish &quot;rational&quot; prices: That is, time on a machine isproportional to its performance, so that price-performance is relativelyconstant.andP;  Prices rise in response to shortages or high demand.andP;  And soforth.andP;  The efficiency of allocation is close to optimal.andP;  But moreinteresting effects emerge when you start looking at issues like use ofresources when there's a delay in feedback: What happens vhen (as is normallythe case) you're dealing with delayed or imperfect information? If too manyagents use a single resource, its performance goes down, but they don't findout until it's too late.andP;  (Sounds like Highway 101 to usl)andM;The situation here is that the decision is made on the price at one time, butthe actual price paid is higher or lower depending on actual use of theresource.andP;  What happens when you introduce agents who make predictions? As itturns out, it's good to have a couple of agents making predictions, but iftoo many do so, chaos reigns again (cf.andP;  October 17, 1987, when peoplepredicting a market collapse helped make it happen).andP;  A draft paper(&quot;Collective behavior of anticipatory agents,&quot; by J.andP;  0.andP;  Kephart, T.andP;  Hoggand Huberman) and the chart below explain it succinctly:andM;&quot;Initially, as analysts are introduced into a system of naive agents, theperformance of the naive agents improves because the oscillation amplitudecdeviation from the optimum! is reduced (&quot;trickle-down effect&quot;).andP;  The overallsystem performance improves as well.andP;  However, when the percentage ofanalysts increases beyond a certain point, the behavior becomes pathological,exhibiting complicated periodic or chaotic oscillations.andP;  The analysts startto perform even worse than the naive agents, and the overall systemperformance plummets.andP;  The cyclical analysts outsmart themselves, becausetheir presence in the system induces a qualitative change in the dynamicswhich they do not take into account themselves cin this particular model!.andO;This suggests that game theorists might be more successful...&quot;andM;Initial work shows that adaptive game theorists do do better, but that's onlybecause this market is relatively easy to predict.... Issues are availabilityof information, cross-impacts of behavior, the inability even of adaptivegame theorists to predict prices correctly in any reasonably complicatedmodel, and the importance of diverse strategies.andP;  For example, if everyoneavoids the Bay Bridge because the radio says there's a traffic jam, it mightbe in a single person's interest to take the Bay Bridge.andP;  But if everyonefigures that out, then what? If everyone wears PCandM;Forum golf shirts, they lose their cachet.andP;  If Juan follows Alice's lead andbecomes a manager, who's left to do the work? Some resources become morevaluable if everyone uses them, like a popular movie (as long as you can getin) which is easier to talk about if others have seen it, while others becomeless valuable: &quot;It's so crowded no one goes there anymore.&quot;andM;But most troubling is the so-called &quot;tragedy of the commons,&quot; the fundamentalproblem we attempt to solve with government actions.andP;  This is the issue ofshared resources: Everyone is better off if everyone pays, but eachindividual agent is better off if he doesn't pay and mooches off the other.andO;In other words, how do we get global optimization when it's in contradictionwith local optimization.andP;  The same issues apply to long-term research in theface of stock-market pressures, competition among firms in the face ofexternal threats from other countries, the confusing interplay between safetynets and incentives in our welfare system and most current puzzles in publicpolicy.andP;  (To see some of them played out, try playing SimCity, page 10.)andM;There is much interesting discussion of market systems in the work of MarkMiller and Eric Drexler in Huberman's and Drexler's books cited on page 33.andO;Hiller is currently chief architect at Xanadu, now part of Autodesk.andP;  He isworking there on building a back-end text database that will ultimately playhost to a variety of front-end agents that will not just search it but alsoannotate it, link cross-references and publish editorial assessments of itscontents.andP;  More on this next issue.andM;GENETIC ALGORITHMS: PROGRAMMING BY EVOLUTIONandM;Evolution is a means of adaptation: A population evolves as its members arereplaced by new and different ones; the individual elements don't necessarilyadapt.andP;  Evolution works by selection: Successful elements (and their traitsand behaviors) survive and reproduce.andP;  (Success may be determined by abilityto get food and sexual partners, or to earn a living, or to acquire aspecified level of currency or resource access in a computational system.)andO;Unsuccessful elements die out, taking their traits and behavior with them.andO;Over the long run, the successful elements and traits predominate.andM;There is a seeming difference between traditional evolutionary systems, whereindividual elements are created and die out according to their success inmeeting goals, and systems where the individual elements persist, while theirbehaviors or problem-solving techniques die out or flourish.andP;  But in fact,it's merely a matter of mechanisms and metaphors.andP;  In a market-based softwaresystem, certain algorithms and resources might get used frequently, andothers might &quot;die&quot; of neglect.andM;Will management then pour resources into making the widely used algorithmseven more efficient, or making popular application programs available to moreusers? At this point, evolution in the software industry is working mostly atthe macro level in this way, determining the marketplace success of operatingsystems, platforms, hardware architecture and applications.andP;  (Criteria forsuccess include things such as marketing and management stability as well asthe technical capabilities of the products.)andM;Market systems are exotic and scary enough to the traditional objectorientedprogrammer, who has to relinquish control of the executing application.andP;  Arelated but further-out notion is the idea of genetic algorithms, whichleaves even the design of the programs up to a self-organizing system.andM;Genetic algorithms are algorithms for building sequences of subroutines(analogous to genes) that reproduce and mate, resulting in ever moreefficient solutions for a given task (or for changing tasks, for thatmatter).andP;  This results in evolution, where the solutions change by replacingthemselves over time.andP;  The genetic algorithms are not the solution algorithmsthemselves, but the programs that manage the rules of reproduction, geneticrecombination and selection.andP;  In other words, they're the program running thesimulation.andM;Typically, the program treats the solution algorithms as strings of text(code subroutines) with designated breakpoints where splices can occur.andO;&quot;Children&quot; are created by joining spliced halves from two parents.andP;  Selectionis made by actually running the child and scoring its solution of the problem-- typically some kind of optimization problem.andP;  Most genetic algorithmsproduce succeeding generations of solution strings of the same general formand length, but relaxing those constraints with so-called &quot;messy algorithms&quot;tends to produce more rapid, effective evolution towards superiorperformance, says Dave Goldberg, an expert in the field at the University ofAlabama.andP;  &quot;We've taken our cue from nature, where evolution has carried usfrom a small number of genes per organism to many with good results.&quot;andM;Stuffed softwareandM;The implications for software development long-run are promising; GECorporate Research is using genetic algorithms in jet turbine design andreported promising results at the recent genetic algorithm conference --reportedly a 2 percent increase in efficiency.andP;  But genetic algorithms areunlikely to see much use outside the design lab for a while; few dp managersare going to trust algorithms of uncertain parentage.andP;  Emergent computationand genetic algorithms in particular merge the notions of design and runtime,since it's a permanently incremental approach where the system is always influx (or alive).andP;  But there's no reason that you can't use emergentprinciples for a period called &quot;design,&quot; and then remove the genetic capacityto create a runtime system (regardless of what the purists might think).andP;  Ifyou do it right, you then end up with inanimate but still executablesoftware.andM;EVOLUTION: DANNY DISCOVERS SEX AND PARASITESandM;Danny Hillis, founder of Thinking Machines, turns out to have built an idealmachine for running genetic algorithms.andP;  He has been using his own ConnectionMachine and his limited free time to build self-organizing evolutionarysimulations, modeling other people's ideas that ran too slowly elsewhere andalso coming up with a few of his own.andP;  First, he has built a system that canevolve a sorting algorithm that comes within one step (60 vs.andP;  61) of thebest humans can do for sorting a list.andP;  (The algorithms consist of 64sequenced instructions to compare and exchange a particular item in the listto be sorted.andP;  Each individual gets a random list to sort, and is scored onhow well it has sorted the list by the end of the 64 steps.) That's prettyimpressive.andP;  The whole thing took 100,000 generations, at about 10generations per second for this model.andM;There are different ways to score to determine survival, and to generatesuccessive generations, which both have a strong impact on the model.andP;  Scoreson the problem represent the environment, in the sense that it's what theindividuals are adapting to.andP;  The simplest method is to take an arbitrarypercentage of the population with the highest scores.andP;  Another is to assignarbitrary survival probabilities to specific traits, which is how populationbiologists generally do it.andM;The problem with either of these scoring methods, of course, is that they'restatic.andP;  They end up producing a population specialized for a particularenvironment.andP;  But a changing environment is closer to reality, andadaptability, rather than specialization, is key to survival over time.andO;(That's certainly the case with humans, which aren't particularly good atanything except intelligence, which equals learning, which equalsadaptability.)andM;Populations may get stuck in a local adaptation (specialization) that'scounterproductive in the long run.andP;  It turns out that parasites -- otherobjects that evolve more rapidly because their generations turn over faster-can counteract the tendency to inertia.andP;  Any time a particular type gets tooprevalent, it becomes an especially appealing host for parasites and isprevented from overrunning the population entirely, leaving enough diversityin the system for it to respond to new conditions.andP;  In other words, parasiteskeep populations from complacency, and may shake them out of suboptimalsolutions to further improvements.andM;There's also the question of just how to elicit and spread a diversity ofelements for the selection to work on.andP;  It turns out that exchange of geneticmatter is generally far more important than mutation in keeping a populationof complex things diverse.andP;  Mutations are less and less likely to bebeneficial as an individual gets complex, whereas sex allows variations thatwork to be passed along and spread throughout a population.andP;  Sex is a meansof what Hillis calls &quot;idea-sharing.andP;  &quot; Sexual reproduction is simulated byrecombining genes (represented as sections of the code strings) according tosome specification to generate a new generation.andP;  (Although the pairing ofany two individuals, or gene pools, is likely to result in a more &quot;average&quot;individual than the more extreme one, it also spreads its extremecharacteristics more broadly than would simple cloning, or asexualreproduction.)andM;Many variations may sit around in the population &quot;doing&quot; nothing, but whenconditions change somewhere there's likely to be a set of individuals bettersuited to the new condition.andP;  As they mate with less favored individuals,they may help the population survive.andP;  Or if they stick to themselves, thissmall group may flourish and grow larger as the rest of the populationflounders.andP;  Mating behavior -- random, pick your relatives or pick someonewith similar string patterns are common strategies -- is another importantcharacteristic of a model.andM;Gaps in the tape?&quot;andM;But most interesting are Hillis's theoretical insights extending the work ofothers in the field, as described in his unpublished paper &quot;Punctuatedequilibrium due to epistasis in simulated populations,&quot; which has traveledwidely on the samizdat circuit.andP;  (A fine example of the cross-disciplinarynature of this field).andP;  In essence, it offers explanation for the strangegaps in fossil records, which indicate that evolution is not a slow steadyprocess, but rather a sequence of quick swings from one prevalent phenotype(trait or behavior) to another, or &quot;punctuated equilibrium.&quot; There's only ashort intermediate period as the majority of a population switches over.andM;The reason, as shown by Hillis's simulations, is that phenotypes aren't theresult of a single gene, but of a number of genes acting in concert.andP;  Earliersimulations which looked at genes and phenotypes as equivalent (which used asingle gene rather than several as a criterion for survival) missed thispoint.andP;  But simulations that use survival criteria based on the cooccurrenceof several genes (e.g., subroutines that work well together) mimic thereality of punctuated equilibrium.andP;  Those genes may be lurking aroundindividually in the population with little noticeable effect on survivalrates.andP;  Chance combinations of the favorable genes (with high survival rates)slowly raise their frequency in the overall population until they reach acritical mass -- and suddenly blossom.andP;  &quot;Any small increase in the frequencyof one ...andP;  will greatly enhance the selective values of the others, and viceversa,&quot; writes Hillis (with a great deal of supporting mathematics).andM;Theatre of the emergentandM;As biology, Hillis's simulations lack a representation of spatial migration --and no doubt other items too.andP;  But they can show some exciting patterns ofreality without modeling all its aspects.andM;As theater, they vary in what they show on the screen.andP;  The computer cancreate populations of an arbitrary number of elements (call them objects),execute their behavior and then, based on the results, decide whether theysurvive or not.andP;  You can display them as locations on the screen (turningpixels on or off), or with colors so you can see characteristics as colorssweeping over the screen and through a population.andP;  The results are dramatic.andO;As noted, if you have a static measure of success, you generally reach astable state fairly quickly -- although not necessarily at the optimal level.andO;This is an example of hill-climbing; once you've got to the top of the hill,you can't necessarily see another, higher hill elsewhere.andP;  It takes changeand diversity -- the equivalent of turning the terrain into a moving oceaninstead of static hills -- to make sure that the climbing continues.andP;  In reallife, of course, circumstances are always changing.andO;</TEXT></DOC>