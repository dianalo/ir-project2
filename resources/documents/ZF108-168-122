<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-168-122  </DOCNO><DOCID>08 168 122.andM;</DOCID><JOURNAL>EXE  Feb 1990 v4 n8 p57(3)* Full Text COPYRIGHT Process Communications Ltd. (England) 1990.andM;</JOURNAL><TITLE>A taste of Icon. (the Icon general-purpose programming language)</TITLE><AUTHOR>Smith, Paul.andM;</AUTHOR><SUMMARY>Icon is a general-purpose programming language particularly wellsuited to such text processing and non-numerical applications assymbolic algebra and natural language processing.andP;  It is intendedto be easy to use for solving problems quickly and simply butfull-featured enough to be used for complex applications.andP;  Thelanguage originated from the SNOBOL language family designed andimplemented at Bell Laboratories in the 1960s and 1970s.andP;  Ralph E.andO;Griswald, who worked on SNOBOL at that time, heads continueddevelopment of Icon at the University of Arizona.andP;  Griswald pointsout that Icon programs are made up of declarations andexpressions, the former defining information that must be knownprior to program execution, and the latter making up theexecutable part of the program.andP;  The design and operation of Iconprograms, its 11 built-in data types, strange expressions andrunning Icon are discussed.andM;</SUMMARY><DESCRIPT>Topic:     Programming LanguagesSoftware DesignNew TechniqueProgram Development TechniquesNonnumerical AlgorithmsProcedure-Oriented LanguagesData TypesProgramming InstructionIcon (Computer program language).andO;Feature:   illustrationprogram.andO;Caption:   The triangle program. (program)Word count program illustrating string scanning (program)andM;</DESCRIPT><TEXT>Icon looks rather like yet another ALGOL variant on the page, but beneaththis bland exterior lurk some powerful mechanisms.andP;  Paul Smith explains.andO;Icon is a general-purpose programming language that is especially suited totext processing and non-numerical applications, ranging from symbolic algebrathrough to natural language processing.andP;  it is designed to be easy to use:suitable for problems that require a  quick and dirty' solution and powerfulenough to handle complex applications.andP;  The Icon language is currently in itsseventh major version, and is still evolving under the control of Ralph EGriswold at The University of Arizona.andP;  Icon originates from the SNOBOL,family of languages, which was designed and  Implemented at Bell TelephoneLaboratories during the 1960s and 1970s by a team that included Griswold.andO;SNOBOL, like Icon, is a highlevel programming tool for manipulating stringsof characters that emphasised ease of programming.andP;  The best-known version ofSNOBOL is SNOBOL4 (1971), which to this day is in use on a wide variety, ofcomputers - in spite of an early stated view of a certain Professor ofComputer Science that it didn't stand a snobol's chance in hell.andP;  Griswoldcontinued to work on the SNOBOL language after moving to the University ofArizona, completing Version 5 of the language in 1975.andP;  However, the nextyear he realised that the language element: and control structures for stringprocessing could be fused into a single coherent programming language, (InSNOBOL, pattern matching and string handling facilities are implemented as asub-language.) icon was born.andP;  Icon Programs To quote Griswold:'Icon programsconsist of declarations and expressions.andP;  The declarations define informationthat must be known before program execution begins, the expressionsconstitute the executable part of the program.' Icon programs contain one ormore procedures, together with definitions for any other global identifiersthat are required.andP;  One of these procedures, in which program executionbegins, must be called ma i n ( ).andP;  The icon version of the triangle programappears in Figure 1.andP;  Please the July 1989 issue of.EXE Magazine for detailsof the triangle problem).andP;  At first sight Icon appears similar to languageslike C, Pascal, and ALGOL 68.andP;  However, Icon has many special characteristicsthat these others do not share.andP;  At the heart of the icon language is theconcept that expressions may succeed or fail.andP;  For instance, in Icon, thecomparison a andgt; b will succeed if the value of a is less than the value of b,and fail otherwise.andP;  Likewise, the operation find(&quot;two&quot;, &quot;in northern areas&quot;)will fail whereas find (&quot;off&quot;, &quot;the  kick-off starts&quot;) will succeed.andP;  iconhas no concept of Boolean or logical values.andP;  Instead, control flow isinfluenced by the success or failure of expressions.andP;  Furthermore, anexpression that succeeds will return a value, hut an expression that failswill return nothing.andP;  If an expression that fails is required to evaluateanother expression, the larger expression will not be evaluated and it toowill fail.andP;  Thus a : = 220 andless; r will succeed if r is greater than 220, and thevalue (r) of the expression will be assigned to a. if r is less than or equalto 220, or cannot he evaluated as a numeric value, the expression will failand nothing will be assigned to a. icon offers the usual variety of controlstructures, such as if exprl then expr2 else expr3, case expr of case-clause, .andP;  .  .. There  Are also iterative mechanisms: every exprl do expr2,while exprl do expr2, and until exprl do expr2.andP;  Data Icon offers ll built-indata types: null, integer, real, string, cset, set, list, table,coexpression, procedure and file.andP;  Icon variables can have values of anytype.andP;  Structures may contain elements of different types, withoutrestriction.andP;  When necessary icon will execute type conversions- if aconversion cannot be performed, the expression that requires it will fail.andO;Csets and sets are similar to each other.andP;  Csets are unordered collections ofcharacters whereas sets are unordered collections of any type or types ofdata.andP;  The usual set operations  inclusion, exclusion, intersection, union,and so on) may be performed on esets and sets.andP;  Strings are orderedcollections of characters: they are not arrays, although individual elementscan be accessed directly.andP;  There is no separate data type for singlecharacters.andP;  Lists are ordered collections of data, elements of which max.andO;be directly accessed.andP;  They can be used like vectors,'stacks and queues.andO;Lists can contain references to values of any data type, includingthemselves.andP;  Tables offer an associative access mechanism: each entry isassociated with a subscript.andP;  Both table entries and subscripts can be valuesof any data type.andP;  When a table is created a default value for new entries isspecified.andP;  So t : = table (0) defines a table in which new entries will beinitialised with the value zero.andP;  Individual entries may then be created andassigned thus: c[&quot;begin&quot;I := 7 t [&quot;if &quot;] : = 15 Procedures are first classdata values.andP;  They can be assigned to variables and passed to, and returnedfrom, functions.andP;  Icon does not go as far as LISP in this respect, though:there is no mechanism for constructing new procedures during programexecution.andP;  Icon's versatile type conversion facilities allow some strangegoings-on.andP;  Given the pre-defined procedure write (), one can do this:gargle:= write and then use gargle () interchangeably with write ( ).andP;  Thus s: = &quot;throwback&quot; gargle (s) will write the string value in variable s tostandard output.andP;  icon can convert string values into identifiers, so #+&quot;(i,4) &quot;write&quot;(i) and i +:= 4 write (i) are equivalent.andP;  Icon provides anextremely rich set of operators,  ranging  from  arithmetic, through setmanipulations, to a multitude of conditional assignments.andP;  To give you anidea of the variety, you should know that there are no less than threedifferent equality operators: = compares two numeric values, == compares twostring values and = = = compares both value and data types at once.andP;  Strangeexpressions In most computer languages, a given expression should generallyreturn a fixed result, how ever many times you evaluate it.andP;  With the notableexception of random number generators, expressions that change value arefrowned upon.andP;  Not so in Icon.andP;  Expressions may produce more than one result(generators), or they may produce no result at all.andP;  Each time they areinvoked, generators produce the next result in a sequence, until there are nomore results and they fail.andP;  For example find (&quot;a&quot;, &quot;What a lot&quot;) is capableof producing two results.andP;  This loop every write(find(&quot;a&quot;, &quot;What a lot&quot;)prints the results  3' and  6'.andP;  Other generators include expressions like 8to 24 by 2 which generates the integers from 8 to 24 in steps of 2.andO;Generators can be used in two distinct ways: in iterative expressions, likethe every loop above, and in goal- directed evaluation.andP;  The latter refers toexpressions where, although they might fail at first, repeated calls to thegenerator in the expression can lead to success.andP;  Procedures may act asgenerators.andP;  A reserved word suspend is used in a procedure to return a valueand suspend processing until its next invocation, retaining the values of alllocal variables.andP;  icon allows the programmer to declare and use co-expressions'.andP;  These can be thought as  generators assigned to variables'.andO;expressions reproduce a previously captured sequence of results.andP;  Here is aco-expression to generate a sequence of numbers:</TEXT></DOC>