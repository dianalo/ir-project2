<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> DOE1-55-0976 </DOCNO><TEXT>Parallel computation is an area in which software technology lags considerablybehind hardware technology. The need for parallel computing in a numberof applications (e.g., scientific computing, machine vision, artificialintelligence) is unquestioned, and computers with hundreds of processorsare now readily available (for instance, the Butterfly or the many derivativesof the Cosmic Cube). However, these machines are programmed in essentiallythe same way as existing sequential machines. The best-available parallelprogramming languages are variants of standard sequential languages,with extensions to let the programmer explicitly divide a program intotasks and pass information between those tasks. Although designers ofthese languages claim that they are no harder to use than conventionalsequential ones, programmers still face the problem of figuring out howto partition their application into tasks in addition to the usual problemof translating it into a program. An appealing alternative is to leavepartitioning of programs to compilers. By hiding partitioning problemsfrom programmers, this approach should make multiprocessor computerseasier to program than they are now. Unfortunately efforts to developparallelizing compilers have so far been rather unsuccessful.</TEXT></DOC>