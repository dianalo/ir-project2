<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-100-330  </DOCNO><DOCID>07 100 330.andM;</DOCID><JOURNAL>Communications of the ACM  March 1989 v32 n3 p287(5)* Full Text COPYRIGHT Assn. for Computing Machinery, Inc. 1989.andM;</JOURNAL><TITLE>ACM forum. (Letters to editor and responses regarding articles byby James H. Fetzer, 'Program Verification: The Very Idea' in Sep1988 issue; Alan M. Davis, 'A Comparison of Techniques for theSpecification of External System Behavior' in Sep 1988 issue; andother letters)andM;</TITLE><DESCRIPT/><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>acm forumandM;Editorial Process Verification Fetzer's article &quot;Program Verification: TheVery Idea&quot; in the September 1988 issue of Communications (pp.andP;  1048-1063) isnot a serious scientific analysis of the nature of verification.andP;  The articledistorts the practice and goals of program verification and reflects a grossmisunderstanding on the part of the author about the nature of programverification.andP;  This article does not meet minimal levels of seriousscholarship and its publication highlights some important problems withCommunications in general.andM;First, Fetzer's argument misrepresents the goals of program verification.andP;  Heerroneously asserts that the purpose of program verification is to provide anabsolute guarantee of correctness with respect ot the execution of a programon computer harrware.andP;  The author provides no citations to published claimsof &quot;conclusive absolute verification&quot; as the goal of program verificationresearch; indeed, the article is amazingly devoid of references to theprogram verification literature at all.andP;  Moreover, there are many uncitedtechnical papers (some references are given below) in which the limits ofproofs and verification are carefully drawn.andP;  Despite the author's claim tothe contrary, he has set up a &quot;straw man&quot; definition of verification in whichhe misrepresents the work of large numbers of computer scientists.andM;Further more, the article demonstrates a gross misunderstanding of programverification and the role of mathematics in any engineering endeavor.andO;Statements are made that are simply untrue, e.g., that assembly languageprograms do not lend themselves to verification.andP;  The author appears totallyunaware of the large body of work that demonstrates the application of formalverification methods to compilers, operating systems, and computer hardware.andO;In fact, the argument in the article seems to be based on the premise thatverification can be applied only to abstract programs written in high levellanguages, which is patently false and should have been known by anyonehaving an acquaintance with the program verification literature.andM;The conclusion of the article is that since program verification provides nocertainty, it is useless and possibly harmful.andP;  However, the same argumentsused in the article apply to any research in computer science that involvesthe static analysis of programs, including most of theoretical computerscience.andP;  We are amazed that the editors failed to recognize the potentialimplications of such a far-reaching and controversial argument and that theydid not take greater care to ensure the accuracy of the statements in thearticle--as indicated by the considerable amount of misinformation containedin it.andM;ACM claims to be a professional society, responsible to the public at largefor establishing and maintaining professional standards of conduct among itsmembers, and for advancing and promulgating responsible codes of practice.andO;Formal approaches to system construction and analysis are directly motivatedby the concern to construct trustworthy systems-- systems whose developerswill be willing to stand before the public and take responsibility for theconsequences of their deployment.andP;  As yet, this goal is unrealized, but workin formal verification is a serious contribution toward that goal, and isboth socially and scientifically responsible.andP;  As such, Communications'responsibility is surely to educate the members of the ACM about this field:its philosophical and technical basis, its achievements, its prospects, andits limitations.andP;  Serious and well-informed discussion of the limitations toformal verification, and of its strengths of defects relative to otherresponsible proposals for the construction of trustworthy systems, isentirely appropriate and would, we are sure, be welcomed by the practitionersof formal verification as well as by the general membership of ACM.andP;  Noticethat Communications has several categories of contributions other thanarticles (subject to review and authentication) which are appropriate forexpressions of opinions.andM;However, by publishing the illinformed, irresponsible, and dangerous articleby Fetzer, the editors of Communications have abrogated their responsibility,to both the ACM membership and to the public at large, to engage in seriousenquiry into techniques that may justify the practice of computer science asa socially responsible engineering endeavor.andP;  The article is ill-informed andirresponsible because it attacks a parody of both the intent and the practiceof formal verification.andP;  It is dangerous because its pretentious andponderous style may lead the uninformed to take it seriously.andM;Response from the author:andM;The ancient practice of killing the messenger when you do not like themessage receives its latest incarnation in the unfortunate letter from Ardis,Basili, et al.andP;  (&quot;The Gang of Ten&quot;).andP;  The authors allege (a) that I havemisrepresented the goal of program verification (thereby attacking a &quot;strawman&quot;); (b) that I have misunderstood the role of mathematics in anyengineering endeavor (especially within computer science); and (c) that myconclusion, if it were true, would undermine research in vast areas ofcomputer science (including most theoretical work).andP;  They claim my papercontains &quot;considerable misinformation&quot;, contending (i) that there are nopublished claims to &quot;conclusive absolute verification&quot; as the objective ofprogram verification; (ii) that assembly language programs are amenable toverification procedures; and, most significantly, (iii) that &quot;the authorappears totally unaware of the large body of work that demonstrates theapplicability of formal verification methods of compilers, operating systems,and computer hardware&quot;.andP;  The magazine has therefore published an&quot;ill-informed, irresponsible and dangerous paper&quot;.andM;(a) No doubt, there are various interpretations of what program verificcationis all about.andP;  Since I take pains to define what I have in mind within thecontext of my paper, it should be evident to those who read it carefully thatthe merits of alternative conceptions--especially those that dispense withthe quest for certainty by embracing inductive procedures--are not at issue.andO;Insofar as I am attacking Hoare's account of program verification, moreover,I am attacking a &quot;straw man&quot; only if Hoare's position is that of a &quot;strawman&quot;.andM;(b) The role of mathematics in engineering is not unambiguous.andP;  When it isemployed to describe abstract structures for which there are not supposed tobe physcial counterparts, it tends to qualify as pure mathematics.andP;  When itis employed to describe abstract structures for which there are supposed tobe physical counterparts, it tends to qualify as applied mathematics.andP;  Theposition that I presented on this matter would be mistaken only if there wereno difference between pure and applied mathematics, which is not the case.andM;(c) The authors misdescribe my conclusion, since it is not my thesis thatprogram verification is useless and possibly harmful because it provides nocertainty.andP;  As I emphasize here [&quot;Technical Correspondence&quot;, this issue], mypoint is that, since program verification cannot guarantee the performance ofany program, it should not be pursued in the false belief that it can--which,indeed, might be entertained in turn as the &quot;ill-informed, irresponsible anddangerous dogma&quot; that my paper was intended to expose.andM;With respect to misinformation, (i) the authors trade upon an equivocation inasserting that there are no published claims to &quot;conclusive absoluteverification&quot; as the objective of program verification.andP;  For while the phrase&quot;conclusive absolute verification&quot; may not appear in just those words, theconception that those words represent is certainly to be found inpublications by Hoare and Dijkstra that I cite.andP;  Moreover, (ii) while thesentence that I used in describing assembly language programming as a typethat does not lend itself to program verification may be literally false, thethought that assembly language programs are no more amenable to verificationprocedures than are those of programs in other higher-level languages issignificant and true.andM;Indeed, the specific avionics example that I was discussing (involving thetransmission of realtime streams of data from sensors to processors) reflectsa special type of programming that can be found in cruise missiles and othersophisticated systems with the capacity to reprogram themselves en route totheir targets.andP;  The only technique that would permit the verification ofthese programs as they are generated in flight would be procedures permittingthe correctness of these programs to be established as they are constructed.andO;Perhaps the authors of this letter could volunteer to accompany thesemissiles on future flights in order to demonstrate that this is a type ofprogramming that actually does lend itself to the construction of programverifications, after all.andM;When these authors maintain (iii) that my paper ignores a large body of workwhich &quot;demonstrates the application of formal verification methods tocompilers, operating systems, and computer hardware&quot;, alas, they betray acomplete failure to understand the issues with which I was concerned.andP;  Thecompilers, operating systems and computer hardware they have in mind, nodoubt, are physical entities, i.e., complex causal systems whose propertiesin principle cannot be ascertained independently of experience.andP;  Hence, thereis a crucial ambiguity in their use of the phrase &quot;formal verificationmethods&quot;, by which might be meant those of absolute or those of relativeverification.andM;This difference, of course, is critical, since the methods of absoluteverification are conclusive but cannot be applied to causal systems, whilethose of relative verification can be applied to causal systems but are notconclusive.andP;  This letter, I am afraid, displays no comprehension at all ofthe fundamental distinctions between validity and soundness, programs andalgorithms, pure and applied mathematics, abstract entitles and physicalsystems and the like upon which the extremely important issues at stake hereultimately depend.andM;That there are those in the verification community who appreciate thesepoints goes without saying.andP;  An apt illustration, I believe, is theforthcoming paper by Avra Cohn entitled, &quot;The Notion of Proof in HardwareVerification&quot;, [Journal of Automated Reasoning 5, 2 (1989)], which displays agreat deal of sensitivity to the basic issues at stake in my article.andP;  [Noone should conclude that Cohn therefore endorses the position that I defend,however, since--to my surprise--she is one of the three Cambridge scholarswho reject my analysis on peripheral grounds elsewhere in this issue of thismagazine.]andM;The pathetic quality of thought embodied in this letter is further manifestby its authors' failure to recognize that the truth of my position doesindeed undermine research results in vast areas of computer science, but onlyto the extent to which the significance of those findings is not properlyunderstood.andP;  I find it difficult to believe that the authors want toseriously maintain that computer science (or any other intellectualdiscipline) could possibly benefitfrom misunderstanding or frommisrepresenting the certainty of its findings.andP;  This is yet another crucialissue that these people are unable to comprehend.andM;If the intellectual deficiencies of the position they represent areappalling, the unwarranted abuse to which they subject the editors of thismagazine is both vicious and vindictive.andP;  As an author of more thanforty-five articles or reviews and the author or editor of six books, I havenothing but praise for the efforts expended on my behalf by the editors andstaff of this magazine.andP;  The work of Rob Kling, in particular, in providingsympathetic criticism and in enforcing high standards was superlative.andP;  Inits inexcusable intolerance and insufferable self-righteousness, this letterexemplifies the attitudes and behavior ordinarily expected from religiouszealots and ideological fanatics, whose degrees of conviction invariablyexceed the strength of the evidence.andP;  James H. Fetzer Philosophy andHumanities University of Minnesota Duluth, MN 55812andM;Reply from the Editor in Chief:andM;The editors welcome controversy and strive to make Communications an organ inwhich well-developed controversial ideas can be expressed.andP;  Some readers willreact to such ideas with anger, others with pleasure.andP;  It is better topublish all the sides rather than to suppress issues that are uncomfortableto some.andP;  Full discussion of controversial ideas is essential to theadvancement of our science.andM;We received many letters about Fetzer's paper.andP;  Most of the commentersbrought up technical and philosophical points in the controversy.andP;  We havegathered them together in the Technical Correspondence section of this issue,(pp.andP;  374-381) together with a response from Fetzer.andP;  The letter printedabove, however, goes beyond the content of the article and questions thesafety of its words and the judgment of the editors.andP;  I will respond to thesecriticisms here.andM;Upon receiving the submitted manuscript, the executive editor (Jim Maurer)could have assigned it either to the dependable computing department (JohnRushby, editor) or to the social aspects department (Rob Kling, Editor).andO;Because the article claimed to be a philosophical treatment of theinteraction between program verification and social processes, with emphasison the latter, Maurer requested Kling to handle the review process.andP;  Klingaccepted the assignment and obtained reviews from four well-known computerscientists.andP;  He and the reviewers assisted the author through four rounds ofrevision before he recommended acceptance of the manuscript.andP;  I am satisfiedthat the editors acted responsibly, that the article was subjected to areview more rigorous than is required by ACM policy, and that the reviewprocess was fair and professionally sound.andP;  I stand fully behind my editors.andM;At the bottom of the complaint of the above writers is a fundamentaldisagreement with Kling's decision.andP;  I take ful responsibility--there is noabrogation.andP;  I am dismayed by the ad hominem attacks sprinkled through theletter, which detract from the thooughtful criticisms and worthwhilesuggestions for more discussion.andP;  The ACM does not condone such attacks.andP;  Iam publishing their letter in full as an opportunity to remind all readers ofour stand.andM;The writers call attention to ACM's commitment to educate the public aboutthe field through serious and well-informed discussions.andP;  The editors ofCommunications are conscientiously doing precisely that.andP;  The researchers inprogram verification are convinced that significant scientific progress hasbeen made and is not widely appreciated.andP;  At the same time, many othersopenly question whether program verification is up to the task ofcontributing significantly to dependable computing systems.andP;  It is time forthe two sides to communicate.andP;  It is time for us all to engage in a seriousdiscussion to understand the strengths and weaknesses of current approachesto program verification.andP;  It is time to reveal and address the sources ofpeople's uncertainty about the efficacy of the methods.andP;  Communications isavailable as a medium for the ongoing inquiry and will thereby contribute tothe education of the community.andP;  I am pleased to report that John Rushby isorganizing a special section on program verification that will set forth thebest work of the field in a way that all readers can understand.andP;  This willserve as the best answer to date for the critics of program verification, andan opening for the rest of us to join the inquiry.andP;  Fetzer's articlestimulated this! Peter J. Denning Editor in Chief Communications of the ACMandM;Externally SpeakingandM;Alan M. Davis Describes and evaluates Real-Time Structured Analysis (SA/RT)among other methods in his article &quot;A Comparison of Techniques for theSpecification of External System Behavior&quot; in the September 1988 issue (pp.andO;1098-1115).andP;  Although I agree with many of Davis's evaluations.andP;  I must takeexception to his poor rating of SA/RT on &quot;external view, not interval view.&quot;andO;He states in defense of his judgement that &quot;Due to its geneology (i.e.,andO;structured analysis, which is one of the worst offenders in this regard),SA/RT must also score low.&quot;andM;The primary notation of conventional structured analysis (the data flowdiagram) is inherently neither external nor internal; it simply describes thetransformation of inputs into outputs, possibly conditioned by the history ofprevious inputs.andP;  It is true that, as taught and written about in the late1970s and early 1980s, structured analysis paired the notation with atop-down functional decomposition strategy for identifying model components.andO;Not surprisingly, when applied by people who had written code, this strategyresulted in models with a software-like (or &quot;internal,&quot; in Davis's terms)organization.andM;Although there are still some adherents of this early model-building style,considerable work has since been done on more effective strategies.andP;  Inparticular, McMenamin and Palmer [4] describe model-building guidelines basedsquarely on stimulus-response analysis and on the identification of externalentities.andP;  Davis cites my 1986 article on SA/RT [6], which restricts itselfalmost entirely to notation, as a source.andP;  Had he also read the second volumeof my 1985 book co-authored with Stephen J. Mellor [5], he would havediscovered that we extend McMenamin and Palmer's strategy into the real-timearea, and that we espouse a model building method based on responses toexternal stimuli and on external entity identification.andM;I would also like to point out the Davis's score of zero for SA/RT on&quot;prototype generation&quot; has been superseded by recent events.andP;  Several CASEproducts now permit execution of SA/RT models.andP;  Paul T. Ward SoftwareDevelopment Concepts 424 West End Ave., Apt.andP;  11E New York, NY 10024andM;I have a number of agreements and disagreements with the contents of PaulWard's November 7 letter to the ACM Forum concerning my September 1988Communications paper [1] on &quot;A Comparison of Techniques for the Specificationof External System Behavior.&quot;andM;I agree wholeheartedly with Ward's comment that the data flow diagram (DFD)notation itself is not inherently external or internal.andP;  However, DFD's werefirst used by software designers to design their software into hierarchies ofsoftware components, i.e., a pure internal view with respect to the overallsystem being analyzed, specified or designed.andP;  Ward claims that structuredanalysis was taught that way &quot;in the late 1970s and early 1980s&quot; and stillhas &quot;some adherents.&quot;andP;  I contend that this is still a widespread problemtoday.andP;  Much, if not most, of the literature, tools, and courseware today on&quot;structured analysis&quot; continues to proliferate the problem by prescribing amethodology that says (1) perform structured analysis as a hierarchy of DFD'swith associated information; (2) convert the static hierarchy of processesdefined in step 1 into a dynamic hierarchy of the same processes (i.e., whocalls whom).andP;  Many consider this dynamic calling hierarchy as the design andthe static hierarchy to be requirements.andP;  I strongly believe that both aredesign; i.e., both are clearly specifications of the internal structure ofthe software system.andP;  What is needed is (1) to do an analysis of the problemdomain (in the same vein as DeMarco's current physical and logical DFD's [3]where possible; then (2) analyze the external needs of the system'senvironment including the users; then (3) define an external system behaviorto satisfy those needs (in the same vein as Ward's definitions of systemcontext, external events, and system behavior [5]); and then (4) define thestatic hierarchy of software components and continue the design.andP;  I havecaptured some of these ideas in another paper.andP;  Based on Ward's letter and onreading his book, I suspect that he agrees as well.andP;  Our only disagreementhere appears to be in the degree to which the problem exists today ofstructured analysis being used in lieu of design.andM;I have now read the Ward/Mellor book to which he referred in his letter.andP;  Iagree with him that this work (unlike his later paper [6]) presents amethodology using DFD's which clearly maintains the analyst in therequirements analysis and specification domain, i.e., it creates aspecification of the system from an external viewpoint, not an internal one.andO;The hierarchy of DFD's that results from his methodology is created at thedetailed level first.andP;  This is done by analyzing each interface and/or eventindependently and then merging to create more abstract views of the entiresystem.andP;  This results in a hierarchy in which the lowest, most detailed,level is still an external view of the system, while the highest levels aresimply more abstract specifications of the same external view.andP;  In view ofthis, I believe that the rating of SA/RT for &quot;external view, not internalview&quot; on page 1113 of my paper should read &quot;8--By following Ward's manualmethodology, a pure external view can be easily maintained.&quot;andM;Ward's last point concerns the availability of &quot;CASE&quot; tools to permitexecution of SA/RT models.andP;  I am quite familiar with about two dozen SAand/or SA/RT-related tools.andP;  My impression is that Cadre's Teamwork, ICONIX'sPRISM, Index Technology's Excelerator, IDE's Software Through Pictures,McDonnell Douglas's Prokit Workbench, Meta System's Structured Architect,Nastek's Design Aid, ProMod's ProMod, Ready Systems' CARDTools, Star-Sys'sMacBubbles, Tektronix's TEK, and Yourdon's A/D Toolkit all support the SA/RTnotation.andP;  Of these, only Software Trhough Pictures and CARDTools provideprototype generation.andP;  In these two cases, the prototype generation is of theuser interface screens, menus, commands, etc., and is independent of theSA/RT specification.andP;  Similarly, Learmonth and Burchett's Automate Plus,Menlo Business Systems' FOUNDATION and TI's IEF provide the same type ofprototyping but do not appear to support SA/RT at all.andP;  i-Logix's STATEMATEprovides simulation and prototyping of the actual product's complete externalbehavior (i.e., beyond &quot;just&quot; screens) but uses Harel's hierarchicalstatecharts as its basis, not SA/RT.andP;  Therefore, unless Ward can supply mewith specific examples, I must continue to give SA/RT a zero for thegeneration of prototypes from SA/RT sepcifications.andP;  Alan M. Davis BTG, Inc.andO;1945 Old Gallows Rd. Vienna, VA 22180</TEXT></DOC>