<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-335-780  </DOCNO><DOCID>08 335 780.andM;</DOCID><JOURNAL>Dr. Dobb's Journal  May 1990 v15 n5 p82(10)* Full Text COPYRIGHT Mandamp;T Publishing 1990.andM;</JOURNAL><TITLE>Multiprocessing with Smalltalk/V. (Software Review) (CXMultiprocessing Extension Kit for Smalltalk/V object-orientedprogramming environment) (evaluation)</TITLE><AUTHOR>Ayers, Kenneth E.andM;</AUTHOR><SUMMARY>Computas Expert Systems' $99.95 CX Multiprocessing Extension Kitincludes 15 separate modules that provide many useful extensionsto the Smalltalk/V object-oriented programming environment.andP;  Itincludes basic utility methods, process and semaphore extensions,a screen controller, an event queue mechanism, and a completeclass hierarchy for data acquisition.andP;  The kit is well documentedand easy to learn, but suffers from a lack of concrete examples.andO;A sample application providing an animated simulation ofsupermarket checkout counters is included to demonstrate and applythe use of multiprocessing features supported in the CXMultiprocessing Extension Kit.andM;</SUMMARY><DESCRIPT>Company:   Computas Expert Systems (product introduction).andO;Product:   CX Multiprocessing Extension Kit (Program development software).andO;Topic:     Programming LanguagesAdd-In-On SoftwareObject-Oriented ProgrammingObject-Oriented LanguagesEvaluation.andO;Feature:   illustrationprogramtable.andO;Caption:   Listings (program)Hierarchy of classes for the market simulation. (table)andM;</DESCRIPT><TEXT>Multiprocessing with Smalltalk/VandM;The origins of object-oriented programming in general and Smalltalk inparticular are closely tied to the simulation of real-world events andsystems.andP;  A primary reason for this association is Smalltalk's facility fordescribing the behavior of a simulated system in terms of those real objectswith which the implementor is familiar.andP;  Thus, the programmer of a highwaytraffic simulation can create car objects and truck objects and give thembehaviors that mimic their real-world counteparts.andP;  Likewise, someone who isstudying the flow of people through supermarket checkout lines can createobjects representing customers, checkers and baggers and have them carry outactions that are familiar to anyone who has spent time waiting behind ashopping cart.andM;As an added benefit, extensible systems such as Smalltalk permit thedeveloper of a simulation system to construct his or her own task languagewith which to describe the flow of information back and forth between thevarious participants in the simulation.andP;  This task language then becomes apart of the development system.andM;Until recently, though, the availability of object-oriented languages such asSmalltalk were limited to those using powerful (and expensive) workstationsor minicomputers.andP;  Fortunately, that changed when Digitalk (Los Angeles,Calif.) introduced Smalltalk/V and its more powerful brother, Smalltalk/V286.andP;  And, with a growing community of devoted followers, third-party supporthas finally begun to emerge.andP;  Because Smalltalk is such an open-ended system,this support commonly assumes the form of toolkits that extend thecapabilities of Smalltalk's built-in environment.andP;  One such toolkit is the CXMultiprocessing Extension Kit from Computas Expert Systems.andM;The GoodsandM;The CX Multiprocessing Extension Kit the Kit) provides many useful extensionsto the Smalltalk/V or Smalltalk/V 286 environments.andP;  Within its 15 separatemodules, the Kit provides extended functionality ranging from basic utilitymethods all the way up to a complete data acquisition class hierarchy.andP;  As isexpected in the Smalltalk world, source code is provided for all of theclasses and methods; and filein's (scripts to read source code into theSmalltalk system) are available for installing each of the modules.andP;  Briefly,the modules include:andM;* Basic Extensions -- are general methods used by other modules in the KitandM;* Process Extensions -- support the creation of named processes, bindingvariables to a process, and assigning process prioritiesandM;* Semaphore Extensions -- provide enhancements to inter-processcommunications including named semaphores, limited-capacity semaphores, andsynchronized message queuesandM;* Screen Controller -- allow updates to partially obscured windows anddisplaying variable graphic information over a constant background imageandM;* Process Status Window -- implements a standard window for real-timemonitoring processes and semaphoresandM;* Data/TimeServices -- enhanceSmalltalk/V with the ability to format date andtime output, and convert between formatsandM;* Events Queue Mechanism -- adds timed events (either relative or absolutedate/time) and a monitor process that watches the system's clock for eventtriggersandM;* Acknowledge Mechanism -- permits a background process to temporarily gaincontrol of the user interface for the purpose of acknowledging or verifyingactionsandM;* Data Acquisition Protocol -- implements a class hierarchy, under theabstract class Instrumentation, that provides a complete Smalltalk/Vinterface to the MicroMac 4000 controller from Analog Devices.andP;  The protocol,which serves as a functional template, can be modified to support other typesof instrumentation controllers and subsystemsandM;* Miscellaneous Extensions -- contain six additional modules not directlyrelated to multiprocessing including a Form Inspector that displays thecontents of a displayable image; enhancements to Smalltalk/V's FreehandDrawing (that is, painting) application and its associated Bit Editor;improvements in the behavior of the built-in TextEditor class; new versionsof the class Browsers; and an Application BrowserandM;The GoodiesandM;Several of the extensions provided by the CX Multiprocessing Extension Kitdepend upon capabilities added by one or more of the Goodies disks available(as options) from Digitalk.andP;  These dependencies, as well as the dependencieswithin the Kit's internal modules, are clearly specified in thedocumentation.andM;Of primary concern, however, is the lack of support for multiprocessing inthe original Smalltalk/V.andP;  Users of Smalltalk/V must install the Goodies #1package before any of the CX multprocessing extensions can be used.andP;  Users ofSmalltalk/V 286 do not have this concern.andM;Otherwise, the Data Acquisition Module depends upon the DigitalkCommunication Kit (for serial communications); the Freehand Drawingextensions depend upon Goodies #1 (to load and store images); the Text Editorextensions require Goodies #2; and the Browser and Application Browsermodules need both Goodies #2 and Goodies #3.andM;One further note must be offered because it presents a problem whenattempting to load the CX Multiprocessing Kit.andP;  Smalltalk/V and Smalltalk/V286 do not support floating point numbers without a math coprocessor presentin the system.andP;  The CX Data Acquisition module is the only module thatappears to require floating point capabilities.andP;  In order to load any othermodules from the kit on a system that does not have an 80X87, the methodscontainsFloat and asFloat, in the Basic Extensions module (CXBSCEXT.PRJ),must be commented out.andP;  (Note: The Goodies #2 kit provides software floatingpoint support.)andM;The PackageandM;The evluation copy I received was marked Version 1.0.andP;  It was supplied on asingle 3.5-inch (720K format) diskette (a 5.25-inch format is alsoavailable).andP;  The data necessary to build the installation package has beencompressed into several special .EXE files.andP;  One of two batch files (one forSmalltalk/V and one for Smalltalk/V 286) are invoked to initiate the creationof more than 60 source code and example files.andM;A concise, well written, 105-page manual describes each of the modules andprovides simple installation instructions in the required sequence.andP;  Thenumber of examples given in the manual is somewhat limited, although theSmalltalk/V source code for many others is available in various files.andO;Consistent with Smalltalk/V's tutorial, these examples can be selected andexecuted using the File Browser.andM;Multiprocessing?andM;The Smalltalk/V 286 Virtual Machine (its kernel) contains support forscheduling the execution of multiple processes with consideration forpriority levels.andP;  In the context of Smalltalk, a process is a block of codethat is capable of executing as an independent program.andP;  During its lifetime,a process can assume any one of several states: Active, the process iscurrently executing and &quot;owns&quot; the computer; Ready, the process is ready torun but is waiting to be scheduled for execution; Blocked, the process iswaiting for some resource to become available or for some event to occur (forexample, a signal from another process); and Dead, the code associated withthe process has reached its logical point of termination.andM;A process is created by sending the message fork or forkAt:aPriority to ablock.andP;  An example is [self run] forkAt:2.andP;  In response, the Smalltalk/Vkernel will create a Process object, whose code is the expression in theblock ('self run'), and schedule it for execution at the next availableopportunity.andP;  That opportunity comes when:andM;1.andP;  The current active process terminates, becomes blocked or voluntarilyrelinquishes control by executing the statement Processor yield.andM;2.andP;  There are no other ready processes at a higher-priority level.andM;3.andP;  There are no other ready processes at the same priority level that havebeen ready for a longer period of time.andM;Note that Smalltalk's scheduling is non-preemptive or cooperative.andP;  There isno time slicer that periodically says &quot;Okay process, you've had enough time.andO;Time to let this other process have its chance.&quot;andP;  In Smalltalk, it's up tothe programmer to assure that processes are &quot;courteous&quot; and periodically giveothers a shot at running the show.andM;By its very nature, multiprocessing capabilities are ideally suited to taskssuch as industrial control and monitoring, and to a class of applicationsknown as discrete event simulations.andP;  In both of these types of applications,multiprocessing allows each individual object participating in theapplication to be represented by separate processes.andP;  Processes communicatewith one another by sending messages (via message queues) or by signaling(via semaphores) the occurrence of some event required for coordinating theiractivities.andM;Lining Up an Example ApplicationandM;To demonstrate the use of multiprocessing and apply some of the many featuresoffered by the CX Multiprocessing Kit, I have included a simple applicationthat provides an animated simulation of checkout counters at a typicalsupermarket.andP;  In this application, there are five basic classes of objectsand processes:andM;1.andP;  Customer processes (instances of class Customer) enter a checkout line,wait to be served, empty their carts, and then leave.andM;2.andP;  Checkout clerk processes (class Checker) accept items from the customerand hand them off to be put into grocery sacks.andM;3.andP;  Bagger processes (class Bagger) accept items from the checkout clerk andplace them into grocery sacks.andM;4.andP;  Checkout counter processes (instances of class CheckoutCounter) areassigned one checkout clerk, one bagger, and a queue of customers who arewaiting to be serviced.andM;5.andP;  The &quot;store&quot; itself (represented by the class MarketSimulator), is asingle process that generates new customers and collects information aboutthe simulation as it runs.andP;  The classes Customer, Checker, Bagger, andCheckoutCounter are all subclasses of the class MarketActor.andP;  Listing One(page 114) lists the classes while Listing Two (page 118) lists thesimulation program itself.andM;MarketActor is an abstract superclass that provides all of the commonfunctionality such as displaying and animating, accessing size and positioninformation, and starting and stopping the object's associated process.andP;  Thesubclasses add additional behaviors that are more appropriate to theparticular type of simulated actor.andM;Internally, the coordination between the checkout counter, the customer, thechecker, and the bagger are carried out by passing command messages to otherprocesses using instances of the class MessageQueue (which was added by theCX package).andP;  The typical sequence of events for this animated simulation isshown in Example 1.andM;All of these interactions model quite closely (at least in my mind) theinteractions between real people at a checkout counter.andP;  Note, however thatmuch of the interaction I have included (that is, &quot;take this item&quot; and &quot;gotit!&quot;) is for the purpose of animating the simulation and serves no realpurpose if the goal were merely to gather information about the simulatedprocess.andP;  Figure 1 depicts a snapshot of this simulation while it is running.andM;Setting upandM;Setting up the sample simulation also makes use of some of the tools providedas part of the CX Multiprocessing Kit.andP;  In particular, the BitEditor is usedto create a set of images used in the animation sequences.andP;  To do this,evaluate with doit, the Smalltalk expressions shown in Example 2.andM;Then, for each of the keys (PersonUp, etc.) evaluate the expression BitEditornew openOn:(MarketImages at:andless;keyandgt;').andP;  Create the animation images using thosein Figures 1 - 4 as a guide.andP;  Because the BitEditor uses a fixed scale andcan only handle bit maps up to about 60 pixels in height, the individualimages should be magnified using the expression in Example 3.andP;  Finally, enterthe simulation classes in the order shown in Figure 5.andM;Open the simulation window by evaluating the expression MarketWindow newopen.andP;  The simulation is started by popping up the pane menu, STARTSIMULATION, and clicking on it.andM;ConclusionsandM;The basic multiprocessing capabilities found in the Smalltalk/V 286environment are sufficient, with some ingenuity, to create fairly elaboratesimulations.andP;  The methods and classes included as part of the CXMultiprocessing Extension Kit offer many much needed enhancements to thoselimited capabilities.andP;  This is particularly true of the classes EventQueueand Message Queue, which facilitate the implementation of timed events andinterprocess communications.andP;  (When I first implemented the exampleapplication accompanying this article, I did so without using the messagequeuing capabilities.andP;  The result was extremely cumbersome and prone tounexplained failures.andP;  The decision to pass command messages betweenprocesses made the flow of information explicit and made the entireapplication much more undertandable.)andM;The package offers an extraordinarily large number of features, all of whichappear to be quite useful to the serious Smalltalk/V developer.andP;  Furthermore,there seems to be little evidence of redundancy or overkill.andP;  Some of thefeatures, particularly the browser extensions, particularly the browserextensions, are worthy of a review by themselves.andM;One of the few real faults I could find was the lack of concrete examples.andO;As seems to be common practice, many of the examples, while certainlycomplete and accurate, are rather trivial.andP;  To someone having limitedexperience with Smalltalk's multiprocessing features, that type of examplefails to illustrate adequately the key concepts involved in creating andcoordinating multiple processes.andP;  Personally, I would prefer to see one ortwo really complete examples than a hundred ways to print &quot;hello world&quot; usingmultiple processes.andM;From an operation point of view, the use of named processes and semaphorestends to impair Smalltalk's garbage collection and tends to leaveinaccessible objects lying around unclaimed.andP;  In all fairness, this anomalyis documented; yet its occurrence is still disconcerting.andP;  I noticed that theuse of the Process Status Window also seemed to produce a similar effect.andM;It is noted that the use of timed events creates a high-priority backgroundprocess to watch the clock and look for events that need to be triggered.andO;This appeared to affect the performance of other parts of my simulation,slowing it down considerably.andP;  Thus, for example, to implement a &quot;sleep for nseconds&quot; method, I found that watching the time myself produced betterresults than scheduling an event for n seconds in the future.andP;  Undoubtedly,for infrequent events occurring at some absolute date/time, this featurewould be invaluable; but for short, repetitive delay operations it seemed toincur a considerable overhead.andM;Finally, though the cost of the extension package itself is certainlyreasonable, the hidden costs of the Goodies, required to make full use of itscapabilities, nearly triples the upfront cost of using this package.andP;  Eventhough the Goodies packages do offer a lot of added functionality at areasonable price, I feel it only fair to warn the potential user that theyrepresent an additional cost.andM;The net result of my experience exploring the CX Multiprocessing ExtensionKit was certainly positive.andP;  I have gained additional insight into the realmof multiprocessing within the context of Smalltalk and feel certain thatpotential users of this package would benefit from its diverse capabilities.andM;But for now, I'm going to get back to my simulated market and see if I cananswer the question that has plagued modern man since the opening of thefirst supermarket: Why is the shortest line always the slowest?andM;Ken is a software engineer currently employed by Industrial Data Technologiesin Westerville, Ohio, where he is involved in the design of industrialgraphic workstations.andP;  He also works part time as a consultant, specializingin prototyping custom software systems and applications.andP;  He can be contactedat 7825 Larchwood Street, Dublin, OH 43017.andO;</TEXT></DOC>