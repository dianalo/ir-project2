<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-565-607  </DOCNO><DOCID>09 565 607.andM;</DOCID><JOURNAL>Communications of the ACM  Oct 1990 v33 n10 p109(10)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Traditional dialogue design applied to modern user interfaces.andO;(technical)</TITLE><AUTHOR>Nielsen, Jakob.andM;</AUTHOR><SUMMARY>Computer programmers designing character-based user interfacestraditionally employ the dialogue design methodology.andP;  Somedevelopers consider this approach to be obsolete because of themove to graphical user, icon-based interfaces.andP;  An argument ismade that dialogue design principles can be effective for userinterface management systems even when using new interactivetechniques such as icons, pointers, menus and windows.andP;  The reasonfor this is that the issues of user-friendliness remain,regardless of the type of interface.andP;  The nine usabilityprinciples involve the use of natural, easy, culturally relevantlanguage that minimizes the stress on users' memories.andP;  Theyshould have consistency; clear shortcuts and exits; feedback;plain, problem-solving error messages; and error-preventionprocedures.andP;  The dialogue design approach should be applicableeven to future, three-dimensional interface development.andM;</SUMMARY><DESCRIPT>Topic:     Graphical User InterfaceUser Interface Management SystemsApplications ProgrammingTechnology.andO;Feature:   illustrationtable.andO;Caption:   Nine usability principles. (table)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>TRADITIONAL DIALOGUE DESIGN APPLIED TO MODERN USER INTERFACESandM;Recently, I coauthored an article [11] on the application of dialogue designprinciples to improve user interfaces.andP;  The example used in the article was atraditional, full screen-oriented, character-based interface, and one of thereferees remarked that &quot;much of this paper may become obsolete with windowsystems.&quot;andP;  We had used traditional interfaces in our example because they aremuch simpler to explain on paper than dynamic graphic interfaces, whichalmost require a video tape to present sufficient detail for a completeinterface analysis.andM;On the other hand it is true that practically all new computer systems usesome form of the windows, icons, menus, and a pointing device interface style(WIMP).(1)  It is certainly possible to design much better user interfacesusing there modern interaction techniques.andP;  For example, the text editor I amusing to write this article (Microsoft Word) shows me bold-faced words inbold face rather than indicating the font style indirectly through someobscure code.andP;  When I open a new file for editing, I use the mouse to clickon its name in a menu, which helps me to avoid having to remember the exactspelling of the name and encourages me to use long file names that can bemore descriptive and thus easier to understand.andM;One of the oldest observations in computer science, however, is that thequality of the tools may influence the quality of the product, but that theycannot guarantee it.andP;  The classic example is that it is possible to writespaghetti code in Pascal and a well-structured program in BASIC.andP;  Even so,most computer science faculty would prefer teaching Pascal, and most userinterface specialists would recommend the use of a graphic implementationplatform.andP;  Some designers may tend to forget the old, established principlesfor good dialogue design because they get excited about the additionalpossibilities inherent in modern user interfaces.andP;  As the examples in thisarticle show, however, one still has to pay close attention to the principlesfor good dialogue design, even when using a modern interface.andM;The following examples of usability problems in WIMP interfaces arestructured according to the nine usability heuristics from [11].andP;  These nineprinciples are listed as the section headings here and are discussed infurther detail in the box.andP;  The principles are so basic that even futuristicdialogue designs such as three-dimensional interfaces with DataGlove[tm]input devices [32], gesture recognition [29], and live video images [2] willalways have to take them into account as long as they are based on the basicparadigm of dialogues and user commands.andP;  For future computer systems basedon completely new usage paradigms such as agents, drama, and personality [9,12], new usability heuristics may be needed, but it is likely that many ofthe traditional principles would still apply.andM;Many of the examples in this article are taken from the Apple Macintosh.andO;This does not imply that I think it has a poor interface in general.andP;  Quiteto the contrary, I like the Macintosh so much that I have used it daily forfour years now.andP;  I have collected a lot of Mac-based examples because of thisheavy use and because I have conducted several user tests of Macintoshsoftware.andM;Simple and Natural DialogueandM;A simple example of an unnatural element in a graphical interface is thewastebasket icon in Figure 1.andP;  The basic principle of printing icon namesover several lines provides a more natural display than the alternative ofhaving a single, long stringof letters that is often eight times wider thanthe icon itself.andP;  Figure 1 shows the need to ensure readability by onlybreaking lines according to a good hyphenation method.andM;To be natural, the structure of a dialogue has to achieve a close match withthe user's task organization instead of being matched to the internalstructure of the application.andP;  In the example in Figure 2, the allocation ofseveral important paint tools to a subpanel has been seen as unnaturalbecause they will not always be directly accessible.andP;  To quote one review inthe trade press [23], &quot;the most important and often-used paint tools (pencil,paintbrush, eraser, and so on) are inexplicably tucked into a remote cornerof the screen.&quot;andP;  In defense of the current design it should be noted that itfollows the &quot;provide shortcuts&quot; principle.andP;  This means it allows users todirectly access the subpanel containing four of the five most important painttools by clicking on the small square between the arrow triangles instead ofhaving to cycle through all the subpanels.andM;A more natural design could probably have been achieved by having the mainpaint tools permanently visible instead of the line thickness list, whichcould have been made into a submenu.andP;  Of course it is only possible to knowwhat would really be most natural to the majority of users by undertaking anextensive set of field observations to count the frequency with which varioususers access the two categories of dialogue elements.andM;Speak the User's LanguageandM;Anyone who thinks that this design principle does not apply to graphicdialogues should observe how Danish or Thai trash cans look different fromAmerican ones [22, 26].andP;  On the Macintosh, however, the trash can icon issupplemented by a subtitle giving its name.andP;  As long as that label has beenproperly translated to the local language, users are still able to understandthe meaning of the combined visual and textual dialogue item even if theactual icon looks different to the user.andM;An example that does cause problems is the truncation of user input whichoccurs in many Macintosh applications in the standard Put File dialogue usedto save files under new names.andP;  An example of such a dialogue box is shown inFigure 3.andP;  If users type a very long file name, the system will apparentlyaccept it (since it does not give an error message), but it will actuallytruncate the name to the first 31 characters without warning the user.andP;  Thissystem-dictated change of the user's intend input violates the designprinciple of speaking the user's language.andP;  There is also a visual truncationof some otherwise legal file names in the list.andP;  Finally, the design is alsoin trouble with the &quot;simple and natural dialogue&quot; principle since the boxinto which the user types is not large enough to show the entire file name.andO;The box scrolls as the user types and therefore does work; it is just notnatural.andM;As long as file names are restricted to 31 characters, the solution to thevisual truncation problem is obviously to make the box larger.andP;  A betteroverall design would accept aribtrarily long file names, and then there woulbe no simple solution to the visual truncation problem.andP;  One option would beto word wrap file names to use as many lines as necessary to display them.andP;  Itend to prefer a design with enough room to accommodate most file names sinceusers would rarely take the trouble to type in truly long names.andP;  By loggingthe file names created by a number of users over a period of time it would bepossible to estimate the distribution of lengths and produce a design thatwould show 98 percent of all file names correctly.andM;Minimize User Memory LoadandM;Modern graphical interfaces normally score quite well on this usabilityprinciple since they are based on keeping visible representations of theobjects of interest on the screen.andP;  Users do not have to remember file nameswhen they can open a file by double clicking on its icon on its screen.andO;Also, as shown in the left part of Figure 4, the different types of iconshelp the user remember the nature of the information in each file.andM;It would be possible to assist the user's memory even more by having a higherdegree of richness in icons so that they woudl explicitly show additionalattributes of the files.andP;  The right side of Figure 4 suggests a way for iconsto distinguish among various sizes of word processor files.andP;  Users willprobably find it easier to recall the meaning of an object if more of itsattributes can be recognized from its visible (and auditory [5])representation.andM;Wang Laboratories, Incorporated has a product called Freestyle that achievesan extremely high degree of richness by representing files as miniatures [20]of the actual file contents instead of icons, as shown in Figure 5.andO;Freestyle is very nicely designed in general, but it does violate theprinciple of minimizing user memory load in one aspect of its user interface.andM;The user can group several documents together by positioning their miniatureson top of each other in a pile and applying a stapler to them.andO;Unfortunately, a stapled set of documents is displayed just by the miniatureof the one page, which happens to be at the top of the pile.andP;  It would havebeen nice if miniatures of a pile could have indicated the thickness of thepile in some way.andP;  As it is, users are stuck with the unnecessary memory loadof having to remember which and how many documents they put in the pile.andM;Be ConsistentandM;Graphical interfaces seem in eneral to be more consistent than olderinterfaces.andP;  this is not due to any inherent quality of graphical interfacesor windowing, however, but from almost all vendors of graphical interfaceshaving issued style guides for designers of applications for thoseinterfaces.andP;  Furthermore, prorgrammers are encouraged to follow thoseguidelines by various development toolkits that make it easier to implementconsistent interfaces that inconsistent ones.andM;Even so, there are plenty of inconsistencies to be found in modern graphicalapplications.andP;  For example, version four of Microsoft Word for the Macintoshintroduced the dialogue box shown in Figure 6 for customizing the menus inthe program.andP;  In the example in the figure, the user has selected the command&quot;Arabic Page Numbers&quot; and asked to have it added to the &quot;Format&quot; menu.andM;Now, to quote the Apple Human Interface Guidelines, which all MAcintoshprograms are supposed to follow: &quot;Cancel dismisses the dialog box and cancelsthe original command&quot; [1, 27].andP;  therefore it would be natural for th euser toassume that clicking the Cancel button would undo the change and restore themenu system to its previous state.andP;  This is not so, however, since the effetof Cancel here is only to remov e the dialogue box from the screen withoutundoing the change (the user has to click on Remove to do so).andP;  Furthermore,assuming that the user is satisfied with the change and wants to confirm it,it would be natural for the user to click on the OK button, since that is theaccepted way to confirm the action in a dialogue box on the Macintosh.andP;  Sincethere is no OK button, users are often observed wondering which other buttonto click (since they know that Cancel will do the opposite of what they want)and frequently end up clicking on Do--which has yet another effect.andM;Another inconsistency example comes from the two different ways scrollinglists of files cans be displayed on the Macintosh as shown in Figure 7.andP;  Inthe operating system, the user controls the sorting order for lists, andwindows with scrolling lists will therefore often be sorted by criteria likethe last modification date for files.andP;  Within applications, however, thescrolling file lists displayed by an Open File command will always be sortedalphabetically, thus presenting an inconsistent view of the subdirectory whencompared with the user-controlled window view.andP;  The best solution probablywould be to sort the application-displayed file lists by the same sort orderasthat chosen by the user for the subdirectory in question, since the userhas presumably chosen that sort order because it is the most appropriate forthose files.andM;Provide FeedbackandM;Feedback is inherent in many forms of graphical interfaces where the user isdirectly manipulating objects on the screen.andP;  A classic example of a directmanipulation dialogue [7, 24] is to move a file to another subdirectory bydragging its icon from the window of the old subdirectory to that of the newsubdirectory.andP;  As soon as the user releases the mouse button, the windows areupdated to reflect the new directory contents.andP;  Many graphical interfacesonly move an outline of the file icon as long as the user is moving themouse, but the new Silicon Graphics WorkSpace[TM] file system interface [14]provides even more direct feedback by continuously moving the actual iconsacross the screen.andP;  Even so, there are still many cases where modern userinterfaces could give better feedback.andM;The NeXT[TM] Machine comes bundled with Webster's dictionary on its opticaldisc.andP;  This makes it possible to get dictionary definitions of any word justby selecting it and asking the system to define it.andP;  Up pops a new windowwith the dictionary definition of the word (including in many cases a scannedpicture of the object).andP;  Users who try to get the system to define anonexisting word like &quot;aardwolf&quot; (instead of &quot;aardvark&quot;) will get an emptywindow for the explanation.andP;  This is an extremely indirect form of feedback.andO;This feedback is even worse if the user asks for a definition when theWebster's window is already active.andP;  The window will just stay blank, and theonly indication that the word was not found is if the user observes that somuch time has passed without any response from the system, that it ought tohave found something if it were there.andP;  The system should at least give aprecise and understandable error message, and a good interface wouldsupplement this with a constructive message (e.g., by doing a spellingcorrection to suggest possible alternative words to look up).andP;  This problemis severe enough that it has caused trouble for the salespeople duringseveral demonstrations I have observed.andM;A more graphic example comes from the Macintosh MultiFinder[TM] operatingsystem interface for running several applications concurrently.andP;  At any giventime, a single application is distinguished as the front application withwhich the user is currently interacting.andP;  This front application takes overthe menu bar, and a miniature version of its icon is displayed at the rightend of the menu as shown in Figure 8.andM;This user interface works fine most of the time, but is visually misleadingwhen the user has closed all windows belonging to the front application.andO;Figure 8 shows an example where the front application is a text editor(Microsoft Word) and the background application is a graphics editor (DenebaCanvas[TM]).andP;  The user has closed the text-editing window, which has resultedin a display dominated by the graphics window which had been hidden under thetext window.andM;The display in Figure 8 is visually dominated by the graphics applicaiton,and users therefore frequently forget that they are actually in the texteditor and that any commands they issue will apply to the text editor sinceit is still the front application.andP;  About 94 percent of the display area istelling users that they are in the graphics editor.andP;  The only indicationsthat the graphics editor is in the background are:andM;(1) The graphics window is inactive as indicated by the lack of stripes inits title bar.andP;  This is a rather indirect form of feedback and is almostnever noticed by users.andM;(2) The icon in the menu bar is that of the text editor.andP;  The miniatureizedversions of many other application icons can be hard to recognize, however.andM;(3) The menu bar lists the menus for the text editor and not those for thegraphics editor.andM;Because of the standard Macintosh user interface [1], there is not all thatmuch difference between the two menu bars.andP;  Both applications, however, havemenu bars starting with an Apple menu, a File menu, and an Edit menu.andO;Furthermore, research has shown that users do not actively remember thecontents of Macintosh menus [10].andM;Even though this interface does provide feedback by telling the user which isthe front application, in reality the feedback is not prominent enough.andP;  Fora traditional line-oriented interface one can rely on giving users feedbackby just printing it on the screen since users have their attention focused onthe single line where all input and output occur.andP;  With graphical userinterfaces, however, it is much easier for users to overlook feedback becausethe display can be much busier.andM;This problem of confusing the front and the background application because ofinsufficient feedback is not just a problem for novice users.andP;  Veryexperienced users have also been observed to have this problem on severaloccasions.andP;  One simple solution would completely avoid te system state shownin Figure 8 by always having at least one window open for each activeapplicaiton.andP;  If the user closed the last window, the application would putup a new, empty window just before it removed the window closed by the user.andO;A more radical redesign would eliminate the computer-oriented concept ofrunning applications and firmly associate computational resources withgraphical, user-controlled areas of the screen.andP;  Such a literal interfacemodel would provide the user with access to certain functions (correspondingto a traditional application) whenever an appropriate object was selected onthe screen.andP;  As long as a window was active, this new model would be verysimilar to the traditional system, but if an application's icon (or someother representation of the application) to access its functionality.andP;  Thisproposal is slightly similar to the floating menu palettes and theapplication dock on the NeXT Machine.andM;A final example shows that feedback needs to be credible.andP;  Many applicationsprovide a form of progress feedback during lengthy processes by replacing thecursor with an animated icon such as a watch with spinning hands.andP;  Ingeneral, this is a good idea since the cursor is the user's focus ofattention and will therefore be observed even though it is small.andO;Unfortunately, some applications can be into an infinite loop but still keepthe hand spinning in the watch icon.andP;  This again means that the user cannotreliably user the icon to determine whether the application is indeed makingprogress on its task.andP;  This has led to situations where users rebooted theirsystems in the belief that the application had crashed when in fact it wasjust being extraordinarily slow in completing an operation.andM;One solution would be to use a percent-done indicator [13] instead of aspinning clock, since a percent-done indicator shows the progress of theapplication towards a fixed goal and thereby allows the user to estimate thetime remaining before the operation is complete.andP;  For some operations, apercent-done indicator is not appropriate, and one should then take care tocode the application in such a way that the progress indicator only showsprogress if the computer is indeed making progress towards the goal.andM;Provide Clearly Marked ExitsandM;Modern interfaces are often quite good at avoiding specific states taht trapusers and from which they cannot escape.andP;  Undo facilities help a lot [31],and most interface standards prescribe the user of Cancel facilities indialogue boxes [24].andP;  Even so, users are not always allowed to escape easily.andO;A notorious example among Macintosh users is the system's frequent andpersistent demand for users to reinsert disks they have ejected.andP;  The sytemwant to update the information about window positions in the disk's &quot;desktop&quot;(file and window catalogue) and therefore will not allow users to open newapplications before the old disks have bene reinserted.andP;  The system doesallow users to exit from this state by simultaneously pressing the commandand period keys, but even experienced users often do not know this and feelentrapped and frustrated.andM;A more general problem with the lack of exits is the poor implementation ofbacktrack facilities in several hypertext systems.andP;  For example the hypertext&quot;Time Table of History,&quot; which is issued on CD-ROM by Xiphias, does providebacktrack to the previous hypertext node from excursions to its world maptimeline, and various illustrations.andP;  But when users perform a search, theyare put in a new system state with no access to their prior navigationbehavior.andP;  For example, I read an article on the history of the Macintoshthat mentioned Alan Kay.andP;  From there I did a general search on Kay's name tofind what of his other work was discussed.andP;  This led on to some interestingarticles on the Disney movie Tron in which Kay served as a consultant, thusshowing the usefulness of having hypertext facilities on a history CD-ROM.andO;when I wanted to return to my primary reading (about the Macintosh), therewas no way to backtrack.andP;  Effectively, the system had now trapped me in astate where I was reading about Alan Kay instead of the Macintosh.andP;  Since Iremembered the word &quot;Macintosh,&quot; I was able to perform a search for that wordand thereby find my way back tot he article I had been reading when I wassidetracked by Kay.andP;  Humans, however, should not be requried to remembersearch terms and navigational locations, since computers are supposed to begood at exactly that kind of thing.andM;Provide ShortcutsandM;To a first approximation, most graphical interfaces provide interactionaccelerators in the form of double clicks or special command keys.andP;  Ananalysis of users' task performance, though, will often reveal additionalneeds for shortcuts.andP;  For example, the Macintosh file system interface wasoriginally designed to handle very small sets of files that were typicallystored on floppy disks or 20 megabyte hard disks.andP;  Hardware developments overthe last few years have caused many users to deal with much larger sets offiles on a daily basis on 550 megabyte CD-ROMs for example.andP;  Therefore newinteraction shortcuts are needed in the file system interface.andM;A redesign of the Macintosh interface in 1986 introduced a hierarchical filesystem, which included the dialogue box shown in Figure 9.andP;  The basic problemis that the user may frequently want to move between files in widelyseparated locations in the information space.andP;  The interface illustrated inFigure 9 requries the user to move down the levels of nested subdirectoriesone at a time, but does provide the shortcut of allowing the user to back upas many levels as desired from the pup-up menu showing the current locationin the subdirectory hierarchy.andM;A typical scenario might be that the user was writing a set of letters thatwere related to an ongoing project and therefore were stored in asubdirectory under that project's directory.andP;  While wirting these letters,the user might need to access an address list that was stored in a completelydifferent location.andP;  This would be done by first using the pop-up menu toreturn to the root directory &quot;Big HD&quot; in a single step.andP;  The user might thenperform three extra steps to open first the subdirectory &quot;Databases,&quot; thenthe sub-subdirectory &quot;Address lists,&quot; and finally the file with the actualinformation.andP;  If the user then wanted to return in order to open anadditional letter, it would be necessary first to use the pop-up menu toreturn to the root level and then to perform four steps to open the sequenceof subdirectories shown in Figure 9 before the user could access the desiredfile.andP;  Not only does this involve a large number of dialogue steps, but italso requires the user to remember the previous location in the informationspace.andM;Looking at the movement between subdirectories as a navigation betweenlocations in an information space might lead us to consider applyingsolutions from hypertext user interfaces [17, 19].andP;  One might allow the userto establish links between files across the hierarchy of subdirectories toallow direct access from one such file to another in a single step.andP;  And onemight introduce various navigation mechanisms such as history lists andbacktrack facilities that allow users to easily return to their previouslcoations and landmarks and allowing them simple access to important areas ofthe file space.andM;Good Error MessagesandM;The object-oriented nature of many modern interfaces gives rise to newpotential error situations, which should be handled within the object modelby providing error messages with information from the object attributes andhierarchies.andP;  In the Macintosh Finder (operating system shell), for example,users start applications by double clicking on the icons of documents (files)generated by the applications.andP;  Sometimes, however, a double click will notstart an application but will result in a dialogue box with the error message&quot;the application is busy or missing.&quot;andP;  This message violates one of the mostbasci principles of error message design since it is not precise enough toallow the user to determine exactly what has gone wrong: is the applicatonbusy or is it missing?andP;  The user needs to take different types of correctiveaction in each of these two cases.andM;This error message should also inform the user which application it istalking about.andP;  The general principle of providing feedback implies that thecomputer should restate user input as it has been interpreted by the systemand in terms that are understandable to the user.andP;  The user has provided anabbreviated input (by clicking on an icon to open an associated application),and the system should report back to the user what that abbreviation meanssince the user may not always know this.andP;  Doing so is actually a requirementof the German national standard for dialogue design [3, 4].andP;  In practicalterms, the only way the user can correct the problem of a missing applicationis by knowing the name of the application.andM;A practical reason for not providing feedback that restates the user's inputin understandable terms by giving the name of the missing application is thatthe system may not know the name of the application.andP;  After all, the basicproblem is that the application is missing.andP;  In most cases, however, userswill only have documents available for double clicking if they have used theassociated application on their machine at an earlier time.andP;  The system mightstore information about the document signatures and application names for allapplications that it has ever run.andP;  The current Macintosh system almost doesso since it stores the signatures and icons for all such applications.andP;  Itdoes not store their names, however, and this is a case where the textualattribute is a better explanation than the icon attribute.andP;  Even if thesystem also recorded information about application names, it could still notknow the names of a possible applications.andP;  Nonetheless, just because wecannot do the perfect job on a user interface does not mean that we shouldnot do a good job [15, 18].andP;  The system would know the names of most relevantapplications and would therefore be able to help the user most of thetime--which is certainly better than never helping the user.andM;Finally, the message could be constructive by telling the user if thedocument might be opened by another application that is currently available.andO;This is the case for many document types on the Macintosh, for example, plainASCII text, and bitmapped or object-oriented picture files.andM;Prevent ErrorsandM;The object-oriented principle of noun-verb dialogues used in almost allgraphical interfaces prevents many error situations.andP;  All operations startwith having the user specify the object of interest (the noun) and only thenhaving the user activate the command (the verb).andP;  Because of this syntax, thesystem can restrict the available commands to those that make sense for theselected object, and thus it guides the user away from ever issuing erroneouscommands.andP;  Furthermore, command parameters are often selected from menusinstead of being typed in by the user, again avoiding several potentialerrors.andP;  In spite of these advantages, users can still commit errors ingraphical dialogues [21].andM;For example, many paint programs include a facility like the paint bucket inFigure 10 to fill a closed shape with some pattern.andP;  The typical problem withthis facility is that users frequently apply it to shapes that are notclosed, which leads the paint pattern to overflow the shape and fill theentire screen instead.andP;  This is not a catastrophe for experienced users sinceall these programs provide an undo facility that removes the erroneouslyapplied paint pattern and thereby provides an exit from the erroneous state.andO;Usability testing of several such paint programs, however, has revealed thatnotice users get very upset when a single click of the mouse turns the entirescreen black and destroys all their work.andP;  Frequently they are either notcompletely familiar with the undo command yet or they panic and clicksomewhere else on the screen befoe trying to undo.andP;  This extra click isinterpreted as a new command by the paint program, and it will thereforeenter a new state where undo is applied to the result of this new action andnot to the original paint bucket action.andP;  This final complication could bealleviated by allowing multiple-level undos, but that adds othercomplications to the interface [30].andM;Instead the system might prevent the error from occurring in the first placeby having a less strict interpretation of the concept of a closed shape.andP;  Forthe shape shown in Figure 10, it is likely that practically all users whowill ever use a paint program would want it treated as a closed shape suchthat the paint bucket would not overflow into the rest of the screen.andP;  Therecould then be a special modification of the paint bucket command that wouldretain the strict interpretation for those few cases where it was desired.andM;Interface HeuristicsandM;Considered Harmful?andM;In a recent article [6], Grudin argues the case against consistency that isviewed as a potentially harmful principle.andP;  In contrast, a recent book onconsistency [16] includes chapters by authors from several major computercompanies who discuss major efforts with top management support to ensureconsistency in their products.andP;  The reason for the apparent paradox ofconsistency being potentially harmful and at the same time embraced by almostall important companies in the industry can be seen by considering Grudin'sargument in a broader perspective than that of consistency alone.andM;Actually, Grudin says that users and their tasks should be the overridingconsideration in user interface design and that any more simpleminded designrules risk directing the designers' attention away from this proper focus.andO;It is true that user and task differences are of extreme importance for thedesign of good user interfaces and that consistency cannot be the onlyconsideration.andP;  For example, Tognazzini [28] stresses the need to besufficiently flexible in the management of an interface standard to allowdevelopers to deviate from the consistency principle when they have very goodreasons to do so.andP;  It is important, however, only to deviate when the reasonsare indeed good.andP;  Consistency does have some qualities in and of itself, evenif they are not the only qualities of an interface.andM;Similar considerations apply to the other interface heuristics discussed inthis article.andP;  Because they are just heuristic principles, it should bepossible to deviate from them when necessary.andP;  Also, it is frequently thecase that the principles conflict and that a higher-level analysis is neddedto resolve the tradeoffs.andP;  For example, the principle of providing shortcutsoften conflicts with the principle of simple and natural dialogue, since anydialogue accelerator will add yet another element to the interface andthereby reduce its simplicity.andP;  If it is known that no individual user willuse they system more than a few times, the need for shortcuts is obviouslyminimal, and simplicity should prevail since the presence of shortcuts wouldincrease the users' cognitive load.andP;  In a similar way, one might have tocompromise simplicity slightly to provide shortcuts if it is known thatalmost all users of the system will be heavy-duty hackers.andP;  The lattersituation was true for Unix[TM] when it was originally designed, and itscommand-line interface with lots of obscure abbreviations was thereforeappropriate then.andP;  Unix is now seeing wider use, however, and it has becomenecessary to design simpler and more consistent graphical interfaces for it.andM;In general, no single user interface principle can be the absolute truth.andO;There is a need for tradeoffs between the principles and for fitting thedesign to the context in which it will be used.andP;  Therefore user interfaceguidelines of a very detailed nature (such as &quot;the optimal length of a menuis seven items&quot;) may conceivably be harmful if they are applied blindly.andO;This does not mean that general usability principles such as the onesdiscussed here are harmful, however.andP;  Designers need heuristics forconceptualizing design discussions and decisons and for understandingobservations from user testing, field studies, and other empirical methods.andO;You can only make good tradeoffs if you know what you are trading.andM;ConclusionsandM;The examples in this article have demonstrated that the general principlesfor good dialogue design also apply to the modern class of graphic windowinginterfaces.andP;  Actually, modern interaction techniques only increase the needfor the designer to pay attention to the usability principles since thesetechniques increase the degree of freedom in the interface design by an orderof magnitude.andP;  There are only so many ways to ruin a design with 12 functionkeys and 24 lines of 80 characters, but a 19-inch bitmapped display withstereophonic sound can be an abyss of confusion for the user.andP;  It can also bea canvas for user mastery, enjoyment, and productivity.andP;  The understanding ofuser interface design principles will decide which it will be.andM;AcknowledgementsandM;The author would like to thank Christian Gram, Anker Helms Jorgensen, RolfMolich, and several anonymous Communications referees for helpful comments onprevious versions of this article.andM;(1) Because of its connotations, the term &quot;WIMP&quot; was probably invented by anopponent who felt that &quot;real hackers use Unix.&quot;andP;  Even so, the term isbecoming fairly established because it is more generic than expressions suchas &quot;Mac-like interface&quot; or &quot;Xerox-descended interface.&quot;andM;ReferencesandM;[1] Apple Computer Corp., Human Interface Guidelines: The Apple DesktopInterface.andP;  Addison-Wesley, Reading, Ma, 1987.andM;[2] Brondmo, H.P., and Davenport, G. Creating and viewing the ElasticCharles--A hypermedia journal.andP;  In Hypertext: State of the Art, R. McAleeseand C. Green, Eds.andP;  Ablex Publishing Corporation, Norwood, NJ, 1990, pp.andO;43-51.andM;[3] DIN.andP;  Bildschirmarbeitsplatze: Grundsatze ergonomischer Dialoggestaltung(VDU work stations: Principles of ergonomic dialogue design, in German),Deutsches Institut fur Normung, Din 66234, Teil 8, 1988.andM;[4] Dzida, W. The development of ergonomic standards.andP;  ACM SIGCHI Bull.andP;  20,3 (Jan.andP;  1989), 35-43.andM;[5] Gaver, W.W.andP;  The SonicFinder: An interface that uses auditory icons.andO;Hum.-Comput.andP;  Interaction 4, 1 (1989), 67-94.andM;[6] Grudin, J.andP;  The case against user interface consistency.andP;  Commun.andP;  ACM32, 10 (Oct.andP;  1989), 1164-1173.andM;[7] Hutchins, E.L., Hollan, J.D., and Norman, D.A.andP;  Direct manipulationinterfaces.andP;  In User Centered System Design: New Perspectives onHuman-Computer Interaction, D.A.andP;  Norman, and S.W.andP;  Draper, Eds.andP;  LawrenceErlbaum Assoc., Hillsdale, N.J., 1986, pp.andP;  87-124.andM;[8] Johnson, J., et al.andP;  The Xerox Star: A retrospective.andP;  IEEE Comput.andP;  22,9 (Sept.andP;  1989), 11-29.andM;[9] Laurel, B., Ed.andP;  The Art of Human-Computer Interface Design.andO;Addison-Wesley, Reading, Ma., 1990.andM;[10] Mayes, J.T., et al.andP;  Information flow in a user interface: The effect ofexperience and context on the recall of MacWrite screens.andP;  In People andComputers IV, D.M.andP;  Jones, and R. Winder, Eds.andP;  Cambridge Univ.andP;  Press,Cambridge, U.K., 1988, pp.andP;  275-289.andM;[11] Molich, R., and Nielsen, J. Improving a human-computer dialogue.andO;Commun.andP;  ACM 33, 3 (Mar.andP;  1990), 338-348.andM;[12] Mountford, S.J., et al.andP;  Drama and personality in user interface design.andO;In Proceedings of the ACM CHI'89 Conference on Human Factors in ComputingSystems (Austin, Tx., April 30-May 4).andP;  ACM, New York, 1989, pp.andP;  105-108.andM;[13] Myers, B.A.andP;  The importance of percent-done progress indicators forcomputer-human interfaces.andP;  In Proceedings of the ACM CHI'85 Conference onHuman factors in Computing Systems (San Francisco, Ca., April 14-18).andP;  ACM,New York, 1985, pp.andP;  11-17.andM;[14] Myers, R., and Zeller, B. Silicon Graphics WorkSpace.andP;  SIGGRAPH VideoRev.andP;  56 (video tape), ACM, New York, 1990.andM;[15] Nielsen, J.andP;  Usability engineering at a discount.andP;  In Designing andUsing Human-Computer Interfaces and Knowledge-Based Systems, G. Salvendy, andM.J.andP;  Smith, Eds.andP;  Elsevier Science Pub., Amsterdam, 1989, pp.andP;  394-401.andM;[16] Nielsen, J., Ed.andP;  Coordinating User Interfaces for Consistency.andO;Academic Press, San Diego, Ca., 1989.andM;[17] Nielsen, J.andP;  The art of navigating through hypertext.andP;  Commun.andP;  ACM 33,3 (Mar.andP;  1990), 296-310.andM;[18] Nielsen, J.andP;  Big paybacks from 'discount' usability engineering.andP;  IEEESoftw.andP;  7, 3 (May 1990), 107-108.andM;[19] Nielsen, J.,  Hypertext and Hypermedia.andP;  Academic Press, San Diego, Ca.,andO;1990.andM;[20] Neilsen, J. Miniatures versus icons as a visual cache for videotexbrowsing.andP;  Behav.andP;  Inf.andP;  Tech.andP;  In press.andM;[21] Nielsen, J.andP;  A layered interaction analysis of direct manipulation.andO;Tech.andP;  Rep.andP;  JN-1990-7.2.andP;  Dept.andP;  of Computer Science, Tech.andP;  Univ.andP;  ofDenmark, March 1990.andM;[22] Ossner, J.andP;  Transnational symbols: The rule of pictograms and models inthe learning process.andP;  In Designing User Interfaces for International Use, J.andO;Nielsen, Ed.andP;  Elsevier Science Pub., Amsterdam, 1990, pp.andP;  11-38.andM;[23] Pogue, D. Two-tone news.andP;  Mac-World 6, 12 (Dec.andP;  1989), 154-161.andM;[24] Shneiderman, B.andP;  Direct manipulation: A step beyond programminglanguages.andP;  IEEE Comput.andP;  16, 8 (Aug.andP;  1983), 57-69.andM;[25] Smith, S.L., and Mosier, J. Design guidelines for user-system interfacesoftware.andP;  Rep.andP;  No.andP;  ESD-TR-86-278, MTR-10096.andP;  The Mitre Corp., Bedford,Ma., 1986.andM;[26] Sukaviriya, P., and Moran, L. User interface for Asia.andP;  In DesigningUser Interfaces for International Use, J. Nielsen, Ed.andP;  Elsevier SciencePub., Amsterdam, 1990, pp.andP;  189-218.andM;[27] Sullivan, J.andP;  What 'cancel' means.andP;  Hum.andP;  Interface Notes 5, AppleComputer Corp., 1990.andP;  Available for FTP downloading from apple.com onInternet address [130.43.2.2].andM;[28] Tognazzini, B.andP;  Achieving consistency for the Macintosh.andP;  InCoordinating User Interfaces for Consistency, J. Nielsen, Ed.andP;  AcademicPress, San Diego, Ca., 1989, pp.andP;  57-73.andM;[29] Wolf, C.G., Rhyne, J.R., and Ellozy, H.A.andP;  The paper-like interface.andP;  InDesigning and Using Human-Computer Interfaces and Knowledge Based Systems, G.andO;Salvendy, and M.J.andP;  Smith, Eds.andP;  Elsevier Science Pub., Amsterdam, 1989, pp.andO;494-501.andM;[30] Yang, Y.andP;  A new conceptual model for interactive user recovery andcommand reuse facilities.andP;  In Proceedings of the ACM CHI'88 Conference onHuman Factors in Computing Systems (Washington, D.C., May 15-19).andP;  ACM, NewYork, 1988, pp.andP;  165-170.andM;[31] Yang, Y.andP;  Current approaches and new guidelines for undo support design.andO;In Proceedings of INTERACT'90 Third IFIP Conference on Human-ComputerInteraction (Cambridge, U.K., August 27-31).andP;  IFIP, pp.andP;  543-548.andM;[32] Zimmerman, T.G., et al.andP;  A hand gesture interface device.andP;  InProceedings of the ACM CHI + GI'87 Conference on Human Factors in ComputingSystems and Graphics Interface (Toronto, Canada, April 5-9).andP;  ACM, New York,1987, pp.andP;  189-196.andM;JAKOB NIELSEN is assistant professor of user interface design at theTechnical University of Denmark.andP;  His research interests include usabilityengineering, hypertext, and noncommand-based interaction paradigms.andP;  Author'sPresent Address: Technical University of Denmark, Department of ComputerScience, Building 344, DK-2800 Lyngby, Denmark.andP;  nielsen.chi@xerox.com</TEXT></DOC>