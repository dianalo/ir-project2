<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-327-878  </DOCNO><DOCID>07 327 878.andM;</DOCID><JOURNAL>Communications of the ACM  June 1989 v32 n6 p672(5)* Full Text COPYRIGHT Assn. for Computing Machinery, Inc. 1989.andM;</JOURNAL><TITLE>ACM forum. (letter to the editor)</TITLE><AUTHOR>Ashenhurst, Robert L.; Ornstein, Severo M.; Parket, Donn B.;andO;Narten, Thomas; Heinlein, Edwin B.; Nievergelt, J.; Sakkinen,Markku; Fetzer, James H.andM;</AUTHOR><DESCRIPT/><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>acm forumandM;Beyond Worms On November 2d, 1988, Robert Morris, Jr., a graduate student incomputer science at Cornell, wrote an experimental, self-replicating,self-propagating program and injected it into a large collection of computernetworks known as the Internet.andP;  His program contained a bug, causing it toreplicate and propagate itself far more rapidly than he apparently intended.andO;Within hours, it had invaded an estimated 6,000 computers all over the UnitedStates, many of which became swamped and were either shut down ordisconnected from the network by their frustrated operators.andP;  While no knownalteration or destruction of data occurred, many thousands of hours ofworking time were lost by Internet users.andM;This event has caused considerable furor in the press and has raised manytroubling issues regarding computer security.andP;  It has also generatedconsiderable debate within the computing community as to whether the studentis a hacker-hero who, without causing truly serious damage, pointed outweaknesses in the nation's computer networks or a villain who should beseverely punished.andP;  In all this excitement, several important points havebecome clouded or been entirely overlooked.andM;The primary purpose of the Internet is to foster the sharing of information,ideas, programs, data, etc., among its thousands of users.andP;  In designing anyshared computer system, there is an inherent tension between demands forsecurity and the desire for easy exchange of information.andP;  Unlike vitalmilitary, business, and financial networks, the Internet design has beendeliberately biased toward increased capability, at the known and acceptedcost of some loss in security.andM;In propagating his program through the network, Morris took advantage of avestigial remote-debugger for the mail program as well as of some existingbugs, all of which were well-known and had been thoroughly advertised to theuser community.andP;  The people who have expressed most surprise are thusprincipally people outside of the Internet community who made uninformedassumptions about the tightness of the network's security.andP;  Internet usershave long been aware that the network is not secure and recognize that theyare operating in an environment in which they must rely on the responsiblebehavior of their fellow users.andP;  What surprised them, therefore, was thatanyone would be so foolish as to do what Morris did.andM;Because the Internet was not designed with security as a primary objective,the fact that it was easy to penetrate teaches us nothing whatsoever aboutthe vulnerability of critical networks in which security is a primaryobjective.andM;The most important lesson to be learned from this incident is that evenhighly talented programmers make disastrous mistakes.andP;  Morris's program wascomparatively small and simple, and had a limited and well-defined purpose.andO;It faced no serious obstacles in the form of security barriers that attemptedto foil it.andP;  Morris is known to be extremely skillful, was highly motivatedto write an error-free program, and was not working under the pressure of anydeadline.andP;  Despite all of these facts, his program contained a catastrophicerror.andP;  There is no way to guarantee that any computer system is free of sucherrors.andP;  Various techniques, including repeated testing under realisticconditions, can increase our confidence, but can never guarantee that we willnot be surprised.andM;Another lesson to be learned is that people tend to make far too manyassumptions about the characteristics of the computer systems they employ.andO;While most Internet users at affected sites were aware of the possible risks,some more peripheral users were not and had simply assumed that security wasprovided by the network.andP;  Greater care needs to be taken on two fronts:vendors need to be more responsible in describing what is and what is notprovided, and consumers need to be more thorough in their questions aboutexpected features and services.andM;One consequence of this incident may be an attempt to tighten security bylimiting access to the Internet.andP;  But security measures are alwaysaccompanied by costs against which the benefits must be weighed.andP;  The freeexchange of information is vital to the progress of scientific research, muchof which has come to be dependent on facilities that are accessed throughthese networks.andP;  Any proposed changes in the existing situation should thusbe undertaken only after careful deliberation by both users and sponsors ofInternet facilities.andM;And what about Morris--is he a hero or a villain?andP;  The legal system willeventually determine whether he has broken any laws and if so, how he shouldbe punished.andP;  The computing profession should judge his behavior as bothunprofessional and irresponsible.andP;  But there are broader social and ethicalissues to be considered as well.andM;First, Morris's action must be considered within its technological context.andO;Computers tied into networks are often idle.andP;  In that state they represent anavailable computing resource that computer scientists, in recent years, havebeen seeking ways to harness productively.andP;  The original &quot;worm&quot; was inventedfor precisely that purpose--to seek out idling machines on a local networkand run useful programs on them.andP;  The recently reported breakthrough in thefactoring of large numbers was accomplished utilizing idle cycles of acollection of interconnected personal computers.andP;  Morris's act may have hadsimilar intent rather than representing an attempted &quot;break in.&quot;andP;  However,the overwhelming difference is that all of the other experiments wereconducted with the prior knowledge and full consent of the users of themachines involved.andM;Second, we must consider the historical context.andP;  Experimental &quot;hacking&quot; haslong been endemic in computer research and is almost a trademark of theprofession.andP;  Not many years ago, it could have only limited consequences,whereas this incident clearly demonstrates that things have changeddramatically.andP;  Without meaning to, Morris interfered seriously with the workof thousands of people, members of a trusting user community who knew thatsuch infiltrations were possible but did not expect that anyone would be sofoolish or arrogant as to perpetrate one.andP;  With consequences on this scale,such behavior must today be judged more harshly.andM;Finally, we must consider the social and ethical ambience of the profession.andO;One cannot but feel a measure of sympathy for an individual who apparentlyhad no malicious intent yet committed an irresponsible act that should besoundly condemned.andP;  Morris is, to a large extent, a victim of the times.andP;  Heis a product of an educational system which devotes virtually no attention tomatters of professional ethics and responsibility.andP;  He is a member of aprofession which by and large ignores such matters, although some of itsprofessional organizations pay them lip service.andP;  One outstanding exceptionis the Palo Alto-based Computer Professionals for Social Responsibility(CPSR), a nationwide membership organization which concerns itself withprecisely such issues.andP;  We should welcome the existence of such a group at atime when the need has become so clear.andP;  Let us hope that the computerprofession as a whole will recognize in this incident an indication that itmust begin to take its social responsibilities more seriously.andP;  Severo M.andO;OrnsteinandM;Viruses, worms, Trojan horses, pest programs, and logic bombs are extremelydangerous forms of computer and network contaminants.andP;  They represent aserious threat to the viability of computer usage in an increasingly fragileworld.andP;  Describing them using biological analogies is deceptive, however,since computer viruses are man-made and theoretically can be cured byconvincing people of the seriousness of their use.andM;We must condemn the lack of computer security that facilitates contamination;however, we would be irresponsible if we did not condemn even more vigorouslythose who irresponsibly create, experiment with, and insert these mostdangerous programs into other people's computers.andM;Our professional and scientific organizations--and especially ACM--musttherefore take timely action against these perpetrators, firmly stating thatsuch behavior will not be tolerated.andP;  It would be irresponsible of ourprofessional and scientific organizations to do less in view of the great andincreasing harm that can be done to society.andP;  Ours must be a balanced messagecondemning both the lack of security and those who violate our systems.andP;  DonnB. Parker 579000 Stanford Research Institute 333 Ravenswood Ave. Menlo Park,CA 94025andM;We have been disturbed by many of the views that have been expressedconcerning the recent Internet worm incident, especially statements claimingthat the worm did no damage.andP;  Thus, it was quite discouraging for us to reachthe President's letter in the January Communications.andP;  In that letter, BryanKocher discusses improving the security of our computer systems against viralattacks.andP;  While we agree with the need to reduce vulnerability of ourcomputers, several points in the letter warrant further scrutiny.andM;Perpetrators of &quot;viruses&quot; and other &quot;electronic pranks&quot; should be identifiedas what they are: vandals.andP;  They gain unauthorized access to other people'sfacilities, often destroying data and software critical to the system'soperation or purpose.andP;  The key point here is that the access is unauthorized.andO;Whether or not the ultimate intent is benign is irrelevant, especially whensmall errors can cause supposedly harmless code to be destructive.andP;  The actitself is wrong and presents a threat.andP;  As computer professionals, we need toeducate others that computing resources are a form of property subject toethical rules.andP;  Mr. Kocher should set an example in this effort rather thanacting as an apologist for immature and criminal behavior.andP;  These &quot;pranks&quot;are harmless only to the &quot;prankster&quot; and to uninvolved bystanders.andP;  To defendthem in such a manner seems akin to advising the target of derisive ethnichumor to &quot;Lighten up--it's just a joke.&quot;andP;  Many of us are not amused.andM;Mr.andP;  Kocher's statement that a &quot;destructive prank wouldn't be catastrophic inInternet&quot; is misleading at best.andP;  Although system backups might limit theamount of lost data, incoming mail and experimental data would be permanentlylost.andP;  Moreover, lost time resulting from unscheduled computer unavailabilityis not recoverable in any case.andP;  Catastrophe may well strike the scientistwho misses a proposal or paper submission deadline, and companies may beheavily penalized for failing to meet project deadlines.andP;  As society becomesmore dependent on computer-based resources, uninterrupted computeravailability becomes increasingly important.andP;  If nothing else, theexpenditure of many person-years of effort combating these &quot;pranks&quot; is a lossof considerable economic consequence to industry, academia, and government.andO;Though not catastrophic in this instance, days or weeks of downtime anddisruption in future incidents will not be so easily dismissed.andM;The comparison between computer viruses and epidemic diseases such as cholerais grossly misleading--it simplistically implies that &quot;personal systemshygiene&quot; will prevent infections.andP;  Some epidemic diseases occurring in naturehave been successfully eradicated because they can be studied at length andchange little over time.andP;  In contrast, computer viruses (and worms) arecreated by persons deliberately circumventing known safeguards and activelyseeking to spread infection.andP;  Few persons can argue convincingly that ournation's water and sewage system would prevent the spread of diseasesgenetically engineered to survive in such environments, or that good groominghabits would protect the citizenry from biological warfare agents.andM;Finally, we must take exception with the statements summarizing theassumptions and intentions of the perpetrator that started the November UNIXepidemic.andP;  To our knowledge, the perpetrator has made no public statements onthe intents and purposes of the infection.andP;  Perhaps the worm was an accident,and perhaps it was not.andP;  It may be that the release was premature and a moredestructive version was planned later.andP;  Only one person knows the realintent, and he has not addressed the subject--and may never do so.andM;In conclusion, let us reconsider our roles as professionals in computing.andO;Just as the fireman tries to teach fire safety and does not condone playingwith matches as a &quot;harmless prank,&quot; we should counsel responsible use ofcomputing resources and decry the activities of computer vandals.andP;  Persons inpositions of responsibility, including the president of the ACM, should be atthe forefront of such an effort, and we certainly hope they will be.andP;  ThomasNarten, Ph.D.andP;  Eugene H. Spafford, Ph.D.andP;  Purdue University Department ofComputer Science West Lafayette, IN 47907andM;The President's letter, &quot;A Hygiene Lesson,&quot; is a massive error in judgementwhich sends the wrong message to the world on the matters of individualresponsibility and ethical behavior.andM;Ignoring those issues and the huge amount of expense incurred to restoreoperations and from lost availability of systems in the Internet usercommunity, in an attempt to share the blame of less than perfect security, isinexcusable and an exercise in moral relativism.andP;  In Bryan Kocher's view, thevictim is to share the blame of the crime and be taught a lesson by it ifsomehow he or she was open to attack.andM;Responsibility and accountability for one's actions rest with the individualand with no one else.andM;I sincerely hope that each member of ACM recognizes his or her responsibilityfor ethical behavior, particularly since in our occupations we have access toopportunities to create large scale devastation.andM;It is only fitting that current trends in criminal law are recognizing thisfact.andP;  A bill just presented to the California Senate by Senator Torres, SB304, would modify the existing California Computer Crime Law in several ways.andO;One feature would exclude a person convicted under this law from employmentin the field of data processing.andP;  Another feature refers to the introductioninto a system of a computer contaminant without specific system ownerapproval as a criminal act.andM;I hope that the ACM will support such measures.andP;  Edwin B. Heinlein HeinleinAssociates, Inc. 345 Riviera Drive San Rafael, CA 94901andM;Can Computers Cope with HumanandM;Races?andM;Congratulations to Peter Denning for encouraging publication of an importantarticle that might turn out to be controversial.andP;  Congratulations, above all,to Les Earnest for an incisive analysis of one of society's problems.andP;  I havenothing to add except my vote.andP;  Let's cut out classification based on race,surname, or minority status.andM;I am guilty of complicity with this formalism.andP;  As a universityadministrator, I went along with this--figuring that, in any organization,you had to tolerate some institutionalized nonsense in order to get anythingdone.andP;  But as an individual, I don't want to be classified, don't want toclassify myself, and couldn't classify my children.andP;  They are minority andnonminority at the same time, or perhaps half of each.andP;  But surely they areentitled to be 100 percent of something, and &quot;other&quot; is not quite goodenough.andP;  I suggest &quot;100 percent half [non-]minority&quot; as the most logical newcategory to accommodate such cases (There's hope that &quot;half&quot; might generalizeto arbitrary convex combinations in some high-dimensional vector space, andthat, ultimately, a single parametrized category might suffice).andM;While on the subject of logic, I recall a joke my friend Jim used to play.andO;On some appropriate occasion, he would claim to be two-thirds Cherokee.andP;  Hewould repeat this assertion until some computernik, inevitably, would ask:&quot;Two-thirds??(?).andP;  You mean one-half, or three-fourths, or perhaps,five-eighths?andP;  How do you get to be two-thirds?&quot;andP;  &quot;It's easy.andP;  Both myparents are two-thirds.&quot;andP;  Now here's a rule you can program.andP;  For all x, ifboth your parents are x, you are x--and don't ask whether x makes any senseas an attribute of humanity (Come to think of it--what if x is a surname&quot; Never mind, let's not complicate the issue).andP;  J. Nievergelt 673 BrookviewChapel Hill, NC 27514andM;Why is it Difficult to Write aboutandM;Programs?andM;When writing about a programming language, and especially about concreteprogramming examples, it is often surprisingly hard to denote succinctly andclearly in the discussion the various elements one wants to talk about:variables, routines, names, labels, strings, and so on.andP;  A symptom of thedifficulty is that writers often resort to using different typefaces fordifferent kinds of things, not merely italics and boldface for highlighting.andO;Why is this so?andP;  After all, novelists often write about very intricatesubjects and yet can manage without many fonts.andM;I put forward the following &quot;theory:&quot; the difficulty is caused on one hand bylarge principle differences between natural languages and programminglanguages, on the other hand by vocabulary common to the object language(program text under discussion), and the metalanguage (natural-languagedescription).andM;To see one fundamental difference, consider what classification ofprogramming language elements would correspond to the different word classesof natural language.andP;  Most naturally, programmer-defined identifierscorrespond to proper nouns and reserved words to common nouns, verbs, andother words.andP;  Programming languages even have &quot;proper verbs&quot;--what else areinvocations of user-defined procedures grammatically!andP;  The number of distinctreserved words is very small even in the most baroque programming languages,but the freedom in inventing identifiers is generally very wide.andP;  Inexchange, one must obey absolute and inflexible rules of grammar, incomparison to natural language.andM;In typical natural-language texts, proper nouns are rare and are wellhighlighted (in most languages that employ alphabets based on the Greek orLatin ones) by having upper-case initials.andP;  Furthermore, most of the propernouns will be previously familiar to readers.andP;  In typical programs,programmer-defined identifiers are in the majority, and there is mostly nosyntactic difference between them and reserved words.andP;  In publications thereare some conventions such as printing the reserved words in boldface,especially in Algol-like languages.andM;Another difference contributes more to the problem than the first one.andP;  Inprogramming languages, the same word is often used with varying levels ofindirection.andP;  In everyday language, such situations are so rare and often areso clear from context that it would appear ridiculous to mark explicitly whenwe mean a word or phrase itself and not the thing it denotes.andP;  Thus nobodygets confused when I write, &quot;My name is Markku Sakkinen,&quot; although really myname is Markku Sakkinen and I am Markku Sakkinen.andP;  In a text that describes aprogram fragment containing variables, we have to speak at least about thevariables themselves and their names, and often (e.g.andP;  with most of thecurrent object-oriented languages) also about the objects owned or referencedby those variables.andP;  We are at a loss for a notation that would be bothconcise, natural, and unambiguous.andM;The problem of common vocabulary is that typically a large part of theidentifiers in the program is chosen from ordinary words of the same languagethat the description is written in.andP;  When the description language isEnglish, the reserved words of most programming languages are drawn from thesame vocabulary as well (but in some cases like Algol 68, most English wordshave been cunningly mutilated).andP;  We often have ambiguity about which words inthe text belong to the object language and which to the metalanguage.andP;  Fromthat viewpoint, the old-fashioned way to use only upper-case letters in thewords of programming languages was not so bad; using at least upper-caseinitials would help the distinction a lot.andM;Unfortunately, I cannot offer a solution to the problems.andP;  This is rather aninvitation for solutions that some people may already have thought out, orinvent once the question has been made explicit.andP;  Markku Sakkinen Departmentof Computer Science University of Jyvaskyla Seminaarinkatu 15 SF-40100Jyvaskyla Finland Electronic mail address: markku@jytko.jyu.fi (Bitnet:SAKKINEN@FINJYU)andM;Patents and ProgramsandM;A recent article in The New York Times, &quot;Equations Patented: Some See aDanger&quot; by Edmund L. Andrews (Wednesday, 15 February 1989, p. 25 ff.),andO;reports that the Patents and Trademark Office and the courts are increasinglydisplaying a willingness to patent algorithms, such as an A.T.andamp;T.andP;  formulathat determines the most efficient routes for communication lines across thePacific Ocean and a rapid method for calculating Fast Fourier Transformsdeveloped by Ronald Bracewell of Stanford University.andP;  This trend is alarminginsofar as abstract ideas, laws of nature, and natural phenomena havehistorically been viewed as ineligible for patent protection, a practice thatappears to be undergoing alteration.andP;  For if mathematical formulae, rules ofinference, and the like are eligible for patents, the consequences could becatastrophic.andM;The legal significance of patents, of course, is far-reaching, establishingas they do the right to exclude others from making, selling, or using one'sinvention or discovery.andP;  A patent on Modus Ponens, for example, wouldestablish a right for its owner to prohibit others from its employment unlessthey were to extend an appropriate fee.andP;  A patent on Newton's law ofgravitation could inhibit its application for calculating the trajectoriesrequired for launching space shuttles and the like.andP;  Indeed, as MichaelGemignani has pointed out [in &quot;Legal Protection for Computer Software,&quot;Rutgers Journal of Computers, Technology, and the Law, Vol.andP;  7, (1980)],patents on algorithms would appear to include virtually all inventions thatrely upon mathematical equations, since their construction depends uponnatural laws described by those equations.andM;The crucial question, of course, is precisely where the line is to be drawnbetween abstract ideas, laws of nature, and the like that should not besubject to patent protection and inventions and discoveries that should.andO;Thus, The New York Times quotes John Barwise of the Center for the Study ofLanguage and Information, who observes: &quot;If you suddenly create barriers sothat people are not able to freely use the results of others, you arechanging the rules that mathematicians have used for centuries.&quot;andP;  While thecourts in the past have tended to distinguish &quot;discoveries&quot; from &quot;inventions&quot;and to restrict its protection to the latter alone, it has becomeincreasingly difficult in the age of computers to differentiate between lawsand relations that are subject to &quot;discovery&quot; and products and processes thatare merely human &quot;inventions.&quot;andM;From the perspective of software engineering, no doubt, a foundation fordistinguishing between &quot;algorithms&quot; as discoveries and &quot;programs&quot; asinventions might go far to relieving the courts of a conceptualresponsibility they are not suitably prepared to assume.andP;  According to TheNew York Times, Bracewell has defended the propriety of patent protection forhis work by emphasizing its status as something which he has created: &quot;By thetime you have spent six months writing 10,000 lines of computer code, youknow darn well it isn't something nature put there.&quot;andP;  But this defense, inturn, suggests that the use of the term &quot;algorithm&quot; may not be entirelyappropriate as a description of Bracewell's achievement, which might insteadbetter qualify as a &quot;program.&quot;andM;Suppose, for example, that a distinction is drawn between &quot;algorithms&quot; aslogical structures and &quot;programs&quot; as implementations of algorithms in a formthat is suitable for execution by machine.andP;  A principal difference separatingthings of these two kinds would then become whether or not they areformulated in compilable and executable fashion by means of a computerlanguage; otherwise, after all, even sketched in the form of pseudocode, noset of instructions is suitable for execution by a machine.andP;  This standardwould go far toward satisfying traditional criteria for distinguishing&quot;ideas&quot; from their &quot;expressions,&quot; where only the way ideas are expresseddeserves protection--provided, of course, it is employed in combination withthe ordinary requirements of utility, novelty, and lack of obviousness[Gemignani (1980), Sec.andP;  IV].andM;It would not resolve every issue involved in these disputes--incorporating a&quot;macro&quot; (or subroutine) someone else has designed could be an occasion fordebate--but it might tend to settle the most important issues of principlethat are involved here.andP;  Reliance upon abstract ideas, mathematical formulae,and laws of nature would not invite legal controversies.andP;  Standard practicesin scientific research and mathematical inquiry would continue unimpeded asbefore.andP;  And we would have further evidence of the adequacy of thedistinction between &quot;algorithms&quot; as abstract entities and &quot;programs&quot; ascausal models of those algorithms that I introduced in &quot;Program Verification:The Very Idea,&quot; Communications, Sept., 1988, from yet another (unexpected)point of view.andP;  James H. Fetzer Philosophy and Humanities University ofMinnesota Duluth, MN 55812</TEXT></DOC>