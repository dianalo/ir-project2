<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-164-218 </DOCNO><DOCID>10 644 198</DOCID><JOURNAL>The LocalNetter  May 1991 v11 n5 pS1(14)* Full Text COPYRIGHT Architecture Technology Corp. 1991.andM;</JOURNAL><TITLE>Special report: Powersoft Corporation's PowerBuilder.andO;(PowerBuilder - a new class of graphic client/server applicationdevelopment environment) (product announcement)andM;</TITLE><DESCRIPT>Company:   Powersoft Corp. (Product introduction).andO;Product:   PowerBuilder (Program development software) (Productintroduction).andO;Topic:     Program Development SoftwareClient/Server ArchitectureGraphics SoftwareMISStructured Query LanguageRelational DBMSProduct Introduction.andO;Feature:   illustrationtable.andO;Caption:   PowerBuilder objects within windows. (table)Typical PowerBuilder object/event pairs. (table)C vs PowerScript drawing a bitmap object. (table)andM;</DESCRIPT><TEXT>Powersoft Corporation has introduced PowerBuilder, heralding it as a newclass of graphic client/server application development environment formanagement information systems (MIS) professionals.andP;  PowerBuilder is aPC-based software development environment that enables programmers to  paint'commercial software systems in which graphic client applications integratewith relational database servers.andM;PowerBuilder 1.0 operates in the Microsoft Windows 3.0 client environment,and it is geared to be server-independent, supporting the Structured QueryLanguage (SQL), as well as a number of relational database management systems(RDBMs).andP;  In this first release, PowerBuilder is integrated with SQL Serverfrom Sybase, Inc., and Microsoft Corporation, SQLBase from GuptaTechnologies, Inc., and ORACLE Server from Oracle Corporation.andM;Future releases of PowerBuilder will provide support for other windowingenvironments and relational database servers.andP;  For example, support for HPALLBASE/SQL from Hewlett-Packard Company is scheduled for the third quarterof 1991.andM;Designed especially for large-scale MIS projects and development teams,PowerBuilder is said to incorporate characteristics of traditional mainframedevelopment tools in an easier-to-use environment.andM;Primary markets for PowerBuilder include commercial and government MISorganizations, systems integrators, software consulting firms, andindependent software developers.andP;  With PowerBuilder, theseorganizations--which commonly have been developing terminal-based systemsusing COBOL, CICS, IMS DB/DC, VAX RDB, HP TurboIMAGE, and othertransaction-oriented environments--can move to a &quot;downsized&quot; client/servernetwork.andM;American Airlines, Coca-Cola Foods, and SmithKline Beecham are among the morethan 30 initial PowerBuilder customers who are participating in Powersoft'sHeadstart early customer support program and are developing client/serverapplications today.andM;Founded by president and CEO Mitchell Kertzman in 1974, Powersoft hashistorically focused on the information-processing business, and the MIScommunity in particular.andP;  The company is a supplier of manufacturing softwaresystems for Hewlett-Packard computers, with more than 750 installations ofits commercial MRPII system, GrowthPower.andM;PowerBuilder is the result of a 30-month development effort that began whenPowersoft searched for a tool capable of building a new graphic client/servermanufacturing system for the company.andP;  PowerBuilder is now being used byPowersoft to build that system.andM;Spearheading the creation of PowerBuilder is David Litwack, seniorvice-president of research and development, and former executivevice-president of product development at Cullinet Software, Inc.andM;Product OverviewandM;PowerBuilder is an environment for building client/server applications.andO;Traditional development languages like C or COBOL either do not specificallyaddress the client/server world or are too cumbersome for MIS developers.andM;PowerBuilder combines characteristics of traditional systems with features ofthe new Windows-oriented, PC-based client/server architecture.andM;PowerBuilder features include:andM;*  Integrated, &quot;SQL-smart&quot; database development and administration facilitiesandM;*  A graphic &quot;point-and-shoot&quot; development and debugging environmentandM;*  Strong transaction processing orientationandM;*  A balanced approach to both the object-oriented paradigm and theprocedural orientation of the pastandM;*  &quot;MIS-friendly&quot; functionalityandM;*  A repository-based approach to database management, with extensions to theDBMS catalogandM;*  A scripting language (called PowerScript) modeled after programminglanguages already familiar to MIS developersandM;*  A large-project orientation, with application objects stored in shareduser-defined libraries, and facilities for generating impact analyses anddeveloper reportsandM;*  A special object called a DataWindow for presenting and manipulatingdatabase information without having to code SQL statements and scriptsandM;*  Integration with the PC environment using Dynamic Data Exchange (DDE) tointeract with other Windows applications, and file import/export capabilitiesin a variety of PC file formatsandM;*  Hypertext help facilities for the developer and the PowerBuilderapplication userandM;* Ability to call C functions in Windows Dynamic Link LibrariesandM;* Database independence and portabilityandM;Evolution of Information Systems TechnologyandM;Periodically, a new wave of enabling technologies arrives and then alters theway we think about applications.andP;  When a new technology first appears, thetools used to implement that technology are typically primitive andcumbersome, usable only by a few.andP;  Eventually, the benefits of the newtechnology create enough demand to propel it forward.andM;For example, the software application industry of the early 1970s consistedentirely of batch-oriented applications.andP;  The only Information Systems (IS)departments that built online systems were those sophisticated enough tocreate home-grown databases and data communications systems.andP;  Later,commercially available database management systems and communication monitorsbecame the norm.andP;  As a result, most subsequent applications were built asonline systems.andM;Throughout the 1980s, new products and technologies were introduced at anever-quickening pace.andP;  Online relational databases, 4GLs, personal computers,networks, and early graphic user interfaces defined a new paradigm for theaverage application developer and end-user.andP;  The perception of howapplications should be built and how data should be updated, accessed, andviewed from a large corporate database began to change.andM;For the  90s, a new wave of enabling technologies has arrived, highlighted bypowerful personal computers supporting graphic interfaces, local- andwide-area networks, client/server databases, and object-oriented applicationdevelopment.andP;  For the remainder of this decade, the challenge facing thecommercial programmer will be to build this next generation of applications.andM;The emergence of this recent wave of technology has increased the difficultyof building business software applications that are reliable and can bemaintained, on time and within budget.andP;  With it comes the need to becomeproficient in a new and diverse set of skills.andP;  For the commercialinformation systems programmer, this means understanding new technologies,including C or C+  , as well as relational database technology, networking,and various windowing environments.andM;The Client/Server Architecture And The PCandM;Client/server architecture is one in which client transactions cooperate withservers to perform a specific application function.andP;  The concept is based onsplitting the application program into two pieces--a front-end portion on adesktop workstation which handles local data manipulation and user interface,and a back-end portion on a server which handles database and othertransaction-intensive processing.andP;  Re server can be a PC, minicomputer, ormainframe, depending upon the demands of the application.andP;  Likewise, theclient platform can be scaled and positioned according to the individualuser's desktop and application needs.andM;Graphic-based Desktop TransactionsandM;&quot;Graphic-based desktop transactions&quot; is the term Powersoft has adopted todescribe this new class of desktop applications.andM;One feature of client/server architecture is that the user interface resideson a dedicated desktop machine that enables the use of CPU-intensiveinterfaces employing graphics, color., and animation.andP;  Companies today are inthe process of replacing--or have already replaced--traditional terminalswith PCs using word processing, spreadsheets, E-Mail, and other PC-basedproducts and tools, but they are only beginning to use these capabilities forIS applications.andM;A major contribution of the personal computer has been the ability itprovides end-users to manipulate data without the involvement of the ISdepartment.andP;  When online transaction processing (OLTP) is introduced into theoffice environment, the end-user expects it to integrate with all of theother applications that are commonly used on the PC; consequently, newapplications developed by IS must pass data back and forth amongoffice-oriented software packages such as spreadsheets, word processors, andpersonal databases, so the user can move among them as individual workpatterns and habits dictate.andM;Traditionally, data has been viewed as a monolithic corporate asset.andO;However, in actuality, the real world uses data in layers--enterprise, workgroup, and individual.andP;  The use of personal computers in the officedemonstrates this principle.andP;  Individuals have built a huge  database' ofinformation that is personal in nature and, in most cases, is unconnected tothe equivalent corporate database.andP;  Applications of the future need theability to bring enterprise, work group, and individual data together.andM;Another issue is the ability to customize user interfaces.andP;  When a companypurchases a commercial application to help manage its business, a number ofinstallation options are available to tailor the functionality to theorganization's specific needs.andP;  However, these options typically do not allowthe individual to change how the application interface appears.andM;Individuals with personal computers want to be able to adapt the look andfeel of their computers to their individual preferences.andP;  Next-generationapplications need an environment that allows each individual an appropriatelevel of interface modification.andM;The PowerBuilder ApproachandM;Powersoft Corporation's commitment to client/server computing and the&quot;Graphic-based Desktop Transaction' environment has led to the creation ofthe PowerBuilder toolset.andP;  PowerBuilder is a graphic, PC-based, client/serverapplication development environment.andM;Created for commercial application developers working in project teams,PowerBuilder incorporates the characteristics of mainframe productivity toolsin a mouse-driven, point-and-shoot toolset for graphically paintingclient/servet applications.andM;PowerBuilder delivers its environment for the commercial programmer throughan integrated set of graphic tools used to &quot;paint' application objects (suchas windows, menus, and CommandButtons) which respond to events (such asclicked or modified) by executing scripts written in the high-levelPowerScript object-based language.andM;PowerBuilder is designed for professional programmers in commercial ISorganizations, software consulting organizations, independent softwarevendors, and other application developers.andM;PowerBuilder's primary focus is the organization that has been developingapplications typified by CICS COBOL, IMS DB/DC COBOL, VAX RDB, or othertransaction-oriented systems, and now wishes to build &quot;next-generation&quot;graphic client/server applications.andM;PowerBuilder has been designed to support several relational databasemanagement systems.andP;  As mentioned above, Version 1.0 of PowerBuilder supportsMicrosoft SQL Server, SYBASE from Sybase Corporation, and SQLBase from GuptaTechnologies, Inc. Again, additional database support is planned forsubsequent releases.andM;While PowerBuilder provides a new paradigm, at the same time it attempts toretain characteristics that are familiar and comfortable to the professionalapplication developer of the 8%.andM;Creating An Application With PowerBuilderandM;To be a PowerBuilder application developer is to employ its painting tools.andO;The PowerBuilder painters are highly graphical in nature.andP;  With them,PowerBuilder users perform most development activities, from database viewdefinition to window painting to test-to-production migration, in apoint-and-click' manner.andP;  Figure I shows the Power Panel, which contains anicon for each of the PowerBuilder painters.andP;  It also contains icons forsetting preference items, requesting help, executing or debugging theapplication during development, and leaving PowerBuilder.andP;  Double-clickingthe mouse on the appropriate entry in the Power Panel takes a user directlyto that part of PowerBuilder.andM;Complete interactive help facilities guide the user through PowerBuilder'spainters, describing all PowerBuilder objects and functions.andP;  In addition,the online help system provides reference information for the PowerScriptlanguage, including examples.andM;The PowerBuilder Database Painter provides interactive facilities forcreating and maintaining SQL databases.andP;  Each SQL operation, from creatingtables and indices  to retrieving and updating data, can be performedgraphically.andP;  When a user enters the Database Painter, he/she will see thenames of tables that are currently defined in the database.andP;  When one or morenames is clicked on, the Database Painter displays a box representing eachtable.andP;  When one of these boxes  is clicked on, it expands to show thecolumns in the table, as well as any indices defined for the table.andP;  Todisplay detailed information about the table and about individual columns,one clicks on the table or column name.andM;To create a new table, the user need only click the &quot;New&quot; button when he/sheenters the Database Painter.andP;  For each column in the table, the user entersits name and then selects its data type from a pull-down list.andP;  Users canalso supply extended definition information for the table-including usagecomments and default display font information--and for its columns--includingheadings and labels, initial values, input data validation rules, and outputdisplay formats.andP;  When a user has specified the characteristics for the newtable, the Database Painter defines and stores the table and its extendeddefinition information.andM;Users may use the same technique to create a database view., joining tablestogether by clicking on foreign and primary key column names to indicate therelationships between tables.andP;  Users click on column names to indicate thecontents of the view, and they can also specify other view requirements, suchas row selection, grouping, and sorting, by pointing to the appropriatecolumn names.andP;  Figure 2 shows the Database Painter being used to define aview that brings together information from the CUSTOMER, CUST_ORDER, and ITEMtables.andM;While a user performs SQL operations in this graphic manner, he/she can askthe Database Painter to keep a log of the SQL statements that it generatesand submits to the DBMS.andP;  When he/she leaves the Database Painter, he/she cansave the SQL log in a file for future reference.andM;The Database Painter's Data Administration feature provides an interactive&quot;notepad.&quot; A user can type or graphically paint SQL statements into thenotepad for immediate execution by the DBMS.andP;  Data returned by submitting aSELECT statement displays in a scrollable  Results' window.andM;The Data Administration feature also allows one to define users to the DBMSand assign access privileges and restrictions to them by pointing tocombinations of user IDs, tables, and privileges.andP;  The Data Administrationsubsystem submits appropriate SQL GRANT and REVOKE statements to the DBMS.andM;Application ObjectsandM;PowerBuilder applications consist of two major types of objects: windows andmenus.andM;One can create PowerBuilder application windows with the Window Painter.andP;  Anyof the objects that Microsoft Windows supports can be placed within a window,as well as several additional objects that allow the user to enhance thewindow's appearance and provide automatic facilities for database access andupdate.andM;The complete list of objects that can be placed within a window is shown inTable 1.andP;  Most objects can respond to events in the Windows environment byexecuting PowerScript routines that the user writes to define how the objectsshould respond to the events.andP;  A partial list of object events is shown inTable 2.andM;A menu is an independent PowerBuilder object that a user can create in theMenu Painter.andP;  One can organize menus into any number of levels, includingcascading menus, or assign shortcut keys to menu items.andP;  Like objects withinwindows, menu entries also respond to the clicked event by executing aPowerScript routine that the user writes.andM;After a user has created and saved a menu, he/she can associate it with awindow in the Window Style screen of the Window Painter.andM;Each PowerBuilder object has a set of attributes that describe its size,position, and tab sequence.andP;  In addition, attributes such as text or listcontents, presence of scroll bars, foreground and background colors, maximumnumber of characters that the user can enter, text fonts and sizes, andothers, exist for objects when they are appropriate.andM;A user can define application behavior and transaction logic by creating oneor more PowerScript routines for the objects that comprise the application.andO;Most PowerBuilder objects are capable of responding to one or more specifictypes of events.andP;  For example, CheckBoxes, CommandButtons, and RadioButtonsrespond to the clicked event, while SingleLineEdit and MultiLineEdit objectsrespond to the modified event.andP;  Users may develop scripts for specificobject/event associations, such as a script for the clicked event of the OKCommandButton, or the modified event of the Customer# SingleLineEdit object.andM;Users can reference and modify object attributes within PowerScript routines.andO;For example, to change the size of a picture (bitmap) object, one wouldinclude in a script a single instruction to redraw the object with new,values for its width and height attributes.andM;The PowerScript LanguageandM;PowerScript is a high-level, graphic, object-oriented language specificallydesigned for the PowerBuilder environment.andP;  It contains more than 200commands or functions for manipulating the graphic objects in an application,performing calculations, processing character strings, converting data fromone type to another, working with date and time values, performing DOS textfile I/O, and communicating with other Windows or PM application programsthrough Dynamic Data Exchange (DDE).andM;PowerScript includes a complete set of statements for value assignment,conditional execution, looping, case selection, and branching, similar tothose found in the BASIC language.andP;  PowerScript also provides relationaldatabase processing through embedded SQL statements for both cursored andnon-cursored SQL operations, as well as for stored procedures in those DBMSsthat support them.andM;PowerBuilder supports twelve types of data, including character string,Boolean, date, time, and several numeric types.andM;Figure 3 compares a sample of C source code for drawing a bitmap object tothe same procedure written in PowerScript.andP;  In the complete application, morethan 400 lines of C code were replaced by fewer than 40 lines of PowerScript.andM;PowerBuilder PaintersandM;PowerBuilder provides graphic painters that one uses to develop applicationcomponents.andM;Application PainterandM;Using the PowerBuilder Application Painter, a user gives each newPowerBuilder application a name, assigns application defaults such as typestyles and sizes, and specifies an icon (picture) that will identify theapplication to its users.andP;  A user can also indicate the default library inwhich PowerBuilder will store all the application objects that he/shecreates.andM;When a user starts a PowerBuilder application, the system &quot;opens' theapplication and executes the PowerScript for its open event.andP;  This script canbe written in the Application Painter, establishing values for theapplication's variables and opening the first window that the applicationwill display.andP;  Users can also code a close event script for an application,which PowerBuilder will execute when the user finishes running theapplication.andP;  Other events for which one can develop application-levelscripts include the idle event and a system error event.andM;Window PainterandM;As a PowerBuilder developer, one spends most of his/her time in the WindowPainter, using a mouse to select and place the objects--edit boxes for text,buttons, DataWindows, and others--that he/she wants to have appear in thewindow.andP;  The user defines the attributes for each object, and if he/she needsscripts for one or more events, he/she invokes the PowerScript painter todefine them.andP;  As each object is placed within the window, PowerBuilder storesits definition (including its PowerScript routines, if any) in theapplication library.andP;  One may also want to define scripts for window-levelevents, such as open, close, and timer (a built-in alarm clock that can beset to &quot;go off' after a specified amount of time).andP;  For example, an openwindow script would be used to initialize PowerScript variables and hide orshow various objects within the window.andM;Before leaving the Window Painter, a user would probably want to style thewindow he/she is painting, giving a caption for its title bar and includingor removing such window features as the maximize and minimize buttons,horizontal and vertical scroll bars, resizable borders, and control-menu box.andO;One can also size and position the window on the screen by dragging it withthe mouse, or by selecting horizontal and/or vertical centering.andM;When one leaves the Window Painter, PowerBuilder stores the completed windowdefinition in the application library.andM;Menu PainterandM;A window may require an action bar, or menu, across the top to give the usera set of commands or options from which to choose.andP;  The Menu Painter lets theuser create the top-level action bar commands and the drop-down lists ofcommands beneath each top-level item.andP;  One can also create multi-levelcascading menus for items that need them.andP;  As an alternative to theconventional action-bar style of menu, a user can also create pop-up menusthat can be displayed anywhere on the screen.andM;A user can define a character that will appear underlined in the menu item,indicating that the user can select the menu choice by typing that character.andO;One can also assign shortcut keys (such as Ctrl+F3) to menu items, so thatthe user can perform commands directly from the keyboard without pulling downthe corresponding menu structure.andM;Menus are organized in a hierarchical structure with the action-bar entriesat the top.andP;  At the lowest item in each branch of the menu, Users write aPowerScript routine to define what the application will do when the userselects that menu item.andM;DataWindow PainterandM;A DataWindow is a type of PowerBuilder window object that is used to presentand manipulate information in the application database without having to codeSQL statements in scripts.andP;  DataWindows can retrieve information from thedatabase and present it in any tabular or free-form layout.andP;  They also handlerequests to insert, update, and delete information from the database whenusers change the values that the DataWindows display.andM;DataWindows act on messages that a user sends to them from PowerScriptroutines by coding functions to inform the DataWindow about one's processingrequirements.andP;  The PowerScript language includes more than 40 functions forthis purpose, including:andM;*  Retrieve: Sends a message to the DataWindow to start to retrieveinformation from the databaseandM;*  Print: Sends a message to the DataWindow to print its contents on one's PCor network printerandM;*  Update: Sends a message to the DataWindow to apply all inserted, modified,or deleted data to the databaseandM;*  Sort: Sends a message to the DataWindow to resequence its contentsandM;*  Save as: Sends a message to the DataWindow to store its contents in a diskfile in any of several file formats such as 1-2-3, Excel, and DBASEandM;*  Several scroll functions: Send messages to reposition the data visible inthe DataWindowandM;A typical PowerBuilder database transaction, then, consists of a window thatcontains several CommandButtons (such as Update and Print), possibly someedit boxes for entering data values, and one or more DataWindows.andP;  Scripts onthe CommandButtons typically contain just one PowerScript command-an -updateor a print, for example--to send messages to the DataWindow.andP;  Figure 4 showsa sample database retrieve/update/delete/print transaction.andM;To create a DataWindow, one uses the DataWindow Painter, first by specifyingthe type of presentation desired--i.e., tabular or form--and next bygraphically specifying the tables, columns, and selection criteria thatdetermine how the DataWindow relates to the database.andM;The DataWindow Painter presents an initial layout of the columns the useridentified.andP;  He/she can reposition the data; change the type fonts, styles,sizes, and colors; add lines and boxes; define sort rules and lists of validdata values; and add calculated fields.andM;After a user saves the DataWindow definition, he/she can automatically createa transaction window that contains the DataWindow and CommandButtons withPowerScripts that initiate DataWindow processing actions.andM;Picture PainterandM;In a GUI environment, one may wish to include bitmap graphics or pictures inhis/her application windows.andP;  A user can prepare a bitmap file in the PicturePainter, either by drawing the image freehand or by reading it with ascanner, and then save the image as a bitmap file with the file extensionBMP.andM;PowerBuilder allows one to use graphics applications that can save files inthe BMP format.andP;  A user identifies his/her graphics program to PowerBuilderas a preference item.andP;  When one clicks on the picture painter icon in thePower Panel, PowerBuilder executes the graphics application.andM;Function PainterandM;As mentioned above, PowerBuilder comes with more than 200 functions in itsPowerScript language.andP;  As a user develops PowerBuilder applications, he/shemay find that one occasionally needs to write a set of PowerScript statementsto perform commonly used processing.andP;  In this case, one can build thesestatements into a PowerScript function, add the function to the library, andthereafter reference it just as one does the built-in functions.andM;One uses the Function Painter to develop one's own PowerScript functions.andO;These user-defined functions allow a user to extend the PowerScript languageto incorporate commands or functions that address his/her organization'sunique and repetitive programming requirements.andM;Script PainterandM;To create PowerScript routines for events at the application, window,object-within-window, or menu level, one uses the Script Painter--afull-function text editor integrated into PowerBuilder.andP;  It includesfacilities such as block move, cut-and-paste, search, and replace.andM;Data variables in the PowerScript language are available at three levels:local variables are known only within the script in which they are declared;window-level variables can be accessed in scripts of every object within thecurrent window; and application-level variables can be accessed by any scriptwithin the entire application.andM;In the Script Painter window is a drop-down list box that contains all theevents to which the current object can respond.andP;  One can also display thenames of window-level and application-level PowerScript variables.andP;  A usercan select the correct event, and the names of his/her variables, by clickingthe mouse.andP;  The Script Painter also includes a Paste Function command thatdisplays a list of the more than 200 PowerScript functions.andP;  A user can add afunction reference to his/her script by picking it from this list.andM;When one completes a script, the Script Painter automatically calls thePowerScript compiler to compile the script and store it in the applicationlibrary.andP;  If the compiler detects errors in a script, it works with theScript Painter to help pinpoint and correct errors.andP;  The Script Painter opensan error message window below one's script window.andP;  One can scroll the errormessages up and down, and when one selects a particular error, the ScriptPainter automatically scrolls the script window to bring the erroneous scriptstatement into view for editing.andM;Preference PainterandM;PowerBuilder provides a large number of preference items that allow a user totailor PowerBuilder to his/her own PC configuration and personal preferences.andO;The Preference Painter offers groups of preference items for all ofPowerBuilder and for several of the painters.andP;  A user can specify such thingsas his/her application database, default choices for type styles and colors,and graphics painting application in the Preference Painter.andM;Application Library ManagementandM;As one completes the definition of each application object, PowerBuilderstores it in compiled form in a PowerBuilder library.andP;  PowerScript sourceroutines are also stored in the library.andM;One can use more than one PowerBuilder library during a PowerBuilder session.andO;For example, if a user is making maintenance changes to one window of a largePowerBuilder application, he/she may need to access objects from theapplication's production library, other objects from the programmingdepartment's test library, and still others from his/her own personal testlibrary.andP;  (One identifies the libraries and tile search sequence in theApplication Painter.)andM;PowerBuilder's Library Painter provides the facilities to manage applicationlibraries.andP;  The Library Painter displays libraries and the objects withinthem in a graphic tree structure similar to that of the Windows File Manager.andO;Users can copy, move, erase, and rename objects within libraries.andM;One can transfer an entire application from one environment (such asdevelopment) to another (such as quality assurance) by copying or moving theapplication's entire PowerBuilder library to the new environment.andP;  One canalso export individual object definitions to ASCII files and import theseASCII files into another PowerBuilder library.andM;The Application, Window, Menu, and DataWindow Painters provide direct accessto the browse facilities of the Library Painter, allowing a user easily tolocate the application, window, menu, or DataWindow that one wishes to open.andM;ShowHelp FunctionandM;The PowerScript ShowHelp function places the help facilities of Windows or PMat one's disposal.andP;  Through its parameters a user can identity, the windowfor which he/she wants to display help, the help text file (see below), andthe specific topic within the help file one wants to display in a particularPowerScript routine.andM;A user can create his/her own help text file with a standard word processor,such as Microsoft Word for Windows.andP;  As he/she enters the text, he/shedivides it into topics that are relevant to his/her application.andP;  A user candefine links between topics and browse sequence numbers to assist applicationusers in &quot;navigating&quot; the help file.andM;A help compiler converts a word processing document into the help-text fileformat required by Windows or PM so that it can be accessed when one'sapplication executes a ShowHelp function.andM;Debugging FacilitiesandM;PowerBuilder includes integrated debugging facilities.andP;  (Coding errors inPowerScript statements are detected when a user compiles a script in theScript Painter.)andM;A user can view any of his/her application's PowerScript routines in thePowerBuilder debugger.andP;  Before executing the application, the user cangraphically set breakpoints by clicking on any number of PowerScriptstatements and then executing the application.andP;  When the application reachesa breakpoint, execution is suspended and the debugger returns to the screen.andO;One can inspect the values of his/her application's variables at that moment.andO;One can continue execution, one PowerScript statement at a time, or resumeexecution at normal speed until the application reaches another breakpoint.andM;Delivering The Completed ApplicationandM;During application development and testing, a user can run his/herapplication by using the File Run command in any painter, or by clicking onthe Run icon in the Power Panel or Window Painter toolbox In addition, onecan use the File Debug command to invoke PowerBuilder's debugging facilitiesat any time during development.andM;When a user is finished developing the application, he/she prepares anapplication run-time file to deliver to the application's users.andP;  TheApplication Painter produces this file in standard EXE format.andP;  On the user'spersonal computer, the user can launch the application in several ways:andM;*  Adding the application to the Program Manager in any program managergroup, and launching the application by double-clicking on its iconandM;*  Using the File Run command in either the Program Manager or the FileManagerandM;*  Starting the application from a DOS prompt by typing WIN application-nameand pressing EnterandM;At run-time, the application user needs only the EXE file and thePowerBuilder runtime component.andP;  PowerBuilder also allows an application toaccess objects stored in other PowerBuilder dynamic application libraries.andM;PricingandM;Available in May, PowerBuilder will be sold world-wide by the Powersoft salesforce, and cooperatively through independent software companies, computersystems manufacturers, value-added distributors, systems integrators, andconsulting firms.andM;The PowerBuilder development environment is licensed for $2,995 per developerand is discounted by volume and configuration.andP;  License fees for run-timeversions vary according to the number of users.andM;ConclusionandM;PowerBuilder has a suite of graphic painter tools, a high-level PowerScriptobject-oriented language, and an integrated development and databaseadministration environment, all built on a shared object repository andlibrary manager.andP;  The net result is a toolset for application developersseeking to develop client/server applications.andM;Powersoft is positioned to take advantage of the development of newclient/server applications.andP;  The development of these applications tends tobe something of a &quot;chicken and egg&quot; problem, in that the demand for suchapplications does not develop until a number of applications are available.andO;PowerBuilder is the type of product that can hasten the development ofclient/server applications.andM;For additional information on PowerBuilder, contact Jennifer Molloy atPowersoft Corporation, 70 Blanchard Road, Burlington, MA 01803; (617)229-2200, Fax (617) 273-2540.andO;</TEXT></DOC>