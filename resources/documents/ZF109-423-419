<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-423-419  </DOCNO><DOCID>09 423 419.andM;</DOCID><JOURNAL>EXE  August 1990 v5 n3 p56(3)* Full Text COPYRIGHT Process Communications Ltd. (England) 1990.andM;</JOURNAL><TITLE>FORTRAN: a child of the 1950s. (The Third Side)</TITLE><AUTHOR>Campbell-Kelly, Martin.andM;</AUTHOR><SUMMARY>FORTRAN may be the greatest programming productivity boon of alltime.andP;  For more than 30 years, FORTRAN has held the lead as themost popular language for engineering and scientific applications.andO;For applications such as aerospace, number crunching,finite-element analysis, meteorology forecasting and high energyphysics, FORTRAN is unsurpassed in use.andP;  FORTRAN first appeared asdefined in a document titled 'Specifications for the IBM FORmulaTRANslating System' dated Nov 10, 1954.andP;  The idea behind FORTRANwas to have object program efficiency so little thought would beneeded for the design of the language itself.andP;  The goal was todesign an optimizing compiler to generate excellent object code.andO;FORTRAN 8X is the latest standard and is expected to take thelanguage through the 1990s.andP;  Few implementations exist as yet.andM;</SUMMARY><DESCRIPT>Topic:     FORTRANAnalysisHistory of ComputingProgramming LanguagesStandards.andO;Feature:   illustrationphotograph.andM;</DESCRIPT><TEXT>Some people think FORTRAN should never have been allowed to happen - yet itbas been the greatest programming productivity lever all time.andP;  MartinCampbell-Kelly expalins.andM;FORTRAN gets a terrible press.andP;  Edsger Dijstra once said it  is hopelesslyinadequate for whatever computer application you have in mind today...andP;  tooclumsy, too risky and too expensive'.andP;  FORTRAN has been blamed for theunstructured programming habits of a generation of programmers.andP;  And morespectacularly, FORTRAN was singled out as the underlying reason that theMariner spacecraft - intended to be the first United States spacecraft tovisit another planet  Venus) had to be destroyed four minutes after liftoffon 22nd April 1962.andM;Yet the fact remains that for over 30 years, FORTRAN has been the mostpopular language for serious engineering and scientific applications.andP;  Innumber-mnching environments such as the aerospace industry, finite-elementanalysis, meteorological forecasting and high-energy physics, FORTRAN isalmost universal.andP;  Often this is attributed to the triumph of IBM's marketingskill over its customers' judgement.andP;  But the real reason is encapsulated inthe well-known epigram: FORTRAN is a language to avoid - unless you want someanswers.andP;  The essential characteristics of FORTRAN are its efficiency,popularity and standardisation.andP;  It became popular because it was efficient;it became a standard because it was popular; and once it became a standard,FORTRAN was here for good.andM;The originsandM;FORTRAN was invented in 1954.andP;  At that time, there were less than 100computers world-wide, and the machine-code programmer was king.andP;  There hadcertainly been some attempts at 'automatic coding' - that is, getting acomputer to do its own programming - but they had achieved very limitedsuccess.andP;  Compilations tended to be very slow (taking as much as half-an-houron a $1 million machine) and the resulting programs were very inferior tothose produced by a good machine programmer.andP;  The few automatic-codingsystems that had been popular had mainly succeeded because their manifestinefficiency could be hidden behind the overhead of software floating-pointroutines.andP;  But the arrival of the IBM 704 computer with hardward floatingpoint meant this would no longer be possible: there would be no place to hideobject-code inefficiency.andP;  Whether it was possible to produce automaticallymachine code as good as that produced by a human programmer was ahigh-running controversy at the time; and a lot of mathematicians andengineers had staked their careers as machine-code programmersandM;on the assumption it was not.andP;  John Backus, an IBM high-flyer in his latetwenties, had been the co-designer of the new model 704 with Gene Amdahl.andP;  Inlate 1953, he successfully proposed that he should organise a ProgrammingResearch Group to develop an automatic-coding system that would produceprograms that were at least 90% as efficient as those written by amachine-code programmer.andP;  This was a major technical challenge, and not manypeople believed it could be done - including plenty of people in IBM.andO;According to one of his contemporaries, there was a feeling that Backus hadbitten off more than he could chew' and one IBM manager called it theandM;'FORTRAN fiasco'.andP;  The project, which had originally been intended to takesix months, dragged on for two-and-a-half years.andP;  Backus himself was notimmune to the criticism from the doubters and came close to giving up hisleadership of the project; but he went on to complete one of the mostremarkable pieces of programming in computer history.andP;  The, computercontained 18,000 machine instructions and took about 25 programmer-years ofeffort.andP;  The final cost was estimated by IBM at $475,000.andM;The LanguageandM;FORTRAN was first defined in an historic document Specifications for the IBMFORmula TRANslating System, dated 10th November 1954.andP;  The  primary goal ofthe FORTRAN project was object program efficiency, so that very littlethought was given to the design of the language itself - as Backus laterrecalled,  we simply made up the language as we went along'.andP;  One regretsthis now, of course, but the idea of creating in FORTRAN a standardprogramming language for the future was quite inconceivable at the time.andO;FORTRAN was designed for object program efficiency: designing an optimisingcompiler that would generate excellent object code was the real challenge andthe syntax of the language was very much a secondary issue.andP;  Figure 1 showsan example program taken from the original FORTRAN manual produced by IBM anddated October 1956.andP;  Program statements were punched one to a card, withfixed fields for the statement number, the FORTRAN statement itself, and thecard sequence number (in columns 73-80).andP;  This format has been carried downright to the present day, although virtually no-one punches programs on cardsany longer.andM;Figure 2 shows the EXE Triangle problem coded in the original FORTRAN for theIBM 704 computer.andP;  Perhaps the most remarkable feature of this program isthat it needs just one correction to make it compile and run perfectly on apresent-day FORTRAN system.andP;  (The correction is the deletion of the FREQUENCYstatement - of which more later.andP;  My compiler also issued a  warning'diagnostic because there was no END statement - a language refinement thatdid not, in fact, appear until FORTRAN II in 1958.) On the other hand, theprogram itself does not look very much like a  modem' FORTRAN program; thisis because it is written using the rather primitive statements available inthe original 1957 FORTRAN; these statements still exist in the language forbackwards compatibility, but some of them are now known as  deprecatedfeatures' that are candidates for eventual removal from the language.andM;FORTRAN recognised two types of variable: fixed point (or index) and floatingpoint.andP;  (In the 1966 FORTRAN standard, these became known as INTEGER andREAL.) Variables names could be a maximum of six characters in length.andP;  Whysix? For the simple reason that the IBM 704 stored six 6-bit characters inits 36-bit word, and storing one identifier per word made table look-up easyand efficient.andP;  This is a restriction that has carried right down to the 1977standard.andP;  Variables were not declared, but were implicitly typed accordingto the initial letter (I to N for fixed-point variables, and the remainingletters for floating-point variables).andP;  The implicit naming conventionremains one of the most controversial features of FORTRAN, since simplymisspelling an identifier can result in the creation of a 'phantom' variable.andO;It was this particular feature that was (unfairly) blamed for the Marinerdisaster, and became something of a cause celebre for the use of programminglanguages with strongly-typed variables.andP;  A major attraction of FORTRAN wasits powerful arithmetic expressions, which accepted the five arithmeticoperators and permitted parentheses nested to any depth.andP;  The importantpoint, however, was that the translator could not only compile theexpressions, but it would also produce virtually optimum code - for example,evaluating common sub-expressions only once.andM;Arrays were declared using the DIMENS I ON statement and could be one, two orthree dimensional - a particularly advanced feature at the time.andP;  Closelyallied to the use of arrays was the DO loop control statement.andP;  Looking verylike the FOR statement of later languages, the control variable and itsincrement had to be of fixed-point type; this limitation was because, forefficiency reasons, the control variable was mapped onto an IBM 704 indexregister which stored only integer values.andP;  The I F statement also reflectedthe underlying IBM 704 instruction set, which contained condition-branchinstructions that tested whether a value was zero, positive or negative.andO;Thus the statement IF (A+B) 10, 21, 15 would evaluate the expression A+B and:branch to 10 if the result was negative; branch to 21 if the result was zero;or go to 15 if it was positive.andP;  In the present age of goto-less programming,the arithmetic IF statement has largely fallen into disuse; and although itremains in the current FORTRAN standard for compatibility, it is considered arelic and its use is regarded as poor programming practice.andM;The input-output statements have much in common with the current standard,and are essentially a subset of it.andP;  One curiosity is the way of defining astring in a FORMAT statement, where a string such as 'TRIANGLE' is written8HTRIANGLE (where 8 is the string length and H stands for the Hollerithpunched-card code).andP;  The reason for this oddity is that the original IBM 026card punch, used for preparing FORTRAN programs, did not have a quote mark inits character set.andP;  Again, this notation for defining string constantsremains part of the FORTRAN standard for backwards compatibility.andM;The STOP statement is an interesting harkback to the days when FORTRANprograms were run in uni-programmed environments.andP;  The octal constantfollowing the stop-statement (eg STOP 70707) would be displayed on the IBM704 console display lights - this was useful for identifying error halts.andP;  Avariant of the stop statement, PAUSE behaved similarly - but the programcould be restarted by pressing the appropriate button on the console.andP;  Thiswas useful for synchronising a program with its input-output (for example,halting die program to lead decks of data cards, or to change magnetictapes), and for tracing program errors.andP;  Again, the STOP and PAUSE statementsare still part of die standard, and can be used meaningfully inconversational FORTRAN systems.andP;  Finally, the FREQUENCY statement.andP;  Theoriginal purpose of this optional statement was to enable the programmer togive the compiler a hint that helped it to optimise the object program.andP;  Forexample, the statement FREQUENCY 10 (100), 21 (1, 2, 1) would mean: DOstatement number 10 will be obeyed 100 times on average; and the threedestinations of IF statement 21 will be taken in the approximate ratio 1:2:1.andO;The compiler could make use of this information to fine-tune the object code.andO;This was an important feature when FORTRAN was trying to gain credibility andefficiency was paramount but later the FREQUENCY statement was ignored bymost compilers and it did not appear in the 1966 standard.andM;The rise and rise of  FORTRANandM;FORTRAN was released in April 1957, to a largely sceptical user community.andO;But when those same users discovered that FORTRAN could and did produceobject programs 90%  as good as hand-coded assembly language programs, thescepticism disappeared.andP;  Soon, many functions were spending half of theavailable machine time running FORTRAN programs and, by Autumn 1958, some 60installations were using the system.andP;  The language proved to be an amazingproductivity lever: a programmer could be trained in about 20 hours (comparedto the weeks it took to get proficient at machine code); and, whileprogrammers still tended to produce about the same number of debugged programstatements per day, the fact that each FORTRAN statement was worth four orfive machine-code andamp; statements meant that total output was' increased by thesame factor.andM;In IBM, scepticism towards FORTRAN now changed to positive support.andP;  Itbecame a serious selling point and brochures and publicity material wereproduced Figure 3).andP;  And as FORTRAN gained official product status, theproject was transferred from the Programm ing Research Group to the AppliedProgramming Department, which took overfield support and maintenance.andP;  Workalso started in 1958 on a successor, FORTRAN II.andM;One of the major defects of the original FORTRAN had been that a user'sprogram had to be completely recompiled every time it was corrected - and asa typical compilation took several minutes, this made program debugging veryexpensive.andP;  To improve on this, FORTRAN II introduced program units andsubroutines (with corresponding END statements) and the concept of alinkage-editor.andP;  Now user programs and subroutines could be compiled justonce and were subsequently linked together to produce a binary program.andP;  Aconsequence of this efficiency improvement was the development oflarge-scale, portable libraries of pre-compiled subroutines for matrix workand other numerical procedures, which further consolidated FORTRAN'spopularity.andP;  The source-object-binary model of program organisation is todayone of the universal characteristics of pro  g systems.andP;  It is not widelyappreciated that its origins are in FORTRAN II.andM;In spite of the early success of FORTRAN, in the late 1950s its long-termfuture was far from assured.andP;  There was a major international effort todesign and promote Algol 60 as a new world-wide standard for scientificprogramming; in fact, John Backus took a leading role in the Algol group andhe had no commitment whatsoever to FORTRAN.andP;  However, during the period1957-60 when Algol was being designed, US computer users took to FORTRAN sowhole-heartedly that they began to demand that other manufacturers producecompilers compatible with IBM FORTRAN.andP;  Thus FORTRAN had already become adefacto standard by the time that the Algol 60 Report was published, so thatin America the latter was never really a serious contender.andP;  In the early1960s, FORTRAN compilers from different manufacturers proliferated, but thelack of any sort of a FORTRAN standard meant that different implementationsdiffered in small but important ways.andP;  It was to address this problem thatthe American Standards Association (ASA - later ANSI) established a FORTRANcommittee in May 1962.andP;  The first FORTRAN standards appeared in 1966, whichdefined two versions of the language: Basic FORTRAN, roughly corresponding toIBM's FORTRAN II; and FORTRAN, corresponding to what was then IBM's latestoffering, FORTRAN IV.andM;Standards committees grind exceedingly slow, and more than a decade was topass before the next standard - FORTRAN 77 - was to emerge.andP;  The 1977standard incorporated new control statements for structured programming whichhad come to the fore in the late 1960s and early 1970s; and there werefeatures such as recursion, and support for nonnumerical computation,time-shared operation, and direct-access devices.andP;  It says something for dieadaptability of FORTRAN that it could take on-board all these new ideas andyet maintain almost total compatibility with the earlier FORTRANS.andM;The latest standard, FORTRAN 8X, of which few implementations yet exist, willtake the language through the 1990s and into the next century.andP;  Years ago,Tony Hoare stated, 'I don't know what the language of the year 2000 will looklike, but I know it will be called FORTRAN.' Well, FOK&quot; 8X shows us what itlooks like: it is a FORTRAN for today, but also one that is compatible with,and looks very much like, the FORTRANs that went before.andP;  The more FORTRANchanges; the more it stays the same.andO;</TEXT></DOC>