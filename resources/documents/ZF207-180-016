<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-180-016  </DOCNO><DOCID>07 180 016.andM;</DOCID><JOURNAL>Hewlett-Packard Journal  April 1989 v40 n2 p86(5)* Full Text COPYRIGHT Hewlett Packard 1989.andM;</JOURNAL><TITLE>An object-oriented methodology for systems analysis andspecification. (technical)</TITLE><AUTHOR>Kurtz, Barry D.; Ho, Donna; Wall, Teresa A.andM;</AUTHOR><SUMMARY>An object-oriented methodology is presented that aids in systemsanalysis and specification.andP;  The methodology permits the modelingand specification of a system's data, interactions, processing andexternal behaviour before design.andP;  A system is a collection ofentities interacting with each other to reach a predefined goal.andO;As software systems become more complex and larger, newmethodologies are needed so that the systems analyst can properlycapture and organize all necessary information.andP;  Theobject-oriented analysis methodology offers tools for capturing asystem's key element.andP;  It emphasizes analysis before design andsupports a natural modularization scheme by organizing the entireanalysis around objects.andP;  Its system model provides hightraceability between the model components and actual components ofthe system under study.andP;  Work is underway to adapt the method toreal-world projects.andM;</SUMMARY><DESCRIPT>Topic:     Systems AnalysisMethodsModelingProblem SolvingTheoretical ApproachTheory of Computation.andO;Feature:   illustrationchart.andO;Caption:   An example of an object-relationship diagram. (chart)Partial object-relationship diagram for the vending machineexample. (chart)State net showing the behavior of a token object. (chart)andM;</DESCRIPT><TEXT>An Object-Oriented Methodology for Systems Analysis and SpecificationandM;AS SOFTWARE SYSTEMS BECOME LARGER and more complex, the task of systemsanalysis continues to increase in effort and difficulty.andP;  Traditionalmethodologies for systems analysis sometimes fail to meet the analyst'sexpectations because of their limitations in properly capturing andorganizing all of the information that must be considered.andP;  Object-orientedsystems analysis (OSA) is an approach to systems analysis and specificationthat builds upon the strengths of existing methodologies and, at the sametime, addresses their weaknesses.andP;  This paper describes the basic concepts ofthe OSA methodology.andM;Systems AnalysisandM;A system is an organized collection of people, machines, procedures,documents, data, or any other entities interacting with each other to reach apredefined goal.andP;  Analysis is the study of a problem, prior to taking someaction.andP;  Systems analysis is the study of a collection of related andinteracting objects (existing or proposed) for the purpose of understandingand specifying its data, processing, and external behavior.andM;Object-oriented systems analysis (OSA) is a systematic approach to the studyof a system problem.andP;  The foundation of OSA's conceptual model is the set ofcomponents or objects in the system.andP;  The study of these objects is organizedand conducted in a manner that does not unnecessarily constrainimplementation.andP;  In fact, we believe that designs based on OSA specificationscan be procedure-oriented or object-oriented with equal success.andM;Objects in the OSA MethodologyandM;An object is an abstraction of entities or concepts that exist in or areproposed for a system.andP;  For example, the rectangle in Fig.andP;  1 depicts an OSAobject called Jet Plane.andP;  This object represents a class of things where eachmember has the attributes and behavior of a jet plane.andP;  Two possible membersof this class are a jet fighter and a jet passenger plane.andP;  Inobject-oriented terms, each member is called an instance of the object class.andO;Fig.andP;  2 further demonstrates the community of attributes and behaviorrequired of each member of the object class.andP;  The circle on the top in thefigure represents all of the attributes and behavior of a jet fighter.andP;  Thecircle on the bottom in the figure represents all of the attributes andbehavior of a jet passenger plane.andP;  The shaded area represents the commonattributes and behavior that allow each plane to be a member of the jet planeobject class.andM;The key elements of a system are the objects that exist in the system, thedata that must be processed, and the desired behavior of the system.andO;Traditional methodologies offer two basic approaches to modularize theseelements: a function-oriented approach which organizes the analysis modelthrough a hierarchy of functions, and a data-oriented approach whichemphasizes a hierarchy of data structures.andP;  OSA imposes a naturalmodularization on the system model through the emphasis on objects (see Fig.andO;3).andP;  Each object has associated attributes (data) and behavior (legal statesand functions).andP;  An object in the OSA system model has a one-to-onecorrespondence with an actual object in the system.andP;  This provides an easymapping between the analysis model and the components of the system understudy.andM;Collecting Preliminary SpecificationsandM;Before attempting to construct an OSA system model, it is important tocollect or generate a preliminary list of specifications.andP;  Thesespecifications are gathered from discussions and interviews with users andmanagers of the system under study.andP;  The preliminary specifications arerather informal and are usually documented with natural language text andhand-drawn graphics.andP;  These specifications should answer most of thefollowing questions that may be posed by the analysis team:andM;* What is the subject of the analysis?andP;  Is it an existing system, a proposedsystem, or a combination of both?andM;* What are the specific problems that need to be solved and what are theobjectives for the solution?andM;* What are the logical boundaries of the system study?andP;  Does the entiresystem need to be studied in detail or can a smaller subset be studied?andM;* What are the known constraints of the system?andP;  Are there specialperformance constraints, interface constraints, hardware constraints, and soon?andM;* What are the major components of the system?andP;  What needs to be done witheach component?andP;  What should each component do in the system?andM;The specific format of the preliminary specifications may vary from projectto project.andP;  The important factor here is that the preliminary specificationsare collected before  construction of the formal OSA specifications.andP;  Thefollowing is a small example of a preliminary specification that an analystmight use to gain a basic understanding of a system problem.andM;A vending machine must be produced for distributing products to customers.andO;The customer begins the vending process by depositing a token in themachine's coin receptacle.andP;  The token must be checked for size, weight,thickness, and type of edge.andP;  Valid tokens (coins) are quarters, dimes, ornickels, and anything else is considered a slug.andP;  Slugs are rejected and sentto the coin return slot.andP;  When a valid coin is accepted by the machine andsent to the coin box, the amount of current customer payment is incrementedby the value of the coin.andM;Each product dispenser contains zero or more products.andP;  All of the productsin one dispenser have the same price.andP;  The customer's product selection ismade by identifying the dispenser to be activated.andP;  If the dispenser is notempty and the current customer payment equals or exceeds the cost of theproduct, the product should be dispensed to the product delivery slot and anychange due returned to the coin return slot.andP;  If the dispenser is empty,coins equaling the current customer payment should be dispensed to thecustomer in the coin return slot.andM;If the customer payment is less than the price of the products in theselected dispenser, the machine should wait for the customer to deposit theproper payment.andP;  If the customer decides not to make a selection the currentamount deposited should be returned.andM;Building Object-Relationship DiagramsandM;After preliminary specifications are gathered for the major components of thesystem, the analyst can begin building object-relationship diagrams (ORDs).andO;The ORD portion of the analysis provides a formal repository for answers tothe following question:andM;* What are the components of the system (both abstract and concrete)?andM;* What are the important formal relationships between the system components?andM;The first step for producing ORDs is to make a list of the nouns contained inthe preliminary specification.andP;  These nouns are classified by the analyst asobjects (systems components), attributes of object, or synonyms for otherobjects or attributes.andP;  Synonyms must be eliminated and attributes must beassociated with existing objects.andP;  From our vending machine example, some ofthe nouns that represent objects are token, coin receptacle, slug, coin, coinbox, nickel, dime, and quarter.andP;  Also from the same example, the nouns thatwould be considered attributes include weight, thickness, and price.andM;Objects are depicted in object-relationship diagrams by the object nameenclosed in a rectangle.andP;  An ORD showing a relationship between coins and acoin box is shown in Fig.andP;  4.andP;  The ORD in the figure states a coin box holdsone or more coins.andP;  The capital M in the figure is shorthand for one or more.andO;A relationship line without an M signifies that the relationship isone-to-one.andP;  ORds are similar in use and meaning to entity-relationshipdiagrams.andP;  The formal meaning of ORD relationships is shown in Fig.andP;  5, andFig.andP;  6 shows a partial ORD for the vending machine example.andM;Object-relationship diagrams have subcomponent called concept diagrams.andO;Concept diagrams provide a quick method for capturing the informationrelationships and interactions between objects.andP;  For example, fig.andP;  7 shows aconcept diagram stating that a coin receptacle needs to know the thickness ofa token.andP;  A dotted arrow depicts an informational relationship betweenobjects.andP;  The information may be an attribute of an object or an event thatanother object needs to know about.andM;Fig.andP;  8 shows a concept diagram that states that a customer deposits a tokeninto the vending machine.andP;  A solid arrow is used to show an action that anobject performs upon another object.andP;  Since informational relationship andobject interactions are relatively easy to extract from the preliminaryspecifications, concept diagrams may be used frequently at the beginning ofthe analysis.andM;natural Language Object DescriptionandM;The object-relationship diagrams identify classes of components in the systemand formal relationships between the components.andP;  The next step is to providemore information about each object and its attributes.andP;  The objectdescription is documented with natural language text and contains thefollowing information:andM;* Name.andP;  The name of the class of system components represented by theobject.andM;* Description.andP;  A brief description of the general characteristics forinstances of the object.andM;* Assertions.andP;  Things that must always be true regarding attributes orbehavior of instances of this class.andP;  For example, an object may need to bekept at a certain temperature to ensure the desired behavior.andM;* Attributes.andP;  Required attributes for each instance (such as identifiers,status variables, etc).andP;  The domain or legal range of values for eachattribute must be specified here.andM;The specific format of the object description may vary from project toproject but it should include at least the above information.andP;  Fig.andP;  9 showsa natural language description for the vending machine example.andM;Building Behavior SpecificationsandM;Using the foundation of object-relationship diagrams and individual objectdescriptions, the analyst builds a behavior specification for each object.andO;Since internal behavior is usually a function of implementation, the analystconcentrates on the external behavior of each object.andP;  External behavior hasthree components:andM;* The externally perceived states or conditions of each objectandM;* The actions that must be performed on each projectandM;* The actions that each object must peform.andM;Each of these components may be specified by natural language text.andP;  However,experience has shown that such an approach leads to ambiguity and confusion.andO;To help ensure consistent interpretation of behavior specifications, a moreformal method is required.andM;There are several existing formal methods for describing external systembehavior.andP;  These methods include finite state machines, decision tables,Petri nets, R-nets, precondition/action/postcondition tuples and others.andP;  Thefollowing criteria were used to choose a behavior specification method forOSA:andM;* The method should encourage the analyst to identify and classify systemcomponents before specifying behavior.andM;* The method should allow the analyst to specify an object that exhibitsmultiple action conditions (concurrent activities).andM;* The method should provide for high traceability between the actual systemcomponents, object-relationship diagrams, and behavior specifications.andM;The behavior specification technique developed for OSA is called state nets.andO;State nets are based on a restricted form of Petri nets.andP;  There are severalpossible configurations of state nets that use the full power of Petri netsfor expressing concurrent activities.andP;  For this overview, however, we willlimit the discussion to a model similar to a finite state machine.andM;A sample state net representing some of the states and actions required for atoken is shown in Fig.andP;  10.andP;  The states or conditions of the token object arerepresented by ovals in the figure.andP;  The states are typed with the name ofthe object being specified (token in this example).andP;  Labeling the state withthe object name means that instances of that object may exhibit the specifiedstate.andP;  The transitions between states are represented by short horizontalbars.andP;  The labels next to the transitions specify the events that causeinstances of the object to transition from one state to another.andP;  In Fig.andO;10, the Token_Deposited command cause the machine to transition from the InCustomer Possession state to the In Coin Receptacle state.andP;  The actionsrequired to establish a new state are shown as labels on the input arrowconnected to the new state.andP;  For example, the state net diagram states thatthe action Move Token To Return Slot must be performed before the machine isin the In Return Slot state.andM;System Behavior SimulationandM;Once the state nets for the system have been completed, the analysis team isprepared to simualte executions of the system.andP;  The simulation is performedusing state nets to follow conditions and states exhibited by the system.andO;The object-oriented nature of state nets aids in hiding complexity duringsimulations.andP;  This allows the analysis team to achieve good behavior coverageeven when automated simualtion tools are not available.andM;During system simulation, several classes of errors may occur that requiremodifications to the current OSA model or specifications.andP;  Simulation willaid the analyst in discovering the following problems:andM;* Mising or ambiguous information in the preliminary specificationandM;* Missing or incorrect object-relationship diagramsandM;* Missing objects or incorrect descriptionsandM;* Missing or incorrect behavior specifications.andM;Any of these errors will require another pass through one of the analysisphases previously discussed.andP;  The  object-oriented nature of the OSA modelenhances traceability to the components of the system related to a particularerror.andP;  Fig.andP;  11 shows the process flow for the OSA methodology and showspossible interactions between the various methodology steps.andM;ConclusionandM;The contributions of the object-oriented analysis methodology include:andM;* It provide tools for capturing the key elements of a system--components,data, and behavior.andM;* It emphasizes analysis before design.andM;* It supports a natural modularization scheme by organizing the entireanalysis around objects.andM;* Its system model provides high traceability between the model componentsand the actual components of the system under study.andM;The methodology is currently under research and verification.andP;  It has beenapplied to several problems involving hardware and software components withencouraging results.andP;  A prototype tool is being developed to aid analysts inprocessing textual specifications and capturing the meaning of systemsproblems using the OSA methodology.andP;  The goals now are to finish the tool,develop training materials, and continue to verify applicability of themethodology to real-world projects.andO;</TEXT></DOC>