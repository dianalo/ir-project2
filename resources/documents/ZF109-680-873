<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-680-873  </DOCNO><DOCID>09 680 873.andM;</DOCID><JOURNAL>IBM Systems Journal  Dec 1990 v29 n4 p551(16)* Full Text COPYRIGHT International Business Machines Corp. 1990.andM;</JOURNAL><TITLE>Re-engineering software: a case study. (air traffic controlsoftware) (technical)</TITLE><AUTHOR>Britcher, Robert N.andM;</AUTHOR><SUMMARY>In 1986, the Federal Aviation Administration formed a contractwith three companies to re-engineer a major portion of the NewYork terminal approach control (TRACON) application software - thesoftware that supports air traffic control in the New York Cityand Newark, New Jersey, area.andP;  This paper discusses the techniquesused to successfully re-engineer the software to run on an IBMSystem/370, illustrating that real-time software can be logicallyconverted from one computer to another, reliably andcost-effectively.andP;  (Reprinted by permission of the publisher.)andM;</SUMMARY><DESCRIPT>Product:   IBM 370 (Mainframe computer) (Computer programs).andO;Topic:     Software MigrationReverse EngineeringSoftware EngineeringCase StudyUnited States. Federal Aviation Administration.andO;Feature:   illustrationchart.andO;Caption:   Level-1 Ada packages and their relationships. (chart)Overall approach to re-engineering. (chart)Demonstration flow. (chart)andM;</DESCRIPT><TEXT>In 1981, the Federal Aviation Administration (FAA) issued a plan to upgradethe national airspace system.andP;  An overview of the system is depicted inFigure 1.andP;  The new plan included the host computer system that would replacethe existing IBM 9020 computers (derivatives of the IBM System/360&quot;) in theen route air traffic control centers, and the advanced automation system thatwould upgrade the host computer system and the terminal approach control(TRACON) and tower facilities.andM;In 1986, during the host computer system acquisition and two years prior tothe start of the advanced automation system acquisition, the FAA awarded asmall contract, of approximately $2.5 million, to Data TransformationCorporation, International Business Machines Corporation, and Pailen-JohnsonAssociates to re-engineer part of the New York TRACON software in ahigh-order language, to run on an IBM System/370T.andP;  Model 3083.andM;This paper describes the scope of that project and the tools and methods thecontractors used to reengineer the software.andP;  The results and conclusionsindicate that re-engineering the software of an existing system may bepreferable to reinventing it.andP;  Table 1 is provided to assist the reader inidentifying the terms and abbreviations used frequently in this paper.andM;The scope of the projectandM;The project was officially entitled &quot;New York TRACON Demonstration of ProgramRecoding&quot; and was aimed at recording the methods used to reengineer the(then) current New York TRACON application software and verify theequivalence of the re-engineered version to its source.andP;  The FAA'S Statementof work required the contract team to demonstrate and document a logicalconversion of the existing New York TRACON operational software assemblersource code (ULTRA- from UNIVACTI) into a compiler language.andP;  The newlygenerated software had to be functionally identical and directly traceable tothe existing code.andP;  The work was to be completed in nine months and culminatein two demonstrations: the first demonstration in early April of 1987, thesecond in mid-May, the ninth month.andP;  If it were successful, the project wouldbolster the idea of improving systems through planned evolution.andM;The objective in re-engineering.andP;  The FAA wanted to determine if a20-year-old, real-time system could be cost-effectively re-engineered onto acommercial platform-including commercial hardware, commercial tools andlanguages, and commercial operating system software-while retaining thebehavior of the applications.andP;  As a by-product of the re-engineering, thearchitecture of the applications and their database would be simplified toeliminate unnecessary dependencies, while creating a visible architecture.andO;This is in keeping with the long-range objective of the FAA (and other UnitedStates government agencies) to eliminate customized system components and todevelop and use application programs that are reliable and easy to modify andextend.andP;  Customized components typically require specialized training andmaintenance and are vulnerable to changes in a product line or technology.andO;The National Bureau of Standards publication in Reference 3 listscharacteristics of systems that are candidates for redesign.andP;  Among them arecode over seven years old, overly complex structure, code written for aprevious generation of hardware, hard-coded parameters, and very largemodules.andP;  All of these characteristics applied to the New York TRACON system.andM;It is essential that all parties involved in a particular application ofre-engineering clarify its meaning and scope, and define their rationale fordoing it.andP;  Does it include designing, coding, specifying, testing? Houtz, inwriting about how much software improvement differs from conventional systemdevelopment, argues convincingly for a precisely documented softwareimprovement program that would record which software would be affected; astrategy for each case such as purging, conversion, or replacing; a costbenefit assessment; and the detailed plan for implementing each strategy.andM;It was only after beginning the New York TRACON demonstration that the FAAand the contract team clearly understood the extent and type ofre-engineering that would be applied to the TRACON SOftware.andP;  For example, arecently completed project' moved the applications of the national airspaceen route system from an IBM 9020 to an IBM System/370 host computer system.andO;Isolated portions of the software were respecified and redesigned, then codedin the original source language.andP;  The re-engineered system was tested byverifying its functional equivalence to the original IBM 9020 version.andP;  TheNew York TRACON demonstration, on the other hand, moved the applications froma UNIVAC host computer to an IBM System/370 host, replaced the platformsoftware (the operating system), redesigned the software architecture andtop-level design of the applications, specified the design (but not thesystem functions), re-engineered the software in a new target language, andtested it by verifying functional equivalence.andP;  In both projects the resultsjustified the cost.andP;  But without a well-defined rationale and plan,re-engineering could be at best too expensive, and at worst the wrong thingto do.andP;  For example, Sneed,  6 describing work performed for the BertelsmannPublishing Corporation in West Germany, reported that the work of specifyingand retesting, without re-engineering, 232 PL/I prograMS was groSSlyunderestimated, and that only the judicious use of tools-such as a staticanalyzer-made the job feasible: the cost being two-thirds of the cost ofdeveloping the original software.andP;  Sneed also reported that the effort tofind out whether software systems could be economically renovated resulted inno new software, only better documentation and a testbed for future testing.andM;The applications to be re-engineered.andP;  The New York TRACON is the largestterminal and approach control area in the United States, supporting fivemajor airports in and around New York City.andP;  The automated radar terminalsystem that supports TRACONs around the country (ARTS IIIA), Was developed inthe early 1970s.andP;  The heart of the application software is the ARTS IIIAtracking algorithm.andP;  Because it is central to all air traffic automation, theFAA required that the contract team re-engineer the tracker as faithfully aspossible.andP;  Tracking enables an air traffic controller to observe anaircraft's position and speed (and other important information, such as itstransponder code) at the controller's workstation, by continually correlatingthe computer-modeled vector with the digitized radar return, every sweep ofthe radar.andP;  Tracking is supported by 1) an application program that buffersthe digital radar returns, 2) an application that enables the TRACON tocommunicate with other facilities, and 3) an application that supports thecontroller workstation.andM;Of the ARTS IIIA applications, the FAA and the contract team agreed tore-engineer the tracker, the radar input program, or PSRAP (for preliminarysensor receiver and processor), a small portion of the interfacility support,and the controller workstation support.andP;  The PSRAP and tracking-algorithmswere coded virtually line for line, so that the FAA and the contract teamcould evaluate in some detail the results of reengineering a real-timesystem.andP;  Although there were accommodations to the change in structure of theapplications (the design process is described below) and to the lexicaldifferences between source and target languages, the re-engineered softwarewas traceable to its source without much difficulty.andP;  Because the targethardware and the operating environment differed from the source system, theother applications were re-engineered-with FAA approval-to achieve functionalequivalence, but not necessarily algorithmic equivalence.andP;  In particular,because the prototype situation display used in the demonstration system wasnot equivalent to the TRACON workstation, the applications that support thedata entry and display system were not re-engineered line for line.andM;Two support programs developed for the ARTS were key to the demonstration,because of their role in testing and verifying functional equivalence.andP;  Thecontinuous data recording (CDR) editor reduces the data recorded by theoperational software so that programmers and analysts can evaluate thefunctional performance of the system.andP;  A simulator, RETRACK, uses the CDRdata recorded from a previous run to feed the operational software, so thattesting need not depend on the availability of live radar and controllerinputs.andM;The contract team developed one new program: a CDR conversion program totranslate the FAA-provided CDR file from ULTRA-compatible format to Pascal/VSrecords that could be processed by an IBM System/370.andM;The support programs and the conversion program provided a coherent thread ofautomation that connected airplanes to the controller monitoring them.andP;  Itwas enough to give the demonstration the characteristics of a completesystem.andM;The software to build and execute the applications was provided by thecontract team.andP;  The estimated number of lines of source code (in ULTRA) to bere-engineered was 8000 for the tracker and PSRAP, 7000 lines to support theworkstation, 3000 lines for the operational database, and about 13 000 linesof support software, to drive the system and to record and reduce itsoutputs.andP;  (The actual number of lines converted exceeded the estimate by 66percent: the contract team converted 53 000 lines of source code; the bulk ofthe 22 000 lines excluded from the estimate was taken up by the databasespecifications and the site (such as the location of the radar sensors)database.andM;The FAA provided the New York TRACON Source code and listings, specificationsand design data, database definitions, and files containing recorded radarand air traffic controller inputs that would be used to drive the system.andP;  Inaddition to providing contract team members, IBM also provided the laboratoryand equipment to develop and demonstrate the converted software.andM;The current system architectureandM;The New York TRACON development and support system runs on a commercialSperry [Trademark] 1100 processor under a commercial operating system, butuses specially-built software to build and reduce data generated by theoperational system.andP;  The operational software can be assembled and linked oneither the Sperry 1100 or on the operational system, UNIVAC's Input Output(IOP) multiprocessor.andP;  Data are reduced only on the IOPandM;The operational system runs on the IOP, a multiprocessor developed for theautomated radar terminal system (ARTS), and a derivative of the UNIVAC 8300.andO;It drives the data entry and display subsystem, a configuration of TexasInstrument's workstations, containing neither software nor microcode.andM;The ARTS IIIA is coded in ULTRA, a 16-bit assembler developed in the 1960sfor the UNIVAC processors.andP;  Like the assemblers of its generation, it wasdeveloped to get the most out of the target processor.andP;  The version Of ULTRAin use now is not much different from the original, in that it offers nomacro facility and no structured programming control structures.andP;  Theoperational software is supervised by a customized multiprocessor executive(MPE) Written for the ARTS.andP;  The rules for concurrent and sequentialexecution of the applications are encoded in a lattice and carried out andenforced by the MPE.andP;  Because the IOP is a multiprocessor, the MPE assignswork-radar to be buffered and sorted, tracks to be correlated-to theapplications in a strict time-sequenced order.andP;  The MPE allocates eachwork-application pair to an available processor, the object being to keep theprocessors busy.andM;The application software is organized as tasks.andP;  The application tasks, ingeneral, correspond to the applications: PSRAP, which processes incomingradar data; the tracker, consisting of the applications to support thecontroller workstation data entry and display; and the support forinterfacility communications.andM;The small global database, comprising predominantly radar returns and tracksand the information describing the current state of each workstation, isorganized in tables accessible by the applications without executivesupervision.andM;The target system architectureandM;The contract team developed and demonstrated the re-engineered New YorkTRACON software on an IBM System/370 Model 3083.andP;  Unlike the UNIVAC IOP, theIBM 3083 is a uniprocessor.andP;  It executes at roughly four times the cyclespeed of the IOP and contains 16 megabytes of primary storage.andP;  Its channelsoperate at about three megabytes per second.andP;  Each of its attached storagedevices, both direct and sequential access, holds gigabytes of data.andM;The IBM 3083 drove a prototype situation display enabling the FAA tO observethe display outputs.andP;  The situation display supports a 2048 by 2048 pixelcolor raster presentation driven by a state-of-the-art display generator, andit embeds a workstation processor.andP;  For the demonstration, it was used in amode that emulated the current ARTS IIIA situation displays as closely aspossible.andP;  Figure 2 describes the configuration.andM;The development processor and the demonstration processor were one unit.andO;IBM'S virtual machine operating system, vm/sp-HPO, made this possible.andP;  Itallows users to run different systems and different kinds of systems, such asbatch systems, interactive systems, and real-time systems, on a singleprocessor.andP;  The contract team chose Pascal/VS as the target compiler.andP;  Thecompiler and the operational system were controlled by Multiple VirtualStorage (MVS) whereas the development system was run under the ConversationalMonitoring System (CMS).andP;  Both MVS and CMS can run concurrently underVM/SP-HPO.andP;  (Although the same processor supported both the development andthe demonstration system, the customer demonstrations were given with thedemonstration system running in native mode, that is, MVS interactingdirectly with the IBM 3083, without VM/SPHPO and the development software,CMS, configured.andP;  The intent was to present the re-engineered system in anenvironment as close to operational as possible.) Figure 3 shows thecommercial platform under which the re-engineered applications were developedand executed.andM;Demonstration environment and data flowandM;The demonstration was run in test mode; no live inputs were permitted.andP;  Itlasted about 20 minutes.andP;  The FAA-supplied CDR file, containing recordedradar, interfacility, and workstation inputs from a live New York TRACONoperation, was read by RETRACK.andP;  RETRAcK primed the input buffers of theradar input program PSRAP, the workstation keyboard and interfacility inputprograms; tracking was executed; and the resulting data were written to thedisplay.andP;  The applications ran in real time-as if the inputs were live-andrecorded their CDR data.andP;  After the run was complete, the newly-generated CDRfile was reduced by the CDR editor and the listing compared with a New YorkTRACON test run made using the identical CDR inputs.andP;  (See Figure 4.)andM;ToolsandM;The tools were critical to the success of the demonstration.andP;  The developmenttools were similar to those IBM used in re-engineering the IBM 9020 en routesystem into the IBM System/370 host computer system.' They consisted ofinteractive programming and management tools, built on IBM commercialproducts, executing under CMS.andP;  The products included an interactive editorand library manager (ISPF/PDF), an interpretive language that enablesprogrammers to take advantage of the ISPF/PDF dialog manager by developingtheir own panels and executive software (REXX), a relational databasemanagement system (SQL/DS), and an automated document preparation package(Document Composition Facility).andP;  For the host computer system IBM developedan automated software development plan to track the completion of allsoftware and testing milestones from the level of the module to that of thesystem; an automated design issues and trouble report system; and anautomated software configuration control and accounting system.andP;  These werechanged slightly for the New York TRACON project.andM;The unifying architecture of the target system increased productivitysignificantly over that of the source system.andP;  (Growth in productivity mightbe one of the factors that would encourage a customer to re-engineer an oldsystem, if the life span of the system were long enough.) Because thedevelopment system ran on the same processor as the demonstration system, aprogrammer could develop a schedule for a module, design, code, compile, unittest, repair, promote, and transmit it-through VM/SP-HPO-tO the demonstrationsystem for integration testing in a single session from the programmer'sinteractive terminal.andM;A tool that was central to the success of the demonstration was a Pc-basedrelational database, hosted under DBASE Ill', because it contained a datadictionary identifying every variable and constant in the source system, withthe following attributes:andM;*the company responsible for coding the identifierandM;*the identifierandM;*the name of the table, if any, in which the identifier resides (in thesource system)andM;*the page number in the New York TRACON coding specifications where theidentifier is describedandM;*the names of the procedures that reference the identifierandM;*With each procedure, a value-given here in parentheses-indicates whether theprocedure sets the variable (1), uses it (2), both (3), or that data are notyet known (0)andM;*the type of identifier (e.g., character, Boolean, array, real)andM;*the new name of the identifier in Ada and Pascal/VSandM;*the name of the new design package that would own the identifier (there-engineered system was designed to eliminate global data)andM;*the page number in the new database design document where the identifier isdescribedandM;Figure 5 illustrates a page of the data dictionary.andP;  The target language,Pascal/VS, and the target operating system, Multiple Virtual Storage/ExtendedArchitecture  (MVS/XA&quot;), although they were part of the demonstration systemarchitecture, were also tools, in that their characteristics facilitate andencourage certain methods.andP;  Pascal/VS was chosen because all of theprogrammers had experience with some form of Pascal, which is lexicallysimilar to Ada used to develop the design, and because Pascal/VS runs underMVS.andP;  The FAA had requested that the demonstration system be coded in Ada.andO;Because the contract team was not experienced in writing Ada and the schedulewas quite short, all parties agreed on an Ada design (described in thesection on methods) and a Pascal/VS implementation.andM;Lexically, the source system and the target system differed markedly.andP;  ULTRAis a 16-bit assembler that provides very little built-in support fordevelopment (e.g., no macro facility), for execution (no distinction is madebetween instruction space and the data space), or for testing.andP;  Because it isalmost entirely a specification for the computer, its nature is lexical andmechanical.andP;  Pascal/VS, because it is a specification for the programmer,provides not only a lexicon, but an emphasis; one that is mathematical ratherthan procedural.andP;  For example, variables and data types are specifications,and are distinguished from the instructions, which are fabricated ofsingle-entry, single-exit control structures.andP;  Of equal importance, Pascal/VSimplies rules for the development of programs, and it promotes thedecomposition of abstract programs into smaller, less abstract programs.andP;  Italso imparts structure to a program and, to the advantage of large softwareproducts, among programs.andM;The choice of MVS to be the host for the ARTS applications was in keepingwith the overall approach: providing a commercial platform for thereengineered applications.andP;  MVS, unlike the speciallybuilt supervisordeveloped for the ARTS IIIA (MPE), is a general-purpose operating system.andP;  Itsupports a wide range of applications, including both batch and interactivedevelopment, database management systems, network systems, productionsystems, and real-time systems.andP;  For example, the contract team used MVS tosupport batch compilations, to perform interactive reduction of CDR datausing the CDR editor, and to run the ARTS applications.andP;  The last, becausethe ARTS executes in real time, required the presence of a real-time controlprogram.andP;  The real-time control program used was RTX, developed by iBM tOSUPPOrt the real-time applications for the National Aeronautics and SpaceAdministration (NASA) and United States Air Force ground control spaceprograms.andP;  Although the demonstration was carried out in a test environmentusing simulated inputs, the re-engineered system was designed and implementedas if it would be run in real time.andM;MethodsandM;Within the contract team there were three teams, totaling 25 people, roughlyaligned with the three companies.andP;  The first team was responsible forimplementing the tools and the new software architecture.andP;  The second teamconcentrated on re-engineering the on-line applications.andP;  The third teamcoded RETRACK, the CDR editor, and the database constants, and conductedsystem testing.andP;  The teams were directed by a software architect, whodeveloped the program plan, including the methods and the standards by whichthe software would be developed, and the software architecture.andP;  The teamsmet two or three days a week to discuss both methods and architecture.andP;  Everydeveloper knew the approach.andP;  and frequent and formal communication markedthe project.andM;All project data, plans, standards.andP;  design, and code were on line and easilyaccessible through a hierarchy of directories.andM;A software development plan defined the software build plan and the standardsfor designing and developing the software, for software configurationcontrol, and for software quality control.andP;  The standards containedtemplates, such as the gateway program that enabled each application tointerface with the application control programs using one standard protocol.andO;Every rule the developers might need was defined and in most cases exampleswere provided.andP;  A formal life cycle, based on the traditional waterfall lifecycle, was strictly adhered to.andP;  It was:andM;*Requirements analysis, methods, and architectureandM;*Level-1 software design  in Ada)andM;*Level-2 software design (in Ada)andM;*Coding, in three increments  in Pascal/VS)andM;*Software integration and testingandM;*Demonstrations and delivery of documentationandM;Figure 6 describes the contract team's approach to re-engineering.andP;  Althoughno software improvement program  was formally documented, the methods weredefined in detail in the team's proposal to the FAA.andM;The project began in September 1986.andP;  Within a month, two critical milestoneswere met: the development tools were adapted (from the host computer system)to suit the demonstration.andP;  For example, interactive panels that invoked theJovial compiler on the host computer system were modified to invokePascal/VS, and a set of macros were developed that enabled RTX and thePascal/VS run-time software to work together in a real-time environment(Pascal/VS was developed for a batch and interactive environment and itsbuilt-in storage management and error processing had to be modified).andM;The contract team did not reinvent the system.andP;  The source systemrequirements, an English description of its expected behavior, on the wholewere not changed.andP;  To complete the requirements analysis, the team recordedtheir intent in the New York TRACON Demonstration of Program RecodingRequirements Analysis Document.andM;Re-engineering the software architecture.andP;  The official name given to theproject, &quot;New York TRACON Demonstration of Program Recoding,&quot; is somewhatmisleading.andP;  A new architectural platform had to be designed before theapplications could be re-engineered.andP;  The architecture of the source systemis profoundly different from that of the target.andP;  (This would be the case inre-engineering many old systems.) Although both are von Neumann machines, theUNIVAC IOP is a multiprocessor, its storage shared among processors; the iBm3083 is a uniprocessor.andM;In the IOP, work is distributed among the processors to meet the system'sdemand for service in real time.andP;  The system was designed to get the most outof all the data processing elements, processors, channels, storage, anddevices.andP;  In the IOP system, the work is moved to the machine.andP;  Thesupervisory software (MPE), schedules tasks from a prefabricatedtwo-dimensional lattice, a directed graph that specifies the interdependency,priority, and, in some cases, the expendability of each unit of work.andP;  PSRAPMUST run before tracking, tracking must run before display, and so on.andP;  Inthe IOP system, the application is aware of its processing constraints.andP;  Forexample, tracking must execute within a fixed period of time, or work isflushed from the input queues.andM;The IBM System/370 architecture is the inverse where the machine is moved tothe work, at least in the abstract.andP;  The System/370 computer family, of whichthe IBM System/370 Model 3083 is representative, is event-driven.andP;  Work isdefined and allocated dynamically.andP;  MVS dispatches applications when they areavailable, not according to a predefined sequence.andP;  The rules of concurrency,of data coherency, and of application communications are left to thedesigner.andP;  The new software architecture centralized the control programservices within its run-time system (that included MVS, RTX, and Pascal/VS)and a layer of applications control programs, thereby decoupling theapplications from their processing environment, and insulating them so thatthey could be re-engineered free of operating system dependencies.andP;  A singlegateway package enabled all the applications to interface with the controlprogram services.andP;  The architecture was developed as a set of rules andformally documented as part of a requirements analysis document.andP;  Itcontained the following:andM;* Definitions to include names of methods, attributes of behavior, objects(e.g., Ada package, application work, conversation, pipeline, process)andM;* Rules for packages and their attributes to define the five classes ofapplications and identification of the applications that fell within each:off line (0), control (C), interactive (1), pipeline (P), and data (D), anddefinition of the rules of behavior (e.g., pipeline packages shall notconverse with each other)andM;* Rules for system work to define the units of work (e.g., radar targets,tracks) and their relationship to each otherandM;* Rules for system parts and their work to describe the behavior of thepackages with respect to their attributes (e.g., pipeline)andM;* Rules for the decomposition of parts to define the design levels (therewere two) and their relationship to one another (e.g., the relationshipbetween a Level-1 package and its Level-2 packages can be one-to-one orone-to-many)andM;* Rules for tasks and concurrency to define the behavior of the applicationsas real-time programsandM;* Rules for the communications between subtasks to define a message controlsystem that would enable applications to operate independently, and send andreceive messages to and from one anotherandM;* Rules for database and data coherency to define the rules for dataaggregation and acquisition (data were defined as records in thedemonstration system, rather than as tables in the source system, and,because the applications were redesigned as state machines, there were noglobal data)andM;The abstract rules provided a natural specification for the applicationscontrol packages, shown in the upper left of Figure 7.andM;Figure 7 describes one dimension of the software architecture, the Level- 1Ada packages, the attributes of each, and their interfaces.andM;Re-engineering the database.andP;  The new software architecture gave theapplications independence, and as a result, it gave the teams coding themindependence.andP;  The data dictionary progressed in parallel.andP;  As thearchitecture unfolded, developers studied the source system code and codingspecifications of the applications, without having to worry about theenvironment in which they would run.andP;  The developers identified the variablesand constants that are set and used by each application (e.g., PSRAP).andP;  Byidentifying the data space of the source system and mapping it to the targetsystem, and recording both the domain (source) and range (target), thedevelopers reduced the re-engineering of the applications to a simplemathematical function.andP;  The function is the set of ordered pairs (s,t), wheres is the set of identifiers that define the potential states of the sourcesystem and t is the set of identifiers that define the potential states ofthe target system.andP;  In many cases the domain mapped to an empty set:variables were not needed because the target system excluded capabilities,for example, the live interface to the PSRAP.andM;Formally defining the on-line software architecture and the data space,before elaborating the design of programs, was central to producing a targetsystem that met the design and performance constraints within the shortschedule.andM;Re-engineering the design of the applications.andP;  The design of theapplications was re-engineered and recorded in two levels.andP;  The design waspredicated on the methods used by IBM on all its major software developmentprojects.andP;  The methods treat (computer) programs as mathematical objects,either functions or state machines.andP;  A function maps inputs to outputs; astate machine is a function with a memory.andM;Most modules or collections of modules behave as state machines.andP;  Designing aprogram as a state machine promotes the use of abstraction, where interfacesare specified before modules are fully elaborated, and data hiding.andP;  Forexample, a state machine implemented as an Ada package would specify theinputs, outputs, and a private set of state data, accessible to users of thepackage only by invoking one of its collection of procedures.andP;  In summarythen, the contract team re-engineered the design of the applications as a setof communicating state machines.andP;  The team used an Ada process designlanguage to record the design.andP;  Using Ada as a design language turned out tohave several advantages.andP;  Ada encourages both the use of abstraction and datahiding, so it is a good fit for using the concept of state machines; both theFAA and the contract team learned Ada and its characteristics, at least as atool for design; the FAA is committed to using Ada on its large projects, andthis project increased their confidence; Ada provided a common vernacular fortalking about the design and the design process.andM;Three months after the project began, the Level-1 Ada packages werecompletely specified.andP;  All state machine interfaces, state data (the dataowned by the Level-1 package), and CDR records were classified by type.andP;  Thegateway package was specified.andP;  The successor packages, the Level-2 Adapackages that would decompose from Level-1, were identified.andP;  All recordingwas inspected.andM;Incremental implementation.andP;  About a month later, the first of three softwarebuilds was completed and running.andP;  It included the support software, the CDRconversion program and the CDR editor, the on-line platform (including MVS,RTX, the Pascal/VS runtime support), the application control servicesinitialization/termination, timing control, message control), and theapplication gateways.andP;  The complete system structure was in place.andP;  The firstbuild verified that records could be read from the converted CDR file andthat messages (internal work) could be transmitted between tasks.andM;The Level-2 design (the full elaboration of the applications in the Adadesign language) and the conversion of Ada to Pascal/VS proceeded in stepwith the build plan.andP;  The second build contained all the applications excepttracking and parts of keyboard processing, both of which were completed inthe third build.andM;Each Level-2 Ada package was inspected after it was completed and thenconverted to Pascal/VS.andP;  In writing the Pascal/VS code, the applicationprogrammer would use the Ada, the ULTRA, the ULTRA coding specifications, andthe database dictionary to ensure that the re-engineering resulted in afunctionally equivalent system.andM;The second and third builds were elaborations of the first.andP;  No structuralchanges were made to the system after the first build.andP;  The applications werelaid into the system as they became available, and then verified by thesoftware integration and test team.andP;  Testing.andP;  During software integrationand testing, formal error reporting and correction procedures andconfiguration control procedures were practiced, just as they would be on alarge-scale development project.andM;Each build was tested at the unit and system level.andP;  Pascal/VS providedexcellent debugging facilities; most modules ran in the system environmentwithout error.andP;  System testing was performed under vm/spHPO and thennatively, with MVS running directly on the processor.andP;  Not allowing enoughtime to test natively was a difficulty uncovered in the first demonstration.andO;Errors were masked in the virtual machine environment.andP;  One of the advantagesof transporting software, over inventing it, is the cost-effectiveness oftesting by comparison.andP;  Because the source system and re-engineered systemwere functionally equivalent (with predetermined allowances), testing provedto be inexpensive and incisive.andP;  The outputs of the re-engineered system werecompared with the outputs of the source system.andP;  Since both were driven bythe same inputs, errors showed up as markers (discrepancies) rather than asthe object of human evaluation and judgment, the reliability of which dependson many complex factors such as interpreting requirements, training, andexperience.andM;The resultsandM;The contract team completed the re-engineering of the New York TRACONapplications software and successfully demonstrated its functionalequivalence in nine months.andP;  The budget was met.andP;  The team gave a finalpresentation and demonstration in May 1987.andP;  The demonstration was givenusing an FAA-provided input file, containing the recorded output of a thencurrent run of the New York TRACON system.andP;  The FAA and the contractorscompared the output recorded from the demonstration run with the New YorkTRACON generated output and found no unanticipated discrepancies.andP;  Theanalysis showed that the re-engineered tracker was functionally equivalent tothe source original.andP;  The digitized radar and track data blocks steppingacross the projected airspace on the modern situation display gave impressivevisual evidence that the system worked.andM;The team converted over 53 000 lines Of ULTRA tO 83000 lines of Pascal/VS (62percent comments).andP;  The team developed 340 Pascal procedures.andP;  Onehundred-and-fifty-six (156) procedures, mostly in tracking, were implementedwith no deviations from the original ULTRA.andP;  The Pascal/VS was converted from47 000 lines of Ada process design language, including Level-1, Level-2, andcommentary.andP;  The source code ratio Of ULTRA to Pascal/VS, without commentary,was 1.6:1.andP;  The team identified and documented 58 design issues; all wereresolved within a week.andP;  There were 78 errors found and corrected duringsoftware integration and testing.andM;ConclusionsandM;The authorized logical conversion and demonstration of more than a third ofthe New York TRACON software, from an UNIVAC IOP ULTRA architecture to an IBMSystem/370 architecture, coded in Pascal/VS, is sound evidence that real-timesoftware is transportable, even if the environments of the source and targetsystem are markedly different.andM;In the final report delivered to the FAA the following factors wereidentified as key contributors to the success of the project:andM;* The software development environment, including the laboratory and softwaretools, was available shortly after the project started and was easy to learnand use.andM;* The team used a consistent and proven set of development methods andfollowed the standard software development life cycle, including requirementsanalysis and architecture, two levels of design, incremental software builds,design and code inspections, and an independent software integration and testteam.andM;* The software architecture was formally recorded.andM;* A complete data dictionary mapped ULTRA variables to the re-engineeredsystem.andP;  The on-line applications were designed as independent items, with noglobal data, with precisely-defined interfaces, and without embeddinginformation about their operating environment.andM;* Early in the project, the system inputs were converted to System/370format; the input records were defined as Ada data types to ensureconsistency throughout the entire software system (the CDR editor, forexample, used the same data types as RETRACK).andM;* The software was re-engineered in Pascal/VS, which made the transition fromthe Ada process design language easy, and, because of its rules for datatyping and program construction, Pascal/VS code proved to be reliable.andP;  Themost significant problem, because of the tight schedule, was the short timeallotted to test the system, in its final demonstration environment.andP;  Thiswas overcome by working considerable overtime.andP;  At that, there were latentfaults and errors, discovered after the final demonstration.andM;The advantages of re-engineering a software product or system, overreinventing it, are significant.andP;  Reengineering avoids 1) the effort of, andthe errors that accrue from, developing new engineering requirements andfunctional specifications, and 2) the effort of full-scale verification andvalidation, the very activities Sneed found so expensive.andP;  In short,re-engineering takes advantage of the profound effects of evolution.andP;  Itpreserves the functional behavior of a system that had been specified,designed, implemented, repaired, enhanced, verified, validated, and mostimportantly, used over years, while improving its quality.andP;  The cost, asdemonstrated by this project, need not be prohibitive.andM;AcknowledgmentsandM;The performance of the contract team was outstanding, as was the commitmentand cooperation of the FAA and their system integration contractorMartinMarietta.andP;  The FAA program manager, Dick Bock, deserves specialrecognition for his support and encouragement throughout the project.andP;  ArtSmock from Martin-Marietta was particularly helpful in providing informationabout the New York TRACON system.andP;  The work of each member of the team wascritical; in that sense every participant made an outstanding contribution tothe success of the project: from Data Transformation Corporation-BobBosworth, Marie Brown, Annette Cabbell, Wai Cheung, Ben Dennis, Bill Earley,Hussein-Khomassi, Eugene Liberman, Stan Mead, Andre Small; from IBM-DickAllardyce, Larry Boulia, Stuart Cramer, Jeff Dollyhite, Austin Gallow, ConnieHayes, Stephan Landau, Michielle Looser, Michele Ichniowski, Lana Massung,Margaret McCandless, Barb Morten, Bob Scheuble, Richard Wei; and fromPailen-Johnson Associates-Tom Baxter, Lalitha Bhat, Clarke Thomason, StephenHall, Michael Gandee, James Atkinson, Marvin Sendrow.andP;  System/360,System/370, and MVS/XA are trademarks of International Business MachinesCorporation.andM;ULTRA, UNIVAC, and Sperry are trademarks of Unisys.andP;  dBASE III is aregistered trademark of Ashton-Tate Company.andO;</TEXT></DOC>