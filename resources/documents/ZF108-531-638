<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-531-638  </DOCNO><DOCID>08 531 638.andM;</DOCID><JOURNAL>PC Week  June 11 1990 v7 n23 p29(1)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1990.andM;</JOURNAL><TITLE>Should serious applications be labeled 'use at your own risk?'andO;(robustness and stability of computer software)(Cast in Code )(column)</TITLE><AUTHOR>Coffee, Peter.andM;</AUTHOR><SUMMARY>High-quality computer programming languages and tools areeffective only when used properly, and many are prone to misuse.andO;Those that offer maximum performance usually demand considerableskill from the user, while those that are easy to use correctly donot perform as well.andP;  Spreadsheets let users express themselvesfreely despite the prevalence of user mistakes.andP;  Decisus' BusinessWits spreadsheet attempts to prevent user error by providing astructure for variables and hiding formulas, functions andprograms from the user.andP;  It is less easy to approach than aconventional spreadsheet but lets experts create knowledgeprograms that have already been debugged.andM;</SUMMARY><DESCRIPT>Topic:     Software packagesSoftware DesignUser BehaviorSoftware QualityProgram Development Tools.andM;</DESCRIPT><TEXT>Like Frankenstein's monster, a metaphor can turn against its creator.andP;  Thereaders of this column hold strong opinions of their own and have the wit toexpress them with vigor, even turning my own words against me; the electroniclinks of the PC Week Extra! on-line service and MCI Mail make it easy forthem to strike while the ire is hot.andM;Recently, for example, reader Rudyard Merriam took me to task.andP;  I hadcontrasted the delicacy of the C programming language against the robustnessof COBOL and Ada; I suggested that C was like a home-workshop tool,lightweight and compact but difficult to maintain, while the latter languageswere like industrial equipment, massive and ugly, but standing up to wear andtear.andM;&quot;You missed another class of tools,&quot; said Merriam.andP;  &quot;To continue the analogy:the craftsman's tools used in the precision or model shop.andP;  Tools that aremore akin to the surgeon's scalpel.andP;  That's where C originated and where itreally is best.&quot;andM;He's right, of course.andM;(Though it was just such a craftsman's tool that took the eyesight of youngLouis Braille, later the inventor of the raised-dot reading system that bearshis name.andP;  In trying to imitate his leather-worker father, he found the sharpinstrument more than he could handle.andP;  Not all such accidents lead to suchuseful consequences.)andM;Merriam, however, raises a larger question for software in general: Whereshould it strike the balance between providing maximum performance (whilerequiring considerable skill) and providing ease of proper use (perhaps atthe expense of performance)?andM;Spreadsheets, for example, are notorious for ease of misuse.andP;  Dozens oftutorials have fruitlessly warned against common errors, such as adding anitem to a column in a way that fails to reflect it in the total.andM;But end users like spreadsheets for the same reason that programmers like C:Each provides freedom of expression, letting you develop ideas in whateverway seems natural.andP;  That's an important benefit.andM;We also see variations on the spreadsheet that try to give the same kind oferror prevention to end users that COBOL and Ada offer to programmers.andO;Business Wits, for example, from Decisus, will appear in our review ofdecision-support tools on June 25th; its &quot;work sheets&quot; are essentially aninput/ output channel, providing a structure for variables, but not for theformulas that manipulate them.andM;Uncovering Hidden FeaturesandM;The program's modular architecture wraps functions and programs around thosework sheets, doing things out in the open that often get buried in theunderground of conventional spreadsheets.andM;This makes Business Wits harder to approach than a simple, do-anything gridof general-purpose cells, but it also makes it easier for experts to developand distribute debugged pieces of knowledge about how to do certain kinds ofanalysis.andM;Statistics, risk analysis, queueing theory and other disciplines are vital tocompanies striving to minimize inventories, maximize efficiency and improvetheir responsiveness to the customer.andP;  We need structured tools that make iteasy to create and distribute reliable aids to doing these things, as well asflexible tools that let you do them easily if you already know how.andM;This need is not limited to quantitative tools; users also need, for example,presentation aids that offer help in laying out charts.andM;Wouldn't it be nice if you could key in the size of the screen, the size ofthe room and the size of your audience, and automatically have your chartingtool select a font and set limits on the amount of text on each chart?andP;  Inevery area, there are opportunities for software to embed this kind ofknowledge as well as raw, undirected features.andM;Yes, you'd have to learn to use that knowledge.andP;  Yes, the built-in guidelinesmight make it clumsy to do something unusual.andP;  Yes, the software tool kitneeds scalpels as well as safety razors.andM;But it's up to users, and especially up to those who support them, to makesure that a balance is maintained.andO;</TEXT></DOC>