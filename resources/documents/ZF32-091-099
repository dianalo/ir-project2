<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-091-099 </DOCNO><DOCID>11 178 863</DOCID><JOURNAL>DBMS  August 1991 v4 n9 p24(3)* Full Text COPYRIGHT Mandamp;T Publishing 1991.andM;</JOURNAL><TITLE>PL/SQL and SQL Plus. (using code blocks) (Desktop Oracle)(technical)</TITLE><AUTHOR>Roti, Steve.andM;</AUTHOR><SUMMARY>Using Oracle's procedural transaction processing language, PL/SQL,code blocks can be used in SQL Plus command files.andP;  Detailed arethe procedures and commands required to utilize PL/SQL code blocksto broaden the functions of SQL Plus and any embedded structuredquery language (SQL) precompilers.andP;  The most useful aspect ofusing PL/SQL is in the area of batch processing, where a programinputs data from one set of tables and outputs it to another set.andO;Detailed are various aspects of using code blocks efficiently,including batch processing, using an execution log and combiningdifferent commands.andM;</SUMMARY><DESCRIPT>Product:   SQL*Plus (Data base management system) (Usage).andO;Topic:     TutorialData Base Management SystemsStructured Query LanguageBatch ProcessingType-In Programs.andO;Feature:   illustrationprogram.andO;Caption:   Creating and populating example tables. (program)Batch processing. (program)Execution log. (program)andM;</DESCRIPT><TEXT>Oracle's procedural transaction processing language, PL/SQL, can ably writetriggers in SQL*Forms 3.0, as I've discussed in previous columns.andP;  ButPL/SQI:s capabilities extend beyond that to broaden the functions of SQL*Plusand any of the embedded SQL precompilers such as Pro*C.andP;  In this and nextmonth's columns, I'll focus on the ins and outs of including PL/SQL blocks inSQL*Plus command files.andM;A Batch Processing ExampleandM;By far the most valuable use of PL/SQL in SQL*Plus is in batch processing,which for our purposes can be defined as a program that takes input data fromone or more tables and writes output data to one or more tables.andP;  The inputtables may or may not be the same as the output tables.andP;  Because PL/SQL doesnot have any user interface commands for reading or writing the screen, it isdifficult to write interactive PL/SQL programs in SQL*Plus, so noninteractiveor batch processing is the best fit.andM;To illustrate the batch nature of PL/SQL, consider a simplified credit cardprocessing example in which purchase and payment transactions contained inone table are applied to customer accounts contained in another table.andP;  Thepseudo code for such a system is as follows:andM;repeat until all transactions processedandM;get a transactionandM;validate account and type of transactionandM;if purchase and within credit available, post to accountandM;if payment and within amount of credit used, post to accountandM;mark transaction as postedandM;Obviously, a real credit card system would be much more sophisticated, butthis example will suffice to demonstrate many of the features of PL/SQL.andM;Listing 1 contains the SQL statements used to create and populate thetransaction and account tables for our example, as well as an error table torecord problems encountered while processing transactions.andM;Listing 2 contains the block of PL/SQL code that performs the credit cardbatch processing function.andP;  The DECLARE section sets up a cursor that will beused to get one transaction at a time from the transaction table, defines twovariables that will be used to hold data retrieved from the account table,and creates three user-defined exceptions to handle error conditions that mayarise while processing transactions.andM;The BEGIN statement indicates the start of executable PL/SQL commands for theblock.andP;  The first statement in the block is a FOR loop, which is executedonce for every row returned by the cursor trans.andP;  Within the FOR loop, thecolumn values for the current row are accessible through the name t; forexample, the amount column is referenced as t.amount.andM;After the FOR, an inner block is started to allow exception handling on arow-by-row basis.andP;  The SELECT statement retrieves the amount of credit usedand the credit limit for the current account into PL/SQL variables; if theaccount is not found in the accounts table, a NO-DATA-FOUND exception isautomatically raised and control is passed to the EXCEPTION portion of theinner block.andP;  For a valid account, the transaction is processed based on itstype: 'P' for purchase or  'C' for credit/payment.andP;  Any other type oftransaction causes the user-defined exception invalid-transaction-type to beraised.andP;  Purchase transactions are compared to the amount of credit availablefor the account.andP;  Purchases within the available credit cause the purchaseamount to be added to the credit-used figure in the account table; oversizepurchases raise the purchase-too big exception.andP;  Similarly, credittransactions are compared to the amount of credit used and either the creditamount is subtracted from the credit-used figure or the payment-too-bigexception is raised.andP;  If the transaction was processed successfully (that is,if no exceptions were raised), the current transaction is marked as postedand the FOR loop retrieves the next transaction to be processed.andM;If an exception was raised, the appropriate exception handler is run and arow is inserted in the error table; then the inner block returns control tothe outer block where the FOR loop retrieves the next transaction.andP;  Note thatthe inner block is necessary to be able to handle exceptions on a row-by-rowbasis.andP;  If there were no inner block and the exception handlers were in theouter block, the first exception would return control from the outer block toSQL*Plus, terminating the program before all transactions were processed.andO;Finally, after the FOR loop retrieves all of the transaction rows, the commITmakes the changes to the accounts table permanent and the END terminates theouter block.andM;Listing 3 shows a spooled log of the execution of this batch processingexample.andP;  First, the initial contents of the accounts, transactions, anderrors tables are displayed using the SQL SELECT COMmand.andP;  Next, the PL/SQLblock, stored in an ASCII file named Trans.sq1, is executed using theSQL*Plus @ command.andM;Then the resulting contents of the three tables are listed again.andP;  You cansee that the first three transactions were successfully posted to theaccounts table, changing the credit  used column for both accounts.andP;  The nextfour transactions were not posted because they caused exceptions to beraised; the error messages generated by the exceptions are shown in theerrors table.andM;Combining CommandsandM;Although blocks of PL/SQL code can be included in SQL*Plus command files, itis not possible to use SQL*Plus commands within a PL/SQL block.andP;  This isbecause the two languages are processed by different parts of the Oraclesoftware.andP;  A typical sequence of statements in a command file might be asfollows:andM;1.andP;  SQL*Plus commands (including SQL commands)andM;2.andP;  PL/SQL blockandM;3.andP;  SQL*Plus commands (including SQL commands)andM;The reason for using SQL*Plus commands is to accept input from the user andto format output.andP;  The reason for using SQL commands outside of the PL/SQLblock is to display data on the screen - PL/SQL does not have any screenoutput capabilities.andM;In next month's column, I will discuss the use of SQL*Plus substitutionvariables to parameterize PL/SQL blocks, as well as ways of displaying theresults of PL/SQL computations for users.andM;Steve Roti is the owner of Olympic Software, a database consulting firm inPortland, Ore.andP;  He is an active user of SQL DBMSs such as Oracle, Ingres, andSybase on VMS, UNIX Macintosh, and DOS systems.andP;  Steve can be reached onTelePath or via MCI Mail, box SROTI.andO;</TEXT></DOC>