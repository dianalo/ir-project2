<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-147-356  </DOCNO><DOCID>08 147 356.andM;</DOCID><JOURNAL>UNIX Review  Feb 1990 v8 n2 p70(9)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Visions of grandeur? (the future of hypermedia)</TITLE><AUTHOR>Glushko, Robert J.andM;</AUTHOR><SUMMARY>A view of the future of hypermedia as a seamlessly integratedsystem of text graphics, voice and other information sources ispresented and the problems which must be overcome before it canbecome a reality are discussed.andP;  These problems include the needto develop on-line support, manuals and technological support,design issues, dealing with multidocument hypertexts, andmanagement issues such as creation versus conversion ofinformation, installed base inertia, and legal barriers.andM;</SUMMARY><DESCRIPT>Topic:     HypertextHypermediaFuture of ComputingIntegrated Systems.andM;</DESCRIPT><TEXT>We all can imagine a typical programmer sitting at a cluttered desk with aworkstation as its centerpiece.andP;  Despite the job title &quot;programmer&quot;, he orshe probably spends less time programming than monitoring information ofvarious types from diverse sources.andP;  Although programmers can read programsand programandM;documentation  from workstation screens, they can almost always do betterwith hardcopy listings and manuals.andP;  They skim trade and professionaljournals, look up algorithms in library books, and send and receiveelectronic mail within their companies and across the country using variousnetworks.andP;  Many programming resources are kept scattered on desks and crammedin bookcases, from books, journals, and magazine articles to software manualsand computer printouts.andP;  Valuable contents of such printouts may vary-somelist code already written for a current project, some contain code from pastprojects.andP;  Some programmers keep code from other projects completed in theircompanies to examine for relevant code fragments.andP;  In addition, some usefulcode and documentation may reside on individual programmers' workstations,some on central company computers.andM;Now, in contrast to this scenario we can envision a programmer using an&quot;intelligent hypermedia workstation&quot; that provides comprehensive and customsupport for managing the information over.andP;  load of the software engineer.andO;Imagine how different the workplace and activities of the programmer might bewith such a workstation.andP;  Almost all the information the programmer needswould be readily available in electronic form.andP;  Every program that runs onthe workstation would be supported by on-line help and documentation that theprogrammer could invoke &quot;seamlessly&quot; from within the application, with apresentation designed for easy reading on the screen.andP;  No longer would theprogrammer need to rummage through computer directories and paper printoutslooking for code to re-use, since he or she could browse the &quot;traceabilitymatrix&quot; from any project to locate all the generic code it uses.andM;When the programmer found the source code, he or she could also review theproject's requirements specs and user documentation, since these relatedforms would always be linked together.andP;  In addition, the programmer couldfollow links from the code to the annotations or application notes made byother programmers who had used the module.andP;  The ability to append typed textor spoken voice notes on any kind of information when it seemed useful wouldbe standard functions provided by the hypermedia workstation, and theprogrammer could be confident that he or she could retrieve these annotationswhen necessary.andP;  Finally instead of browsing through an endless stream ofjournals and magazines &quot;by eye&quot;, our programmer could browse, search, andmake notes on them by computer, since the company he or she worked for wouldsubscribe to monthly periodicals services on CD-ROM that could be accessedover the local-area network from a workstation.andM;Who could resist this hypermedia vision in which text, graphics, voice, andother diverse information sources are easy to use-&quot;seamlessly integrated&quot; bythe links that connect them-and entertaining to explore? In an accompanyingarticle in this issue, Norm Meyrowitz lays the groundwork for this seductivefuture for desktop and workstation computing by proposing ways to makesupport for hypermedia a fundamental capability of operating systems, just asthe &quot;cut-and-paste&quot; clipboard is a unifying mechanism today [1].andP;  Suchsystem-level support would create an open hypermedia architecture andeliminate the walls that surround the current generation of hypermediaapplications.andM;But how close are we to making this hypermedia vision a reality? Are wereally on the verge of a significant flood of exciting hypermediaapplications? I don't think so.andP;  While an open hypermedia architecture wouldrepresent a significant breakthrough, it is only one of several hard problemsthat need to be solved before hypermedia makes good on all its promises.andM;While the essence of hypermedia is simple to grasp-computersupported linksamong non-contiguous information units forming generalized and multimediafootnotes or  cross-references [2]practical hypermedia applications are hardto build.andP;  Much of what makes hypermedia difficult is conceptual rather thantechnical, so the challenges cannot be overcome solely by architecturalinnovations.andP;  For example, you have to decide what kinds of information unitsshould be made, how big each unit should be, what kinds of links should bemade, or whether they should be made.andP;  These are fundamental theoreticalquestions that researchers are grappling with [3], yet it is the designers ofpractical hypermedia applications who must make these decisions, or worse,must accept the arbitrary (and widely differing) answers already designedinto the current generation of tools for hypermedia software.andM;In addition to the theoretical challenges they face, hypermedia developersmust address a host of practical issues, including the limits imposed onhypermedia functionality by the installed base of computer hardware andsoftware they are developing for, schedule and budget crunches thatnecessitate the conversion of existing printed information, and legaluncertainties.andM;I will illustrate some of these design dilemmas and constraints as I considersome potential hypermedia applications that might contribute to theintelligent hypermedia workstation described earlier.andP;  I will focus on twosimple applications that are probably of particular interest to readers ofUNIX REVIEW-on-line help and on-line reference manuals.andP;  But first, I willexplain in general terms what makes a good hypermedia application.andM;The technical and trade literature is brimming with reports of actual orplanned hypermedia applications.andP;  These include those that provide hypermediafacilities for on-line help systems, reference manuals, encyclopedias,product catalogs, brochures, education and training systems, archivalliterature, software engineering environments, and even creative writingcourses.andM;In spite of this great diversity, there is a set of common characteristicsthat good hypermedia applications should have:andM;* Units.andP;  Hypermedia applications contain large numbers of loosely relatedmultimedia information units.andM;* Relationships among units.andP;  The information units are related to oneanother in some way-often, hierarchically.andP;  In printed formats, theserelationships are manifested either as collections of entry pointers to theinformation units or as interconnections among the information units.andO;Typical entry points into a string or strings of related units are tables ofcontents, &quot;back-of-thebook&quot; indexes, glossaries, or time-lines; typicalinterconnections are cross-references, external references, or footnotes.andM;*Non-sequential usage.andP;  Users of the information have a greater need fornon-sequential than for sequential access to the information, typically on anintermittent or unpredictable basis.andP;  The information that constitutes the&quot;right answer&quot; is often easier to recognize when it is encountered than it isto specify in advance.andM;Note that while good hypermedia applications share some features with moretraditional database applications hypermedia applications themselves mayrequire databases), the latter are generally text-only, and tend to containmore heterogeneous units that are related in ways that can be specified inadvance as relations in the database scheme.andM;On-line help and on-line reference manuals possess the three basiccharacteristics of good hypermedia applications.andP;  I will discuss each fromthree perspectives-their past development, their hypermedia futures, and theleading edge today.andP;  We'll see why it will be difficult to reach thehypermedia vision from where we are now.andM;On-line Help.andP;  On-line help has been implemented in many different ways sincesome well-intentioned programmer embedded semi meaningful error messages insoftware.andP;  But on-line help embedded in an application is frozen with theapplication, and requires a potentially large number of separate  helpmessages.andP;  What's more, its development is often left up to the programmer,who sometimes is not the best person to decide what to say or how to say it.andM;An obvious alternative to embedding on-line help is gathering all theseparate help messages from the application software into helptext librariesthat exist at either the application level or the system level.andP;  But thistechnique often creates the temptation to make the online help text moregeneral so that it can be re-used like contents of other libraries.andP;  Inaddition, unless the help text is arranged in some kin of meaningful network,collecting it in a single help library doesn't make finding help informationany easier for users than it would be if they were referring to hardcopy.andM;Although building a separate help system with a carefully designedorganization and user interface solves some of the problems inherent in theembedded on-line help or help-libraries schemes, it creates others.andP;  If usershave to exit an application or otherwise assume a more general context inorder to get help, much of the benefit of the help can be lost, no matter howeasy the help system is to use.andM;Hypermedia has the potential to provide both the fine granularity and contextsensitivity possible with embedded help, and the ease of development,maintenance, and use associated with a separate help system.andP;  Users should beable to access on-line help at any point in an application (they might evenneed help understanding its error messages or dialog boxes!), but it isimpossible for system developers to identify in advance all the possiblecontexts in which help information might be needed.andP;  With open andgeneralized linking capabilities, however, it would be possible for systemdevelopers to come close.andP;  With such a system, users would be able to jump tohelp information from anywhere in an application, to browse or search for theinformation they need.andP;  Help information would be available in a much widerrange of media, including spoken or videotaped application hints from thelocal guru.andP;  Users will be able to specify the level of help detail theyrequire, ranging from concise synopses to step-by-step tutorials.andP;  Thisspecification of detail would not be accomplished by selecting discreteexpert or novice modes in the help system, but by interactive specificationof each help unit as it is viewed.andM;Finally, the help system would no longer be static.andP;  Users would be able toleave text or voice notes on help information, and the system would be ableto retrieve and display the &quot;trails&quot; and annotations made by users on priorvisits when they return.andP;  In addition, users could create their own linksfrom any event or object in an application to the help system-either toexisting help information or to information they insert.andM;The Sun 386i hypertext help system appears to be at the leading edge ofcurrent on-line help designs [4].andP;  Users can invoke the help system from anyapplication for &quot;spot help&quot; or explore the help system systematically fromits own hierarchical table of contents.andP;  The table of contents can beexpanded and contracted selectively to show details only where the user wantsthem.andP;  Hundreds of hypertext cross-references support rapid browsing of helpinformation.andP;  The basic help system can be extended via &quot;hand crafting&quot; byusers and administrators, and contains limited capabilities for launching andcontrolling applications or shell scripts.andP;  This latter feature makes itpossible to retrieve voice or video help.andM;On-line manuals.andP;  OnlineandM;reference manualsandM;have come a long way since the earliest days of the UNIX man command which,to save scarce disk space, made users wait at retrieval time while thedesired manual entry was formatted.andP;  As our disks grew larger and we grewwiser, we recognized the benefits of treating manuals more like the softwarethey were written to support, and started using software tools to supportdocument development, delivery, and online use [5,6].andP;  Soon, many largeprojects were using something akin to SCCS/RCS and makefiles for documentversion control, configuration management, and the automatic recompilation&quot;of documents when their components changed [7].andP;  Many second- andthird-generation man programs were written to support limited text-searchcapabilities, custom tables of contents for collections of man pages, andother useful features.andM;Nevertheless, many on-line reference manuals have two important limitationsthat derive from the same cause-namely, that they are merely thecomputer-readable sources of the printed versions.andP;  Though man pages forcommands are almost always highly structured, with a regular set of sectionsand sub-sections for NAME, SYNOPSIS, DESCRIPTION, and so on, most manualentries are displayed as single units of scrollable text.andP;  The secondlimitation is that extensive cross-references between entries cannot easilybe followed on-line.andM;Hypermedia design would eliminate the sharp distinction between on-line helpand on-line manuals, since the user could interrupt any application to lookfor either quick help or more detailed reference information; many of thecharacteristics of a hypermedia on-line help system, therefore, would alsoappear in manuals.andP;  Users who explicitly selected the on-line referencemanual would see a manual vastly different from the one they see today, bothin terms of support for hypermedia functions and with regard to the benefitthey can receive from the material that is currently contained in printedreference books.andM;In a hypermedia system, when the user selected an entry listed in the tableof contents or &quot;back-ofthe-book&quot; index, it would quickly appear on thescreen.andP;  The hierarchical organization of typical entries would appear as adynamic outline and users could expand only the sections needed.andP;  Crossreferences between entries could be followed rapidly and the implicitcross-references of glossary terms or filenames could be followed todefinitions or examples.andP;  Graphical maps showing the organization and linkstructure of the manual could be generated dynamically as needed, and theuser would be able to jump from one part of the manual to another byselecting its representation in the map.andP;  The handwritten margin notes inprinted manuals would be replaced with typed or voice notes, and the paperbookmarks and turned-down corners replaced by selectable lists of&quot;electronic&quot; bookmarks for important places.andP;  Since every example in theon-line manual would be linked to the software that generates it, any changesin the software would automatically update the manual.andP;  Finally, many of theexamples would be interactive and contain demonstrations or embedded trainingroutines.andM;We are probably closer to the realization of a hypermedia reference manualthan we are to a hypermedia help system, although no functioning prototype ofeither system runs in a production UNIX environment.andP;  Two development effortsunderway that stand out are the Document Examiner environment on theSymbolics workstation and the SuperBook research project at Bellcore.andM;The Document Examiner is a hypertext delivery system for the 8000 printedpages of software documentation for the Symbolics workstation [8].andP;  Itrequired years to convert existing documents into the extensive database of10,000 linked text modules.andP;  Although users can search or browse throughthese modules on-line with the support of a bookmark facility, they cannotchange documents or create new links in the manual.andM;The goal of the SuperBook project at Belleore is to make online informationmore usable by applying the results of research in information retrieval anduser interfaces.andP;  The SuperBook software constructs a &quot;smart&quot; index from thefull text of any given document.andP;  In addition, the SuperBook project ispushing the limits of automatic conversion of existing text to hypertext forUNIX systems by building a hierarchical outline viewer from the existingstructure of a document formatted using troff or the Scribe program.andP;  So far,this approach works well only for highly structured documents in these commonformats.andM;Hypermedia is a compelling idea, but it is easy to see that even indeveloping its obvious applications, such as on-line help and on-linereference manuals, we have a long way to go before we succeed.andP;  We are stillconfronted with several difficult problems with regard to technologicalsupport, design decisions, and product management.andM;Technological Support.andP;  While there is a proliferation of software forhypertext and hypermedia applications (most with names like Hyper-this andHyperthat), little is available for UNIX systems.andP;  And while many PC andMacintosh vendors are busily porting their programs at this very moment,porting this class of software will not solve the software-toolsproblem-regardless of the platform-because most of these programs are notwell-suited for commercial-scale development and information delivery.andM;Most hypermedia applications can be more appropriately characterized asmultimedia word processors, oriented toward hypertext and hypermedia as a newform of writing.andP;  They impose significant explicit or implicit constraints onthe kinds of information they can contain and how it can be linked togetherand accessed.andP;  These limitations may be acceptable for writers, but generallyprove fatal in situations where large amounts of existing information must beconverted to hypermedia form [10].andP;  Indeed, the basic metaphors of many ofthese programs-especially the card metaphor in HyperCard, clearly the mostsuccessful-were chosen to support new ways of structuring information, buttrying to use them to contain information that already has its own structureis like trying to put the proverbial square peg in the round hole.andM;Recently, progress has been made toward the development of an open hypermediaarchitecture and operating system support such as that proposed by Meyrowitz.andO;In the UNIX market, the Sun link service defines a client/server protocolthat enables connections between otherwise separate applications [11).andP;  Theseconnections make it possible for applications to achieve a degree ofintegration with other applications by letting them share information abouttheir constituent objects, even though the applications may originally havebeen developed independently.andM;Similarly, Microsoft Windows and Presentation Manager support a Dynamic DataExchange protocol with the goal of allowing separate applications to shareinformation [12].andP;  While both protocols represent significant steps, neitheris rich enough to support full hypermedia integration, and both areprogrammer- rather than user-friendly.andP;  Neither can be used to introducehypermedia functions into existing programs, but developers will surely learnto use these and related hypermedia support facilities  in  developing  newapplications.andM;Design Issues.andP;  Even if we could choose off-the-shelf software to implement ahypermedia design, we still have to come up with the design.andP;  Hypermediainformation is organized into units that serve as containers and asaddresses, but how big should such units be? Can a natural&quot; size be defined?andO;If you are converting an existing document to hypermedia form, what aspectsof its structure in printed form should be transformed to structure inhypermedia form? For a hypermedia reference manual, is each entry a separateunit, or is each of the subparts of each entry, like SYNOPSIS, DESCRIPTION,and EXAMPLES, a separate unit? Are the tables, figures, and graphics in yourdocument separate units, or should they be associated with a more importanttext unit? To complicate matters further, consider that the answers to suchquestions regarding a software manual may be different from the answers youwould get regarding an atlas, a parts catalog or a piece of music.andM;By definition, a hypermedia application contains links.andP;  Some of the links ina hypermedia manual are obvious to design because they are straightforwardtransformations -of the links in the printed manual entries, such as &quot;Seealso&quot; cross-references.andP;  But man of the links that arose in the era ofeveryman-entry-for-itself are too coarse to be useful (such as &quot;See Alsosh(l)&quot;).andP;  And it is much easier to design and implement links from one fileto another than from a point within one file to another point in a secondfile; more precise links come at a cost.andM;Once you have designed the links, how do you present them to users? There areabout ten ways that hypermedia applications do this, including textattributes like bold and italics (what if the existing document uses thesefont changes to mean something else?), boxes or reverse video around thelinked text, and changes in cursor shape.andP;  How many different kinds of linksshould there be? How many different ways can you invent to show links in theuser interface, and how many ways can your users reliably distinguish? Ingeneral, there are too few case studies and too few design rules of thumb inthe literature to offer much help to hypermedia designers.andM;Multi-document  Hypertexts.andP;  The on-line reference manual mentioned earliercontains many entries, but it is still just one reference manual.andP;  Yet a UNIXmanual points to many other documents-administrative manuals, tutorials,application notes, and so on.andP;  Many of these documents could usefully belinked to a hypertext UNIX manual, but what about the documents that each ofthem cites? How do we decide which of these other documents should be linked?andO;This question is more subtle than it may at first appear.andP;  We must considerwho the users are and the tasks they have in mind.andM;For example, most of us have both phone-books and software manuals on ourdesks, and both would be more useful if they were in on-line form.andP;  But thereare no good reasons for hypertext links between the phone-book and thesoftware manual because they simply don't complement each other.andP;  But aphone-book (especially the yellow pages) and a city map complement each otherwell-the map helps locate places listed in the yellow pages, and the yellowpages can provide details about particular streets or neighborhoods from themap.andP;  On the other hand, a thesaurus complements the yellow pages, but theyellow pages do not complement the thesaurus.andM;The point of this discussion is that not every document has usefulconnections to every other document, and that expensive and careful study ofpertinent document interconnections may be required.andP;  We don't have programsthat will link documents automatically or decide that they shouldn't belinked.andP;  Some of the obvious features (like shared words) that might beuseful in such programs probably wouldn't work.andP;  For example, what is thecommon link between &quot;New York&quot; and &quot;nickel&quot; and &quot;Springfield&quot;? The answer is&quot;Buffalo&quot;, but it isn't very useful.andM;Management Issues.andP;  If the technology and design barriers to hypermediaapplications weren't bad enough, there are still other challenges that mightbe lumped together as management concerns.andM;Creation vs.andP;  Conversion.andP;  This may sound like a religious issue, and in someways it is.andP;  In the ideal situation you would be able to create theinformation you needed for your hypermedia application instead of having toconvert existing information that was designed to be printed.andP;  You wouldn'tbe faced with figuring out the natural units and links in the existinginformation, and you would be able to select off-the-shelf hypermediasoftware tools that best supported the structure you had in mind.andM;Unfortunately, the real world rarely permits us the luxury of doing anythingfrom scratch.andP;  Usually, time and budget pressures are imposed by both yourown organization and your competitors, and sometimes it just doesn't make anysense to start over.andP;  Would we really expect to be able to create ahypermedia version of the Encyclopedia Britannica  from scratch by throwingaway  hundreds of years of work in  the printed version?andM;The challenge for hypermedia application developers lies in the fact thatthere are few tools that support the conversion of printed text intoHypermedia text.andP;  The current generation of Hyper-this and Hyper-thatsoftware mostly ignores the conversion problem.andP;  Careful analysis of thestructure of the existing material may make it possible to extract fromtypographic and semantic cues some of the relevant structures, but as anytool builder knows, custom analysis and translation programs can be expensiveto build.andM;Installed Base Inertia.andP;  Hypermedia applications like those depicted in theabove examples would surely require several MIPS of computing power, hundredsof megabytes or even gigabytes of storage capacity, workstation-sized screenswith special graphics hardware, digital signal processors, and othercapabilities.andP;  While some of us may already have some of that power on ourdesks, it is sobering to realize that there are still millions of dumbterminals and floppy-storage, PC-class machines in use, beside which thehypermedia vision seems like a cruel hoax.andP;  Though it may become technicallypossible to build the intelligent hypermedia workstation long before it iseconomically feasible to do it, it will be well into the next century beforesuch environments are commonly available.andM;Legal Barriers.andP;  Imagine that you have successfully installed a hypermediareference manual on your system, and that it is extremely usable andentertaining for your users.andP;  You want to make the system even better byintegrating information from the printed manuals for other software on yoursystem, music, and video clips.andP;  Optical  character  recognition (OCR)systems can convert the printed manual text, scanners can import the manualgraphics, and &quot;frame grabbers&quot; can copy video from a VCR.andP;  But you can't usethese technologies to enhance your hypermedia manual in this way because todo so would be illegal !andP;  You probably already know that having thetechnology that lets you use information owned by someone else doesn't giveyou the legal right to use it.andP;  Unfortunately, the most important legalbarriers facing hypermedia developers today do not involve such clear cases,but have to do with chaos created by the rash of &quot;look-and-feel&quot; copyrightinfringement lawsuits and similar claims for software patents [13].andP;  Thischaos has arisen because software has been defined both as a kind of&quot;literary work&quot;, which makes it copyrightable, and as a kind of machine,which makes it patentable.andP;  Who knows what kind of legal categorieshypermedia will be forced into? I think that the current legal analogies arewrong, but until they are corrected by new legislation, we will face majoruncertainties and liabilities as hypermedia developers.andM;Who could resist the hypermedia vision in which text, graphics, voice, andother diverse information sources are easy to use, &quot;seamlessly integrated&quot; bylinks with one another, and entertaining to explore? I can't-I'm trulyexcited by the possibilities hypermedia offers; but I have worked withon-line documentation, user interfaces, and now hypertext for over a decade,and my experiences have left me with a more sober view.andP;  Last year mycolleagues and I at Search Technology coined the phrase &quot;hypertextengineering&quot; to describe our work [14].andP;  The term reminds us that hypertextis difficult, and that careful, disciplined methods and an awareness of theinevitable constraints and tradeoffs are required to make the hypertextvision a reality.andO;</TEXT></DOC>