<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-676-433  </DOCNO><DOCID>09 676 433.andM;</DOCID><JOURNAL>Dr. Dobb's Journal  Dec 1990 v15 n12 p72(11)* Full Text COPYRIGHT Mandamp;T Publishing 1990.andM;</JOURNAL><TITLE>A database system for automating e-mail; storing, receiving, andcopying electronic messages. (Programmer's Workbench) (column)(tutorial)</TITLE><AUTHOR>Ohlsen, Chris.andM;</AUTHOR><SUMMARY>A message storage and retrieval system for managing the growingamount of electronic mail being sent and received is described,using MCI Mail and the Paradox database and engine as examples.andO;MCI Mail provides many advanced features in addition to sendingand receiving messages; Paradox has a library of 70 functionscallable from Turbo C or Microsoft C. The Paradox ApplicationLanguage (PAL) scripting language supports manipulation of theenvironment as well as Queries By Example (QBE), fast I/O andquick prototypes.andP;  After logging onto MCI Mail with atelecommunications program, all messages in the inbox are printedand stored to disk, after which the program logs off MCI Mail.andO;The text is then parsed by the database application into severalParadox tables, and the PAL script presents the information.andO;Responses and new messages are then parsed and uploaded to MCIMail.andM;</SUMMARY><DESCRIPT>Product:   Paradox (Data base management system) (Usage).andO;Topic:     Electronic Mail SystemsCommunications SoftwareTelecommunicationsSoftware DesignProgramming InstructionProgram Development TechniquesTutorialCommunications ManagementData Base Management SystemsApplications ProgrammingMCI Mail (Electronic mail system).andO;Feature:   illustrationcharttableprogram.andO;Caption:   Flow control diagram of MCI message system. (chart)Table types. (table)Sample scripts: (a) MCI.BAT, (b) GETMCI.SCR, and (c) SENDMCI.SCR.andO;(program)andM;</DESCRIPT><TEXT>The proliferation of electronic mail has become an accepted part of today'sworkplace.andP;  That's the good news.andP;  The bad news is that in many cases thesheer volume of electronic messages received demands some means of managingthem.andP;  This article presents a message storage and retrieval system just forthis purpose.andP;  For the sake of example, the system focuses on MCI Mail, awidely used electronic mail service, and is built around an off-the-shelfdatabase and engine, Paradox from Borland.andM;For those unfamiliar with MCI Mail, it is an electronic mail service thatlets you send messages to individual users (TO:) as well as to a long list ofusers CC:).andP;  There is an &quot;inbox&quot; for messages sent to you and an &quot;outbox&quot; tosave copies of messages you send.andP;  MCI also provides a number of advancedfeatures, including those which let you customize your electronic &quot;space&quot; andgain access to other services.andM;For its part  .andP;  the Paradox Engine is a database engine with a library of 70functions callable from Turbo C or Microsoft C. Paradox is a relationaldatabase that includes a scripting language called  PAL&quot; (Paradox ApplicationLanguage) that lets you write within Paradox to manipulate the environmentand perform Queries By Example (QBE), fast 1/0, and quick prototypes.andP;  Theinherent flexibility of Paradox and the Paradox Engine makes them ideal forcreating an electronic mail storage and retrieval database system.andM;Before delving too deeply into the system presented here, a quick overviewmight be useful.andP;  As illustrated in Figure 1, your telecommunications programlogs on to MCI and prints (and stores on disk) all messages in your MCIinbox.&quot; The telecomm program then logs off MCI.andP;  The resulting text file isthen parsed by the database application into several Paradox tables.andP;  The PALscript presents this information to you, allowing you to respond to a messageor create a new one.andP;  Next, the database application parses any responses inanother table back into a text file.andP;  Finally, the telecomm program uploadsthe responses and new messages to MCI.andP;  Table Structures To store MCImessages in a Paradox database, you need to develop a database structure.andO;This can be done with four tables: the Header, Route, Message, and Pendingtables.andM;The Header table, shown in Table l(a), includes subject, date received, andname of sender information.andP;  With MCI, there are two ways to contact anotheruser.andP;  You can use their &quot;user name&quot; (for example, john Smith or JSMITH) ortheir &quot;MCI address&quot; (for example, 555-1234).andP;  The MCI address is alwaysunique but the user name may not be; there may be many MCI users named johnSmith.andP;  (Therefore, if you send mail to a user name, MCI prompts you with alist of all users who have that name and their corresponding uniqueaddresses; you then select the correct john Smith.) However, because the goalhere is to develop an automatic system, you should use the MCI address.andM;Next is the Route table, shown in Table l(b), which contains the routinginformation for the message, with a complete list of all the TO: and CC:recipients.andP;  The program needs to include all the names if you respond to themessage.andP;  The Route table lists whether the addressee was included as a TO:or CC: and includes both the user's name and ID.andM;The Message table, Table l(c), is the message itself and uses a separaterecord for each line in the message.andP;  The Message# field links the previoustwo tables with this table.andP;  The Line# field allows you to keep the.fields inthe order that messages are received.andP;  The table is displayed in a sortedorder based on the Message# field and the Line# field.andM;Finally, the Pending table, shown in Table l(d), contains responses to beprocessed and sent to MCI.andP;  The first field is the Pending# field, whichlinks together all of the components of the response.andP;  The Action fieldcontains information such as TO:, CC:, Subject, and Filename.andP;  The firstthree strings are associated with the routing and subject matter of themessage.andP;  The Filename string, however, needs a bit more discussion.andP;  Sinceneither PAL nor C provides the means to edit a message easily, the PAL scriptruns an external editor.andP;  The Filename record contains the name of the ASCIIfile to be transferred as the body of the message.andP;  The Paradox EngineApplication The storage/retrieval application processes incoming text filesand puts the information into the Paradox tables for later use by the PALscript.andP;  After the PAL script has run, this application takes the pendingmessage information and translates it into a file that can be uploaded toMCI.andP;  However, you must first initialize the database engine, open thetables, and allocate the record buffers.andP;  Refer to the C program in ListingOne, page 104.andP;  (Listing Two, page 104, is the accompanying header file.)andO;startEngine( ) performs the initialization.andP;  A call to openTables() ensuresthe existence of a table by using the Engine function PXTblExist().andP;  if sucha table does not exist, then calls to PX7-blCreate() and PXKeyAdd() createthe table and indexes.andP;  Once these calls are completed, the tables are openedand record buffers allocated.andM;At this point, note that the PxCbeck() function defined in this module takestwo parameters: a location and an error code.andP;  The location is your currentplace in the program, and the error code is the return value from thefunction.andP;  This method is a quick and dirty way to trap errors.andP;  in caseswhere an engine function returns a value that we do not want to stop theprogram for, add the location to a switch statement that returns to thecaller.andP;  The calling code can then check PXLastErr() to determine if therewas an unacceptable error in the last call.andP;  An example of wanting to knowthe function's return value is PXSrchKeyo.andP;  If the key you are searching fordoes not exist, you do not want to abort the program but continue.andP;  Thelocation values are determined as follows: The first digit is the modulecontaining the code; the second is the function containing the code; and thethird is the specific call itself.andP;  Parsing incoming Messages The programchecks the command line for a filename to determine whether there are anyincoming files.andP;  if there is nothing on the command line, it does not need toprocess incoming messages.andP;  The program will outgoing message only if thePending table exists on the disk.andP;  The PAL script creates this table andplaces all of the outgoing message information in it.andM;To understand how the program parses incoming messages, study the layout of atypical MCI message in Figure 2 and the parser listed in Listing Three, page104.andP;  The first line of an MCI message contains the Date: string.andP;  You canignore anything that appears before this string in the text file.andP;  Theprogram reads the Date: string and parses it using strtok() to remove thecomponents of the date.andP;  it then converts these components into data theengine can use, using PX-DateFncode(), and adds it to the record for theHeader table.andP;  The next line of text is the sender information.andP;  The programparses both the user's name and MCI ID and adds them to the record.andM;The next block of information goes to the Routing table.andP;  The program usesgetTo( ) and getCC( ) to add the TO: and CC: lines to the Route table.andP;  Every1'0: and CC: line is read and parsed to remove the user's name and MCI ID,and the information is appended to the end of the Route table.andP;  Finally, theprogram reads the Subject line, parsing it and adding it to the record in theHeader table.andM;Once you have all the information for the Header and Route tables, you needto work with the message itself.andP;  The program reads the message one line at atime and posts it to the Message table with a unique line number and thecurrent message number.andP;  If the line starts with a Date: string, there isanother message to process.andP;  if the line starts with the Command: string,there are no more messages.andP;  Creating Outgoing Messages The send() function(see Listing Four, page 106) checks for and processes any outgoing messages.andO;The existence of the Pending table determines if there are any messages toprocess.andP;  The PAL script will create this table only if there is a reply to amessage or the user composes a new message.andP;  If there are no messages, thefunction returns.andP;  If there is a message, send() continues by opening thetable, getting the handles to the fields, and creating an index on the table.andM;The engine application now enters the main loop of the function, whichcreates the message script for the communications program.andP;  The first line,CR, creates a new message.andP;  Then the program addresses the message for boththe TO: and CC: fields.andP;  Next it adds the Subject: line.andP;  The applicationuses processMany() for each of these fields.andP;  It uses a string and thecurrent pending message number as parameters.andP;  The program adds these twofields to a temporary record and searches for them in the table.andP;  if it findsa match, it reads the record into the Engine's internal buffers, which pullout the desired field and append it to the text file.andP;  Then it searches foranother match.andP;  This continues until there are no matches, at which point thefunction returns.andM;The message itself is stored in an external file.processFile() gets the nameof the file from the Pending table, opens the file, and reads it line byline.andP;  As it reads each line into the program, processFile() writes out tothe message script being built.andP;  When the end of the file is reached, themessage file is closed and erased.andP;  send() again gains control and appends a /&quot; to the end of the message, which tells MCI Mail that the text of themessage is ended.andP;  send() then adds a blank line to skip through MCI'sHandling: prompt, and the &quot;Yes&quot; string is in response to MCI's Send: prompt.andO;Finally, nextPendNum()gets the number of the next pending function.andP;  if thereare no more messages pending, it sets the pendnum variable to 0.andP;  When theloop sees there are no more messages to process, it adds the string &quot;exit\ n&quot;to the end of the file, which logs the script off of MCI Mail.andP;  The Pendingtable (and all associated files) is removed from the disk.andP;  At this point,main() takes over again and closes all the open tables, and a call toPXExit() turns the engine off.andP;  The PAL Script Because PAIL cannot competeagainst your favorite word processor, the MCI PAL script can call an externaleditor to process the composed messages.andP;  The first line of the PAL script(see Listing Five, page 107) defines which editor (ED) is called.andP;  Make surethe word processor you select is working with an ASCII file without specialcontrol characters.andM;The script then confirms that the tables the engine application has createdactually exist.andP;  If one of the tables does not exist, the script displays afive second message on the screen, stating that you must run the MCI.EXEprogram before running this script.andM;Next, the script checks the forms to display the Header and Message tableinformation.andP;  if the forms do not exist, it will build them.andP;  (The Paradoxscript recording capability allows you to create these functions: just layout the fields in the order you want and write down the layout.andP;  Then, selectScripts/ Begin Record to record the steps.)andM;The Message table has MultiRecord views so you can display and scroll throughthe entire message.andP;  This form is linked to the Header form.andP;  The combinedinformation comprises the view of the individual fields.andP;  Notice that theLine# field is decreased to one character width and blocked out by selectinga color because the field is necessary for internal use only.andP;  You can changethe color selection to match your form display; this block of code iscommented in BuildMsgForms().andP;  The third field lets you view the headers ofthe messages currently stored and select the messages you want to see infull.andM;Next, an opening screen displays the name of the script and instructions forworking with the menus, and the main menu is displayed: inbox lets you view amessage, Compose lets you create a new one, and Quit exits the script.andP;  Youare prompted for verification if you select Quit.andP;  Viewing the inbox MessagesThe Inbox() function uses the form that was created to display the Headertable and lets you choose the message with which you wish to work.andP;  If thereare no messages to view, &quot;No messages to be viewed&quot; is displayed on the mainscreen.andP;  If you select Escape, you return to the main menu.andP;  if you chooseEnter, ViewMessage() selects the message the cursor is currently on.andO;ViewMessage() also uses one of the forms created earlier - the MultiTableform, which was developed with both the Header and Message table.andP;  TheMessage table form has a MultiRecord region that displays the message body.andO;You can use the arrow keys, PgUp, and PgDn to scan through the message.andP;  Ifyou want to view the previous or next message in the Header table, press F3or F4, respectively.andP;  These keys correspond with the Up image and Down imagekeys in Paradox.andP;  You can also press Escape at this point to return to themain menu.andP;  if you want to respond to the message, press Insert and thescript calls Respondo, which grabs the current header information about thesubject, message number, and sender.andP;  QBE performs a query on the Route tableto get all those who received the message, so they can be included in therepty.andP;  Several other fields are set up before pulling the informationreturned from the query.andP;  The Subject is added to the table with the RE:string appended to it to denote a reply.andP;  The filename added to the tablecontains the body of the message.andP;  The filename is a combination of thePending string and an extension of the Pending number in the table.andM;When these fields are set up, the script scans the answer table built by theprevious QBE.andP;  It adds all of the fields within the answer table to thePending table with the appropriate action, indicating a TO: or CC:.andP;  DO-IT!andO;saves all of the additions to the Pending table.andP;  Finally, the RUN BIGcommand calls the editor, thus providing the maximum amount of memory.andO;Composing a New Message Composing a new message is similar to responding to aprior message except that the information pulled from the Header and Routetables is provided by the user.andM;At least one TO: field is required to send a message.andP;  Therefore, the scriptforces you to input at least one field.andP;  After receiving the TO: fields, itprompts you for the CC: fields.andP;  There can be any number of CC:s on amessage.andP;  Finally, it prompts you for the Subject field.andP;  There can be onlyone of these, too.andP;  When all of the information is input, the modified tableis saved, and the editor is called with the RUN BIG command.andP;  PseudoCommunication Script and Batch File Now that you have the major players inthe application, the PAL script and the Paradox Engine application, you needsomething to tie them together.andP;  You can use a simple batch file (see Example1) to call everything, including the pseudo telecommunications package.andP;  Thebatch file simply needs to call the communications program with a script thatwill grab all of the available messages on MCI Mail.andP;  After it does this, itcalls the MCI.EXE program with the name of the capture file to parse andbuild the tables.andP;  Next, it calls Paradox to execute the MCI script.andP;  Itcalls the MCI.EXE application again to parse any responses the script maygenerate.andP;  Finally, it calls the communications script again to upload themessage that was created, and the upload file is deleted.andP;  The script filesare pseudo scripts that you can translate into whatever communicationspackage you are using.andP;  The GETMCI.SCR script in Example l(b) logs on to MCIMail and downloads all new messages, capturing the entire session to aninbox.Txt file.andP;  The SENDMCI.SCR script, in Example l(c) logs on to theservice and performs an ASCII upload of the file generated by the MCI.EXEprogram, MCI-SEND.TXT.andP;  The ASCII file creates the message, sends it, andlogs off the service.andP;  Conclusions Many enhancements could be built into thebasic system presented here.andP;  For one thing, the PAL script could be enhancedto support an address book that keeps track of users' MCI addresses, and thePAL script could add the Route table information to the Address table.andP;  TheParadox Engine application could also be enhanced to do communicationsinternally.andP;  it could dial up MCI, post the message, and receive new mail.andO;The program could be set to dial MCI early in the morning before work, andthe PAL script could be called so your messages are waiting when you getthere.andP;  Another possibility is a gateway that would allow many people to usea single MCI Mail account via private  mailboxes.&quot; To send a message to oneof these people, you could place additional addressing information (such asMBXTO: and MBXCC:) in the body of the message.andP;  This extends the applicationto a network.andP;  (LLISTINGS OMITTED)</TEXT></DOC>