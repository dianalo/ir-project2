<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-414-112  </DOCNO><DOCID>09 414 112.andM;</DOCID><JOURNAL>UNIX Review  Dec 1990 v8 n12 p24(6)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>CASE tool frameworks. (computer-aided software engineeringenvironment)</TITLE><AUTHOR>Fleming, Read T.; Wybolt, Nicholas.andM;</AUTHOR><SUMMARY>Integrated Project (or Programming) Support Environment (IPSE) isassociated with the concept of CASE tool integration.andP;  IPSE isimplemented on an integration framework with the goal ofintegrating tools, people and data into a customized extensiveenvironment.andP;  Productivity is theoretically improved whenindividuals and groups can concentrate on software engineering,rather than having to spend time with process details andprocedures.andP;  Politics and economics at work in an organization areas important to IPSE as technological concerns.andP;  Factors to beconsidered for the IPSE are software architecture and attributes,processes and work flow, approaches to integration, andstandardization.andP;  The integration framework provides theenvironment where disconnected software tools can communicate andshare data.andM;</SUMMARY><DESCRIPT>Topic:     Integrated SystemsSoftware MigrationComputer-Aided Software EngineeringStandardizationProgram Development TechniquesProgramming Support.andO;Feature:   illustrationchart.andO;Caption:   The conceptual architecture of an integration framework. (chart)andM;</DESCRIPT><TEXT>Computer Aided Software Engineering (CASE) tool integration means making thewhole tool environment greater than the sum of its parts.andP;  An acronym thathas become associated with this concept is Integrated Project (orProgramming) Support Environment or IPSE.andP;  An IPSE, in turn, is implementedon an integration framework.andM;The goal of an Integrated Project (or Programming) Support Environment is tointegrate people, tools, and data into a seamless, customized, and extensiveenvironment.andP;  This environment improves programmer and organizationalproductivity by allowing individuals and groups to concentrate on softwareengineering rather than process details; that is, the procedures necessary tomake software happen.andP;  In an IPSE, therefore, the whole environment isgreater than the sum of its parts.andM;The means through which an IPSE is built is called an integration framework.andO;A framework consists of the basic infrastructure (architectural andfunctional capabilities) that creates a common environment where separate,independent tools can be integrated using one or more techniques.andM;An IPSE, or populated framework&quot;[1] is a framework together with separate,independent products working together in concert.andP;  A populated IPSE isusually assembled by a tool integrator or sold as a package by an IPSE orplatform vendor.andM;Since IPSE has become a popular topic in the software development industry,we can make the following observations about an IPSE: an IPSE is the &quot;HolyGrail&quot; of most software project managers; there are a number of ways to buildan IPSE;  [2] and tool integration is necessary, but not sufficient, to havean IPSE.andP;  The IPSE has to live in the context of, and be accepted by anorganization.andP;  The last item illustrates an important, and often overlooked,concern: Politics and economics are at least as important as technology.andM;Historical Perspective.andP;  The early 1980s gave rise to an awareness of theneed for programming support environments.andP;  This awareness can be attributedto the publication of the Stoneman Report.[3] Stoneman described a publictool interface that defined a standard, publicly available interface offeringfacilities for building integrated tool sets and environments which would beavailable on a variety of platforms.andM;The structure Stoneman described, the Kernel Ada Programming SupportEnvironment or KAPSE provides database, communication, and runtime supportfunctions for Ada programs and MAPSE tools.andP;  The KAPSE is amachine-independent portability interface.andP;  The Minimal Ada ProgrammingSupport Environment, or MAPSE, provides a minimal set of tools which arenecessary for the development, and sufficient for the support of Adaprograms.andP;  Finally, the APSE, or Ada Programming Support Environment, areextensions to the MAPSE to provide broader support for applications.andM;Architecture and Attributes.andP;  The conceptual architecture of an integrationframework, is shown in the figure.andP;  The components of a framework may bedistributed throughout the nodes in a local area network.andP;  The common userinterface component gives the user a common look and feel for each tool inthe environment.andP;  This is a form of tool integration and is referred to aspresentation integration.andM;The integration agent component in the figure represents the applicationprogrammable interface (API) to the environment.andP;  It is the interface, orgateway, to that part of the environment that provides a set of functionsenabling tools to share data and communicate with one another.andM;The tool-data repository component represents the logical or physicalrepository through which tools share data and communicate information.andP;  Insome framework proposals, this is actually a common database of all tooldata, while in others, it represents links between information in separatedatabases.andM;Processes and Work Flow.andP;  A template for generic software development, orwork flow includes iteration through the following phases from the standardwaterfall model: requirements analysis, design, implementation, test,installation, and maintenance.andP;  [4] The activities that are performed bydevelopment managers and staff during these phases generally include:managing the project (plan, measure, communicate); maintaining documentationfor end users and developers; maintaining versions and configurations; andmanaging project/product contents.andP;  Different CASE tools in the softwaredevelopment environment automate one or more of the activities above.andP;  Thechallenge is to assemble the CASE tools into a cooperative entity.andM;IPSE Requirements and Attributes.andP;  Once we've identified the phases in thedevelopment process and the activities that implement each of thoseprocesses, we need to determine the attributes that are necessary for an IPSEto meet these requirements.andP;  It is generally agreed that the desirablecharacteristics of an IPSE will: cover all phases of development and support;support or connect with multiple disciplines (CAD, CAE, etc.); cover manyactivities (planning and controlling, product construction and deliverables,documentation, etc.); deal with multiple vendors and platforms; adapt to newand different technologies; adapt to existing organizational culture and workflows; be introduced incrementally; be serviced and supported; and will befast and inexpensive.andM;An IPSE is difficult to implement if you are attempting to give it even a fewof these characteristics.andP;  There are number of ways to build an IPSE and someof the approaches are described in the following sections.andP;  First, we willbriefly examine the reality of tool integration as it exists today.andM;Reality Check.andP;  In general, the integration between tools is loosely coupled.andO;Tools can share data via export/import mechanisms and they can provide acallable or programmatic interface.andM;Better integration is possible through a variety of techniques.andP;  Some of thebenefits of better integration are improvements in communication.andP;  Asprojects get larger, team members tend to spend more time on communications.andO;Clerical workloads, particularly for data entry and re-entry, can also bereduced because the information is easily shared and made available to otherinterested parties.andP;  The quality of the delivered product benefits byimproved consistency and conformance to standards.andP;  There is also anincreased potential for software re use through the creation and managementof code libraries.andP;  Finally, the ability to perform traceability throughcoverage and change analysis is easier to achieve.andM;Issues and Technologies For CASE Tool Integration.andP;  There are a number oftool integration issues that must be resolved.andP;  What system-developmentphases and activities can be covered? What choices are there for tools? Wheredoes the data reside? What kind of user interfaces are there? How do thetools communicate? How adaptable is the approach to new technology? Who doesthe integration? Who supports it? These are the most common questions.andM;A number of tool integration technologies have been proposed for CASE toolintegration.andP;  Each one of them seeks to provide a public tool interface thataddresses data exchange; data management; data relationship management; toolexecution, communication, and notification; security or access control;distribution in a network; user interface; and/or licensing.andP;  If furtherrefined, tool integration technology falls into two basic categories, controlintegration and data integration.andM;Control integration means that tools must be able to control other tools.andO;Control integration provides the capability to implement and enforcedevelopment processes or work flow.andP;  Data integration, simply, means thattools must be able to share their data with the outside world.andP;  In eithermethod, tools have to be able to initiate requests and accept requests,usually through some sort of detection, translation, and notificationmechanism.andP;  These requests are made through the integration agent (seefigure).andM;Approches to Integration.andP;  The following sections describe the approachesthat have been taken and proposed to implement these technologies forintegrating CASE tools.andP;  The pros and cons of each approach are alsopresented.andM;Monolithic Approach.andP;  The monolithic approach to CASE tool integration istypically a single-vendor, relatively closed environment that attempts toaddress most system-development phases and activities.andP;  The monolithicapproach generally provides coverage for the analysis, design,implementation, and planning phases.andP;  The choices as to what tools areavailable in the environment are limited to what the vendor includes.andP;  TexasInstruments' Information Engineering Facility [5] provides users with such anintegrated environment.andM;The data resides in a single database on a mainframe.andP;  It also resides inlocal databases on PCs.andP;  Because the tools and data exist in two places,there are two user interfaces-one on the PC and one on the mainframe.andP;  ThePC-based tools communicate through the mainframe database with batch updatesbetween PC and mainframe.andP;  We say that the environment is closed because itgenerally supports a limited number of methodologies and provides limitedtool selection.andP;  It restricts users to what the vendor/environment provides,and the initial investment is typically quite high.andM;There is generally seamless integration between the components of theenvironment, so users benefit from one-stop shopping and support.andP;  Becausethe integration is so tightly coupled, the introduction of new technology istypically more costly for the tool vendor to introduce and, therefore, isless likely to occur as quickly as in other environments.andP;  Finally, it iseasier to implement and enforce uniform development practices.andM;Integrating Multi-Vendor Tool-sets.andP;  The converse to the monolithic approachis to tie tools together, possibly from a diverse set of vendors, usingcommon databases, link managers, message switches, data interchangestandards, and/or common user interfaces, all of which are based on open,public interfaces.andP;  The costs to add new tools to the environment areincremental and the initial cost is usually low.andP;  Users select the tools inthe environment and, optionally, can change their minds.andP;  As a result ofthis, the environment is easily adapted to embrace new technology.andP;  However,tool vendors must agree and adhere to standards.andP;  In addition, someone has tobuild and maintain the IPSE.andM;Common Database Approach.andP;  In the common database approach, all tooldatabases are unified in one logical repository, for example, Digital'sCDD/Repository or IBM's Repository Manager/ MVS.[6] This approach is the mostcommon form of data integration.andP;  All tools share one (logical) database andcommunicate through that database using an agreed-upon interface.andP;  The dataof various CASE tools may or may not be actually stored in the database.andP;  Ifnot, then references to the actual data, or meta-data, is kept in thedatabase.andP;  The database provides a consistent versioning and configurationmanagement interface that all of the tools use.andM;The common database approach is very simple and is easy to administer andcontrol.andP;  Furthermore, the use of a common version and configurationmanagement mechanism by all tools makes traceability potentially easier todo.andP;  It is very likely, however, that current database technology will notsupport the probable sizes of the data to be captured, so data accessperformance will not be acceptable.andP;  Part of the performance problem may alsobe attributable to the inability to distribute the database in a network ofheterogeneous workstations.andM;If the data for the tools is stored in one database, and database integrityproblems arise, to whom does the user turn for help? The IPSE vendor? TheCASE tool vendor? The platform vendor? Support and maintenance issues canobviously become very complicated.andM;Finally, complete data integration in the common database approach mayactually be quite difficult for tool vendors to implement.andP;  Generally, thetighter the integration that is provided, the more difficult the integrationis to implement.andP;  The use of meta-data as an easy-to-implement alternative,has an interesting and not-so-obvious problem-synchronization of information.andO;For example, once the database is populated with meta-data, continued work onthe real data potentially invalidates some or all of the references to theactual data objects in the tools' own databases.andP;  Managing the meta-data thenbecomes a work flow problem.andM;Link Manager Approach.andP;  In the link manager approach, a set of explicitrelationships, or links, is maintained between objects which may reside inthe same or different databases.andP;  Tools can create, delete, follow links, andquery the link database.andP;  Sun's Link Service Facility and Brown University'sIntermedia system[7] are examples.andM;Using a link manager, a structure chart in an SA/SD tool can be related&quot; to apiece of source code in a configuration management system.andP;  The samestructure chart can be related to a task in a project management system whichis, in turn, related to a document in a desktop publishing system.andP;  As withthe common database approach, the link manager approach is conceptuallysimple.andP;  Potential problems with database size and performance remain atractable problem because the tool vendors retain control of their data.andP;  AnIPSE constructed using this technology is both easy to implement and ishighly extensive.andP;  As the size of the link database increases, potentialperformance problems may arise.andP;  Referential integrity in a distributedenvironment can also be a problem if a part of the network becomesinaccessible.andM;Message Switch Approach.andP;  The message switch approach provides a mechanismwhereby tools send and receive messages via a router.andP;  The Broadcast MessageServer in Hewlett-Packard's SoftBench[8] is an example of a commerciallyavailable message switch.andP;  The FIELD programming environment,[9] a precursorto SoftBench, implements a selective broadcasting mechanism for enabling toolcooperation.andM;A message switch routes service requests and notifications between toolsusing standard protocols and message classes.andP;  Depending on the model,routing can include broadcasting to interested listeners, queuing, and so on.andO;This approach is complementary to other techniques.andP;  Adapting existing toolsinto a message switch environment is relatively easy as the concept of a&quot;significant event&quot; already exists in many tools.andP;  As with the link managerapproach, each of the tools in the environment maintains control of its owndata.andP;  The message switch supports the UNIX philosophy of allowingindependent tools to easily cooperate through simple conventions.andM;Current message switch-based IPSEs have only been demonstrated in a&quot;programming in the small&quot; environment; they are unproven in medium-to-largeapplications.andP;  Standardizing on the contents of complex messages may beproblematic.andP;  Finally, the message switch may not work with operating systemswith inherently weak interprocess communication and distribution mechanisms.andM;Object Granularity.andP;  The granularity of objects in a framework refers to thebasic unit of information that is implemented by the framework.[10] Objectscan be represented and manipulated with either coarse or fine granularity.andP;  Afile is an example of coarse granularity whereas a piece of text in a filewould be an example of fine granularity.andP;  Whether the framework implementscoarse or fine granularity is a trade-off between robust functionalcapabilities and generality versus performance (size and speed) and ease ofimplementation.andP;  Most frameworks today implement coarse granularity.andM;Coarse granularity maintains a one-to-one correspondence between a toolobject and a file.andP;  There are a number of practical reasons for this: First,filesystems are stable and most provide good performance over a wide range ofapplications.andP;  Second, most software development tools such as editors andcompilers, equate objects with files.andP;  Finally, many organizations oftentreat a file as the unit of granularity for version control, configurationmanagement, quality assurance, and system administration.andM;However, coarse granularity has some limitations.andP;  A small change to anobject means that the entire object has been altered in some way, and thismay trigger unnecessary work on the part of users or the IPSE.andP;  Tools thatperform ad hoe queries against the object management system must know aboutthe internal structure of objects, which introduces dependencies betweentools.andP;  Experience with modern relational database technology has shown thatthese limitations can be overcome by decomposing data into constituentobjects.andM;Fine granularity is not without problems.andP;  For example, it will be difficultto simultaneously provide acceptable performance, capacity, and generality.andO;Objects will vary in size and structure from one instance to another forwhich most commercial DBMS products cannot deal very well.andP;  Finally,framework providers will have to consider how to implement object historiesand versioning, along with adapting existing text- and file-oriented tools tonew data storage and management technology.andM;Descriptive Models and Extenbility.andM;A descriptive model for a framework is a description of the data integrationarchitecture.andP;  It is a schematic and semantic description of the contents ofthe object management system that is used to record and manage therelationships and dependencies among data elements within the tool-datarepository (see figure).andM;Of primary importance, users and/or tool integrators must be able to add newobject types and operations to the data integration architecture as projectsevolve and as new tools are integrated.andP;  IRDS[11] provides for data typeextensibility by having layered entity-attribute-relationship schemas in itsdatabase.andP;  The Atherton Software BackPlane [12] employs an object-orientedapproach for each, type definition, operation definition, and extension.andM;Regardless of the approach used, given a descriptive model, it should bepossible to (re-)generate any representation, given the proper view functionfrom information contained in the data model.andP;  A framework or an IPSE shouldimplement and present multiple views of the software model at any pointduring the software lifecycle.andP;  The model contains all of the entities thatcomprise the software project; including multiple versions of design objectsand source code.andP;  The views represent the work spaces for the software underdevelopment needed by software engineers during a particular phase of theproject.andP;  Software engineers will view and edit a model using different viewsor projections of the model onto diagrams or documents.andM;A Word About Standards.andP;  Most CASE tool vendors want to help define andsupport standards in the marketplace.andP;  However, standards that are costly tobuy or make and support are undesirable.andP;  In addition, standards should noteliminate sources of competitive differentiation and advantage between tools.andO;Otherwise, the ability to use the tools might never improve or evolve, thenthe software industry would regress to the &quot;islands of automation&quot; syndromein order for the CASE vendors to remain viable business entities.andM;Substrate.andP;  CASE vendors and tool integrators who seek to integrate theirproducts in the computing environment can expect that substrate willrepresent the minimal (or lowest) layer of technology or service.andP;  CASEvendors and tool integrators do not want to look past the basic servicesprovided by the operating system for their tools to function.andP;  Theintegration agent, common user interface, and tool-data repository components(see figure) are part of the operating system and not optional products.andP;  Asproducts become standardized, they become part of the substrate, such as theUNIX tool set.andP;  Other parts of the substrate (networking) are not asstandardized as they should be.andM;It is far more desirable to purchase, rather than make, substrate technologyand expect interoperability to exist between vendors and platforms.andP;  Theplatform vendors should own and supply the substrate technology.andM;Data Interchange Standards.andP;  Among the simplest integration techniques, datainterchange standards permit tools from different vendors to exchange data,even if they exist in a batch mode of operation only.andP;  IGES and EDIF havebeen successful standards in the mechanical and electrical CAD worlds for theinterchange of engineering design data.andM;Software engineering and CASE are maturing to the point where standards inthis area are possible, and the market is starting to demand them.andP;  The CASEData Interchange Format (CDIF) for example, is a developing standard targetedtoward analysis and design tools and is based on extensions to EDIF.[13]andM;Common User Interface.andP;  Good common user interfaces across tools make themall easier to use and reduce training costs.andP;  Bad ones can becounterproductive.andP;  Historically, users wanted a common user interface forall tools within the same environment; however, their expectations that thiswould actually happen has been low.andP;  Recently, some de facto standards haveevolved.andM;*  Common User Access (CUA), part of IBM's System Application Architecture(SAA), represents a significant attempt by a platform vendor to present aunified architecture.andM;*  The OSF/Motif user interface from the Open Software Foundation, which willoperate on UNIX systems from multiple vendors, OS/2, VMS, and X WindowManager substrate.andM;*  The Apple Macintosh has become a standard for a user interface metaphor.andM;Even if we are left with a few standards, the user interface standards willbe enough alike that the significance of common user interfaces as aframework component will diminish considerably.andM;CASE Integration Services.andP;  The CASE Integration Services (CIS) committee isan industry consortium of organizations working toward the integration oftools.andP;  Specifically, the goal of the CIS committee is to develop or adoptand recommend a set of standard interfaces that promote the integration ofsoftware engineering tools.andP;  The consortium has been in existence since 1988and has included the major platform vendors and CASE tool vendors.andP;  Theformation of the consortium was motivated through a joint proposal for toolintegration made by Digital Equipment Corporation and Atherton Technology.andM;In early 1990, a working proposal that was to describe a first-level set ofintegration services (target date, the end of 1989) was cancelled.andP;  Citing alack of defined policies and procedures, uncontrolled communications, andscarce participation by real users, Hewlett-Packard, Sun Microsystems, CadreTechnologies, and Interactive Development Environments withdrew participationfrom CIS in January 1990.andP;  The four companies stated intentions to rechanneltheir efforts into other forums such as PCTE/PCTE+, the CAD FrameworkInitiative, and the Object Management Group.andM;CIS has continued it efforts, however.andP;  At the June 1990 CIS meeting, a basedocument was adopted that described a set of interface services and a datamodel for a CASE environment.andP;  The starting point for the CIS V1.0 BaseDocument [14] was the IRDS/ATIS ANSI X3H4-90/187 document.andP;  ATIS representsthe current evolution of the original joint Digital-Atherton tool integration proposal.andM;PCTE and PCTE  .andP;  PCTE is a basis for a Portable Common Tool Environment thatwas initiated in 1983 by a consortium of European companies as part of theEEC's ESPRIT program.[15] The goal was to define a public tool interface thatwould be used as a portability interface and integration support for thesoftware developed in the ESPRIT program and to provide a prototypeimplementation.andM;The consortium specified the following design criteria: support for multipleprogramming languages; complete interface definition; ease of existing toolmigration onto the interface; implementable on a distributed hardwareenvironment; and independence, so it would not impose any work-flowdecisions.andP;  The services provided by the PCTE interface are grouped into fourgeneral categories-data management; execution, composition, andcommunication; distribution and environment management; and user interfacefacilities.andP;  PCTE provides a basis on which an IPSE architect can constructenvironments through the integration of separate tools.andP;  PCTE+, started in1987, augments PCTE by satisfying defense-related requirements, specificallythe need for security, guaranteed integrity, and independence from UNIX.andM;CAD Framework Initiative.andP;  The CFI represents an industry consortium fororganizations working towards the integration of CAD CAE design automationtools.andP;  CFI was formed at the 1988 Design Automation Conference and currentlyincludes over 40 companies.andP;  The charter of CFI is to develop acceptableguidelines for design automation frameworks which will enable the coexistenceand cooperation of a variety of tools.[16] CFI is comprised of seventechnical subcommittees addressing different aspects of the integration:design methodology, design representation, design data management, userinterface, intertool communications, system environments, and architecture.andM;The conceptual architecture of a CAD framework[17] is very similar to theconceptual architecture of a CASE framework.andP;  The window/ graphics system inthe CAD framework provides presentation integration.andP;  The user interfacelibrary represents a set of standard graphics routines that would eliminateproprietary graphics in each tool in the framework.andP;  The inter-processcommunication (IPC) provides a control integration mechanism that wouldpromote intertool communication and work-flow control.andP;  Finally, the designmanagement component manages the design data being created and captured.andM;Object Management Group The object Management Group (OMG) is an internationalconsortium dedicated to establishing industry-wide adoption of a commonstandard for object-oriented environments.andP;  Such a standard would provide forinteroperability across DOS, OS/2, and UNIX.andM;The objectives of the OMG are fivefold.andP;  OMG strives to develop a referencemodel with definitions of terminology; an operating-system independent-objectmanagement facility; distributed object management; interfaces toobject-oriented databases and existing DBMS technology/products; and commonservices for security, administration, and the like.andP;  The goals are perhapsmore grandiose than those of CIS or CFI in the sense that OMG is trying toembrace both object-oriented and non-object-oriented technology.andO;Furthermore, the level of abstraction that OMG is dealing with is somewhathigher than that of the other standard bodies and organizations.andM;Integration frameworks provideandM;the &quot;glue&quot; whereby disconnectedandM;software tools can be made to communicate, share data, and develop and managerelationships between tool information.andP;  Through a framework or IPSE, CASEtools, users, and data are integrated into a customized environment whosewhole is greater than the sum of its parts, an important enabling technologyfor the nineties.andM;Read T. Fleming is VP and Cadre Fellow at Cadre Technologies Inc. NicholasWybolt is the director of Architecture Environments Engineering at Cadre.andM;AcknowledgmentsandM;To Jason Traiger, Don Courtney, Joanne Dawson, and Alan Hecht for reviewingearly drafts.andM;ReferencesandM;[1] Hewlett-Packard Co., HP CASE Primer: An Introduction to Computer AidedSoftware Engineering, Hewlett-Packard Co., 1989.andM;[2] P. Henderson, ed., &quot;Proceedings of the ACM SIGSOFT/SIGPLAN SoftwareEngineering Symposium on Practical Software Development Environments,&quot;Boston, MA, November 1987.andM;[3] Department of Defense, &quot;Requirements For Ada Programming SupportEnvironments: Stoneman,&quot; Washington, DC, February 1980.andM;[4] B.W.andP;  Boehm, Software Engineering Economics, Prentice-Hall Inc., NewJersey, 1981.andM;[5] J. Long and T. Kushner, &quot;Texas Instruments' IEF A Structured Disciplinefor Improving Software Quality,&quot; Software Engineering: Tools, Techniques,Practice, Vol.andP;  1, No.andP;  1, May-June 1990, pp.andP;  39-44.andM;[6] Repository Manager/MVS General Information, Publication No.andP;  GC26-4608-0,IBM Corporation, San Jose, CA, 1989.andM;[7] N. Meyerowitz, &quot;Intermedia: The Architecture and Construction of anObject-Oriented Hypermedia System and Applications Framework,&quot; OOPSLA  86Conference Proceedings, September-October 1986, pp.andP;  186-201.andM;[8] M.R.andP;  Cagan, &quot;The HP SoftBench Environment: An Architecture For A NewGeneration of Software Tools,&quot; Hewlett-Pachard Journal, Vol.andP;  41, No.andP;  3,June 1990, pp.andP;  36-47.andM;[9] S.P.andP;  Reiss, &quot;Integration Mechanisms in the FIELD Environment, TechnicalReport No.andP;  CS-88-18,&quot; Computer Science Dept., Brown University, Providence,RI, October 1988.andM;[10] R. Fleming,  International CASE Architectures and Standards,&quot; positionpaper, National Technological University, Fort Collins, CO, January 1990.andM;[11] American National Standards Institute, ANSI X3H4, Draft Proposal Part 1,&quot;Command Language and Panel Interfaces,&quot; Document ISO/TC97/SC21/WG3 N166R1,New York, November 1986.andM;[12] W. Paseman, &quot;Tools On A New Level,&quot; UNIX REVIEW, Vol.andP;  7, No.andP;  6, June1989, pp.andP;  68-77.andM;[13] A. Hecht and M. Harris, &quot;A CASE Standard Interchange Format: ProposedExtension to EDIF 200,&quot; in Proceedings Twelfth Structured Methods Conference,Chicago, IL, August 1987.andM;[14] CIS VI.0 Base Document, Digital Equipment Corp., Nashua, NH, June 1990.andM;[15] M.C.andP;  Markowitz, &quot;CAD Tools Aren't Yet On Speaking Terms,&quot; EDN, Vol.andO;34, No.andP;  22, October 1989, pp.andP;  114-124.andM;[16] I. Thomas, &quot;PCTE Interfaces: Supporting Tools in Software EngineeringEnvironments,&quot; E Software, Vol.andP;  6, No.andP;  6, November 1989, pp.andP;  15-23.andM;[17] D. Albright, &quot;EDA Paves Road to Framework Standards,&quot; Electronic Design,January 1990, pp.andP;  125-128.andO;</TEXT></DOC>