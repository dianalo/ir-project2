<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-131-772  </DOCNO><DOCID>07 131 772.andM;</DOCID><JOURNAL>Software Magazine  March 15 1989 v9 n4 p31(5)* Full Text COPYRIGHT Sentry Publishing Corp. 1989.andM;</JOURNAL><TITLE>Yesterday's languages built today's software: core languages -Cobol, PL-1, Lisp - all predated the software industry. (includesrelated article about Grace Hopper)</TITLE><AUTHOR>Strothman, Jim.andM;</AUTHOR><SUMMARY>This year - 1989 - is the 35th anniversary of Fortran, the firsttruly high-level programming language.andP;  A task group led by IBM'sJohn Backus published Fortran I on Nov 10, 1954.andP;  The groupcreated many still-familiar expressions such as 'GO TO,' 'DO' and'IF.' In 1957, work began on Fortran II, which IBM distributed toIBM 704 users in April of that year.andP;  .The US Department ofDefense supported the development of Cobol.andP;  PL-1, which debutedtoo late for inclusion with the first release of IBM OS-360, wenta long way toward answering the need for a universal language.andO;Lisp, a favorite of artificial language professionals, was firstused in 1958, by John McCarthy, at MIT.andP;  Sabre (Semi-AutomaticBusiness-Related Environment) was developed by IBM and AmericanAirlines, for handling airline reservations.andM;</SUMMARY><DESCRIPT>Topic:     COBOLPL-1LISPHistory of ComputingFORTRANUnited States. Department of DefenseProgramming Languages.andO;Person:    Hopper, Grace (attitudes).andM;</DESCRIPT><TEXT>YESTERDAY'S LANGUAGES BUILT TODAY'S SOFTWAREandM;Even as the independent software industry this year celebrates two decades ofunbundled life, 1989 marks another anniversary of historic proportions insoftware annals--the 35th anniversary of the first true high-level language,Fortran.andM;In fact, most of the other major languages in use today--Cobol, PL/1, APT,even APL and Lisp--were created before unbundling begat the independents.andO;What is impressive is that, with all the abuse they have taken, theselanguages continue to not only survive, but dominate.andM;When the task group, led by IBM's John Backus, published Fortran I on Nov.andO;10, 1954, it achieved what many doubting Thomases previously had saidcouldn't be done: a high-speed compiler could be developed using simplesyntactic analysis.andM;Backus' nine-person task group had some non-IBMers, including Roy Nutt ofUnited Aircraft and Sheldon Best of MIT.andP;  Bob Hughes of the LivermoreRadiation Laboratory and Harry Cantrell of General Electric also helped theproject along.andM;In a paper presented in 1976 at the International Research Conference on theHistory of Computing, Backus said, &quot;Fortran did not really grow out of somebrainstorm about the beauty of programming in mathematical notation.andO;Instead, it began with the recognition of a basic problem of economics:programming and debugging costs already exceeded the cost of running aprogram.andP;  And as computers became faster and cheaper, this imbalance wouldbecome more and more intolerable.&quot;andM;Backus' theory was that a language could be developed that included atranslator capable of producing object programs as efficient as handwrittenmachine-code programs.andP;  He also believed the language could be adapted toalgorithms used in scientific applications.andM;It took an estimated 25-person years to produce the first Fortrancompiler--the ancestor of all modern compilers.andM;Along the way, Backus and his associates observed some ideas of others,including J.H.andP;  Laning and W. Zierler, who had come up with ways tocommunicate mathematical expressions to a computer in a closer-to-naturalform.andM;However, the Fortran task group created many still-familiar expressions onits own.andP;  These included &quot;GO TO,&quot; a branch instruction; &quot;DO,&quot; to set up aniteration; and the conditional instruction, &quot;IF,&quot; among others.andP;  Language inthe November 1954 preliminary report had variables of one or two charactersin length and function names of three or more characters.andM;With Robert A. Nelson and Irving Ziller, Backus in 1957 began work on FortranII.andP;  In April of that year, IBM decided the compiler was reliable enough todistribute to all IBM 704 users.andM;Fortran II's success was so profound that, by 1959, most manufacturers ofscientific machines had adopted it.andP;  As a result, Fortran scored another&quot;first&quot;--the first machine-independent language.andM;In addition to spawning the development of general-purpose, high-levellanguages, Fortran ideas also influenced special-purpose languages.andP;  One ofthe oldest still in use is APT--Automatic Programmed Tools, which resultedfrom a contract awarded in 1951 by the U.S.andP;  Air Force Air Material Commandto the Servomechanisms Laboratory at the Massachusetts Institute ofTechnology.andM;By 1955, the laboratory had developed a program which enabled the Whirlwindcomputer to punch paper tapes to control machine tools.andP;  The first &quot;InterimReport&quot; of the project, written in 1956, laid out a system structurefeaturing three styles of three-dimensional programming--by points, spacecurves and regions.andM;In 1957, APT II was made available with the IBM 704 and, in 1961, on the IBM7090.andM;ALGOL BEGINNINGSandM;In the late 1950s, prior to Cobol, Algol attracted support from IBM.andP;  In1959, IBM charged a group directed by Robert W. Bemer and Julien Green withwriting an experimental compiler for Algol 58.andP;  A version was demonstrated inMay 1959 on an IBM 709 to a Share meeting.andM;In the early 1960s, another group, supported by IBM Europe, defined Algol 60,which for years afterward served as a basis for programming languages becauseof the strict definition of its syntax.andM;Algol's main difference from Fortran was in its structure.andP;  Algol programswere made up of blocks--sequences of instructions that began with BEGIN andconcluded with END.andP;  An attractive feature was dynamic allocation of memory.andM;However, Algol's success was limited, in part because it did not have theflexibility of expression needed for business computer applications and alsobecause many users had just been sold on Fortran and did not wish to switch.andM;In 1959, a gathering of computer users, some manufacturers andrepresentatives of various universities at the University of Pennsylvania,concluded that a machine-independent language was needed for business dataprocessing in the way Algol 58 was used for scientific computations.andM;DOD SUPPORTED COBOL EFFORTandM;The U.S.andP;  Department of Defense supported the idea and convened a secondmeeting in May 1959, which included 21 representatives from U.S.andP;  governmentagencies, manufacturers and universities.andM;Although most of the participants agreed there was a need for programs to betransferable among machines, there was disagreement on how rapidly toproceed, as well on technical directions.andM;A &quot;short-range&quot; committee, later named the Cobol (Common Business-OrientedLanguage) Committee, reviewed several existing languages, includingFlowmatic, developed at Univac by Grace Hopper's group; Aimaco, developed bya U.S.andP;  Air Force group led by Col.andP;  Alfred Asch; IBM's Comtran (CommercialTranslator); Fortran; RCA 501 Assembler; GE Hanford's Report Generator; andDupont's APG-1, among others.andM;The committee decided to create a new language, called Cobol, using featuresfrom several of those.andP;  Many natural-language words came from Flowmatic, andinstructions often were quite English-like.andM;For example, one could write: &quot;IF X = Y MOVE A TO B; IF GREATER, ADD A to Z;OTHERWISE MOVE C TO D.&quot;andP;  The committee did not accept the Fortran &quot;DO,&quot;however, preferring the instruction &quot;PERFORM&quot; instead, with differentspecifications.andM;Despite differences of opinion from a &quot;medium-range&quot; committee that had beenstudying other alternatives, the U.S.andP;  government eventually threw all itssupport behind Cobol, declaring that any computer manufacturer wishing to dobusiness with the government had to offer Cobol, unless it could show it hada better-performing language.andM;The Cobol committee completed its document, called &quot;Cobol--Specifications fora COmmon Business Oriented Language&quot; in December 1959.andP;  It was accepted bythe Codasyl Executive Committee in January 1960.andM;In a paper presented at a 1978 ACM Sigplan History of Programming LanguagesConference, Jean E. Sammet--who was on the Cobol committee and then workingfor Sylvania Electric Products--tried to figure the time spent producing thefirst Cobol.andP;  She estimated &quot;the Short Range Committee effort to produce theinput to the Government Printing Office in the spring of 1960 was between twoand four person-years, of which about 90% was expended before January 1960.&quot;andM;The problem with Cobol, Fortran and Algol, however, was that none was a&quot;universal&quot; language that could be easily applied to applications other thanthe ones for which they were intended.andP;  As a result, in the early 1960s,equipment, software and programmers tended to be specialized by scientific,commercial and special-purpose applications.andM;In 1963, IBM and its user group, Share, agreed to address complaints aboutFortran's limitations and problems when working with new technology andoperating systems.andP;  The Share-Fortran Advanced Language Committee group wasformed and concluded that a new language was very much needed.andM;IBM hoped to include the committee's recommendations in the operating system(later known as OS/360) for the new System/360.andM;Despite pressure on the committee to meet deadlines set in early 1964, PL/1came too late for inclusion in the first release of OS/360.andM;In March 1964, the committee proposed the language in a &quot;Report on the ShareAdvanced Language Development Committee.&quot;andP;  In a paper presented at the 1978ACM Sigplan History of Programming Languages Conference, George Radin, IBMproject leader and member of the committee, recalled that the initialreaction &quot;was anything but indifferent.andM;&quot;It was widely praised for its breadth, its innovations, and its attention toprogrammers of varying sophistication,&quot; Radin Said.andP;  &quot;It was criticized forits formlessness, complexity and redundancy.andP;  One Share member later comparedit to a 100-blade Swiss knife; another wondered why the kitchen sink had beenomitted from the language.&quot;andM;A second version was produced by the group in June 1964, and in December,IBM's Hursley, England, laboratory published a document called &quot;NPL TechnicalReport, IBM World Trade Laboratories (Great Britain) Ltd.,&quot; which refinedPL/1 even more.andM;According to Radin, &quot;60-character set replaced the original 48-character set.andO;Special characters [such as] 'OR' were added primarily for NPL operations anddelimiters.andM;&quot;BEGIN .andP;  .  .  END blocks were introduced .andP;  .  .  %INCLUDE was removed, butmany new compiletime facilities were added .andP;  .  .  STATIC, AUTOMATIC andCONTROLLED storage classed replaced TEMP and HELD .andP;  .  .  IF, THEN, ELSE,&quot;among other changes.andM;IBM had taken into account recommendations from members of its smallersystems users group, Guide.andP;  The product was originally call NPL for NewProgramming Language, but the British National Physical Laboratory complainedabout the use of its initials, and the name was changed to PL/1, forProgramming Language number one.andM;While PL/1 went a long way toward answering the need for a &quot;universal&quot;language, it still is not without its critics.andP;  For example, it is consideredcumbersome because of the need to provide for a wide range of expressions.andO;Nevertheless, it remains one of the most widely used languages, perhapssecond only to Cobol for commercial applications.andM;Lisp, a favorite language in the artificial intelligence community, was firstimplemented in 1958 by John McCarthy at MIT.andP;  Designed to manipulate symbolicexpressions and lists of objects, every operation is written as a list, withthe first element being the operator and the others the operands.andM;A Lisp program looks like a list overlaid by sublists.andP;  In addition, Lispprograms have the same structure as the data, so a program can be used asdata in another program.andM;Looking for a language with notation closer to mathematics, which was in moregeneral use, Kenneth Iverson designed APL (A Programming Language) and usedit in 1962 to analyze the IBM 7090 and, two years later, System/360.andM;APL developed from Iverson's doctoral thesis done under the tutelage ofcomputer pioneer Howard Aiken at Harvard University.andP;  His thesis involveddeveloping subroutines to test the different methods to solve systems ofdifferential equations.andP;  APL was designed as a tool to analyze computers.andM;The 1978 ACM Sigplan conference included APL among the 13 languages ithonored because, according to its conclusions, &quot;This language has receivedwidespread use .andP;  .  .  increasing from a few highly specialized mathematicaluses to many people using it for quite different applications, includingthose in business.andP;  Its unique character set's frequent emphasis on cryptic'oneliner' programs, and its effective initial implementation as aninteractive system make it important.andP;  In addition, the uniqueness of itsoverall approach and philosophy makes it significant.&quot;andM;Interestingly, Iverson's work stemmed from a book project undertaken jointlywith another graduate student, Frederick P. Brooks, Jr., who later joined IBMand managed product development of System/360.andP;  Brooks and Iverson's projecteventually led to Iverson's book, A Programming Language, submitted forpublication in 1961.andM;APL consists of a &quot;central body&quot; able to call any number of independentsubroutines.andP;  Unlike Fortran, however, types of named objects are taken intoaccount only when the instruction is acted upon.andM;Also, data items are handled dynamically, instead of frozen by initialdeclaration.andP;  Because names are not declared at the start of a program, APLis difficult to compile.andP;  It provides simple functional relations, such as =,andless;, and andgt;.andM;Beginning about 1964, when the first APL interpreters appeared, APL developeda strong cult-like following among some programmers, while others completelyrejected it.andM;Throughout its development, it has remained close to mathematical notation,compared to most offer widely used languages.andM;Online systems began to evolve in the late 1950s.andP;  A major pioneering effortwas Sabre (Semi-Automatic Business-Related Environment), which stemmed from a1953 meeting between IBM and American Airlines executives to discuss a systemfor handling airline reservations.andM;American had tremendous motivation.andP;  Using manual methods, reservation agentsannually made more than 25 million calls around the U.S.andP;  to book seats formore than 8.5 million passengers.andP;  Some seats were routinely left empty onall flights in case there were errors.andM;STudy groups were formed and worked hard on the problem for nearly fouryears.andP;  The project was formally established in 1957 in a then-new researchorganization at IBM's Poughkeepsie labs.andP;  After 18 months, in late 1958, itwas moved to the Special Engineering Projects Division under Jerrier A.andO;Haddad.andM;Based on dual IBM 7090 systems--each duplicating the other if one shouldfail--Sabre was developed as a round-the-clock, 365-day-a-year systeminvolving some 12,000 miles of telephone lines linking the CPUs to some 1,200terminals at travel agencies and American Airline reservation agentsnationwide.andM;Control software had to be developed to identify every terminal, query, andthe sending and receiving of information.andP;  Each 7090 had 32,768 words of mainmemory to hold the control programs.andM;When the system became fully operational, its primary application programswere contained on six IBM 7320 magnetic drums, able to store 1.1 millioncharacters of memory each.andP;  The programs were called into the main memorywhen needed.andP;  The drum also temporarily housed information on the number ofseats sold/Available on flights.andM;Total information and memory backup was provided by 16 1301 magneticdisks--each having a capacity of more than 56 million characters of data.andO;Altogether, the online system had a capacity of more than 800 millioncharacters, and all data was backed up on magnetic tapes stored in anarchive.andM;Equipment was delivered in 1962 and checked out at the Sabre centralprocessing site at Briarcliff Manor, about 30 miles north of New York City.andO;It became fully operational in 1964, when the last of American's major citieswas brought online.andO;</TEXT></DOC>