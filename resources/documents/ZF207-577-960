<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-577-960  </DOCNO><DOCID>07 577 960.andM;</DOCID><JOURNAL>Hewlett-Packard Journal  August 1989 v40 n4 p57(8)* Full Text COPYRIGHT Hewlett Packard 1989.andM;</JOURNAL><TITLE>Encapsulation of applications in the NewWave environment.andO;</TITLE><AUTHOR>Crow, William M.andM;</AUTHOR><SUMMARY>Hewlett-Packard's NewWave window-based operating environmentoffers an encapsulation facility that enables existing MSDOSapplications not written for NewWave to function properly.andP;  Thethree main techniques for accomplishing this are modification theapplication, recognizing and accommodating the application, orusing an additional interface program between the application andNewWave.andP;  The latter is accomplished by using the MicrosoftWindows facilities that are the base of NewWave and which are ableto accommodate most MSDOS applications.andP;  Generic encapsulationinstalls an MSDOS application as a unique object class, with theprogram's data files treated as instances of the class, but doesnot support NewWave's views.andP;  Application-specific encapsulationenables support of all NewWave capabilities.andM;</SUMMARY><DESCRIPT>Company:   Hewlett-Packard Co. (products).andO;Ticker:    HWP.andO;Product:   NewWave (Graphical user interface) (product specifications).andO;Topic:     Code ConversionCompatible SoftwareOperating EnvironmentsSpecificationsSystem DesignMethods.andO;Feature:   illustrationtablechart.andO;Caption:   Basic levels of encapsulation. (table)Organization of OMF and encapsulated file subdirectories. (chart)An MSDOS file specification. (chart)andM;</DESCRIPT><TEXT>Encapsulation of Applications in the NewWave EnvironmentandM;THE HP NEWWAVE ENVIRONMENT provides powerful capabilities for applicationsthat are written to take full advantage of the object management facility(OMF), the agent, and other NewWAve features.andP;  However, there are thousandsof personal computer software applications currently available that were notwritten for the HP NewWave environment, or for that matter, were not evenwritten to operate under Microsoft Windows.andP;  In many cases, these aremission-critical applications that organizations depend on as part of theirday-to-day operations.andP;  These applications may ultimately be replaced bybetter solutions that take full advantage of the HP NewWave environment.andO;However, if we expect users to begin using the HP NewWave environment today,users must be able to continue to use the software currently at theirdisposal.andM;For an existing MS-DOS [R]-based application program to operate correctly inthe HP NewWave environment, either the application must be modified, the HPNewWave environment must recognize and accommodate the MS-DOS application, oran additional program must provide an interface between the MS-DOSapplication and the HP NewWave environment.andP;  The HP NewWave encapsulationfacility uses a combination of all these techniques to provide a wide rangeof support for applications not specifically written to operate in the HPNewWave environment.andM;In some cases, the encapsulation facility makes it possible to continue toaccess applications that were in use before installing the HP NewWaveenvironment, but offers no enhancement to their features or operation.andP;  Inother cases, encapsulation makes it possible for existing applications totake full advantage of the HP NewWave environment without the need for acomplete rewrite.andP;  For most existing applications, the situation liessomewhere between these two ends of the spectrum.andP;  The basic levels ofapplication program encapsulation in the HP NewWave environment are shown inFig.andP;  1.andM;Microsoft Windows Multitasking and Context SwitchingandM;Because the HP NewWave environment is based on the Microsoft Windowsenvironment and runs on industry-standard workstations that support theMS-DOS operating system, it is always possible to run other applications bytemporarily leaving the HP NewWave environment and the Microsoft Windowsenvironment.andP;  While workable, this approach is not always practical, andcetainly does not meet the objective of providing a complete environment forthe HP NewWave user.andP;  Microsoft Windows improves on this by providing thenecessary device and memory management facilities to allow multipleapplications to run simultaneously.andP;  These applications may or may not bewritten for Microsoft Windows.andP;  A Microsoft Windows application will appearon the screen in its own window along with the windows of other MicrosoftWindows applications.andP;  Multiple Microsoft Windows applications can beexecuting simultaneously, depending on available memory.andP;  The user interactswith them by using the mouse or keyboard to select the appropriate on-screenwindow and to enter information or select commands.andM;If the application is not written for the Microsoft Windows environment, itcan still be accessed and operate in conjunction with other applicationsthrough additional facilities provided by Microsoft Windows.andP;  Such anapplication will be given control of the entire screen, presenting its owndisplay and user interface.andP;  The user can switch contexts between thefull-screen application and Microsoft Windows with a simple keystrokesequence.andP;  Multiple full-screen applications can be active simultaneously,depending on the amount of available memory in the system.andP;  Full-screenapplications are not truly multitasked by Microsoft Windows because anapplication's operation is suspended when it is not displayed on the screen.andO;The complete state is saved and the application continues operation when theuser once again gives it access to the display.andM;The encapsulation facilities take advantage of this fundamental capability ofMicrosoft Windows, and provide ways to operate MS-DOS-based applications fromwithin the HP NewWave environment.andM;The DOS programs ServiceandM;In its simplest form, the encapsulation facility provides an easy-to-usemethod to access and run other applications from within the HP NewWaveenvironment.andP;  A user configurable menu of available MS-DOS applications isaccessed through the DOS Program...andP;  command in the HP NewWave Office.andO;Selecting an entry from this menu starts the application, using thefacilities in Microsoft Windows discussed earlier.andP;  Fig.andP;  2 shows the DOSprograms service menu.andM;Adding, removing, or modifying the menu of available applications requires nospecial knowledge or programming skills.andP;  The user can directly access asimple configuration comannd to make the applications chosen availablethrough the HP NewWave DOS programs service.andP;  For many popular commercialapplications, it is as simple as selecting the desired program from apreconfigured list.andM;There is virtually no other relationship or integration between the HPNewWave environment and an application encapsulated using the DOS programsservice other than the ability to start it up.andP;  The application stillaccesses the MS-DOS file system to store and retrieve information.andP;  The usermust be aware of the proper methods of specify filenames and navigate MS-DOSdirectories.andP;  Accessing data from these applications within the HP NewWaveenvironment requires an explicit process to import or convert the MS-DOS filet a form recognized by the HP NewWave object management facility (OMF).andM;Because the DOS programs service is itself an HP NewWave application, it isfully integrated with the agent facility.andP;  HP NewWave agent tasks can accessthe service and start the operation of an MS-DOS application.andP;  However, theagent cannot monitor or control the operation of the application once it isstarted because that application was not developed with the necessary agentinterfaces.andP;  Because many existing applications offer their own internalfacility to automate a sequence of tasks, it may still be possible tointegrate them into an overall automated solution.andM;While the DOS programs service does not provide MS-DOS applications anyintegration with the HP NewWave environment, it is a useful tool for manyusers.andP;  In many cases, users need access to stand-alone applications that arecritical to day-to-day business activity, but don't require integration withother applications or task automation services.andP;  In time, these applicationscan be replaced with HP NewWave solutions, but in the interim, the DOSprograms service provides a useful solution.andM;Generic EncapsulationandM;The DOS programs service provides a method to begin encapsulation, but itstill requires the user to perform all the necessary file management usingthe MS-DOS file system.andP;  An important contribution of the HP NewWaveenvironment is the ability of users to access and manage information easilyby using a mouse to manipulate iconic representations of the data.andP;  The HPNewWave environment provides a facility called generic encapsulation, whichallows many MS-DOS applications to be easily configured and accessed in asimilar manner.andM;Using generic encapsulation, an MS-DOS application is installed as a uniqueobject class.andP;  Data files created or accessed by the application are createdas instances of this class, and can be represented by individual icons withinthe HP NewWave environment.andP;  The user can access and manipulate these datafiles like any HP NewWave object.andP;  Through direct manipulation with themouse, the user can open an object and the generic encapsulation facilitywill start the associated encapsulated application and automatically load thedata file associated with that instance.andP;  Fig.andP;  3 illustrates directmanipulation of an encapsulated object.andP;  Direct manipulation can also be usedto store, retrieve, move, copy, mail, or delete encapsulated applicationobjects, just like other NewWave objects.andP;  These encapsulated objects can beorganized and stored with other HP NewWave objects, allowing the user tomanage all information in a similar fashion, and shielding the user from mostdetails of the MS-DOS file system.andP;  The user can even create data filesharing at the object level, allowing the same object to be stored inmultiple places at the same time.andM;Because these object-level features are implemented in a similar manner for awide range of applications, the generic encapsulation facility is implementedas a single program that can be customized for different applications with aconfiguration file.andP;  The effort to encapsulate a new application is reducedfrom months of development time to a few minutes to set up the appropriateconfiguration information.andM;Generic encapsulation does not allow the user to establish views to or fromthe application.andP;  Views are data links that establish the parent-childrelationship of compound objects in the New Wave environment.andP;  Genericencapsulation also offers only limited support for the HP New Wave agent.andO;These features are not possible without direct participation from theapplication itself, or a more sophisticated form of encapsulation thatunderstands the specific data formats and operation of a particularapplication.andM;Objects versus Files.andP;  One of the siginificant contributions of the HPNewWave OMF is to manage access to the MS-DOS file system.andP;  While object datais stored in ordinary MS-DOS files, filenames are controlled by the OMF, notby the user.andP;  When the OMF starts an application program, it passes theMS-DOS file specification for the location of the application's data.andP;  Theactual filenames are controlled by the OMF, and while known by theapplication, are never displayed to the user.andP;  This frees the user from thedetails of the MS-DOS file system, and allows the use of meaningful titles toidentify individual objects.andP;  More important, it allows the user to create,copy, move, and mail compound objects, which are made up of multiple files,without worrying about creating individual names and resolving namingconflicts and collisions among the files.andM;For many applications it may require multiple files to store the informationthat makes up a specific object.andP;  For example, a data base application mayrequire a form specification file, an index file, and the actual data basefile to describe a data base completely.andP;  To accommodate this need, the OMFpasses the application a fully qualified root filename (first eightcharacters with no extension) to specify the location of the OMF-manageddata.andP;  Using the root filename, the application can create multiple fileswith different extensions, or even create nested subdirectories.andP;  The OMFwill properly recognize all files in the nested structure when manipulatingthe object's data.andM;When encapsulating an unmodified MS-DOS appication, it is often impossible toshield the user from all the details of the file system.andP;  For manyapplications, important functions, such as merging data, saving subsets,linking macros or scripts, translating files, or accessing individual filesthat make up the entire data set, depend on the user's specifying the MS-DOSfilename.andP;  The encapsulation facility cannot hide these filenames from theuser without severely limiting the capabilities of the application.andP;  Instead,the encapsulation facility must allow the user to specify the MS-DOSfilenames used for each data instance and treat them as if they were the datafiles assigned and managed by the OMF.andP;  Resolving this dichotomy between theMS-DOS and OMF environments presents the biggest single challenge (andlimitation) of encapsulation.andM;Since encapsulated applications rely on the MS-DOS file system to store andretrieve data, the user must specify a valid MS-DOS filename when creating anew encapsulated object.andP;  A complete MS-DOS file specification is made up ofseveral parts (see Fig.andP;  4).andP;  To simplify this process for the user, theencapsulation facility assigns a default subdirectory for each encapsulatedapplication class.andP;  The user need only specify the eight-character rootfilename and the encapsulation facility provides default values for the driveand path of the assigned subdirectory as well as the predefined default fileextension for the selected encapsulated application class.andP;  The appropriatetemplate file (or files) is copied to the default subdirectory and the newlycreated object references this file instead of the file the OMF wouldautomatically assign for a true NewWave application.andP;  An error will beindicated if the user does not specify a valid, unique filename.andM;Fig.andP;  5 shows the directory organization for a typical NewWave system withencapsulated applications installed.andP;  There are three directories managed bythe NewWave environment as well as other directories for application programsor user data unrelated to the NewWave environment.andP;  The OMF maintains theHPNWPROG directory for all NewWave executable programs and the HPNWDATAdirectory contains all the NewWave object data files as well as the OMF database.andP;  To improve file access performance, the OMF automatically createsmultiple subdirectories within HPNWDATA as required.andP;  There is rarely anyreason for the user to directly access the files in the HPNWPROG or HPNWDATAdirectories.andP;  The encapsulation facility maintains the HPNWDOS directorywhich contains the data files for encapsulated applications.andP;  Eachencapsulated application class is assigned its own subdirectory within theHPNWDOS directory and the filenames within these subdirectories are thoseassigned by the user when the encapsulated objects were created.andP;  By means ofthis well-defined directory structure, the user can locate and manipulateencapsulated data files even when the HP NewWave environment is not active.andO;Since each encapsulated application may have its own specific requirementsfor how its executable program files are organized within a directory, theencapsulation facility does not attempt to manage these files directly.andP;  Anencapsulated application program is installed on the system in its normalmanner and the encapsulated application class definition provides thenecessary information for the encapsulation facility to locate and access theapplication.andP;  This also allows the application to be accessed even if the HPNewWave environment is not active.andM;The encapsulation facility also supports references to files that alreadyexist in the MS-DOS file system, files outside the default subdirectory, andan entire subdirectory of encapsulated data.andP;  The specific details of thesefacilities go beyond the scope of this article and are not necessary tounderstand the basic operation of encapsulation.andM;Once the MS-DOS file is encapsulated the user is free to move or share theobject representation of the file anywhere within the OMF domain.andP;  It canreside in the NewWave Office, or be placed in any level of nested folders.andO;Even though the object representation is moved within the OMF, the sameMS-DOS file reference originally assigned by the user is still maintained.andO;As with OMF data files, this filename may represent multiple files withdifferent extensions, or a subdirectory structure of arbitrary complexity.andO;The root filename is always displayed in place of the object's title.andP;  Tominimize clutter on the screen, only the eight-character base portion of thefilename is displayed by default.andP;  However, if the user selects this filenamefield for any specific object, the complete, fully qualified MS-DOS filespecification is displayed.andM;Whenever the user copies or imports an object, a new file must be created.andO;This happens transparently for OMF objects, since the OMF assigns the newfilename.andP;  However, a new file cannot be created for an encapsulated objectuntil the user provides a valid new filename.andP;  In many cases, this is simplynot practical at the time the copy operation is performed.andP;  For example, whennew mail arrives via an electronic mail system, objects and their associatedfiles must be created to receive the incoming information.andP;  But at that timethe user has no idea exactly what is being received, and therefore cannotintelligently decide what the filenames should be.andP;  Likewise, when copying afolder object that contains dozens of encapsulated objects in several levelsof nested folders within it, it is not practical to expect the user toprovide all the needed filenames.andP;  It should be equally obvious that it issimply not acceptable to prevent the user from copying, importing, or mailingencapsulated objects.andP;  The filename of the source object cannot be usedwithout fear of collision with existing files.andM;The encapsulation facility solves this problem by recognizing that the datadoes not actually have to be in an MS-DOS file known to the user until theuser is ready to open the object.andP;  Therefore, whenever an encapsulated objectis copied, imported, or received via mail, the encapsulation facility allowsthe OMF to assign a filename for the copy.andP;  Rather than display this filenameas the title (which would be meaningless to the user) it displays the stringCopy of: followed by the eight-character root filename of the originalobject.andP;  The user can move, copy, share, delete, or mail this copied object,and the OMF will manage the associated data file as it does for any otherobject.andP;  The first time the user opens the object, the encapsulation facilitywill prompt the user for the required filename.andP;  Before starting theencapsulated application, the data is moved from the OMF-maintained file tothe file identified by the user, and the object title is changed to reflectthis new filename.andM;While this approach does have some limitations, it provides a practicalmethod for encapsulated applications to behave like other HP NewWave objects,while still being able to access data using the MS-DOS file system.andM;Automatic Object Creation.andP;  A common feature of many applications is theability to save data in a new file while the application is active.andP;  Thisallows the user to create multiple files, saving the current data in a newfile and then continuing to make changes.andP;  In this case, the applicationitself is creating the data file, not the encapsulation facility or the OMF.andO;But since the user expects the newly created file to appear as a newencapsulated object, the encapsulation facility monitors the creation of newfiles, and automatically creates an associated object with the required filereference.andM;Because of the difficulty of monitoring the internal operations of the MS-DOSfile system, the encapsulation facility performs this automatic registrationby comparing the contents and date stamps of files in the default datadirectory before and after the encapsulated application is run.andP;  Thissearch-and-compare operation is limited to the default data directory for theencapsulated objects class, primarily for performance reasons.andM;Many applications are also able to create files compatible with otherapplications, for example, a spreadsheet that can store information in a formcompatible with a data base program.andP;  In the case where both applications areencapsulated in the HP NewWave environment, the encapsulation facility can beconfigured to allow one application class to create objects of the otherclass, referencing the newly created files.andM;In some cases, applications specifically written for the HP NewWaveenvironment provide a facility to convert or import information from MS-DOSfiles.andP;  The encapsulation facility can be configured to access this featureprogrammatically, providing a method to create the appropriate HP NewWaveobject automatically from information created by an encapsulated object.andM;Menus and Macros.andP;  While the encapsulation facility supports many automaticprocedures, it may often require a less-than-intuitive sequence of stepswithin the encapsulated application to take advantage of it.andP;  For example,initiating an automatic conversion to an HP NewWave application requiressaving the file in a predefined location, allowing the encapsulation facilityto locate it easily.andP;  To make this feature easily available to the user, theencapsulation facility provides a method to create new pull-down menus forthe encapsulated application.andP;  A kewstroke macro is associated with each menucommand and executed when the command is selected by the user.andP;  These macroscan contain instance-specific, class-specific, or system-wide globalvariables.andM;For Microsoft Windows applications, these menu commands are added to theexisting application menus.andP;  Microsoft Windows provides the programmaticfacility to change menu configurations dynamically.andP;  By intercepting andfiltering all Microsoft Windows messages received by the encapsulatedapplication, the encapsulation facility can detect when one of its new menycommands is selected, and respond by sending a series of messages to theapplication that simulate the associated macro being entered via thekeyboard.andM;For full-screen applications, the encapsulation facility monitors theinterrupt routines used to manage the keyboard.andP;  When the appropriateactivation key is detected, the added menu commands overlay the full-screenapplication's display.andP;  The keyboard interrupt service routine is monitoredto determine what menu command is selected, and the appropriate macro is sentto the application through the interrupt service routine, simulating keyboardinput.andM;Configurable menus and keystroke macros offer a powerful mechanism forextending the user interface of encapsulated applications, and provide aneasy way for the user to access the additional features provided by theencapsulation facility.andM;Agent Support.andP;  The encapsulation facility provides keystroke recording andplayback to extend the functions of the agent facility to supportencapsulated applications.andP;  This is implemented using the same windowsmessage or keyboard service interrupt filtering used for the configurablemenu and macro feature.andP;  While this solution is not without significantlimitations, it does provide the basic capabilities required to automatesystem-wide tasks that also include encapsulated applications.andM;Configuration Parameters.andP;  Generic encapsulation supports a wide variety ofapplications, using a sequence of configuration parameters to provide thedetailed information related to each program.andP;  Following are some of theparameters that provide the generic encapsulation facility with theinformation it needs to know about the application being encapsulated.andM;* Application Type.andP;  Specifies whether the encapsulated application is aMicrosoft Windows application or a fullscreen application.andM;* File Access Method.andP;  Specifies whether data for this application will bestored in referenced MS-DOS files, or in OMF-controlled files.andP;  The latterare useful when the encapsulated application can be modified to removedependencies on users to specify the filenames for data files.andM;* Application Name.andP;  The subdirectory location and name of the encapsulatedapplication.andM;* Command Line.andP;  The command line parameters to be passed to the applicationwhen it is started.andP;  This is the most common method for providing theinstance-specific filename to the application.andM;* Current Directory.andP;  The drive and subdirectory that should be selected asthe current directory before the application is started.andP;  Some applicationsrequire that the directory containing the main program be the currentdirectory.andP;  For others, making the default data directory the currentdirectory eases access to additional data files.andM;* Menu File.andP;  The name of the optional file that defines the added menucommands and their associated keystroke macros.andM;*Window Class.andP;  For Microsoft Windows applications, this specifies theindentifier used by Microsoft Windows to identify the application's windowtype.andM;* Window Title.andP;  The text identifier maintained by Microsoft Windows thatidentifies a window and is displayed in the window's title bar.andP;  This fieldand the preceding one are used by the encapsulation shell to locate theapplication's window when it is initiated.andP;  The location is needed toconfigure menus and macros and filter the application's messages.andM;* Key Extension.andP;  The three-character filename extension (e.g., GAL forDrawing Gallery files) that is searched for to determine if new files for theapplication have been created and need to be automatically registered.andP;  Thekey extension is also used for error and filename collision detection whenthe user provides new filenames.andM;* Required Extensions.andP;  Specifies the extensions of other files that must bepresent to make up a valid data instance.andP;  This is also used for error andfilename collision detection.andM;* Data Directory.andP;  The default data directory for the application.andP;  This iswhere all files for this application class are typically stored.andM;* Export Classes.andP;  Specifies the classnames of other encapsulatedapplications that may be created by this application.andM;* Conversion Classes.andP;  Specifies the classnames of HP NewWave applicationsthat support programmatic conversion and can be accessed by this application.andM;These and other configuration parameters are specified when the encapsulatedapplication class is installed in the HP NewWave environment.andP;  They arestored as text in the class properties for the application, and can thereforebe programmatically accessed by any other application that needs thisinformation.andP;  Like the configurable keystroke macros, the configurationparameters can include a variety of instance-specific, class-specific, orglobal system variables, providing a tremendous degree of flexibility.andP;  Usingvariables, any text property of any other application class can be accessed.andO;Because the OMF property system is extensible, developers can specifyadditional properties and access this information as configurationinformation or keystroke macros from multiple, cooperating applications.andM;Application-Specific EncapsulationandM;While generic encapsulation makes it possible for many applications tooperate as part of the HP NewWave environment, it does not support one of themost important capabilities: views.andP;  For applications to share datacooperatively, the encapsulation facility must not only know how tocommunicate with other application, but must also understand and be able tomodify the application's data structure.andP;  It must also provide additionalcommands and dialogs to manage the links that are created.andP;  This invariablyrequires the development of a specialized encapsulation program thatrecornizes the specific features and data formats of the application itencapsulates.andP;  The solutions are as varied as the applications that can beencapsulated.andP;  With enough effort invested in the encapsulation shell,virtually all HP NewWave capabilities can be supported.andP;  But this process mayentail more effort than simple rewriting the application for the HP NewWaveenvironment.andM;To encapsulate Lotus [R] 1-2-3 [R], a spreadsheet program from LotusDevelopment Corporation, an HP NewWave browser application was developed (seeFig.andP;  6).andP;  This program reads the Lotus 1-2-3 spreadsheet data file,displaying its contents in the Microsoft Windows environment.andP;  Theencapsulation browser provides the necessary user commands and interfaces tothe OMF to allow ranges of the Lotus 1-2-3 worksheet to be viewed in other HPNewWave applications.andP;  To minimize the browser's complexity, it is onlycapable of reading the Lotus 1-2-3 worksheet file; it cannot make changes toit.andP;  Instead, the browser provides a command to start the Lotus 1-2-3program, automatically loading the data file being browsed.andP;  When the userexits from Lotus 1-2-3, the updated file is redisplayed by the browser.andO;Because the browser does not alter the spreadsheet data, it will not acceptdata passing views (*1) from other applications.andP;  A similar browser-typeencapsulation shell was developed for HP Graphics Gallery.andM;ConclusionandM;HP NewWave's encapsulation services provide the bridge from today'sMS-DOS-based applications to the next generation of applications developedfor the HP NewWave environment.andP;  The DOS programs service and genericencapsulation provide the facilities for users to take advantage of HPNewWave immediately, while continuing to use their current suite ofapplications.andP;  Application-specific encapsulation provides an interimsolution to allow developers to move their existing applications into the HPNewWave environment and take advantage of its advanced features withoutrequiring a complete application rewrite.andP;  The HP NewWave environment clearlydefines the applications environment of the future, and the complete range ofencapsulation services provides a clear, well-lighted path for today'spersonal computer users.andM;AcknowledgmentsandM;Yitzchak Ehrlich is responsible for much of the design and implementation forHP NewWave encapsulation technology and the generic encapsilation facility.andO;Tony Day designed and implemented the DOS programs service.andP;  Scott Hansondesigned and implemented the configuration utility used to install genericencapsulation applications.andP;  Doug Smith implemented a shared library of DOSfile management routines used by all encapsulation programs.andP;  Andy Dysart andChuck Whelan implemented new facilities in the OMF to support encapsulatedapplications.andP;  Several enhancements to support encapsulation features weremade to MS Windows by Tom Battle's team at HP's Sunnyvale Personal ComputerOperation.andP;  Many more engineers at HP's Personal Software Division havecontributed to the design and implementation of the encapsulation servicesfor the HP NewWave environment.andM;(* ) A data passing view is a data link between objects that allows the childto pass due to the parent.andO;</TEXT></DOC>