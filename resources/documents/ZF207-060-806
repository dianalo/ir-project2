<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-060-806  </DOCNO><DOCID>07 060 806.andM;</DOCID><JOURNAL>Data Based Advisor  Jan 1989 v7 n1 p42(2)* Full Text COPYRIGHT Data Based Solutions 1989.andM;</JOURNAL><TITLE>Design stoppers.andO;</TITLE><AUTHOR>Watterson, Karen.andM;</AUTHOR><SUMMARY>Database design problems are becoming more complex as tools becomemore powerful and applications become more sophisticated.andP;  Commonjargon and pitfalls of bad database design are discussed,including data redundancy and data inconsistency, anomalies,repeating groups, and orphans.andM;</SUMMARY><DESCRIPT>Topic:     Data Base DesignGuidelinesProgramming.andM;</DESCRIPT><TEXT>Design StoppersandM;Beginning with this issue, &quot;Database Design&quot; will be a monthly column.andP;  Why?andO;In the year ahead we're each going to be faced with design problems that areincreasingly complex because our tools are becoming more powerful.andP;  Today'smicros have the horsepower to solve business problems that were previouslyaccessible only by minis.andP;  And, as we all know, today's micro DBMSs are morepowerful than just about any of yesterday's minicomputer DBMSs.andP;  So we'regoing to find ourselves being asked to create increasingly sophisticatedapplications.andP;  In many cases, we're going to be expected to be familiar withthe techniques and terminology of traditional systems analysis and design.andO;And in most cases, we'll also need to understand them.andM;Therefore, this column will take on a slightly different flavor.andP;  The focushas been on database &quot;makeovers&quot;--taking a bad design and fixing it.andP;  We'veused a sort of cookbook approach to design and generally provide goodsolutions to your needs.andM;Many of us, however, can no longer afford to ignore things like the designprocess called normalization or discussions of anomalies.andP;  We're going tohave to learn about database integrity, and how to maintain it.andP;  We're alsogoing to have to learn how and when to use different diagramming techniques,such as entity-relationship diagrams, decomposition diagrams, and data flowdiagrams.andP;  (James Martin has an invaluable book published by Prentice-Halldevoted entirely to this subject called Recommended Diagramming Standards forAnalysts and Programmers.)andP;  Database server technology will undoubtedly addcomplexity to the design process in multiuser environments, and we'll need tolearn strategies to cope with that.andM;So, in this column, you'll continue to see design &quot;exercises,&quot; but you'llbegin to read about tools you can use to facilitate the design process.andO;These will include both techniques and products--books, front-end CASE tools,and the like.andM;The dangers of poor designandM;This month I'm going to sermonize.andP;  I'm going to try to convince you of thevirtues of good design by showing you the evils of poor design.andP;  In themeantime, you'll start learning the jargon that you may need to establishcredibility in relational database design circles.andP;  Who knows?andP;  Maybe you'lleven develop some new conversation stoppers like, &quot;What do you think aboutreferential integrity?&quot;andM;Data redundancy and data inconsistencyandM;Two overwhelming reasons for developing a good design--reasons cited in theintroductory manuals of just about every DBMS product on the markettoday--are the desire to avoid &quot;data redundancy&quot; and &quot;data inconsistency.&quot;andO;Data redundancy means the same information is contained in more than oneplace, which results in unnecessary ballooning of your data files.andP;  Datainconsistency usually stems from data redundancy and reflects the fact thatwhat should be identical information is, in fact, not.andP;  Let's look at someexamples.andM;Let's assume you've opened a pizza delivery service.andP;  You realize you need tokeep track of orderers' names and addresses and what they ordered, so youdesign your database as follows: Order# Recorded by Date Time ordered Deliverby Last Name First Name Phone Address City Directions Item ordered QuantitySpecial instructions Amount due Tax Total Cooked by Delivered byandM;It won't take your data entry people long to realize that for multi-itemorders, there's a lot of duplicate data.andP;  That's an example of dataredundancy.andP;  If someone orders three items today and another two next week,that person's name, phone, address, and so on will have to be entered fivetimes into the database.andP;  This represents an inefficient use both of dataentry time and disk storage.andM;It doesn't take a great leap of imagination to see how easy it would be fordata inconsistency to get into the system.andP;  If I were entered as &quot;KarenWaterson&quot; for one order, but &quot;Karen Watterson&quot; for another, and &quot;CarenWatterson&quot; for a third, it would be easy to assume that I was, in fact, threedifferent people.andP;  Any direct mailings you did would probably be sent to allthree people.andP;  Management reports summarizing the total number of distinctcustomers and the number of repeat clients would be inaccurate.andM;There are other penalties for this sort of design.andP;  One is that performancewill become sluggish sooner than it needs to.andP;  Another is that you willcreate the feared anomalies.andM;AnomaliesandM;The term &quot;anomaly&quot; is often used today by software vendors as a euphemism todescribe bugs in their products.andP;  In the database world, however, anomaliesrefer to any of several types of problems that result from poor databasedesign.andP;  Anomalies are generally categorized as insertion anomalies, updateanomalies, or deletion anomalies.andM;Insertion Anomalies represent the situation where you want to add informationto your database, but it appears to be incomplete information.andP;  For example,if you wanted to add a potential customer to your pizza delivery database sothat he or she would be on your mailing list, you might have a problem, sinceyour system would probably be set up with mandatory item ordered and quantityfields.andM;Deletion anomalies essentially represent the flip side of insertionanomalies.andP;  Assume, for example, that someone calls in with an order, butcalls back a few minutes later to cancel it.andP;  If you delete the record, youwill be deleting information about a potential customer--information thatcould be used in your marketing efforts.andM;Update anomalies occur in conjunction with redundant data.andP;  If one of yourcustomers moves, you would probably want your entire database to be updatedto reflect the customer's new address, phone number, and directions to his orher house.andP;  If, however, you only change it for one record, you'll have anupdate anomaly.andP;  Update anomalies result in data inconsistency.andM;Problems with keysandM;Another problem is that the order number, intuitively the key field, may notbe able to serve as a true key.andP;  Are you going to assign one order number toa single phone order?andP;  If you do, then you'll have rows sharing the sameorder number whenever a person makes a multi-item order.andM;An easy way to avoid designs such as these is to scrutinize your tables'design and ask a single question for each table: Does this table have asingle theme?andP;  The answer to this question in our pizza delivery databaseexample is clearly &quot;NO,&quot; because our table contains information both aboutcustomers and orders.andP;  The solution would be to &quot;decompose&quot; the table--tobreak it up.andM;Repeating groupsandM;Another common design error is setting up a table with repeating groups.andO;Repeating groups usually get into designs when people try to avoid or solvethe obvious data redundancy problems that arise with designs like the oneabove.andP;  Consider the following: Order# Recorded by Date Time ordered Deliverby Last Name First Name Phone Address City Directions Item 1 ordered QuantityItem 2 ordered Quantity Item 3 ordered Quantity Item 4 ordered QuantitySpecial instructions Amount due Tax Total Cooked by Delivered byandM;The Item/Quantity pair represents a repeating group and is an attempt tominimize duplicate keying of basic customer data.andP;  There are lots of problemswith this design, too.andP;  In the example above, the designer probably chosefour items by balancing the average number of items ordered on phone-inorders against maximum number of items anyone would ever order.andP;  However,since most orders probably only consist of one or two items, our databasewill contain a lot of null fields.andP;  And, no matter how many fields we setaside for items, someone will inevitably order one more, forcing us to useanother record for the overflow anyway.andM;Repeating groups stick out like a sore thumb, so they're easy to recognize.andO;By the way, you can also catch them by asking the question &quot;Does the tablecontain multiple themes?&quot;andP;  The table above has three themes: customers,orders, and items ordered.andM;OrphansandM;One of the problems with decomposing your tables is that it's generally veryeasy to end up with data in one table that doesn't correspond to anything inany other tables.andP;  You must avoid this to claim that your database hasreferential integrity.andM;For example, let's assume that our pizza delivery database has been designedas follows:andM;This design goes a bit beyond simple pizza delivery and now has the potentialto help us track inventory as well as print out recipes for the cooks andinvoices for the customers.andM;But back to referential integrity.andP;  Assume, as we did above when we had asingle-table design, that someone calls in to make an order, and then callsback to cancel.andP;  If your application allows records from the ORDERS table tobe deleted without enforcing deletion of corresponding records from theDETAIL table, your database will lack referential integrity.andP;  The DETAILrows--perhaps about a 12-inch giant house special with extra cheese and asmall vegetarian--will be orphans, unattached to any existing order number.andO;Some DBMSs have mechanisms to enforce referential integrity, but most don't.andO;That means that part of your creating a well-designed database will includefiguring out how to do it.andM;Wrapping it upandM;This month we've introduced some of the jargon associated with databasedesign by pointing out the pitfalls of bad design.andP;  We hope those of you whofound yourself yawning off were wise enough to call your local pizza deliveryservice and get yourself revitalized.andP;  By the way, did your order taker seeminordinately interested in your phone number?andP;  Why do you suppose that was?andM;Next month we'll continue exploring database design issues and tackle topicssuch as dependencies, constraints, and normalization.andM;Karen Watterson is the Program Coordinator of Shoreline Community College'sBusiness Computer Program in Seattle.andP;  She is co-author with Alan Simpson of&quot;Understanding R:BASE for DOS and R:BASE for OS/2&quot; (Sybex).andP;  You can contactthe author at SCC, 16101 Greenwood Ave. N., Seattle, Wash.andP;  98133 or via MCImail (111-9390).andO;</TEXT></DOC>