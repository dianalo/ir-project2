<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-734-376  </DOCNO><DOCID>07 734 376.andM;</DOCID><JOURNAL>Digital Review  Oct 2 1989 v6 n39 p34(6)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>Despite a slow start, CASE goes the distance. (computer-aidedsoftware engineering; includes related articles on a user poll,closeups on companies using CASE and a model for strategy)</TITLE><AUTHOR>Sorensen, Kristiina.andM;</AUTHOR><SUMMARY>MIS departments generally have a backlog that may amount to asmuch as five years of work.andP;  One way to increase productivity andto get a grip on such a profusion of work is to adoptcomputer-aided software engineering (CASE).andP;  Instituting CASE canbe an expensive proposition, costing up to $30,000 perprogrammer/analyst at a site.andP;  The transition to CASE can bedifficult in other ways as well.andP;  Workers must go throughretraining which will lower productivity during the transitionperiod, and software engineers may have to change theirmethodology orientation.andP;  CASE vendors have recognized six phasesin the life cycle of software.andP;  Separate CASE tools are availablefor analysis, design, application implementation, product lifecycle testing, debugging and maintenance.andP;  The transition to CASEis not an easy one but tremendous gains in productivity can berealized by those willing to commit to it.andM;</SUMMARY><DESCRIPT>Topic:     ProductivityMISManagementStrategic PlanningComputer-Aided Software EngineeringGuidelines.andO;Feature:   illustrationgraph.andO;Caption:   CASE tools' impact on problem-solving, debugging. (graph)Effect of CASE toolkits on programming. (graph)Time spent on software maintenance in pre-CASE environments.andO;(graph)andM;</DESCRIPT><TEXT>DESPITE A SLOW START, CASE GOES THE DISTANCEandM;Successfully implementing CASE depends on a company's readiness anddetermination.andP;  Short-term paybacks are few and difficult to measure, andduring the first dozen months resources at all levels are strained.andP;  But forthe organization willing to stay in the game, the rewards are there.andP;  Thefirst--and most important--is a superior product.andP;  Next, maintenance anddocumentation expenses take a nosedive and profits rise.andP;  Here are some basicstrategies for deciding if your company is up to meeting the CASE challenge.andM;Ask any information systems manager what his biggest immediate problem is andhe is likely to offer a range of responses: &quot;The network is overloaded.&quot;andP;  &quot;Ineed to upgrade my hardware.&quot;andP;  &quot;Employee turnover is too high.&quot;andM;Probe a little deeper, though--ask about overall productivity, the size ofthe work load and how MIS dollars are spent, and MIS managers will say thattheir greatest problem is the ever-growing backlog of work to be done.andM;Even if no new requests were made of corporate information systemsdepartments, it would take at least five years for them to get through theirpresent development projects.andM;To attack this problem, more and more MIS managers are gradually moving toadopt computer-aided software engineering (CASE).andM;CASE--as a solution--is neither inexpensive nor easily adopted.andP;  It requiresa tremendous change in philosophy by imposing specific developmentmethodologies on software engineers.andM;With just hardware, software and training, a CASE system for a commercialsite can run to about $30,000 per programmer/analyst.andM;Furthermore, MIS sites will experience even greater costs in terms of lostoverall productivity during the time developers retrain to use a particularCASE methodology.andM;Nonetheless, for the MIS manager willing to make a serious commitment toCASE, the potential payback can offset these substantial costs.andP;  CASE notonly allows developers to reuse code from one project to another, but it alsoleads to the building of more robust and sophisticated systems as developersbecome proficient.andP;  In fact, many CASE users report that without CASE theysimply couldn't develop the systems they need.andM;Most CASE vendors divide the software life cycle into six distinct phases andsell separate tools for those different phases.andP;  When analyzing the costs andbenefits of CASE, it is important to keep in mind that tools that may onlyappear to serve a single phase of the software development life cycle mayalso have a considerable impact on later stages.andP;  (See &quot;CASE Tools' Impact onProblem Solving, Debugging.&quot;)andM;The first two phases are system analysis and design.andP;  Utilizing structuredanalysis tools, users create a set of computer specifications that describesthe corporate plans for both the organization and the system that's beingdeveloped.andP;  Next, the user designs a solution that meets the specificationscreated in the analysis phase.andM;Analysis and design tools are known as &quot;front-end&quot; or &quot;upper-CASE&quot; tools.andO;They typically rely on models--groups of diagrams, forms and text--torepresent business functions and information flow within an organization.andP;  Asimple upper-CASE tool for a personal computer may cost as little as a fewhundred dollars and can provide a convenient entry point to CASE.andM;The final four phases of the software life cycle deal with the production andmaintenance of code.andP;  They are known collectively as &quot;back-end&quot; or&quot;lower-CASE&quot; tools.andM;Phase 3, following software design, is application implementation.andP;  In thisphase, the program code is actually generated.andM;Some CASE tools generate code in a third-generation language (3GL) such asCobol, Fortran or Ada.andP;  Other tools generate code in one of the proprietaryfourth-generation languages (4GLs), such as Information Builders' Focus,Software Ag's Natural or SmartStar's SmartStar.andM;The fourth phase of the product life cycle is testing.andP;  Here, CASE tools canbe used to check that the software actually meets the requirementsestablished in the software design phase.andM;In the fifth phase, debugging tools locate errors at the line level in thecode to ensure that the code generated earlier will run.andM;The sixth and final phase is software maintenance.andP;  When it comes to acost/benefit analysis of CASE, this stage is the most important of all.andM;In a recent study of large software project development by Arthur Andersen andamp;Co., the average expected life of the new mission-critical systems wasprojected to be seven years.andP;  Over this period, modifications to the softwarebeing developed could be as simple as changing the length of a field on auser-input screen, or as complicated as completely revamping the structure ofthe database management system.andM;A number of studies indicate that maintenance accounts for 70 percent to 80percent of the total time spent over the entire life cycle of an application.andO;The complexity of changing an existing system is often far greater than thatof creating the system in the first place.andP;  (See &quot;Time Spent on SoftwareMaintenance in Pre-CASE Environments.&quot;)andM;Today, only a small percentage of vendors can claim to offer tools thathandle all six phases of the life cycle.andM;Most vendors have focused either on upper-CASE tools or lower-CASE ones, andmany have limited themselves to just one of the six phases.andM;Recognizing the limitations on single-product offerings, many CASE vendorsthat specialize in one phase or another have begun joining forces to offerlinked products.andP;  In these second-generation tools, the results from onephase of development drive the process in the next phase.andM;Specifications created using upper-CASE tools, for instance, can beinterpreted by lower-CASE tools, which then automatically generate code thatmeets those specifications.andM;Organizations that are serious about improving their development will want toeventually consider CASE tools that cover most--if not all--of the lifecycle.andM;Such packages, known as integrated CASE or I-CASE packages, require morededication, more resources and more time to fully implement than do any oftheir single-phase counterparts.andP;  Price tags for such systems typically startin the neighborhood of $100,000.andP;  But for organizations willing and able tobring in the technology, I-CASE has much greater potential for improvedproductivity and quality.andM;The best integrated packages can tremendously simplify the entire process ofapplication development.andM;To make changes in an existing application, for instance, the user simplychanges the specification diagrams.andP;  The package takes over from there,regenerating any code affected by the changes, linking the new code toexisting software and drawing up the documentation to show all the changes.andM;A FOUR-STAR PRICEandM;Initially, CASE is going to be expensive--very expensive.andP;  The software willonly be a small fraction of the total cost of implementation.andP;  Organizationscan expect to incur tremendous costs in training and consulting.andM;In addition, most CASE tools today run on workstations and very powerfulpersonal computers.andP;  Ideally, sites should have a sufficient amount ofworkstations so analysts and programmers don't waste their time waiting forworkstations.andM;But some consultants say it is possible to get away with having as many asfive users for each workstation.andP;  Although this may work for someorganizations, especially those planning to gradually adopt one or two CASEtools rather than a full integrated system, it is definitely not recommendedfor all.andP;  For those serious about CASE, it might be silly to skimp onhardware; plan on a workstation for every user.andM;Training time is another important factor that needs to be calculated intocost estimates for the project.andM;Just how much time will be needed depends largely on how complete a CASEpackage is being implemented, how well-integrated the individual tools areand the experience of the users.andP;  To help plan anticipated expenditures fortraining, check with some of the CASE vendor's other customers to find outhow long it took them to get up and running.andM;Fully integrated CASE packages have learning curves ranging from a few monthsto two years.andP;  Productivity during this period varies: During the firstlearning phase, which may last as long as nine months, overall productivitywill probably drop as everyone learns to use the new tools and themethodology needed to make those tools effective.andM;Then, during those months when users are gaining proficiency but have not yetacquired complete mastery of the tools, their productivity will rapidlyimprove.andP;  Some CASE users report it took as long as two years before theywere really getting maximum results from their CASE investment.andP;  Fortunately,organizations that already had a rigorous development methodology in placereported substantially shorter training periods.andM;In addition to the cost of the time spent training the staff, manyorganizations will need to budget for additional training expenditures.andM;Many vendors include some training in the price of their software licenses,but additional training assistance, either from the vendor or from an outsidetraining company, is often worthwhile.andM;Another expense that most user sites will need to include in cost projectionsis outside consulting fees.andM;After a few months of working on a project, many organizations find itnecessary to bring in a consultant--either an independent company or oneassociated with the CASE vendor.andP;  Again, certain vendors include someconsulting time in the price charged for their licenses.andM;Further contributing to an initial slowdown in productivity is the need tophysically enter a lot of data into the CASE system before the tools canreally be used properly.andP;  In many organizations, the information needed tobuild the functional business models associated with the systems-analysisstage is stored in the minds of a select few managers and executives.andO;Getting that information into the CASE systems where it can be useful to theentire organization will be the first task.andM;This initial ramp-up period of model creation, requirements specification anddata entry can take a period of a few weeks or several months.andM;However, if it seems that all productive work has suddenly ceased during thisperiod, take heart.andP;  Once the models are built, they can be easily modifiedwith the CASE tools.andP;  Portions of the collection of designs and models usedfor one project can also be reused on other projects.andM;Diligence in initial projects will thus pay off in later projects whenalready-functioning designs can be reused by calling them up from a centralCASE repository and using them as the basis for many new applications.andM;CHECKING THE COSTSandM;So, in dollars and cents, what does this add up to?andP;  Costs will vary widelydepending on the software purchased, the hardware already available, thenumber of users, the type of projects planned and the amount of training andconsulting needed.andM;As a very rough guideline, however, a large organization might expectexpenditures like these for a complete, integrated CASE package.andP;  The CASEsoftware itself could range from $100,000 for several users on a midrangesystem or workstations to $500,000 for a site license running on a mainframecomputer.andP;  Some systems will also require the purchase of a separate centralrepository or dictionary; the repository could be priced at $20,000 to$50,000.andP;  Workstations will be at least $10,000--and probably closer to$20,000--for each user.andM;Consultants' fees and additional training time will probably be in the rangeof $1,000 to $2,000 per day.andM;Those estimates are at the upper end of what might be encountered.andP;  Not allpackages will cost that much, but be wary of vendors who claim that they canhave you running CASE for $5,000.andM;A common misconception about CASE is that its primary benefit is increasedcoding productivity.andP;  If a software development team is now writing 1,000lines of code a month, the team should be able to produce 2,000 lines of codea month with CASE.andP;  That's a nice bit of mental gymnastics, but it's notlikely to happen.andM;Increased programmer productivity may follow the implementation of CASE, butlines of code is not necessarily the best productivity yardstick to measureCASE since, as a development tool, CASE tends to reduce the amount of codenecessary to develop a system.andM;Many organization are likely to experience a decrease in productivity duringthe first half-year or so after CASE is implemented because of the retrainingrequired.andP;  But after that point, many users find productivity begins to riseand eventually surpass levels attained prior to the introduction of CASE (See&quot;Effect of CASE Toolkits on Programming.&quot;)andM;Integrating CASE promises to gretly improve the quality of the applicationsdeveloped.andP;  This does not mean merely that screens will be a little prettier,files will be a little better organized or maintenance will be a little lessfrequent.andM;I-CASE will bring about fundamental changes in the way a manager developssystems.andP;  Those systems will better fill the needs for which they weredeveloped, will require substantially less maintenance and should meet withmuch higher approval ratings by those who actually use them.andP;  Many CASE usersreport that the technology allows them to make a quantum leap forward inapplication quality, which they could not make in any other way.andM;CASE brings these improvements in a number of ways.andP;  First, prototypedevelopment is fast and simple.andP;  By making it easy for the developer toproduce prototypes and then check them with the end user, CASE greatlyimproves the chances that the systems developed will actually do what theyare supposed to.andP;  If the developer doesn't understand what the end userrequests, or if what the end user requests isn't what he really wants, theproblem will be caught much earlier in the development cycle.andM;CASE tools also bring with them improved documentation of the entiredevelopment process.andP;  Documentation is traditionally one of the neglectedareas of the development process, and CASE can help tacke that problem.andP;  CASErequires everyone involved in a development project to record theirthoughts--in the form of diagrams, models and specifications--in thecomputer, where they are kept in a central repository.andP;  All the whys, whatsand hows of the project are in the system and can be accessed as needed.andM;SAVINGS ADD UPandM;Time saved in producing documentation can add up quickly.andP;  Using traditionaltechniques, two programmers might spend 100 hours each working ondocumentation, and an end user might spend an additional 25 hours reviewingit.andP;  At $25 an hour each, the total cost of documentation for one applicationwould be $5,225.andP;  With a good CASE tool, that time, and expense can be cut tovirtually nothing.andM;Most users report that the dramatic cost benefits of CASE come inmaintenance: Some users report they have cut their maintenance time 50percent to 80 percent.andM;Part of that time savings results from having applications that are betterdesigned in the first place.andP;  The rest of the time savings comes from thenature of maintenance within CASE.andM;Rather than having to pick through code that likely was written by someoneelse, the developer can change the project's design specifications and havethe CASE tools generate the new code.andM;The savings that reduced maintenance can bring is obvious.andP;  If a developmentproject using traditional programming techniques is budgeted at $100,000,maintenance over the software's life span can be expected to consume at leastthat much.andP;  Any CASE tool that cuts maintenance time in half would thusresult in a savings of $50,000 for one project.andM;Besides the obvious time and cost savings it brings, CASE-style maintenancecan also mean more pleasant worl for developers.andP;  Most programmers viewmaintenance--especially when it means picking through someone else's poorlywritten and poorly documented code--as the most laborious and tedious part oftheir jobs.andP;  By reducing the amount of time needed to maintain programs, CASEcan shift the focus of the development staff from maintenance to design.andM;Time previously spent on keeping up the old applications can be spentthinking through and planning new ones.andM;In summary, CASE has the potential to improve the quality of the applicationsproduced by the staff, to create applications that better fill the needs ofend users, to make the systems staff's jobs more enjoyable, to cut the timespent in maintaining systems and to improve the documentation of the entireprocess.andM;With such outstanding possibilities for improving the operations of systemsdevelopment efforts, CASE may seem like the answer to all of a system'sproblems.andP;  It isn't.andP;  CASE offers striking possibilities for someorganizations and some types of applications, but it is not for everyone.andO;Before diving in, it is worth carefully considering the costs and challengesassociated with CASE.andM;For most commercial organizations, the most difficult part of adopting CASEis the changes in habit and culture that CASE involves.andP;  In manyorganizations, bringing in CASE will require a fundamental rethinking of theapproach to systems development, a change so complete that many analystsliken CASE to adopting a new religion.andM;CHANGE OF THINKINGandM;This change of thinking is necessitated by the traditions that have developedin commercial applications development sites.andP;  Unlike many engineers, forwhom writing software is almost an extension of the task of engineering, mostdevelopers of commercial software look at software development as anindividual creative process not necessarily improved by the imposition ofexternal structures or directions.andM;The problem with this personalized, independent style of programming is thatis doesn't mesh well with the logical, ordered tasks that computers are goodat.andM;Remember that CASE is computer-aided software engineering, not softwareartistry.andP;  In order to have the computer take over some of the task ofsoftware development, some standard procedures and methodologies must beinstituted.andM;Over the years, software engineers have developed a number of methodologiesfor performing the tasks in each phase of the software life cycle.andM;For instance, these methods prescribe the techniques to be used to createanalysis and design models, describe the design of databases, and indicatehow testing and verification are to be managed.andP;  They are organanized,ordered ways of handling different aspects of software development.andM;Some of the most widely used methodologies are known by the names of thepeople who introduced or refined them: Yourdon, Gane andamp; Sarson, Hatley andothers.andP;  Some methodologies are also known by the approaches that they use;these include the object-oriented and entity-relationship methodologies.andM;Some CASE tools require the use of a specific methodologies, and others aredesigned to work with any methodology selected by the user.andP;  However, allCASE tools require the use of some methodology.andP;  This is an absolutelycritical point to recognize when thinking about implementing full-fledgedCASE.andP;  Many CASE packages end up simply sitting on a shelf untouched becausethey do not mesh with the development style of their would-be users.andM;To minimize the difficulties in implementing CASE, consultants recommendchoosing a methodology and beginning to use it before trying to learn a newset of CASE tools.andM;This approach may not always be practical, but anything that can be done toaccustom future CASE users to a development methodology will make the CASEintroduction that much smoother.andM;Given the substantial costs associated with CASE technology, it is clear thatthe decision to introduce CASE is not one to be taken lightly.andM;Many managers first look at CASE because they believe their departments arenot working as well as they should.andP;  Good business sense, however, dictatesthat half-million-dollar purchases not be made on the basis of conjecturealone.andM;There must be some measurement of the quality and efficiency of currentdevelopment methods to compare with those that would be achieved using CASE.andM;Claims like &quot;Doubles your productivity&quot; or &quot;Improves efficiency 300 percent&quot;need to be considered very carefully.andP;  As one observer put it, &quot;Measuringefficiency is like measuring pain--it's very hard to say, 'My head hurtstwice as much today as yesterday' with any real certainty.&quot;andM;Any predictions of productivity improvement offered by vendors or othersshould be taken as rough estimates at best.andM;Although quantifying the productivity of a staff of programmers and systemsanalysts is not easy, it is worth some effort.andP;  Decisions about CASE for anyother management decisions about systems personnel) will be easier to makeand far more likely to benefit the organization over the long run if they arebased on some real understanding of the value of the work being produced.andM;An easy place to start is to look at how many complete, functioningapplications are produced each year.andP;  Not all applications are of equalcomplexity, of course, so this number is only a rough start.andP;  But it isimportant to remember that the end result of all development work should becompleted, relatively bug-free applications, not just lines of code.andM;Next, find out how many of the applications developed during the year areactually used.andP;  This number may come as a surprise.andP;  A huge number ofapplications--well over half, by some estimates--are never used once they arewritten.andP;  Even worse, one study found that 75 percent of most corporatesoftware development projects are never even completed.andM;It may be that the user who originally requested the programs is no longerwith the company, that the programs do not perform the functions needed bythe user, that they are too clumsy one or that they simply do not meet anyreal business needs of the organization.andM;Budget and schedule overruns can also be indications that problems are notbeing analyzed properly in the first place.andP;  If end users frequently comeback and change the specifications for a project after development is underway, or if developers often underestimate the difficulty of preparingsolutions to end users' problems, red lights and sirens should go off.andM;This is very likely an indication that analysis, design and communicationwith end users are getting short shrift.andM;The time needed to maintain programs is also a good gauge of their quality.andO;How much time per line of code is spent debugging a program?andM;And finally, ask customers (in many cases, these will be in-house users) torate the value of the applications built for them.andM;In some organizations, this will mean requiring departments to &quot;purchase&quot; newapplications by transferring budget dollars.andP;  In others, a briefquestionnaire or a 10-minute conversation with a half-dozen end users willproide this information.andM;Regardless of the particular approach that is used, it is essential to getsome feedback from users about the suitability, usefulness and quality of theapplications developed for them.andM;These kinds of questions will not result in a neat, clean response such as&quot;We are running at 38 percent efficiency.&quot;andP;  But the answers will provide somesolid information about development operations and where they need to beimproved.andP;  They can also help to gauge the effectiveness of CASE or any othertools at helping to improve overall operations.andM;WEIGHING PROS AND CONSandM;After seeing the challenges that CASE brings with it, many managers maydecide they would rather ignore the whole subject and keep doing their jobslike they always have.andP;  If the manager isn't ready for CASE and committed toit, CASE will either fizzle or frustrate.andM;If, on the other hand, dramatically improving the quality of work is a highpriority, and the organization is ready to make the profound changes that maybe necessary, then this is probably a good time to start investing in CASE.andM;Gradually, an organization can introduce new tools and the structuredmethodologies that accompany them, and thus avoid some of the culture shockthat might otherwise accompany the introduction of CASE.andM;Alternatively, a manager might choose to implement a more complete CASEenvironment, but for just a single project.andP;  In this &quot;case,&quot; take care inselecting a project and the staff to work on it, for these choices will havean impact on the final outcome of the project.andM;In selecting staff to work on the first CASE project, it can be tempting topull the least essential people (who are often the least trained and theleast productive) from other assignments to put the on the trial project.andO;Resist this temptation!andP;  Managers don't necessarily need to pull the verybest people off other critical assignments to test CASE, but the morecreative, bright and trained this trial group is, the better the chances ofsuccess.andM;A good project will be of sufficient length and complexity to give the staffa chance to get comfortable with the methodology and tools.andP;  Many consultantsrecommend a project that takes approximately six to nine months to complete.andO;Anything less than this will not be a sufficient amount of time to comparethe critical maintenance phase of the project with and without CASE tools.andM;Whatever the approach, remember that the success of CASE will depend largelyon the readiness of those who use the tools.andP;  As developers and analysts seehow CASE can give them more time for analysis and design and reduce theamount of time spent maintaining code, they may become its most enthusiasticproponents.andM;DOS Losing Favor with CASE UsersandM;All those rows of programmers at VAX sites working happily at their PCs andrunning MS-DOS CASE systems may be on the decline, based on the responses of100 VAX sites to Digital Review's poll on CASE.andP;  The poll results are basedon the responses of 50 users, and 50 non-users considering the purchase of aCASE tool.andM;Among the users, the poll shows that MS-DOS is losing market share to bothVMS and Unix.andP;  Of the respondents who bought a CASE product three or moreyears ago, a full 83 percent bought a system running under MS-DOS.andP;  Amongthose that bought a CASE product less than three years ago, that figuredropped to 77 percent.andP;  Only 35 percent of the respondents who had bought aCASE tool in the past 11 months purchased an MS-DOS product.andP;  Instead, 47percent bought a VMS tool, and 18 percent bought a Unix system.andP;  Clearly,based on this trend, workstations are now playing a much larger role at VAXsites.andM;When it comes to opinions on CASE payback, users and non-users of CASE differsignificantly.andP;  Among the respondents considering the purchase of a CASEtool, more than 46 percent said they were not sure that the payback wouldjustify the investment.andP;  When the same question was asked of the CASE toolusers, only about 20 percent of the respondents said they had somereservations about the payback.andM;Interestingly, more than a quarter of the users who already owned CASE toolssaid the CASE tool technology was still too new, whereas only about 20percent of the group considering the purchase of a CASE tool said thetechnology was still immature.andM;The poll revealed that the reasoning of users and non-users was very similaras far as the time it would take to reap the benefits of CASE tools.andP;  About70 percent of each group indicated that program maintenance would be mucheasier within the next five years with programs constructed with CASE tools.andM;However, there was a noteworthy split concerning the belief that CASE toolshelp to produce a better-constructed program.andP;  A whopping 72 percent of theusers indicated they expect to be producing better-quality programs in lessthan two years.andP;  But only about half of the non-users thought their programswould be better in two years after adopting CASE tools.andM;In regard to documentation, non-users' expectations lagged behind theexpectations of those with a CASE product.andM;Seventy percent of the users polled predicted they would have improveddocumentation in less than two years, whereas only 44 percent of thenon-users indicated they expected better documentation in the same timeframe.andP;  The division was similar, though not as pronounced, concerning thespeed of development time.andP;  More than 54 percent of the user respondents saidthey would be producing programs faster within two years, compared with 48percent of the non-users.andM;The poll also revealed that 55 percent of the non-users expect to purchase aVMS CASE tool, and 8 percent said they expect to purchase a Unix system.andO;Another 16 percent want to buy a DOS system, and 4 percent said they wouldlike a tool that ran on the Macintosh.andP;  A large chunk--18 percent--said theyhad no preference.andM;When the entire installed base of CASE products at user sites isweighted--taking into account products purchased between now and more thanthree years ago--the dominant operating system is MS-DOS by far.andP;  Among allthe users, 51 percent said that they prefer MS-DOS, 31 percent said theyprefer VMS, 8 percent expressed a preference for Unix, and 10 percent saidthat they had no preference.andP;  Less than 1 percent preferred products that ranon the Macintosh.andM;Nonetheless, when the time of purchase is taken into consideration, the pollshows that MS-DOS purchases have fallen 42 percentage points in less thanthree years.andP;  In the same time frame, VMS has advanced 24 percentage points,or 104 percent during the same period.andP;  Unix, however, has gained the most,relatively speaking.andP;  In less than three years, Unix CASE products at VAXsites went from nothing to an 18 percent share of the market.andP;  Unix CASEtools have grown at an annual rate of 80 percent.andP;  VMS grew only 17.5 percentin two years, and MS-DOS dropped 30 percent in the same period.andM;School Bells Ring for Fledgling CASE Application UsersandM;Like many owners of CASE product licenses, the Corporation for PublicBroadcasting in Washington, D.C., found that CASE did not have a positiveeffect on application development right away.andP;  In fact, CASE had littleimmediate effect at all, for as Dean J. Muench, manager of computerinformation services, said, &quot;The tool was basically lying here, rusty anddusty in the corner.&quot;andM;When Muench began working for the organization two years ago, the corporationhad already licensed CorVision from Cortex of Waltham, Mass., but no one inthe company was adequately trained in how to use it, and the singleVAX-11/780 they had for development work didn't provide the needed power.andM;An even bigger problem, Muench said, was that no one had seriously thoughtthrough the underlying question of which systems the staff of threeprogrammer/analysis should be developing.andM;The addition of a VAX 8530 gave them the power boost necessary to start usingthe CASE package seriously, and some training put the development staff in aposition to begin using the tools.andM;The result, Muench said, was a significant improvement in the entiredevelopment process.andM;&quot;It takes something like a quarter of the time to put together an applicationwith this tool, compared with what it would take with a 3GL on top of aDBMS,&quot; Muench said.andP;  &quot;The life cycle isn't shortened that much though,because we use that time [saved in programming] to lavish attention on theusers and to really extract from them full, complete, meaningfulspecifications.&quot;andM;According to Muench, the ability to create prototypes quickly and easily hasbeen particularly useful.andP;  In the analysis phase, prototypes &quot;have been atool for us to get people to talk about what they do, what they need from thereport, what they want on the screen,&quot; Muench said.andP;  &quot;And because we can puttogether a screen or a report fairly quickly, we can afford to throw it outif it isn't what they want.&quot;andM;Muench said application maintenance has also been greatly simplified.andM;&quot;We have some very large, very variable application, and each year we cancount on significant changes,&quot; he said.andP;  Using CASE, &quot;when we make a change,all the implications of that change are rigorously detected by the tool,&quot; headded.andP;  &quot;For example, if one of the characteristics of a piece of data, suchas its length, changes, then the tool is going to let all the screens, menus,reports and other software that reference it know that that field is now 20characters instead of 18.andM;&quot;It takes less time to maintain an application because a programmer/analystdoesn't have to find all those references.andP;  And because it's easier to do,users are more likely to ask for changes that will make the applications moreuseful,&quot; he said.andM;Using CASE has required a greater commitment to training than is necessary inmost traditional development environments.andM;&quot;It is almost impossible for me to hire people with experience [with a]particular tool, and it's still difficult to find people with experience witha CASE tool in general,&quot; Muench said.andM;The solution, he said, is to hire people with a willingness to learn and totrain them on the job.andM;Overall, however, Muench said his experience with CASE has been extremelypositive.andM;&quot;I basically have a new staff, but we're under budget, we're on schedule andwe're rendering fine applications.&quot;andP;  Without CASE, he said, &quot;There's no waywe could get done as much as we get done with three people.andP;  There'sabsolutely no question about it.&quot;andM;COOPERS andamp; LYBRAND TURNS TO CASEandM;Cooper andamp; Lybrand, an accounting and consulting company in New York, turned toCASE as a way to consistently improve the quality of the large number ofsystems it develops for its clients.andP;  However, no single company was able tooffer an integrated CASE package that met the consultancy's needs, explainedMike Bealmear, a partner and the national director of information technologyconsulting at Coopers andamp; Lybrand.andP;  The company therefore spent considerabletime and effort putting together a complete CASE environment.andM;The CASE system Coopers andamp; Lybrand is now using incorporates a number ofoff-the-shelf products, including Design Aid from Nastec, IDEF from Dacom,APS from Sage, Telon from Pansophic and others.andP;  Coopers andamp; Lybrand developedmuch of the glue that connects these programs, as well as a number of newtools that it will be marketing in the near future, Bealmear said.andP;  Thecompany's developers work on interconnected personal computers.andM;Bealmear said his company has seen some added efficiency as a result of usingCASE, but the primary advantage has been the capability to build betterapplications.andM;&quot;We're seeing significant quality improvement in our deliverables[shipments],&quot; Bealmear said.andP;  &quot;In analysis of the number of errors per 1,000lines of code, we've seen a drop of about 80 percent,&quot; he said, explainingthat clients who have received CASE-developed applications have also requiredless reworking of applications than before.andM;These improvements have affected the bottom line, Bealmear said.andP;  &quot;On largeprojects, those of about $2 million or more, we've seen an additional 3percent to 4 percent of profit,&quot; he said.andP;  &quot;If the profit margin was already8 percent or 9 percent and you add 3 percent, that's really significant.&quot;andM;Despite his company's success with CASE, Bealmear said, he has seen a numberof other companies that did not fare as well.andP;  Some users, for instance,begin to rely too heavily on the tool to solve all of their design anddevelopment problems.andP;  &quot;No tool will solve a bad design, but people begin torely on the tool as a replacement for good judgment,&quot; he said.andP;  Somemanagers, he added, exacerbate this problem by hiring less-skilled people.andM;Other problems have arisen when companies have bought CASE without having asound methodology in place or without having first done an honest evaluationof their requirements, Bealmear said.andP;  These companies &quot;just buy somethingbecause it's sexy&quot; and end up disappointed, he said.andM;Finally, Bealmear said, some users don't get the results they expect fromCASE because the products they need just aren't there.andP;  &quot;Right now, CASE istoo hard.andP;  You have to buy one of these, and a couple of these, and hope thatthey will work....Buying one element alone doesn't make it effective.&quot;andM;NORANDAL MAKES THE CHANGEandM;Norandal USA, an aluminum-products manufacturer based in Brentwood, Tenn.,andO;was faced with a monster of a development problem.andP;  The company had beenformed by the acquisition of several smaller companies, each of which was runwith software incompatible with the other companies' software, explainedMichael Lowery, president of Order Processing Technologies in Framingham,Mass.andM;&quot;They made the decision to throw out everything they had and set off inpursuit of a suite of integrated applications to manage their manufacturing,&quot;Lowery said.andP;  Finding nothing satisfactory after a year's search, &quot;theydecided to build it, to do it all at once, like a giant spring cleaning,&quot; hesaid.andP;  &quot;That brought them to the world of CASE.&quot;andM;Norandal contracted with Lowery's company to build the software with which torun the company.andP;  In addition to order processing, general ledger, accountsreceivable, accounts payable, purchasing, invoicing and other back-officefunctions, the system that Order Processing Technologies was to develop wouldmanage all of the shop-floor systems, such as plant loading, shiftscheduling, shop-floor data entry and lot traceability.andP;  The developers weregiven a year to complete the system.andM;&quot;There were a lot of people who told the people at Norandal that they weresmoking a strange-colored weed to try to do what they were, but we will havedeveloped it all by the end of the year,&quot; Lowery said.andM;The Norandal system will use Cortex's CorVision running on VAXes.andP;  Whencompleted, the system will run on five interconnected VAXes in differentlocations.andM;&quot;We are about two months behind out of 10.andP;  People ask me how long it wouldtake if we had to do it the old way, and my answer is that you would never bedone, because things change so quickly that you can't keep up.andP;  We probablywould have spent 20 times as long,&quot; Lowery said.andM;&quot;Without a tool like this, we just couldn't be in the business we're in,&quot; hesaid.andM;This Company Is Banking on CASEandM;The National Bank of Throgmorton-on-Wells is the U.S.andP;  branch of a UnitedKingdom banking house that traces its roots back to the ransoming of richardCoeur de Lion in 1192 from the Austrians.andP;  Is MIS group contains 10programmer/analysts in the commercial-lending applications group.andP;  Theaverage salary for the 10 is $45,000 per year, and the bank's burden rate onemployees' salaries for benefits such as health insurance is 50 percent.andM;To boost productivity within the commercial-lending applications group,Throgmorton-on-Wells' vice president of information systems proposespurchasing a CASE package priced at $150,000.andM;In addition, each of the programmer/analysts will require a workstationpriced at $12,000 to run the package.andP;  Software support fees will be expensedat $22,500 per year, starting in the first year.andM;Maintenance support for the workstations, which includes both the hardwareand the operating system, will be $12,000, starting in the second year afterthe one-year warranty is over.andP;  Costs of both hardware and softwaremaintenance are expected to escalate 3 percent annually.andM;To effectively utilize the new CASE technology, Throgmorton-on-Wells' V.P.andO;of information systems realizes the programmer/analysts will requireconsiderable training.andP;  He therefore contracts a team of consultants for$50,000 to immediately provide 10 days of education for each staff member.andO;In addition to the cost of the consultants, the financial impact of takingeach of the programmer/analysts out of the production loop for 10 days is$25,962.andM;Following corporate guidelines, only the hardware will be depreciated in astraight line over a five-year period.andM;In calculating the anticipated income returns from acquiring the CASEpackage, Throgmorton-on-Wells V.P.andP;  of information systems conservativelyestimates that only a 5 percent productivity boots will occur in the firstyear as the programmer/analysts become used to working with CASE tools andlearn the new programming methodology.andM;He predicts the productivity boost will grow to 10 percent in the secondyear, 20 percent in the thir year, and then stabilize at 30 percent in thefourth and fifth years as systems built using CASE require less maintenanceprogramming.andP;  In making these calculations, he also notes that staff salariesare projected to grow at an annual rate of 7 percent.andM;Following these assumptions, Throgmorton-on-Wells' V.P.andP;  of informationsystems calculates that the CASE investment will generate a net positive cashflow of $156,35 over the five-year period.andP;  Throgmorton-on-Wells is getting a10 percent return on very conservative investments, so the V.P.andP;  discountsthis return at 10 percent and gets a positive net present value of the cashstream of $20,731.andP;  In addition, he calculates that the internal rate ofreturn for the project, the discount rate at which the cash flow breaks even,is 12.3 percent.andM;The bank's conservative 10 percent return on investments makes the projectviable.andP;  Were the bank to follow a more aggressive scheme, however, andinvest at a 15 percent rate of return, the project would not be favorable.andO;</TEXT></DOC>