<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-210-135 </DOCNO><DOCID>10 540 516</DOCID><JOURNAL>IBM Systems Journal  March 1991 v30 n1 p34(18)* Full Text COPYRIGHT International Business Machines Corp. 1991.andM;</JOURNAL><TITLE>ESA/390 interpretive-execution architecture, foundation forVM/ESA. (technical)</TITLE><AUTHOR>Osisek, D.L.; Jackson, K.M.; Gum, P.H.andM;</AUTHOR><SUMMARY>The interpretive-execution facility of Enterprise SystemsArchitecture/390 (ESA/390) provides an instruction for theexecution of virtual machines.andP;  This instruction, called STARTINTERPRETIVE EXECUTION (SIE), was initially created forvirtualizing either System/370 or 370-XA architectures, and wasused later for virtualizing ESA/370 and ESA/390 architectures.andO;SIE has evolved to provide capabilities for a number ofspecialized performance environments.andP;  Most recently it providesfor the unique requirements of Enterprise SystemsArchitecture/Extended Configuration (ESA/XC) virtual-machinearchitecture.andP;  This comprehensive set of capabilities in thearchitecture serves as the platform for the ability of VM/ESA toprovide functions in virtual machines for end users and systemservers.andP;  This paper describes the evolution of SIE and outlinesuse of the various capabilities in VM/ESA.andP;  (Reprinted bypermission of the publisher.)andM;</SUMMARY><DESCRIPT>Company:   International Business Machines Corp. (Products).andO;Ticker:    IBM.andO;Product:   ESA/390 (Operating system) (Design and construction)VM/ESA (Operating system) (Design and construction).andO;Topic:     Virtual MachinesInstruction ExecutionSoftware DesignMainframe ComputersOperating SystemsTechnology.andO;Feature:   illustrationchart.andO;Caption:   Host access-register translation (host ART). (chart)Virtual-machine simulation in CP. (chart)Mapping of host and guest levels under vSIE. (chart)andM;</DESCRIPT><TEXT>ESA/390 interpretive-execution architecture, foundation for VM/ESAandM;The Virtual Machine/Enterprise Systems Architecture[TM] (VM/ESA[TM]) productuses the ESA/390[TM] interpretive-execution facility [1,2] to establish thevirtual-machine environment.andP;  In this environment, the processor directlyexecutes most of the functions of the virtual machine.andM;The evolution of the interpretive-execution architecture, including thespecial facilities for high-performance virtual machines provided with theProcessor Resource/Systems Manager[TM] (PR/SM[TM]) feature, is reviewed.andP;  Thepurpose of each development is discussed, and the VM Data Spaces architectureis described.andP;  VM Data Spaces is the architecture underlying the recentlyannounced Enterprise Systems Architecture/Extended Configuration (ESA/XC)virtual-machine architecture.andP;  andlsqb;3andrsqb;  Finally, this paper describes theprocedures used by the control program (CP) portion of VM/ESA [4] to manageinterpretive execution and control virtual-machine functions that are notprovided by the real machine, including the support of the ESA/XCarchitecture.andM;Interpretive-execution architectureandM;Within this paper, the term guest refers to any virtual, or &quot;interpreted&quot;machine.andP;  andlsqb;5andrsqb;  The control program directly managing the real machine isreferred to as the host and is responsible for establishing the guestexecution environment.andP;  The machine is placed in the interpretive-executionmode by the host, which issues a single instruction, START INTERPRETIVEEXECUTION (SIE).andP;  In this mode, the machine provides the functions of aselected architecture.andP;  This architecture may also be available on a realmachine, such as System/370[TM], 370-Extended Architecture (370-XA),Enterprise Systems Architecture/370[TM] (ESA/370[TM]), or Enterprise SystemsArchitecture/390[TM].andP;  Alternatively, the architecture may be providedexclusively in the virtual-machine environment, such as the ESA/XCarchitecture.andP;  The functions provided include execution of privileged andproblem-program instructions, address translation, interruption handling, andtiming among other things, and I/O in some cases.andP;  The machine is said tointerpret the functions that it executes in the context of the virtualmachine.andP;  Special-purpose hardware allows interpretation to proceed at speedscomparable to &quot;native&quot; execution.andP;  (Native denotes the architecture outsidethe interpretive environment.)andP;  Similarly, many types of interruptions areinterpreted--presented directly to the guest by the machine--without hostintervention.andM;In the virtual-machine environment, the guest program perceives the fullcomplement of functions defined for the designated architecture.andP;  Most of thefunctions are provided in the form of the interpretive-execution facility.andO;The remaining functions are provided by the underlying host control program,called CP for VM/ESA, through a process called simulation.andP;  Except for theprocessing time required, simulation attempts to &quot;execute&quot; guest functionstransparently, so that it is indistinguishable to the guest program whether afunction is performed by the machine or the host.andM;The operand of the SIE instruction, called the state description, containsinformation relevant to the current state of the guest.andP;  When execution ofSIE ends, information representing the state of the guest, including theguest program status word (PSW), is saved in the state description beforecontrol is returned to the host.andP;  This information is used and modified bythe host during simulation and is used later to resume execution of theguest.andP;  Other information in the state description determines the mode andother environmental conditions in which the guest is to execute.andM;The ESA/390 interpretive-execution architecture can place the machine in oneof three architecture interpretation modes: System/370, ESA/390, or VM DataSpaces mode.andP;  However, these three machine modes supply the functions neededfor offering five modes to guests.andP;  In addition to System/370 and ESA/390,370-XA and ESA/370 are naturally provided, each as a subset of ESA/390.andO;ESA/XC arises from the cooperation between the machine in VM Data Spaces modeand software support in VM/ESA CP.andM;While in interpretive-execution mode, a virtual machine is constrained to aportion of the real-machine resources, as allocated by the host.andM;* Guest storage is confined either to some portion of host real storage or tohost virtual address spaces controlled by the host system.andM;* Host enabled and disabled states are generally undisturbed by execution ofthe guest.andM;* Host timing facilities are also undisturbed; instead a second set isprovided for the guest.andM;* One complete and logically separate set of control registers is maintainedby the machine for use by the host and another is maintained for use by theguest.andP;  Other registers are shared between the host and guest.andM;This protection of the host from interference by the guest permits the hostto meet its primary responsibility of efficiently parceling out the realresources to multiple guests, and prevents one guest from interfering withanother.andM;When first introduced with 370-XA, SIE provided two similar but distinctarchitectures for the virtual machine.andP;  One was the System/370 architecture.andO;Because of earlier successes with several assists for Virtual Machine/370(VM/370), full machine interpretation of nearly all the privileged operationswas provided, with the notable exception of the I/O instructions.andP;  The secondinterpreted architecture was the new 370-XA architecture itself.andP;  Offeringboth architectures side-by-side in virtual machines provided a migration pathfrom the earlier architecture as well as a test environment for the newarchitecture.andP;  As was the case with the native architecture,interpretive-execution architecture subsequently evolved to incorporateESA/390 as a replacement for 370-XA and ESA/370.andM;Representing guest absolute storage.andP;  Fundamental to any architecture is themethod for providing access to storage.andP;  The method for representing absoluteandlsqb;6andrsqb; storage is a key consideration for virtual machines.andP;  Two basic storagemodes are provided by the interpretive-execution architecture:preferred-storage mode and pageable-storage mode.andP;  In preferred-storage mode,a contiguous block of host absolute storage is assigned to the guest, whereasin pageable-storage mode, dynamic address translation (DAT) [7] at the hostlevel is used to map guest main storage.andM;Preferred-storage mode.andP;  Existing batch systems maintain relatively high I/Orates and are efficient managers of real storage.andP;  For these guests,preferred-storage mode is a good means to provide production levels ofoperation.andP;  In this mode, the lower addresses of the machine storage arededicated to the guest.andP;  However, this scheme limits the number of guestsoperating with this level of performance to one.andM;The I/O for these guests, or at least their channel programs, is handleddirectly by the machine.andP;  The interpretive-execution environment assures thatthe host program is immune from errant guest operations, including errant I/Ooperations.andP;  This is an important characteristic: preferred-storage modeassures the integrity of the overall system while at the same time allowingthe guest to operate with a subset of the real-machine resources atnear-native performance levels.andM;With early releases of VM, the special preferred-storage-mode guest paid aperformance penalty for the privilege of executing as a virtual machine.andO;This was due largely to the host-control-program service of handling I/Oinstructions and returning the interruptions.andP;  For VM/370, the PreferredMachine Assist (PMA) stepped into this breach.andP;  With VM/XA, SIE Assist wasintroduced to provide machine execution of guest I/O instructions and routeI/O interruptions directly to the guest.andP;  SIE Assist performed the I/O forboth System/370-mode and 370-XA-mode guests.andP;  SIE Assist also provided theauthorization checks needed to preserve integrity for the host system andother guests.andM;Pageable-storage mode.andP;  Pageable-storage mode is the second method providedby the interpretive-execution architecture for representing guest absolutestorage.andP;  The host has the ability to scatter the real storage ofpageable-storage-mode guests to usable frames anywhere in host real storageby using the host DAT, and to page guest data out to auxiliary storage.andP;  Thismethod provides flexibility when allocating real-machine resources whilepreserving the expected appearance of a contiguous range of absolute storagefor the guest.andM;Guest dynamic address translation.andP;  A virtual-machine environment may callfor application of DAT twice: first at the guest level, to translate a guestvirtual address through guest-managed translation tables into a guest realaddress, and then, for a pageable guest, at the host level, to translate thecorresponding host virtual address to a host real address.andM;In VM/370, the need to effect two levels of address translation for pageablevirtual machines with guest DAT active was satisfied by means of shadowtranslation tables, segment and page tables built by the host reflecting thecombined results of the two mappings.andP;  The increased addressing capacityoffered by 370-XA threatened to limit the performance achievable throughshadow mechanisms, because of the possible sparseness of address referencesover the much larger two-gigabyte address range, and because of the largertranslation-table sizes.andP;  Another consideration was the cost to maintain andensure the integrity of the shadow tables.andM;These concerns led IBM to forsake shadow tables for general use ininterpretive execution, in favor of performing both levels of translation inthe machine.andP;  As with the native architecture, translation-lookaside buffersare built into the machine to retain the results of previous addresstranslations, and so speed the resolution of addresses in pages that arerepeatedly referenced.andM;Controlling guest execution.andP;  In certain cases, the host must intercede inoperations normally delegated to the machine.andP;  For this purpose, the statedescription includes controls settable by the host to &quot;trap,&quot; or intercept,specific conditions.andP;  Interception control bit request that the machinereturn control to host simulation when particular guest instructions areencountered.andP;  Intervention controls capture the introduction of an enabledstate into the PSW, so that the host can present an interruption which itholds pending for the guest.andP;  Intervention controls may be set asynchronouslyby the host on another real processor while interpretation proceeds.andP;  Themachine periodically refetches the controls from storage, so that updatedvalues will be recognized.andP;  Guest interruptions can thereby be made pendingwithout prematurely disturbing interpretation.andM;Guest multiprocessing.andP;  In contrast with earlier virtual-machine support, theinterpretive-execution architecture supported guest multiprocessing from thebeginning.andP;  As a consequence, a virtual machine that employes multiprocessingreceives a substantial boost in capacity.andP;  Prefixing, or the ability toassign the first 4K range of addresses to a distinct 4K-byte block ofabsolute storage for each virtual CPU, is an integral part ofmultiprocessing.andP;  Thus, with interpretive execution, prefixing is standard.andM;Simulating guest instructions in a multiprocessing virtual-machineenvironment requires special consideration.andP;  Simulation is provided by thehost program following an interception from one of the virtual CPUs.andP;  Thissimulation may require resolving a guest virtual address.andP;  This is typicalwhen the guest is Multiple Virtual Storage (MVS).andP;  However, if the result ofthe translation is held even briefly in a host register or table, thatregister or table constitutes a (virtual) translation-lookaside buffer.andP;  Whatif another virtual CPU issues an INVALIDATE PAGE TABLE ENTRY (IPTE)instruction during this brief period, in preparation for reassigning theguest real page frame?andP;  The IPTE might invalidate the translation held by thehost on behalf of the first guest CPU.andP;  If the IPTE were allowed to finishand the guest program to continue executing, the guest would erroneouslyconclude that all references to the target guest virtual address using theold page-table entry (PTE) contents were complete.andP;  An interlock bit isprovided for dealing with this situation.andP;  IPTE is required to test and setthe interlock bit by interlocked means.andP;  The host agrees to set thisinterlock before simulating guest DAT (in the course of simulating a guestinstruction) and to leave it set until it has finished using the results ofthat simulation (the &quot;lookaside&quot;) to access guest storage.andP;  If the page-tableentry is locked via the interlock bit when an IPTE instruction isinterpreted, the IPTE instruction is intercepted to permit host programresolution.andM;To maximize parallelism in a virtual multiprocessor, VM/ESA manages the wordcontaining the IPTE interlock bit as a shared/exclusive lockword.andP;  Eachsimulation which performs the guest DAT obtains a share of the lock; IPTEinterpretation and simulation obtain an exclusive hold.andP;  Thus multiple DATsimulations can occur simultaneously, and only a guest IPTE causesserialization.andM;Multiple high-performance guests.andP;  With achievable performance for thepreferred-storage-mode guest near native performance, as described earlier,attention turned to providing the same for more than one guest.andP;  MultipleDomain Facility[TM] (MDF[TM]) was the first product to achieve concurrentexecution of two or more operating systems with high performance on a singleshared central computing complex.andP;  However, IBM was also working in the samedirection, leading to the Processor Resource/Systems Manager (PR/SM) feature.andO;andlsqb;8andrsqb;  PR/SM permits either flexible hardware partitioning or multiplehigh-performance guests under VM.andP;  The value of this development, of course,lies in the ability to reassign real resources dynamically with minimalperformance penalty, for use under a variety of different architectures orsystems.andP;  Initially up to four high-performance guests were supported, eachrunning in a separate zone.andP;  This was subsequently extended to six zones.andM;Zone relocation.andP;  The most important consideration in extending support fromone preferred-storage-mode guest to multiple guests is the means fortranslating addresses for I/O purposes.andP;  With high-performance I/O devices,little time is available to perform the translation; in many cases pagefaults would result in loss of data.andP;  In these circumstances asingle-register-translation mechanism serves very well.andM;Single-register relocation, or zone relocation, uses two values to translatea guest absolute address to a host absolute address.andP;  One value is an upperlimit, the maximum value in the zone.andP;  The second value is a lower limitwhich is added to the guest absolute address to produce a host absoluteaddress.andP;  The two values thus define a zone between a beginning and endingaddress within the absolute storage available on the machine.andM;Region relocation and interpreted SIE.andP;  In the original offering whichpermitted multiple high-performance guests, the channel used zone relocationwhile the CPU continued to use DAT to map contiguously the same storagespecified for the zone.andP;  With this arrangement, all guest systems except forthe case when VM/ESA (or VM/XA) is a guest of itself could be provided atacceptable production levels of performance.andM;When VM/ESA is a guest of itself, there are three levels of programs: VM/ESAas the host, VM/ESA as the guest (called a first-level guest), and guests ofthe VM/ESA first-level guest.andP;  These second-level guests might themselvesoperate with the DAT.andP;  In this situation, address translation involvesrepetitive application of DAT, potentially requiring 27 storage references totranslate an address into the corresponding absolute machine location andaccess the data.andP;  In addition, execution of second-level guests requireshandling two levels of interpretive execution; software simulation of thesecond level of interpretive execution brings additional overhead.andP;  The costsof repeated translation and nested interpretive execution are clearlylimiting factors in the performance achievable for VM/ESA as a guest.andM;Two new machine functions, Region Relocation and Interpreted SIE, wereintroduced to address these problems.andP;  Region Relocation replaces thelowest-level application of the DAT with zone relocation, as is used in thechannel; this reduces the 27 storage references for DAT to the original nineneeded for a first-level guest, plus nine additions.andP;  Interpreted SIE allowsthe machine to institute another instance of interpretive execution when themachine is already in interpretive-execution mode; that is, the guest SIEinstruction and the second-level guest execution it requests can beinterpreted by the machine, rather than simulated by the host.andM;These capabilities together provide performance levels for second-leve gueststhat are comparable to the levels provided for first-level guests.andP;  As aresult, one release of VM can run as a guest of another VM system atacceptable performance while migration to the new release occurs in stages.andM;Performance refinements for CMS guests.andP;  While there has been heavy focus onhigh-performance multiserver and batch guests, the Conversational MonitorSystem (CMS) has not been neglected.andP;  CMS is the personal-choice system to alarge population of interactive users, and steps have been taken in theevolution of the architecture to support CMS as well.andM;Expedited SIE subset.andP;  VM/ESA uses the SIE instruction to specify a virtualmachine for each CMS user.andP;  Similar to the high-performance cases, there arecharacteristics or uses of CMS that may be classified as typical.andP;  Byoptimizing the real-machine design for the most frequently encounteredcharacteristics of a class of virtual machines, machine performance can beimproved.andP;  Expedited SIE subset provides such optimizations for CMS guests.andO;This development capitalizes on the fact that certain aspects of thearchitecture are used infrequently by CMS.andP;  For example, CMS never turns onDAT.andP;  The overhead for initializing these infrequently-used functions istherefore by-passed.andP;  Instead, attempts to use uninitialized functions aredetected, and the cost to initialize any of these functions is incurred onlywhen necessary.andM;SIE storage-key facility.andP;  The SIE storage-key facility is an enhancement tointerpretive execution which defines an architected location in host tablesfor the key values of nonresident storage.andP;  This allows the machine tointerpret guest instructions like SET STORAGE KEY for nonresident pages,rather than passing control to host simulation.andM;VM Data SpacesandM;VM Data Spaces is an extension to the interpretive-execution architecturethat allows a pageable guest that does not otherwise use DAT to access datain multiple host address spaces.andP;  The alternate spaces could be &quot;data spaces&quot;created by this or other virtual machines, or primary spaces of other virtualmachines.andP;  This memory-sharing mechanism is more efficient thanmessage-passing protocols for communicating among virtual machines.andM;Access registers in ESA/370 and ESA/390.andP;  The ESA/370 architecture introducedaccess registers.andP;  These registers allow a problem-state program to refer todata in multiple address spaces concurrently, without supervisorintervention.andP;  andlsqb;9,10]  The access registers offer an improved method to movedata between two address spaces.andP;  They also allow the use of the completeinstruction set to operate on data in multiple address spaces.andM;In ESA/370 and ESA/390, as in System/370 and 370-XA, the base (B) field orregister (R) field of an instruction designates a general register.andP;  In theaccess-register mode of ESA/370 and ESA/390, the same-numbered accessregister is used during access-register translation (ART) to determine theaddress space of the operand.andM;Access-register translation uses an access-list-entry token (ALET) in anaccess register to derive the segment-table designation (STD) to be usedduring dynamic address translation (DAT).andP;  The STD corresponds to an addressspace.andM;Access registers are also available to a guest in ESA/390 (or ESA/370) mode.andO;The host is responsible for loading the guest's access-register values beforestarting interpretive execution, and for saving them (and restoring hostvalues) afterward.andP;  The guest operating system must build the guest virtualaddress spaces and associated control structures, just as it would natively.andO;Pages in these address spaces may be mapped to areas of guest main storage orpaged by the guest supervisor to auxiliary storage.andM;Motivation for VM Data Spaces.andP;  On an operating system like Multiple VirtualStorage/Enterprise Systems Architecture (MVS/ESA [TM]), the access registersintroduced with ESA/370 bring a powerful new capability: the addressing ofdata in multiple address spaces in a sequence of instructions, or even in thesame instruction, without control-program intervention.andP;  MVS/ESA runsprograms with DAT enabled, so that the virtual addresses each programreferences are translated through MVS-maintained constructs into realaddresses.andP;  Translation exceptions interrupt to MVS, which then pages in therequired data.andP;  In this environment, access registers offer several benefits:andM;* Programs can directly manipulate much larger amounts of data.andM;* Programs have unrestricted access beyond the two-gigabyte primary addressspace.andP;  The full instruction set can be used to operate on data in any of themultiple spaces.andM;* Individual programs can share data, as authorized by the owning program.andO;This is enforced by the operating system.andM;* Programs can segregate data more logically, keeping similar or related datain the same space, to facilitate controlled sharing.andM;The capabilities which access registers offer are attractive.andP;  However, thestructure of VM is substantially different from that of MVS.andP;  VM has alwaysbeen a &quot;two-tiered&quot; system: The control program (CP) component of VM createsa separate virtual machine for each logged-on user.andP;  Application programs rununder the Conversational Monitor System (CMS), a single-user &quot;second-level&quot;operating system running within the user's virtual machine.andP;  A CMS virtualmachine can support an interactive user, a system server like a file-systemmanager or network spooler, or a private server such as an advancedprogram-to-program communication (APPC) peer.andM;CP manages system resources, establishes the virtual-machine environment, andenforces isolation among the simulated machines.andP;  CMS assumes theresponsibility for application services such as file and program management,and for interacting with the end user.andP;  CP applies authorization controls tobound the user's (virtual machine's) activities; CP uses architecturalfacilities like DAT and guest extent checking, as described above, to keepthese boundaries secure.andP;  Conversely, CMS enforces few controls over theapplication program: Programs under CMS run in (virtual) supervisor state.andO;CMS makes some use of storage keys to prevent inadvertent damage, but a&quot;willful&quot; program can always circumvent CMS and assume control of the virtualmachine.andP;  According to traditional VM philosophy, each user's machine is theuser's own.andP;  CP ensures that the acts of an errant or malicious program areconfined to the virtual machine in which the program is run.andM;Moreover, CMS manages only the linear storage of a single virtual machine;that is, CMS runs without enabling DAT and does not manage (page or swap)virtual storage.andP;  These tasks are the domain of CP.andM;In short, the border between CP and CMS is the boundary for both authorityand virtual-storage management.andP;  The VM Data Spaces facility is tailored toVM's unique two-tiered structure.andP;  It allows CP, the arbiter ofauthorization, to build the ART constructs which permit individual virtualmachines to access multiple host virtual (i.e., guest absolute) addressspaces.andP;  CP can pass back to the virtual machine an ALET designating theaccess to a space, and the program in the virtual machine (CMS or anapplication program) can then use the ALET to address an alternate guestabsolute space.andP;  Since the ALETs used by the guest are translated through theART constructs of CP, counterfeit ALETs have no adverse effect beyond theauthorized scope of the individual guest.andP;  In ESA/390 real-machinearchitecture, ART is performed first to identify the address space, and thenDAT is performed on that space's tables to find the real address of the data;likewise, in the VM Data Spaces architecture, host ART identifies the hostvirtual (guest absolute) space, and host DAT then derives the host realaddress of the target.andM;In contrast to the use of access registers by an ordinary ESA/390 guest(e.g., MVS/ESA), this scheme extends the scope of access to all addressspaces which CP manages, rather than just those built by the virtual-machinesupervisor.andP;  It thus allows controlled memory sharing across virtual-machineboundaries.andP;  The burden of authorization rests within CP, which cannot becircumvented.andP;  Finally, VM Data Spaces removes the limit of two gigabytes ofguest absolute (host-managed) storage accessible to CMS.andM;PSW modes under VM Data Spaces.andP;  Under VM Data Spaces, a guest may be ineither primary-space mode or access-register mode.andP;  Each mode determines howguest operand addresses are translated.andP;  In primary-space mode, guest operandaddresses are resolved in the host primary address space.andP;  In access-registermode, guest operand addresses are resolved in any of up to 16 differentaddress spaces concurrently, according to the values which the guest managesin the access registers.andP;  In either mode, instructions are fetched from thehost primary address space.andP;  This is consistent with the handling ofinstruction addresses in the other modes of interpretive execution.andM;Address translation in primary-space mode is identical to address translationfor a pageable-mode guest in ESA/390 mode with guest DAT off.andP;  The contentsof access registers are ignored, and host access-register translation (hostART) is not applied.andM;When a guest is in access-register mode, operand addresses are called hostaccess-register-specified (host AR-specified) addresses.andP;  A host AR-specifiedaddress consists of an ALET in an access register and an offset.andP;  The ALETdesignates an address space, and the offset selects a location within thatspace.andP;  Guest access-register translation and guest dynamic addresstranslation are not used.andP;  Instead, host AR-specified addresses aretranslated through host access-register translation and host dynamic addresstranslation to produce a host real address.andP;  Figure 1 contrasts the addresstranslation processes for host primary-space addresses and host AR-specifiedaddresses.andM;The contents of an access register designate the host virtual address space.andO;If the access register contains zero, only guest prefixing, host DAT, andhost prefixing are applied; the address is in the primary space.andM;Host access-register translation.andP;  When an access register contains a valueother than zero and the register contains a value other than zero and theguest is in access-register mode, the operand address specified refers todata in a host AR-specified address space.andP;  The contents of the base registertogether with the displacement and the index register, if applicable, areused to determine the offset of the data within the address space.andM;To resolve the address space of the operand, host access-register translation(host ART) is applied.andP;  Host access-register translation is similar to theaccess-register-translation process used in ESA/390 mode.andP;  Host ART uses anaccess-list-entry token in an access register to obtain the segmentabledesignation (STD) to be used during host dynamic address translation.andP;  Figure2 shows a flow chart of the host ART process.andM;During host ART, the designated access register contains an access-list-entrytoken.andP;  This token, which is obtained using VM/ESA services, has anaccess-list-entry number.andM;The origin of the primary address-space number (ASN) second-table entry(primary ASTE) [11] is obtained from a host control register.andP;  An ASTE isassociated with each address space and has the same format in VM Data Spacesas in ESA/390.andP;  The primary ASTE contains the origin of the access list usedduring host access-register translation (host ART).andP;  An ASTE is also usedlater in the host ART process.andP;  This use will be discussed later in thissection.andM;An access list contains entries which represent the addressing capabilitiesof the guest.andP;  The access-list-entry number in the access register togetherwith the access-list origin in the primary ASTE determine the access-listentry to be used during host ART.andM;An access-list entry contains the address of an ASN second-table entry(ASTE).andP;  When an ASTE is located by an access-list entry, it is referred toas an access-list-specified ASTE, to distinguish this use of the ASTE fromthe primary ASTE described earlier.andP;  The access-list-specified ASTE containsthe STD to be used during host DAT.andM;Private-space facility.andP;  ESA/370 introduced the concept of a &quot;private space,&quot;a space that holds no contents in common with other spaces.andP;  This wassignificant to MVS/ESA, which had previously imbedded the prefix area andportions of the supervisor into every address space it created, and hadmarked those segments &quot;common&quot; to improve lookaside efficiency.andP;  The ESA/370privatespace facility allowed MVS/ESA to construct data spaces devoid ofthese common segments, and to omit the special protection mechanisms for thelow address range, which are needed for the prefix area.andP;  The private-spacefacility allows equal access to all addresses in a data space, withoutinterference from low-address protection and fetch-protection override.andM;This private-space function is also useful to VM/ESA for the same reasons;indeed, VM Data Spaces extends its scope.andP;  In a virtual-machine-created dataspace, since the virtual machine's prefix area exists only in its hostprimary space, it is inappropriate to apply prefix-related protectionmechanisms to that data space.andP;  Moreover, it is inappropriate to applyprefixing at all.andP;  If a data space is shared among virtual CPUs in a virtualmultiprocessing configuration or among separate user virtual machines, eachsharer may have a different prefix value.andP;  However, all sharing users shouldbe able to use the same address to reach the same location in the data space.andO;Therefore, VM Data Spaces extends the effect of the private-space attributeto suppress prefixing as well.andP;  Similarly, the size of the virtual machine'sprimary space that is specified by the main-storage extent in the statedescription has no bearing on the size of other spaces it may access.andP;  Thus,the private-space control in VM Data Spaces suppresses the application ofmain-storage-extent checking.andP;  In short, the private-space attribute giveseach sharer of a data space the same &quot;view&quot; of the data.andM;The inherited name &quot;private space&quot; is somewhat a misnomer for VM/ESA.andP;  VMdoes not use architected common segments, and so does not need that effect ofthe &quot;private&quot; attribute.andP;  Moreover, in VM/ESA, &quot;private&quot; is not an attributeof the address space, but rather of the access.andP;  When a user's primaryaddress space is shared with a second virtual machine, the owner's access isnot marked private, since prefix effects are appropriate for the primaryspace.andP;  The sharer's access would be marked private, to suppress applicationof the sharer's prefix to the addresses in the foreign space.andM;Access-list-controlled protection.andP;  ESA/390 introduced a new function intoART: the ability to grant read-only access to an address space.andP;  With VM DataSpaces, this allows some guests to have read/write access to a space, andothers read-only access.andP;  This represents a significant enhancement over theprevious shared-memory capability in VM.andP;  Earlier releases of VM allowed&quot;saved segments&quot; to be imbedded into the absolute address spaces of multiplevirtual machines, but the shared data were writeable either by all sharingusers or by none of them.andP;  Control over an individual virtual machine'saccess allows a service machine, such as that for the CMS Shared File System,to load data securely into an address space, from which user machines canfetch the data directly.andM;Access-list-controlled protection is included in native ESA/390 as well as VMData Spaces.andP;  Therefore, CP can use this mechanism, rather than explicittesting in software, to enforce protection when simulating an operation for aguest.andM;Interestingly, the ability to grant read-only authority to an address spacewas not provided in ESA/370 and is not exploited by MVS/ESA.andP;  MVS/ESA can usestorage keys to effect read-only access for selected users.andP;  However, VMgives over the assignment of storage keys and PSW keys to the guest in eachvirtual machine, making keys inadequate to enforce authority across virtualmachines.andP;  Access-list-controlled protection addresses the unique needs of VMin this area.andM;Instruction execution in VM Data Spaces mode.andP;  The operation of certainDAT-related instructions is modified to permit their operation without DATwhen the guest is in the VM Data Spaces mode.andP;  This allows an applicationprogram to use the same problem-program instructions to control host ARTunder VM Data Spaces as it uses to control native ART under ESA/390.andM;The INSERT ADDRESS SPACE CONTROL and SET ADDRESS SPACE CONTROL instructionsare changed to be usable without DAT.andP;  INSERT ADDRESS SPACE CONTROL is usedto obtain the current mode of the guest, either primary-space oraccess-register mode.andP;  SET ADDRESS SPACE CONTROL is used to set eitherprimary-space or access-register mode.andM;The ESA/XC virtual-machine architecture.andP;  VM Data Spaces is an architecturalmode unique to the virtual-machine environment.andP;  To take advantage of thefacilities provided by VM Data Spaces requires software support in a hostcontrol program, such as VM/ESA CP.andP;  The specific virtual-machine interfacearising from the collaboration between VM/ESA CP and the machine is termedthe Enterprise Systems Architecture/Extended Configuration (ESA/XC)architecture.andP;  This name emphasizes the advance from traditional machineconfigurations, containing a single span of absolute storage, to anenvironment with multiple discrete absolute address ranges.andM;The thrust of the VM Data Spaces architecture is to keep knowledge of andresponsibility for the control structures &quot;below the line,&quot; in the host.andP;  Themanifestation of access-register function to the guest should be more akin toan application-program interface than to that in the ESA/390 real-machinearchitecture.andP;  VM therefore defines a second new architecture, ESA/XC, as theinterface to its virtual machines which exploit VM Data Spaces.andP;  The VM DataSpaces architecture precisely defines the interface between host and realmachine; the ESA/XC architecture specifies the somewhat different interfacebetween CP and the guest program (e.g., CMS or an application program).andM;Some examples may serve to clarify.andM;* VM Data Spaces defines the structure of an ALET and the meaning of eachfield in it, and the way it participates in the ART process.andP;  In contrast, anESA/XC ALET is purely a token, a 32-bit value constructed by the host andpresented to the guest.andP;  This abstraction allows future enhancements tochange the format of the ALET with no effect on the ESA/XC architecture orthe programs that use it.andM;* Just as native ART translates an ALET into a segment-table designation(STD), host ART of VM Data Spaces translates an ALET into a host STD, whichis then used during host DAT.andP;  Conversely, host ART in ESA/XC is defined tomap an ALET into an address-space-identification token (ASIT), which is theunique representation of a host space in ESA/XC.andP;  The ESA/XC guest has noknowledge of STDs or translation tables; it deals only with the ASIT as theunique identifier for the space and the ALET as a &quot;handle&quot; for access to thespace.andM;* The host ART process may encounter various specific exception conditions,which are reported to the host to drive the proper handling.andP;  Conversely, theexception conditions reported to the ESA/XC guest are fewer and more generic,representing the problem in terms meaningful to the ESA/XC application.andM;Throughout the definition of ESA/XC, the interface is specified in thesimple, clear form suitable for an access-register application, and nuancesof the VM Data Spaces architecture which are not appropriate to thatenvironment are concealed.andM;Use of interpretive execution in VM/ESAandM;Structure of virtual-machine simulation in CP.andP;  Figure 3 depicts the flow ofcontrol through the virtual-machine simulator in CP.andP;  Before actually issuingthe SIE instruction, the simulator must accept pending host interruptions,attend to scheduled simulation functions, ensure that machine lookasidebuffers are up-to-date, and load the guest state.andP;  When SIE finishes, thesimulator saves the guest state and processes the condition reported by themachine.andP;  Each of these steps is explained in more detail below.andP;  Whereparticular operations reflect the idiosyncrasies of CP, background on thestructure of CP is included as well.andM;Host interruption handling.andP;  When the dispatcher in CP passes control to thesimulator to run a virtual CPU, the simulator first opens a window for I/Oand external interruptions.andP;  That is, it issues instructions to enable andimmediately thereafter to disable these interruptions.andP;  This ensures that allcurrently pending interruptions are processed before the simulator continues.andO;Such interruptions may represent higher-priority work to take precedence oversimulation, or the release of a resource (such as an I/O device) for whichthe next operation should be started, to maximize utilization.andM;CP takes an unusual approach to asynchronous interruptions, such as I/O orexternal interruptions.andP;  (I/O interruptions indicate completion of anoperation by the channel subsystem.andP;  External interruptions indicate signalsfrom other host CPUs, expiration of a timeslice, or arrival at a desiredreal-time value.)andP;  Most CP code runs disabled for these interruptions.andP;  Logicthroughout CP takes advantage of this nonpreemptive dispatching model tosimplify interprocess serialization.andP;  CP's dispatcher and virtual-machinesimulator open interruption windows to accept pending interruptions at pointswhen a loss of control (the cessation of the executing task and thedispatching of another) is tolerable; in addition, the simulator allowsinterruptions during the time that the guest runs in interpretive-executionmode.andM;CP's interruption handlers generally do not resume execution at the point ofinterruption, as do those in most operating systems.andP;  Rather, control isreturned to the dispatcher, which then passes control to a routine which hasbeen scheduled for execution.andP;  For example, following an interruption in thesimulator, the dispatcher will eventually return control to the front end ofthe simulator, causing any logic before the point of interruption to bere-executed.andP;  The dispatcher and simulator are structured such that, if aninterruption occurs during their window, re-entry from the beginning is notharmful.andP;  In fact, in certain cases, it is essential that the front-end codebe re-executed, because the task dispatched on an interruption may modifydata on which the interrupted task depends.andM;When the guest's state is loaded and the machine is enabled in preparationfor interpretive execution, an indicator is set.andP;  Interruption handlers willrecognize this indicator and save the guest state before proceeding.andP;  Controlwill later come through the front end of the simulator, past preliminarytests, to the point at which the guest's state is reloaded and its executionis resumed.andM;Pending interruptions processed during interruption windows need not save thestate of the interrupted task, since control will not be returned to thepoint of interruption.andP;  This reduces the cost of handling interruptions.andM;Verifying guest endop.andP;  When the dispatcher is entered and finds nohigher-priority CP work for a given virtual machine, it ordinarily passescontrol to the simulator.andP;  Therefore, the simulator may be re-entered at anyloss of control, such as a page fault during simulation of an instruction.andO;The simulator recognizes this re-entry and terminates processing, signalingthe dispatcher that it should not re-enter the simulator for this virtualCPU.andP;  This prevents performing another simulation operation or startinginterpretive execution while the previous operation is in progress.andM;If the simulator finds no indication of work in progress, it declares thevirtual machine to be at endop, i.e.andP;  at the end of a guest unit ofoperation.andP;  (As defined in Reference 9, a unit of operation is the executionof either a single ordinary instruction or a portion of an interruptibleinstruction.andP;  Interruptions may occur only between units of operation.)andM;Pending simulation work.andP;  Once the simulator has opened and closed itsinitial interruption window, it checks for specific work requests  Certainfunctions may be scheduled either by a simulated guest operation orasynchronously, and must be performed before guest execution can be resumed.andO;Examples of such operations are: checking a new guest program status word(PSW) introduced by simulation, scanning for virtual interruptions to bereflected, and entering &quot;console-function mode.&quot;andM;Each of these is described in more detail below.andM;Checking the guest PSW--Simulation of guest interruptions and certaininstructions introduces new information into the guest PSW.andP;  In these cases,CP must check the validity of the PSW before resuming guest execution.andP;  Thisensures that program interruption conditions due to PSW format errors arerecognized at the proper priority level.andM;Scanning for guest interruptions--CP queues all I/O interruptions forordinary (not high-performance) guests and simulated external interruptionsfor VM communication functions until the guest reaches a point at which theycan be reflected.andP;  When an interruption is queued, an &quot;interruption scan&quot; isscheduled, and is performed at the next &quot;guest endop,&quot; i.e., the end of theguest instruction (whether executed by the machine or simulated by CP).andP;  Thestructure of the simulator ensures that control reaches this point only atguest endop.andM;At that time, if the enablement masks in the guest PSW and control registerpermit the interruption, it is dequeued and presented; if not, interventionor interception controls are set in the state description, so that aninterception will occur when the guest changes the relevant mask in the PSWor control register.andP;  On such an interception, a new interruption scan isscheduled and performed to try again to present the interruption.andM;If no interruptions are reflected, the scan ends by checking for a guest PSWspecifying wait state.andP;  A wait-state guest is generally not permitted toenter interpretive execution.andP;  Rather, simulation of the guest is suspendeduntil a guest interruption arrives and is reflected, introducing a run-statePSW.andM;Entering console-function mode--Console-function mode (CFM) is theenvironment in which CP console commands are processed.andP;  Since many commandsinspect or alter the virtual-machine state, they must not be allowed toexecute concurrently with simulation work.andP;  If a request to switch to CFMarrives and the virtual machine is not at endop, a CFM entry is scheduled forthe next guest endop.andM;Purging machine lookaside buffers.andP;  Interpreting a pageable guest implicitlyinvokes host DAT, and interpreting VM Data Spaces mode guest additionallyinvokes host ART.andP;  These machine processes can internally buffer informationfrom the host translation tables and use the buffered information to avoidrefetching from host tables.andP;  The term translation-lookaside buffer (TLB)refers to the internal copies of DAT-table entries, and ART-lookaside buffer(ALB) refers to internal copies of ART-table entries.andP;  When CP changes itstranslation tables, it must instruct the machine to purge its lookasidebuffers in order to prevent obsolete information from being used insubsequent translations.andM;VM/ESA uses two means of purging lookaside buffers: an INVALIDATE PAGE TABLEENTRY (IPTE) instruction, which broadcasts the order to all processors, andPURGE TLB and PURGE ALB instructions, which purge a single processor'sbuffers.andP;  To reduce overhead, CP often chooses to invalidate batches of PTEsdirectly (without IPTE) when an immediate broadcast is not required.andP;  Inthese cases, CP keeps a record, in the form of timestamps, of the need topurge the lookaside buffers before running a guest which might access theaffected virtual storage.andP;  For each processor, CP keeps the time of the lastpurge on that processor.andP;  (CP always purges the TLB and ALB in tandem.)andP;  Foreach virtual machine, CP keeps the time of the last change to atranslation-table entry which necessitated a purge.andM;Before starting interpretive execution, the simulator compares the virtualmachine's purge-required timestamp with that of the most recent actual purgeon the current processor.andP;  If the processor has been purged recently enough(e.g., in preparing to run a different virtual machine), then it does notneed to be purged again.andP;  Since this check is made prior to every SIEinstruction, as the virtual machine is dispatched successively on differentprocessors, each processor's buffer will be purged when and only whennecessary.andM;This timestamp checking is one of the operations which must be re-executedfollowing every loss of control, because a new purge-required timestamp maybe set during the loss of control.andP;  (CP's storage management will not takeany action which demands a purge while this virtual machine is actuallydispatched, but may do so when it loses control.)andP;  Re-entering the simulatorat the beginning following a loss of control ensures that the check will berepeated.andM;Issuing SIE.andP;  Once these preliminaries are handled, the simulator can turn tothe business at hand: starting interpretive execution of the guest.andP;  Thesimulator loads the guest state into the appropriate registers, enables hostinterruptions, and issues START INTERPRETIVE EXECUTION (SIE) to turn overguest execution to the machine.andP;  The machine remains ininterpretive-execution mode, executing guest instructions and interruptions,until either a host interruption occurs or the machine intercepts a guestevent which requires host attention.andM;If a synchronous host interruption such as a host page fault occurs, then theguest state is saved and the condition handled.andP;  Faults are usually handledby paging in the needed data, updating translation-table entries, andre-entering the simulator to resume guest execution.andP;  Certain host programinterruptions indicate improper guest operations; these are turned into theappropriate guest program interruptions.andP;  For example, a fault arising from areference to a location not in the guest's addressable range is rendered as aguest addressing exception.andM;If an asynchronous host interruption such as an I/O or external interruptionoccurs, the guest state is saved.andP;  CP then checks for a pending interception.andO;This might occur if the machine detected and presented an interception andcompleted the SIE instruction, but a host interruption then occurred beforeCP could disable interruptions.andP;  CP recognizes that an interception wasreported in the state description and schedules handling of the interceptionat higher priority than normal re-entry to the simulator.andP;  At this point, theguest's state has been saved and CP's interruption handler can process theinterruption.andP;  Eventually the interruption handler will exit to thedispatcher.andM;If an ordinary interception (without host interruption) occurs, the machineresumes execution of the simulator immediately after the SIE instruction.andO;The simulator disables interruptions, saves the guest state, and goes on toprocess the interception.andM;Interception processing.andP;  When an interception occurs, the machine storesinto the state description a code identifying the type of condition whichoccurred and additional information depending on the condition, such as thetext of an intercepted instruction or the parameters associated with anintercepted guest interruption.andP;  The simulator then acts on the condition.andM;Instruction interception--If an instruction is intercepted, the propersimulation routine receives control, according to the operation code.andO;Exception conditions are detected and presented in the form of guest programinterruptions.andP;  Otherwise, the simulation is completed and guest endop isdeclared.andM;CP sometimes requests interception of instructions which the machine iscapable of interpreting.andP;  In these cases, the simulation routine may includespecial handling for the case for which interception was requested.andP;  Forexample, when the interruption scan finds a guest I/O interruption which mustbe held pending because the corresponding interruption subclass is disabledin the guest control register, it requests interception of LOAD CONTROL(LCTL) instructions which alter that control register.andP;  The LCTL simulationroutine schedules a fresh interruption scan, so that the interruption can bepresented if it is enabled according to the new control-register value.andM;Guest program interruption--Most guest program interruptions are presenteddirectly by the machine.andP;  However, certain conditions are always interceptedto permit special processing by the host.andP;  Some interruption conditions underVM Data Spaces are reported in one way by the machine, but are to bereflected to the ESA/XC virtual machine in another form.andP;  For example:andM;* The machine reports specific exceptions for failures at each step in hostART.andP;  These either drive host recovery or are mapped into theapplication-oriented exceptions of ESA/XC.andM;* To simplify machine implementation, an instruction which depends on DATgives a special-operation exception under VM Data Spaces, just as it doeswhen DAT is off in ESA/390.andP;  CP translates such an exception into anoperation exception, signifying that the instruction does not exist at all inESA/XC.andM;I/O and external intervention requests--As described earlier, when the CP'sinterruption scan finds a pending guest I/O or external interruption which isdisabled in the guest PSW, it uses the intervention controls in the statedescription to request interception when the PSW becomes enabled.andP;  Onreceiving such an &quot;external-request&quot; or &quot;I/O-request&quot; interception, thesimulator schedules an interruption scan to present the pending interruption.andM;Guest wait state--When the machine encounters a guest PSW designating waitstate, it returns control to the host, and the simulator schedules aninterruption scan.andP;  If no interruption can be presented, the guest is marked&quot;not ready&quot; and a timer event is scheduled to redispatch the guest when anyof its virtual timers would present an interruption.andP;  This is the only casein which CP must manage guest timers.andP;  As long as the guest remains ready,the CP can rely on the machine to update the guest timers and recognize theassociated interruptions when the guest is dispatched.andM;Guest endop.andP;  All instruction and interruption simulations converge at acommon point to conclude the virtual unit of operation.andP;  Here, CP reflectsany guest program-event-recording (PER) interruption conditions that wererecognized either by the machine on instruction interception or by CP duringinstruction simulation.andM;In addition, simulation may encounter host problems, such as logic errors orloss of guest data on auxiliary storage.andP;  These problems may have corruptedthe guest state or the execution of the guest program.andP;  Such conditions arereported to the guest as exigent machine checks.andP;  For example, loss of a pageof host virtual storage is effectively loss of data in guest absolutestorage, and is reported to the guest as an uncorrected storage error.andP;  Theguest program then has the opportunity to recover from that condition.andM;The architecture requires that these PER events and exigent machine checksoccur synchronously with the end of the unit of operation.andP;  Therefore, CP'ssimulator ensures that these events are presented before guest endop isdeclared.andP;  (Only after endop is declared can further simulation, such aspresentation of an asynchronous interruption or execution of another guestinstruction, proceed.)andM;Of course, in the vast majority of cases, there is no PER event or machinecheck to present, and endop is declared immediately.andP;  After endop isdeclared, control is returned to the top of the simulator, which performs anyscheduled simulation work (such as an interruption scan) or resumes guestexecution.andM;Virtual SIE.andP;  An interesting perspective on interpretive execution is thesimulation of the SIE instruction itself, when that instruction is issued bya guest.andM;As mentioned above, some machine models can interpret a &quot;second-level&quot; SIEinstruction issued by a high-performance guest.andP;  Such a function is atremendous boon to migration, allowing an orderly, cautious upgrade from onerelease of VM to the next.andP;  However, the ability to run a second-level VMsystem as an ordinary guest for testing and debugging, without dedicatingreal resources as high-performance guests demand, has always been animportant feature of VM.andP;  Customers have come to depend on this forfirst-shift VM systems programming, testing of software fixes, and so forth.andO;Moreover, not all models support Region Relocation and Interpreted SIE.andP;  Forthese cases, CP's simulation software must fill the gap, in a function knownas interpretive-execution simulation or more simply &quot;virtual SIE&quot; (vSIE).andO;andlsqb;12andrsqb;andM;When the machine does not interpret a second-level SIE, the guest SIEinstruction yields an instruction interception.andP;  CP passes control to aninstruction simulation routine as for any other instruction interception.andO;However, simulating the entire execution of the guest SIE, includingexecution of all the second-level guest's instructions and interruptions, isnot practical.andP;  VM would have to pay a huge, continuing cost to maintainsimulation routines for every instruction in the architecture, and suchsimulation would perform abominably.andP;  Rather, CP enlists the machine's aid,by using SIE itself to simulate SIE.andM;The approach taken is to use a SIE instruction at the host level to cause themachine to interpretively execute the second-level guest.andP;  However, CP mustmake adjustments to accommodate the additional &quot;level&quot; of functions.andP;  Asdescribed earlier, SIE recognizes two levels of program, host and guest; itcan perform two levels of address translation, manage two levels of timingfacilities, and so on.andP;  In the most complex case, vSIE must effect threelevels of address translation and support three sets of timers--for the host,the first-level guest (called the &quot;real guest&quot; or RGuest), and thesecond-level guest (the &quot;virtual guest&quot; or VGuest).andP;  In order to have themachine interpret the VGuest, these three levels must be collapsed into two.andO;As depicted in Figure 4, CP lets the machine see the VGuest as &quot;the guest,&quot;and presents an image of &quot;the host&quot; which merges CP's actual host view withthe RGuest's view.andM;In using SIE to simulate SIE, VM/ESA resorts to the time-honoredvirtualization technique of shadowing.andP;  First, the state description itselfmust be shadowed.andP;  CP's vSIE support copies the state description specifiedas the operand of the RGuest SIE instruction and edits it to represent thehost's view of the VGuest, for example, by translating RGuest real addressesof control structures into the host real addresses expected by the machine.andO;Then, vSIE must create shadow translation tables to apply the composition ofRGuest and host address translation.andP;  These tables will be presented to themachine as host translation tables, so that they will apply after VGuest DATand prefixing (if any).andM;Once the shadow structures are built, CP issues SIE against the shadow statedescription.andP;  Most interception conditions can be reflected directly asinterceptions on the RGuest SIE instruction; some require special processingin CP.andP;  Whenever an interception or interruption is to be presented to theRGuest, the contents of the shadow state description, representing thecurrent VGuest state, must be transcribed into the state description inRGuest storage.andM;During VGuest execution, the machine may present translation exceptions tothe host as it encounters entries marked invalid in the shadow translationtables.andP;  The host must then use the contents of RGuest tables along with theresults of translation at the host level to update the shadow tables.andP;  In theprocess, it may be necessary to page in RGuest storage or to reflect to theRGuest an exception detected in its tables.andM;RGuest timing facilities must also be simulated through host timers, sincethe machine can support only two levels of timing, the VGuest's and thehost's.andP;  Before issuing SIE on the shadow state description, CP sets the hostCPU timer (which ordinarily holds the dispatching timeslice) to the minimumof the timeslice and the time remaining until the next RGuest CPU-timer orclock-comparator interruption is due.andP;  When the host interruption occurs, theCP will either recognize timeslice end or present the interruption to theRGuest, as appropriate.andM;Concluding remarksandM;Although interpretive-execution architecture began as a test and migrationaid for native architecture developments, it has become a platform forextending the utility of virtual machines.andP;  Some of the developments in theevolution of this architecture have been described in this paper, includingthe ability to run concurrent production-level virtual machines.andP;  Thesedevelopments primarily dealt with the interpretation of a nativearchitecture.andP;  The latest development, VM Data Spaces, which has beendescribed in detail, breaks some of the otherwise close ties to realcomponents.andP;  VM Data Spaces establishes the interpretive-executionarchitecture as a platform for innovations unique to the virtual-machineenvironment as well as those common to native architecture developments.andM;Effective use of interpretive execution requires close cooperation betweenthe machine and a host program like VM/ESA CP.andP;  CP fills the gaps ininterpretive execution, so that the guest sees a complete, architecturallyconsistent machine interface.andP;  Interpretive execution provides a flexiblestructure whereby both hardware and software can be brought to bear on aproblem, and each can contribute its own strengths to the solution.andM;Cited references and notesandM;andlsqb;1andrsqb; P. H. Gum, &quot;System/370 Extended Architecture: Facilities for VirtualMachines,&quot; IBM Journal of Research and Development 27, No.andP;  6, 530-543(1983).andM;andlsqb;2andrsqb; IBM System/370 Extended Architecture: Interpretive Execution, SA22-7095,IBM Corporation; available through IBM branch offices.andM;andlsqb;3andrsqb; J. M. Gdaniec and J. P. Hennessy, &quot;VM Data Spaces and ESA/XC Facilities,&quot;IBM Systems Journal 30, No.andP;  1, 14-33 (1991, this issue).andM;andlsqb;4andrsqb; The information in this paper pertains only to the ESA feature of VM/ESARelease 1.0 and to VM/ESA Release 1.1.andP;  Since the interpretive-executionfacility does not exist in System/370 architecture, the 370 feature of VM/ESARelease 1.0 cannot make use of it.andM;andlsqb;5andrsqb; In common VM parlance, &quot;guest&quot; refers specifically to a second-levelSystem Control Program, such as MVS/ESA or VM/ESA, as opposed to a CMSvirtual machine.andP;  The interpretive-execution architecture extends the term toapply to any program running in a virtual machine.andM;andlsqb;6andrsqb; ESA/390 defines three levels of storage address: Dynamic addresstranslation transforms a virtual address into a real address.andP;  Prefixing isperformed on a real address to yield an absolute address, which designates alocation in physical storage.andP;  Prefixing uses the contents of the CPU'sprefix register to &quot;swap&quot; addresses 0-4095 with another address range, sothat each CPU can have access to different low storage for interruptionparameters, save areas, and processor-specific data.andM;andlsqb;7andrsqb; Dynamic address translation (DAT) converts a virtual address to a realaddress by means of a selected entry in the segment table, and a selectedentry in the page table designated by that segment-table entry.andP;  The resultis the real address of the storage frame corresponding to the virtualaddress.andM;andlsqb;8andrsqb; T. L. Borden, J. P. Hennessy, and J. W. Rymarczyk, &quot;Multiple OperatingSystems on One Processor Complex,&quot; IBM Systems Journal 28, No.andP;  1, 104-123(1989).andM;andlsqb;9andrsqb; IBM Enterprise Systems Architecture/370: Principles of Operation,SA22-7200, IBM Corporation; available through IBM branch offices.andM;andlsqb;10andrsqb; K. E. Plambeck, &quot;Concepts of Enterprise Systems Architecture/370,&quot; IBMSystems Journal 28, No.andP;  1, 39-61 (1989).andM;andlsqb;11andrsqb; Although ESA/390's address-space numbers (ASNs) and the ASN translationstructures (ASN first tables and ASN second tables) do not exist in VM DataSpaces mode, VM Data Spaces retains the ASN-second-table entry (ASTE) as thecontrol structure that defines an address space.andM;andlsqb;12andrsqb; P. H. Tallman, Instruction Processing in Higher Level Virtual Machinesby a Real Machine, U.S.andP;  Patent No.andP;  4,792,895.andM;Damian L. Osisek IBM Data Systems Division, P.O. Box 6, Endicott, New York13760.andP;  Mr. Osisek is an advisory programmer in VM/ESA design at the IBMEndicott Programming Laboratory.andP;  He joined IBM in 1983 as a programmer inVM/XA development and worked in the areas of virtual-CPU simulation andreal-CPU management.andP;  He has designed and developed portions of VM/XA'ssupport for the 3090 vector facility and PR/SM and VM/ESA's simulation of theVM Data Spaces facility in virtual SIE.andP;  Mr. Osisek earned a patent for&quot;Passive Serialization in a Multitasking Environment.&quot;andP;  He received a B.A.andO;degree in computer science and classics from Rutgers University in 1981 andan M.S.andP;  degree in computer science from Rensselaer Polytechnic Institute in1987.andM;Kathryn M. Jackson IBM Data Systems Division, P.O. Box 950, Poughkeepsie, NewYork 12602.andP;  Ms.andP;  Jackson is a staff programmer in the Enterprise SystemsCentral Architecture department in IBM's Poughkeepsie Development Laboratory.andO;She received a B.S.andP;  degree in computer science and mathematics from HofstraUniversity in 1982 and joined IBM as a programmer in the Data SystemsAssurance organization.andP;  In 1988, she joined Enterprise Systems CentralArchitecture where she participated in the design of several extensions tothe interpretive-execution architecture, including the VM Data Spacesfacility.andM;Peter H. Gum IBM Data Systems Division, P.O. Box 950, Poughkeepsie, New York12602.andP;  Mr. Gum is a Senior Technical Staff Member and a member of theEnterprise Systems Central Architecture department.andP;  He joined IBM in 1964 inPoughkeepsie as a system programmer working on the operating system for theIBM System/360, and subsequently participated in the design of severalversions of the control program.andP;  In 1973 he joined the architecturedepartment, where he participated in the design of extensions to thearchitecture of the IBM System/370.andP;  He received a B.A.andP;  from OberlinCollege, Oberlin, Ohio, in 1958 and an M.A.andP;  from the American University,Washington, D.C., in 1962, both in mathematics.andP;  Mr. Gum is a member of theAssociation for Computing Machinery.andO;</TEXT></DOC>