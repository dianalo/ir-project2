<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-286-153  </DOCNO><DOCID>07 286 153.andM;</DOCID><JOURNAL>PC Magazine  Feb 28 1989 v8 n4 p297(3)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>File management in C and assembly language. (Power Programming)(Column) (technical)</TITLE><AUTHOR>Duncan, Ray.andM;</AUTHOR><SUMMARY>File management is discussed in terms of terminology and basicfile access functions available in assembly language and C underDOS and OS-2.andP;  Both DOS and OS-2 have extensive sets offile-related function calls, but the average application needs toopen and create files, read and write, set the file pointer, closefiles and rename or delete files.andP;  The C runtime library hasparallel sets of file functions: low-level functions, which mapdirectly onto the host operating system's file interface, use thehandles provided by the system and do not buffer or translate dataas it is read or written; and stream functions, which rely on Cdata structure to control each open file and use the address ofthis structure to reference the file for reading and writing.andO;Three basic terms are defined: records, sequential access andrandom access.andP;  DOS and OS-2 draw little distinction between thelatter two.andM;</SUMMARY><DESCRIPT>Topic:     C Programming LanguageAssembly LanguageFile ManagementMSDOSOS-2Software Design.andO;Feature:   illustrationtable.andO;Caption:   DOS and OS-2 file-management functions. (table)C runtime library file-management functions. (table)andM;</DESCRIPT><TEXT>FILE MANAGEMENT IN C AND ASSEMBLY LANGUAGEandM;Having finished updating the Power Programming library for OS/2 compatibilityand taken a brief look at the DOS and OS/2 file systems, we're moving on tothe subject of file management.andP;  I'll begin here by reviewing someterminology and the basic file access functions available to assemblylanguage and C programmers under DOS and OS/2.andP;  In the next few issues, I'llget into specific techniques for sequential and random file access andindexed file management.andM;But first, a word to the wise: DOS has two distinct sets of file functioncalls, which are commonly known as the FCB (File Control Block) functions andthe handle functions.andP;  The FCB functions were designed for compatibility withCP/M; they do not support the hierarchical (tree-like) disk structure of DOSVersions 2.0 and later, and are now as much a historical curisoity as thebrass cuspidor.andP;  The DOS handle functions do support the hierarchicaldirectory structure and have direct counterparts in OS/2.andP;  Sinceright-thinking programmers regard FCBs as a form of heresy, I'll not bementioning them again.andM;BASIC FILE OPERATIONSandM;Although both DOS and OS/2 have extensive sets of file-related functioncalls, the average application program needs only a few of these calls.andP;  Forthe present, I'll ignore the more exotic capabilities of OS/2 and those filefunctions present only in DOS Version 3.0 or later, and examine thecapabilities that every program needs:andM;* opening and creating files;andM;* reading and writing;andM;* seeking; that is, setting the file pointer;andM;* closing files; andandM;* renaming or deleting files.andM;The DOS function calls for these basic operations, together with their OS/2equivalents, are listed in Figure 1.andM;To open a file, a program identifies the file to the operating system by nameusing an ASCIIZ (null-terminated) string, by specifying the access rights itneeds (read-only, write-only, or read-write), and by indicating whether it iswilling to share simultaneous access to the file with other programs.andP;  If thefile exists and there is no conflict between the requested access rights andanother program's sharing mode, the system returns and identifier--called ahandle--that the program can use for subsequent access to the file.andP;  Thehandle is anindirect index into a structure known as the System File Table(SFT), which the operating system uses to keep track of all open files in thesystem.andM;When a file is created, the program supplies an ASCIIZ filename and anattribute parameter, which assigns such system characteristics as &quot;hidden&quot; or&quot;read-only&quot; to the file.andP;  If the operation is successful, the system adds anentry to the disk directory and again returns a handle that the program canuse for subsequent access to the file.andP;  An additional open operation is notrequired and in fact would needlessly expend an additional handle.andM;The Create function available in DOS Versions 2 x (interrupt 21th function3Ch) must be used with care because if the named file already exists, it issimply replaced (truncated to zero length) and any previous data in the fileis lost.andP;  Later versions of DOS provide several additional file-creationfunctions, including both a function that fails if the file already existsand a function that generates a name (based on the current time) for atemporary file.andP;  The OS/2 DosOpen function, which is used to open and createfiles, has a parameter that allows you to tailor the function's actions tothe previous existence or nonexistence of the file.andM;Once a file is opened or created, a program can go to work on its contents.andO;To read data from the disk into RAM, the program supplies the operatingsystem with a buffer address, a number of bytes to read, and a handle.andP;  Thedata on the disk in unchanged, though obviously the previous contents of thespecified area of RAM are lost.andP;  To write data from RAM onto the disk, theprogram supplies the same three parameters as for a read operation, but inthis case the contents of RAM are unchanged and the previous contents of thedisk area are lost.andP;  Data is not necessarily transferred physically betweenthe disk and RAM when a program's read or write request &quot;logically&quot;completes; to improve performance, both DOS and OS/2 buffer disk datainternally for extended periods.andM;Both DOS and OS/2 maintain a file pointer in the SFT for each open filehandle.andP;  When a program issues a read or write request, the current value ofthe file pointer for that handle determines the byte offset from the start ofthe file at which the transfer will begin.andP;  When the transfer completes, thesystem updates the file pointer so that it points to the very next byte afterthe last byte that was read or written.andM;DOS and OS/2 allow a program to set the file pointer to an arbitrary value.andO;This is often called a seek operation.andP;  The function call accepts a 32-bitbyte offset and a method code that specifies whether the offset is relativeto the start of the file (method 0), to the current file-pointer position(method 1), or to the end of file (method 2).andP;  This &quot;logical seek&quot; should notbe confused with the physical seek performed by a disk drive, which involvesmoving the read/write head to a specific cylinder.andM;The DOS and OS/2 seek functions always return a file pointer that is relativeto the start of a file.andP;  Consequently, there are two special uses of thefunction.andP;  To obtain the current position of the file pointer withoutmodifying it, you can request a seek relative to the current file-pointerposition (method 1) with an offset of zero.andP;  To find the size of a file, youcan call for a seek relative to the end of the file (method 2) with an offsetof zero.andM;A program closes a file to notify the system that it will not be using thatfile further.andP;  The operating system then flushes any unwritten dataassociated with the file to disk, updates the disk directory (if necessary)to reflect any changes made to the file, and releases the handle and thecorresponding entry in the SFT for reuse.andM;Handles are not involved when a program deletes or renames a file.andP;  In theseoperations the file is identified by an ASCIIZ string, just as for the openand create operations.andP;  When a file is deleted, the first character of itsentry in the disk directory is changed to a reserved value and the disksectors previously assigned to the file are freed.andP;  The remainder of thedirectory entry and the contents of the sectors are not altered, however,until they are actually assigned to a new file.andP;  This gaping hole in systemsecurity has given rise to an entire category of utility software--and to atleast a couple of personal fortunes.andM;C FILE FUNCTIONSandM;The C runtime library contains two distinct, parallel sets of file functions.andO;These are known as the low-level functions and the stream functions.andP;  Mixingthe use of low-level and stream functions within the same program is almostguaranteed to introduce obscure bugs and lead to novel and picturesque (butnot usually desirable) program behavior.andM;The low-level file functions map directly onto the host operating system'sfile interface, use the handles provided by the system, and do not buffer ortranslate data as it is read or written.andP;  You would select the low-levelfunctions when you want to minimize runtime library overhead, perform I/O tounusual devices, or to take advantage of unusual capabilities orcharacteristics of the host system.andM;The stream functions rely on a C data structure to control each open file.andO;They use the address of this structure rather than a handle to reference thefile for read or write operations.andP;  The stream functions buffer the file datawithin the runtime library (in addition to the buffering already providedwithin the operating system itself) and, under some circumstances, thesefunctions translate characters within the data.andP;  Select the stream functionsto maximize the portability of your program or when your program has complexdata-formatting requirements.andM;Figure 2 lists the most commonly used low-level and stream functions, and thelibrary functions for deleting and renaming files.andP;  Most of the 50-oddfile-related library functions that are not listed here are related to suchmatters as redirection of handles, formatted input, formatted output,temporary files, and control of stream buffering.andP;  I'll discuss many of theseother functions in upcoming columns.andM;While browsing through Figure 2 and your C compiler's runtime library manual,you may be struck by the strong resemblance between the C library functionsand the DOS and OS/2 file function calls.andP;  The points of resemblance rangefrom the glaringly obvious--such as the use of ASCIIZ strings to identifyfiles--to more subtle issues.andP;  For example, the method codes used by lseek()are exactly the same as those used by the DOS and OS/2 function calls forsetting the file pointer position.andP;  This congruence is not coincidence!andP;  Thehandle file functions in DOS and OS/2 were patterned after those in Unix;similarly, the C runtime library's file management functions are designedaround the Unix file system and vice versa.andM;RECORD ACCESSING TERMSandM;Three terms that may come up in discussions of file management are records,sequential access, and random access.andP;  Although the operating system sees afile simply as a named collection of bytes, programmers think of the file asbeing composed of one or more records.andP;  Each record describes a particularperson or object; it may be compounded of many fields of different types andis usually an integral number of bytes in length.andP;  The key features of arecord--for our purposes--are that it has a predictable structure and thatits length either is a constant (for a given file) or somehow encoded in therecord.andM;Sequential access means reading or writing consecutive records in a file.andP;  Anexample is the processing of a text file, in which each line can beconsidered a record delimited by a new-line character.andP;  A program thatprocesses files sequentially need not concern itself with the file pointerbecause that is maintained by DOS or OS/2.andM;Random access means reading and writing nonsequential records.andP;  That is, thephysical ordering of the records in the file does not determine the order inwhich they are processed.andP;  (The term is not very apt because, of course, theprocessing is not at all random.) In simple programs, random access istypically used with files that contain fixed-length records, so that theprogram can calculate the location of a specific record by multiplying therecord number by the record size.andP;  The indexed-file access methods used bymore-sophisticated applications are much more versatile.andM;Both DOS and OS/2 draw little distinction between sequential and randomaccess.andP;  When a file is opened or created, its file pointer is initially setto zero.andP;  If a process simplyissues reads or writes without ever setting thefile pointer position, then its access to the file is sequential.andP;  If aprocess requires random access, it need only position the file pointerappropriately before each read or write request.andP;  Naturally, these techniquescan be used together.andM;THE IN-BOXandM;Please send your questions, suggestions, and comments to me at any of thefollowing e-mail addresses: PC MagNet: 72241,52 BIX: rduncan MCI Mail: lmi</TEXT></DOC>