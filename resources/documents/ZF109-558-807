<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-558-807  </DOCNO><DOCID>09 558 807.andM;</DOCID><JOURNAL>Dr. Dobb's Journal  Nov 1990 v15 n11 p56(10)* Full Text COPYRIGHT Mandamp;T Publishing 1990.andM;</JOURNAL><TITLE>Software patents: Is this the future of programming?andO;</TITLE><AUTHOR>The League for Programming Freedom.andM;</AUTHOR><SUMMARY>The League for Programming Freedom (LPF) recommends that a law bepassed that excludes software from coverage by patents to ensurethat the creative activity does not become prohibitivelyexpensive.andP;  The organization asserts that the patenting ofsoftware threatens 'to devastate' the US computer industry.andP;  TheUS Patent Office apparently believes that each use of a softwaretechnique or attribute is deserving of a separate patent.andO;Consequently, companies recently granted software patents areusing them to attack other firms for independently developing andselling software packages that may include specific similarattributes.andP;  Major new programs will eventually requireprohibitively expensive licenses to dozens of pre-existing patentson various aspects and techniques of software design.andP;  The patentprocess, the unreliability and expense of patent searches, andlicensing are discussed.andM;</SUMMARY><DESCRIPT>Topic:     PatentSoftware DesignIndustry AnalysisFailureCreativityApplications ProgrammingLicensingLeague for Programming Freedom.andM;</DESCRIPT><TEXT>Software PatentsandM;Software patents threaten to devastate America's computer industry.andP;  Newlygranted software patents are being used to attack companies such as Lotus andMicrosoft for selling programs that they have independently developed.andP;  Soonnew companies will be barred from the software arena -- most major programswill require licenses for dozens of patents, and this will make theminfeasible.andP;  This problem has only one solution: Software patents must beeliminated.andM;The Patent System and Computer ProgramsandM;The Framers of the United States Constitution established the patent systemso that inventors would have an incentive to share their inventions with thegeneral public.andP;  In exchange for divulging an invention, the patent grantsthe inventor a 17-year monopoly on the use of the invention.andP;  The patentholder can license others to use the invention, but may also refuse to do so.andO;Independent reinvention of the same technique by others does not give themthe right to use it.andM;Patents do not cover specific computer programs; instead, they coverparticular techniques that can be used to build programs, or particularfeatures that programs can offer.andP;  Once a technique or feature is patented,it may not be used in a program without the permission of the patent holder-- even if it is implemented in a different way.andP;  Since a program typicallyuses many techniques and provides many features, it can infringe many patentsat once.andM;Until recently, patents were not used in the software field.andP;  Softwaredevelopers copyrighted individual programs or made them trade secrets.andO;Copyright was traditionally understood to cover the implementation details ofa particular program; it did not cover the features of the program, or thegeneral methods used.andP;  And trade secrecy, by definition, could not prohibitany development work by someone who did not know the secret.andM;On this basis, software development was extremely profitable and receivedconsiderable investment, without any prohibition on independent softwaredevelopment.andP;  But this scheme of things is no more.andP;  A few U.S.andP;  softwarepatents were granted in the early 1980s, stimulating a flood of applications.andO;Now many patents have been approved and the rate is accelerating.andP;  Manyprogrammers are unaware of the change and do not appreciate the magnitude ofits effects.andP;  Today the lawsuits are just beginning.andM;Absurd PatentsandM;The Patent Office and the courts have had a difficult time with computersoftware.andP;  The Patent Office refused until recently to hire computer sciencegraduates as examiners, and in any case does not offer competitive salariesfor the field.andP;  Patent examiners are often ill-prepared to evaluate softwarepatent applications to determine if they represent techniques that are widelyknown or obvious -- both of which are grounds for rejection.andP;  Their task ismade more difficult because many commonly used software techniques do notappear in the scientific literature of computer science: Some seemed tooobvious to publish while others seemed insufficiently general.andM;Computer scientists know many techniques that can be generalized to widelyvarying circumstances.andP;  But the Patent Office seems to believe that eachseparate use of a technique is a candidate for a new patent.andP;  For example,Apple has been sued because the HyperCard program allegedly violates patentnumber 4,736,308, a patent that covers displaying portions of two or morestrings together on the screen -- effectively scrolling with multiplesubwindows.andP;  Scrolling and subwindows are well-known techniques, butcombining them is apparently illegal.andM;The granting of a patent by the Patent Office carries a presumption in lawthat the patent is valid.andP;  Patents for well-known techniques that were in usemany years before the patent application have been upheld by federal courts.andM;For example, the technique of using exclusive-or to write a cursor onto ascreen is both well-known and obvious.andP;  (Its advantage is that anotheridentical exclusive-or operation can be used to erase the cursor withoutdamaging the other data on the screen.)andP;  This technique can be implemented ina few lines of a program, and a clever highschool student might well reinventit.andP;  But it is covered by patent number 4,197,590, which has been upheldtwice in court even though the technique was used at least five years beforethe patent application.andP;  Cadtrak, the company that owns this patent, collectsmillions of dollars from large computer manufacturers.andM;English patents covering customary graphics techniques, includingairbrushing, stenciling, and combination of two images under control of athird, were recently upheld in court, despite the testimony of the pioneersof the field that they had developed these techniques years before.andP;  (Thecorresponding United States patents, including 4,633,416 and 4,602,286, havenot yet been tested in court, but they probably will be soon.)andM;All the major developers of spreadsheet programs have been threatened on thebasis of patent 4,398,249, covering &quot;natural order recalc,&quot; the recalculationof all the spreadsheet entries that are affected by the changes the usermakes, rather than recalculation in a fixed order.andP;  Currently Lotus alone isbeing sued, but a victory for the plaintiff in the case would leave the otherdevelopers little hope.andP;  (The League for Programming Freedom has found priorart that may defeat this patent, but this is not assured.)andM;Nothing protects programmers from accidentally using a technique that ispatented -- and then being sued for it.andP;  Taking an existing program andmaking it run faster may also make it violate half a dozen patents that havebeen granted, or are about to be granted.andM;Even if the Patent Office learns to understand software better, the mistakesit is making now will follow us into the next century, unless Congress or theSupreme Court intervenes to declare these patents void.andM;However, this is not the whole of the problem.andP;  Computer programming isfundamentally different from the other fields that the patent systempreviously covered.andP;  Even if the patent system were to operate &quot;as intended&quot;for software, it would still obstruct the industry it is supposed to promote.andM;What is &quot;Obvious&quot;?andM;The patent system will not grant or uphold patents that are judged to beobvious.andP;  However, the system interprets the word &quot;obvious&quot; in a way thatmight surprise computer programmers.andP;  The standard of obviousness developedin other fields is inappropriate for software.andM;Patent examiners and judges are accustomed to considering even small,incremental changes as deserving new patents.andP;  For example, the famousPolaroid vs.andP;  Kodak case hinged on differences in the number and order oflayers of chemicals in a film -- differences between the technique Kodak wasusing and those described by previous, expired patents.andP;  The court ruled thatthese differences were unobvious.andM;Computer scientists solve problems quickly because the medium of programmingis tractable.andP;  They are trained to generalize solution principles from oneproblem to another.andP;  One such generalization is that a procedure can berepeated or subdivided.andP;  Programmers consider this obvious -- but the PatentOffice did not think that it was obvious when it granted the patent onscrolling multiple strings as described above.andM;Cases such as this cannot be considered errors.andP;  The patent system isfunctioning as it was designed to do -- but with software, it producesoutrageous results.andM;Patenting What is too Obvious to PublishandM;Sometimes it is possible to patent a technique that is not new preciselybecause it is obvious -- so obvious that no one would have published a paperabout it.andM;For example, computer companies distributing the free X Window System(developed by MIT) are now being threatened with lawsuits by ATandamp;T over patentnumber 4,555,775, covering the use of &quot;backing store.&quot;andP;  This technique isused when there are overlapping windows; the contents of a window that ispartly hidden are saved in off-screen memory, so they can be put back quicklyon the screen if the obscuring window disappears (as often happens).andM;The technique of backing store was used in an earlier MIT project, the LispMachine System, before ATandamp;T applied for the patent.andP;  The Lisp Machinedevelopers published nothing about this detail at the time, considering ittoo obvious.andP;  It was mentioned years later when the programmers' referencemanual explained how to turn it on an off.andM;The Lisp Machine was the first computer to use this technique only because ithad a larger memory than earlier machines that had window systems.andP;  Priorwindow system developers must have dismissed the idea because their machineshad insufficient memory space to spare any for this purpose.andP;  Improvements inmemory chips made development of backing store inevitable.andM;Without a publication, the use of backing store in the Lisp Machine Systemmay not count as prior art to defeat the patent.andP;  So the ATandamp;T patent maystand, and MIT may be forbidden to continue using a method that MIT usedbefore ATandamp;T.andM;The result is that the dozens of companies and hundreds of thousands of userswho accepted the software from MIT with the understanding that it was freeare now faced with possible lawsuits.andP;  (They are also being threatened withCadtrak's exclusive-or patent.)andP;  The X Window project was intended to developa window system that all developers could use freely.andP;  This public servicegoal seems to have been thwarted by patents.andM;Why Software is DifferentandM;Software systems are much easier to design than hardware systems of the samenumber of components.andP;  For example, a program of 100,000 components might be50,000 lines long and could be written by two good programmers in a year.andO;The equipment needed for this costs less than $10,000; the only other costswould be the programmers' living expenses while doing the job.andP;  The totalinvestment would be less than $100,000.andP;  If done commercially in a largecompany, it might cost twice that.andP;  By contrast, an automobile typicallycontains under 100,000 components; it requires a large team and costs tens ofmillions of dollars to design.andM;And software is also much cheaper to manufacture: Copies can be made easilyon an ordinary workstation costing under $10,000.andP;  To produce a hardwaresystem often requires a factory costing tens of millions of dollars.andM;Why is this?andP;  A hardware system has to be designed using real components.andO;They have varyign costs; they have limits of operation; they may be sensitiveto temperature, vibration, or humidity; they may generate noise; they drainpower; they may fail either momentarily or permanently.andP;  They must bephysically assembled in their proper places, and they must be accessible forreplacement in case they fail.andM;Moreover, each of the components in a hardware design is likely to affect thebehaviour of many others.andP;  This greatly complicates the task of determiningwhat a hardware design will do: Mathematical modeling may prove wrong whenthe design is built.andM;By contrast, a computer program is built out of ideal mathematical objectswhose behavior is defined, not modeled approximately, by abstract rules.andO;When an if statemetn follows a while statement, there is no need to studywhether the if statement will draw power from the while statement and therebydistort its output, nor whether it could overstress the while statement andmake it fail.andM;Despite being built from simple parts, computer programs are incrediblycomplex.andP;  The program with 100,000 parts is as complex as an automobile,though far easier to design.andM;While programs cost substantially less to write, market, and sell thanautomobiles, the cost of dealing with the patent system will not be less.andO;The same number of components will, on the average, involve the same numbertechniques that might be patented.andM;The danger of a LawsuitandM;Under the current patent system, a software developer who wishes to followthe law must determine which patents a program violates and negotiate witheach patent holder a license to use that patent.andP;  Licensing may beprohibitively expensive, as in the case when the patent is held by acompetitor.andP;  Even &quot;reasonable&quot; license fees for several patents can add up tomake a project infeasible.andP;  Alternatively, the developer may wish to avoidusing the patent altogether; but there may be no way around it.andM;The worst danger of the patent system is that a developmer might find, afterreleasing a product, that it infringes one or many patents.andP;  The resultinglawsuit and legal fees could force even a medium-size company out ofbusiness.andM;Worst of all, there is no practical way for a software developer to avoidthis danger -- there is no effective way to find out what patents a systemwill infringe.andP;  There is a way to try to find out -- a patent search -- butsearches are unreliable and in any case too expensive to use for softwareprojects.andM;Patent Searches are Prohibitively ExpensiveandM;A system with 100,000 components can use hundreds of techniques that mightalready be patented.andP;  Since each patent search costs thousands of dollars,searching for all the possible points of danger could easily cost over amillion.andP;  This is far more than the cost of writing the program.andM;The costs don't stop there.andP;  Patent applications are written by lawyers forlawyers.andP;  A programmer reading a patent maynot believe that his programviolates the patent, but a federal court may rule otherwise.andP;  It is thus nownecessary to involve patent attorneys at every phase of program development.andM;Yet this only reduces the risk of being sued later -- it does not eliminatethe risk.andP;  So it is necessary to have a reserve of cash for the eventualityof a lawsuit.andM;When a company spends millions to design a hardware system, and plans toinvest tens of millions to manufacture it, an extra million or two to pay fordealing with the patent system might be bearable.andP;  However, for theinexpensive programming project, the same extra cost is prohibitive.andO;Individuals and small companies especially cannot afford these costs.andO;Software patents will put an end to software entrepneurs.andM;Patent Searches are UnreliableandM;Even if developers could afford patent searches, these are not a reliablemethod of avoiding the use of patented techniques.andP;  This is because patentsearches do not reveal pending patent applications (which are keptconfidential by the Patent Office).andP;  Since it takes several years on theaverage for a software patent to be granted, this is a serious problem: Adeveloper could begin designing a large program after a patent has beenapplied for, and release the program before the patent is approved.andP;  Onlylater will the developer learn that distribution of the program isprohibited.andM;For example, the implementors of the widely used public domain datacompression program compress followed an algorithm obtained from IEEEComputer magazine.andP;  They and the user community were surprised to learn laterthat patent number 4,558,302 had been issued to one of the authors of thearticle.andP;  Now Unisys is demanding royalties for using this algorithm.andO;Although the program is still in the public domain -- using it means riskinga lawsuit.andM;The Patent Office does not have a workable scheme for classifying softwarepatents.andP;  Patents are most frequently classified by end results, such as&quot;converting iron to steel,&quot; but many patents cover algorithms whose use in aprogram is entirely independent of the purpose of the program.andP;  For example,a program to analyze human speech might infringe the patent on a speedup inthe Fast Fourier Transform; so might a program to perform symbolic algebra(in multiplying large numbers); but the category to search for such a patentwould be hard to predict.andM;You might think it would be easy to keep a list of the patented softwaretechniques, or even simply remember them.andP;  However, managing such a list isnearly impossible.andP;  A list compiled in 1989 by a lawyers specializing in thefield omitted some of the patents mentioned in this article.andM;Obscure PatentsandM;When you imagine an invention, you probably think of something that could bedescribed in a few wordds, such as &quot;a flying machine with fixed, curvedwings&quot; or &quot;an electrical communicator with a microphone and a speaker.&quot;andP;  Butmost patents cover complex detailed processes that have no simpledescriptions -- often they are speedups or variants of well-known processesthat are themselves complex.andM;Most of these patents are neither obvious nor brilliant; they are obscure.andP;  Acapable software designer will &quot;invent&quot; several such improvements in thecourse of a project.andP;  However, there are many avenues for improving atechnique, so no single project is likely to find any given one.andM;For example, IBM has several patents (including patent 4,656,583) onworkmanlike, albeit complex, speedups for well-known computations performedby optimizing compilers, such as register coloring and computing theavailable expressions.andM;Patents are also granted on combinations of techniques that are alreadywidely used.andP;  One example is IBM patent 4,742,450, which covers &quot;sharedcopy-on-write segments.&quot;andP;  This technique alllows several programs to sharethe same piece of memory that represents information in a file; if anyprogram writes a page in the file, that page is replaced by a copy in all ofthe programs, which continue to share that page with each other but no longershare with the file.andM;Shared segments and copy-on-write have been used since the 1960s.andP;  Thisparticular combination may be new as a specific feature, but is hardly aninvention.andP;  Nevertheless, the Patent Office thought that it merited a patent,which must now be taken into account by the developer of any new operatingsystem.andM;Obscure patents are like land mines: Other developers are more likely toreinvent these techniques than to find out about the patents, and then theywill be sued.andP;  The chance of running into any one of these patents is small,but they are so numerous that you cannot go far without hitting one.andP;  Everybasic technique has many variations, and a small set of basic techniques canbe combined in many ways.andP;  The patent office has now granted more than 2000software patents -- 700 in 1989 alone.andP;  We can expect the pace to accelerate.andO;In ten years, programmers will have no choice but to march on blindly andhope they are lucky.andM;Patent Licensing has Problems, tooandM;Most large software companies are trying to solve the problem of patents bygetting patent of their own.andP;  Then they hope to cross-license with the otherlarge companies that own most of the patents, so they will be free to go onas before.andM;While this approach will allow companies such as Microsoft, Apple, and IBM tocontinue in business, it will shut new companies out of the field.andP;  A futurestart-up, with no patents of its own, will be forced to pay whatever pricethe giants choose to impose.andP;  That price might be high: Established companieshave an interets in exluding future competitors.andP;  The recent Lotus lawsuitsagainst Borland International and the Santa Cruz Operation (althoughinvolving an extended idea of copyright rather than patents) show how thiscan work.andM;Even the giants cannot protect themselves with cross-licensing from companieswhose only business is to buy patents and then threaten to sue.andP;  For example,the New York-based Refac Technology Development Corporation, a company thatrepresents Forward Refence Systems (owners of the patent for natural orderrecalc), recently sued Lotus Corporation.andP;  Natural order recalc is Refac'sfirst foray into the software patent arena; for the past 40 years, thecompany has negotiated licenses in the fastener and electronic componentindustries.andP;  The company employs no programmers or engineers.andM;Refac is demanding -- in the neighborhood of -- five percent of sales of allmajor spreasheet programs.andP;  If a future program infringes on 20 such patents-- and this is not unlikely, given the complexity of computer programs andthe broad applicability of many patents -- the combined royalties couldexceed 100 percent of the sales price.andM;The Fundamental QuestionandM;According to the Constitution of the United States, the purpose of patents isto &quot;promote the progress of science and the useful arts.&quot;andP;  Thus, the basicquestion at issue is whether software patents, supposedly a method ofencouraging software progress, will truly do so, or will retard progressinstead.andM;So far we have explained the ways in which patents will make ordinarysoftware development difficult.andP;  But what of the intended benefits ofpatents: More invention, and more public disclosure of inventions?andP;  To whatextent will these actually occur in the field of software?andM;There will be little benefit to society from software patents becauseinvention in software was already flourishing before software patents, andinventions were normally published in journals for everyone to use.andO;Invention flourished so strongly, in fact, that the same inventions wereoften found again and again.andM;In Software, Independent Reinvention isandM;CommonplaceandM;A patent is an absolute monopoly; everyone is forbidden to use the patentedprocess, even those who reinvent it independently.andP;  This policy implicitlyassumes that inventions are rare and precious, because only in thosecircumstances is it beneficial.andM;The field of software is one of constant reinvention; as some people say,programmers throw away more &quot;inventions&quot; each week than other people developin a year.andP;  And the comparative ease of designing large software systemsmakes it easy for many people to do work in the field.andP;  A programmer solvesmany problems in developing each program.andP;  These solutions are likely to bereinvented frequently as other programmers tackle similar problems.andM;The prevalence of independent reinvention negates the usual purpose ofpatents.andP;  Patents are intended to encourage inventions and, above all, thedisclosure of inventions.andP;  If a technique will be reinvented frequently,there is no need to encourage more people to invent it; because some of thedevelopers will choose to publish it (if publication is merited), there is nopoint in encouraging a particular inventor to publish it -- not at the costof inhibiting use of the technique.andM;Overemphasis of InventionsandM;Many analysts of the American and Japanese industry have attributed Japanesesuccess at producing quality products to the fact that they emphasizeincremental improvements, convenient features, and quality rather thannoteworthy inventions.andM;It is especially true in software that success depends primarily on gettingthe details right.andP;  And that is most of the work in developing any usefulsoftware system.andP;  Inventions are a comparatively unimportant part of the job.andM;The idea of software patents is thus an example of the mistaken Americanpreoccupation with inventions rather than products.andP;  And patents will furtherreinforce this mistake, rewarding not the developers who write the bestsoftware, but those who were first to file for a patent.andM;Impeding InnovationandM;By reducing the number of people engage in software development, softwarepatents will actually impede innovation.andP;  Much software innovation comes fromprogrammer's solving problems while developing software, not from projectswhose specific purpose is to make invention and obtain patents.andP;  In otherwords, these innovations are byproducts of software development.andM;When patents make development more difficult, and cut down on developmentprojects, they will also cut down on the byproducts of development -- newtechniques.andM;Could Patents Ever be Beneficial?andM;Although software patents are in general harmful to society as a whole, we donot claim that every single software patent is necessarily harmful.andP;  Carefulstudy might show that under certain specific and narrow conditions(necessarily excluding the vast majority of cases) it is beneficial to grantsoftware patents.andM;Nonetheless, the right thing to do now is to eliminate all software patentsas soon as possible, before more damage is done.andP;  The careful study can comeafterward.andM;Clearly, software patents are not urgently needed by anyone, except patentlawyers.andP;  The prepatent software industry had no problem that was solved bypatents; there was no shortage of invention and no shortage of of investment.andO;Complete elimination of software patents may not be the ideal solution, butit is close, and is a great improvement.andP;  Its very simplicity helps avoid along delay while people argue about details.andP;  If it is ever shown thatsoftware patents are beneficial in certain exceptional cases, the law can bechanged again at that time -- if it is important enough.andP;  There is no reasonto continue the present catastrophic situation until that day.andM;Software Patents are Legally QuestionableandM;It may come as a surprise that the extension of patent law to software isstill legally questionable.andP;  It rests on an extreme interpretation of aparticular 1981 Supreme Court decision, Diamond vs.andP;  Deihr.andP;  (See &quot;LegallySpeaking&quot; in Communications of the ACM, August 1990.)andM;Traditionally, the only kinds of processes that could be patented were thosefor transforming matter (such as for transforming iron into steel).andP;  Manyother activities which we would consider processes were entirely excludedfrom patents, including business methods, data analysis, and &quot;mental steps.&quot;andO;This was called the &quot;subject matter&quot; doctrine.andM;Diamond vs.andP;  Deihr has been interpreted by the Patent Office as a reversal ofthis doctrine, but the court did not explicitly reject it.andP;  The caseconcerned a process for curing rubber -- a transformation of matter.andP;  Theissue at hand was whether the use of a computer program in the process wasenough to render it unpatentable, and the court rules that it was not.andP;  ThePatent Office took this narrow decision as a green light for unlimitedpatenting of software techniques, and even for the use of software to performspecific well-known and customary activities.andM;Most patent lawyers have embraced the change, saying that the new boundariesof patents should be defined over decades by a series of expensive courtcases.andP;  Such a course of action will certainly be good for patent lawyers,but it is unlikely to be good for software developers and users.andM;One Way to Eliminate Software PatentsandM;We recommend the passage of a law to exclude software from the domain ofpatents.andP;  That is to say that, no matter what patents might exist, they wouldnot cover implementations in software; only implementations in the form ofhard-to-design hrdware would be covered.andP;  An advantage of this method is thatit would not be necessary to classify patent applications into hardware andsoftware when examining them.andM;Many have asked how to determine software for this purpose -- where the lineshould be drawn.andP;  For the purpose of this legislation, software should bedefined by the characteristics that make software patents especially harmful:andM;* Software is built from ideal infallible mathematical components, whoseoutputs are not affected by the components they feed into.andM;* Ideal mathematical components are defined by abstract rules, so thatfailure of a component is by definition impossible.andP;  The behavior of anysystem built of these components is likewise defined by the consequences ofapplying the rules step by step to the components.andM;* Software can be easily and cheaply copied.andM;Following this criterion, a program to compute prime numbers is a piece ofsoftware.andP;  A mechanical device designed specifically to perform the samecomputation is not software, because mechanical components have friction, caninterfere with each other's motion, can fail, and must be assembledphysically to form a working machine.andM;Any piece of software needs a hardware platform in order to run.andP;  Thesoftware operates the features of the hardware in some combination, under aplan.andP;  Our proposal is that combining the features in this way can nevercreate infringement.andP;  If the hardware alone does not infringe a patent, thenusing it in a particular fashion under control of a program should notinfringe either.andP;  In effect, a program is an extension of the programmer'smind, acting as a proxy for the programmer to control the hardware.andM;Usually the hardware is a general-purpose computer, which implies noparticular application.andP;  Such hardware cannot infringe any patents exceptthose covering the construction of computers.andP;  Our proposal means that, whena user runs such a program into a general-purpose computer no patents otherthan those should apply.andM;The traditional distinction between hardware and software involves a complexof characteristics that used to go hand in hand.andP;  Some newer technologies,such as gate arrays and silicon compilers, blur the distinction because theycombine characteristics associated with hardware with others associated withsoftware.andP;  However, most of these technologies can be classifiedunambiguously for patent purposes, either as software or as hardware, usingthe criteria above.andP;  A few gray areas may remain, but these are comparativelysmall, and need not be an obstacle to solving the problems patents pose forordinary software development.andP;  They will end up being treated as hardware,as software, or as something in between.andM;Fighting Patents One by OneandM;Until we succeed in eliminating all patenting of software, we must try tooverturn individual software patents.andP;  This is very expensive and can solveonly a small part of the problem, but that is better than nothing.andM;Overturning patents in court requires prior art, which may not be easy tofind.andP;  The League for Programming Freedown will try to serve as a clearinghouse for this information, to assist the defendants in software patentssuits.andP;  This depends on your help.andP;  If you know about prior art for anysoftware patent, please send the information to the League (see theaccompanying text box.)andM;If you work on software, you can personally help prevent software patents byrefusing to cooperate in applying for them.andP;  The details of this may dependon the situation.andM;ConclusionandM;Exempting software from the scope of patents will protect software developersfrom the insupportable cost of patent searches, the wasteful struggle to finda way clear of known patents, and the unavoidable danger of lawsuits.andM;If nothing is changed, what is now an efficient creative activity will becomeprohibitively expensive.andP;  The sparks of creativity and individualism thathave driven the computer revolution will be snuffed out.andM;To picture the effects, imagine that each square of pavement on the sidewalkhas an owner and that pedestrians must obtain individual licenses to step onparticular squares.andP;  Think of the negotiations necessary to walk an entireblock under this system.andP;  That is what writing a program will be like in thefuture if software patents continue.andM;This article is a position paper of the League for Programming Freedom, anorganization opposed to software patents and interface copyrights and whosemembers include, among others, Marvin Minsky, John McCarthy, and Robert S.andO;Boyer.andP;  Richard Stallman and Simson Garfinkel helped prepare this article forpublication.andP;  You can contact the League through Internet mail(leage@prep.ai.mit.edu) or at 1 Kendal Square #143, P.O. Box 9171, Cambridge,MA 02139.andO;</TEXT></DOC>