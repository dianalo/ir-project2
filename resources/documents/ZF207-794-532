<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-794-532  </DOCNO><DOCID>07 794 532.andM;</DOCID><JOURNAL>AI Expert  Oct 1989 v4 n10 p5(2)* Full Text COPYRIGHT Miller-Freeman 1989.andM;</JOURNAL><TITLE>Tighten the loop. (expert system technology andsoftwares-development life cycle) (editorial)</TITLE><AUTHOR>Chapnick, Philip.andM;</AUTHOR><DESCRIPT>Topic:     Program Development TechniquesFourth-Generation LanguagesFuture of ComputingStructured Design TechniquesSoftware Engineering.andM;</DESCRIPT><TEXT>Tighten The LoopandM;Developers are finding that as expert-system technology matures, itscommercial applications have many of the same functional requirements as&quot;conventional&quot; software-development technology.andP;  The development life cycle,however, is one area in whicdh expert systems still display strikingdifferences form conventional software.andM;Expert systems are often developed using rapid prototyping-basedmethodologies, as compared with the standard, structured design techniquesused for conventional systems.andP;  The advent of widely available 4GLs and(soon) AI-based 5GLs makes prototyping a viable option for a variety ofprogramming projects.andP;  By incorporating the prototyping methodology commonlyused for expert systems, software developers who develop all kinds ofapplications will improve the quality and efficiency of their systems.andM;Building corporate applications typically begins with discussions between thesponsors (sometimes, but not always, the end user) and systems analysts.andO;These initial meetings try to distill and formulate the program's purpose.andO;Then the analyst comes back, weeks or months later, with a flow chartrepresenting the proposed system.andM;Now the sponsors or users are in the loop again and asked to agree that thediagram represents the system they want.andP;  The analyst disappears oncemore--for perhaps even a longer time--to prepare a detailed programspecification document.andP;  As before, the sponsors/users are consulted toensure that the specification document, which can be of trully epicproportions, represents the system.andP;  When the users finally sign off on thisdocument, it is shipped to the programming department for coding.andM;The intent of this lengthy, structured design approach is to bring about areconciliation between developers and users before coding begins; it's beenwell documented that changes in the design phase are far less costly toimplement than changes after coding commitments.andP;  However, a structuredapproach doesn't always work as smoothly in practice as it does in theory.andO;The reasons I'll focus on--the ones prototyping addresses most directly--aredue to the punctuated way users are involved with the systems-design process,and the difficulty they can have mapping design documents into functionalsystems.andM;Each step in a typical structured-design process involves soliciting userinput and acquiescence, followed by long gaps when the project essentiallydisappears into a black hole as far as the user is concerned.andP;  Users oftenchange their minds about what they want without communicating these changesto the analyst during the systems-design process.andP;  How many times have youbrought back a tediously constructed system specification only to have theuser tell you: &quot;I've thought about it some more and what I really need is...&quot;andO;Then it's time to go back to the drawing board.andM;Just as frequently, users (who are not experts in reading design documents)discover what they need only after they get their hands on the system.andP;  It'sdifficult to map a flow diagram or specification document onto a specificsequence of activities that the software should support.andM;The typical prototyping approach for expert systems-development employs amuch more tightly-coupled loop between developer, system user, and softwaresystem.andP;  For example, an insurance company built an underwriting system usinga very tightly coupled interview, code, and test loop: all three processestook place every day!andP;  According to the developers, this tight loop improvedthe quality of the system in several important ways.andP;  The underwritingdepartment could track the progress of the system on a daily basis; thecontinuous interaction between the developers and the users helped keep themboth interested and involved in the system's success.andP;  The interaction alsohelped them &quot;buy into&quot; the system, a factor as critical for the project'sultimate success as any technical issue.andP;  By keeping users continuouslyinvolved in the system development cycle, they're much more likely to feellike they own it.andM;An interesting and still unanswered question that arises is how to managethis new relationship between users and developers.andP;  The insurance companysystem developers spent a lot of time on education to convince theunderwriting department that the technology was sound.andP;  Once they got the VPbehind them, they were able to get the full-time use of the best underwriterin the company.andP;  Not all developers are so lucky--access to the experts isoften restricted, making tight-loop development more difficult to sustain.andO;But continuous visibility into system progress helps keep the expertsinterested and makes it easier to get them and keep them involved.andM;Another strong benefit of expert-systems technology vis-a-vis the designphase is that developers are able to code in a language that is easier forsponsors/users to understand, allowing them to take a more active role in thesystem's development.andP;  Rule-based development systems express the problem'sprogramming solution in a form closer to user thought patterns thanconventional languages such as COBOL, C, or Pascal.andM;In the insurance company application, rule reviews substituted for codewalk-throughs to resolve any conflicts and ensure consistency in the system'sunderwriting philosophy.andP;  Having the experts discuss the philosophyunderlying the rules until they reached a consensus helped keep the usercommunity involved and added excitement and energy to the developmentprocess, which ultimately produced a high-quality system with excellent useracceptance.andM;Since the language used to express the system is closer to users' ways ofthought, there has been talk about whether it would be profitable to haveusers perform more of the system maintenance.andP;  While this possibility has anattractive ring to it, in most cases--at least for the time being--it seemsbetter to leave maintenance in the hands of the professional developers.andO;Even minor rule modifications can have dramatic performance effects.andP;  Versioncontrol and software integrity can also suffer if system modifications arenot carefully designed and controlled.andP;  Unless the system is small,self-contained, and has little interaction with other essential subsystemssuch as databases, networks, and other application programs, the technologyis still too young in production environments to entrust users with systemmaintenance.andM;Expert-system technology may make some of its greatest contributions to thesoftware development community by facilitating increased communication withusers, creating increased harmony, and serving as a development model forbuilding the systems of the 90's.andO;</TEXT></DOC>