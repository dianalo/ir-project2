<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-867-662  </DOCNO><DOCID>07 867 662.andM;</DOCID><JOURNAL>Systems Integration  Nov 1989 v22 n11 p23(2)* Full Text COPYRIGHT Cahners Publishing Co. 1989.andM;</JOURNAL><TITLE>Attaching removable-media drives via the file system. (UnixReport) (column)</TITLE><AUTHOR>Balafas, Dino M.andM;</AUTHOR><SUMMARY>Systems integrators who want to take advantage of low-cost,removable media such as digital audio tape, and optical disks mustmake some modification to the Unix File system.andP;  Thesemodifications are required because the simple file system wascreated prior to the proliferation of non-magnetic media.andP;  Thestructure of the file system is described in addition to methodsof achieving the required modifications.andM;</SUMMARY><DESCRIPT>Topic:     UNIXFile OrganizationComputer systems integrationTutorialDigital Audio TapeOptical Disks.andM;</DESCRIPT><TEXT>Attaching removable-media drives via the file systemandM;There is a variety of data storage media available for UNIX systems with moreadvantageous features than magnetic disk has to offer.andP;  UNIX systemsintegrators can take advantage of these new technologies by transparentlyintegrating them into their current UNIX file system.andP;  By slightly modifyingtwo key areas of the UNIX file system--the superblock and the inodes--a newand exciting world of data storage and retrieval is opened.andM;This month, I'll describe the implementation of the UNIX file system anddiscuss how it can be modified to facilitate the indexing of files to datastored on removable media.andM;Depending on the sophistication of the change to the UNIX file system,portions of the data of a file may reside on a cheaper media form, withoutlosing access to the file.andM;The UNIX file system can be described as a simplistically elegant filesystem.andP;  Its design is straightforward in approach and implementation.andP;  Thehierarchical implementation facilitates both a unique way of performing fileorganization on the disk and allows for a natural data-eliminating method oflocating and accessing files.andP;  Its rich command set eases acquisition ofinformation about the system that is not possible in many otherarchitectures.andP;  Unfortunately, because of its age, the design does notinherently accommodate storage devices with removable media options.andM;UNIX facilitates file organizationandM;With modifications to the superblock and inode structures, files or portionsof them can be migrated to media other than magnetic disk, without losinginformation about the files or their location in the tree structure of thefile system.andP;  This provides users with an undisturbed file system, yet allowsthem to take advantage of a less expensive storage medium than magnetic disk.andO;Helical scan tape, DAT tape, and optical disk storage often are better suitedto a user's long-term, non-volatile data-management needs.andM;I'd like to briefly review the structure of the file system of UNIX beforeexamining areas of change to accommodate removable media.andM;The UNIX file system is organized into four major areas: boot block,superblock, inode list, and data block.andP;  The boot block, usually found in thefirst block of the file system, contains the bootstrap code needed to bringup the system.andP;  Usually only one boot block is needed per system, but inpractice, this block is represented in every created file system, even if itis unused.andM;The superblock, directly succeeding the boot block, contains specificinformation about the file system, such as the location of free space.andP;  Theinode list, whose size is defined by the system administrator when the filesystem is created, stores a list of information that represents files to thekernel.andP;  Following the inode list is the data block area where each file'sinformation is stored in predefined blocks.andM;The primary organization structure of files in the UNIX kernel is the inode,short for index node.andP;  An inode, which contains information about the file aswell as about where the data is stored in the data area, represents a 1-to-1ratio to each user file; meaning one inode exists for every file in the filesystem.andP;  Inodes not only exist for user files stored on disk, but alsorepresent directories, FIFO (first-in-first-out) files, block files (usedusually for disks), character files (usually used for TTY's), links and more.andM;Inodes store a wealth of information about the files.andP;  This includes the fileowner's identifier, signifying the user ownership of the file; and the filetype, which tells the system if the file is a directory, regular, character,block, link, or FIFO type of file.andM;It also reports on:andM;* File access permissions, which determine which accounts can access thefile;andM;* File access times, including the last time the file was modified andaccessed and when the inode was last changed;andM;* Links to the file, describing how many other files refer to this file;andM;* And file size, telling how many bytes the file currently contains.andM;Most importantly, each inode contains information on the index of file blocksthat comprise the file.andP;  This index stores the address of disk blocks andtheir size varies from system to system, usually ranging from 512 bytes to8,192 bytes.andM;Each of these inodes represents a specific place on disk in the inode listarea of the file system.andP;  The actual inode information stored on disk is asubset of the inode once it is in memory, but for the scope of thisdiscussion, it is sufficient to mention only the disk-bound inodeinformation.andM;An inroad on the inodeandM;To accomplish our goal of trying to reference the data elements of an inodeon another media, a new field must be introduced to the inode structure.andP;  Ilike to call this field the Logical Media ID.andP;  This ID will serve as apointer or link to another file system (another media) on which the inode'sdata elements are stored.andP;  With this ID field, the file will be able toaccess another file system through some sort of map or database.andM;For example, the Logical Media ID could be added as a new field in the/etc/fstab file.andP;  The kernel or a program could then determine the mountpoint, the file system, and, with more modifications to the /etc/fstab, thephysical location of the removable media (for example, platter location injukebox).andP;  With this, some drivers could load the media into the drive, mountthe file system, and access the needed data blocks for the inode.andP;  TheLogical Media ID is updated when the data elements were being moved over tothe removable media.andM;Changes to the stat(2) system call would allow users, systems programmers,and the system to access the new information in the inode, which would beadvantageous in interfacing other applications.andP;  The changes would include anew structure to return the Logical Media ID of an inode.andM;Anatomy of a superblockandM;Since the Logical Media ID is our identifier from the inode to the correctfile system, the superblock must also have corresponding Logical Media IDrepresented in its structure.andP;  During mount time of the file system, thesuperblock will be checked and the Logical Media ID can be verified as thecorrect media.andM;In most versions of UNIX, the superblock contains information about thecurrent state of the file system itself.andP;  Its structure frequently has thesefields:andM;* The size of the file system in bytes;andM;* The number of free blocks in the file system (a list of the availableblocks for the file system);andM;* An index of the next available block in the free block list;andM;* The configured size of the inode list;andM;* The number of free inodes in the file system;andM;* A list of free inodes in the file system;andM;* An index of free inodes;andM;* And a free inodes lists.andM;The Logical Media ID would be added to the structure of the superblock.andP;  Withall the additions to the superblock, inode structures, and a map or database,files can be migrated to an alternate form of media storage, without losingany information about the file or its location in the file-system tree.andM;Dino M. Balafas is lead software engineer at ZETACO Inc., Eden Prairie,Minn., engaged in the design and marketing of storage and retrieval systemsfor workstation networks.andP;  Balafas, who has a B.S.andP;  degree in computerscience and mathematics, specializes in UNIX.andO;</TEXT></DOC>