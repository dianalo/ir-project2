<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-162-017 </DOCNO><DOCID>10 767 456</DOCID><JOURNAL>Computer Language  May 1991 v8 n5 p29(5)* Full Text COPYRIGHT Miller Freeman Publications 1991.andM;</JOURNAL><TITLE>Event lists and essential models. (Tools of the Trade) (column)</TITLE><AUTHOR>Keuffel, Warren.andM;</AUTHOR><SUMMARY>Structured analysis techniques are explained in the light of theevent list and related issues.andP;  The essence of a system isexplained as a minimal, technology-neutral description of thesystem requirements.andP;  The incarnation of a system, as defined byTom DeMarco, is a particular implementation of a system, or oneparticular implementation of what the system happens to be.andP;  Acontext diagram is useful to help define the boundary of a system.andO;The essence of a system is the basis for the central activity ofessential system analysis.andP;  Four essential systems analysisprinciples for building models of the essence are to budget forcomplexity, keep technological neutrality, perfect internaltechnology, and have a minimal essential model.andP;  Eventpartitioning is the process by which an analyst uses events topartition the system into essential activities.andM;</SUMMARY><DESCRIPT>Topic:     Structured Design TechniquesStructured ProgrammingAnalysisSystem DesignGuidelinesProgram Development TechniquesEvent-Driven Systems.andO;Feature:   illustrationchart.andO;Caption:   Restaurant information system context diagram. (chart)Restaurant information system ERD. (chart)andM;</DESCRIPT><TEXT>A few months ago 1 began exploring structured analysis with a discussion ofcontext diagrams and entity-relationship diagrams.andP;  With these tools,analysts can establish a system's boundaries and begin to understand itsstructure.andP;  But context diagrams and ERDs, as useful as they are, do notprovide the total picture.andP;  One more piece is needed to round out theanalyst's initial toolkit: the event list.andM;Simply put, an event is a stimulus to which the system responds.andP;  But thereal world is more complicated than such simple statements imply.andM;Before I launch into a discussion of events, I'd like to put these structuredanalysis techniques into perspective and give credit to the authors andconsultants who developed them.andP;  The first reason I'm doing so is, of course,to make sure credit is given where credit is due.andP;  But the second and (to mymind) more important reason is to illustrate and emphasize that a viable andvaluable method can be constructed from selected portions of several methodsthat may have been designed as complete system solutions.andM;The context diagram was developed by Tom DeMarco and popularized in his bookStructured Analysis and System Specifcation (Prentice Hall, 1979).andP;  Much ofmy methods discussion has been based on DeMarco's ideas, but most students ofstructured methods agree that DeMarco concentrated too much on the processesof the application under study and neglected investigation of the datastructures manipulated by those processes.andP;  Thus, for data modeling guidance,we turned to the technique (discussed in last month's column) developed bySally Shlaer and Steven Mellor of Project Technology, a Berkeley, Calif.,andO;consulting firm.andP;  Their method is described in Object Oriented SystemsAnalysis (Prentice Hall, 1988), which, despite its name, is less about objectorientation and more about information modeling.andM;This month's exploration of the event list and related issues is based onconcepts first presented in Essential Systems Analysis by Stephen M.andO;McMenamin and John F. Palmer (Prentice Hall, 1984).andP;  Much of what we willdiscuss in the months to come will be based on the work of these fivewriters.andM;Finally, I would be remiss if I did not acknowledge the contributions ofconsultants such as Rich Cohen and Dave Bulman, who have enlightened me aboutthe possible synergy of melding several disparate methods into one.andM;McMenamin and Palmer introduced two new terms to the structured methodscommunity: essence and incarnation.andP;  They sound like American adaptations ofIndian terms for incense and reincarnation, don't they? The real definitions,however, are a little more prosaic.andM;Tom DeMarco, in the introduction to Essential Systems Analysis explains:&quot;Essence and incarnation correspond roughly to what I have referred to in thepast as the logical and physical perceptions of a system.&quot; We will explorethe domains of these terms later in this and future columns.andP;  Briefly, theessence of a system is a minimal, technology-neutral description of thesystem requirements, and the incarnation is a particular implementation of asystem.andM;In DeMarco's words, the essence is what a system &quot;has to be&quot; and anincarnation is &quot;one particular implementation of [what] the system happens tobe.&quot; Hang on to those definitions; we'll return to them shortly.andM;The context diagram, as shown in previous months, helps define the boundaryof the system.andP;  Recall that in a context diagram, the proposed system,represented by a circle (also called a bubble), is connected by data-flowlines with one or more squares representing external interactors.andP;  However,those data flows only show data that flows between external interactors andthe system; they contain no information about the events that make the datastart and stop flowing.andP;  That information is provided by the event list.andM;McMenamin and Palmer posit that there are only two types of events: externaland temporal.andP;  External events are actions initiated by the externalinteractors that produce &quot;an incoming data flow that crosses the boundary ofthe system.&quot; When the boss hires a new employee and submits the paperwork fora new hire, for instance, that is an external event-a stimulus-that causesthe payroll system to add the new employee's vital statistics to the payrolldatabase.andM;Temporal events are time-related stimuli that may be absolute or relative.andO;An absolute temporal event would be waking the system every Friday to crankout paychecks.andP;  Taking the newly hired employee off probation status 30 daysafter hire date is a relative temporal event.andM;Before we begin studying what is and is not an event, let's return to thediscussion of essence and incarnation, from which we took a brief detour.andO;The central activity of essential systems analysis, as explained by McMenaminand Palmer, is deriving a system's essence.andP;  That essence comprises essentialactivities and essential memory.andP;  We'll return to essential memory in a latercolumn and focus on essential activities this month.andP;  McMenamin and Palmerassert that there are two types of essential activities: fundamental andcustodial.andM;Fundamental activities perform tasks that are part of the system's statedpurpose.andP;  Custodial activities acquire and store information needed by thefundamental activities in essential memory.andP;  (We'll defer a discussion ofcustodial activities until the time when we also discuss essential memory.)andM;To describe a fundamental activity, we have to understand the four essentialsystems analysis principles for building models of the essence.andP;  Theseprinciples are: n Budget for complexity: McMenamin and Palmer assert thatwhen you build a model you must account for the limited ability of humanbeings to grasp large, complex problems without breaking them down intomanageable pieces.andP;  This principle is an application of the famous 7 [+ or-andrsqb;2 rule, which suggests that a diagram or other visual aid should have sevenitems on it, plus or minus two.andM;* Technological neutrality: When you build your model of the essence, youshould leave out all bias toward any technology that might be used toimplement the essence.andM;* Perfect internal technology: This may be McMenamin and Palmer's greatestcontribution to structured methods.andP;  When you build your model of theessence, they say, construct your model as if it were to be implemented withperfect internal technology: instantaneous sorts, no exception handling forerrors, and so forth.andP;  Of course you will eventually have to take thelimitations of technology into consideration, but those decisions should bedeferred until you build the incarnation model.andM;* Minimal essential model: McMenamin and Palmer's definition is, &quot;Even thoughyou apply the principle of perfect internal technology correctly, you mayfind more than one way to define an essential requirement, but only one ofthese possible definitions meets the standards of the minimal essentialmodel.andP;  The least complex one is the definition to choose.'andM;With that brief introduction to the underlying principles of essentialsystems analysis under our belts, let's continue discussing the event list.andO;The next concept to explore is event partitioning, the process by which ananalyst uses events to &quot;partition the portion of the system that producesresponses; it uses events to partition the system into essential activities.'andM;In other words, event partitioning is the process of partitioning that partof the system that responds to external events into essential activities.andO;McMenamin and Palmer suggest two tests to identify true essential activities:andM;* &quot;The activity must contain the action that would be carried out in responseto one and only one event if the system were implemented using perfectinternal technology.&quot;andM;* &quot;When all the activities that make up the essential activity have beenperformed, the system must become idle until the event in question occursagain or until a different event occurs.&quot;andM;Let's apply the event concept we've been discussing to the restaurantinformation system.andP;  In recent columns, the restaurant information system hasbeen a model to illustrate the methods I use during initial stages ofstructured analysis.andP;  What are some events that might occur at the boundarybetween the restaurant information system and the external interactors?andM;The external interactors we described in the February column included:andM;* Public health administrators (policies)andM;* Public health inspectors (compliance reports)andM;* State legislature (public health legislation)andM;* Center for Disease Control (model health code)andM;* Complainants (complaints).andM;The terms in parentheses are the names of the data flows between therestaurant information system system and the external interactors, as shownin Figure 1.andM;An interview with the user at the County Health Dept.andP;  results in this eventlist:andM;* Restaurant patron complains about restaurant.andM;* Center for Disease Control updates model health code.andM;* Restaurant is randomly selected for inspection.andM;* Public health inspector submits inspection report.andM;* Public health administration changes policy.andM;* Legislature changes ordinances.andM;* Restaurant owner applies for restaurant license.andM;* Fire department approves new restaurant license.andM;* Fire department suspends existing restaurant license.andM;* County health department suspends existing restaurant license.andM;* Food handler applies for food handler permit.andM;Compiling this list shows that our first pass at the context diagram wasincomplete.andP;  (We also mentioned that in passing as we developed the ERD lastmonth.) Figure 2 shows how I organized manager and food handler relationshipsas well as owner and employee relationships in the ERD.andP;  Look at the contextdiagram and the ERD with the first-cut event list in mind, and see if you canidentify where the system (as described by the context diagram or the ERD)does not jibe with the activities in the event list.andP;  Also see if you canidentify other events to which the system should respond.andP;  It is apparent nowthat we overlooked an event that needs to be added to the event list: ownersubmits employee roster.andM;Next month we'll update our context diagram and use the event list to startdefining the essential activities for the restaurant information system.andM;Warren Keuffel lives in Salt Lake City, Utah, and is a programmer for UnisysCorp. Contact him on the COMPUTER LANGUAGE forum on Compuserve, where he isthe sop of the Toolworks section.andP;  His ID is 76 702,525.andP;  You may also reachhim by writing to COMPUTER LANGUAGE, 600 Harrison St., San Francisco, Calif.andO;94107.andO;</TEXT></DOC>