<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-050-153 </DOCNO><DOCID>11 344 727</DOCID><JOURNAL>VAX Professional  Oct 1991 v13 n5 p26(2)* Full Text COPYRIGHT Professional Press Inc. 1991.andM;</JOURNAL><TITLE>VMS mythconceptions: the VMS process tree. (LIB$SPAWN in VMS)(tutorial)</TITLE><AUTHOR>Leichter, Jerrold.andM;</AUTHOR><SUMMARY>VMS detached process routines are able to run with commandlanguage interpreter (CLI) callbacks, contrary to programmers'misconceptions.andP;  Whereas a UNIX system builds a master tree with asingle root that contains every process in the system, a VMSsystem takes a different root approach by creating a virtualforest of trees, each with a detached root process and havingsubprocesses under the roots.andP;  Therefore, all the processes withina given tree are one job, and that job shares its resources amongall the job's processes.andP;  The CLI generally runs in asupervisorial mode to give service to users and run programs.andO;However, if a detached process is specified to run with a CLI, itcan do so and can use CLI callbacks.andP;  Whether or not a callback isimplemented is up to the CLI, and it will declare a change of modeto the Supervisor handler.andP;  The handler then makes sure that thecallback is supported and responds or rejects accordingly.andM;</SUMMARY><DESCRIPT>Topic:     Systems ProgrammingProcess ManagementProcessing ModesProgramming InstructionUNIXTutorialComparison.andM;</DESCRIPT><TEXT>A continuing source of confusion among VMS programmers is the connectionamong detached processes, subprocesses, other kinds of processes, and theavailability of CLI callbacks such as LIB$SPAWN.andP;  Many people seem to believethat these routines will not work in detached processes.andP;  This is wrong.andP;  Tounderstand why, let's explore the different kinds of processes that VMSsupports, and how CLIs interact with them.andM;On many operating systems, VMS among them, processes can create &quot;child&quot;processes; the creating process becomes the parent of the new process.andP;  (InVMS, the parent process PID can be retrieved using the OWNER item of the$GETJPI system service.) Of course, the child process can then proceed tocreate children of its own.andP;  Subject to quotas and resource limits, we canproduce arbitrarily deep trees of processes, where links in die tree joinparent process to child.andM;After an operating system allows the creation of such process trees, we arefaced with the question: Where should the tree start? There are two basicapproaches an operating system can take: It can build a single master treecontaining every process in the system, with some special system process asthe single root; or it can provide some method for creating new rootprocesses.andP;  For example, UNIXII takes the first approach: If you follow thechain of parent process pointers back from any user process, you eventuallyget to process 0, which on UNIX is the swapper.andP;  Process 0 is essentiallybuilt into UNIX, and as part of the bootstrap process will set in motionother processes (principally init, process 1) which will ultimately createall user processes.andP;  UNIX only provides a single system call to create newprocesses (fork), and fork always creates a child of the calling process.andM;Note: In UNIX, there's a complication.andP;  The termination of a process does notrequire its children to terminate.andP;  To prevent this from leaving gaps in thetree structure, UNIX moves the orphaned&quot; processes up the tree, changingtheir parent to process 1.andP;  Process I must never terminate.andM;VMS takes the second approach.andP;  Instead of a single &quot;world tree&quot; of allprocesses in the system, VMS has a forest of trees of processes.andP;  This meansthere are two broad classes of processes: Those at the root of one of thesetrees, and those somewhere inside a tree.andP;  In VMS terms, a tree's rootprocess is a detached process, while a tree somewhere under the root is asubprocess.andP;  All the processes within any one tree constitute a job.andP;  CertainVMS resources (BYTLM, for example) are &quot;pooled&quot; between a process and thesubprocesses it creates, i.e., there is a fixed quantity of the resource thatboth parent and child charge against.andP;  Because all the processes in a job canultimately trace their ancestry to the detached process at the root of diejob-in VMS terms, it is the MASTER process for the job, and its PID can beretrieved using $GETJPI with item MASTER-PID-these resources are really jobresources, shared among all the job's processes.andP;  Another jobwide object isthe job logical name table, which is accessible to all members of the job.andM;All processes in VMS (with the exception of the hard-wired systeminitialization process) are created using the $CREPRC system service.andO;$CREPRC can create either subprocesses or detached processes, at the optionof the caller.andP;  When $CREPRC creates a detached process, it also implicitlycreates a new job, rooted at the newly-created process.andP;  This newly-createdprocess is &quot;detached&quot; from its creator.andP;  It is not part of the creating job'shierarchy, and has no direct connection to it.andM;Processes can have various attributes associated with them.andP;  For example,they can be classified as  batch,&quot; &quot;network&quot; or &quot;interactive&quot; processes.andO;These are additional characterizations, and they usually apply uniformally toall the processes in a job tree.andP;  Unfortunately, some of the VMS systemservices combine these characterizations with the basic detached/subprocesssubclasses.andP;  For example, $GETJPI's JOBTYPE item returns a value thatdescribes the calling process' master process as one of the following:DETACHED, NETWORK, BATCH, LOCAL, DIALUP, REMOTE.andP;  We now know that the masterprocess is, by definition, a detached process; so what the detached returncode really means is &quot;none of the process-type attributes is set.&quot; Note:Actually, LOCAL, DIALUP, and REMOTE are all subclassifications of INTERACTIVEprocesses.andM;Any process, of any type, can optionally have a Command Language Interpreter(CLI) associated with it.andP;  A CLI is code, normally running in supervisor mode(the second-to-least privileged access mode; user mode is the leastprivileged), which provides basic services to users and to running programs.andO;As the name suggests, one of the biggest roles a CLI plays is to get commandlines, whether from a terminal or from a command file; interpret them; andthus provide access to various programs on the system.andP;  CLIs also can provideservices to running programs, through so-called &quot;CLI callbacks.&quot; A CLIcallback is very similar to a system service; however, it is handled by aparticular CLI, rather than by VMS itself.andP;  By far the most widely used CLIon VMS VAXs s DCL.andP;  I provides callbacks to parse DCL command lines, amongother things.andP;  Another CLI is DECshell, a DEC product that implements a UNIXshell on VMS.andM;A CLI is associated with a process by LOGINOUT, a VMS program that provides avariety of process-control services.andP;  Because interactive and batch processesalways run LOGINOUT -it is LOGINOUT that prompts you for your username andpassword-they always have some CLI associated with them.andP;  A network processcreated in response to an incoming network request similarly runs LOGINOUT,as does a subprocess created by LIB$SPAWN or the DCL SPAWN command.andM;A default CLI is associated with each username in its SYSUAF record; LOGINOUTwill use that CLI unless invoked by some method that passed an alternativeCLI.andP;  For example, SPAWN's /CLI qualifier allows you to choose a CLIdifferent from your default.andM;A detached process or a subprocess, whether created directly with $CREPRC orRUN with one of the qualifiers that requests process creation, does notimplicitly start out running LOGINOUT; rather, the caller of $CREPRC (or theuser of the RUN command) specifies what image is to be run.andP;  If that image isanything other than LOGINOUT, the new process will have no CLI associatedwith it, and the image will not be able to use any CLI callbacks.andP;  Note: Anobscure VMS fact is that if, instead of running LOGINOUT, you run the CLIitself, you're actually running LOGINOUT.andM;However, it's possible to explicitly specify LOGINOUT as the image, thusgetting a new process with a CLI.andP;  The CLI will read from its SYS$INPUT tofind commands to execute.andP;  If you want to run an image in a detached processwith a CLI, you need to create a command file that contains a line that runsyour image, and then use RUN to create a detached process running LOGINOUT,with SYS$INPUT (specified by RUN's /INPUT qualifier) pointing to the commandfile.andP;  Gotcha warning: The file specification you give to /INPUT will bepassed to the new process completely uninterpreted.andP;  If it contains logicalnames, they will be interpreted by the new process-which had better be ableto do so, without access to any logicals defined in, say, your login file orthe creating process' job table.andM;Because $CREPRC (or RUN) can create either detached processes orsubprocesses, it's straightforward to create either a detached process withan associated CLI (by running loginout), or a subprocess without anassociated CLI (by running something else).andP;  CLI callbacks will work in theformer, but not in the latter.andM;A CLI might or might not choose to implement any particular CLI callback.andP;  Tosupport callbacks, the CLI declares a Change Mode to Supervisor handler (withthe $DCLCMH system service).andP;  The handler executes code that checks a tableof parameters to see if the callback is supported, and then either respondsto the callback or rejects it.andP;  If there is no CLI, VMS effectively suppliesa default handler that rejects all callbacks with a status of LIB$-NOCLI.andO;-Jerrold Leichter, Ph.D., LRW Systems and Columbia University, Stamford,Connecticut.andM;UNIX is a registered trademark of UNIX System Laboratories, Inc.andO;</TEXT></DOC>