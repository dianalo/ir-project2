<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-732-797  </DOCNO><DOCID>09 732 797.andM;</DOCID><JOURNAL>The Seybold Report on Publishing Systems  Dec 24 1990 v20 n7p17(7)* Full Text COPYRIGHT Seybold Publications Inc. 1990.andM;</JOURNAL><TITLE>OSU's Chameleon architecture: a grammatical approach totranslation and DTDs. (Chameleon Research Group at Ohio StateUniversity's Department of Computer and InformationScience)(detailed test descriptions)</TITLE><AUTHOR>Walter, Mark.andM;</AUTHOR><DESCRIPT>Topic:     Research and DevelopmentDocument ProcessingData Definition LanguagesData ConversionNew TechniqueSystem DevelopmentText FormattingOhio State University.andO;Feature:   illustrationchart.andO;Caption:   Chameleon architecture. (chart)Scribe-to-LaTeX example. (chart)Mathematical view of context-free grammars. (chart)andM;</DESCRIPT><TEXT>OSU's Chameleon Architecture: A Grammatical Approach To Translation and DTDsandM;THE CHAMELEON RESEARCH group at the Department of Computer and InformationScience at Ohio State University has done some pioneering work in documentprocessing that relates directly to SGML.andP;  The team developed a formal modelof translation in which SGML is the standard data format.andP;  It then developedtools for automating the process of building translators to and from SGML andother text-manipulation software (formatters, for example).andP;  The tools are,for the most part, the kind typically used by OEMs--scanner generators,parser generators, translators, etc.--yet the group has tried to make as muchof its technology as possible accessible to users who are not necessarilyprogrammers.andM;More recently, the group has developed a generic software tool for buildinggrammar definitions.andP;  The tool is not only an innovative approach to creatingdocument type definitions, it is also a breakthrough in computer science--aproduct that facilitates the development of programming languages at theconceptual level.andM;The Chameleon translation architectureandM;The Chameleon team began its work in 1985 with a scholarly, linguisticapproach to the problem of translating formatted text.andP;  It defined a newclass of languages, braced languages, and derived a formal model oftranslation based on them.andP;  Braced languages are characterized by generic,descriptive markup in which every piece of information is explicitly markedby begin and end tags.andP;  The explicit markup results in a language that iscontext-free; that is, at no point in the document does the language allowprocessing based on context.andP;  (In a context-free language, each token canhave only one meaning.andP;  Tokens may not be redefined within a document, as insome languages, such as PostScript or Tex.)andM;Using a braced language (a constrained version of SGML that lacksminimization) as its standard notation for describing a document, theChameleon group set about developing tools for translating between itsstandard, or intermediate, form and other forms of describing documents.andP;  Theother forms are languages such as those used in formatters (troff, Scribe,TeX, etc.).andM;The Chameleon group approached the problem of translating grammatically,rather than relying on lookup tables.andP;  By translating the grammar of onelanguage to another (rather than just substituting strings), Chameleonensures that the resulting file's grammar is syntactically correct.andP;  It thenprovides additional tools to help the user obtain a semantically coorectfile.andM;The difference between syntax and semantics may be illustrated by a humanlanguage example.andP;  The sentence &quot;The lazy wall swam brilliantly&quot; issyntactically correct but nonsense semantically.andP;  Syntax refers to the rulesgoverning how parts of a lexicon (words or tokens) are put together.andP;  Agrammar is both the lexicon and the syntax.andP;  Semantics is the study of whatlanguage forms mean.andP;  Thus, it is possible to create sentences that aregrammatically (syntactically) correct but make no sense.andP;  The same is true isin computer languages.andM;In examining the process of translating to and from its standard grammar, theChameleon researchers proved mathematically that they could automaticallygenerate down translators (those from standard form to variant form) bymachine, without user intervention.andP;  As an example, the group successfullycreated an SGML-to-troff translator machine, without user intervention.andM;The group also proved mathematically that it is impossible to build &quot;uptranslators,&quot; those from variant forms to standard form, automaticallywithout user intervention.andP;  The reason is that languages such as Scribe orTeX, although basically descriptive, allow for procedural commands and do notrequire the user to tag content information.andP;  Such formatting languages oftenallow the same command to mean different things in different contexts, andthe same desired result to be expressed in different ways.andP;  When translatingup, there may be ambiguity when one string may mean different things indifferent contexts.andP;  (For example, the same format may have been applied topicture captions and table subheads--they need to be differentiated in thestandard form, but it is not necessarily clear without reading the materialhow the two elements are different.)andP;  The Chameleon model does not allow suchambiguities to be resolved (what it calls synonym resolution) automatically,because its standard form requires that each tag have a unique meaning.andO;Thus, the user (the person translating document) must resolve theseambiguities.andM;The OSU project has implications for many vendors and users.andP;  Few vendorshave followed its formal-model approach to translation.andP;  Digital Equipment isa notable exception; its interchange format serves as its standard form, toand from which other variants are translated.andP;  Most vendors (Apple, Sun, IBM)rely on writing device-to-device translators.andP;  Without a standard form,software developers are continually updating their translators as othervendors change their languages and data formats.andM;In contrast, with a standard form, not only do developers not need to worryabout other vendors' languages, but the ability to generate down translatorsby machine greatly reduces the system vendors' effort to support newlanguages as they are invented.andM;The toolsetandM;The Chameleon team has developed a variety of software tools to implement itsarchitecture.andP;  Most of them are aimed at people who would like to writetranslators.andP;  Such a person must be fluent in the language of the variantform (the formatter), but not necessarily in SGML.andP;  There are also Chameleontools for those who analyze documents and create document definitions fromtheir analyses.andM;Intermediate-Form Definition Toolset.andP;  One set of tools, theIntermediate-Form Definition Toolset, operates on files that are in SGML orin the subset that is the Chameleon &quot;intermediate form.&quot;andP;  At the moment,there are three tools: one to get material from SGML into Chameleon'sstandard form, one to convert SGML grammar to the notation of Chameleon'scompiler-compiler and one designed for generating grammar descriptions, orDTDs.andP;  A context-sensitive &quot;instance editor&quot; and an SGML validator (withparser) are both planned for the future.andM;* SGML preprocessor.andP;  Because the Chameleon standard form does not allowshortcuts in markup, but SGML does, OSU developed a preprocessor for handlingthe minimization features of SGML.andP;  The tool reads the DTD to determine whatstring reductions are allowed, detects string-length reduction in thedocument and expands it into full, descriptive markup (with begin and endtags).andM;* SGML grammar processor.andP;  The native SGML grammar is not processable byYacc, the compiler-compiler Chameleon uses to generate its translators.andO;(Yacc, or Yet Another Compiler-Compiler, was developed in the mid-1970s byStephen Johnson at Bell Labs and is readily available in the Unixenvironment.)andP;  This tool converts SGML grammar to Yacc grammar.andP;  It wasdeveloped as an alternative to developing a new compiler-compiler to handleSGML grammars.andM;* DeveGram.andP;  The most innovative product in this group is a program fordeveloping grammar descriptions, such as DTDs.andP;  This tool helps createdescriptions of document classes.andP;  It is more thoroughly described later inthis article.andM;Build-Phase Toolset.andP;  The next set of tools, the Build-Phase Toolset, is usedto create translators to and from the standard form automatically.andP;  There arefour tools:andM;* Replace/Insert Tag Tool Interface.andP;  This tool may be thought of as a&quot;retagger.&quot;andP;  Essentially, it is two programs that provide an interface increating a set of tags to be used during the translation process.andP;  The ideais to create a set of synonyms for tags or markup used in the formatter toand from which you are translating.andP;  The &quot;replace&quot; tool is used to generatethe tags for explicit markup; the &quot;insert&quot; tool takes the result of runningthe first translation as its input and helps tag implicit markup (where thetag is omitted because it is implied).andP;  The intended user is a &quot;translationengineer,&quot; an expert or someone sufficiently fluent in the language of theformatter to tackle writing a translator.andM;* Mapping Specification Interface.andP;  This program works in conjunction withthe retagger to create up and down translators.andP;  Whereas the retaggerconverts one set of tags to another, the mapping interface deals with markupthat may nothave a 1-to-1 correspondence.andP;  For example, there may bedifferences in the way special characters are handled, and there may be aneed to note which tokens of the formatter are not being used.andP;  This moduledoes not deal with ambiguities in markup, however, because resolvingambiguities requires looking at the content of the document, as we shall seein a moment.andM;From the information provided in these two programs, Chameleon verifies thatthe spec is syntactically correct and then creates the information needed forgenerating the down and up translators.andM;* The Down Translator Generator.andP;  Several programs (scanner, parser, etc.)andO;from this module, which automatically creates a down translator as a batchprocess.andP;  (A down translator is one that converts from OSU's intermediateform into the variant form.)andP;  This module also inverts the down translator tocreate an up translator.andM;* The Up Translator Generator.andP;  Similar to the Down Translator Generator, butinteractive so the end user may assist in resolving ambiguities.andP;  It findelements that may cause problems and prompts the user to indicate the mappingbased on the element's context and content.andP;  For example, we noted earleirthat figure captions and table subheads may be formatted similarly in adocument; their markup may be identical, yet they must be distinguished asdifferent content elements during the conversion process.andP;  Only by readingthe file can the user establish the difference in meaning between theseambiguously identified elements.andP;  Having done so, the user is in a positionto assign them different names in the intermediate form representation.andM;OSU describes this piece as a &quot;parser generator that creates user-assistedparsers from context-free grammars.&quot;andP;  This means that every parser created bythis generator will behave interactively--it will ask the user to resolveconflicts.andP;  OSU believes that the code that extends Yacc, making itinteractive, is a key contribution of the project to industry.andM;Although an up translator may still require user input, the Chameleonapproach has the advantage of automating a great deal of the process andproducing a grammar for the variant form as well.andP;  Not only is the process ofwriting the up-translator shortened, but the user benefits from having theformatting language described in a grammar that can be read by the othersoftware components.andM;The advantage to asking the user to resolve conflicts is a much greaterdegree of accuracy in the final result.andP;  The disadvantage is the time it maytake a user to resolve such conflicts if the document is long or there aremany conflicts.andP;  OSU is studying the effectiveness of the up-translatorgenerator, but it would undoubtely benefit from testing outside of thelaboratory.andM;It is also not clear how much of a challenge languages like TeX will pose.andO;TeX allows the sort of on-the-fly redefinition of variables that the OSUsoftware does not.andP;  Again, testing to determine the OSU software'seffectiveness in such cases.andM;User interface.andP;  The Chameleon project is also interesting for its approachto user interface design.andP;  The authors followed the work of Foley and vanDam, who identified four levels that make up user-interface languages:andM;* The conceptual level.andP;  This level defines the concepts used in the softwareprogram.andP;  In MacPaint, the concepts relate to painting with a variety ofbrushes on a canvas; in a publishing program, the concepts relate to editingand determining appearance of a document.andM;* The semantic level.andP;  This is the level at which the concepts are expressedin terms of functionality.andM;* The syntactic level.andP;  The two lower levels are the command levels.andP;  Thesyntactic one is the grammar of the user interface.andP;  It specifies howcommands are arranged.andM;* The lexical level.andP;  A lexicon is a set of words in a language, so thislevel contains the set of commands (ot tokens) in the language and the rulesfor how new commands are created.andM;The Chameleon authors argue that inaccessibility is easily introduced if thesystem demands that the user understand the way in which the program carriesout the functionality instead of allowing the user to specify the desiredmeaning in terms he or she understands.andP;  Typically, software developersdefine functionality desired (at the conceptual level), then work through therest of the layers.andP;  These layers then become &quot;contaminated&quot; with referencesto how the functionality is implemented.andM;For example, our current composition system refers to magazine-style layoutas &quot;article layout,&quot; and the user interface and documentation referthroughout to laying out articles, when, in our minds, articles are composedlike journals or books, and news is made up of stories.andP;  &quot;Page background&quot; isanother good example of a term found in the user interface of a variety ofprograms, but each ties the meaning of the phrase to its implementation.andP;  Theuser interface, in these instances, requires understanding the way a functionis labeled and implemented by a vendor.andM;Instead, the Chameleon team developed a glossary of concepts that are used atthe semantic level for interacting with the user.andP;  the glossary is written interms of the intended user, not in terms of a software developer.andP;  the waythe functionality is implemented is transparent to the user.andM;OSU says it has separated its user interface from the design of the rest ofthe system, a concept that some vendors already employ.andP;  As vendirs strugllewith the multiple graphic user interfaces of the different platforms to whichthey port software, the user interface's underlying structure and designbecomes increasingly important.andP;  Because this software has yet to make itsway into a commercial product, wh haven't seen the results of OSU's research.andO;Nevertheless, its approach is appealing.andM;DeveGram: Simplifying DTD writingandM;As  users explore the idea of generic encoding of documents, they are quicklydiscovering that document analysis is the most difficult aspect of theprocess.andP;  Analyzing a class of documents and developing a DTD--a grammardescription--requires extensive knowledge about the document's content andabout how that information is used and might be used in the future.andP;  As wejust saw in the discussion of tables, such analysis becomes complicated whenthe documents become complex.andP;  Large documents that contain complexstructures are even more difficult to analyze.andM;The process of writing DTDs is further complicated by the requirement thatthe DTD conform to the structure imposed by SGML.andP;  Any word processor thatwrites ASCII files may be used to create DTDs.andP;  But the DTD writer mustensure that the DTD not only captures the conceptual meaning of the contentbut also is syntactically valid.andM;SGML is a metalanguage that provides a notation for creating other languages,or DTDs.andP;  Just as programmers designing a new context-free programminglanguage to be expressed in Backus-Naur Form (BNF, a metalanguage thatprovides a notation for computer languages) must make sure that the languageis mathematically correct, so must SGML DTD developers make sure that theirlanguages are valid under the constructs of SGML.andP;  Writing DTDs, then,requires both analyzing content and data and developing a language--a tasknormally associated with computer science or linguistics.andM;Currently, the best method for testing DTD validity involves running the DTDthrough a compiler and parser to determine errors in syntax.andP;  It is generallyassumed that the person writing the DTDs has the programming expertise todevelop a proper DTD and test it on a compiler and parser.andM;Yet some who would be willing to analyze the content of documents are put offby the complexity of writing a DTD in SGML.andP;  There's no getting around thefact that writing a document type definition is defining a new language, andfor those who aren't programmers or linguists such a task can be overlydaunting.andM;Conleth O'Connell, Jr., a member of the Chameleon team, has developed whatappears to be the first software tool that helps with the grammar developmentaspect of writing DTDs.andP;  Interestingly, O'Connell's tool was developed insuch a way that it generates grammar description for notations other thanSGML.andP;  As we'll discuss later, his program has implications that reach beyondpublishing into computer science as a whole.andM;Say, for example, that you were to write a DTD for a class of poems.andO;Mathematically, the DTD may be viewed as a set; the poems that fit the DTDare members of the set, or instances.andP;  The processes in writing the DTD andpoems may be classified as content investigation, grammar development andgrammar instantiation.andP;  Content investigation means figuring out whatelements should be in the set (such as a set of tags).andP;  Grammar developmentinvolves taking the set, determining relationships among elements (includingorder and number), imposing a structure and writing a description that allowsproper members of the set (document instances) to be created.andP;  Grammarinstantiation is the process of creating documents that are members of theset (in this case, poems that fit the DTD).andM;The diagrams on the next page, adapted from O'Connell's paper on his work,illustrate how these processes are shared among several applications ofcomputer science.andP;  The process of creating a computer language like Pascal isthe same as writing a DTD.andP;  Just as the language Pascal includes the set ofall Pascal programs, so a DTD of a class of poems includes all poems withinthat class.andM;Much of the software development in SGML has been in the area of grammarinstantiation.andP;  Context-sensitive editors, for example, help ensure thatdocuments are proper members of a particular set--the DTD to which the editoris sensitive.andP;  Most such editors are sensitive to only one or a few DTDs; afew will support virtually any DTD.andP;  There are a few products that aredesigned to offer help in creating DTDs: IBM's TextWrite and SoftQuad'sRulesBuilder, for example.andP;  But we are aware of no product designed to ensurethat a DTD is mathematically correct as the user creates the language.andO;O'Connell's DeveGram is the prototype for such a product.andM;How it works.andP;  OSU showed a videotaped demonstration of DeveGram at SGML '90.andO;The program was demonstrated running within Unix and X Window on a Sunworkstation.andM;Essentially, DeveGram is an interactive support environment for developinggrammars.andP;  The user enters the names of symbols (e.g., tags), defines themand indicates the order, number of occurences and relationship of symbolswithin the document.andP;  The system automatically creates the propers syntax fora DTD.andM;To aid the developer, DeveGram provides several feedback mechanisms.andP;  It willshow the definition of the symbols in a basic linear form.andP;  It will alsogenerate from the definition the barest string, which shows the symbolsrequired, and an expanded string, which generates one example of each of thepossible symbols.andP;  A compass tool provides a mechanism for navigating throughthe DTD hierarchy.andM;A syntax-directed instance editor is available to produce other instances ofthe grammar, thereby offering the developer a chance to check the semantics.andO;At this time, however, the editor is not incorporated into DeveGram's userinterface.andM;Where applicable, DeveGram presents the available options as menu choices.andO;For example, the symbol type menu lets you indicate whether the symbol (tag)is a terminal (bottom of hierarchy, such as text), nonterminal (containssubelements) or grouping symbol.andP;  Similarly, the occurences menu lets youpick exactly once, zero or more, one or more, or optional.andM;DeveGram ensures that the syntax of the grammar being generated iscontext-free.andP;  (As we said earlier, context-free means that any given tag canbe reached directly from the start tag by following the hierarchy; itscontext is fixed by its definition, which cannot be changed in the document.)andM;From the definitions given the system, DeveGram generates a grammardescription in any of five notations.andP;  These notations are a testbed suitethat were chosen to prove that the concepts behind DeveGram work in practice.andO;The current suite includes SGML, Backus-Naur Form (BNF), Yacc, Chameleon'sMapping Description Language (MDL) and the MANuscript Development ENvironment(MANDEN) Struct, a notation also developed by the Chameleon team forrepresenting scholarly documents.andP;  (The MANDEN environment requires that allparts of the elctronic document--text, graphics, math and tables--export auniform representation.andP;  This work is not described in this article.)andM;In addition to supporting the actual symbols and their definitions, DeveGramallows the user to specify auxilliary information for any symbols' defintion.andO;Such information might include formatting instructions or other informationthat might be useful in creating documents for the DTD.andP;  At the moment, suchauxiliary information is typed in by the user.andP;  However, the program providesa mechanism for attaching a particular software environment, which wouldallow auxiliary information to be &quot;captured&quot; automatically for languages suchas C or Pascal.andP;  Tp prove te concept, the current program automaticallycaptures auxiliary information for Yacc.andM;Limitations.andP;  The inability to support attributes is a key limitation ofDeveGram as a tool for writing DTDs, because so many SGML DTDs make use ofattributes.andP;  For example, even a document as simple as a memo may have asecurity classification (confidential or public) as an attribute.andP;  Similarly,it is often useful to apply attributes to internal elements.andP;  Attributes havevalues that allow for contextual processing (e.g., if element is a certaintype, hide it from the user); elements identified as tags cannot have valuesassociated with them.andM;DeveGram does not support the inclusion of attributes automatically, whichmeans that other tools (those mentioned above, plus a compiler and full SGMLparser, such as those from Exotrica or Sobemap) are needed to completewriting and validating of DTDs that use attributes.andM;Some members of the OSU Chameleon team have argued in favor of writing DTDswithout attributes.andP;  They cite several reasons.andP;  First, they argue,attributes are application-dependent, and so they should be kept outside ofthe DTD, which should describe a class of documents that could be processedfor a variety of reasons and applications.andP;  Attributes also make a DTD morecomplicated, and DTDs--it is widely acknowledged--are complicated enoughalready.andM;It is certainly desirable to keep DTDs as straightforward as possible, andavoiding attributes may help to do that, but we would still like to see OSUadd support for attributes, because so many DTDs are written with them.andO;O'Connell informed us that it would not be technically difficult to add suchsupport in DeveGram.andP;  At the moment, other features are higher on thepriority list.andP;  We hope that further development of DeveGram will lead tobetter support for attributes.andM;Why is it important?andP;  To publishers examining SGML, DeveGram has appeal as atechnology that may help in the DTD-writing process.andP;  Content experts are notnecessarily programmers, and a product like this helps the document analystfocus on the concepts of the DTD instead of getting bogged down in thedetails of writing the program.andM;As we mentioned, the current prototype is not in itself a &quot;DTD builder&quot;because it does not handle a great deal of SGML.andP;  However, in the hands of anOEM that added the other components, its architecture has potential.andM;If DeveGram works, it should always create syntactically correct DTDs.andP;  Thus,the fact that it does not provide a full SGML parser to validate the DTD isoffset by its promise of automatically creating syntactically correct ones ifthe user stays within the boundaries of DeveGram.andP;  (Also, an OEM couldprovide a full SGML parser for checking the additions to the DTD notsupported by DeveGram, or, better yet, build an SGML parser into an extendedproduct based on DeveGram.)andM;Although there are publicly available DTDs, they are by necessity generic,and publishers usually need to modify public DTDs to mold them to theirapplications.andP;  There are few software tools that aid in the process ofcreating DTDs.andP;  (The market for such a product is small, although the demandin that market is quite real.)andP;  This tool is aimed at the people who writeDTDs.andM;DeveGram's support for any context-free grammar is also potentially exciting.andO;If fully developed, it could lead to semi-automatic generation of parsers forDTDs (a Yacc file created from a DTD definition).andM;A parser that handles only certain DTDs is not as useful as one that handlesany SGML DTD, but some users developing DTDs for broad distribution orextensive use in a particular application might be willing to make thattrade-off.andP;  For example, if the insurance or pharmaceutical industry decidedto develop public DTDs for a class of documents relating to its business, aparser for those DTDs might be deemed sufficient by many potential users.andO;Anyone who used SGML just for the defined applications could use the limitedparser.andP;  Insurance or pharmaceutical companies that wanted to use SGML foradditional applications could still go ahead and buy full SGML parsers thatoffer additonal functionality.andM;But it is DeveGram's utility in computer science as a whole that makes thisproduct truly exciting.andP;  Just as there are public DTDs that are generic, soare there readily available programming languages (Pascal, C, Fortran, etc.)andO;that are also very generic.andP;  Programmers who want languages specific to theirapplications need to develop their own languages or modify existing ones, andthere are very few tools to help them do so.andP;  DeveGram looks promising forassisting with this process, and, as such, it could help move programming toa more conceptual level, much as computer-aided software engineering toolsare helping programmers write applications today.andM;Availability through the consortiumandM;Now that its software is ready to be tested in products, the OSU team hasformed a consortium to help raise development capital.andP;  The consortium beganits first year this past October, and it now has several members.andP;  Membershipfor the year carries a $25,000 fee.andP;  Consortium members receive alpha andbeta software free of charge and are entitled to use and redistribute thecode in products, even to the point of holding joint copyright with OSU,subject to certain restrictions.andM;Anyone interested in contributing to this effort or in joining the consortiumshould contact its director, C.S.andP;  O'Connell, at Computer andamp; InformationScience, 2036 Neil Avenue Mall, Ohio State University, Columbus, OH43210-1277; phone (614) 292-3986, fax 292-9021.andO;</TEXT></DOC>