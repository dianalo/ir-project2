<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-678-566  </DOCNO><DOCID>08 678 566.andM;</DOCID><JOURNAL>EXE  July 1990 v5 n2 p52(4)* Full Text COPYRIGHT Process Communications Ltd. (England) 1990.andM;</JOURNAL><TITLE>A real time pioneer. (Computer On-line Real-time ApplicationLanguage) (The Third Side - CORAL 66) (technical)</TITLE><AUTHOR>Cooling, Jim.andM;</AUTHOR><SUMMARY>A discussion of one of the early high-level programming languagesdescribes its use for real-time systems.andP;  Computer On-lineReal-time Application Language (CORAL 66) is a language developedby the UK defense industry for embedded systems in applicationssuch as weapons control.andP;  It supports floating- and fixed-pointarithmetic and is a block-structured language.andP;  Its advantages areease of use, simple program maintenance, clarity and power.andP;  Itcan incorporate assembler language as necessary and implementtop-down logic and decomposition, structured programming in thesource code and stepwise problem definition.andP;  CORAL 66's drawbacksinclude limited support for structured data, the need for specialcoding to support recursion and the very high cost of compilers.andO;It also provides limited support for strings of I/O operations.andO;CORAL 66 is slowly being replaced by ADA for UK defenseprogramming.andM;</SUMMARY><DESCRIPT>Topic:     Real-Time SystemsProgramming LanguagesEmbedded SystemsStructured Programming.andO;Feature:   illustrationtablechart.andO;Caption:   History of CORAL. (table)Simplest form of CORAL 66 program. (chart)CORAL 66 control structures. (table)andM;</DESCRIPT><TEXT>As time goes by, new programming languages are introduced, some are improved,some just fade away.andP;  So most experienced software designers end up with agood working knowledge of a number of languages, working (hopefully) withstate-of-the-art techniques.andP;  Many programmers retain a soft spot for aparticular language which they met along their career path.andP;  For me thatlanguage is CORAL 66, Computer On-line Real-time Application language.andM;CORAL 66 has its roots in the UK defence industry.andP;  It is still the mostwidely used high-level programming language in that area, although eventuallyit will succumb to the Ada steamroller.andP;  Even after 24 years, its low-levelfacilities (in terms of ease of use, visibility, clarity and power) arematched by few of its successors.andM;What were the objectives of its designers? It's probably best to stress whatthey didn't set out to do: ie to rival COBOL in the business world or FORTRANfor number crunching.andP;  CORAL 66 was designed to be used as a general purposeprogramming language for real-time embedded systems.andP;  The intended targetswere small to medium sized dedicated computers, frequently being applied tocontrol applications (it was, for instance, widely used on the Ferranti Argusminicomputer in shipboard Radar and Weapon systems).andP;  Further, it wasdeveloped to support both fixed point and floating point arithmetic for suchreal-time functions.andP;  And, most importantly, its primary objective was toreduce software costs.andP;  How was this reduced cost to be achieved? Thedesigners considered that the increased productivity attainable by using ahigh-level programming language would lead to:andM;*  Lower programming costs.andM;*  Faster implementation of designs.andM;*  Simplified and reduced maintenance efforts.andM;It was also realised that these goals couldn't be attained without sufferingdrawbacks.andP;  Compared with assembly language programs, CORAL 66 programs wouldneed more store space and would take longer to execute.andP;  At that time, theprimary store in computers was magnetic core, which was heavy, large andslow.andP;  Even so, it was deemed that the advantages far outweighed thedisadvantages.andP;  Given the circumstances, this was a brave decision.andM;The language's design roots were in JOVIAL, a language developed by theUnited States Air Force in 1959.andP;  The other major influence was ALGOL 6o,196o.andP;  Clearly it was going to be a block structured language, though somefeatures of FORTRAN were incorporated.andM;Program layoutandM;The simplest type of CORAL 66 program consists of a single compilable unit,structured as shown in Figure 1 [omitted].andP;  A block section is defined usingthe predefined ('basic') words BEGIN and END.andP;  Program declarations are madewithin the block, restricting the scope of declared items to that block.andO;Basic words are enclosed in single quote marks.andP;  The official definition ofthe language recommended that such words should be written in upper case, allothers being in lower case - the form shown here was permitted as analternative.andP;  However, at the time that language compilers began to beproduced in earnest, data terminals which could handle both cases were quiteexpensive.andP;  Hence many compilers allowed the programmer to write source codeusing the single case form (more precisely, they were generally caseinsensitive).andM;The smallest unit which can be compiled on its own is called a segment(nothing to do with 80x86 segments) delimited by the basic words BEGIN andEND.andP;  Most well-designed practical programs consist of a number of segments,providing the programmer with extensive information hiding facilities.andO;Segments can be compiled in separate files, then linked together.andP;  There arevarious facilities to allow communication between separately linked modules:COMMON (to access another part of the application, in another segment),LIBRARY and EXTERNAL (to get at library procedures and operating systemprimitives - LIBRARY is frequently used as an include directive) and ABSOLUTE(to get at an absolute address).andP;  These directives are placed at the top ofthe code module.andP;  Difficulties may be met when using communicators, as onlyCOMMON is fully defined; the functions of the others depend on the compilerimplementation.andM;Structurring FacilitiesandM;How well does CORAL 66 support the aims of structured software design? Thisis an interesting question, as the CORAL 66's language design pre-dates muchof the work on structured techniques.andP;  What we are looking for in thelanguage are facilities to:andM;*  Build structured programs.andM;*  Implement entities within this  entity is rather an overworked word -perhaps thingy would be better).andM;*  Manipulate and control these entities program control.andM;*  Modern structured software designs rely heavily on modular programconstruction and virtual (abstract) software machines.andM;Segmentation, together with block structuring, gives us a simple andstraightforward way of building modules.andP;  The virtual machine is implementedusing the procedure construct, these coming in three forms: the procedure,the typed procedure and the recursive procedure.andM;The procedure structure consists of two parts, a header 'PROCEDURE'Proc(Params); and a body.andP;  Both value and reference (called 'location')parameters may be used.andP;  Typed procedures, defined with a headerandM;NumType  'PROCEDURE'andM;Proc(Params);andM;are analogous to Pascal's functions (NumType is  'INTEGER', I FIXED' etc);they are used where a result is to be passed back from the procedure.andP;  Thebody of this procedure type must contain an 'ANSWER' statement to return therequired value.andP;  The features of these procedure types should be obvious.andO;The third type, the recursive procedure, differs from the others only in thatit is declared using the 'RECURSIVE' keyword and it can invoke itself.andP;  InCORAL 66, special code is needed to implement recursion.andP;  The high datastorage space overhead of recursion makes it an expensive luxury in smallembedded systems, so the language designers chose to highlight its use withthis mechanism.andM;Data types fall into two groups: simple (or scalar) and structured.andP;  CORAL 66supports both constructs, but only in a very limited way.andP;  Everything isdefined in terms of its number representation within the computer, thus thesimple types are 'INTEGER', 'FIXED' and 'FLOATING'.andP;  Data abstraction isattained by using named variablesandM;'INTEGER' SkinColour,andM;UartStatus;andM;This typing is rather weak--the compiler can check only for structural, andnot name, equivalence.andP;  For instance, the assignment statementandM;SkinColour := UartStatus; will be accepted as perfectly valid - even if it'snonsense in program terms.andM;The structured types are the  'ARRAY' and the 'TABLE', but their elementsmust belong to one of the simple types.andP;  CORAL 66 Arrays are one dimensionaltypes, needing little further explanation.andP;  The table is similar to a twodimensional array, but having special qualities to allow very efficientpacking of data.andP;  Moreover, it allows variables of different types to bestored together (in that way it is like the record structure).andM;CORAL 66 provides a set of control structures which conform to the rules ofstructured programming: sequence, selection and iteration.andP;  Program controlcan also be exercised by the use of labels and GOTO statements (normallyconsidered bad practice, but ideal for use with exception handlers).andP;  Labelsare normally individual and distinct.andM;However, one construct, the switch, treats its label as if it is actually aset of labels.andP;  For example:andM;'SWITCH' PressureAlarms=andM;ExtraLow, Low,andM;High, ExtraHigh;andM;the statement 'GOTO' PressureAlarms [0] transfers control to label Extra Lowand 'GOTO' Pressure Alarms [3] transfers control to label High.andP;  Using this,a crude form of the case selector mechanism can be built.andM;Most modern programs are built on the concepts of functional structuring ofdesigns, incorporating top-down decomposition, stepwise refinement of theproblem, and the use of structured programming within the source code (inspite of the hype, these ideas carry straight across into object orienteddesign).andP;  These are relatively easy to implement in CORAL 66.andM;Low-levelandM;In the real time embedded world, computer software and its environment areinseparable items.andP;  To build effective and efficient programs we need toaccess and manipulate system objects (actual and virtual) easily and simply.andO;This involves device access and control, bit manipulation and assemblylanguage interfacing.andM;For example, suppose that our system has a serial I/O channel, driven by amemory-mapped UART.andP;  This device can be named, and its address locationdeclared, in a simple manner:andM;'ABSOLUTE' ('BYTE'andM;Uart1Data/'HEX'(A005),andM;Uart1Control/'HEX'(A006));andM;The variable Uart1Data is located at aw solute address A005H, its data unitsize being a byte.andP;  Operations with this variable are straightforward.andP;  Veryefficient coding can be achieved by using constructs such as: Uart1Control :='HEX'(40);andM;The programmer can get very close to the object code without having to resortto assembly language coding.andM;When dealing with hardware devices we often have to interpret and controlindividual bits (or groups of bits).andP;  This is handled by the 'BITS' operator,which works like this:andM;'BITS' [NoOfBitsAccessed, StartPos]andM;VariableName.andM;This is a very flexible tool, for instance, you can legally writeandM;'BITS' [4,0]DacWord:=andM;'BITS' [4,8]ControlSignal;andM;Working at this level, we invariably find ourselves having to make logicaldecisions.andP;  The logical operators of CORAL 66, DIFFER', 'UNION' and  'MASK',equivalent to Boolean 'exclusive or',  'inclusive-or' and 'and' functions,fulfill this purpose.andP;  Nonetheless, it remains almost impossible to developsoftware for real-time embedded systems without using assembly languageprogramming at some stage.andP;  This can be done in CORAL 66 using code inserts.andO;This example shows the saving of register contents in an 8085 processor:andM;'CODE'andM;'BEGIN'andM;DIandM;PUSH PSWandM;PUSH BandM;PUSH DandM;PUSH HandM;SIZ 5andM;'END';andM;A feature which fits together well with code inserts is that of the Macro.andO;The language defines the features and use of a macro preprocessor, whosefunction is to replace one section of source code with another at compilationtime.andP;  The informal syntax of the macro-definition is:andM;'DEFINE' NameOfMacroandM;andless; BodyOfMacro andgt;andM;where BodyOfMacro is a text string enclosed in double quote marks.andP;  Macrodefinitions can be used to remove detailed operations from the source code.andO;This could be used with the previous example as follows:andM;'DEFINE' SaveandM;&quot; 'CODEL'andM;'BEGIN'andM;Assembler Statements ...andM;'END' ; &quot;;andM;Within the actual source code, only the statement SAVE would be used.andP;  Macrosare also useful alternatives to procedures, to gain execution time, at theexpense of code size.andM;The Triangle ProblemandM;From what has gone so far, the source code for the Triangle Problem should beself-explanatory.andP;  However, one point is worth a mention.andP;  The language hasfew facilities for the handling of string I/O operations.andP;  These are usuallywritten by the user, as and when required.andP;  In this particular example, theI/O routines (PRTTXT, GETINT and PRTINT) are declared to be outside theprogram.andP;  To improve the readability of the code, these names have beenredefined using macros.andM;CORAL 66 was the unmatched king of real time programming for many years.andP;  Whydidn't it become widely used when the microprocessor came along? The answeris simple: cost.andP;  CORAL 66 compilers have always been comparativelyexpensive, compared to other languages.andP;  Second, the development environmentshave also been expensive when compared with, for instance, PC-based systems.andM;In 1980, if you wanted to develop software for, say, an Intel 8085, you wouldnormally need an Intel MDS and a compiler costing about [British pounds]2,500.andP;  When the 8086 compiler was released (again hosted on the Intel MDS)the price was a staggering i6500.andP;  Later, a US company produced a softwarepackage which made a standard PC look like an MDS -- and compiler costs fellsharply.andP;  But, by then, newer languages (such as real time Pascal) hadarrived on the scene -- and that was the beginning of the end for CORAL 66.andM;Dr Jim Cooling is a senior lecturer in the Department of Electronic andElectrical Engineering, Loughborough University of Technology.andP;  He bas beendeeply involved in the design, development and production of real-timesystems for many years, and bas published regularly on the subject.andM;Many thanks to Keith Rotton of transmition Ltd, Ashby De La Zouch, forproducing and testing the triangle problem code.andO;</TEXT></DOC>