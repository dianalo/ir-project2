<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-814-746  </DOCNO><DOCID>08 814 746.andM;</DOCID><JOURNAL>AI Expert  Sept 1990 v5 n9 p26(6)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Custom shells and automated factories. (Cover Story)</TITLE><AUTHOR>Newman, M. Alan.andM;</AUTHOR><SUMMARY>Expert systems running on a microcomputer network can be used forfactory-floor diagnostics of production equipment.andP;  One suchapplication uses a custom expert-system shell running under amultitasking environment on IBM PCs connected to a network.andP;  Theexpert-system shell is written in PROLOG for small code and tointegrate C-based drivers, and it uses virtual memory and isdesigned for fast performance.andP;  The shell also provides easymaintenance and supports foreign language operation.andP;  Themultitasking environment is linked to monitoring software andinitiates the expert-system shell when an error is reported.andP;  Theenvironment also controls input and output between the monitoringsoftware and the expert-system shell during the diagnosis.andP;  Themonitoring program had to be modified to operate with the network,the PCs, the remote terminals and the multitasking shell.andO;Diagnostic time has been reduced from 30 minutes to two minutes.andM;</SUMMARY><DESCRIPT>Topic:     Expert SystemsArtificial IntelligenceCustom SoftwareAssembly LineNetworksCase StudyTest EquipmentShell Programs.andO;Feature:   illustrationchartprogram.andO;Caption:   Factory computer configuration. (chart)Interface-module fragment. (program)andM;</DESCRIPT><TEXT>Factory-floor automation is a primary goal for many companies today.andP;  Altechnology has much to offer the advancement of this automation, but mostorganizations have yet to exploit it.andP;  One factory that did so integrateddiagnostic expert systems by using conventional pre-existing hardware(centered on an IBM PC) and inexpensive but powerful software tools (ArityPROLOG and Quarterdeck's DESQview).andM;Suppose your job is to implement an Al application for a factory floor; thisprogram might be a diagnostic system, a scheduling coordinator, or somethingelse.andP;  Perhaps the application is localized to one piece of productionmachinery, or customized portions of the knowledge bases are required foreach type of production equipment.andM;A computer network is already in place to monitor or control the entirefactory floor.andP;  This network consists of small groups of equipment connectedto a PC; many of these PCs are also networked to a minicomputer or mainframe.andO;The application must interface both with the user at the PC terminals and themachinery in much the same manner the existing PC software already interfacesto the equipment.andP;  In addition to these problems I've already listed, the newapplication must also report to the higher level minicomputer or mainframe.andM;Most automated or semi-automated production lines have sophisticatedmanufacturing equipment networked to a similar network of computers.andP;  Most ofthese networks also use DOS-based PCs as their lowest link to the machinery.andO;How can Al evolve in such an environment without replacing or augmentingexisting hardware and software?andM;My latest project was to add a diagnostic and maintenance expert system tovarious pieces of production equipment.andP;  An industry standard network (theSECS II standard for the semiconductor industry) connected all the equipmentwith AT-class PCs.andP;  Each piece of equipment had dumb terminals(notebook-sized portables) mounted conveniently on the front for theoperators.andP;  Each PC performed data collection and control functions on aboutfour pieces of automated machines, and a VAX connected all the PCs viaanother network.andP;  Figure I shows the existing configuration.andM;DEVELOPMENT OPTIONSandM;The equipment network and remote terminals on each machine were tools alreadyavailable for connecting the new expert system, and mature software for thenetwork and terminals existed on the PCs.andP;  The obvious choices to host theexpert systems for this project were:andM;* Run the diagnostic systems on the minicomputer communicating through thePCsandM;* Run on stand-alone computers, one for each piece of equipmentandM;* Run on the existing PCs concurrently with the monitoring software.andM;The first choice seemed best.andP;  Several excellent Al packages are available onminis, including some of the best LISP and PROLOG compilers and most of thepopular Al shells.andP;  However, most shells don't allow easy user interactionfrom networked dumb terminals; the PC software would have to be changedsignificantly to handle the mini-toequipment communications.andP;  Finally, theminicomputer's loading and the mini-to-PC-to-equipment communications linkswould mean excessive response times for each message in each direction.andM;The second choice was poor for two reasons.andP;  First is cost, although thisproblem can be lessened by moving portable (or carted) PCs to the particularpiece of equipment needing diagnostic help.andP;  This approach will reduce thetotal number of computers necessary but will significantly increase thelogistics of providing the necessary service.andP;  Furthermore, some of theequipment was in clean rooms where moving computers around interferes withmaintaining a clean room environment.andP;  Space constraints was the secondreason stand-alone computers were a poor choice for the factory floor, andspace is even more at a premium during maintenance procedures.andM;Initially, the third option seemed impossible.andP;  The PCs had to maintaincommunications with all of the equipment, even when one piece of equipmentneeded service the diagnostic expert system.andP;  The processing requirements ofthe system alone might require all the PC's power and memory.andP;  Further, usinga commercial shell on a PC would have even more of a problem coping with aremote-user terminal than the mini-based shells.andP;  Most microbased shells aredesigned for a more constrained operating environment than most minibasedones.andP;  Tools for PC shells aren't versatile enough to work in theseenvironments easily.andM;Despite these problems, the PCs turned out to be excellent hosts for theexpert system.andP;  The solution required three main tasks: the development of acustom expert-system shell, a multitasking environment for the PC, and minorchanges to the existing software to cooperate with the multitasking operatingsystem and share the network and remote terminal communications.andP;  Note thatthese changes involved software only and the factor configuration shown inFigure 1 didn't change.andM;The ideal place to put a diagnostic and maintenance expert system is insidethe machinery itself.andP;  Unfortunately, equipment manufacturers do not andcannot provide such systems-such expert systems require expertise developedonly through on-site, continuous equipment use.andP;  The knowledge of anequipment manufacturer when first delivering a new piece of automatedproduction machinery is enough to keep the equipment running, but not enoughto achieve the level of diagnostic efficiency necessary to minimize the downtime that a few years of experience can give a top-notch maintenance expert.andO;However, equipment vendors are getting better at providing self-diagnosingequipment.andM;CUSTOM EXPERT-SYSTEM SHELLandM;The expert-system shell is tightly coded and fast.andP;  It works with themultitasking operating system to communicate with the network drivers and theremote terminal drivers, both of which it shares with the existing monitoringand control software.andM;Because of the significant diagnostic problem at hand, which has thousands ofrules for some of the equipment types, the inference engine has virtualmemory capability.andP;  Virtual memory capability allows the inference engine tokeep most of the knowledge base on the hard disk and automatically bring thecurrent rules into working memory only as needed.andP;  Many off-the-shelfcommercial shell products can meet most of these requirements, or at leastcan be forced-fit with hooks to external routines (particularly formultitasking communications and the remote terminal).andM;The shell was custom designed to reduce the difficulty of system maintenanceand provide foreign-language support.andP;  Intuitively, it might seem like bothof these reasons would argue for a well-designed, globally supportedcommercial shell.andP;  After all, commercial products have excellent rulestructures and editors, thoughtfully prepared developer manuals, and many areavailable in numerous language editions.andP;  However, this project's detailedrequirements argued against any of the commercial offerings.andM;To minimize the knowledge-base maintenance, the rule parser had to be quiteintelligent (to keep the rule language simple).andP;  Much maintenance on therules is necessary because different factory installations of each machinetype are slightly different.andP;  These differences are due both to modificationsin the machine depending on its age (because of continuous vendorimprovements) and variations in the machine's setup for factory needs.andM;The local expert for each machine must be able to modify the knowledge baseto account for these variations.andP;  Since the typical expert on the automatedmanufacturing machinery is a mechanical engineer or technician but not asoftware-maintenance expert, the knowledge base has to be very English-likeand easy to understand.andP;  This capability is the (often achieved) goal of mostcommercial expert-system shells; however, a custom shell could have a rulelanguage much more optimized for this specific class of user.andM;Some factories that use this technology are in countries for which English isnot the native language.andP;  The local experts can communicate in English butmany machine operators and maintenance personnel can't; therefore, the userinterface is designed to be easily translated to any language.andP;  Theknowledge-base design allows for rule design in English for easycommunication between experts worldwide.andP;  At the same time, user questions,answers, explanations, and help messages are easily maintained in otherlanguages, including some of the Asian pictorial alphabets.andP;  THE INFERENCEENGINE The inference engine has all of the usual features of a diagnosticinference engine except certainty propagation.andP;  Uncertainty management allowsfor a smaller knowledge base but makes rule maintenance much more difficultsince the certainty values for the rules must be fine-tuned.andP;  Fine-tuningcertainty values is more of an art than science and is very hard for non-AIexperts to learn.andP;  Usually when rule-maintenance support will be done bynon-AI engineers, more rules are easier to handle than rules with certaintyfactors.andP;  Certainty factors are, not used since this project required thesimplest possible maintenance by many people.andM;Other features of the inference engine include automatic forward and backwardrule chaining, general explanation and help facilities, rule tracing, andcontext-sensitive help mechanisms.andP;  Most of these features are commonly foundin commercial shells.andM;The shell was written in PROLOG because it can produce reasonably small code(to share the DOS 640K memory limitation with other programs) and it's simpleto integrate with existing C-based drivers.andP;  PROLOG also permits easy, fastdevelopment of a complete rule-based inference engine and sophisticatedparsing algorithms for the rule syntax, which are optimized for the domainexperts to understand.andM;While LISP, Smalltalk, and other languages each have unique strengths overPROLOG for many tasks, the rule-based inference engine development, the smallcompiled code size, and the powerful grammar parsing attributes of PROLOGmade it the best language for this project.andP;  Besides, like most (biased) Aldevelopers, I'll use my favorite development tool unless a particular set ofrequirements is clearly a better match with the strengths of another tool.andO;Unfortunately, most developers choose the development tool they firstlearned, or worse, the only one with which they are reasonably proficient.andO;Proficiency in various tools clearly broadens a developer's ability to createapplications with any tool.andM;The inference engine was developed in Arity PROLOG from Arity Corp. ofConcord, Mass.andP;  Arity offered all the features important to this project,including tight and efficient compilation, an excellent C-language interfaceused to communicate with the multitasking software, built-in virtual memorycapability, royalty-free distribution of the compiled code, full interfacecapability with MS-DOS, a user-friendly and powerful development environment,and responsive customer support.andP;  (Most commercial shells offer theseadvantages as well.)andM;Many excellent PC-based PROLOG compilers are available.andP;  Some have bettergraphics capabilities (which couldn't be used with the remote terminals onthis project) and an easier compilation process (but don't produce executablecode as efficient in size or speed).andP;  However, Arity PROLOG was clearly thebest choice for this project and so far, my personal favorite for the PC.andM;MULTITASKING MADE EASYandM;The multitasking environment chosen for the PC was DESQview by QuarterdeckOffice Systems of Santa Monica, Calif.andP;  DESQdes view provides truemultitasking of DOS programs.andP;  By using the Quarterdeck Applications ProgramInterface (API) library, DOS programs can start and stop other DOS programswith API function calls, as well as communicate with each other via DESQviewmailboxes.andP;  Except for the interprocess interactions provided by the API,each program thinks it runs on an isolated PC.andP;  Even a program crash affectsonly the virtual machine that DESQview has created for it, and theControl-Alt-Delete keyboard reset reboots that program only.andM;The integration of the expert-system shell with DESQview was accomplishedwith one small module, a mere 65 lines of code: five lines for the Cinterface declarations, eight for PROLOG compiler declarations, and theremaining 52 lines contain 10 PROLOG predicates.andP;  Six of these predicates arepublic&quot; to the rest of the shell; they initialize and terminate communication(two) and send and receive data (four).andP;  The heart of each of thesepredicates is a simple DESQview API function call.andP;  This simple set ofpredicates is the shell's only window to the outside world.andP;  (Listing I showsthree of these predicates along with related C and PROLOG declarations.)andM;The existing monitoring software tells DESQview to start a diagnostic sessionfor a specific machine when an appropriate error is reported.andP;  When the shellis started, the first function is to initiate the necessary links with theDESQview mailboxes to talk to the various parts of the monitoring software;all the shell input and output is sent and received through these mailboxes.andO;After the shell has completed the diagnosis and reported its summary to themonitoring software, it disconnects the links with the DESQview mailboxes andterminates.andP;  MODIFYING DOS SOFTWARE The changes to the existing equipmentmonitoring program were relatively straightforward.andP;  This program was writtenin C and has four main modules.andM;The first module is the network driver.andP;  It handles the network communicationprotocols-formatting the messages, handshaking with each of the componentsconnected to the network, and low-level message error checking.andP;  Thisapproach is an &quot;interrupt service routine&quot; type of program, similar to amouse driver, which is installed on the PC before the main program.andP;  In thiscase, the network drivers are installed before DESQview and its functions areavailable to all programs running under DESQview.andP;  No change was necessaryfor the network driver to accommodate the expert system.andM;The second module is the machine-specific interface.andP;  Each type of automatedproduction machinery connected to a PC has one of these interfaces, whichtakes the generic requests of the monitor and control software (the &quot;main&quot;software) and translates them to the machine's format; this module interruptsthe network driver to deliver the message.andP;  Messages from the machine to themain software are handled similarly.andM;The machine interface has been modified to include the servicing of requeststo and from the expert system via the DESQview mailboxes.andP;  It would be easyto modify the main software to communicate with this interface throughDESQview mailboxes, but that seemed hardly necessary.andM;The third module is the remote terminal driver.andP;  This software is similar tothe machine interface, except it communicates with the dumb terminals mountedon the machines.andP;  The main software also talks to the terminal driver withgeneric messages.andP;  The terminal driver formats the messages for the specificmachine in terms the operator knows for that machine.andP;  For instance, amessage about an input state might refer to an inloader on one machine and aninput hopper on another.andM;The changes to the terminal driver were a little more complex than with themachine interface software.andP;  Originally, the &quot;dumb&quot; terminals (portable PCswith flat-panel displays) were not quite that-the terminal driver was insidethe terminal.andP;  This software could not handle all the communicationsnecessary to support the expert system.andP;  Rather than modifying the softwarefor each terminal, the terminal software was moved into the central PC Oustlike the machine-specific drivers) and the terminals converted to dumb(ASCII) terminals.andP;  Now the system talks to the terminals via the common(nonmachine specific) part of theandM;The last part of the monitoring program is the main body-the heart of theprogram-which processes all the data collection, controls the equipment, anddirects the user interface on the remote terminals.andP;  For each piece ofequipment monitored, the main loop maintains independent data processing anduser communications in a round-robin fashion.andM;The changes to the main loop that accommodate the expert system are verystraightforward.andP;  Previously, when a failure occurred, the operator wasdirected to service the failure (or call maintenance personnel).andP;  After theproblem is identified and fixed, the operator reports what was done back tothe main program so that the program is logged.andP;  Now the main program startsthe system (with a simple DESQview call) and waits for it to complete thediagnosis and automatically report the problem.andP;  The main program doesn'tcommunicate  with the remote terminal during diagnosis and maintenance, sothe expert system is free to use it.andP;  JUDGING THE RESULTS Our expert systemhas reduced typical diagnostic time from 30 minutes to less than two minutes.andO;Having direct communication with machine sensors allows the system todiagnose problems faster than the best human expert with most problems.andP;  Nowall of the production lines have the expertise of the top expert inside thisprogram-the operators can perform the diagnosis without maintenance personnelhelp, and in many cases, they can do the maintenance as well.andP;  The factorieshad the computing power in place to handle the addition of the software.andM;The framework for deploying diagnostic expert systems on an establishedcomputer network has proven to be extremely effective.andP;  We all know thesignificant advantages such programs can have on complex equipment.andP;  A majorstumbling block to implementing these systems has been the capitalexpenditures necessary to accommodate the software.andP;  However, the enormousgains made with Al software compilers and DOS extenders in recent years havemade conventional hardware capable of meeting the needs of Al softwaretechnology.andM;A need will always exist for the latest dedicated platforms to push out thecapabilities of Al technology and to provide the most productive developmentenvironment, but complete diagnostic expert-system packages can be deliverednow on last year's minimally configured PC hardware.andO;</TEXT></DOC>