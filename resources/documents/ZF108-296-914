<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-296-914  </DOCNO><DOCID>08 296 914.andM;</DOCID><JOURNAL>Data Based Advisor  April 1990 v8 n4 p99(10)* Full Text COPYRIGHT Data Based Solutions 1990.andM;</JOURNAL><TITLE>Applied Force. (Sophco Inc's Force compiler) (includes relatedarticle on benchmark tests for dBASE language implementations.)andO;(Software Review) (evaluation)</TITLE><AUTHOR>Streich, Mark.andM;</AUTHOR><SUMMARY>Sophco Inc's Force is a $695 'real' compiler for dBase languageusers.andP;  Force generates machine language for everything theprogrammer writes but it requires definitions of all procedures,functions, index files, field descriptions and variables.andO;Benchmark tests indicate that Force is much faster than dBASE III+and about as fast as Clipper.andP;  Force encourages the use ofprocedures and functions and thus fosters structured programming.andO;Force also permits programming that cannot be done in dBASE.andP;  Thisfirst version of Force has a number of limitations such as notperforming optimizations, not having a debugger and not havingmacros.andP;  It does not support some dBASE commands and features, hasno windows and does not presently support a math coprocessor.andO;Because Force only allows one program at a time to be specifiedfor compiling, a user developing larger programs may need 'make'and 'overlay' utilities.andM;</SUMMARY><DESCRIPT>Company:   Sophco Inc. (products).andO;Product:   Force (Compiler).andO;Topic:     EvaluationCompilersData Base LanguagesSoftware Packages.andO;Feature:   illustrationtable.andO;Caption:   dBASE language speed tests. (table)andM;</DESCRIPT><TEXT>Applied ForceandM;dBASE programmers have been calling for a real compiler ever since dBASE IIbecame available.andP;  Depending on your programming style and preferences, yourwait may be over--or you may decide you don't want a real compiler after all.andM;Sophco's Force compiler generates machine language for everything you write,calling library routines for the built-in commands and functions.andP;  Forceachieves what other compilers have been unable to do by breaking withtradition: It requires you to define everything you use in your programs.andO;Are there performance benefits to the modified dBASE language?andP;  If you swearby benchmarks, and if you think last April's Data Based Advisor benchmarktests are reasonable, (two huge ifs), then Force clocks in at dozens of timesfaster than dBASE III PLUS and just as fast as Clipper.andM;Of course, anything going that fast is bound have a bumpy ride; Force is noexception.andP;  In fact, the initial, shipping version was like flying a gliderthrough a hurricane.andP;  Some quick work by Sophco, however, has calmed the ridedown to something like flying a Cessna in a strong gale.andM;Structured programmingandM;Force tries to bring structured programming principles to the dBASE world.andO;It brings together bits and pieces of C, Pascal, BASIC, FORTRAN, a subset ofthe dBASE III PLUS language (hereafter referred to as dBASE), and some newconstructs to make programming certain problems either easier or clearer.andO;The resulting language is at times elegant; other times it keeps you fromdoing what you really want to do.andM;Structured programming means many things to many people.andP;  I'll define itthus: being able to solve a problem using top-down methods, allowing you tobreak the problem into successively smaller parts until each part is simpleenough to understand and solve.andP;  The various dBASE dialects let you do thisto a certain point, but not to the extent of languages like Pascal, C, orForce.andM;Many dBASE applications I've seen have been broken down into sizable modules(more than 500 lines) that run straight through from beginning to end.andP;  Forceencourages you to break programs into procedures and functions (functionsreturn values, whereas procedures don't).andP;  There are no limits on the numberof procedures you can include in a program (though any single module can'tcreate native code in excess of 64K and the combination of modules can'texceed the DOS-imposed limit of 640K).andM;You can pass parameters to a procedure by reference so that any changes tothe parameter aslo change the variable passed to the procedure.andP;  The defaultdBASE method of passing by value is supported, which means changes to theparameter don't affect the variable passed to the procedure.andP;  Finally, youcan specify that a parameter is a CONSTant, which will therefore not bechanged by the procedure.andP;  The compiler enforces this restriction bydisallowing any assignments to the constant parameter.andM;In addition to the restriction on the number of procedures in a procedurefile, dBASE programmers have typically avoided using procedures since callingthem enforces a performance penalty.andP;  This penalty is virtually non-existentin Force.andP;  One of the benchmark tests times how quickly (or slowly) nestedprocedures are called.andP;  It showed that dBASE III PLUS took over threeminutes, Clipper took two seconds, and Force took less than one second.andM;There are also two features in Force that facilitate structured programming.andO;The first is the ability to save and restore the current work area; thesecond is the ability to save and restore the current set of GETs, (i.e.andO;nested READs).andM;Using nested READs means your program issues a series of GET statements forfull-screen input, issues a READ command, and at some point during the READ,issues additional GETs and READs; your program needs to return to theoriginal set of GETs so the user can finish entering data.andP;  You get thedesired effect by saving the current set of GETs before issuing others andrestoring them after you finished the additional input.andM;Unfortunately, nested READs (and normal READs for that matter) aren't asuseful as they could be.andP;  That's because you can't legally&quot; GET to a variabledefined within a procedure.andP;  You can, but the compiler generates a warning.andO;If you ignore the warning and don't have a READ following the GETs, yourprogram will crash.andP;  This goes against the grain of structured programming(everything a procedure needs is defined within the procedure--and it's safeto do so).andM;The reason this limitation exists is because storage for local variables isreserved on the computer's memory stack when entering the procedure, thenreleased when leaving.andP;  If you try to GET a local variable, leave theprocedure, and later issie a READ, the READ would try to store the value to alocation that's no longer valid.andM;dBASE is almost unique in the world of programming languages when it comes tovariables.andP;  dBASE variables can't be declared to hold a certain type of data.andO;And the type of data can change at any point in the program.andP;  This can makedebugging and maintaining the program difficult, because you need to searchthe entire program to verify what type of value a variable holds.andP;  Forexample, do you know what this line of code does?andM;STORE A + B TO CandM;There are four possibilities, all of which a dBASE implementation must beprepared to handle: 1) A and B are numeric, and C will hold their sum; 2) Aand B are character strings, and C will hold their combined string up to 255characters (or longer in Clipper or FoxPro); 3) A is a date and B is anumeric, and C will hold the date representing B number of days from A; and4) any other combination will create an error that's discovered only atruntime.andM;Force requires that all variables, functions, and procedures be declaredbefore using them.andP;  This declaration includes the type of value the variablecan hold or that the function will return.andP;  Types available to programmersinclude various sizes of integers, floating point (dBASE numberic),characters, dates, and logicals.andP;  You can also declare one-dimensional arraysof any of these types.andM;The listing below shows a simple program that prompts the user for a number,n, calls a function to sum the numbers between 0 and n, and displays theresult.andP;  Note that programs always begin executing at the procedure calledforce main.andP;  For programs split into various modules, you need only look forthis procedure to determine where the program starts You don't have to guesswhich module will execute first.andM;A simple Force programandM;FUNCTION DBL AddNumbers  andamp;andamp; declare function PARAMETERS INT n  andamp;andamp; requiredparameter VARDEF  andamp;andamp; local variables INT i  andamp;andamp; i is integer DBL total  andamp;andamp;total is floating point ENDDEF STORE 0 TO i, total DO WHILE i andless;=n  andamp;andamp; sum upthe numbers total = total+i i = i+1 ENDDO RETURN total  andamp;andamp; return functionresult ENDPRO  andamp;andamp; end of functionandM;PROCEDURE force main  andamp;andamp; program starts here VARDEF INT n  andamp;andamp; local variablen ENDDEF INPUT &quot;Enter a number: &quot; TO n ? AddNumbers (n)  andamp;andamp; call AddNumbersENDPRO  andamp;andamp; end of procedureandM;Aside from the declarations, the program looks very much like a dBASEprogram.andP;  However, there are a few differences.andP;  First, the functionAddNumbers can only return a floating point number (DBL in Force-ese) whileother dialects could have returned several different types (probablyerroneously) and the compiler wouldn't have peeped.andP;  Similarly, the parameterto the function can only be an integer.andP;  Any other type causes a compilererror telling you the function is expecting another type of parameter.andP;  Othercompilers wouldn't complain until the program crashed at runtime.andM;Although I've run the Data Based Advisor benchmarks suite (I'll discuss theresults later), there are a few things that need to be said about the programabove.andP;  With an input of 30,000, the EXE file sizes and running times on a386 computer (no 387) were as follows:andM;I included Turbo C in the comparisons for several reasons.andP;  The sampleprogram has no database operations, so there's no compelling reason to use adatabase language to solve it.andP;  Force's developers stress that Force can beused on problems typically solved by other languages.andP;  And Force allows C orassembly language routines to be linked in as if they were written in Force(thus, the combined Force/Turbo C times and sizes).andM;One example of linking C routines into your program would be to use some ofthe string functions.andP;  STRLEN() returns the length of a string as an integer,just as the LEN() function normally does.andP;  The function declarations wouldbe:andM;C:  int strlen (const char * s); Force:  FUNCTION INT strlen PROTOTYPEPARAMETERS CONST CHAR Use:  ? strlen (&quot;Hello, World&quot;)andM;Although you don't have to declare the function in C before you use it, Forcedoes require you to.andP;  The Force compiler then knows what type of value thefunction will return (if any) and can verify that the parameters passed tothe function are the correct type.andP;  There's currently no way to pass avariable number of arguments to a function.andM;Clipper programmers can also use functions written in C or assembly language,although they must explicitly use various functions from EXTEND.LIB foraccessing parameters or returning values.andP;  Force usually allows you to writethe functions just as if you were going to use them in a C application.andM;One difference you have to make to C functions that return either a DBL(numeric) or CHAR (character string) is to add an additional first parameter,which is where the returned value must be stored before returning.andP;  Thismodification means that you can't directly access the various floating pointmath routines available in C, although you could write Force substitutes.andM;For example to use the SIN() function available in C but not in Force, youcould write the following program and declaration:andM;C:  void f sin (double *retval, double val ) { *retval = sin(val ); }andM;Force:  FUNCTION DBL f sin PROTOTYPE PARAMETERS VALUE DBLandM;Use:  ? f_sin (0.5)  andamp;andamp; print sine of 0.5andM;This worked with Turbo C, with and without a math coprocessor (80x87), andshould work with Microsoft C (I wasn't able to test it with that compiler).andO;Clipper users can't perform floating point math in their C routines if theydon't have an 80x87.andP;  If parts of your application perform heavynumber-crunching, you could write those parts in C to take advantage offaster math routines and possibly the 80x87 (which Force doesn't currentlytake advantage of).andM;You may rightly ask, &quot;Why use C when Force and do many of the same things?&quot;,andO;or &quot;Why bother with Force if all I want to do is use C functions?&quot;andM;The answer to the first question is that today's C compilers perform manyoptimizations to generate extremely fast code.andP;  Force currently performs nooptimizations; in fact, it generates some fairly poor code for many commonoperations.andP;  For example, Force uses a subroutine to perform integermultiplication or division.andP;  Most non-dBASE compilers generate theinstructions to do it directly, resulting in smaller, faster programs.andP;  Thereason Force is faster than Clipper on most non-database operations is thatClipper doesn't actually compile your program to 80x86 machine code.andM;There are many answers to the second question.andP;  You may want to continueusing dBASE syntax rather than learn another language.andP;  C programs thatmanipulate large linked lists may benefit from replacing the lists withdatabases.andP;  Or you may prefer dBASE's method for getting input from the user.andM;Getting to your dataandM;Force uses dBASE III PLUS compatible databases (DBFs) and memo files (DBTs)and its own index (FDX) and memory (MEM) files.andP;  Force doesn't need screenformats (FMTs), reports (FRMs), or label files (LBLs).andP;  You specify theseitems in your programs just like variables--with more information of course.andM;Although DBF files have built-in field descriptions that describe what typeand how large the fields are, Force requires that you also fully declare thisinformation in your program before you can use those files.andP;  You mustsimilarly describe your index files.andP;  Here's a sample declaration:andM;DBFDEF  SampleDBF CHAR(20)  Name DBL(10:2)  Salary DATE  Birthday LOGICAL Male MEMO  Notes ENDDEFandM;INDEXDEF CHAR(20)  NameIndex Upper(SampleDBF-andgt;Name) DATE  DateIndexSampleDBF-andgt;Birthday ENDDEFandM;The database definition assigns an alias, SampleDBF, that may or may notmatch the actual file's name.andP;  The field names and types should matchexactly.andP;  If they don't, you'll get a run time error when trying to open thefile.andP;  You can set a flag to tell the database engine that differences areacceptable, but it's been my experience that doing so leads to garbled data.andO;The fields don't have to be in the exact order listed.andM;The definition can't be made inside a procedure or function, nor can it occurmore than once in a program.andP;  In order to allow you to have separate programmodules that access the same database, you can add the keyword EXTERN to thedefinition.andP;  EXTERN tells the compiler not to reserve space for the databasefile because it's defined elsewhere.andM;All references to fields within the database must specify the database andfield.andP;  For example, you can't simply refer to the Salary field.andP;  You mustalso include the alias as in Sample DBF-andgt;Salary.andM;Currently, there's no way to use a database file without defining thedatabase fields in the program.andP;  This restriction means you can't write ageneric utility to allow users to select any database and do something withit.andP;  Planned additions to Force will address this issue.andM;You can create database files in one of two ways.andP;  Force provides a utilitythat lets you create or modify a database file.andP;  You can also create an emptydatabase file from within your program by using the command:andM;BUILD &quot;SampleDBF.DBF&quot; FROM ALIAS SampleDBFandM;This lets you easily create temporary database files.andM;There are several ways to open a database in Force.andP;  You can:andM;USE SampleDBF  andamp;andamp; opens &quot;SampleDBF.DBF&quot; USE &quot;Other.DBF&quot; ALIAS SampleDBF  andamp;andamp;opens andamp;andamp; &quot;Other.DBF&quot; OPEN SampleDBF  andamp;andamp; opens &quot;SampleDBF.DBF&quot; OPEN&quot;Other.DBF&quot; ALIAS SampleDBF  andamp;andamp; opens andamp;andamp; &quot;Other.DBF&quot; SET ALIAS SampleDB TO&quot;Other.DBF&quot; USE SampleDBF  andamp;andamp; opens &quot;Other.DBF&quot;andM;The first two are just like other dBASE dialects.andP;  They open the specifieddatabase in the current work area.andP;  The next two open the database in a newwork area without closing the database, if any, in the current work area.andO;The last two lines allow you to use &quot;normal&quot; dBASE syntax, but with differentfile names.andM;You can't open two databases simultaneously with the same alias, which meansyou must define the database structure for each file you may open, even ifthe structures are identical.andP;  For example, if you intend to append recordsin one database to another, both files must be open, which requires twoseparate database definitions.andM;The &quot;OPEN&quot; syntax lets you essentially ignore work areas, though you canselect work areas using SELECT andless;aliasandgt;.andP;  The manual suggests not mixingSELECT andless;numberandgt; and OPEN because you can't be sure which numbered area a fileis opened in.andP;  The current release of Force only allows a maximum of 15 files(DBF+NDX+DBT) to be opened at one time.andM;Force has added to its ability to refer to the &quot;non-current&quot; work area inseveral ways.andP;  First, you can issue any command that does something with thedatabase with &quot;! andless;aliasandgt;andless;commandandgt;&quot;.andP;  For example:andM;! SampleDBF SKIPandM;advances the record pointer for SampleDBF, whether or not it was thecurrently selected database.andM;Secondly, there are several &quot;alias functions&quot; that duplicate the functionsthat may refer to the current database.andP;  For example, the function EOF()refers to the currently selected work area, while the function AEOF(SampleDBF) refers to the database with the alias SampleDBF.andO;Unfortunately, not all of the functions are duplicated.andP;  The compiler alsolets you use any identifier as a parameter; your program will crash when yourun it if it isn't a database alias.andM;It tends to be much simpler to create programs that manipulate multiple filesusing Force because of the &quot;aliased&quot; commands.andP;  You can also establishrelationships among files using the SET RELATION TO command.andP;  As in FoxBASE+and Clipper, Force supports the ADDITIVE clause that lets you addrelationships to currently related files.andM;As shown above, Force indexes must be declared, and the declaration providesthe type of index expression, an alias for the index, and then the indexexpression.andP;  You create new indexes using the command, INDEX NameIndex.andP;  Youcan index on any expression, including user-defined functions (UDFs), as longas the type isn't LOGICAL.andP;  You specify which indexes to use and theirinitial ordering, using the same syntax as in dBASE.andM;You must use the SET ALIAS TO command if you want to use a file namedifferent from the alias name.andP;  You would have to do this, for example, ifyou wanted the index file name to match the database file name.andP;  Why?andP;  No twoidentifiers can be the same in Force, so you can't give both the database andindex file the same alias.andM;I mentioned earlier that Force supports formats, reports, and labels byallowing you to declare them in your program.andP;  Force provides a utility tocreate FRM or LBL files and several other utilities to convert them to a textfile.andP;  The following shows a sample declaration for a report that listsnames, salaries, and sums for salaries.andM;REPORTDEF  SampleReport HEADING = 'Sample Report from SAMPLEDBF Database'WIDTH = 80 PAGE LENGTH = 58 LEFT MARGIN = 8 DOUBLE SPACE = .F PLAIN = .F.andO;SUMMARY = .F.andM;COLUMNDEF HEADING = 'Name' WIDTH = 20 DECIMALS = 0 EXPRESSION char =SampleDBF-andgt;Name TOTAL = .F.andP;  ENDDEFandM;COLUMNDEF HEADING = 'Salary' WIDTH = 10 DECIMALS = 2 EXPRESSION dbl =SampleDBF-andgt;Salary TOTAL = .T.andP;  ENDDEF ENDDEFandM;To run the report, you'd use the same command as in dBASE: REPORT FORMSAmpleReport, along with its various options.andP;  Once again, Force shows itsimmature age by giving incorrect totals and subtotals on numeric fields, andby not sending the report to a file when using the TO FILE &quot;sample.txt&quot;option.andM;While converting report or label files to text isn't difficult, it forces youto change your program every time you want a new report.andP;  I prefer to providea menu selection of available reports (essentially a directory listing) andallow the user to select a report at runtime.andP;  If I want to add a report, Imerely create the new report file and copy it to the appropriate directory.andO;This method isn't available using Force.andM;If you need to process text or memo files, Force has a number of commands andfunctions to help you.andP;  You can create, read, and write text files usingfunctions similar to Pascal's ReadLn and Write procedures to either read orwrite a character string.andP;  You can't handle arbitrary binary files with thesupplied functions.andM;Memo files can be edited inside a window of any size.andP;  The manual didn'tdescribe the available commands, but it accepted the dBASE Find, Read/Writefile, and Delete Line commands.andP;  It doesn't support word wrapping, or anysingle-word commands, such as delete word or move the cursor one word.andM;Memo files can also be read from or written to using functions similar tothose I just described.andP;  For example, this would allow you to automaticallyadd a note to a memo file or search through the memo fields for a keyword.andM;Force doesn't do windowsandM;So far, I've described what Force adds to the dBASE language.andP;  What does itleave out?andM;* It doesn't support the SORT, JOIN, and UPDATE commands.andM;* You can't perform the date math as usual.andP;  You must use two functions thatForce provides.andM;* There's currently no network support, although Sophco is working on it.andM;* You can't use SET KEY TO, ON KEY, or ON ESCAPE commands.andP;  You can addFILTER and VALID clauses to your GETs, which could in turn catch certainkeys.andM;* There are no windowing commands.andP;  You can save and restore portions of thescreen and Force supports two types of menus (see the following code for asample menu).andM;VARDEFandM;uint MenuChoice andamp;andamp; menu choices are unsigned integers ENDDEF @ 1, 1 PROMPT =&quot;Entries&quot; MESSAGE &quot;Make Journal Entries&quot; @ 1,10 PROMPT = &quot;Reports&quot; MESSAGE&quot;Select a Report to Print&quot; @ 1,19 PROMPT = &quot;Directory&quot; MESSAGE &quot;Show the DiskDirectory&quot; @ 1,30 PROMPT = &quot;Quit&quot; MESSAGE &quot;REturn to Previous Menu&quot;andM;SET MESSAGE TO 2 andamp;andamp; show messages on row 2andM;MENU TO MenuChoice andamp;andamp; display the menu and get selectionandM;* There's no BROWSE command, though there is an EDIT command.andM;* It currently doesn't support a math-coprocessor, so having one won't speedup any of the math operations.andM;The one omission that may cause the most concern among dBASE aficionados inmacros.andP;  Macros, as you and I know them, aren't available.andP;  In some ways thisisn't as bad as it first appears since the language accepts characterexpressions where dBASE requires an unquoted identifier.andP;  The other major useis to create arrays by tacking a number onto an identifier to create a newvariable name.andP;  Force has one-dimensional arrays.andM;Force's &quot;macros&quot; are vaguely similar to C macros, in that you #define them.andO;When the compiler comes across the macro name (preceded by an ampersand), itreplaces the name with the defined text.andP;  But you can't create macrofunctions or check a logical expression as you can in C.andM;The following listing shows the various processing commands.andP;  The #definecommand allows you to define a symbol to stand for whatever follows it onthat line.andP;  You can then use the symbol by preceding it with an ampersand.andM;#define ARRSIZE 10  andamp;andamp; define the size of the arrays VARDEF INT IntArray[andamp;ARRSIZE]  andamp;andamp; define array with ENDDEF  andamp;andamp; ARRSIZE elementsandM;#define FORCE102  andamp;andamp; define the current version #ifdef FORCE 102 ...andP;  andamp;andamp; Theversion 1.02 code goes here #else ...andP;  andamp;andamp; The other code goes here #endifandM;#include myfuncs.hdr andamp;andamp; include prototypes of functionsandM;You can check to see if a symbol has been #defined by using #ifdef or#ifndef.andP;  If the symbol is defined, then the lines following the #ifdef arecompiled, otherwise they're skipped until a #else or #endif is found.andP;  Thesetests can be nested.andM;It's extremely handy, if not necessary, to keep commonly used text in aseparate file and tell the compiler to include that file in the current file.andO;For example, all of Force's functions are defined as external functions inseveral files.andP;  You can include their definition by using the #includecommand.andP;  To include some of the database-related functions such as EOFO,you'd use the command:andM;#include database.hdr.andM;Using ForceandM;I've covered the major additions and the omitted features of Force, but Ihaven't given any indication of what it's like to actually use Force todevelop programs.andM;One of the major benefits to declaring variables is that the compiler canverify that you're correctly using the variable--as well as detect possiblespelling mistakes.andP;  For example, none of the dBASE compilers will catch thefollowing error in assigning a value to LoopCtr.andP;  Force will if you didn'tdeclare it.andP;  You'd have to wait until runtime to discover that you'dprogrammed an endless loop.andM;STORE 0 TO LoopCntr DO WHILE LoopCntr andless; 100andM;...  STORE LoopCntr + 1 TO LoopCtr andamp;andamp; storing to wrong andamp;andamp; variable ENDDOandM;Force would flag the error at compile time saying that LoopCtr wasn'tdefined.andP;  Force tells you the line number of the error but not the positionwithin the line.andP;  This can be a problem when all the error message says is&quot;Invalid Expression.&quot;andM;One error that may often pop up when converting dBASE programs to Force isusing keywords as identifiers.andP;  For example, you may define a variable Dateand use the command STORE DATE() TO Date.andP;  This is perfectly valid in dBASE,but not in Force.andP;  Every identifier must be unique.andP;  You can't use anykeywords as identifiers.andP;  In most languages, this restriction isn't tooonerous but Force has over 120 keywords, not counting the standard functionnames.andM;The Force compiler allows you to specify only one program file at a time.andO;Unlike Clipper or FoxBASE+, you can't compile a complete multi-file programby specifying the main program file.andP;  Neither can you use DOS wildcards tospecify multiple files.andP;  If you intend to develop programs of any size,you'll need to invest in a &quot;make&quot; utility that issues the appropriatecommands to compile and link any program modules that were changed since thelast compilation.andM;As with any language, the programs you develop in Force may be too large tofit in memory.andP;  You could split the program into separate executable programsand provide a &quot;control center&quot; program to run them.andP;  But if the program isstill too large, you'll have to purchase an overlay linker, such as PLINK86,which is provided with Clipper.andM;Force doesn't provide a debugger, although it does support any debugger thatcan use the linker's MAP file, such as Microsoft's Symdeb or Borland's TurboDebugger.andP;  Unfortunately, you can't determine the value of variables definedwithin a procedure, nor can you correctly see the value of non-integervariables.andM;The manual usually answered my questions, although it would benefit from moreexamples.andP;  Similarly, larger sample programs would help in quickly learninghow to put some of Force's features to work.andP;  The technical support isfree--not toll free.andP;  Because I was able to visit the developers' offices, Ididn't have a chance to use the support as a normal customer.andM;Version 1.0 bluesandM;Anyone who uses computers quickly finds out that purchasing the first versionof anything is akin to playing Russian roulette.andP;  Force is no exception.andP;  Inthe first version I received (also shipped to users), I located over 40 bugs.andO;I reported them to Sophco, and they solved most of them.andP;  Other users havealso had their problems and requests for additional features quicklyaddressed.andM;Sophco is to be commended for their update policy.andP;  They are establishing aBBS that will allow registered users to dial in and get the most recentversion of Force free of charge.andP;  This does not apply to major updates, whichmeans a change of version numbers from 1.x to 2.x.andP;  If you don't have amodem, you can contact Sophco and they'll supply you with the currentversion.andM;The following are descriptions of bugs that couldn't be fixed in time forthis review.andP;  Most of them will probably be fixed by the time you read this.andM;* Integer overflows aren't detected.andP;  For example, the maximum value that aninteger variable can hold is 32767, so if you attempt to use a value largerthan that, the variable will &quot;wrap around&quot; to be a negative number.andP;  Youcould use a LONG integer, which has a maximum value of over two billion.andM;* My computer crashed and required a reboot when I tried to compile a largeprogram.andP;  Smaller programs that exceeded the 64K code limit compiled, but thelinker generated error messages.andP;  I'd prefer that the compiler tell me when Iexceeded its limits.andM;* I was unable to get the LABEL FORM command to work correctly.andP;  The programonly displayed one line for each label rather than the five that I defined.andM;* When storing a value to variables of different types, only the firstvariables of the same type gets the value.andP;  For example, the following linewould store 3 in the integer J, but 0 in the floating point R.andP;  If the orderis reversed, R gets the value 3, J would get the value 0.andM;STORE 3 TO J, RandM;* Memo has a Find command to let you search for words, but it can't locateanything (it won' find something even if it's in the memo).andM;What's next?andM;Having irreversibly split from the mainstream dBASE language, Force can, andwill, add features to the language that are necessary for developing certaintypes of applications.andM;The developers said they intend to add C-like structures, pointers withdynamic memory allocation, static variables (although defined within aprocedure, their value stays around between calls to the procedure), as wellas better development tools.andM;These additions will make it possible to address some of the differencesbetween other dBASE dialects and Force.andP;  For example, using static variableswill make it possible to safely GET to a variable defined within a procedurebecause the variable won't just &quot;go away&quot; after exiting the procedure.andM;The most profound effect on Force will come from add-on companies.andP;  It'sextremely easy to create procedures and functions in either Force or C toperform operations not already available.andP;  The code-generator companiesshould be able to easily create templates for Force.andP;  Perhaps someone willalso develop a dBASE-to-Force translator to handle the requisite declarationsand slight changes in syntax.andM;ConclusionsandM;Force is neither a FoxBASE+- nor Clipper-killer as some people have expected.andO;It tends to be faster at the little things that programs do, such asassigning values to variables, displaying screens, or calling procedures.andM;You may find yourself writing programs with Force that you wouldn't considerdoing with the other dBASE languages.andP;  That's because the other dBASEdialects don't let you do the things Force allows or are too difficult tomaintain.andP;  It may also replace traditional languages when having a databaselanguage available makes more sense than using in-memory lists or using alibrary of file routines.andM;If you're expecting to run your existing programs through Force and get asmall, fast executable program out the other end, forget it.andP;  It takes sometime to port an application to Force, and some programs may not make it atall.andM;You'll also want to consider the &quot;Version 1 Factor.&quot;andP;  Getting in on theground floor offers opportunities and risks.andP;  The opportunity here is towrite applications that you haven't been able to until now.andP;  The risk is tobe stuck with a compiler that either doesn't do what you want it to, ordoesn't work the way you want it to.andM;Finally, you'll also want to consider the portability issue.andP;  Force is alonein the world, while the core dBASE III PLUS language is supported on avariety of machines and operating systems.andP;  If you stick with the &quot;standard&quot;language, you may achieve a high-degree of portability, while Force mayforever be limited to DOS-based machines.andM;PriceandM;Force's retail price is $695.andP;  Contact Sophco, P.O. Box 7430, Boulder,Colorado 80306, phone (303) 444-1542 and (800) 922-3001.andM;Mark Streich is currently working towards his master's in computer science atthe University of Colorado in Boulder.andP;  He may be reached c/o Data BasedAdvisor.andO;</TEXT></DOC>