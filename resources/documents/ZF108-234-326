<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-234-326  </DOCNO><DOCID>08 234 326.andM;</DOCID><JOURNAL>Patricia Seybold's Office Computing Report  Feb 1990 v13 n2 p1(12)* Full Text COPYRIGHT Patricia Seybold's Office Computing Group1990.andM;</JOURNAL><TITLE>Visual programming: is a picture worth 1,000 lines of code? (a newapproach to program development for end users) (includes relatedarticles on the factors driving programming with pictures and onthe Cause visual programming language)</TITLE><AUTHOR>Rymer, John R.andM;</AUTHOR><SUMMARY>Three visual programming environments are tested and compared:Odesta Corp's Double Helix, Maxem Corp's Cause and The Gunkara SunSystems' Prograph.andP;  All three deliver a visual approach tocreating computer programs through use of a pictorial vocabularythat allows programmers to state program functions using picturesinstead of words.andP;  Double Helix is a relational DBMS for theMacintosh that includes application-specific visual programmingutilities; database applications can be created by positioning'tiles' on a display and using arrows to specify relationships.andO;Cause provides a cross-compiler for DOS and Apple's Macintosh in avisual programming environment; programs (called Effects) aredesigned through a sequence of Step Objects and associatingresources with each step using Resource Objects.andP;  Prographcombines object-oriented programming and data flow diagramming;each of the three is described.andM;</SUMMARY><DESCRIPT>Product:   Cause (Program development software) (design and construction)Double Helix (Data base management system) (design andconstruction)Prograph (Program development software) (design and construction).andO;Topic:     Program Development TechniquesNew TechniqueRelational DBMSEnd UsersProgram Development ToolsTrendsGraphic FormsIconsObject-Oriented Programming.andO;Feature:   illustrationchart.andO;Caption:   Comparison of Cause, Double Helix and Prograph visual programmingtools. (chart)andM;</DESCRIPT><TEXT>Visual Programming Is a Picture Worth 1,000 Lines of Code?andM;THE DAY IS approaching when users will program their computers to suit theirindividual needs.andP;  A new class of &quot;visual programming&quot; tools promises toempower users to automate their own routines using packaged software or evento &quot;roll their own routines using packaged software or even to &quot;roll theirown&quot; applications.andP;  Most of these tools give users visualrepresentations--charts and/or pictures--of information management andanalysis functions to connect in sentences, giving rise to the general termvisual, or pictorial, programming.andM;Visual programming is a hot technology manifested in many products.andP;  Indeed,many tools defy categorization.andP;  The various object-oriented developmentenvironments available today, for example, make good use of graphicalenvironments like Microsoft Windows and the Macintosh.andP;  Tools likeObjectWorks from ParcPlace Systems Incorporated, Smalltalk/V from DigitalkIncorporated, Actor from the Whitewater Group Incorporated, and Object/1 fromMDBS Incorporated use windows, dialogue boxes, and templates to help theprogrammer.andP;  But these are primarily text-based systems.andP;  Their greateststrength is allowing developers to work iteratively  with their programs:building a little, running the result, building some more, running ...andP;  andso on.andP;  In this article, we focused on a sampling of products that go furtherin using pictures to describe functions:andM;* Double Helix from Odesta Corporation (Northbrook, Illinois)andM;* Cause from Maxem Corporation (Tucson, Arizona)andM;* Prograph from the Gunkara Sun (TGS) Systems (Halifax, Nova Scotia)andM;The Visual ApproachandM;Aall these tools provide a visual approach to building programs.andP;  A programis a set of rules and instructions governing manipulation of data.andP;  A programtypically describes a process that starts with inputs, leads to a computationor manipulation, and ends with outputs.andP;  In conventional methods, aprogrammer writes a series of statements using a special vocabulary toexpress the desired function.andM;Visual programming tools provide a pictorial vocabulary, enabling programmersto state program functions using pictures instead of words.andP;  With a pictorialvocabulary, nonprogrammers stand a chance of writing programs.andM;Visual languages attempt to make writing a program as simple as describingthe tasks that the program accomplishes using a series of icons and/ordiagrams of data flows.andP;  There's still a language to learn (or an interpreterfor a conventional language).andP;  But, because the visual languages use picturesand diagrams, they will be easier for most users to learn than arcane terms.andM;Using Cause, for example, a user-programmer could, by linking a series oficons in a visual sentence, build a program to multiply a number by theprevailing prime interest rate and then display the result in a window.andO;First, a Dialog Icon asks the user to enter the number to be calculated.andP;  Theentered number is fed to the Compute Icon for multiplication by theprevailing prime rate.andP;  And the result of the computation is passed to aDisplay Icon.andP;  Each icon actually represent source code, but theuser-programmer is none the wiser.andM;VERTICAL TOOLS.andP;  Many products implement visual programming either asapplication-specific facilities or as standalone development environments.andO;Among the application-specific tools is one contained within Double Helix, arelational database management system (RDBMS) for the Macintosh.andP;  DoubleHelix allows users to build database applications by positioning &quot;tiles&quot; on adisplay and using arrows to specify how data is related to other data, wheredata moves within a program, and what happens to data at any particular step.andO;The tiles are icons that represent either tools or logical elements within aprogram.andM;Icons.andP;  An icons is the term Double Helix uses for logical program elements.andO;The Template Icon, for example, creates displays of data.andP;  The View Iconfilters database entries.andP;  The Index Icon places data in specified orders (byzip code, for example).andP;  Programmers deploy the User Icon to createinformation screens tailored to specific application areas, like personneland tele-marketing.andP;  The Relation Icon places limits on individual useraccess to particular database fields.andM;Tools.andP;  Double Helix includes the Field and Abacus tools.andP;  Both are generictools that users &quot;program&quot; by filling out predefined templates to performspecific functions.andP;  The Field Tool is what programmers use to define andmanage database fields.andP;  The Abacus Tool can be programmed to performspecific mathematical calculations.andP;  Having been defined, the tool willperform the desired function within the program.andM;Ron Kloss, president of a small advertising agency in Santa Monica,California, has built all of his business's core software with Double Helix.andO;The visual programming features of Double Helix were what really attractedhim to the package.andP;  &quot;I'm a commercial artist and photographer.andP;  It neveroccurred to me to program a computer,&quot; he says.andP;  &quot;But I could logicallyassemble statements using tiles and not have to get into the semantics.andO;There was no need even to worry what order tasks were done in.&quot;andM;Cross-application ToolsandM;PROGRAMMING WITH MULTIPLE TOOLS.andP;  You can do a lot with database, but notevery application is a database application.andP;  We're intrigued by thepotential for applying the visual principles of Double Helix to a broad rangeof applications.andP;  Many users need a way to knit together a variety ofapplications to perform a specific task.andP;  The primary example is thepreparation of reports that combine word processing, spreadsheet analysis,and graphics.andP;  Many users employ separate word processing and spreadsheetapplications--at minimum--to prepare reports.andM;Several vendors are working to fill this gap, more or less using visualtechniques.andP;  Hewlett-Packard's NewWave environment for DOS is a good exampleof this kind of tool.andP;  NewWave is an application environment that extends thecapabilities of Microsoft Windows.andP;  Applications written to its programminginterface can exchange data without filters or conversion routines.andP;  Thus,the version of Excel written for NewWave can pass the results of calculationsto the NewWave version of Graph Plus from Micrografx with no muss, no fuss.andO;Users can also automate more limited interchanges by encapsulating DOSapplications in special shells.andP;  (The limitation is on how much informationcan be exchanged by applications.)andM;NewWave establishes a foundation for application integration and thenleverages it with an Agent facility.andP;  Agents are cross-application macrosthat automate tasks within and across applications.andP;  Users create Agents bycompleting a task using one or more applications, recording their keystrokesand mouse clicks as they do so.andP;  The keystrokes and clicks are translatedinto a script describing the user's actions and references to the properapplications.andP;  The next time the user needs to perform the task embedded inthe Agent, he or she simply invokes the Agent and watches it work.andM;Agents are good for automating repetitive tasks.andP;  For example, the separatesteps in creating a monthly sales report can be recorded in a Monthly ReportAgent, including tapping a mainframe for updated sales results, downloadingthe data into a spreadsheet, creating a graphic based on the new figures,incorporating the graphic into a document, and distributing the document viaelectronic mail.andM;This isn't visual programming, but it is related.andP;  Users can create routinesby leveraging applications packages they know without sitting down to writecode.andP;  An extension of the concept would be to allow users to build routinesby structuring icons on a display using flow charts, obviating the need toperform every step in the task once.andP;  Metaphor Computer's Data InterpretationSystem (DIS), which is also sold by IBM, allows this level ofinterapplication visual programming, albeit only with its own applicationspackages.andM;GENERAL PURPOSE TOOLS.andP;  Many of the new visual programming tools address theneed of users to build applications from scratch by offering a generalpurpose environment.andP;  Among general purpose visual programming environmentsare HyperCard, Cause from Maxem Corporation, VIP from mainstay Incorporated,and Prograph from The Gunkara Sun (TGS) Systems.andM;HyperCard.andP;  Of the above environments, HyperCard is the most limited infunction.andP;  It allows users to organize and present their own information intheir own ways, using buttons and other functional icons provided with thesystem.andP;  Apple's achievement with HyperCard was to make it easy to writeinformation storage and display programs, maintaining a high degree ofreusability among functional icons like buttons, individual cards, and stacksof cards.andM;HyperCard's limitation is its isolation from other Macintosh resources.andO;Apple plans to remedy this over time, starting with a new Applescriptfacility that will allow users to automate routines across Macintoshapplications.andP;  Applescript has been announced as one of the facilities to beincluded in Version 7 of the Macintosh operating software, which will bedelivered at an as yet unspecified future date.andM;Cause.andP;  Maxec Corporation's Caue is attracting a lot of attention because ofits cross-compiler for DOS and the Macintosh, but it is also an interestingvisual programming environment.andP;  Maxem sells Cause as a &quot;personalprogramming&quot; tool.andP;  In its introductory manual, &quot;A Normal Person's Guide toUsing Cause,&quot; the company reduces programming to three simple steps: select,discuss, perform.andP;  Cause provides user-programmers with a library of Stepsand Resource objects, each encompassing predefined functions, that can beplugged into the three-step model of the typical program.andM;Users build a Cause program--which is called an Effect--by designing asequence of steps using Steps Objects, and associating resources with eachstep using Resource Objects.andP;  Cause provides 10 Step Objects:andM;* Dialog asks the user to provide information for use in the program.andP;  TheDialog Step is one of two objects (cancel is the other) that prompt users toprovide a program with input.andM;* Display instructs the computer to display information.andM;* Report prints a presentation of information based on formats defined by theuser.andM;* Decision instructs the program to choose between two or more conditions.andM;* Compute instructs the computer to perform a mathematical calculation.andM;* Record is a container for information that is used later by the program.andO;The programmer defines record formats when designing the program.andM;* File contains a Record Step.andP;  All Records are assigned to Files for storageand retrieval.andM;* Cancel directs the computer to halt the program and back out of it.andP;  Theuser is asked to confirm this Step.andM;* Safety allows the user to back out of a problem, like a disk failure, tothe last completed step of the program.andP;  It is an error-trapping functionthat saves work completed up to that point.andM;* End exits the program upon its completion.andM;Cause includes four Resource Objects:andM;* Windows are user-interface objects.andM;* Reports are presentations of information.andM;* Files are objects representing relational database files.andM;* Items are variables within a program.andM;Cause's current stock of objects covers some of the functions programmersneed, but not all of them.andP;  In its current state, Cause is appropriate forthe same kinds of basic information management and display applications thatMacintosh jocks have built with HyperCard.andP;  Such programs are useful, but notthe only kinds of programs users may want to write.andP;  Maxem is committed toadding more functions to Cause, gradually building it as a general-purposetool.andP;  Menu and Procedure resource objects are scheduled for addition to thenext release of the product.andP;  There's no reason still others can't be added.andM;Effects can be compiled for either the Mac or for DOS, which is whatattracted Charles W. Meier, director of systems and programming at Young andamp;Rubicam in New York.andP;  Yandamp;R is using Cause to build graphical front-endapplications to the Oracle RDBMS for both its Macintosh and PC users.andP;  Notethat Meier is an MIS manager, not an end-user programmer.andP;  Meier values Causeas a tool that speeds application development for a diverse environment.andO;Meier fully expects Yandamp;R's more ambitious users to use Cause to customize theEffects MIS is cranking out.andP;  &quot;We've had a couple of people define files andprovide screens for them using Cause,&quot; he says.andP;  &quot;It worked and it was easy.&quot;andM;VIP.andP;  Visual Interactive Programming (VIP) is a Macintosh system that allowsusers to build programs by describing flow charts and placing icons in them.andO;The icons front for the Macintosh Toolbox managers (Window Manager,Quick-Draw Manager, Dialog Manager, etc.), which makes an understanding ofthe Macintosh Toolbox a prerequisite for using VIP.andM;What's interesting about VIP is its use of flow charts.andP;  A flow chart is auseful way to describe a program's logic way of representing programstructures that is familiar to all trained programmers.andP;  Data flow diagrams,which are flow charts that specifically look at the way data flows through aprogram, are a related technique.andP;  Data flow diagrams were the baserepresentation technique used by Apple to explore visual programming in itsFabrik research project.andP;  Apple decided not to market Fabrik itself.andP;  Rather,parts of the project will be applied to new products.andM;Plunging into OOPandM;Double Helix, HyperCard, Cause, and, to some extent, VIP, are object orientedin that they allow users to write programs by constructing visual sentenceswith objects represented by icons.andP;  TGS System's Prograph is a full-blownobject-oriented development environment including a fuller range of functionsand integrated development tools.andP;  Prograph is not a tool for the average enduser (or even the above-average end user).andP;  It is complex.andP;  However, it doesrepresent the kind of tools that await visual programmers as they graduatefrom simpler systems.andM;Prograph uses the object-oriented programming (OOP) paradigm, which may bedifficult for the novice to understand.andP;  The basic unit in an object-orientedprogram is an object, which combines within a single structure both data andthe functions the data performs.andP;  A Letter Object, for example, would containtextual data and formatting specifications, and would know how to printitself.andP;  Objects are combined into programs by using messages to describetheir interactions.andP;  The Letter Object could participate in a mail mergeapplication by sending a message to a Client List Object asking it to sendalong all of its entries within Zip code 02109, one by one.andM;Object orientation maps very well to visual programming involving icons.andO;Zack Urlocker, manager of developer relations for the Whitewater GroupIncorporated (Chicago), vendors of the Actor object-oriented programmingenvironment, believes that visual programming and object orientation arenatural partners.andP;  Novice programmers learn the object paradigm faster thanthey do procedural programming, he asserts, because they are able totranslate the steps in a task into objects corresponding to functional chunksof the task.andP;  Procedural programming forces programmers to separate data fromprocedures, which are the operations on those data.andP;  The programmer isrequired to impose a more abstract structure over the application tasks.andP;  Ourreviewer was not so sure that object-orientation is such a naturally obviousconcept (see related story, page 10).andM;PROGRAPH.andP;  Prograph actually combines the object-oriented programmingparadigm with data flow diagramming.andP;  Users build programs by definingobjects and then linking them into data flows.andP;  Prograph is much more complexand powerful than Cause or HyperCard.andP;  It is a programming environment, withits own object-oriented language.andM;Prograph comprises five elements.andP;  First, it provides a Graphical Editor todesign and build programs by constructing flow charts.andP;  Prograph programmerswork from these visual representations to build prototypes and then refinesthem.andM;Second, Prograph's Interpreter animates the execution of the programs createdwith the Graphical Editor.andP;  Users can watch the information and logic oftheir programs in action.andP;  This is an important capability in refining anddebugging programs.andM;Third, Prograph provides a set of System Classes--predefined objects mainlygoverning user interface functionality--that programmers can use to buildtheir programs.andP;  The Classes are:andM;* ApplicationandM;* MenuandM;* Menu ItemandM;* WindowandM;* Window ItemandM;* Click ItemandM;* TextandM;* Scroll ListandM;* User ItemandM;* ButtonandM;* Radio SetandM;* Check BoxandM;* GraphicandM;* Edit TextandM;* PictureandM;* IconandM;* Scroll TextandM;The fourth component, the Interface Manager, fields user input and dispatchesdisplay events.andP;  The fifth component is a collection of graphical editorsassociated with the system classes.andP;  Programmers use these editors to createinstances of the system classes.andM;The VisualandM;Development ProcessandM;Though the output of a visual programming tool is the same as that ofconventional programming languages, the process of developing a visualprogram is not.andP;  In conventional programming, software is developed in aserial process that starts with specification of functions, and proceeds toprogram design, prototyping, programming (coding), testing/debugging,maintenance, and, finally, documentation.andP;  Each of these phases of the&quot;software development life cycle&quot; is handled separately, preferably byseparate development groups.andP;  At minimum, design and programming aresegregated.andM;This process has been used since the '60s to develop the majority ofcommercial software in use today.andP;  It virtually guarantees a rigorousapproach to development, with each phase checked down the line as work onother phases is completed.andP;  Thus, if an element of the design causes theprogram to do something unintended, the coders or testers are bound to catchit.andP;  The problem is that design decisions which result in awkward functioningmay or may not be kicked back to the design team for reconsideration.andP;  Infact, feedback from one phase to another tends to be very limited.andM;Visual programming continues the general trend toward developing programs byrapidly sketching prototypes and then incrementally refining and debuggingthem, but compresses the conventional software development process.andP;  The userstarts by building a skeleton of the function he or she wants the program toperform, and then runs it.andP;  If the program breaks, the user goes back andmakes modifications to fix it.andP;  Additional functions are added, more fixesand tweaking follow, and so on.andP;  The process is incremental and interactive,with the user developing, running, debugging, and then developing some more.andM;&quot;I look at the programs my son writes in C,&quot; says Ron Kloss, the Double Helixuser, &quot;and I can't see the big picture.andP;  I know what files I need--clients,jobs, etc.--and I can assign pictures to each and then build structures foreach.andP;  If I had to write code, I'd have a big problem.&quot;andM;The interactive style of development may or may not follow a softwaredevelopment methodology like those associated with computer-aided softwareengineering (CASE) tools.andP;  Tools such as Cause and Prograph give usersguidelines and sample programs to help direct their efforts.andP;  But there's norigorous methodology.andP;  In part, this is a reflection of the state ofobject-oriented programming.andP;  Formal OOP methodologies are the early stagesof their development.andM;How Far Can You Go?andM;Visual programming is undoubtedly the future of end user programming--andpossibly professional application programming as well.andP;  Today's tools showwhat's possible, but they are just first steps in the right direction.andP;  Thebest tools are those that leverage a base application to generate specializedfront ends.andM;Double Helix allows users to build some sophisticated stuff--even multiuserprograms.andP;  The reason is the underlying RDBMS.andP;  It takes care of concurrentaccess, security, and data integrity for the user.andP;  The drawback ofapplication-specific tools is that they force applications into a particularcontext--database, in the case of Double Helix.andP;  You can build a lot ofapplications using a database, but not all applications fit that contextmold.andM;Prograph, by comparison, is a general purpose tool that providesuser-programmers a wide range of functions and leaves the application contextopen.andP;  Cause fits in between.andP;  It is oriented to data storage andpresentation applications, but is open to the addition of new functions andprogramming expressions.andP;  Most end users will be thrilled with a tool likeCause.andP;  But those who want to learn how to become real programmers inevitablyare going to want to graduate to a tool like Prograph.andM;For most end users, the question of function is moot.andP;  Users should notexpect to install a visual programming tool and begin creating programs offthe top of their heads.andP;  As with a formal programming language, they mustunderstand the visual language's functions and how they can be used.andM;How much time does this learning require?andP;  Maxem says a novice can getstarted after spending two to three hours with the Cause manual.andP;  But LouisPaolini, microcomputer analyst at du Pont's Fibers Division, reports that heneeded 8 to 10 hours with the manual and the program to do anything usefulwith Cause.andM;Ron Kloss, the advertising man, spent weeks studying the RDBMSs available forthe Mac before he bought Double Helix.andP;  When he started programming withDouble Helix, he knew what a relation was.andP;  Prograph makes a wider range offunctions available to users than either Cause or Double Helix, both of whichrequires considerably more time to master.andM;Programming is a discipline, a fact that visual tools can't change.andP;  Learningtime is inevitable, says Frank Ludolph, the lead engineer on Apple's Fabrikvisual programming project.andP;  The goal of visual programming is to make itmore likely that a user's investment of time in learning a tool will paydividends--much more likely than an investment in learning, say, C.andP;  &quot;Visualprogramming is an attempt to make programming concrete,&quot; says Ludolph.andP;  &quot;Mostlanguages are abstract.andP;  Visual languages allow users to see relationshipsbetween data and functions on the screen, and directly manipulate them.&quot;andM;WHAT IS A LANGUAGE?andP;  For those willing to learn programming and for those whoalready know it, there's not a lot of risk in buying an easy-to-use butfunctionally limited tool.andP;  Every vendor in the business intends to add totoday's functionality with new programming expressions.andP;  Zack Urlockerdoesn't doubt the directions of all visual programming vendors: &quot;All of thesetools aspire to become full-blown languages,&quot; he says.andM;A &quot;full-blown&quot; language is a rich set of expressions to specify the elementsthat might go into a program.andP;  In evaluating visual programming tools, checkinto the following features:andM;* Expressions are the way languages specify particular programming elements.andO;Having more expressions is better than having fewer; it's like having alarger vocabulary to construct sentences.andP;  Variables are an importantcategory of expression.andP;  Language support for variable types like &quot;integer,&quot;real, and &quot;rectangle&quot; make specifying those elements in a program that mucheasier than it would be without language support.andP;  Arrays of elements fallinto the same category.andP;  Arrays come in single- and multidimensionalvarieties.andM;* Branching and looping structures are built-in logical sequences that theprogrammer can specify in the program.andP;  Structures like &quot;if...then...else,&quot;switch, &quot;while...do, and &quot;for...next&quot; come in handy in designing how aprogram works.andM;* Subroutine calls are self-contained pieces of code that perform a limitedfunction.andP;  Calling a subroutine to perform its function from within a programbeats writing the code all over again.andP;  You just write it once.andM;* Segmententation of programs into multiple files may be preferable forperformance reasons to building a program as one large file.andM;PERFORMANCE.andP;  Most visual programming tools trade ease of development forspeed of execution.andP;  One of the biggest knocks on visual programming is thatit generates slow programs.andP;  Ron Kloss notes that none of the programs he'swritten with Double Helix runs at blazing speeds, but that's irrelevant tohim.andP;  His primary interest was in creating agency-management applicationsthat worked and didn't cost a fortune.andM;Performance is a function of two factors.andP;  First, many visual programmingtools use interpreted languages, which run slower than compiled languages.andO;Prograph is currently an interpreted language, but TGS Systems plans tointroduce a compiler for it in 1990.andP;  Cause is compiled.andP;  If speed ofexecution is important, choose a visual programming tool that generatescompiled code.andP;  Second, visual programming tools are weak on helping usersoptimize their programs.andP;  There's usually a dozen or two ways to express afunction within any environment, but not all of them run at the same speed.andO;Visual programs can be optimized, but probably not by user-programmers.andO;Kloss hopes to sell his Double Helix applications to other agencies, but hehired a partner to do the necessary optimization.andM;SCALE AND SCOPE.andP;  Visual programming tools tend to be most successful indescribing programs involving serial, linear steps.andP;  Not all programs,however, are strictly linear, notes Frank Ludolph of Apple.andP;  Fabrik began tobreak down whenever a program's logic went beyond a strict flow of data fromPoint A to Point B to Point C, and so on.andP;  For example, say a programrequires a sequence of dialogue boxes, with each succeeding box determined bythe data entered in the preceding box.andP;  In a data flow diagram, the boxes maylook like processes operating in parallel, but it is actually very importantto sequence the data flows to present the dialogue boxes in the proper order.andM;DEBUGGING.andP;  The last bit of reality that visual programmers will bump upagainst is debugging.andP;  Without an integrated debugging facility,user-programmers are really hamstrung if they run into problems whilebuilding their programs.andP;  A debugger must allow a user to stop execution of aprogram as it crashes, switch to the debugger to find and perform a fix, andthen pump the fix right into the program before restarting the program.andO;Kloss praises Double Helix's debugging facility.andP;  Du Pont's Paolini lamentsthe lack of an interactive debugger within Cause.andM;The alternative to interactive debugging is painful to contemplate.andP;  As ourreviewers note, the inability to print out their programs was a realhindrance to working with them.andP;  Cause, for example, prints outdocumentation, but not the sequence of events driving the program.andP;  Debuggingis very difficult.andM;Impact on OrganizationsandM;The new visual programming tools resurrect the age-old question about enduser programming: What should users be permitted to do, and what should beleft to professional programmers?andP;  Visual programming tools driveorganizations toward much greater end user involvement in the software theyuse than is typical today.andP;  Visual programming is seductively simple fornonprogrammers: I'm not a programmer, but I can make my machine do what Ineed it to do.andP;  Professional developers are also attracted to the technologybecause it can reduce the amount of effort needed to build programs.andM;Visual programming is the logical extension of the Hands On Imperative thatguided the hackers of the '50s, '60s, and '70s to popularize computers.andP;  Endusers can get started with these tools by adding special routines to existingapplications and progress to creating full-blown applications.andP;  The fact thatvisual programming tools appear so easy to use will prompt more users toimplement productive new ideas in software.andP;  This trend is as inevitable aswas the mass acceptance of the personal computer.andP;  Visual programming toolsare inexpensive--ranging from $200 to $600--and support an interactive,plan-as-you-go development style that has become popular with nonprogrammersand professional developers alike.andM;The downside of increased end-user programming is that users will spend toomuch time hacking around and not enough time doing their jobs.andP;  To getmeaningful results from a visual programming tool, users must dedicate acertain amount of time to learning it.andP;  The risk to corporations is that thislearning process will be too distracting and will never yield productivesoftware.andP;  Nonprogrammers will mitigate this risk themselves by avoidingdifficult-to-use software tools.andP;  Nonetheless, companies will need toconsider how to support end user programming activity to make sure that it isproductive.andM;Young andamp; Rubicam presents a model for balancing the interests of userprogrammers in individualized software with the corporate need to ensure dataintegrity.andP;  Charles Meier's MIS staff is using Cause to build a series of enduser applications today, but he envisions a partnership with users that willimprove these applications over time.andP;  Equipped with Cause, users are boundto find ways to make their database front ends better.andP;  They might code theseimprovements themselves or ask MIS for help, he says.andP;  At any rate, MIS isalways there to optimize programs and lend a helping hand.andM;&quot;We're trying to become self-sufficient in using computers,&quot; says Meier.andO;&quot;That means we're encouraging our users to do more with their machines.andP;  Butwe're going to have end user computing whether we encourage it or not.&quot;andO;</TEXT></DOC>