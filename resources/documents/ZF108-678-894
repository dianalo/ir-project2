<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-678-894  </DOCNO><DOCID>08 678 894.andM;</DOCID><JOURNAL>AI Expert  July 1990 v5 n7 p28(6)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Systematic invention for knowledge engineering.andO;</TITLE><AUTHOR>Lirov, Yuval.andM;</AUTHOR><SUMMARY>Invention, a difficult and frequently avoided aspect of knowledgeengineering, is discussed.andP;  Traditional invention techniques oftrial-and-error waste time and effort as well as creatingfrustration.andP;  A systematic invention paradigm is presented thatsignificantly improves the quality and productivity of knowledgeengineering.andP;  It applies to all expert-system development stages.andO;The method is demonstrated through an expert system designed forelectronic circuit-pack troubleshooting that is currently in useat several ATandamp;T manufacturing facilities.andM;</SUMMARY><DESCRIPT>Topic:     InventionsNew TechniqueKnowledge-Based SystemsProgrammingExpert SystemsArtificial Intelligence.andO;Feature:   illustrationchart.andO;Caption:   The required solution. (chart)Troubleshooting expert system architecture. (chart)Hierarchical architecture for expert systems. (chart)andM;</DESCRIPT><TEXT>Most classic methods to improve invention enhance idea generation withoutaiding rejection of futile conceptsandM;Invention is a difficult and often avoided aspect of knowledge engineering.andO;Traditional techniques inherit all the shortcomings of traditional invention,the worst being the notorious waste and frustration of trial-and-erroriterations.andP;  This article introduces a systematic invention paradigm thatsignificantly improves the quality and productivity of knowledge engineering.andO;This systematic invention applies to all expert-system development stages,from shell construction to knowledge acquisition, system deployment, andrefinement.andP;  I'll demonstrate this method by describing an expert systemdesigned for electronic circuit-pack troubleshooting, in use at several ATandamp;Tmanufacturing facilities.andM;Knowledge engineering is an expert-system design activity; in its course theengineer selects or develops an  appropriate reasoning strategy and methodfor acquiring the necessary knowledge.andP;  The process is creative: the engineerinvents a way to map expert knowledge into a knowledge-representation scheme.andO;If such a mapping is not readily apparent, the knowledge engineer must devisean entire knowledge-representation scheme.andP;  A mistake at this critical designstage ultimately results in unusable prototypes.andM;Inventing a knowledge-acquisition method is the next important step inexpert-system design; the difficulties inherent in knowledge acquisition haveearned it the label of  knowledge-acquisition bottleneck.&quot; None of the toolsin the knowledge-engineering arsenal offer a system of conclusive decisionrules to ease the task of selecting the best knowledge representation and thefastest knowledge-acquisition path.andP;  The state of the art of knowledgeengineering can be compared to that of other arts, where chance, inspiration,and psychological states are important creativity factors.andM;In short, invention skills in knowledge engineering are as important as theyare difficult to acquire.andP;  This state of affairs is the legacy of inventionin general-it seems to be an integral, difficult, and misunderstood aspect ofknowledge engineering.andP;  To improve knowledge-engineering skills, generalinvention talents must be examined and applied to knowledge engineering.andM;Using a simple example from high school geometry is one way to describetraditional invention techniques and their shortcomings.andP;  The choice of aproblem from plane geometry has two justifications: first, discussinggeometric problems is easy because they are visual.andP;  Second, and moreimportant, most knowledge-engineering shortcomings result from the reasoningmethods learned early in school.andP;  In particular, expert-system prototypinghas become a widely accepted practice resulting from merging the traditionaltrial-and-error approach to problem-solving with knowledge-engineering tools.andO;Reduction in the number of proto-types is the key benefit of improvedknowledge engineering.andM;TRADITIONAL INVENTIONandM;Traditional invention methods have been examined and described by numerousauthors.(1-5) G. Polya, in his excellent book on reasoning in mathematics,illustrated the traditional invention process using this problem: &quot;Constructa quadrilateral, given a, b, c, and d are its four sides and E the angleincluded by the opposite sides a and c.&quot; The solution proceeds in threestages: first we display all five data items of the problem, as shown inFigure 1.andP;  An experienced problem solver is supposed to redraw the figure:&quot;he would try to place that angle E somewhere else.&quot; Polya suggested the rulethat governs this placement should be &quot;any feature in which the presentsituation recognizably agrees with successful past situations.&quot; Thus, ourexperienced problem solver makes an attempt to place the angle E, errs in theattempt, and tries again (Figure 2).andM;Now the solution should be obvious.andP;  With a, c, and E, draw the triangle;then make another triangle with b, d, and the third side of the firsttriangle.andP;  Finally, draw the parallelogram with sides b and c (Figure 3).andM;This trial-and-error approach has been widely accepted as the only possibleinvention vehicle, but its ineffectiveness is wellknown.andP;  Although manyefforts have been made to improve it, most of the classicinvention-enhancement methods, such as morphology or brainstorming, onlyimprove the mechanics of idea generation without aiding the necessary processof rejecting fruitless combinations.andM;Traditional knowledge engineering.andP;  The trial-and-error approach has beenessentially transferred to expert-system development -the typical knowledgeengineer randomly tries several knowledge-representation techniques, choosesthe best one according to some vague metarule about  successful pastsituations,&quot; and proceeds to knowledge acquisition.andP;  Smaller systems (up to200 rules) do not present difficulties at this stage, so the engineer goes tothe next stage of pilot implementation at the user's site.andP;  Unfortunately,this stage is the one in which most surprises occur: the user discovers thebrittleness of the pilot system and its inflexibility in adapting to newsituations.andM;Engineers should recognize that when a trial is in error, the prototype mustbe scrapped and the entire knowledge-engineering process restarted.andO;Obviously, the expense of such an exercise in an industrial environment ismuch higher than for a geometry problem.andM;The domain-limiting principle.andP;  To reduce the likelihood of such errors,developers of early expert systems preferred to avoid the invention problemaltogether.andP;  Instead, they invented the famous  limiting principle&quot; inselecting expert-systems applications.andP;  This principle dictates that anapplication must cover a sufficiently limited domain.andM;What if an application must handle several domains? Consider, for example, atroubleshooting expert system for finding the cause of a malfunction mostcheaply.andP;  The traditional paradigm of expert-system development calls foranother famous principle: divide and conquer, which can lead to disaster ifmisused.andM;This principle suggests the  partition of the design problem into severalsmaller subproblems, each of manageable size.andP;  Applying this principle at theinitial stage of expert-system design results in a  tendency to partition theknowledge base according to some functionality criteria.andM;For example, troubleshooting is often viewed as a sequence of hypothesisgeneration, evaluation, and rejection.andP;  Accordingly, when developing atroubleshooting expert system, you would develop a system model that willgenerate, evaluate, and reject malfunction hypotheses.andP;  At this stage, thehypothesis-manipulation mechanism has usually nothing to do with the cost ofhypothesis verification.andP;  These costs are computed using a separate knowledgemodule responsible for evaluating measurement, part replacement, and the costof the parts themselves.andP;  Now the developer faces yet another difficultdesign problem-integrating the two knowledge modules.andP;  An integratingmechanism usually consists of a metaknowledge systeM6 that invokes thestrategy selection and optimization modules (Figure 4).andP;  The resulting expertsystem is hard to maintain because of its complexity.andM;SYSTEMATIC INVENTIONandM;Modern invention principles aim to eliminate the chance aspect of fruitlesssearch inherent in traditional invention approaches.andP;  These two principlescover separate but complementary features that any invention should ideallypossess:(7)andM;* Contradiction: the solution must eliminate an apparent contradiction in theproblemandM;* Minimality: the solution must be provided by an absent agent.andM;Each of the following subsections is divided into two sections: acontradiction and an invention, which resolves the contradiction.andM;The revised solution of the plane geometry problem.andP;  Looking back at theworking geometry problem, you can formulate the contradiction in the problem(Figure 1).andP;  To build the quadrilateral, construct an interior angle betweentwo neighboring sides.andP;  But the given angle E is defined between two opposingsides.andP;  Thus we obtain the first contradiction: construct and don't constructan interior angle.andP;  The solution must face this apparent contradiction.andM;The second principle dictates invention through an additional absent agent tobe constructed from the given data.andP;  We conclude from these two requirementsthat the required internal angle must be constructed by an additionalpolygon.andP;  This polygon has the required angle and some of its sides given inthe problem formulation.andP;  Now the trial-and-error process is defined by twoparameters, each subject to only two choices.andP;  We have to choose a polygon triangle or quadrilateral) and a pair of neighboring sides (b and c or c andd); the total thus consists of only four possibilities.andP;  In the worst case,the fourth trial provides us with the correct polygon; namely, theparallelogram with sides b and c.andM;Note the drastic reduction in the number of possibilities when using theseinvention principles to solve the problem and how easily the correct positionfor angle E was found.andP;  Once the polygon has been invented, the rest of theprocess is self-evident.andP;  Finally, notice that the invention process, thoughleading to the same solution as in Figure 3, is different from the textbookexample.andP;  We invent the required agent  parallelogram and triangles) byfacing the apparent contradiction in the problem instead of arriving at asolution via some mystical combination of experience, perseverance, and luck.andO;By focusing on the apparent contradictions, the solution's required featuresare de from the beginning and the role of chance is largely eliminated.andM;The troubleshooting problem.andP;  Troubleshooting strives to eliminate the causeof system malfunction by replacing bad or suspect system components.andO;Obviously, you can eliminate any malfunction by replacing all systemcomponents.andP;  Such a troubleshooting method, however, is often too expensive,because experience suggests that usually only a small subset of thecomponents is the culprit.andP;  So, while the first objective  malfunctionelimination) recommends &quot;replace components,&quot; the second objective (costminimization) suggests &quot;do not replace components.&quot; This contradiction isoften called the &quot;main troubleshooting contradiction;&quot; troubleshootingactivities are defined as those resolving the main contradiction.andP;  An experttroubleshooting system helps the inexperienced troubleshooter resolve thisdilemma.andM;Troubleshooting can be viewed as a discovery process: the system has beenshown to malfunction and the troubleshooter must unmask the responsiblecomponents.andP;  The conventional approach to such a discovery problem is thefamiliar trial-and-error technique-generate, evaluate, and reject hypothesesuntil a satisfactory one is obtained.andP;  (The last satisfactory hypothesis iscalled an &quot;indictment.&quot;)andM;We'll call any subsystem faulty if it has good inputs and bad outputs (inaccordance with the contradiction principle).andP;  Using this definition, theprocess of generating hypotheses is reduced to identifying subsystems withgood inputs and bad outputs.andP;  This technique is the classic development pathof diagnostic expert systems.andP;  Unfortunately, it often results in clumsyarchitecture that is difficult to develop and even harder to maintain.andP;  We'reinterested in a single-module architecture that generates and evaluateshypotheses while addressing the main troubleshooting contradiction.andM;STAREX AS AN EXAMPLEandM;Inventing a satisfactory knowledge-representation scheme is possible onlyafter formulating the invention's objective.andP;  The invention intends toresolve the contradiction contradiction principle) by utilizing a nonexistentagent (minimality principle) so that the system's complexity doesn'tincrease.andM;Knowledge representation and its acquisition.andP;  The requirement of asingle-module architecture leads to the next invention step: if we can'tgenerate and evaluate hypotheses in a single on-line module, let thehypothesis generation and evaluation be performed off-line at theknowledge-acquisition stage.andP;  This approach has several advantages inaddition to the immediate satisfaction of our primary requirement for asimple architecture.andP;  Generating a skeleton of the knowledge base in advancewill speed knowledge acquisition significantly.andP;  This skeleton will containall the rules that in turn will embody all the hypothesis generation andevaluation logic, except for the technical details of troubleshooting advice.andO;The advice must include the proper values at the outputs of the correctlyfunctioning components, though values themselves will be acquired at a laterstage.andM;Another advantage of precompiling a skeleton for the knowledge base is theimproved portability of the resulting expert system; the precompiledknowledge base can be easily translated into any other guage.andP;  STAREX has aknowledge-acquisition module written in PROLOG that acquires thetroubleshooting rules graphically, develops a PROLOG troubleshootingknowledge base, and translates the entire knowledge base into C.(8)andM;Hypothesis evaluation requires the assignment of a cost to each hypothesis sothe cheapest one can be selected.andP;  Hypothesis cost evaluation includes thehypothesis generation stage.andP;  Computing the cost of an hypothesis can beapproached using the divide-and-conquer principle-the cost of the hypothesisequals the sum of the hypothesis test plus the cost of the subsequenthypotheses.andP;  Divide-and-conquer is not applied here according to somecriterion about the task functionality, but only for comput ionalconvenience.) This recursive definition can be given precise mathematicalformulation; it clarifies the next important apparent contradiction presentedby such systems.andM;To fix the ideas, the discussion will be limited to sequential circuits.andP;  (Acomplete treatment of the problem may be found elsewhere.)(8-9) Let m denotethe set of all possible tests, and let test in belong to M. Let T- denote theset of all possible test sequences that can be generated if test m is apositive result.andP;  (That is, the suggested measurement outcome agrees with theproper value in the corresponding advice.) Similarly, let T-\m-- correspondto a negative result of test  m. Let each test m have an associated costC[.sup.]m and each component k have associated failure probability p. Everytest set 7-&quot;+' defines a set of components Km/+, such that at least onecomponent of Km/+ can be indicted if test in proves positive.andP;  Let P[.sup.]mbe the sum of failure probabilities of components inandM;Then the procedure of hypothesis generation and evaluation with minimal costcan be computed from this recursive equation:andM;C (T) = min(c[.sup.]m + P[.sup.]m C  T[.sup.]m+) +andM;Q[.sup.]m C  T[.sup.]m/-)}andM;MandM;where Q[.sup.]m = 1-P[.sup.]mandM;The bad news with this equation is that its computational cost is usuallyprohibitive in practice.(10) Thus, we face a new contradiction-to waste thefewest resources, the minimal cost and the associated diagnostic tree must becomputed from this equation, but such a computation is impossible for anyreasonably large circuit.andP;  This kind of incompatibility's common in Al, aheuristic being the standard escape.andP;  Indeed, a heuristic approachsubstitutes here for the true recursive computation for an easily computed,yet workable estimate.(9)andM;Knowledge acquisition becomes significantly simpler after the heuristic isdeveloped.andP;  In fact, knowledge acquisition lends itself to an additionallevel of automationthe knowledge engineer need only specify (graphically) thesignal paths of the circuit; the minimal cost diagnostic tree is computedautomatically.andP;  The tree serves a skeleton of the troubleshooting knowledgebase; 80% of the rule base is precompiled using a combination of algorithmicand heuristic approaches.andP;  To complete the knowledge base you need onlypopulate the precompiled rule base with the proper measurement values sincethe best troubleshooting logic is already built into the tree.andP;  This approachintegrates both kinds of reasoning: generating possible causes for apparentsystem malfunction and selecting the least cost but most promising next test.andM;The user interface.andP;  When developing any kind of advisory interface, thedeveloper faces one of the most difficult dilemmashow to advise withoutoffending.andP;  Most people dislike accepting advice, but everyone enjoysdispensing it.andP;  Any expert system that disregards this basic fact of life isunlikely to succeed.andP;  This dilemma can be formulated as an apparentcontradiction-to be useful the interface must provide advice in auserfriendly manner; but to be friendly, it should not give advice.andP;  Inshort, give and do not give advice.andM;This contradiction is resolved by an absent agent: the advice is notvolunteered by the existing troubleshooting knowledge base.andP;  A successfuladvisory system may not guide the troubleshooting process in the classicmanner (questioning the user, chaining rules, and giving advice).andP;  Theinitiative in troubleshooting must rest with the user.andP;  A successful advisorysystem plays the role of a coach, unobtrusively monitoring the user'stroubleshooting activities, dispensing advice only when the user asks forthat advice explicitly.andM;This approach suggests a sensible architecture for a troubleshooting expertsystem, as shown in Figure 5.andP;  This architecture calls for two additionalknowledge bases-the user model and the tutorial base.andP;  I I The user model iscreated on-line during troubleshooting sessions; the precompiled tutorialbase consists of rules that dispense advice.andP;  User actions are monitored andcompared to the ideal troubleshooting scenario obtained from thetroubleshooting knowledge base.andP;  Advice is issued only when the comparisonresults in a significant discrepancy (the user deviates from the optimal tshooting procedure).andM;The intelligent user interface thus consists of a monitor to acquireknowledge about the user, a fault identifier to map from user actions todescriptions, and a proficiency table to map from user model to advice level.andO;The monitor presents the user with the top view of the circuit pack andaccepts the information about the troubleshooting session.andP;  This datacontains the location and results of the measurements.andM;The user-fault identifier matches this information to one of the diagnostictrees developed at the knowledge-acquisition stage.andP;  When a significantdiscrepancy is identified, the system offers the help to the user.andO;Troubleshooting errors can be divided into three groups: misunderstanding ofschematics, miscalculating the best troubleshooting strategy, andmisinterpreting the outcomes of the measurements.andP;  The schematics andmeasurement errors can be identified by comparing the true signal path withthe signal path abstracted from user-measurement sequence observations; thestrategy errors can be identified by comparing the measurement sequence withthe minimal diagnostic tree.(11)andM;SOME ADVANTAGESandM;Knowledge engineering is a process of invention-the engineer invents a way tomap expert knowledge into a knowledge-representation scheme.andP;  Systematicinvention, based on the principles of contradiction and minimality, differsfrom traditional invention by focusing a developer's mental efforts onproblem solution.andP;  The benefits are a reduction of fruitless search and anincrease in productivity and quality.andP;  In particular, the expert-systemprototyping cycle is significantly shortened.andM;We applied systematic invention methods to knowledge engineer a diagnosticexpert system for electronic circuit packs.andP;  We systematically invented theknowledge-representation scheme, the knowledge-acquisition method, and theuser interface.andP;  The knowledge-representation scheme integrates both logic ofthe system under test and its troubleshooting economics.andP;  A knowledge-baseskeleton is generated automatically, populated with the necessary data at alater stage, and translated to any delivery language.andP;  The user interfaceresolves the apparent contradiction of advisory systems-users need advice butdislike accepting it.andP;  With more than 10,000 rules, this system is a goodexample of what can be accomplished with systematic invention.andP;  moandM;REFERENCESandM;1.andP;  Polya, G.andP;  Patterns of Plausible Inference.&quot; Vol.andP;  II of Mathematics andPlausible Reasoning.andP;  Newark, N.J.: Princeton University Press, 1968.andM;2.andP;  Hadamard, J. Essai sur la Psychologie de l'Invention dans le DomaineMathematique.andP;  Paris, France: Librairie Scientifique Albert Blanchard, 1959.andM;3.andP;  Souriau, J. Psychologie de l'Invention.andP;  Paris, France: Paulhan, 1904.andM;4.andP;  Souriau, J. Theorie  de  l'Ivention.andP;  Paris, France: Paulhan, 1881.andM;5.andP;  Mobius, A. Die, Analage zur Mathematick.andP;  Leipzig, Germany, 1900.andM;6.andP;  Jackson, P., Reichgelt, H., and F. van Harmelen.andP;  Logic-Based KnowledgeRepresentation.andP;  Cambridge, Mass.: MIT Press, 1989.andM;7.andP;  Alsthuller, G.S.andP;  To Find an Idea: Introduction to Theory of Solving theProblems of Invention.andP;  Novosibirsk, U.S.S.R.: Nauka, 1986.andP;  (In Russian).andM;8.andP;  Lirov,  Y. &quot;STAREX-Simultaiieous  Test and Replace Circuit PackTroubleshooting Expert System Prototyping and Implementation.&quot; EngineeringApplications of AI 2 (Mar.andP;  1989): 3-18.andM;9.andP;  Lirov, Y., and O. Yue.andP;  &quot;Circuit Pack  Trouble-shooting via SemanticControl, Part I: Goal Selection.&quot; In Proceedings of IEEE AI IndustrialApplications Workshop, Hitachi, 1988.andM;10.andP;  Loveland, D. &quot;Introducing &quot;Treatments Into Test Procedures.&quot; InTransactions of the Fourth Army Conference on Applied Mathematics andComputing (1997): 731-738.andM;11.andP;  Lirov, Y., and S. Ravikumar.andP;  Intelligent Interaction in DiagnosticExpert Systems.&quot; Forthcoming in Y. Lirov (ed)., Applications of LogicProgramming in Decisions and  Control.andP;  London, U.K.: Pergamon Press, 1990.andM;The author is grateful to Philip Chapnick and Ben Melamed, who patiently readthe manuscript and made invaluable suggestions; Swaminathan Ravikumar for hisprogramming help in developing STAREX; and On-Ching Yue for his support andencouragement.andM;Yuval Lirov is a senior knowledge engineer at Bell Laboratories in Holmdel,N.J.andP;  A winner of the AIAA 187 Outstanding Achievement Award, Dr. Lirov hasauthored more than 40 technical publications.andP;  He develops troubleshootingand scheduling expert systems for telecommunications and manufacturingapplications.andO;</TEXT></DOC>