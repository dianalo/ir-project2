<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-449-846  </DOCNO><DOCID>07 449 846.andM;</DOCID><JOURNAL>UNIX Review  July 1989 v7 n7 p38(8)* Full Text COPYRIGHT Review Publications Co. 1989.andM;</JOURNAL><TITLE>Software manufacturing.andO;</TITLE><AUTHOR>Bernstein, Lawrence; Yuhas, Christine M.andM;</AUTHOR><SUMMARY>Software manufacturing is a systematic approach to buildingsystems, producing manuals, precisely identifying systemconfigurations, controlling changes, and packaging software fordelivery.andP;  The UNIX environment facilitates softwaremanufacturing, and therefore relieves developers of manyburdensome tasks.andP;  The manufacturing process is expedited by suchsoftware tools as the Korn shell command language, the awkprogramming language, using UUCP and DKHOST file transfercapabilities, and using hierarchical file structure.andP;  Benefits ofinstituting a software manufacturing group include imposition ofcontrols from a single point, provision of a checkpoint foridentifying product deviations, protection of the productionsystem, and elimination of the 'indispensable developer' syndrome.andM;</SUMMARY><DESCRIPT>Topic:     SoftwareManufacturingManagement of EDPSystem DevelopmentProductivityQuality Control.andO;Feature:   illustrationcartoonchart.andO;Caption:   An illustration of the software manufacturing process. (chart)(Example of a 'software factory'). (chart)andM;</DESCRIPT><TEXT>In the business of programming, individual creative effort must bedisciplined and organized.andP;  There needs to be a systematic approach tobuilding systems, and if uniformly fine products are to go out Me door withregularity software must be produced by an industrial manufacturing process.andM;A very clever friend left ATandamp;T Bell Laboratories one day and struck out forCalifornia, in the best pioneer spirit, to build his own software companythere.andP;  Ingenious and hard-working, he soon impressed one company enough thatit agreed to buy his software package.andP;  He subsequently sold another, alongwith a few changes, to a second company.andP;  Then came a third and a fourth.andO;Suddenly, it occurred to him that he'd lost track of exactly what was inpackages 1 and 2 and which fixes had been sent to which clients.andP;  If orderwasn't imposed quickly, he realized, he'd soon find himself back in NewJersey.andM;Our entrepreneurial friend recovered his composure when he came to realizethat, in the business of programming, individual creative effort must bedisciplined and organized.andP;  Software must be produced by an industrialmanufacturing process if uniformly fine products are to go out the door withregularity.andP;  Our intelligent friend-even though he had grown upprofessionally at Bell Labs, an environment famous for consistent quality-hadnot come to recognize the need for software manufacturing until hisexperience in a start-up enterprise.andM;This story is not about just one entrepreneur, however.andP;  The entire computingindustry behaves this way.andP;  It's a strange phenomenon in a country thatinvented the assembly line.andP;  Pressed for time, people take shortcuts andmortgage the future of projects because they view the manufacturing processas expendable overhead.andP;  They inevitably lose track of their project'sprogress, get annoyed with their co-workers and communicate with them lessthan they should, forget where their source code is, change job assignments,or leave for a position at another company.andP;  In their wake they leave aterrible, unmanageable mess that, despite the promise it showed at itsoutset, cannot now be fixed, enhanced, or even reproduced.andM;Describing software manufacturing is easy because the concept is simple andlogical.andP;  It is a systematic approach to building systems, producing usermanuals and other deliverable documents, identifying the system configurationexactly, controlling changes, and packaging software for delivery.andP;  Themanufacturing process begins the moment a developer surrenders a completedfunctional unit.andM;&quot;Surrender&quot; is the sticking point.andP;  Cartoonist Dik Browne's character Hagarthe Horrible is a model for the ultimate software manufacturing chief, whocatches the brunt of every developer's feelings about handing over creativework to those in charge of a software manufacturing group (see Figure 1).andO;Only by relinquishing personal control over the deliverable product, however,can individual developers guarantee the integrity of the project they areworking on.andM;Whether UNIX or another support system is used, the process begins when theindividual developer delivers the following to aandM;software manufacturing group:andM;* a fully functional and unit-tested process or library;andM;* a set of test scripts, drivers, and data to perform the unit test;andM;* a makefile that automatically builds, tests, and produces documentation forthe unit;andM;* all the source code necessary to construct the unit, tests, and makefile;andM;* an exact specification of the source in the form of an slist (a formalspecification of the release which cites the exact version of the source codenecessary to construct the units included in the release);andM;* initial user documentation.andM;This is the magic moment when change control kicks in and individual freedombecomes taboo.andP;  Some software units depend on others, so the integration of agiven new unit into the total release must follow a plan.andP;  At this point, thesoftware manufacturing group has already established an integration plan,using dependency information contained in the system design to decide on theorder in which individual units will be integrated.andM;First come common header files, libraries, and operating systems; second,control layer processes, internal communication, database processes, andbasic operations; and third, applications.andP;  The manufacturing staff will havebeen gathering schedule commitments from developers and putting thefoundations of the system in place.andP;  So, when the developer changes thestatus of the tracking change request on the functional unit to &quot;sourcedelivered&quot;, the software manufacturing group copies it into its work spaceand does a series of consistency checks and tests.andP;  If all goes well, theunit is then installed in the release, the slist label is added to the masterslist, and the tracking change request is closed.andM;When there is trouble, the change request status is MUD (ModuleUnsuccessfully Delivered) and the unit is reassigned to the developer.andP;  Aunit that is delivered successfully becomes untouchable.andP;  The softwaremanufacturing group can construct various release versions in terms of theconfiguration items which each is to contain.andP;  Releases have their own lifecycles.andP;  As changes accumulate, revised releases, incorporating fixesapproved by the test groups, can be regenerated.andP;  The release might becontained on a magnetic tape or on special disk files, and be maintainedon-line for development and testing as well.andP;  The slist, programs, userdocumentation, and database descriptions comprise the deliverable software.andO;The process is summarized in the illustration of the software factory shownin Figures 2 and 3.andM;When a system is new, software configurations grow very fast.andP;  Integrationfailure reports and the changes that result from them grow too.andP;  Without goodconfiguration management, and unless baseline versions are clearlyidentified, the software manufacturing group soon finds itself in Hagar'spredicament (see Figure 4).andP;  Configuration management is really a subset ofthe software manufacturing group's job, which is to capture and label everybit of code, data, and documentation relating to the system.andM;What kind of people go into software manufacturing? People involved in&quot;release engineering&quot; are not directly concerned with the day-to-day work ofbuilding a specific system.andP;  They concentrate on designing tools to improvethe manufacturing process and work on engineering the flow of that process.andO;They are the industrial engineers of the software  business.andM;The process of building and controlling software for a specific systemdemands a technician with some software training.andP;  Skills in controllanguages, database control, and machine scheduling are necessary.andP;  Volumeproduction and quality control demand an assemblyline, product-oriented frameof reference, with emphasis on adherence to procedures and inventory control.andO;Once release engineers have established routine tasks, those tasks can bedone by production staff who have only a rudimentary knowledge of dataprocessing, but a great capacity for attention to detail.andM;Part of the problem with software manufacturing is that much of the criticalwork is tedious and time-consuming.andP;  Like Hagar, all of us would much preferto avoid certain unpleasant necessities (see Figure 5).andP;  Fortunately, UNIX isequipped with a rich and powerful array of tools that can handle much of theprocess.andP;  It provides the kind of flexible environment, independent ofhardware, that is vital to the process of integrating, testing, anddelivering software.andM;Hardware independence, coup led with the existence of a softwaremanufacturing group, turns what is usually referred to (with great solemnity)as &quot;the problem of heterogeneous systems&quot; into a distinctly advantageoussituation.andP;  The manufacturing group becomes a single collection point for allthe software and, in a UNIX environment, it is easy to control the sourcecode for the various environments.andP;  A utility generates tapes that can bewritten from and read into any UNIX-based system.andP;  This makes it possible touse different processors in development and integration machines while stillusing the same installation scripts.andM;The compatibility of the interfaces involved is managed by the softwaremanufacturing staff, which has the specifications needed, as well as theinterface code generators.andP;  The manufacturing cycle is best done on themachine on which the software has been developed, not the target machine onwhich it will be executed.andP;  Developers move with virtually no new trainingfrom the tools they use for design to those needed to interface with themanufacturinggroup.andP;  The software manufacturing staff performs a service forthe developers by operating and maintaining their development machine.andP;  Thiscreates a certain amount of mutual respect, which is crucial if thedevelopers are to accept the manufacturing group as a intermediary workingbetween them and their customers.andM;Whether or not the development machine and the target machine share the samephysical hardware, the operating system used for development work is usuallydifferent from the one that will be used for the execution of the softwareproduct.andP;  The development machine should be optimized for maximum developmentproductivity and software manufacturing.andP;  The target machine should beoptimized for executing the product.andM;Developers may not yet fully realize the weight of the burden that a softwaremanufacturing group in a UNIX environment can lift from their shoulders, inporting both operating systems and application programs.andP;  No longer dodevelopers need to deal with generating code for a test or target machine,with code loading, or with system initialization.andP;  The manufacturing staff,with a controlled base, can cross-compile and objectively compare the resultswith the original.andP;  In addition, the software manufacturing group is inpossession of an orderly collection of all viable software, something no onedeveloper or development group within a project can claim.andP;  Using this data,it can track development for several machines simultaneous Iy and, withinitialization files clearly separated, the configuration of an applicationfor new hardware is an easy job.andP;  The ease with which the UNIX operatingsystem itself can be reconfigured leads us to accept a kind of disciplinedprocedure that makes porting relatively painless, since a standard operatingenvironment, with its interfaces and libraries, is carefully  defined.andM;These specific software tools expedite the manufacturing process:andM;*The Korn shell command language is used extensively in developing scriptsand tools for generating, installing, and managing product releases.andP;  Inparticular, the shell environment variables and functions provide tailoringcapabilities for installations that support multiple systems on a singleprocessor, and for the use of the same installation script on both a livemachine and its backup processor.andM;* Shell environment variables also support elegant runtime tracingcapabilities, without requiring recompiles or the use of system resourceswhen the tracing is not needed.andM;* The awk programming language for computing and data-manipulation tasks isused in some software manufacturing tools for release engineering, forgenerating reports used in coordinating development activities, and formanipulating database dump files.andM;* Using UUCP or DKHOST as file transfer capabilities streamlines the deliveryof emergency fixes to laboratory or field machines.andP;  Us ing them can alsostreamline normal software deliveries from development to integration, andfrom integration to system test.andM;* The hierarchical file structure allows simple decomposition of softwareloads and modules, which greatly assists in managing the various softwareloads in a product's life cycle.andM;* With ASCII interfaces in a product, flexibility in testing is increasedgreatly.andM;* The ease with which the flexible UNIX operating system kernel can bereconfigured allows tailoring and enhancement of code as the needs of aparticular product evolve.andP;  The possibility of having several kernel files ona given processor and being able to boot from any one opens up manyalternatives for integration and system -testing activities.andM;The plan for the division of responsibilities outlined here puts certaindecisions squarely where they belong.andP;  The customer, not the developer,chooses the target machine.andP;  The customer and the hardware provider rate theapplication's performance on the target machine.andP;  The air of mysterysurrounding the product dissipates, and customer satisfaction increasessignificantly.andM;Philosophical acceptance of a mode of operation has to be balanced bypractical considerations, of course.andP;  Even a Viking has to plan his pillaging(see Figure 6).andP;  Setting up a software manufacturing operation requires aminimum starting environment and a project of great enough scale to make thesystem economically feasible.andP;  To judge whether a project would benefit fromthis scheme, the following questions should be answered:andM;* Is the project or group of projects large enough to require the fullattention of one second-level project manager-that is, are thereapproximately 25 designers and programmers?andM;* Will future enhancements to the software be made by building on theestablished, working base?andM;* Will the product be delivered to one or more sites distant from thedevelopment site, but be maintained from the development site?andM;*Will the customer's employees bear the primary responsibility in running andmaintaining the system?andM;If the answer to each of these questions is &quot;yes&quot;, there is probablysufficient work to constitute a full-time job for at least one softwaremanufacturer.andM;The reliability and integrity of system processes is a continuing, validconcern.andP;  Any organizational structure that mitigates adverse conditionsinhibiting the orderly development and design of controls deserves attention.andO;Such adverse conditions might be the lack of awareness of potential problemareas in operations and field arenas, inadequate testing of controls builtinto the system, and poor documentation.andM;In his book Current Practices in Software Development (yourdon Press, 1984),David King writes: &quot;If the boundaries between the test systems and the liveproduction versions are not closely controlled, the very characteristics thatmake the systems easy to maintain and enhance can also provide the carelessand the unscrupulous with easy, unauthorized access to sensitive data andclassified procedures.&quot;andM;Even beyond the confines of the EDP community there is concern for thesecurity of systems and personal data.andP;  The Foreign Corrupt Practices Act of1977 mandates that companies maintain a system of internal accounting controlsufficient to provide reasonable assurance that specified goals are beingmet.andP;  The Securities and Exchange Commission Release of April 30, 1979,requires that companies include representations by management as to theirsystem of internal control in the annual reports they issue to shareholders.andO;And, finally, the Federal Computer Systems Protection Bill of 1982 definescomputer crime, codifies it into statute form, and defines penalties.andM;The main benefits of instituting a software manufacturing group are:andM;* it establishes a single point at which controls can be imposed in thedevelopment process;andM;* it provides a checkpoint for identifying and tracking product deviations;andM;* it frees developers ftom production problems, clerical work, and the needfor detailed knowledge of production environments;andM;* most importantly, it protects the production system.andM;In addition, coordination and communication through the organizationcounters, to some degree, the &quot;indispensable developer&quot; syndrome.andP;  Many ofthe problems caused by the departure of a development team member during themanufacturing process are eliminated because all team members must work tosimilar standards, and finished work is turned over to a central control inan orderly way.andP;  Time lost in looking for the &quot;good&quot; version is reduced, asis the number of errors caused by working with obsolete versions.andM;Manufacturing tools allow routine checks for consistency and sanity in thefinal product, including enforced documentation standards.andM;The existence of a software manufacturing group frees design supervisors-perhaps the most critical resource in any software project-from the headachesassociated with the production process.andP;  Production managers with a goodunderstanding of how software is produced, but not necessarily a detailedunderstanding of how software is designed, have been used successfully inthis area.andP;  Software manufacturing provides job opportunities for techniciansand production-level people, giving growth paths to people now calledlibrarians, clerks, software secretaries, or computer operators.andP;  Inaddition, using people with appropriate skills to do manufacturing work meansit can be accomplished more efficiently, at a lower cost.andM;Software manufacturing also permits &quot;management by exception&quot;.andP;  Themanufacturing group keeps track of the development process and identifieswhere things are going astray.andP;  By enforcing project standards and ensuringthat standards are carried across projects, several projects can use onesoftware manufacturing entity.andM;For all these reasons, software manufacturing is a vital function that letssoftware production evolve beyond the cottage-industry model into a formalindustrial process.andM;A 28-year veteran of ATandamp;T Bell Laboratories, Lawrence Bernstein is nowexecutive director of its Network Management Division, where he isresponsible for performance analysis, systems engineering, and thedevelopment of software systems used to improve business operations in thetelecommunications and medical industries.andP;  Bernstein is an IEEE Fellow whoholds patents for software and logic design.andM;Christine M.andP;  Yuhas worked in personnel subsystems development at BellLaboratories for several years.andP;  Now a free-lance writer, she is a graduateof Douglas College and holds a master's degree in communications from NewYork University.andM;BibliographyandM;A.V Aho, B.W Kernighan, and P.J.andP;  Weinberger, The AWK Programming Language,AddisonWesley (1988).andM;M.I.andP;  Bolsky, and D.G.andP;  Korn, The Korn Shell Command and ProgrammingLanguage, Prentice-Hall (1989).andM;H.andP;  Bratman and T Court, &quot;The Software Factory&quot;, IEEE Computer, Vol.andP;  8, No.andO;5, pp.andP;  28-37 (May 1975).andM;B.W.andP;  Kernighan, and R.andP;  Pike, The UNIX Programming Environment,Prentice-Hall (1984).andP;  David King, Current Practices in Software Development,Yourdon Press (1984).andM;D.M.andP;  Ritchie and K.andP;  Thompson, &quot;The UNIX Time-Sharing System&quot;,Communications of the ACM, Vol.andP;  17, No.andP;  7, pp.andP;  365-375 (July 1974).andP;  A.S.andO;Wiliams, &quot;Software Engineering: Tools of the Profession&quot;, Naval PostgraduateSchool, Monterey, CA, ADA028868 (September 1976).andP;  AcknowledgementandM;Thanks to D.andP;  McLean Goetjen for contributing specific experiences showingthe importance of software manufacturing.andO;</TEXT></DOC>