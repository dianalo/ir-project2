<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-605-609  </DOCNO><DOCID>09 605 609.andM;</DOCID><JOURNAL>UNIX Review  Nov 1990 v8 n11 p16(3)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Open systems - evolution or revolution? (Standards Report)(column)</TITLE><AUTHOR>McCarron, Shane.andM;</AUTHOR><SUMMARY>The concept of open systems, originally adapted by small systemvendors that wanted software support for their products, hasgained industry acceptance.andP;  The key components of open systemsare interoperability and portability.andP;  Small vendors believed thatif their systems could communicate and their programminginterfaces were compatible, their combined market share wouldattract third-party software developers.andP;  Software development foropen systems is starting to perk up as the market moves away fromproprietary systems.andP;  As industry standard organizations aredefining specifications for open systems platforms, vendors canfocus their resources in making the best implementation of thesespecifications, as well as do innovative research in those areasnot yet fully addressed.andP;  End users will be able to chooseproducts based on quality once open systems standards findwidespread use.andM;</SUMMARY><DESCRIPT>Topic:     Compatible SoftwareOpen SystemsMarketing StrategyInteroperabilityUser InterfaceStandardizationSoftware MigrationHardware Vendors.andM;</DESCRIPT><TEXT>OPEN SYSTEMS--EVOLUTION OR REVOLUTION?andM;The entire concept of information-systems standards has undergone atremendous evolutionary change in the past several years.andP;  This change incomputing philosphy, now known as open systems, is perhaps the most importantnon-technological advance in computing history.andP;  This month I will try toeliminate the mysticism surrounding open systems by defining in terms thatmost people cannot just understand, but believe.andM;Let's start from basics.andP;  The open-systems industry grew up out of the desireamong smaller system vendors to attract independent software developers.andO;They recognized that in a world of proprietary systems they could not competeeffectively.andP;  There is only so much application-development talent to goaround, and the larger vendors that controlled the majority of theinformation systems market were going to get most of that talent.andP;  Further,once this rare talent had been applied to a given proprietary platform, itwas likely to stay there.andP;  The learning curve associated with moving from onecomplex, monolithic system to another is so steep that it was not costeffective for most applications developers to move away from their originalplatform of choice.andM;The big advance occured when several of these smaller system vendors realizedthat in many cases their systems could be viewed as complementary to othermanufacturer's systems.andP;  If their systems could all talk to one another(interoperability), and if the programming interfaces supported were the same(portability), then their combined market share might just be enough toattract the elusive third-party software-development talent.andM;Several years ago system vendors from different parts of the world begancollaborating in these areas.andP;  In the case of portability, some of thesmaller system vendors, along with some large proprietary system vendors,defined interfaces that they agreed to provide in their implementations.andO;They did this through /usr/group (now UniForum) and the 1984 /usr/groupStandard.andP;  Fortunately, this set of programmatic interfaces and commands,based on traditional UNIX facilities, was eventually used as the basedocument for IEEE's project 1003.1--POSIX.andP;  The work done within this andother related IEEE and ANSI projects set the foundation for open systems asit relates to portable application development.andM;Application portability is only as useful as the systems that support it, andonly then if those systems can interoperate.andP;  In a multivendor environment,interoperability is a commitment that, if systems support commonly agreedupon communication mechanisms, applications can communicate with one anotherand systems can share resources in ways that applications may rely upon.andP;  Twosets of work allowed this communication on to occur in reasonably consistentways.andM;The US Department of Defense, through its Advanced Research Projects Agency,largely funded the work that went into defining TCP/IP and other protocolsthat rely upon it.andP;  In addition, the International Standards Organizationauthorized projects for a set of communication protocols known as OpenSystems Interconnect (OSI).andP;  This work, parent of the now famous seven-layermodel, laid the groundwork for pervasive communications in heterogeneousenvironments.andP;  While TCP/IP has been very important in the past severalyears, many people believe that its importance is decreasing as OSIimplementations become available.andP;  Regardless of the outcome, these twocollections of communication tools brough the dream of portability andinteroperability closer to reality.andM;Interoperability and portability are two essential components of opensystems, but what is open systems itself?andP;  It is different things todifferent groups of people.andP;  Philosophically, it is the ability of a group ofindividuals with different agendas to agree that by providing a solid basefor application development they can attract more applications developers andthereby create a more lucrative market for themselves and their competitors.andO;Those system vendors know that they are helping their competition, but theyassume that they are helping themselves just as much.andP;  Moreover, they knowthat they are hurting those competitors who ignore the force that is opensystems.andM;Unfortunately, you can't eat philosophy.andP;  From a more pragmatic perspective,small system vendors continue to view open systems as a way for them topenetrate markets without having to specifically attract applicationdevelopers.andP;  An unexpected benefit of open systems is that the marketplace isdemanding open systems platforms before the software base is really there,thereby proving that the vision of a few system vendors advocating opensystems several years ago was the correct course for the industry.andP;  Moreimportant that this moral victory, open systems has allowed those systemvendors to sell more systems into more diverse markets.andP;  The promise of highlevels of portability and interoperability guaranteed by open systemsstandards has, for them, come true.andM;To marketing/sales people the term open systems is often a tool that is usedto persuade potential customers.andP;  As a customer you have probably been told&quot;we support open systems&quot; more than once by some over-eager salesrepresentative.andP;  It might have been what you wanted to hear.andP;  It may haveeven been true.andP;  Regardless of its veracity, use of the term has caused it tofall to the level of that other time-proven marketing lure--SALE.andO;Unfortunately, it may have that same lack of meaning to the sales people.andM;Most major proprietary system vendors originally viewed open systems as anaberration.andP;  Now, as end users become open systems oriented, the movement hasbecome a force that they have decided to support, succumb to, or control.andO;Fortunately, the standardization process is such that it is difficult tocontrol without that control becoming really obvious.andP;  This trait has servedas a deterrent the few times that vendors have attempted to control.andP;  Todayyou will find that the former large proprietary system vendors are fair andenergetic participants in the open systems process.andP;  Further, they have forthe most part committed to delivering open systems platforms at the cost oftheir proprietary systems.andM;Application developers are slowly coming around to open systems.andP;  There is aclassic &quot;chicken and egg&quot; problem in that developers don't want to writesoftware for platforms that are not selling well, and those platforms willnot sell well without software.andP;  In the past, many larger software developershad profited from the division in the industry.andP;  System vendors would paythem significant amounts to port successful software to a new platform.andP;  Asplatforms become widely available those who profited from the lack ofcompatibility are losing that income source.andM;This loss of porting income can obviously be balanced against the benefit ofhaving a source code that works on a broad set of systems.andP;  IN this case, themore philosophically right course seems to be winning--more highly portableapplications are being developed.andP;  This application base is finally reachingthe critical mass needed to sustain the marketplace.andM;Then there are the end users (have you ever noticed that there is only oneother industry that calls its customers users).andP;  When I got involved in opensystems, I was an end user.andP;  I, likely many end-users, foolishly believed themarketing hype that open systems would solve all of my problems.andO;Unfortunately, many end users are realizing that open systems means that thebuyers of computer systems have to work harder.andM;In the bad old days, purchasing agents would call up their favorite vendorand say &quot;I need a machine for foo.&quot;andP;  In most cases they wouldn't get exactlywhat they wanted, but they got it from a single vendor, and it was goodenough.andP;  With open systems, purchasing agents should look at a whole range ofsystems from a myriad of vendors and decide which has the most bang for thebuck.andP;  A frequently heard complaint is &quot;there are too many choices.andP;  Whatshould I buy?&quot;andP;  This was an unfortunate, and largely unexpected result ofopen systems.andM;Recently groups of end users have banded together to try and combat the factthat they have too many choices.andP;  I cannot predict whether those groups willsucceed in limiting the market's choices.andM;Finally, there are the actual developers of open systems platforms.andP;  To thesepeople open systems is a luxury and a burden.andP;  It is a burden because,regardless of what a software vendor does to their system, they must continueto support the agreed upon interfaces and communication protocols.andP;  In thisway they preserve that hard-won base of applications that brought them tothis point.andP;  The promise vendors have made to the application developers andusers is that these interfaces and protocols will be supported, effectivelyforever.andM;However, the basic system interfaces and protocols, as identified by severalindustry standards organizations, are already largely implemented.andP;  Thismeans that the vendors now have the luxury of concentrating their efforts onnew open system technologies and their own added value.andP;  The major industrystandards organizations have outlined the areas in which they are going towork, and have created specifications for those areas.andP;  By examining theseareas, vendors can identify those areas not being addressed.andP;  These are theareas in which system vendors can safely conduct innovative research and addvalue to their systems.andM;In addition, as industry standards organizations develop specifications foradditional interfaces or protocols, system vendors can apply their resourcesto making the best implementation of those new specifications.andP;  The systemvendors will compete with one another not on the feature content of theseimplementations, but rather on their quality.andP;  By the time a feature becomescommon place, the market will probably have identified the one or twoimplementations that are of high quality.andP;  Those will remain available as theother system vendors move on to new areas of competition.andM;Will open systems continue to be an important part of the industry?andO;Probably, but only if the application base continues to grow and the majorsystem vendors continue in their commitment to it.andP;  The diversity representedby open systems is much in line with the free market ideals that are so oftentaught in school, at least in this country.andP;  I believe that if we continue toidentify areas that are essential to the development of portable andinteroperable applications, and continue to keep the market open forcompetition in those areas that are the cutting edge, then what was oncethought of as a revolution by small system vendors will be the logicalevolution of computing technology into the forseeable future.andM;Shane McCarron is a Project Manager with UNIX International.andP;  In his rolethere as standards czar he continues to pursue the ever elusive perfectspecification.andP;  He can be reached via e-mail at ahby@bungia.mn.org.andO;</TEXT></DOC>