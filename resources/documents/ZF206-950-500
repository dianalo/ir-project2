<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF206-950-500  </DOCNO><DOCID>06 950 500.andM;</DOCID><JOURNAL>PC Week  Jan 16 1989 v6 n2 p46(1)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>Diagramming methods bring precision to CASE tools. (computer-aidedsoftware engineering) (Applied Intelligence) (Part 2) (column)</TITLE><AUTHOR>Martin, James.andM;</AUTHOR><SUMMARY>CASE (computer-aided software engineering) brings a method todiagramming that enforces precision.andP;  Good CASE tools use diagramtypes that are precise and computer-checkable.andP;  Diagram types thatare used include decomposition diagrams, dependency diagrams,data-flow diagrams, action diagrams, data-analysis diagrams,data-structure diagrams, entity-relationship diagrams,data-navigation diagrams, decision trees and tables,state-transition diagrams and dialogue-design diagrams.andP;  CASEtools use a subset of these types: chief data-flow diagrams,decomposition diagrams and entity-relationship diagrams.andO;Diagramming is 'a language, essential both for clear thinking andfor human communication.' With a computer, representations can belinked, generating 'hyperdiagrams.' CASE enforces consistencywithin such a structure, representing a major advance in analysisand design.andM;</SUMMARY><DESCRIPT>Topic:     Computer-aided software engineeringProgrammingApplications ProgrammingDiagrams.andO;Feature:   illustrationchart.andO;Caption:   Hyperdiagram. (chart)andM;</DESCRIPT><TEXT>In this, the second of a six-part series on integrated computer-aidedsoftware engineering, or I-CASE, technology, James Martin discusses the CASEtool function of converting diagram specifications directly into operationalcode.andM;The evolution of diagramming has picked up staggering speed in the last fewyears.andP;  Not long ago, systems analysts drew their diagrams with pencils anderasers.andM;Hand-drawn diagrams often grew very large, straggling across white boards orpasted onto large sheets of paper.andP;  And a design frequently consisted ofmultiple binders of nested data-flow diagrams and structure charts.andP;  Thesebinders were usually fraught with inconsistencies and omissions.andP;  What'smore, the diagrams were sloppy and the diagramming technique ill-conceived.andM;CASE tools bring to diagramming a method for enforced precision.andP;  A good CASEtool uses diagram types that are precise and computer-checkable.andM;Among the diagram types used by CASE tools implementing aninformation-engineering methodology are decomposition diagrams, dependencydiagrams, data-flow diagrams, action diagrams (for specification ofprocedures), data-analysis diagrams, data-structure diagrams,entity-relationship diagrams, data-navigation diagrams, decision trees andtables, state-transition diagrams and dialogue-design diagrams.andM;CASE tools that support a software-engineering methodology use a subset ofthese diagram types: chief data-flow diagrams, decomposition diagrams andentity-relationship diagrams.andM;Large, complex diagrams can be handled by means of zooming, nesting andwindowing, among other techniques.andP;  The computer quickly catches errors andinconsistencies even in very large sets of diagrams.andM;Today, business, government and the military need highly complex andintegrated computer applications.andP;  The size and complexity of theseapplications are too great for any hope of accuracy in diagramming withoutaid of a computer.andM;Remember, it's the meaning represented by the diagram that's valuable.andP;  Agood CASE tool stores the meaning of the diagram, not the diagram itself, ina computer-processible form.andP;  The tool helps build up a design, a data modelor another deliverable segment of the development process in such a way thatit can be validated and then used in a later development stage.andM;Diagrams and their manipulation by computer are forms of thought processing.andO;The analyst, designer, programmer, user and executive need a family ofdiagram types to assist in clear thinking.andP;  Although there are a host ofdiagram types, a minimum number of icons should have to be learned, and theirmeanings should be as obvious as possible.andM;The diagrams must be sufficiently complete and rigorous to serve as a basisfor code generation and for automatic conversion of one type of diagram intoanother.andM;The diagrams of the early ''structured revolution'' aren't good enough forthis.andP;  In this earlier technology, the analyst and designer had to use humanintelligence to bridge gaps between one type of diagram and another, and theyoften made mistakes in doing so.andP;  I-CASE tools need a complete, rigorous setof diagramming standards.andM;With appropriate diagramming techniques, it's much easier to describe complexactivities and procedures in diagrams than in text.andP;  A picture can be worthmuch more than a thousand words.andP;  Computerized diagrams do not allow thesloppiness and woolly thinking common in textual specifications.andM;Engineers of all types use formal diagrams that are precise in meaning --mechanical drawings, architects' drawings, circuit diagrams, microelectronicsdesigns, and so on.andP;  Software engineering and information engineering alsoneed formal diagrams with standardized diagramming constructs.andM;As in other branches of engineering, the diagrams used by integrated CASEproducts become the documentation for systems (along with the additionalinformation collected in a centralized encyclopedia when the diagrams aredrawn).andP;  When changes are made to systems, the diagrams are changed on thescreen, and the code is regenerated.andP;  The design documentation is generatedautomatically and thus does not slip out of date as changes are  made.andM;Philosophers have often said that what we are capable of thinking depends onthe language we use for thinking.andP;  The diagrams we draw of complex processesare a form of language.andP;  With computers, we may want to create processes morecomplex than those we would perform manually.andP;  Appropriate diagrams help usto visualize and invent those processes.andM;For someone developing a system design or program, the diagrams used are aidsto clear ideas.andP;  A poor choice of diagramming technique can inhibit thinking.andO;A good choice can speed work and improve the quality of the results.andM;When several people work on a system or program, the diagrams serve as anessential communication tool.andP;  A formal diagramming technique is needed toenable the developers to interchange ideas and make their separate componentsfit together with precision.andM;When systems are modified, clear diagrams are an essential aid tomaintenance.andP;  They make it possible for a new team to understand how theprogram works and then to design changes.andP;  When a change is made, it oftenaffects other parts of the program.andM;Clear diagrams of the program structure enable maintenance programmers tounderstand the consequences of the changes they make.andP;  When debugging, cleardiagrams are also highly valuable tools for understanding how the programsought to work and for tracking down what might be wrong.andM;Diagramming, then, is a language, essential both for clear thinking and forhuman communication.andP;  An enterprise needs standards for itsinformation-systems diagrams, just as it has standards for engineeringdrawings.andP;  A diagram and its associated information in a CASE tool can bevery different from a diagram on paper.andP;  Paper constrains the diagram to twodimensions.andM;With a computer, many different representations of the design can be linkedtogether logically.andP;  For example, the same block may appear on both adata-flow diagram and a decomposition diagram.andP;  Data access on an actiondiagram must relate to information specified on an entity-relationshipdiagram or in a data model.andP;  The inputs and outputs to a procedurerepresented by an action must be the same as those on the correspondingdata-flow diagram.andM;Linking Diagrams TogetherandM;The terms ''hyperdiagram'' or ''hyperchart'' describe a representation ofplans, models or designs in which many two-dimensional representations arelogically linked together.andP;  A simple hyperdiagram is a diagram in which thedetails of objects may be displayed in windows.andP;  A more complex hyperdiagramuses many types of two-dimensional diagrams.andP;  A block or a line may bedisplayed in a window as text, as a fill-in-the-blanks form, an actiondiagram, a matrix or a different type of diagram.andM;The figure shows a family of screen windows that are part of onehyperdiagram.andP;  The hyperdiagram can be explored by pointing to objects orassociations and displaying details of them.andP;  An I-CASE tool kit gives theimplementor the facilities to explore or to build the hyperdiagram.andP;  The toolshould enforce consistency within the hyperdiagram.andM;The set of screens in the figure illustrates how diagrams are linked to formhyperdiagrams.andP;  Each screen is part of a logically consistent structure.andO;Because the hyperdiagram contains links between different types ofrepresentations and enforces consistency among these representations, it's amajor advance over paper-oriented methods of analysis and design.andM;Next week, I'll discuss the very heart of an I-CASE tool: an encyclopedia orrepository.andM;----------The James Martin Productivity Series, an information service updatedquarterly, is available through High Productivity Software Inc., ofMarblehead, Mass.andP;  (800) 242-1240.andP;  For information on seminars, contactTechnology Transfer Institute, 741 10th St., Santa Monica, Calif.andP;  90402(213) 394-8305.andP;  In Europe, contact Savant, 2 New St., Carnforth, Lancs., LA59BX United Kingdom (0524) 734 505.andO;</TEXT></DOC>