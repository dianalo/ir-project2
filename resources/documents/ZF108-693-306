<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-693-306  </DOCNO><DOCID>08 693 306.andM;</DOCID><JOURNAL>IBM Systems Journal  June 1990 v29 n2 p189(20)* Full Text COPYRIGHT International Business Machines Corp. 1990.andM;</JOURNAL><TITLE>The role of work management in application development.andO;</TITLE><AUTHOR>Chroust, G.; Goldmann, H.; Gschwandtner, O.andM;</AUTHOR><SUMMARY>Quality is probably one of the most serious concerns of today'ssoftware community.andP;  For software applications exhibiting acertain complexity, the quality of a product can only beguaranteed by a methodological approach, using appropriateadministration and tools.andP;  The methodology and administration mustbe manifested in a well-defined and well-observed applicationdevelopment process.andP;  The process must integrate the humanactivity, the tools, and the intermediate and final work productsinto a coherent flow of actions.andP;  In this regard, the developmentof applications follows patterns that are well established inother industries where an application development (AD) processmodel is defined and then executed via an interpretationmechanism.andP;  The complexity of the development process makes itnecessary to support and integrate all of its aspects by means ofon-line interactive computer support.andP;  Computer-aided processsupport in the general sense we call work management.andP;  This paperexplains the concepts of an application development process modeland of work management for application development under AD/Cycleand its relation to project management.andP;  (Reprinted by permissionof the publisher.)andM;</SUMMARY><DESCRIPT>Company:   International Business Machines Corp. (products).andO;Ticker:    IBM.andO;Product:   AD/Cycle (CASE software) (usage).andO;Topic:     Applications ProgrammingProject ManagementSoftware QualityModels.andO;Feature:   illustrationchart.andO;Caption:   Abstracting an application development process model. (chart)Components of an application development project. (chart)Cooperative application development work management. (chart)andM;</DESCRIPT><TEXT>The role of work management in application development Quality is probablyone of the most serious concerns of today's software community.andP;  For softwareapplications exhibiting a certain complexity, the quality of a product canonly be guaranteed by a methodological approach, using appropriateadministration and tools.andP;  The methodology and administration must bemanifested in a well-defined and well-observed application developmentprocess.andP;  The process must integrate the human activity, the tools, and theintermediate and final work products into a coherent flow of actions.andP;  Inthis regard, the development of applications follows patterns that are wellestablished in other industries where an application development (AD) processmodel is defined and then executed via an interpretation mechanisms.andP;  Thecomplexity of the development process makes it necessary to support andintegrate all of its aspects by means of on-line interactive computersupport.andP;  Computer-aided process support in the general sense we call workmanagement.andP;  This paper explains the concepts of an application developmentprocess model and of work management for application development underAD/Cycle [TM] and its relation to project management.andM;The concept of an application development process interrelates cost,timeliness, and quality--three closely interleaved problems [1,2] that haunttoday's software industry.andP;  Quality affects the other two problems.andO;Inadequate quality results in excessive testing, rework, and maintenancewhich in turn influence delivery dates and productivity, and threfore cost.andO;Thus the issue of software quality seems central to the progress of thesoftware industry.andP;  This paper discusses the concept of an applicationdevelopment process model and of work management for application developmentunder AD/Cycle[TM].andM;Application development processandM;The concept.andP;  Most quality-related attributes [3,4] cannot be adequatelymeasured and are difficult to predict.andP;  Even if a measurable value is foundto be low, there is usually no easy way to improve it in a finished product,because one cannot inject quality into a product.andP;  This means that concernsabout the quality of a software product must be addressed during itscreation.andP;  In order to ensure a consistently high level of quality in asoftware product, one must ensure that quality be an integral part of theproduction process--a message that many other industries have understood formany years.andP;  [5]andM;The production process then becomes the object of scrutiny, [6] similar tothat in other industries where quality products of any type are producedaccording to a stable, well-understood process which is somewhat independentof the product.andM;An important step of abstraction is to separate concerns about the product(i.e., the application to be created) and the process by which it is created.andO;Once separated, the application development process (see Figure 1) can bedescribed and evaluated independently.andP;  [7]andM;Conceptually an application development process model, sometimes calledsimply a process model, is an abstraction from actual application developmentprocesses (see Figure 2) and is intended as a template, or prescription, forfuture application development processes.andP;  The simplest structure of aprocess model described the results--called the work objects--to be createdand the activities which are necessary to produce them.andP;  The term work objectis used to denote all the different results (final and intermediate) that areproduced during application development.andP;  The creation of an application isachieved by a process based upon the application development process model.andO;The actual process is then known as an instance of the model, with theunderstanding that all elements of the instantiated process (typicallyactivities and work objects) are instances of the respective descriptions ofactivities and work objects in the model.andP;  An application development processmodel usually provides additional information which eases and standarizes theprocess.andM;The application development process model.andP;  Successful applicationdevelopment is the result of several factors.andP;  The ultimate aim of anapplication development project is the delivery of a set of work objects(e.g., code, documentation).andP;  It is necessary to derive them via numerousintermediate work objects, each of which shows a different aspect of theapplication.andP;  These work objects have certain relationships among them (seeFigure 3).andP;  The totality of this information is described in the applicationdevelopment information model (AD information model) of AD/Cycle, whichrepresents the work objects and their relationships.andP;  Further details arediscussed later in the paper in the section of the AD information model.andP;  Inaddition, one has to establish the means by which these work objects are tobe produced, that is, which steps should be taken and which methods applied.andO;This can be stratified in two levels: (1) The individual steps to be takencan be defined locally and are further explained in the section onactivities.andP;  Each activity defines one step, the inputs, the outputs, andwhat should be done in the step.andP;  (2) The methodology which performs theoverall process is defined globally.andP;  The section on the work-flow structuresshows how the individual activities are to be sequenced in order to form acomplete process.andM;The AD information model and work-flow structure together form the core ofthe application development process model.andP;  A description of the process isshown in Figure 4.andM;The need for computer support.andP;  Application development process models havebeen around for many years.andP;  Some time ago, UBM Germany published and taughta textual description of a process model called &quot;Verfahrenstechnik.&quot; [8] Further models include Boehm's waterfall model, [9] and IBM model, [10] andmany others.andP;  [11-13]  Such descriptions tend to be largely ignored becausethey offer information which is remote from the actual point of need, areoften cumbersome to look up, and are difficult to maintain--especially ifthey exist in many copies.andM;In order to be fruitful, it is necessary to bring the developer into intimateinteraction with the process definition.andP;  The complexity of the process, themultitude of intermediate and final work objects, the number of team membersinvolved, and the need for high quality require computer support.andP;  A workmanager is supported by a database system.andP;  An early account of theseconcepts, probably coining the term process mechanism for the first time, isfound in Reference 14.andP;  Thus we develop applications not only for thecomputer, but also with the computer.andP;  In AD/Cycle were have defined WorkManager to be the work management component, discussed in a later section.andM;Supplying the Work Manager with all necessary features needed by the membersof the development team (e.g., tools, help texts), yields an environmentinvariably called an Integrated Project support Environment (IPSE) [15] orSoftware Engineering Environment (SEE).andP;  [16-18]andM;The process model provides a description of the application developmentmethodology.andP;  In this respect it can be compared to a street map, whichindicates acceptable ways to reach a certain location.andP;  An on-line processmodel can also actively provide guidance to its users.andP;  The objective ofprocess management is to aid in determining the order of activities and tocommunicate with the users.andM;It is also necessary to administer the produced (intermediate and final) workobjects when performing actual application development.andP;  Storage andretrieval procedures have to be established, and tools have to be accessed.andM;Implementing a project is not just a matter of following a process model.andO;People, schedules, and resources have to be considered and planned.andP;  This isthe objective of project management.andP;  Project management will also (based onresource availability and on project priorities) influence the order in whichactivities may be executed.andP;  Extra tasks must be planned for education orvacation.andP;  The Work Manager will be controlled by the additional constraintsimposed by project management.andP;  The Work Maanger provides automated on-lineprocess management by utilizing elementary project management functions andproviding interfaces to project management tools.andM;Components of an application developmentandM;process modelandM;The components of an application development process model include the ADinformation model, the work-flow structure, and auxiliary information such ashelp texts, skeletons, and samples.andP;  It is an advantage to divide a processmodel into several model segments.andM;The AD Information model.andP;  The AD information model represents the workobjects, their relationships, and attributes.andM;Work objects and their relationships.andP;  The aim of a development project isthe delivery of a set of work objects (the code, the documentation, etc.).andO;The impossibility of deriving these end products in one step from the initialinformation makes it necessary to define several layered intermediate workobjects.andM;The application is usually described by separate views (e.g., as the usersees it, how it is to be implemented, etc.) that are reflected in differentdocuments (the various work objects).andP;  These work objects provide specializedviews of the final application.andP;  This is similar to building a house, wheredifferent documents (floor plan, plan of plumbing installations, functionaloverview, etc.andP;  [19]) are created before a single brick is laid.andP;  At the endof a project an architect hands to the customer not only the keys of thehouse, but also a considerable amount of the intermediate documentation.andM;Similarly, an application may be considered as the set of all work objectsthat are created during the application development process (e.g., theprograms, the specifications, etc.).andP;  Each work object makes somecontribution to the meaning and shape of the final application, providingsome aspect (view) of the final application.andP;  These different work objectsbear numerous relationships to one another, as indicated in Figure 3.andM;Most intermediate work objects should be preserved for auditing andmaintenance at a later date.andP;  Thus the installed application is, so-to-speak,the only end-user visible part of a large set of work objects.andP;  All thecreated work objects may be of interest for a complete understanding of anapplication.andM;In AD/Cycle the description of the individual work objects and theirrelationships is stored in the AD information model.andP;  The AD informationmodel is intended to be the common basis for tool integration andcommunication.andP;  The AD information model is extendableandgt; this means that if amodel segment (discussed in the section, &quot;Model segments&quot;) needs additionalwork objects that are initially not in the AD information model, they can beadded.andP;  [20,21]  Actual instances of these descriptions, i.e., the workobjects resulting from application development, are stored in the RepositoryManager [TM].andP;  When performing actual application development, some of theserelationships can be formally verifiedandgt; with respect to others, a moreintuitive understanding is necessary.andP;  A correct (and complete) applicationwill consist of a set of work objects that fulfill all the relationships.andM;The choice of which work objects are specified in the AD information modeland their interrelations predetermines to some extent the methodology forproducing them.andP;  The information model does not explicitly specify the orderin which the individual work objects are to be created.andP;  It does express agoal--that is, what the structure of the final application should be.andO;Naturally the structure has to be compatible with the development methods,i.e., it must provide for all intermediate work objects which are needed iffollowing specific methods.andM;Attributes of work objects.andP;  In addition to its contents, one usually wantsto record certain important facts (or attributes) about a work object.andO;Several of these attributes will influence the direction in which the projectproceeds.andP;  Because application development is a team effort, the attributesare also a basis for communication between team members.andM;Attributes of a work object may describe the following:andM;* Contents of the work object in a concise form, such as statisticaldata--especially when the computation of this attribute is difficult (e.g.,andO;the number of noncommentary source statements of a program [22])andM;* Historical information about a work object (e.g., creation date, lastupdate)andM;* Administrative information, such as the name of the library where it isstoredandM;* Project-oriented information, such as the owner, the authorizations tomodify, etc.andM;* Statements about the work object, which are based on human evaluation,e.g., the completion state or level of qualityandM;It should be noted that some of the interesting attributes, such as thecompletion state, cannot be assigned automatically, but only by humaninteraction.andP;  In general the computer cannot deduce whether a work object isfinished, although there might be indications of disbelieving the developer'sstatement (if the compilation of a work object produces a severe error, it isobviously not finished).andM;The process model can restrict the values a work object attribute may haveand the authorized transitions between the values.andP;  Changes to attributes mayonly follow established transition rules as illustrated in Figure 5.andM;Work flow.andP;  The AD information model describes the work objects and theirrelationships.andP;  In an actual application development project, instances ofthe descriptions have to be created.andP;  This means that the steps to do theactivities and their sequence (the work-flow structure) must be establishedin order to populate the Repository Manager with actual data.andM;Activities.andP;  An activity is considered to be the smallest unit of workidentified on a certain level of the model.andP;  It specifies which work objectsare to be worked on in one elementary step and which work objects are assumedto be prerequisities for this work.andP;  The before, after, and togetheractivities for the work objects are defined.andM;An activity has to take into account the available or anticipated tools andalso the relationships expressed in the AD information model.andP;  In simplecases an activity can be equated to the call of one or more toolsandgt; for manyactivities this may be just an editor.andP;  Based upon the current state of thework object, certain tools may not be eligible for invocation.andP;  Thusactivities define the local use of tools and practices.andP;  In other words,identifying activities can be seen as interpreting certain of therelationships in the AD information model as transformations.andP;  For example,in Figure 3 the relationship of IMPLEMENTS can be taken to indicate that oneshould create SOURCE CODE (and also a PANEL SOURCE) based upon the MODULEDESIGN.andM;The choice of activities is not always straightforward: In a reverseengineering situation it can be deduced from Figure 3 that the module designshould be recreated from the source code and the panel source.andP;  [23] Similarly the function-oriented and dataflow-oriented paradigms ofapplication development [24] differ with respect to the chosen types oftransformations.andP;  Thus different transformations (activities) with differentprerequisites and results may be defined, despite the fact that theunderlying AD information model is the same.andP;  Such differences will bereflected as different process models over the same AD information model.andM;From the relevant literature [15-18] it can be observed that the differentparadigms of software development that are discussed are essentiallyconcerned with the order in which activities are to be executed (the workflow), and with certain notational conveniences of describing the contents ofthe various work objects, while the contents of an information model are oflittle concern.andM;The definition of activities can also mean clustering several transformationsinto one step.andP;  This clustering defines the &quot;together&quot; aspect of theactivities.andP;  (In Figure 3 both the SOURCE CODE and the PANEL SOURCE might beproduced in one step for good reasons.)andM;The choice of what constitutes an activity should also be consistent with thegranularity of the AD information model.andP;  In other words, in each activityone or only a small set of work objects should be created.andM;Defining activities together with their prerequisites and results obviouslyimposes some ordering on the transformations.andP;  It defines sequencing on alocal scale.andP;  Having defined the activities, only certain ways of traversingthe model are still valid.andP;  This is similar to a street map where all streetsare marked as oneway streets.andM;Work-flow structure.andP;  While the definition of activities can be considered alocal introduction of work flow into the development process, the definitionof how these activities should follow one another can be considered theglobal definition of the development method.andP;  Successor relationships can beestablished between the existing activities, resulting ina network-likearrangement of the activities, the work-flow structure.andM;Thus activities in the network are interrelated because the output workobjects of some activities are input to other activities and may berestricted by the relationship holds.andP;  The definition of activities and ofthe work-flow structure are complementary.andM;For further control of sequencing (the navigation), we introduce entrypredicates and exit assertions in the sense of the state change architecture[25] (see Figure 6).andM;Each activity may have an entry predicate that determines whether theactivity may be performed.andP;  In general, this entry predicate is a logicalexpression involving attributes of some of the input work objects.andP;  Whichattributes are actually process-relevant is only determined by theiroccurrence insome entry predicate or exit assertion.andM;An activity may also have an exit assertion that indicates whether thisactivity has produced all its expected results.andP;  It is in general formulatedas a logical expressionof the attributes of some work objects.andM;In the Figure 6 example, the activity CODE creates both the SOURCE CODE andthe PANEL SOURCE.andP;  The work-flow structure may add an additional successorrelationship between PRODUCE SPECIFICATION and EXTERNAL REVIEW, and CREATEDESIGN.andP;  It implies that despite the fact that CREATE DESIGN does not have anoutput or input dependency on EXTERNAL REVIEW, there is still a successorrelationship.andM;Work object based work-flow structure.andP;  Experience has shown that in certaincases the definition of an activity can be understood by default using therelationships between the affected work object.andP;  In this case it is notnecessary to explicitly define this activity.andM;As a consequence oen can derive the order inwhich work objects should becreated by defnining a state change protocol for every work object.andP;  Basedupon this state change protocol, the connection between work objects ismirrored by a connection between certain states of the work objects.andM;Help texts, skeletons, samples.andP;  The availability of computer support allowssome additional productivity aids to be provided to the user.andP;  By providingon-line help texts, information about standards, and standardized skeletonsfor the results to be created, a more uniform and professional applicationresults.andP;  The most important productivity aids are the following:andM;* In-line help texts are an essential component for user-friendly, usablesystems.andM;* Reuse and standardization are enhanced by providing a specific skeleton forediting parts of a work object.andM;* Samples are read-only examples of completed work objects used as guidelinesfor work.andM;The above components are an integral part of any process model.andP;  The WorkManager has to take care that they are presented to the user in anappropriate form.andM;Model segments.andP;  A complete application development process model can beconsidered to consist of several separate model segments, which describeseparate areas of responsibility or separate subprocesses.andP;  One can, on theother hand, also consider application development process models to be builtfrom several model segments.andP;  This allows alternate model segments to existin order to handle some tasks by different means.andP;  Model segments that are tobe combined must exhibit a strong compatibility with one another.andM;The major model segment of any application development process model is therun-time application model segment, which describes the creation of theactual application.andP;  This core is usually augmented by several other modelsegments that describe activities not directly involved in the creation ofthe application, but nevertheless are integrally needed in order to create aquality application.andP;  The run-time application model segment is obviously thebackbone of the process.andM;Model segments exist for different reasons, such as adding a perspective, thedescription of a tool, or choosing alternate paradigms.andM;In a development project, several areas of responsibility are often onlyloosely connected to the run-time application model segment and are concernedwith creating work objects of their own.andP;  They are often called perspectives.andO;Since the run-time application model segment is the central core of theprocess, all other model segments are dependent on it and must mirror thestructure of the application development and be compatible with it.andP;  Thequality assurance model segment, [26] for example, must have a structureanalogous to that of the run-time application model segment.andP;  Majorperspectives are documentaion, quality assurance, and product control.andM;Another important example for a model segment is the description of a complextool.andP;  Such a tool essentially performs a certain set of activities in thedevelopment process and thus can be described by a model segment.andP;  Thisallows the user to compare and match tools with an existing model.andM;For certain areas of application development, different methodologies orparadigms can be used.andP;  Typically the technical design of an application canbe function oriented, data oriented, object oriented, or data-flow oriented.andO;Having different model segments available allows the user to isolate thedecision on the methodology and allows the model builder to choose theappropriate paradigm.andM;In order to build an application development process model, it is necessaryto combine several such model segments as shown in Figure 7.andP;  Due to theinterdependencies of the various model segments, some tailoring may benecessary before combination.andP;  The combinationof model segments can also beconsidered reuse of partial models.andM;Combination works somewhat like set union, that is, identical work objectsand activities in the model segments are collapsed into one, while differingwork objects and activities are collected inthe resulting model.andP;  Obviouslythe tailoring and combination function can be driven to unlimited complexity.andO;For practical purposes, however, relatively simple functions like union,simple substitution, etc.andP;  are sufficient.andM;Examples of model segments.andP;  Important model segments (similar to ADPS [26])are: the run-time application segment, the product documentation segment, thetest environment segment, and the quality assurance segment.andP;  These arediscussed in the following paragraphs.andM;The run-time application model segment, based upon the aD information modelof AD/Cycle, [20-27] contains the definition of those work objects thatcontribute directly to executable user application, as discussed in aprevious section, &quot;The AD information model.&quot;andP;  It remains to define theactivities and to specify the work-flow structure associated with it.andP;  Thework-flow structure will follow the phase model of AD/Cycle [28](requirements, analysis and design, produce, build and test, production andmaintenance).andP;  Beneath that there will be groups of activities and singleactivities defined, closely resembling the process model of ApplicationDevelopment Project Support (ADPS).andP;  [26,29]andM;The second model segment describes product documentation.andP;  Productdocumentation (comprising error messages, help panels, and manuals) must bedeveloped as an integral part of software development, in parallel with theactual application.andP;  This product documentation model segment uses as inputall relevant work objects from the run-time applications model segment (thismeans it must be tailored after the run-time application model segment) anddelivers the necessary documentation work objects to the appropriateintegration activities of the run-time application model segment.andM;The third model segment is used mostly for testing, but it can also be thebasis for experimenting with code fragments.andP;  The developer needs anenvironment that mimics reasonably the target environment.andP;  This environmentwill be built on several occasions, e.g., for module test, integration test,and system test, etc.andP;  This test environment model segment is fairlyindependent from the development model segment, with the restriction that itmust be compatible with the type of environment for which development isdone.andM;Quality assurance is supported by the fourth model segment.andP;  It has to beintereaved with the respective development activities.andP;  Therefore the qualityassurance model segment looks like a slightly pruned copy of thecorresponding run-time application model segment.andP;  The quality assurancemodel segment can be tailored to resemble the run-time application modelsegment by applying the following two rules.andP;  [26]andM;* For every group of activities of the run-time application model segment, aquality assurance activity is defined to parallel it.andM;* For selected important activities of the run-time application modelsegment, a specific is additionally defined.andM;Dynamically expanded model segments.andP;  In many instances a set of activitieshas to be repeated in several places.andP;  An example is creating an operationaltest environment.andP;  This obviously has to be done for unit test, and lateralmost the same set of activities has to be performed to create a system testenvironment.andP;  Therefore a process model has to provide means to expand agiven activity into a chosen predefined model segment.andP;  This behavior issimilar to a subroutine call in programming languages.andM;Work managementandM;Models and their instanceS.andP;  An established application development processmodel is a template for future projects.andP;  Such a process model contains onlydescriptions of activities and work objects, not individual instances.andO;Certain properties of the desired development process are defined in themodel.andP;  Other properties, considered individual, are not described in themodel and will vary from project to project.andP;  Typically the model does not(but could) say how many instances of an activity or work object will becreated in a specific development project (see Figure 8).andM;Project management.andP;  Even given an extensive process model there are manyaspects outside of process management.andP;  Project management is concerned withembedding an application development process into a real-world environment,taking into account constraints and requirements posed by budget, time,manpower, risk, [30] etc.andP;  It is concerned with planning, tracking, andcontrolling any one individual project.andM;Project management has to rely on the contents of the underlying processmodel.andP;  Its findings influence the process inasmuch as additional constraintsand considerations with respect to navigation arise (e.g., &quot;Phase 3 shouldnot be started before June first.&quot;), and additional tasks outside the projectmodel (be it education, vacation, or interrelation to other projects) aretaken into account.andM;The unit of project planning and project control is called a task.andP;  A taskidentifies a certain amount of work to be done.andP;  It is associated withresources such as people, hardware, software, or time.andP;  Typically one recordsthe planned and actually beginning of the task, the planned and actual end ofthe task, the responsible person(s), the resources to be utilized, and otherpertinent information.andM;In general the beginning and ending of a task can be associated with statesof selected work objects (see Figure 9).andP;  That is, the definition of a taskincludes the specification of an initial condition and a goal to be achieved.andO;The process model describes how this possibly complex work step is to be donetechnicallyandgt; project management defines it as a unit of planning for whichcertain resources are available and relates it to the other tasks within theproject.andM;The granularity of a task (the size) depends on the characteristics of theproject, the management style of the project manager, the type and experienceof team members, the risk-level of the project, the enterprise culture, andmany other factors.andP;  Project management literature [31,32] describes criteriafor choosing the size of tasks.andP;  A task can be, for example, producing acomplete design document or writing a source program until it is ready forinspection.andM;Figure 10 shows four work object types (SPECIFICATION, MODULE DESIGN, SOURCECODE, PANEL SOURCE [see also Figure 3]) and their associated work objects(SPECS0, MDESIGNN0, SOURCECODE1, SOURCECODE2, PANELSOURCE1, PANELSOURCE2).andO;It also shows the associated tasks as chosen by the project manager.andP;  TASK1and TASK2 are established for producing specifications and design,respectively.andP;  TASK 4 and TASK5 are both related to producing source code andpanels, respectivelyandgt; each encompasses the production of two work objects.andO;TASK3, representing education needed for TASK4, has no equivalence in theprocess model.andP;  It is introduced by the project manager.andP;  Project managementmay also introduce further dependencies between tasks (for example, educationis only needed for TASK4).andM;Work management for AD/Cycle.andP;  The Work Manager monitors applicationdevelopment based on the process model and on the current state of thevarious work objects.andP;  It identifies what is ready to be worked upon.andP;  Itconsults project management information as to whether further restrictions onthe choice of actions exist.andP;  The Work Manager has to fulfill severalfunctions and, as a consequence, several different interfaces can beidentified (Figure 11).andM;Process definition and maintenance.andP;  A major task of the Work Manager isaiding to build models.andP;  This usually is a special component not accessibleto a regular user.andP;  It involves the administration of the different modelsegments, their creation and modification, facilities tailoring modelsegments according to other model segments, and combination of model segments(see Figure 7).andP;  To the regular user the application development processmodel should appear fixed.andP;  The Work Manager, however, can dynamically createthe application development process model.andP;  Auxiliary functions would includecomparing and copying model segments.andM;The Work Manager derives the process from the process model, interprets it,and presents it via a set of dialogs to the human user or invokes the toolsintegrated into the process (see Figure 12).andM;This user interface is used for the incorporation of both local changes,which are only relevant for one specific project, and permanent changes thatreflect past experience.andP;  The latter allows the user to incorporateexperience into the process model, which in turn makes the model a valuableasset of a company's development potential by establishing a certain softwaredevelopment culture.andM;Performing development work.andP;  The Work Manager communicates with the agentsof the application development process with software tools that perform someactions and with human beings who perform the creative tasks in development.andM;The use of tools is key to productivity.andP;  Tools have been employed from thevery outset of software engineering, the earliest being assemblers andcompilers.andP;  Incorporating the tool interface (see Figure 11) into the WorkManager relieves the user from considerable clerical detail.andP;  The callingmechanism is standardized and delegated to the Work Manager, and storage ofwork objects and their retrieval is performed under the control of the WorkManager and is thus mechanized.andM;The information contained in the process model is presented to the user inthe form of a so-called &quot;work bench,&quot; which allows access to the information,as shown in Figure 13.andP;  It provides on-line help texts and information aboutstandards, for example.andM;Navigation.andP;  The application development process model is presented to theuser through the workbench interface in order to let the user choose the nextstep(s).andP;  This navigation is subject to the constraints expressed in theprocess model, the data dependencies between the defined activities, thesuccessor relations expressed in the process model, and the constraintsimposed by project management.andP;  Furthermore the entry predicates and the exitassertions must be taken into account.andP;  Depending on the philosophy, the WorkManager will take more or less initiative in suggesting what to do next.andP;  Theamount of control that the work process exercises over the end user variesfrom very restrictive to very liberalandgt; that is, the to-do lists may prescribethe sequence in which items have to be dealt with, or may allow freedom ofchoice.andM;AD/Cycle work management in a cooperative environment.andP;  Figure 14 shows howwork management fits into the AD/Cycle environment and illustrates how thehost and the programmable workstation (PWS) cooperate.andM;The integrity and consistency of the overall application development processis maintained at the host.andP;  User interaction, on the other hand, is primarilyhandled by the PWS, following Common User Interface (CUA) rules [33] andexploiting the graphics capabilities of the workstation.andP;  Thus the WorkManager consists of two closely cooperating components: one on the host andone on the PWS.andP;  This cooperation is implemented by means of thecommunication facility between the workstation and the host.andM;Tools are invoked by the Work Manager, directly or indirectly, on behalf of auser.andP;  The Work Manager is sensitive to the return information reported backby tools and translates it into status information.andM;Host and workstation tools can be defined to the process modelandgt; toolinvocation on the PWS exploits workstation services.andP;  The PWS can invoke hosttools by requesting them as services from the host Work Manager, and viceversa.andM;SummaryandM;The pressing user requirements on the quality of software, and thus on theapplication development process, make an automated approach necessary.andP;  Theclear definition of an application development process model, defining thesteps to be followed and the work objects to be created, can be considered anecessary part of application development in addition to the separation ofprocess and product function.andM;The requirement for computer-supported work management has arisen because ofthe complexity of the development process, the multitude of work objects, andthe complexity and diversity of today's tools.andP;  A summary of the majorrequirements follows:andM;* Allow an application development process model to be defined, dynamicallymodified, and monitored, measured, and improved.andP;  It has to be adaptable tospecific enterprise needs.andM;* Allow individual processes to be derived from the application developmentprocess model and interpreted by a work manager.andP;  The system should allow fornavigating through the process and for extracting to-do list for individualsusrs or user groups.andM;* Assist the user in performing the work by providing easy, automated, andstandardized access to the work objects stored in the Repository Manager.andM;* Make it easy to access the right tools at the right time.andP;  Tools are usedto implement the steps defined in the process model.andP;  This means that therole for each tool participating in the process has to be defined.andM;* The enforcement of the process should be adaptable to impose more or lessdiscipline, as required for individual projects.andP;  Different styles of processmanagement should be supported, from manual choice of the next step to thecompletely automatic navigation through the process.andM;* Provision of a project management interface for planning and controllingprocess resources in necessary.andM;* The system has to conform to the Systems Application Architecture[TM](SAA[TM]) requirements and follow the CUA standards.andP;  It must be integratedwith AD/Cycle by relying on the AD information model.andP;  It should use theRepository Manager and be compatible with the AD/Cycle tool strategy.andM;Thus work management for AD/Cycle offers a total systems approach toapplication development, making themodel of the process accessible on-line tothe software developer, project manager, and other personnel involved.andP;  Theuse of work management results in a more systematic, professsional, andtransparent application development process, which in turn manifests itselfin higher quality and productivity, and thus in reduced costs.andM;AcknowledgmentsandM;The authors acknowledge the contributions to the concepts in this paper bymany researchers and developers in the IBM Corporation.andP;  Special thanks go toKurt Bandat, Philip Joseph, Guenther Kalod, Roland Lutz, DieterMutschmann-Sanchez, Dick Phillips, Dieter Schoeberl, Franz Spickhoff, andWolfgang Thumser.andM;AD/Cycle, Repository Manager, Systems Application Architecture, and SAA aretrademarks of International Business Machines Corporation.andM;Cited referencesandM;[1.] M. Gerisch and J. Schumann, Software Entwurf, Rudolf Mueller-Verlag,Koeln (1988).andM;[2.] G. Simons, Introducing Software Engineering, NCC Publications,Manchester, England (1987).andM;[3.] B. W. Boehm, Characteristics of Software Quality, TRW Series of SoftwareTechnology, North-Holland, Elsevier Science Publishers, Amsterdam (1980).andM;[4.] H. Sneed, Software--Entwicklungsmethodik, Rudolf Mueller-Verlag, Koeln(1986).andM;[5.] P. B. Crosby, Quality Is Free, Mentor Books/New American Library, NewYork (1980).andM;[6.] V. Merlyn and G. Boone, &quot;Case Tools,&quot; Computer World 23, No.andP;  13, 65-86(March 27, 1989).andM;[7.] J. C. Wileden and M. Dowson, &quot;International Workshop on the SoftwareProcess and Software Environments,&quot; Software Engineering Notes 11, No.andP;  4,1-74 (1986).andM;[8.] Handbuch fuer DV-Projekte-Methoden fuer Planung, Steuerung, Entwicklungund Betrieb von EDV Verfahren, GE 12-1473-1 (1978), IBM Corporation (our ofprint).andM;[9.] B. W. Boehm, &quot;Software Life Cycle Factors,&quot; in Handbook of SoftwareEngineering, C. R. Vick and C. C. Ramamoorthy, Editors, Van Nostrand ReinholdCompany, Inc., New York (1984), pp.andP;  494-518.andM;[10.] R. A. Radice, N. K. Roth, A. C. O'Hara, Jr., and W. A. Ciarfella, &quot;AProgramming Process Architercture,&quot; IBM Systems Journal 24, No.andP;  2, 79-90(1985).andM;[11.] H. Bender, R. Fuhrmann, H. U. Kittel, B. Menze, J. E. Mueller, and D.andO;Nadolny, Software Engineering in der Praxis (das Bertelsmann-Modell),CW-Publikation, Muenchen (1983).andM;[12.] W. End, H. Gotthardt, and R. Winkelmann, Softwareentwicklung--Leitfadenfuer Planung, Realisierung und Einfuehrung von DV-Verfahren, Siemens AG.,andO;fifth revised and extended edition (1986).andM;[13.] L. J. Peters and L. L. Tripp, &quot;A Model of Software Engineering,&quot;Proceedings of the 3rd International Conference on Software Engineering (May1978), pp.andP;  63-70.andM;[14.] G. F. Hoffnagle and W. E. Beregi, &quot;Automating the Software DevelopmentProcess,&quot; IBM Systems Journal 24, No.andP;  2, 102-120 (1985).andM;[15.] Integrated Project Support Environments, J. McDermid, Editor, PeterPeregrinus Ltd., London (1985).andM;[16.] H. Huenke, &quot;Software Engineering Environments,&quot; Proceedings, Lahnstein,BRD, 1980, North-Holland Elsevier Science Publishers, Amsterdam (1981).andM;[17.] I. Sommerville, Software Engineering Environments, Peter PeregrinusLtd., London (1986).andM;[18.] M. V. Zelkowtiz, &quot;Requirements for a Software Engineering Environment,&quot;Proceedings of the University of Maryland Workshop, May 1986, AblexPublishing Company, NJ (1989).andM;[19.] J. A. Zachman, &quot;A Framework for Information Systems Architecture,&quot; IBMSystems Journal 26, No.andP;  3, 276-292 (1987).andM;[20.] V. J. Mercurio, B. F. Meyers, A. M. Nisbet, and G. Radin, &quot;AD/CycleStrategy and Architecture,&quot; IBM Systems Journal 29, No.andP;  2, 170-188 (1990,this issue).andM;[21.] J. Sagawa, &quot;Repository Manager Technology,&quot; IBM Systems Journal 29, No.andO;2, 209-227 (1990, this issue).andM;[22.] M. E. Fagan, &quot;Design and Code Inspections to Reduce Errors in ProgramDevelopment,&quot; IBM Systems Journal 15, No.andP;  3, 183-211 (1976).andM;[23.] C. Chroust, &quot;Software Development Paradigms--A Unifying Concept,&quot; R.andO;Trappl, Editor, Tenth European Meeting on Cybernetics and Systems Research,Vienna (April 1990).andM;[24.] J. Blank and M. J. Krijger, &quot;Software Engineering: Methods andTechniques,&quot; Wiley-Interscience Publishers, New York (1983).andM;[25.] R. W. Phillips, &quot;State Change Architecture: A Protocol for ExecutableProcess Models,&quot; C. Tully, Editor, Representation and Enacting the SoftwareProcess, Proceedings 4th International Software Process Workshop, May 1988ACM Software Engineering Notes 14, No.andP;  4, 129-132 (1989).andM;[26.] G. Chroust, &quot;Application Development Project Support (ADPS)--AnEnvironment for Industrial Application Development,&quot; ACM Software EngineeringNotes 14, No.andP;  5, 83-104 (1989).andM;[27.] R. W. Matthews and W. C. McGee, &quot;Data Modeling for SoftwareDevelopment,&quot; IBM Systems Journal 29, No.andP;  2, 228-235 (1990, This issue).andM;[28.] AD/Cycle Concepts, GC26-4531 (September 1989), IBM Corporationandgt;available through IBM branch offices.andM;[29.] Application Development Project Support/Application Development Modeland Process Meachnism--General Information, GH19-8109 (April 1990), IBMCorporationandgt; available through IBM branch offices.andM;[30.] B. Boehm, &quot;A Spiral Model of Software Development and Enhancement,&quot; ACMSIGSOFT--Software Engineering Notes 11, No.andP;  4, 22-42 (1986).andM;[31.] P. W. Metzger, Managing a Programming Project, 2nd Edition,Prentice-Hall, Inc., Englewood Cliffs, NJ (1981).andM;[32.] D. J. Reifer, &quot;Tutorial: Software Managment,&quot; IEEE Computer Society,Catalog Number 81-5492 (1981).andM;[33.] J. M. Artim, J. M. Hary, and F. J. Spickhoff, &quot;User Interface Servicesin AD/Cycle,&quot; IBM Systems Journal 29, No.andP;  2, 236-249 (1990, this issue).andM;[34.] G. Chroust, &quot;Application Development with ADPS,&quot; Softwartechnik Trends9, No.andP;  3, 13-30 (1989).andM;Gerhard Chroust  IBM Programming Systems, Vienna Software DevelopmentLaboratory, Cobdeng.andP;  2, A-1010 Vienna, AUSTRIA.andP;  Dr. Chroust is currently astaff programmer, working on the definition of an application developmentprrocess model for AD/Cycle.andP;  After joining IBM in 1966, he participateduntil 1970 in the creation of a formal definition of PL/I (Vienna DefinitionLanguage), becoming assistant to the laboratory direct for the next fiveyears.andP;  From 1977 to 1982 he was responsible for the mathematical/logicalrun-time library of the 8100PL/I compiler.andP;  Since 1983 Dr. Chroust has hadresponsibility for the process modle of Application Development ProjectSupport (ADPS) And its successor products, coordinating the national languagesupport for ADPS From 1987 to 1989.andP;  Dr. Chroust holds an M.S.andP;  from theUniversity of Philadelphia and a Ph.D.andP;  from the Technical University ofVienna.andP;  Since 1980 he has served as Associate Professor at the University ofLinz and as a lecturer on software engineering and microprogramming atseveral Austrian universities.andP;  He has published a book on microprogrammingand computer architecture and has published numerous papers on firmware andsoftware engineering.andP;  He is a member of the editorial board of the IBMProgramming Series and a board member of both the Austrian Computer Societyand the Austrian for Cyberntic Studies.andM;Helmut Goldman  IBM Programming Systems, Veinna Software DevelopmentLaboratory, Cobdeng.andP;  2, A-1010 Vienna, Austria.andP;  Mr. Goldmann joined IBM in1967 after graduating from the Technical University in Vienna with a Master'sdegree (Dip.-Ing.) in physics.andP;  The areas in which he has worked includeformal definition of PL/I (Vienna Definition Language) and of programminglanguages in general, programming system design, compiler construction (PL/Icompiler for the 8100), and the implementation and architecture of softwarefor application development support.andP;  He was responsible for the coordinationof the model and driver components of the ADPS product.andP;  He is currentlyworking on the modeling of the internal data of a process manager and relatedarchitectural and design problems.andM;Otto Gschwandtner  IBM Programming Systems, Vienna Software DevelopmentLaboratory, Cobdeng.andP;  2, A-1010 Vienna, Austria.andP;  Dr. Gschwandtner joined IBMin 1973.andP;  He was systems engineer in the large Multiple Virtual Storage (MVS)Customer area.andP;  In 1977 he joined the Vienna Software Development Laboratory,where he worked on the Screen Definitio Facility, various applicationdevelopment projects, and ADPS.andP;  He is currently a development manager,working on ADPS enhancements.andP;  Dr. Gschwandtner received a Ph.D.andP;  degree inmathematics from the University of Vienna.andP;  Before joining IBM, he spent oneyear as a visiting scholar at Stanford University and three years as teachingassistant and lecturer in the area of mathematical logic at the University ofVienna.andO;</TEXT></DOC>