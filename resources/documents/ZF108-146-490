<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-146-490  </DOCNO><DOCID>08 146 490.andM;</DOCID><JOURNAL>Communications of the ACM  Feb 1990 v33 n2 p152(15)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Smart Game Board and Go Explorer : a study in software andknowledge engineering. (technical)</TITLE><AUTHOR>Kierulf, Ander; Chen, Ken; Nievergelt, Jurg.andM;</AUTHOR><SUMMARY>Knowledge engineering is an emerging offshoot of thewell-established discipline of software engineering.andP;  Mostsoftware-engineering literature deals with the production ofsoftware as a predictable, repeatable industrial process, but theresources of knowledge engineering are less certain and its goalsare more open-ended.andP;  Knowledge formation is complex and difficultto predict.andP;  A study of a project to produce a computer version ofthe Oriental game Go is presented.andP;  The Explorer program runs onthe Smart Game Board and has a heavy knowledge-engineeringcomponent.andP;  Smart Game Board is a hypertext medium that can beused as a game-independent user interface.andP;  Knowledge acquisition,selection, and representation are all more relevant to Go than tochess.andP;  It is concluded that computer Go is currently at the stateof evolution that computer chess was in the late 1960s.andM;</SUMMARY><DESCRIPT>Topic:     Artificial intelligenceKnowledge-Based SystemsSoftware EngineeringTechnologyComputer games.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Smart Game Board and Go Explorer: A study in software and knowledgeengineeringandM;SOFTWARE ENGINEERINGandM;AND KNOWLEDGE ENGINEERINGandM;Software engineering is an established discipline that has accumulated andcodified more than two decades worth of know-how.andP;  Knowledge engineering, onthe other hand, is an emerging discipline with lots of issues but, at leastso far, little structure.andP;  Despite its lack of maturity the practice ofknowledge engineering promises to have a noticeable impact on softwareengineering doctrine.andP;  The experimental nature of knowledge engineering goeshand-in-hand with a style of software development best characterized as'exploratory,' which has not been much studied in traditional softwareengineering.andM;Exploratory Software Development:andM;Uncertain Resources, Open-Ended GoalsandM;The vast literature on software engineering discusses, almost exclusively,the production and maintenance of software as an industrial process:Predictable in its outcome, repeatable in its execution, and portable in itsindependence on particular individuals.andP;  Many conditions must be met for themanagerial and technical processes advocated in software engineering to work.andO;The principal requirement is that the designer knows fairly well what endproduct can be achieved (so it can be specified), what resources are required(so the product can be sized up), and how to build the product (so theproduction process can be planned).andP;  The source of all this knowledge isexperience based on previous production of similar products.andP;  Conventionalsoftware engineering know-how works best when producing the (n + 1)st versionof a compiler, text processor, or other well known software systems componentor apllications package.andM;A small but important class of software development projects meets none ofthe conditions above.andP;  For good reasons, such first-of-a-king projects aretypically conducted in a manner diametrically opposite to traditionalsoftware engineering practice.andP;  Typical conditions include:andM;* The designer has a clear vision of the direction of achievement, or &quot;goalat infinity,&quot; but has no way to predict how far along this route progress canbe pushed.andM;* For any specified level of achievement, it is impossible to predict theresources needed, perhaps not even their order of magnitude.andM;* Because nothing can be promised about the outcome, no long-term commitmentof resources is made, and the only predictable budget feature is that theproject has to be run on a shoestring.andM;* Software development cannot be planned, as the outcome of each phase andstep is unpredictable; it proceeds, mostly by trial and error, along lines ofleast resistance or greatest promise.andM;* Last but not least, such a project is intimately tied to the particularindividuals involved and reflects their personal characteristics.andP;  Removing akey individual will kill the project or transform it beyond recognition;assigning another team to do &quot;the same&quot; project results in a differentventure.andM;The rapidly spreading use of interactive applications has kept softwareproducts in a state of flux for more than a decade: Spreadsheets, paintingprograms, hypertext are just some of the products that lacked practicalmodels a decade ago.andP;  All indications point to a continuation of the trendthat essentially new types of software will continue to be developed, alongwith the bread-and-butter tasks of perfecting the next version of existingmodels.andP;  Thus it behooves the software engineering community to recognizethat exploratory software development is an activity of long-term importanceworth studying.andP;  Even a casual acquaintance with several exploratory softwareprojects suggests that they proceed according to rules different than thosepostulated in the software engineering literature.andP;  It is not just a matterof developing a prototype or two before starting on the product, and it isdefinitely not a matter of going through half a dozen phases of a life-cyclethat includes requirements analysis, specification, coding, and testing.andM;The style of exploratory software development is linked so intimately to theindividuals involved that one might be reluctant to search for common traits,expecting only to see talented and dedicated individuals &quot;doing their ownthing.&quot;andP;  The opportunity to observe several such projects by different teamshas convinced us, however, that there are significant similarities.andP;  Theseinclude:andM;* A blatant bottom-up approach to systems building: The system evolves aroundkey routines and components that are built early, are perennially modified,and pragmatically combined in different ways in response to feedback.andP;  Systembehavior, far from being specified a priori, is an ever-changing result ofthese experimental set-ups.andM;* At all times, have a running system, even if it is only a mini version ofwhat you are striving for.andP;  Since specification ahead of time is out,observation of the program's behavior, and of the users' reactions, isessential at all times.andM;* Keep your tools sharp!andP;  Building an environment useful for rapidprototyping is effort well invested, as code is never &quot;finished,&quot; and theturn-around time needed to implement a new version or perform an experimentis critical.andM;* Strive for a design that leaves as many options open as possible--tomorrowwe may know better than today what option to exercise.andM;* Keep your ears to the ground!andP;  A significant project spans years, andduring its lifetime the surrounding circumstances change considerably--a gooddose of opportunism is necessary to keep the project relevant and up-to-date.andM;Software developed according to this philosophy evolves through selection abit like natural systems do--with one important exception.andP;  A single teamcannot afford to imitate prolific nature and spawn mutations to be developedconcurrently.andP;  At any time, the cumulative experience of the entire projectmust be distilled into one running version.andP;  It is worth remarking, though,that in situations where several independent teams work on a similar goal,the analogy with natural selection, and the multitude of related species itcreates, is apt--consider, for example, the many versions of UNIX inexistence.andM;The Unpredictable Complexity of KnowledgeandM;FormalizationandM;The development of an expert system, or any project that involves theformalization of an open-ended domain of human knowlege, adds specificdifficulties associated with knowledge engineering to all the traditionalproblems of software engineering.andP;  The chief difficulty added by knowlegeengineering is that hardly anything of importance seems to be predictable,and hindsight becomes the only reliable basis of judgment.andP;  This is a drasticdeparture from the norm of engineering development, which is based on theassumption that we know ahead of time what we will end up with.andP;  It forcescomputer scientists to look at the process of formalization in a new light.andM;Computer science is the technology of formalization.andP;  If anythingis to beprocessed by computer, the rules of processing are expressed in a formalsystem.andP;  This system may be a programming language defined by a collection ofhardware and software that includes a computer, an operating system, and acompiler; it may be a programing or specification language definedabstractly; or it may be a more traditional mathematical system built onaxioms and rules of inference.andP;  The programmer may or may not think ofhis/her activity as a task in formalization--the point here is that, once aprogram has been written, it is a formal system.andM;One can view computer science education as having two major goals: To teach asufficiently rich arsenal of techniques of formalization, and, in projectsand case studies, to impart as much experience as is feasible concernign thepractical application of these techniques.andP;  Thus we expect, for example, thata systems programmer can formalize a communications protocol, and a systemsanalyst or database administrator can formalize the structure of payrollinformation.andP;  Both of these examples rely on the fact that the domain ofknowledge to be formalized is closed, as opposed to open-ended, and of everylimited size and complexity.andM;The word 'knowledge engineering,' on the other hand, is typically used fordomains of knowledge much larger and more complex than the examples above.andO;Attempts at formalization capture only a small fraction of therelevantdomain.andP;  This is true, for example, of standard microwords of artificialintelligence, such as chess.andP;  The designer usually cannot even formalize allof his personal knowledge of the field, let alone that possessed by thecommunity at large.andP;  The literature on expert systems at times presentsinterviews of human experts as the way to capture knowledge, but this isreally a technique of identifying knowledge, rather than formalizing it.andM;Given this state of affairs, the knowledge engineer typically starts with aneducated guess of what small part of the vast collection of know-how can beformalized and will result in acceptable performance, then repeats thefollowing steps until patience or resources run out: Implement this subset,observe the outcome (it can always be improved!), and tune the knowledge baseto achieve a hoped-for effect.andP;  This is a basic human mode of operation, butis not what traditional software engineering doctrine has been advocating,and is not what most software environments support.andM;We illustrate these points with a study of an exploratory softwaredevelopment project with a large knowledge engineering component.andP;  Its goal,a program to play the Oriental game of Go, is exotic and needs explaining,including a brief survey of the history and current state of computer Go.andM;A Program to Play GoandM;As a study in exploratory software development and knowledge engineering, wepresent Explorer, a program that runs on the Smart Game Board and plays theOriental game of Go.andP;  It took four years to build and perfect the Smart GameBoard, and test it in two applications: An interactive Go calculator thatprovides basic tactics routines, and a program that plays Othello.andP;  By theSpring of 1988 this powerful programming environment and test bed had maturedto the stage where a new member of the team, who focused on the analysis ofstrategic features of board positions, could implement a program to play thefull game of Go during a summer of intensive work.andP;  In the Fall of '88, inits first test against other programs, Explorer tied for 2nd among 16programs that competed in the 4th International Computer Go Congress inTaiwan, the unofficial world championship organized by the Ing Foundation.andO;Explorer proved to be a fierce if somewhat unsteady fighter, whose playrevealed some crass shortcomings.andP;  The team split soon thereafter, each grouptrying out its own cure to avoid Explorer's predictable lapses.andP;  As aconsequence, Explorer retired from active competition and spawned twooffspring.andP;  Both run on the Smart Game Board and both improved on theirparent's record in their very first encounter.andP;  In the summer of '89, GoIntellect won the North American Computer Go Championship, and Swiss Explorerwon the Go tournament at the first Computer Olympiad in London.andP;  We attributethese results to a mixture of good luck and a solid dose of sound softwareengineering practices.andM;Although this project is unique in several ways, it is typical of exploratorysoftware development in others.andP;  We believe there are lessons to be learnedwith respect to the interaction between software engineering and knowledgeengineering.andP;  This case study illustrates the decisive importance of apowerful development environment.andP;  A large investment of effort in buildingthe best software engineering environment we were able to devise, out ofcomponents that are well understood, made it feasible to experimentextensively in the poorly understood realm of knowledge engineering.andM;Why Work on a go Program?andM;Work on game-playing programs is always, in part, a hobby.andP;  But there must beother justification as well, because game playing programs, when pursued farenough that they can compete among the best, require several man-years ofeffort.andP;  Such justification is readily found, in an academic environment, interms of education and research.andM;Education.andP;  The idea of robots playing games of strategy has intrigued peoplesince the invention of clockwork, but it remained for electronic computers toturn it into reality.andP;  Famous computer pioneers prepared the ground: John vonNeumann created the mathematical theory of games, alan Turing and ClaudeShannon devised techniques that allow computers to play chess [20, 22].andP;  Theconcepts and techniques developed range from game theory to knowledgerepresentation, and from heuristic search to program optimization.andP;  Many ofthese ideas have become an accepted part of computer science lore, andstudents should be exposed to them.andP;  The concepts are empirical more thanthey are theoretical: The typical question is not whether something can bedone in principle, but how well it can be done within practical constraints.andO;In computer science, a meaningful exposure to empirical concepts must bebased on working programs.andP;  We have been conducting seminars on heuristicsearch and computer game playing in which the Smart Game Board serves as aworkbench and test-bed that makes it possible for students to write and testa game-playing program of their own design in one semester.andP;  It was a seminarheld in '86 over North Carolina's state-wide two-way teleclass network thatbrought the authors together in cooperating on a Go playing program.andM;Research.andP;  A significant part of our knowledge of what computers can andcannot do in artificial intelligence comes from experiments with computergame playing--so much so that computer chess has been called the &quot;drosophilaof AI,&quot; i.e.andP;  the preferred test object for experimentation.andP;  This assessmentis based on two very useful properties.andP;  1) Games of strategy formmicroworlds of just the right complexity (simple enough to be easilyformalized, hard enough to tax computational resources) to develop and testour growing arsenal of artificial intelligence techniques.andP;  2) Progress canbe measured accurately in terms of improved playing performance--a chessrating or a Go rank are much more objective measures than exist in most otherapplications of knowledge engineering.andM;What to Work On?andM;We took up game-playing programs as a side-line in 1983 based on acombination of factors: personal interest, the view that there was stillunexplored land, and the conviction that knowledge engineering must beapproached empirically in a microworld where performance can be measuredobjectively, accurately, quantitatively.andP;  There was a lot of experience andinformation about chess playing programs, and computer chess appeared to bein a relatively mature stage where success came from doing the same thingbetter and faster.andP;  Comparatively little was known about computer Go andother games.andP;  Go has a reputation for being the most profound game ofstrategy, thus may be one of the hardest to program, and hence a fertilefield for experimentation.andP;  We are aware of four Ph.D.andP;  dissertations writtenon computer Go [5, 13, 19, 26].andP;  In contrast to chess, computer programs thatplay Go were still in their infancy, playing so poorly that their performancewas essentially off the accepted scale for ranking human players.andP;  Anincreased interest in computer Go could be expected; in particular in Japan,where Go is a national hobby, and the government-sponsored project on FifthGeneration Computer Systems greatly boosted research in artificialintelligence.andM;How?andM;The combination of 1) little existing experience, and 2) an anticipation thatduring the course of the project many competitor projects might emerge,caused us to approach the subject on a broad front, and to design a projectthat emphasized basics and could be redirected to focus on different goalsdepending on where progress appeared most promising as the work evolved.andO;Rather than setting specific goals, we decided on a few directions, on &quot;goalsat infinity,&quot; and embarked on a journey that would lead as far as we couldgo.andP;  These directions included:andM;1.andP;  Design and build a workbench, later called the Smart Game Board, for thedevelopment of game-playing programs.andP;  What do various games have in common,what components can be shared among programs that play different games?andP;  Thisworkbench quickly became a useful teaching tool--a skeleton program to betailored to specific games in student term projects.andP;  Soon it became a usefulvehicle to maintain and enhance an Othello program developed independently[9], and to implement Go-Moku in one semester.andM;2.andP;  The Smart Go Board [12]--a useful teaching and studying tool for the Goplayer to analyze, annotate, store, and print games.andP;  This would ensure asmall but dedicated community of users to help in testing and improving theprogram.andM;3.andP;  Go tactics calculator, expert-guided search.andP;  Goal at infinity: Can aperson play noticeably better using a Go tactics calculator than when herelies on his own wits?andM;4.andP;  Testbed for experimenting with strategies and techniques for playing afull game of Go.andM;The last part of this article is devoted to 4), so let us briefly mention theearlier phase 3), where we attacked the seemingly easier problem ofdeveloping a &quot;Go calculator,&quot; with a function analogous to that of a handheldnumerical calculator.andP;  Its purpose is not to play Go against an opponent, butto assist a human player in those tasks that are better delegated to amachine because they require speed and accuracy, as opposed to expertjudgment.andP;  The human player decides on strategy and calls upon the program tocalculate tactical sequences of moves to achieve a well-defined purpose.andP;  Asthe program builds and traverses a search tree, the player directs the searchand can interactively modify the board if he so chooses.andP;  This approach canbe described as using computers as &quot;amplifiers of human intelligence,&quot; ratherthan as autonomous intelligent machines.andP;  And rather than building acomputerized expert system that tries to capture human knowledge inexecutable form, we investigated 'expert-guided search', where humanexperience and intuition guide the great processing power and fast andaccurate memory towards fruitful goals.andP;  This emphasis on interactive usercontrol investigates computer-aided human decision making.andP;  Games of strategysuch as Go have always served as simplified models for decision making.andP;  Inthe modern era of decision support systems, it is reasonable to assume thatprograms that support gaming can serve as test beds for some aspects ofcomputer support for decision making.andP;  A reasonably objective test of thisgame calculator is easy to arrange: does a player with calculator playconsistently better than without?andM;What can be Foreseen?andM;When this project was started in 1984, hardly any guidance was available: Afew precursors served as warning of difficulties to be expected, noneprovided a model to be followed.andP;  With hindsight gained through five years'worth of experience, it is interesting to compare some of the questions andexpectations we had at the start of the project, and current answers.andM;Foreseen: A Smart Game Board is feasiable as a useful hypertext medium forstoring an annotated collection of games, and browsing through them.andP;  It cansupport a variety of games and run on a low-cost personal computer.andO;Advancing technology quickly solved initial problems such as insufficientmain memory and disk, low screen and printer resolution.andP;  The resultjustifies the years spent in cumulating detailed improvements: The Smart GoBoard is being used by at least 100 Go players to manage their games.andP;  Oneprofessional Go master was it as a teaching tool to exchange games andcomments with his remote students.andM;Might have been foreseen, but the idea evolved during the project: It isfeasible to develop a common user interface that fits entirely into onescreen, powerful enough to handle many different games.andP;  Interaction withdifferent games takes place using the same windows, and, to a large extent,the same operations.andP;  This is possible because the majority of operationsprovided by the Smart Game Board are defined on the game tree, and thus aregame-independent.andP;  So far the user interface has proven to be adequate forGo, Othello, Go-Moku, and chess.andM;Unforeseen: How hard is it to develop a useful Go tactics calculator?andP;  Weexpected to develop an interactive program capable of analyzing and solvingclear-cut tactical tasks identified by an expert amateur user.andP;  This tacticscalculator has proven to be much harder than anticipated, and so far isuseful for only a very limited range of tactical problems: Mostly,complicated ladders and loose ladders, i.e.andP;  forcing sequences in capturing ablock that has no more than 2 or 3 liberties at any time.andP;  With hindsight, ofcourse, we can see why this problem is hard--the interface between humanstrategy and machine tactics requires difficult formalization of intuitive,fuzzy concepts.andP;  To substantiate this point, we can do no better than quotethe operator of Deep Thought (DT), today's strongest chess computer, as itassisted grandmaster Kevin Spraggett in an elimination match for the worldchampionship [7]: 'I was in the fortunate position of being able to watch andassist the possibly first-time cooperation between a grandmaster and acomputer....andP;  Other problems were related to &quot;interfacing&quot; DT with Spraggettor his seconds.andP;  It is indeed hard to translate a question like &quot;can blackget his knight to c5?&quot; or &quot;can white get an attack?&quot; or &quot;what are black'scounter chances&quot; into a &quot;program&quot; for DT, since it just doesn't have theseconcepts.andP;  Translating back DT's evaluations and principal variations (PV) iseasier, but this information is incomplete most of the time.andP;  Indeed, thealpha-beta algorithm generally gives accurate values on the PV only (otherlines are cut off), whereas a human wants to know why alternatives fail.'andO;Given the weak play of today's Go programs, a useful Go tactics calculator isfar off.andM;Unforeseeable: How strong a Go program to aim at.andP;  The lack of experienceprevailing in the fifties and sixties triggered useless predictions about thestrength of chess programs that ranged from wildly optimistic (&quot;a computerwill be world champion within the decade&quot;) to overly pessimistic (&quot;computerswill never beat human experts&quot;).andP;  Simiarly, there was no rational basis forpredicting how strong, or weak, a Go program we could develop.andP;  Withhindsight, observing that half a dozen independently developed programs thatcompeted at recent computer Go tournaments are comparable in strength, onecan conlude that a knowledgeable and dedicated small team can develop a 15kyu Go player (this rating scale is explained later) with an effort of a fewman-years.andM;The Development of Computer GoandM;A brief survey of the history and current state of computer Go serves toplace our project in perspective.andP;  Compared to other games of strategy, inparticular checkers and chess, computer Go started late and, until recently,progressed very slowly.andP;  Many people feel this is due to the inherentdifficulty of Go--a view well expressed in [4] as &quot;The Game of Go--TheUltimate Programming Chalenge?&quot;andM;Work in Computer Go started in the early 1960s [18] and intensified with thePh.D.andP;  dissertations of Zobrist [26, see also 23] and Ryder [19, see also24].andP;  Zobrist relied on pattern recognition, Ryder on tree search.andP;  Both ofthese approaches had already been explored in chess, where the latter, inparticular, has proven its value beyond doubt.andP;  But although these approachescapture part of what Go is about, neither program played as well as abeginner plays after just a few games of experience.andP;  Humans use patternrecognition to a large extent, but their patterns are more complex andabstract than those used by Zobrist.andP;  And pure tree search runs into thehurdle that the branching factor of Go is significantly larger than that ofother games on which this approach has been tried.andP;  Selective search is moreimportant for Go than it is for chess, and setting goals to focus the searchcalls for insight into the posiiton.andM;The Reitman-Wilcox program [17], based on a representation of the board thatreflects the way good players perceive the board, was a step forward.andP;  Theyconcentrated on strategy, adding some tactical analysis late in the project.andO;Their program only reached the level of a novice player.andP;  Bruce Wilcoxanalyzed the strong and weak points of his first program, then rewrote itfrom scratch [25].andM;Since 1985 activity in computer Go has mushroomed.andP;  A strong Go-payingprogram was a goal of the Japanese &quot;Fifth Generation&quot; project, but wasdropped (too hard?).andP;  Several dozen individuals and small teams are nowinvolved in Go programming, and these efforts are beginning to bear fruit.andO;The annual International Computer Go Congress, organized since '85 by the IngFoundation of Taiwan, has provided an arena for competition and a yardstickfor assessing progress.andP;  The best Go programs now play at the evel of 12 to15 kyu, distinctly better than human beginners.andP;  But they have a long way togo as compared to chess, where commercial machines have achieved masterratings.andM;SMART GAME BOARDandM;The Smart Game Board supports two kinds of experiments with game-playingprograms.andP;  First, as a hypertext medium: Its user interface is designed tohelp serious players study the game in ways that are impossible without acomputer.andP;  Second, as a workbench for programming games: Its structureencourages experimentation with different search algorithms and strategies.andO;Neither of these functions is bound to any one game; originally designed forGo, the Smart Game Board was expanded to include Othelo and chess.andM;What is It?andP;  A Tool to Assist Game PlayersandM;The Smart Game Board is a tool to assist game players in the many activitiesthey now perform on a wooden board and paper: Playing, teaching, discussing,analyzing, studying, recording and printing.andP;  A personal computer should makea better tool for some of these activities, but, as with any new application,it is not a priori clear what functions a game workbench can and shouldprovide.andP;  At the very least, it must provide the functions of a wooden board.andO;This is much harder than it seems, because the board is not just used to paymoves: Players talk while pointing at it and rearranging stones at will.andP;  Incomputer jargon, the board is a shared workspace that supports very fast andconvenient editing.andM;A wooden board is more agreeable than a computer screen, and players wil onlyswitch to the computer if it offers additional benefits: Easy annotation,ready access to a library of games and openings, help with tactical analysis,or a strong opponent.andP;  The Smart Game Board has passed the threshold ofusefulness: About a hundred players use it, many say it is their preferredway of studying the game, it has been used at tournaments to record games andbetween rounds as an opening library.andP;  Its versatility is proven byapplications we had not directly designed for: One-on-one lessons byprofessionals, and taking notes during lectures on Go.andM;What Games have in CommonandM;There is no point in trying to make the Smart Game Board general enough to beused for any kind of game--games differ too much to be all brought under onehat.andP;  Our choice of Go, Othello, and chess reflects personal and professionalinterests, but we think they represent a sufficiently diverse sample of animportant class of games: Two-payer board games with perfect information.andO;How do these characteristics make it easier to build a game-independent userinterface?andM;* Two players: Limiting the game to two players, Black and White, reduces thecomplexity of the interface without unduly restricting the set of games.andM;* Board game: The board is a convenient visual representation of the currentstate of the game, and makes it easy to enter a move by clicking or draggingthe mouse.andP;  Throwing dice or drawing cards would make it more complicated toenter a move.andM;* Complete information: If each player always has access to the completestate of the game, there is no need to hide information from one of theplayers.andM;* Sequence of moves: Most games evolve as a fixed sequence of discreteactions (moves) by the players.andP;  Action games ike PacMan on the other hand,where moves come any time and timing is critical, do not fit this model.andM;These common traits allow us to implement the functions presented belowindependently of any particular game.andP;  Renju (Go-Moku) was included in anearlier version; other games that could be added without major changesinclude: Kalah, Checkers, and Connect Four.andP;  It would be harder to integratecard games like Blackjack, Bridge, and Poker, dice games like backgammon, orword games like Scrabble.andP;  We discuss game-specific differences in moredetail later.andM;An Editor for Game Trees.andP;  The Smart Game Board is an editor specialized forgame trees, and its user interface shows similarities with other editors.andP;  Agame is treated as a document that can be opened, viewed, modified, andsaved.andP;  We concentrate on those aspects that distinguish the Game Board fromother editors.andM;The underlying structure of a game is a tree, where a list of properties isassociated with each node.andP;  In its simplest form, the tree degenerates into asequence of nodes, each with exactly one property, a move.andP;  The generality ofa tree is needed to let the user experiment with different sequences of moveswhile keeping the original game intact.andP;  The tree is extended to a directedacyclic graph for opening libraries (different move sequences may lead to thesame position).andP;  The concept of a list of properties at each node is neededto store attributes such as comments referring to the move, marks declaringthe move to be good or bad, or the time left at this point in the game.andM;A game is replayed by traversing the tree: Advancing by one node executes themove stored at that node.andP;  It is useful to provide various ways of movingabout the tree: Depth-first traversal, go to next/previous branch point orterminal node, or search for nodes with specific properties.andP;  General treeediting commands allow one to copy properties, nodes, and entire subtreesfrom one game to another.andP;  More powerful operations on game trees includebacking up values in min-max fashion, or sorting the branches according tothe number of terminal nodes in each subtree.andP;  Go, chess, and Othello playersintuitively understand the concept of a game tree, as it is the simplestnotion powerful enough to capture what they are doing while analyzing a game.andO;If the user enters no alternative moves and thus grows no branches, the treedegenerates into a trunk corresponding to the sequence of moves actuallyplayed.andP;  Playing a move automatically adds a node to the currently activebranch of the tree, adds a move property to that node, and executes the move.andO;Simpler interfaces could be designed for programs that offer fewer services,such as merely playing against a computer, or looking up an opening library.andO;In contrast, the Smart Game Board is a general tool that helps serious payersin unexpected ways.andM;Database for Games.andP;  Database software dedicated to games, such as ChessBase[16], is rapidly becoming an essential tool for serious players, as it helpsthem track large collections of games, standard openings, statistics, etc.andO;Users can order games by openings, play through famous master games, or get aprintout of the games their next opponent recently played.andP;  Today, games frommajor tournaments are quickly made available to subscribers inmachine-readable form.andP;  The Smart Game Board provides similar functions, butis not yet as good a database system as we aim at.andP;  It has been used toorganize 1300 Othello games and therefrom create a library of standard Otheloopenings.andP;  Given an opening position on the board, it retrieves all matchinggames from its database, as shown in Figure 1.andM;Game Server.andP;  Some users working on their own electronic game board orgame-playing program want to have access to Smart Game Board's functions fromtheir own program.andP;  For example, it can be used as an opponent to test thestrength of their programs, it might extract a game from the game library, orit could provide a collection of positions for statistical analysis.andP;  Forthat purpose, the program provides a serial interface where most functionsavailabe to the user can be accessed with textua commands.andP;  The concept of agame server helps us test and tune our Go program, with different versions ofthe program playing each other overnight.andP;  More work is needed to turn thispersonal game server into a service people can connect to and play gamesagainst.andM;Structure of the SystemandM;The structure of the Smart Game Board is designed to separate game-specificfrom game-independent aspects.andP;  It provides slots where each game can plug inits specific routines for the rules (egal move recognition and execution),the user interface (board display, move input, menu functions), and anoptional playing agorithm.andP;  A search engine provides depth-first search anditerative deepening based on game-specific routines for move generation,positive evaluation, and time control.andM;The program is written in SemperSoft[TM] Modula-2 under MPW (MacintoshProgrammer's Workshop) and runs on the Apple[R] Macintosh.[TM]  We lack theresources for porting it to other systems.andP;  The program now consists of atotal of 44,000 lines of code (including definition modules and comments,excluding blank lines).andP;  The distribution among the components is shown inTable 1.andM;The Go program compiles to 500 kBytes of object code, the Othello program to250 kBytes.andP;  In addition, at least 150 kBytes are needed for data structures;if more memory is available, a larger has table and a larger tree areallocated.andP;  Game-specific modules make their presence or absence known byinstalling procedures in some common lower-level module.andP;  This structurefacilitates experimentation with different search algorithms as well asdifferent games, and it allows us to configure different versions of theprogram.andP;  While handling a command, the program switches back and forthbetween game-specific and game-independent routines several times.andP;  Forexample, a click on the board intended to enter a move triggers a call to amouse-tracking routine.andP;  This routine is game-specific so as to give feedbackappropriate to the game, e.g., in the case of illegal moves.andP;  Once the moveis recognized as legal, a new node is added to the tree independently of thetype of game.andP;  Then another game-specific routine is called to execute themove stored in the node.andM;Implementing Go, Othello, Chess, andandM;Nine Men's MorrisandM;So far, Go, Othello, chess, and Nine Men's Morris (Muhle) have beenimplemented.andP;  Go came first and determined structure and user interface.andO;Integrating an existing Othello program in the Go framework caused only minorstructural changes, as Go and Othello are superficially similar: Both have aboard with black and white stones, stones are added to the board and nevermoved, the controlled territory at the end of the game decides the winner.andO;Adding chess, however, required major surgery to make more operationsgame-dependent, such as move input, move representation, and board editing.andO;Whereas in Go and Othello a move is given by a point on the board, chess hasfrom--to moves and several kinds of pieces.andP;  'Minor' differences causedelicate program changes if the Smart Game Board is to retain an elegantstructure throughout its evolutionary adaptations.andP;  For example, moves arecounted by plys in Go, but as a pair of white--black plys in chess.andP;  Theconsequence is that a simple incrementing statement in a display routine getsreplaced by an interpreter for a game-specific descriptor for move-countingand displaying.andP;  Nevertheless, adding chess to the Smart Game Board was aminor task compared with implementing even a rudimentary chess user interfacefrom scratch.andP;  A program that plays Nine Men's Morris was recently added in afew weeks of work.andP;  It benefited greatly from the changes due to chess andadded no new requirements.andM;Go and Othello programs that run on the Smart Game Board have competedsuccessfully in several tournaments.andP;  The original Othello algorithm includedin the Smart Game Board was Brand, which placed second at the 1982 NorthAmerican Computer Othello Championship in Evanston.andP;  Recently, a betterOthello program, Peer Gynt, was created by writing a new evaluation functionand improving the time control.andP;  This work was done in only two man-weeks byusing many existing building blocks from Brand and from the Smart Game Board.andO;An early version of Peer Gynt placed third at the 1989 North AmericanComputer Othello Championship in Northridge.andP;  The chess module is notintended to play, only to manage game collections.andP;  Nine Men's Morris(programed by Ralph Gasser) plays a fair amateur game, but so far we havefound no computer opponents to challenge (none were present at the LondonOlympiad in August 1989).andM;Most of the Smart Game Board's user interface is embodied in a control panelcommon to all games (Figure 3 shows it in a window at the top left of thescreen).andP;  Game-independent operations are defined as motions on a game tree.andO;Game-specific operations (e.g.andP;  setting up positions in chess, entering marksfor annotating Go games) and status information (e.g.andP;  number of captives inGo) are provided in a menu specific for each game.andM;What does it take to add another game to the Smart Game Board?andP;  Agame-specific module that implements two functions:andM;* Recognize, execute, and undo legal moves.andM;* Display the board and track move input.andM;Go-Moku, for example, is played on the same board as Go, and thus required nochange to the board display.andP;  If the surface of a new game differssignificantly from any of the implemented games, it is probably easier tochange some parts of the Smart Game Board to better accommodate this andfuture games, rather than forcing the new game into the current framework ofthe Smart Game Board.andM;EXPLORERandM;Characteristics of GoandM;Assuming the reader knows little or nothing about Go, we attempt to providesome intuition for this game's domain of knowledge, in part by comparing Goto chess.andP;  Several excellent introductory books are available from [3].andP;  Gois a two-person game of perfect information in the sense of game theory; atall times, both players know the entire state of the game.andP;  The playersalternate placing a black and a white stone on some empty intersection of a19 by 19 grid.andP;  Once played, a stone never moves, but it may disappear fromthe board when captured.andP;  A player's objective is to secure more territorythan his opponent, counted in terms of grid points.andP;  In the process ofsurrounding territory by laying down a border of stones that must be 'alive,'fights erupt that typically lead to some stones being captured ('killed').andO;Much of the difficulty of Go comes from the fact that during most of thegame, few stones are definitively alive or dead.andP;  Stones are more or lessvital or moribund, and their status can change repeatedly during the courseof a game, as long as the surrounding scene changes.andP;  Only when the game hasended can all stones be classified definitively as alive or dead.andP;  Thus 'lifeor death,' the key concept of Go, exhibits a split personality.andP;  As anopeational concept during the game, it is the most important factor inestimating potential territory and for assessing the chances of battle, butis rather fuzzy.andP;  It becomes more and more precise as the game progresses,and is a well-defined concept used for counting territory when the game hasended.andP;  The game ends when neither player can find a profitable move and allpoints are classified as one of black, white, or no-man's-land.andP;  Thissituation typically arises after about 200 to 300 moves have been played,with anywhere between 60 and 90 percent of the 361 grid points occupied.andO;Whereas in chess we count a move (by a white piece) and counter-move (blackpiece) as a single move, in Go we count the placement of each single stone asa move.andP;  Even keeping in mind that a Go move corresponds to half a chess move(a 'ply'), it is evident that a Go game can take a long time.andM;Professional games last one to two full days.andP;  As an extreme example from the1988 Honinbo Title match, the defending champion Takemiya spent 5 hours and 7minutes on a single move.andP;  The rich tradition of Go records instances ofgames that took months.andP;  Kawabata Yasunari, winner of the Nobel Price forLiterature in 1968, considered his novel 'The Master of Go' [8] to be hisfinest work.andP;  It is the chronicle of a single game, played in 14 sessionsfrom August through December of 1938, a contest for supremacy between theheretofore invincible old Master of Go, Honinbo Shusai, and his youngerchallenger, Kitani Minoru.andP;  It is a moving tale of the contest betweentradition and change, and, ultimately, between life and death.andM;If chess is a model of a single battle (as fought thousands of years ago), Gois a model of war: Typically, several loosely interacting land-grabbingcampaigns and battles proceed concurrently.andP;  Go is a great game ofsynchronization: The stronger a player, the better he is able to coordinatehis campaigns and disrupt the coordination among enemy forces.andP;  Multipurposemoves are the most effective, such as a 'splitting attack' that wedges inbetween two enemy groups, or a move that threatens to kill an enemy group andextends one's own territory at the same time.andP;  Typically one player has theinitiative, called 'sente,' which enables him to play strong threats thatleave the opponent little choice but to respond locally.andP;  Thus the playerwith sente can choose the field of action to suit his goals, whereas hisopponent, said to be in 'gote,' &quot;follows him around the board.&quot;andP;  Thesente/gote relationship alternates between the players, but among opponentsof different skill, the stronger player will manage to keep sente most of thetime.andM;Intuition and experience let a player estimate the numerical value of eachmove he considers.andP;  In the opening, a typical move may be worth about 20points (of 'equivalent territory').andP;  Move values may be highest in the middlegame, but then they decrease steadily towards the endgame, where fights mayerupt over a single point, or even 'half a point.'andP;  This phenomenon ofdecreasing value of a typical move as the game progresses causes timing to beof the utmost importance.andP;  If a move is estimated to be worth x points in alocal context, it must be played at just the right moment, when the value ofother moves is also about x.andP;  If played too early, the opponent may ignorethis move and reply with a bigger one elsewhere, perhaps gaining sente.andP;  Ifplayed too late, when the value of other available moves has diminished, theopponent may prevent it, even at the cost of ending in gote.andP;  Playersanalyzing a game are always debating which move, among several good ones, is'the largest.'andM;A handicap system makes it possible to balance players of different skillwithout changing the nature of the game much.andP;  The weaker player starts byplacing anywhere from 2 to perhaps 13 stones on the board.andP;  In Japanese Go,these stones are placed in a fixed pattern on 'handicap points.'andP;  In ChinesseGo, the weaker player places them anywhere--he starts with x free moves.andP;  Thehandicap system defines a fairly accurate rating scale, illustrated in Figure4.andP;  Player A is x stones better than B if the chances become equal when Breceives x handicap stones.andP;  Playing strength of amateurs is measured on ascale where one unit corresponds to a handicap stone.andP;  A very weak player maybe 20 kyu, implying that he receives 10 handicap stones from a 10 kyu, who inturn receives 9 handicap stones from a first kyu.andP;  A first kyu 'takes Black,'i.e.andP;  plays first, against a first dan, who receives 5 stones from a 6 dan.andO;That's about as high as the amateur scale goes.andP;  Above that, there is aseparate scale for professionals, from the first (lowest, perhaps equal to anamateur 6 dan) to the 9th (highest).andP;  The professional scale has a fingergrating: 9 skill levels are compressed into a difference of about twohandicap stones.andP;  As computer Go is in its infancy, one would like to buildon the mature experience with other games, but such experience does nottransfer readily.andP;  At chess, for example, computers owe their spectacularprowess more to the computer's speed at searching than to its knowledge ofchess lore.andP;  But experience with the computer chess approach of full boardsearch does not apply directly to Go, for two reasons:andM;* Branching factor.andP;  As Go is played on a 19 * 19 board, the number of legalmoves decreases from 361 at the start to several dozen at the end, creating atree with an average branching factor of about 200, as compared to abranching factor of about 40 legal moves from a typical chess position.andP;  Thislarger fan-out may be compensated partly by the fact that in Go a greaternumber of move sequences (permutations of each other) lead to same positionthan is the case in chess.andP;  (This phenomenon is due to the fact that almostall Go moves onto an empty grid point are legal, thus they can be played atany time, whereas many chess moves cease to be legal after some other pieceshave moved).andP;  Thus transposition tables that detect positions analyzedearlier promise to be relatively more effective in Go than in chess.andP;  Still,we must assume that the vastly larger search space of Go greatly reduces thedepth of feasible search.andM;* Position evaluation.andP;  Material and mobility, the dominant factors in chessevaluation functions, are easily computed.andP;  In Go, possession of territory isthe closest equivalent to material possession in chess, but its evaluation ismuch more subtle: Except at the very end of the game, a player's claim toterritory can always be challenged.andP;  Go has no clear analog to chessmobility; perhaps 'shape' comes closest, but good and bad shape are hard tomeasure.andM;Whereas success in computer chess was achieved mostly by sidestepping theissue of knowledge engineering, and using fast search to compensate formeager chess knowledge, the analogous recipe is unlikely to lead tocomparable success in Go.andP;  The insight that both domain-specific knowledgeand search are of critical importance makes Go a more diverse and balancedtest bed for artificial intelligence research than chess is.andP;  Computer Go maywell become the new &quot;drosophila of AI.&quot;andM;Despite the large branching factor, strong players routinely look 10 to 20moves ahead when a fight demands it--an activity called 'reading.'andP;  Thisperplexing term suggests that a player, at that moment, is not free to lethis imagination roam, but simply has to discover what is given--whether aplausible, perhaps forced, sequence of moves works or does not.andP;  Go does knowthe concept of narrow and deep search, as does chess, but with a difference.andO;'Reading' is limited to a local scene, say a 5 by 7 corner, and never extendsto the full board.andP;  Even if reading guarantees a win in a local battle, thatdoes not necessarily mean much--the enemy might ignore this battle and getcompensation elsewhere.andP;  A separate, more intuitive mental act is required toassess the relevance of such a local search to the overall situation.andP;  Sofar, there is no alternative to the vast amount of Go knowledge accumulatedby analyzing thousands of professional games each year, compiled anddistilled in hundreds of Go books and journals.andP;  Explorer is designed toexplore the feasibility of a knowledge-based approach to computer Go,augmented by focused tactical lookahead in local fights.andM;What Aspects of Knowledge EngineeringandM;are Relevant to Go?andM;It is useful to distinguish four major steps in the task of formalizingknowledge: Acquisition, selection, representation, and use.andP;  The nature anddifficulty of each step differs from application to application.andP;  Acquisitionand representation are most widely discussed in the literature, but turn outbe non-issues in our project of formalizing Go knowledge.andP;  Selection and use,on the other hand, are critical.andM;Knowledge acquisition.andP;  How do you get at the subject matter knowledge thatyou may want to capture?andP;  In contrast to other applications where thisknowledge may be scattered and needs to be painstakingly assembled, we haveall the Go knowledge at hand necessary at this stage of our project--mostlyas the experience of Ken Chen, amateur 6 dan.andP;  It is interesting to reflecton the fact that most progress in computer chess is due to amateurs of mediumplaying strength--strong chess players were evidently not essential to thedevelopment of champion chess machines.andP;  This reflects the fact thatcomputers can play amazingly powerful chess without much explicit chessknowledge.andP;  We expect that explicit representation of game-specific knowledgewill be more important for Go than for chess.andM;Knowledge selection.andP;  Selecting a 'domain of discourse or competence' thatmatches the program's abilities is the crucial task.andP;  At this stage it ishopeless to develop a Go program by trying to capture as much Go knowledge aspossible.andP;  And if we managed to get a lot of knowledge into a system, itwould probably get &quot;confused&quot; and not know how to use it.andP;  The key designissue in this knowledge engineering task is an expert assessment of whatsmall part of the vast collection of Go lore can be programmed and willresult in increased playing strength.andP;  Emphasizing fundamentals, we try tomake Explorer understand concepts such as: What stones are dead and should begiven up, what groups are unsafe and should be protected or attacked, whatblocks are important and deserve high priority.andM;Knowledge representation.andP;  The question as to whether this knowledge isexplicitly represented, say as rules in some appropriately chosen notation,or implicitly in program fragments, has been decided by pragmaticconsiderations of expediency.andP;  At this early stage of the Explorer project,the choice is overwhelmingly in favor of procedural representation ofknowledge--there is less overhead in getting started.andP;  Some aspects of Goknowledge, such as the beautifully geometric nature of patterns, clearlyinvite the design of a pictorial language to specify condition-actionrules--for example, as generators for 'tesuji' moves, the trademark of ahighly skilled player.andP;  Such notations have been developed [15], but theirdesign and efficient implementation is a project in its own right.andP;  [21] isanother example of explicit knowledge representatin, where patterns areencoded not pictorially, but verbally in terms of standard Go concepts.andP;  Incontrast, we have chosen not to tackle the general issue of assessingadvantages and disadvantages of various representations of knowledge, but tofocus on the specific question of what is feasible for a program undercontinuous development that has to make a move in 20 seconds on the average.andM;Putting knowledge to good use.andP;  If knowledge selection is the key designissue, knowledge use is the key implementation problem.andP;  The major source ofdifficulty is the fact that human knowledge is ubiquitouslycontradictory--for every proverb there is a counter-proverb.andP;  In Go, the goalof maximizing territorial claims contradicts, or at least competes forresources against, a dozen other goals, such as influence, safety, makinggood shape, attacking or restraining opponent forces.andP;  Explorer has two dozenmove generators that all scream for their respective goals.andP;  In a latersection we show how the structure of Explorer attempts to coordinate andfilter their screaming.andM;Go Knowledge: Design and WindfallandM;Among the Go concepts designed into Explorer, influence is the most basic.andO;Any stone radiates influence across the board: Its influence peaks at thelocation of the stone, and decays exponentially with distance.andP;  Thesuperposition of the influence of all the stones on the board creates a fieldof force, a terrain that determines the structure of the board at thismoment.andM;Another basic concept of Go is that of a block: A set B of stones of the samecolor such that any two stones in B are connected by a sequence of stones inB, with any consecutive pair horizontally or vertically adjacent.andP;  A block is'strongly connected,' and its stones die and are removed in unison when theylose their last 'liberty,' i.e., when there is no free point adjacent to anystone in the block.andP;  Blocks, more than single stones, are the basic buildingblocks of Go positions.andM;'Block' is a rigorously defined concept essential for checking the legalityof moves, but a block is too small a unit for discussing the quality ofmoves.andP;  For this we need two higher concepts, 'chain' and 'group,' that turnout 'o be fuzzy.andP;  The intent of these concepts is clear, but their definitionis not.andM;A chain is a set of blocks that, under normal circumstances, can be connectedinto a single block at will, even against (most) measures taken by theopponent.andP;  A chain is a 'potential block,' and for purposes of planning canbe treated as such.andP;  Many chains will turn into block as the game progresses,but there are exceptions: A higher level of planning may decide that theconnectivity of a particular chain is not worth preserving (for example,during a 'ko fight').andM;A group is a set of chains that typically fight together--an attack on anychain in a group is an attack on all of them.andP;  Like an army that can operateand survive independently, it has a claim to territory, and many groups willturn into the boundary of a single territory as the game progresses.andP;  Butthere are lots of exceptions--groups split and merge routinely, perhapsaccording to the players' plans, often dictated by the unpredictable whim ofthe fortunes of war.andM;Figures 5-8 illustrate these concepts, and the results of Explorer'sanalysis, on half a board in the early stage of a game.andP;  There are threenontrivial blocks (see Figure 5): The two stones labeled 11, two adjacentstones labeled 9, and three adjacent stones also labeled 9.andP;  All other blocksconsist of a single stone.andP;  The labels identify chains.andP;  The two diagonallyadjacent stones labeled 12 are not currently a block, but can be turned intoone whenever black desires, as white would need two consecutive moves toseparate them.andP;  The same argument explains chains 9 and 6.andP;  The two chains 7and 11 are connected for most practical purposes, but if a fight erupts lateron, white might wedge in between and separate them.andP;  Explorer considers themto be two chains, not one.andP;  Figure 6 shows the combined influence wielded byall these stones, measured on a scale from 1 (low) to 64 (high) in favor ofblack or white.andP;  As an example, notice how the gap between chains 11 and 7 inFigure 5 is under a strong black influence of 50 units; at the moment, thissquare is under black's control.andP;  The lower right corner is under very stronginfluence exerted by chain 9, and will almost certainly turn into whiteterritory.andP;  The black stone 8 is dwarfed by the white chain above it, andthus exerts little influence.andP;  It will most likely end up as a prisonerinside white's territory, but before that fate is final, it has some nuisancevalue ('aji')--it might link up with chain 12, or, less likely, support ablack invasion of the corner.andM;Influence combines with chains to identify groups, shown in Figure 7 labeledby their group safety.andP;  Safety ranges from 0 (hopeless) to 64 (totally safe).andO;The two chains 11 and 7 in Figure 5 are now clearly identified as a singlegroup, a fighting unit.andP;  So are the single stones labeled 10 and 13 in Figure5.andP;  Experience shows that these two stones, or any two stones on the thirdline separated by two empty spaces, control the territory between the belowthem; this know-how is preached in every beginner's book.andP;  Explorer has noexplicit concept 'two stones on the third line separated by two emptyspaces,' and thus can have no explicit rule about them.andP;  But Explorer seemsto know this fact anyway, as reflected by the relatively high influence onthese points, as shown in Figure 6.andP;  The influence measure was tuned toproduce a reasonable result on such standard configurations.andP;  Unlike acollection of explicit rules that can never capture all situations, influenceapplies to all configurations, and gives reasonable results for most.andP;  It isalso used to define a territorial claim for each group, shown shaded inFigure 7.andP;  This analysis of the board is updated after each move.andP;  Figure 8shows the effect of a single move in the position of Figure 7.andP;  Left: A blackinvasion lowers the safety of white's 2-stone group from 47 to 13, andenhances the safety of black's group to the right from 47 to 51.andP;  Right: Awhite 'peep' that threatens to break black chain 6 drastically reduces itssafety from 46 to 28 and 4.andM;A last comment on knowledge selection.andP;  Explorer is a weak player playingother week players who are likely to exhibit typical beginners' shortcomingsin their repertoire of techniques.andP;  It is tempting to design tricks into it,that is, schemes and techniques that stand a good chance of catching a noviceunaware, but are basically unsound and will be refuted by an alert strongerplayer.andP;  Inspired by Bobby Fischer's famous creed: &quot;I don't believe inpsychology, I believe in strong moves,&quot; we tried to avoid falling into thistrap.andP;  Although tricks might lead to short-lived success, they are sure tolead into a dead end, as tricks, by definition, contradict general truths,and will only aggravate a problem inherent in knowledge engineering: Thatdifferent rules contradict each other.andP;  Any expert player will recognize theGo concepts we aim at as belonging to the classic fundamentals of Go lore.andM;Structure of ExplorerandM;Explorer's knowledge is represeted internally in four different ways:andM;(1) Relationships among stones on the board are represented by three types offrames: Blocks, chains, and groups.andP;  Each has eight to thirty slots, filledby attached procedures at the start of each move decision cycle.andM;(2) Knowledge concerning local urgent Go patterns is implemented as patternrecognition procedures.andM;(3) Josekis, local urgent moves in a corner opening, are stored separately asa tree on disk.andM;(4) Knowledge concerning moves to achieve specific goals is scattered in twodozen move generators in implicit production rule form.andM;Explorer's Go knowledge is the major sourcefor its decision making.andP;  Notethat with the exception of tactical information, Explorer's knowledge is allderived from the present position.andP;  The move generation and selection processis shown in Figure 9.andM;Experience and Current WorkandM;Reviewing the games Explorer played in the November 1988 InternationalComputer Go Congress in Taiwan, and in human tournaments in New Jersey andOklahoma in early 1989, we observe that our knowledge-based approach tocomputer Go is feasible for developing a low-related amateur.andP;  Knowledge ispower: Its knowledge of group safety and block values alone gave Explorer anadvantage over most other Go programs, as reflected in its strong performancein large scale fighting during the mid game stage, in most cases making endgame play irrelevant to the win/loss results.andP;  As is the case in chess, acomputer's style of playing is different from people's.andP;  Explorer committedbigger blunders than its human opponents, but often exhibited betterpositional understanding than human players of equivalent strength.andP;  Exploreris now a non-voting member of the American Go Association rated 15 kyu.andM;With that official status it accomplished its purpose as a guinea pig and weimmediately raised our level of ambition.andP;  Ken Chen believes in capturingcrucial Go knowledge.andP;  He redesigned the position analyzer and produced GoIntellect, a program with a much improved understanding of Go.andP;  AndersKierulf produced Swiss Explorer, a relatively solid player that improved onthe components Explorer already had.andP;  In August '89 Go Intellect won theNorth American computer Go championship at Rutgers 4:0,and a week later inLondon Swiss Explorer won the Computer Go Olympiad in a 10-player round-robintournament 8:1.andM;Experience with Explorer and its improved successors clearly shows that usingan additional source of knowledge to advantage is much harder than making theadditional knowledge available to the system.andP;  Knowledge may backfire--moreknowledge does not necessarily mean better performance.andP;  Different sources ofknowledge will suggest different urgent moves that conflict with each other.andO;The coordination of all knowledge sources in the system is the hardestknowledge engineering task in the Explorer project.andM;Some knowledge of importance to human problem solvers amy be of little valueto a machine.andP;  For example, human players memorize standard corner openingsequences, called joseki, because they are safe and save a lot of thinking.andO;It is easy to implement such book knowledge, and Explorer has a large josekilibrary on disk [6].andP;  But it takes considerable strategic understanding totake advantage of sophisticated opening sequences, and today's programs arelacking in this respect.andP;  During computer Go tournament, we turned Explorer'sjoseki option off, in order to increase the chances of middle game strategicfighting, where we felt Explorer had an advantage over other programs.andM;Almost all Go knowledge is heuristic, and thus imprecise.andP;  We continuallyattempt to refine our programs' knowledge in order to reduce conflicts andimprove performance, and investigate additional Go concepts that canprofitably be captured and used.andP;  As computer chess has proven repeatedly,game playing is an experimental subject where predictions are difficult.andP;  Butwe believe that an expanded pattern library may capture part of the conceptsof tesuji and aji, and serve as move generators that focus search on goalsthat would otherwise be lost beyond the horizon.andP;  Explorer had no concept ofone of the most important aspects of Go: Coordination among several battles,as discussed in Section 1.andP;  Synchornization of campaigns is a major extensionbeyond our programs' current structure.andP;  As a step in this direction, we haveexperimented with making use of the concepts of 'sente' and 'gote' in theendgame, where most scenes of action are independent [11].andM;Tactics is the one aspects of game-playing amenable to exact calculation.andO;Explorer's computing power was woefully inadequate for solving tacticalproblems it was aware of.andP;  Improving tactical prowess is an open-ended routeto a stronger Go program--no inherent limitation can be seen as yet.andP;  Strongchess machines use special-purpose hardware to generate and evaluate 100 to1000 times more positions per second than a conventional microprocessorcould.andP;  We are not aware of any work on Go hardware, but that's an obviousapproach to investigate.andM;What motivates researches to pursue this never-ending race for strongercomputer players?andP;  Computer game playing is one of the few cases in the fuzzyarea of knowledge engineering where performance and progress can be measuredwith remarkable accuracy, and the causes that affect performance can beidentified.andP;  Computer chess, for example, has shown that you do not need tounderstand much about chess at all in order to play at the level of aninternational master, all you have to do is to look at 1 million positionsper second.andP;  This insight may not generalize beyond chess, but it is animpressive statement about the power of computation.andM;CONCLUSIONandM;Computer Go stands today where computer chess was 20 years ago.andP;  Among dozensof programs, each one seems to follow its own approach, and the most visiblecharacteristics they share are a very low amateur level of play, and a lot ofhope.andP;  It was impossible, two decades ago, to predict with any degree ofassurance how far and how fast computer chess would progress, and it isimpossible today to predict how successful computer Go will be, and what ittakes to get there.andP;  The only road to insight and progress is hard,trial-and-error experimentation.andP;  Explorer is one data point along this road.andO;It tackles a difficult issue head on: Can a dumb program make good use ofclassical Go knowledge?andM;Acknowledgments.andP;  Thanks to Bill Hargrove, Martin Muller, Monty Newborn, JimStein, and Ken Thompson for helpful comments.andM;REFERENCESandM;[1] American Go Association, P.O. Box 397, Old Chelsea Station, New York, NY10113.andM;[2] Computer Go.andP;  D.W.andP;  Erbach, Ed., 71 Brixford Crescent, Winnipeg, ManitobaR2N 1E1, Canada.andM;[3] Ishi Press International, 1400 North Shoreline Blvd., Bldg.andP;  A7, MountainView, CA 94043.andM;[4] Bradley, M.B.andP;  The Game of Go--The Ultimate Programming Challenge?andO;Creative Computing 5, 3 (Mar.andP;  1979), 89-99.andM;[5] Friedenbach, K.J.andP;  Abstraction hierarchies: A model of perception andcognition in the game of go.andP;  Ph.andP;  D. dissertation, Univ.andP;  of California,Santa Cruz, 1980.andM;[6] Ishida, Y. Dictionary of Basic Joseki, Vol.andP;  1, 2, 3.andM;[7] Jansen, P. DT as Spraggett's second in Quebec.andP;  Msg on electronic news,Feb. 17, 1989.andM;[8] Kawabata, Y. The Master of Go.andP;  Perigee Books, NY, 1981.andP;  Originallypublished in Japanese, as 'Meijin', in 1951.andM;[9] Kierulf, A. Brand--an Othello Program.andP;  In M.A.andP;  Bramer, Ed., ComputerGame-Playing: Theory and Practice, 197-208, Ellis Horwood, Chicheester, 1983.andM;[10] Kierrulf, A. Computer Go Bibliography.andP;  Part 1 in [2] (Winter 1986/87),17-19; part 2 in [2] 1, 3 (Summer 1987), 15-19.andM;[11] Kierulf, A. Human-Computer Intersection in the Game of Go.andP;  In&quot;Methodologies for Intelligent Systems&quot;, Z.W.andP;  Ras and M. Zemankova, Eds.,andO;North Holland, 1987.andM;[12] Kierulf, A., and Nievergelt, J. Computer Go: A smart board and itsapplications.andP;  Go World No.andP;  42, Winter 1985/86, 62-65, Ishi Press, Tokyo.andM;[13] Lehner, P.E.andP;  Planning in adversity: A computational model of strategicplanning in the game of go.andP;  Univ.andP;  of Michigan, Ph.andP;  D. dissertation (1981).andM;[14] Levy, D.N.L.andP;  (Ed.).andP;  Computer Games II.andP;  Springer Verlag, New York,1988.andM;[15' Mano, Y.andP;  An Approach to conquer Difficulties in Developing a Go PlayingProgram.andP;  J. Info.andP;  Proc.andP;  7, 2 (1984), 81-88.andM;[16] Nunn, J. Life with ChessBase.andP;  ICCA J.andP;  (International Computer ChessAssociation) 11, 2/3 (June/Sept.andP;  1988).andM;[17] Reitman, W., and Wilcox, B.andP;  The structure and performance of theinterim.2 Go program.andP;  In Proceedings of IJCA-6 (Tokyo, August 20-23, 1979),711-719.andM;[18] Remus, H.andP;  Simulation of a learning machine for playing Go.andP;  InProceedings of IFIP Congress, North Holland, 1962.andM;[19] Ryder, J.L.andP;  Heuristic analysis of large trees as generated in the gameof Go.andP;  Ph.D.andP;  dissertation, Standford Univ., 1971.andM;[20] Shannon, C.E.andP;  Programming a computer for playing chess.andP;  PhilosophicalMag.andP;  41, 314 (1950), 256-275.andM;[21] Shirayanagi, K.andP;  A new approach to programming Go--Knowledgerepresentation and its refinement.andP;  In Proceedings of the Workshop on NewDirections in Game-Tree Search (Edmonoton, Canada, May 28-31, 1989).andM;[22] Turing, A.M.andP;  Digital computers applied to games.andP;  In Faster thanThough: A Symposium on Digital Computing Machines?andP;  (B.V.andP;  Bowden, Ed.), Ch.andO;25, 286-310, Pitman, London, 1953.andM;[23] Wilconx, B. Zobrist's program.andP;  Amer.andP;  Go J. 13, 4/6 (1978), 48-51.andM;[24] Wilcox, B. Ryder's program.andP;  Amer.andP;  Go J. 14, (1979), 23-28.andM;[25] Wilcox, B. Reflections on building two Go programs.andP;  SIGART News 94(Oct.andP;  1985) 29-43.andM;[26] Zobrist, A.L.andP;  Feature extraction and representation for patternrecognition and the game of Go.andP;  Ph.D.andP;  dissertation, Univ.andP;  of Wisconsin(1970).andM;ANDERS KIERULF is an assistant in computer science at Informatik ETH inZurich.andP;  His research interests include heuristic search and computer gameplaying, user interfaces, algorithms and data structures.andP;  Author's PresentAddress: Informatik, ETH, CH-8092 Zurich, Switzerland.andP;  kierulf@inf.ethz.ch.andM;KEN CHEN is associate professor of computer science at the University ofNorth Carolina at Charlotte.andP;  His research interests include artificialintelligence, in particular heuristic search and computer game playing,knowledge-based systems.andP;  Author's Present Address: Dept.andP;  of ComputerScience, University of North Carolina, Charlotte, NC 28223.andO;chen@unccvax.uncc.edu.andM;JURG NIEVERGELT, professor of computer science, has recently returned to ETHZurich after 4 years as chairman of the Department of Computer Science at theUniversity of North Carolina at Chapel Hill.andP;  His research interests includealgorithms and data structures, and interactive systems.andP;  Author's PresentAddress: Informatik, ETH, CH-8092 Zurich, Switzerland.andP;  jn@inf.ethz.ch.andM;Permission to copy without fee all or part of this material is grantedprovided that the copies are not made or distributed for direct commercialadvantage, the ACM copyright notice and the title of the publication and itsdata appear, and notice is given that copying is by permission of theAssociation for Computing Machinery.andP;  To copy otherwise, or to republish,requires a fee and/or specific permission.andO;</TEXT></DOC>