<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-894-350  </DOCNO><DOCID>07 894 350.andM;</DOCID><JOURNAL>Computing Canada  Oct 26 1989 v15 n21 p36(2)* Full Text COPYRIGHT Plesman Publications Ltd. (Canada) 1989.andM;</JOURNAL><TITLE>Measuring is vital to understanding code; software is anengineering discipline and should be treated as one. (Softwarereport) (column)</TITLE><AUTHOR>Skelton, Jim.andM;</AUTHOR><SUMMARY>Software implementation is an engineering discipline based onscientific principles.andP;  As such, measurement is vital toidentifying and quantifying progress.andP;  At the level of theindividual programmer, measurement establishes clear performancecriteria and self-accountability procedures.andP;  With the case soclear for measurement, it is surprising that so few softwareengineering agendas utilize this productivity tool to its greatestpossible extent.andP;  The key indicators of a given business can bedivided into four metrics.andP;  Generic can be objectively measured,is automatically measurable, language independent and can becost-correlated.andP;  Language dependent is objectively measurable andautomatically measurable, shop independent and is subject to thesame cost validation considerations.andP;  Shop specific, automated,and other use selections are based on the organization'sexperience and may be subjective.andM;</SUMMARY><DESCRIPT>Topic:     Software MaintenanceSource CodePerformance MeasurementProgramming.andM;</DESCRIPT><TEXT>Measuring is vital to understanding codeandM;If you can't measure it, you don't understand it.andM;That thought can be attributed to Lord Kelvin and I'm sure he wasn't talkingabout software when he said it.andP;  But nowhere is this statement moreapplicable than in the software business.andM;Software implementation is not an art; it's an engineering discipline that isbased on scientific principles.andM;In other words, it's measurable.andP;  And if you can't put a measurement onsoftware you really don't know what's going on.andP;  Measurement is vital inorder to identify and quantify progress.andP;  It's the only logical approach tounscrambling code.andM;Measurement provides precision over vagueness, objectivity over subjectivity,and promotes controlled evolution over revolution.andP;  Software engineeringvalues quantitative over qualitative assessment and -- probably a shock tomany programmers -- imaginative rigor over undisciplined brilliance.andM;For the individual programmer, measurement makes performance criteriaclearer, accountability more direct and immediate -- not so much who's doingit wrong, but what's being done right -- and encourages self-accountability.andO;The basic software building block is code.andP;  And unless you can measure thiscode, there's no feedback.andP;  And without feedback -- as anybody in researchand development knows too well -- there's no improvement.andP;  Measuring codemeans managing the systems process that much more effectively ...andO;reinforcing the right decisions, invalidating the wrong ones.andM;The Japanese are fond of saying, &quot;if you raise quality you raiseproductivity, but the converse is not necessarily true.&quot;andP;  Good measurementnot only quantifies problems and determines the impact of change, it alsoraises quality, improves productivity and helps administer software assetssensibly.andM;So the decision should not be if we measure, but how, what and when tomeasure.andM;If measuring has so many advantages, why are so few of us measuring now?andO;After all, we haven't worried too much about it in the past 20 years.andP;  Today,we know that some of the old software panaceas simply don't work any more.andO;And many never did.andP;  We know from experience that there are no magic tools,that major breakthroughs rarely happen.andP;  And we should know, to quote theJapanese again, that improvement will be incremental.andP;  But best of all, todaywe know we have the necessary productivity tools available.andM;Tips for measuringandM;How to measure?andP;  In the past many of us relied on judgment.andP;  Often we settledfor perceived quality, rather than actual quality.andP;  If it looked good to theeye, and presented well, we figured it was okay.andP;  We act like those oldretailers who &quot;eyeballed the inventory&quot; rather than relying on counts (orcomputer reports today).andP;  Measurement can only be achieved effectively byusing automated tools coupled with common sense (objective measures).andP;  Somethings can be automated, others can't be, so any subjective measures we usehave to be tempered by our particular experience.andM;Certain factors are absolutely vital to measure, others (and fortunatelythere are fewer of these) depend on given situations in individualorganizations.andM;Every business has key indicators, whether it's the number of telephonesconnected to a system or the barrels of oil that come out of the ground.andP;  Ona given day there may be fewer phones connected, less oil taken from theground, but there are certain rules-of-thumb these industries go by.andO;Similarly, software has key indicators.andP;  We know how to look for precisefactors, or acceptable error rates, that we can always rely on.andP;  At the sametime we should be able to recognize those factors that do not fit therule-of-thumb pattern, are not precise.andM;For example, the term &quot;earnings per share&quot; is precise.andP;  &quot;Cost per mile&quot; is anexpression that sounds precise but really isn't; it depends on the context,because we could be talking about a car in one case and a 747 jet in another.andO;When we talk about &quot;average cost&quot;, we know that the average can vary over aperiod but the expression is certainly a fair rule-of-thumb, thus precise.andO;So in order to measure we must first understand the limitations of our keyindicators.andM;Using metricsandM;Let's call these key indicators (or rules of thumb) Metrics.andP;  These Metricsfall into four categories: (1) Generic; (2) Language Dependent; (3) ShopSpecific, Automated; and (4) Shop Specific, Other.andP;  We can quickly see thatcategories 1 to 3 can be automated.andP;  We also know that in certain situationswe will not get all the categories because the records are simply no longeravailable.andP;  We want the Metrics to be independent of any particular softwarevendor and fully documented as to how they are calculated.andM;The first of these categories, Generic, is the most important.andP;  It can beobjectively measured, it's automatically measurable, it's languageindependent, and we can validate the correlations to our costs.andP;  A suggestionhere is to use Thomas McCabe's metrics which are endorsed by the U.S.andO;federal government as being the recognized method of measuring certain keyattributes, or qualities, or software.andP;  McCabe terms these attributes asbeing Essential (how well structured) or Cyclomatic (how complex).andM;The second category, Language Dependent, is objectively measurable,automatically measurable, shop independent, and the same cost validationconsiderations apply.andP;  The suggested items to measure here (if we are dealingwith Cobol) are alters, comments, fall-thrus, language violations and linesof code.andM;Category 3 -- Shop Specific, Automated--is objectively measurable,automatically measurable, uses selections based on the organization'sexperience, and uses validated/observed correlations to cost.andM;Some of the items that could be looked at in this category (and here yourexperience will tell you if they're important) are NOTs in IF statements, GOTO's of any type, and permissable nesting levels.andM;With Category 4 -- Shop Specific, Other -- we're into a category whereperception and experience are very important because we are looking at areasthat may be objectively measurable, may be subjective, and may beautomatically measurable with in-house systems.andP;  The operative word here is&quot;may&quot;.andP;  So if you think or feel something is important then include it sothat it can be reflected in the overall weighting.andM;Possible items you might want to include are format, frequency of productionfailures, function points, programmer like/distaste for program, relativemaintenance cost, reputation of code, software environment required, andothers.andM;Now you take all four Metrics, weight them, and come up with a compositescore.andM;Measuring means setting standards that are automatically enforced.andP;  Thisrepresents an important breakthrough for software, bringing it into line withother endeavors, because in no other industry can you operate withoutstandards.andP;  A plumber would not order a custom-sized pipe in a building yetmany programmers have no compunction about propping up unwieldy software withwhatever method they feel is best.andM;The best timeandM;When is the best time to measure?andP;  With new development you have anopportunity to supplement existing methodologies without displacing anythingelse.andP;  You can also measure before putting a new program into production,either early on or after a systems test, and you can insist that a programhave a minimum score before it is accepted for production or maintenance.andO;You can set targets in co-operation with your programmers, say a score of 70minimum to start but rising to 80 after a set period.andP;  Or set any otherin-house standard that makes sense to your situation.andM;It's with existing systems that measuring really pays off.andP;  You can analyseall portfolios or each program before changing it, or you can re-score aftermaintenance.andP;  While low scores should be unacceptable, you can raise yourminimums over a period of time.andP;  Measurement will help you make existingsystems cheaper to maintain, thus giving higher productivity.andM;Measuring will allow you to flush out bad programmers.andP;  There are a lot ofindifferent programmers around, and usually everybody in an installationknows about them, but they hesitate to say anything to them because they knowthat if they &quot;walk&quot; the installation could be in trouble.andM;Non-threateningandM;The positive aspects to programming staff more than out-weigh the negative.andO;Metrics relate to reality and programmers will believe and accept thisreality.andP;  Measuring should be non-threatening; it's both good for theorganization and for the individual.andP;  And measuring can be also used in areward sense, thus presenting a challenge.andM;Your programmers will have a system whereby they can improve their own work.andO;And by giving them free access to measuring tools they can do their ownscoring, be allowed to make their own mistakes, without having somebody lookover their shoulder.andP;  There are many ways that measuring can be used topromote morale -- you can publicize your success by letting people know aboutscores and better quality, scores and higher productivity, scores and lowercosts.andP;  Those who move into data processing's future without the help of newsoftware productivity tools could be walking into a minefield.andM;So know the score: measure code.andM;Jim Skelton is president of CASE-works Inc. in Toronto, the exclusiveCanadian distributor for the products of Language Technology Inc. and AdpacCorp.andO;</TEXT></DOC>