<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-288-404  </DOCNO><DOCID>08 288 404.andM;</DOCID><JOURNAL>AI Expert  April 1990 v5 n4 p46(12)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Object-oriented knowledge bases. (part 2)</TITLE><AUTHOR>Manola, Frank.andM;</AUTHOR><SUMMARY>The use of distributed object managers (DOMs) in object-orientedknowledge based systems is discussed.andP;  DOMs integrateheterogeneous distributed database systems (HDDBMSs) withknowledge-based applications and data sources residing on acomputer network.andP;  A DOM can manage information about networkresources, retrieve objects from an object-oriented database, moveobjects to and from other DOMs, manage methods, and handle datasecurity and recovery.andP;  Its advantages include flexibility, commonprotocols, object granularity, and support for various couplingarchitectures.andP;  A technical description of HDDBMS integrationachieved through DOM architectures is presented.andP;  DOM researchinvolves integrating concepts from programming, databasemanagement, operating systems, distributed AI, and other areas.andO;DOM Breadboard, a simple distributed system that integrates expertand database systems, is described.andM;</SUMMARY><DESCRIPT>Topic:     Object-Oriented Data BasesKnowledge-Based SystemsRelational DBMSExpert SystemsArtificial IntelligenceDistributed Processing.andO;Feature:   illustrationchart.andO;Caption:   Distributed object management. (chart)Generic information-engineering system concept. (chart)Integration of business systems. (chart)andM;</DESCRIPT><TEXT>OBJECT--ORIENTED KNOWLEDGE BASESandM;Building a knowledge-based integrated information system (KBIIS) involvesintegrating heterogeneous information resources.andP;  These resources may includeheterogeneous distributed database systems (HDDBMSs), knowledge-based systems(such as expert systems) involving heterogeneous knowledge representations,and conventional application programs and their associated processors, allconnected via computer networks.andP;  These KBIIS systems are theinformation-processing environments of the future.andM;DEFINING THE TECHNOLOGYandM;In Part I of &quot;Object-Oriented Knowledge Bases&quot; (AI Expert, Mar. 1990, pp.andO;26-36), I identified the capabilities required to support general KBIISapplications as:andM;* Integration of existing heterogeneous databases, as in a HDDBMSandM;* Integration of conventional and unconventional data types, as in anobject-oriented database-management system (OODBMS)andM;* Full relational database-management functionality for the integrated data,including appropriate forms of query processing, concurrency control, andrecoveryandM;* Definition of object methods using existing applicationsandM;* Run-time combination of diverse processing components in response to arequestandM;* Support for almost arbitrary levels of integration (essentially from noneto total)andM;* Support for advanced forms of interoperability among cooperating (possiblyknowledge-based) components.andM;These capabilities require a generalization of object-oriented and HDDBMstechnology with advances in related areas such as programming languages,operating systems, and knowledge-based processing.andP;  We refer to this effortas distributed object-management technology.andP;  [1]andM;We can conceive of providing these capabilities through a specific componentwithin a distributed system architecture called a distributed object manager(DOM), although our emphasis is really on the technology regardless of itsdistribution.andP;  The DOM is intended to manage the problem of integratingknowledge-based (and other) application programs and heterogeneous persistentdata or knowledge sources (databases or file systems) residing within acomputing-system network.andM;The DOM considers all these tasks as generic applications.andP;  Acting together,DOMs will create and manage a network-wide object space, comprising objectsformed from the programs, data, and knowledge contained in theseapplications.andP;  DOMs will permit a request or transaction involving objectsthat reside anywhere in the system to be expressed without the requestorknowing the location or format of the objects or methods involved.andP;  DOMs willlocate, access, and, if necesary, move the required information to a sitewhere local object management can be done to satisfy the request efficiently.andO;Unlike distributed database-management systems, DOMs are intended to permitthe execution of arbitrary operations over arbitrary objects on any systemmachine.andP;  DOMs will use knowledge of the object requirements and location todetermine an efficient plan to achieve the desired result (where to executethe methods and what results to transmit).andM;Figure 1 shows a system architecture based on this concept combining featuresfrom HDDBMS and OODBMs architectures.andP;  The architecture can include anarbitrary number of distributed (physical) nodes, each running one or moreapplications.andP;  In this architecture, new components (DOMs) andlocal-application interfaces (LAIs) are used to integrate heterogeneousapplications as a single system.andP;  The intent of these components is toprovide a common object-oriented environment for all system resources.andO;Ideally, DOMs and LAIs make all attached resources within a network,including all attached components and various data and process resourceswithin those components, appear as objects within a common object spaceexpressed (ideally) in a single object model (called the DOM common objectprotocol, or DCOP), for which the DOMs are the object managers.andP;  (These aresimilar to Smalltalk objects; they respond to messages only and returnogjects as results.)andM;Every application in the network has (or is assigned) a DOM that providesmeans for interacting, possibly through other DOMs, with other applicationsin the network.andP;  Many applications on a node may interact via a single DOM.andO;Architecturally, DOMs are generalizations of a HDDBMS global data-managercomponent, as described in Part I.andP;  LAIs, which provide mappings betweenapplications and DOMs, are architecturally generalizations of a HDDBMS localdata interface component (also described in Part I).andP;  LAIs accept messages(for example, data requests) in the DCOP, translate them into local requestsfor processing, and perform the reverse function for messages flowing betweenapplications and DOMs.andM;A Dom thus provides an object-oriented interface to all network resources,concealing aspects of the resources, such as location (some objects in theinterface are not &quot;local&quot; to that DOM but to others) and implementationdetails (objects may be physically realized on existing, nonobject-orientedsystems, such as relational database systems).andP;  Moreover, what appear asobject methods may be dynamically called application programs or othersoftware tools the DOMs can access.andP;  In this case, DOMs are object managersin the sense that they can invoke the right programs on the appropriate databut must work through the existing runtime systems required by these attachedcomponents (or modifications of such runtime systems designed to interactwith DOMs).andP;  Of course, objects may also be realized as &quot;native&quot; DOM objects.andO;In this case, DOMs are object managers in the classic Smalltalk sense.andM;Therefore, DOMs perform the following functions:andM;* Management of information about available resources in the network and howto access themandM;* Retrieval of objects (including method objects) from storageandM;* Movement of objects between DOMs, including both intermediate data andmethod objects to sites where they can executeandM;* Loading methods into various execution environmentsandM;* Scheduling and synchornization of method executionandM;* Registering and storing intermediate or final result objectsandM;* Security and recovery.andM;DOMs are largely insulated from differences in local environments by LAIs.andO;These local differences can include operating-system, data-type, or formatdifferences; differences in setting up execution environments; or hardwaredifferences.andP;  From the DOMs' point of view, LAIs perform these functions:adapting local components or environments to the DCOP object model, providinghooks allowing the DOMs to create and access local data, and invoking localoperations.andM;From the local components' perpective, LAIs allow access to objects in theDOM object space.andP;  (This access may be more or less transparent to thecomponent or its users, depending on implementation details.)andM;Initially, this mapping of data and processing resources into an object spacewill involve only existing components not designed to function in thisenvironment; the mapping may be somewhat difficult and less than optimal inits performance.andP;  However, with increasing use of object technology incomponents, modularity of individual component architectures and developmentof components designed to function within generalized integratedarchitectures (whether specifically DOM-based or not), component integrationwill become easier and performance will improve.andM;At the same time, DOM capabilities will increase by taking greater advantageof system-oriented knowledge to solve more difficult tasks.andP;  To support thesecapabilities, DOMs will incorporate knowledge about the individual componentsin the network (including their capabilities and requirements), enablingDOMs, for example, to prefetch data from remote locations to an applicationin time for the application's request to be handled locally.andP;  DOMs will alsoincorporate knowledge about how to make components cooperate with each otherand increasingly intelligent subcomponents to improve performance andreliability.andM;A DOM-based system architecture provides several useful features:andM;* Flexible access to arbitrary combinations of system resources (processingand data) in support of unanticipated requirementsandM;* A Common protocol for component interaction (the DCOP)andM;* Support for a variety of object granularities, ranging from completeexisting (and possibly nonobject-oriented) components (for example, CAD toolsinterfaced via shared files) to individual instances of data types wherecomponents are designed to interact at that level.andP;  This support allowsintegration at a level appropriate to the system in development.andM;* Support for various component coupling styles.andP;  Control can be logicallycentralized or distributed; attached components can be unmodified andautonomous.andP;  Initial developments can be simple while providing the frameworkfor tighter coupling and cooperation between components as technology evolvesand requirements demand.andM;DOM TECHNOLOGY APPLICATIONSandM;Specific applications showing how distributed object management and extendedOODBMS technology might be used are illustrated later.andP;  [2]  They can be usedto integrate different design tools and databases in engineeringenvironments, heterogeneous systems in business applications, knowledge-basedprocessing in information systems, and support heterogeneous distributeddatabase-management system requirements.andP;  Researchers are already applyingobject technology to these applications.andM;Object-oriented approaches provide a natural framework for integratingheterogeneous components.andP;  As a design approach, thinking of the componentsas objects or collections of objects allows a common design methodology to beapplied at all levels of granularity.andP;  Whether the objects to be integratedare entire systems or individual object classes within a single system, theapproach has several important effects.andM;First, it focuses attention on the definition of the message protocols thatgive access to the object behavioral semantics as implemented by the objectmethods.andP;  In a distributed environment, development of such protocols andsupport for them would be necessary whether the components were heterogeneousor homogeneous.andP;  Second, the approach encourages the definition of mutuallyunderstandable messge protocols so the objects can communicate.andP;  Finally, itminimizes arbitrary syntactic differences among the components (for example,among the query languages if the components are heterogeneous databasesystems).andM;As an implementation approach, the encapsulation provides by the objectparadigm conceals component details.andP;  Moreover, the object provides aframework for interobject communication procedures, such as data conversion,to be incorporated directly in the objects.andP;  In addition, themethod-inheritance concept provides a valuable facility for &quot;homogenizing&quot;heterogeneous components.andM;TOOLS AND APPLICATIONSandM;The realization of the distributed object management vision is illustrated byvarious engineering information systems in development for CAD and CASE.andO;Many of these systems are not (at least initially) designed to bedistributed; an exception is the Engineering Information System (EIS)supporting VLSI design and design management for U.S.andP;  Dept.andP;  of Defenseapplications.andP;  [3]andM;These systems typically have goals such as integrating heterogeneous designtools and design databases, enforcing consistent management and controlmethodologies, providing consistent workstation and user interfaces,supporting data exchange formats and protocols, and supporting design andcomponent reuse.andM;These goals often involve the concept of an integrated information systemallowing a degree of interoperability among heterogeneous design tools,editors of various types, databases, and other system components.andP;  A user ata workstation would be able to call up an engineering design from a repositorand apply a sequence of tools and checkers to it without concern for wherethe various pieces of data or the tools are located in the system, whatprocessors are involved, and so on.andP;  Moreover, the system would automaticallylead users through predefined procedures for various tasks and coordinateusers' activities.andP;  The architecture of such a generic system is shown inFigure 2.andM;This architecture has many features in common with the DOM architecture:andM;* Creation of a system-wide object space through the use of a common objectmodel to allow interoperability among new and existing componentsandM;* A specialized object-management system (which in some cases is distributed)andM;* Specialized adapter components to create interfaces between the commonobject model (and associated object management componets), individualinterfaced tools, and external systemsandM;* Incorporation of database management facilities for persistent storage forlocal components.andM;BUSINESS SYSTEMSandM;The advanced interoperability features of DOMs and enhanced OODBMS technologycan be valuable in streamlining operations by integrating business systems.andO;Figure 3 shows an example of this integration.andP;  [4]andM;The top of the figure shows a customer's purchasing system integrated with adistributor's order-entry system.andP;  This integration eliminates rekeying andpaper and improves speed and accuracy of order tracking.andP;  The bottom of thefigure shows the distributor's purchasing system integrated with the vendor'sorder-entry system.andP;  This integration might enable the distributor to scanvendor databases for a product and order from the one offering the lowestprice or fastest delivery.andM;A key element in establishing such relationships is the easy (in time andcost) integration provided by advanced interoperability features.andP;  Thisintegration provides maximum flexibility in acquiring new customers andchoosing new suppliers.andM;KNOWLEDGE-BASED PROCESSINGandM;Knowledge-based processing will be important in future information systems inseveral ways, including:andM;* Knowledge-based application processing (expert systems)andM;* Assistance to users and designers (intelligent front-ends to assist usersin finding appropriate computing and data resources available in a largeintegrated network)andM;* Resolving differences in data semantics among heterogeneous componentsandM;* Implementing advanced concurrency control mechanismsandM;* Improved efficiency (by techniques such as semantic query optimization)andM;* Intelligent controls (versioning, configuration management, or security).andM;Integrating knowledge-based processing into a system object space could beuseful for several reasons.andP;  First, the generality, flexibility, andextensibility provided by the object-oriented approach should be extended toknowledge-based processing.andP;  For example, knowledge-based components willhave to be modified and new ones added during the system's life cycle.andO;Moreover, these components may use heterogeneous knowledge-representationtechniques either because the different techniques are better adapted totheir specialized requirements or because advances in technology create newrepresentation techniques in the new components.andP;  It seems likely thatobject-oriented techniques for integrating heterogeneous components can alsobe used for integrating heterogeneous knowledge-based ones.andM;Second, integrating knowledge-based processing into the system object spaceenables the behavior of objects to be derived from knowledge-basedprocessing.andP;  In many cases, it may be irrelevant to outside objects whetheran object's behavior is based on conventional or knowledge-based processing.andO;Thus the nature of the processing may be encapsulated within the object andonly the external behavior revealed.andP;  This would provide a flexible way tointegrate both conventional and knowledge-based components within the samesystem.andM;Finally, integrating knowledge-based processing into the object space allowsdatabase-management system components to provide persistent object supportfor knowledge-based applications.andP;  These applications will increasinglyrequire database support facilities, either because they involvedatabase-sized knowledge bases or the raw data they use as input is stored indatabases (to provide access for any other applications programs).andM;The couping of knowledge-based and database systems is an active area ofresearch, [5] and attempts have already been made to &quot;loosely couple&quot;existing knowledge-based and database systems by embedding database callswhere database data is required.andP;  However, performance considerations mightdemand a much tighter degree of integration of knowledge-based and databaseprocessing than can be achieved by such loose-coupling techniques.andP;  [6]andM;Figure 4 shows an example of this integration in maintaining telephonecables.andP;  In this case, an expert system analyzes cable test results anddetermines, before a customer reports trouble, which cables may fail.andP;  (Oneexample is GTE's PROPHET.andP;  [7])  The system downloads the cable informationinto a maintenance status database.andP;  A conventional scheduling program mightuse this data with information on available maintenance crews to generateschedules.andP;  Many of the elements, such as the test results, schedulingprograms, and status databases, may exist before the expert system wasintroduced but may not be directly interconnected.andP;  Interoperability of thesesystems may improve customer satisfaction and streamline the company'sinternal operations.andM;HDDBMS INTEGRATIONandM;A fully general HDDBMS must provide these capabilities:andM;* Extensible query optimization (allowing the incorporation of multiplesystems and those employing multiple data models)andM;* Local and global viewsandM;* Model and data-format transflationsandM;* Ability to support multiple levels of integration, such as the whole systemas one object (loose coupling) and integrated instances (tight coupling).andM;This degree of generality is very difficult to achieve with conventionalsoftware architecture.andP;  However, the use of an object-oriented approachconsiderably simplifies the problem.andP;  This approach provides a place for thevarious required mechanisms, including schema, data model, and data formattranslation; interface definition facilities; encapsulation of internalmechanisms; inherent extensibility supporting addition of new applicationsand databases; and flexible integration.andM;Figures 5 and 6 show progressive HDDBMS types of integration from anobject-oriented approach.andP;  Initially, &quot;objects&quot; could be defined toencapsulate each of three entire heterogeneous database-management systems.andO;This encapsulation allows each database-management system operation to beinvoked by messages from the others.andP;  The resulting integration is extremelyloose; communication has been established among the components, perhaps usinga common message format.andP;  Since the systems implement different data modelsand languages, a system will not understand messages sent by the others; theuser would have to send the appropriate messages to the various systems.andO;Application software allowing results from the systems to be manipulated andmerged might also be provided.andM;Figure 5 illustrates a further degree of integration.andP;  This integrationdefines object methods that implement messages with mutually understandablesemantics.andP;  The approach is basically to surround the database-managementsystem &quot;objects&quot; with a layer of software, or &quot;shell,&quot; that implements acommon interface using the object concept to encapsulate this software.andP;  Inthis case, the common interface is relational and implements the relationalselect operation on all systems.andP;  This approach requires no translation onthe relational system but does require that a translation method beimplemented on other systems.andP;  (The translation method may be a verysubstantial piece of software if required to implement a comlex relationaloperation on another type of system.)andP;  The complete collection of translationsoftware required for a single system in this approach corresponds to theHDDBMS local data interface component or to the LAI in the DOM architecture.andO;In this case, the object-oriented approach does not provide entirely newcapabilities but does provide a natural way to think about how they fit intoan overall design approach.andP;  The example also shows how, as an implementationapproach, object-orientation can directly implement the requiredcapabilities.andM;Figure 6 shows object definition at a smaller level of granularity.andP;  A partobject class has been defined on each of two HDDBMSs.andP;  Although both classesimplement a part  number method, the other methods are different.andP;  In thecase of the display and show methods, the semantics are the same but themethod names are different.andP;  The semantics are different for the othermethods as well, making it difficuklt to integrate parts from the twosystems.andP;  For example, without additional system facilities, the user wouldhave to know which system a part came from to display it (whether to issuethe command show or display).andM;To manage the problem, we use the inheritance mechanism of an object-orientedmodel to define a global part object class, permitting integration of the twolocal part object classes.andP;  The global object class is defined as a supertypeof the existing object classes and as having methods that correspond to themethods possessed in common (at least semantically) by the two objectclasses.andP;  Once this definition has been completed (and assuming theunderlying support mechanisms exist), the system will support a global partobject class, consisting of the union of the parts of the two underlyingobject classes, that uniformly responds to the output the part numberoperations.andP;  This technique has been used to integrate heterogeneous datatypes in systems whose data models support inheritance.andP;  [8]andM;Object encapsulation is used to implement the global part object class thathas been defined.andP;  Part objects residing on the two systems are effectivelyencapsulated with shells; they appear to be instances of the global partobject class.andP;  An output message sent to a global part object residing atDBMS1 will be translated by the translation method to a display message tothe underlying DBMS1-defined part.andP;  The same message sent to one residing atDBMS2 will be translated to a show message to the underlying DBMS2-definedpart.andP;  Similar translations would occur for part number messages sent toglobal part objects.andP;  (In this case the translations would be trivial sincethe message is defined on all the underlying part objects.)andM;Figure 6 shows the encapsulation provided by translation methods for eachindividual part.andP;  However, the encapsulation would probably not beimplemented this way.andP;  Instead, the translation methods for all objectsresiding at each local system would be centralized within a componentdesigned to translate between objects residing at that system and whateverglobally defined objects were to be supported.andP;  This component is the localdata interface in an HDDBMS, or the LAI in the DOM, architecture.andM;As in Figure 5, the translation methods are effectively implementing what inconventional database technology would be called a &quot;view.&quot;andP;  A view is a setof data objects derived or transformed from stored data in the database toallow a user or application to view the data in a more convenient way.andP;  Viewsare generally defined in a database system using the facilities of thedatabase's query language, but those defined in this way are limited by thequery language's capabilities.andP;  Research in HDDBMS technology has establishedthat integration of these systems is similar to a view-mapping problem.andP;  [8] By allowing arbitrary procedures to be integrated into the model as objectmethods, the object-oriented approach provides a convenient way of increasingview-mapping capability.andP;  Some of these facilities can be provided in moreconventional approaches but with more difficulty.andM;These examples illustrate that the object-oriented approach can be valuablein integrating heterogeneous systems and data types.andP;  However, theobject-oriented approach is not a panacea; the conceptual framework itprovides must be supported by implementing the necessary facilities.andO;Moreover, protocol standardization and rationalization is vital becausewithout it, objects may not understand the messages directed to them or beable to direct messages to others.andP;  Users and designers of object-orientedsystems will still require considerable interface support because they mustunderstand a larger set of objects.andM;DOM TECHNOLOGY'S SCOPEandM;Research aimed at developing distributed object-management capabilitiesinvolves integrating concepts from several fields:andM;Programming languages.andP;  Object-oriented programming languages,knowledge-engineering tools and representations, declarative programminglanguages, multiparadigm languages and systems.andP;  Object-oriented programminglanguages provide the conceptual basis for the overall approach, andprogramming facilities are required for defining object methods.andM;Programming language/database interfaces.andP;  AI/database interfaces, such asthose between database systems and PROLOG and knowledge-engineering tools,and persistent/database programming languages.andM;Database-management systems.andP;  Object-oriented, &quot;extended,&quot; and distributeddatabase-management systems; for example, issues in persistent objectrepresentation, efficient object staging in storage hierarchies, object-basedconcurrency control (within and between objects), and extensible distributedquery processing.andM;Operating systems.andP;  Network, distributed, and database operating systems.andO;Issues include remote procedure call mechanisms and distributed name spaceand concurrent process management.andM;Standards.andP;  Data storage and exchange, data definition, and protocolstandards.andM;Knowledge-based systems and distributed AI.andP;  Knowledge representation andprocessing and cooperative problem solving.andM;In addition, the development of the technology for distributedobject-management capabilities involves a wide range of technical issues.andP;  Inmany cases, these issues are research areas in the preceding fields.andP;  Theseissues include:andM;Object models.andP;  The definition of the models describing the objectcharacteristics include whether objects are active or passive, forms ofobject inheritance, characteristics of method definition languages, and howto provide information necessary to perform object-management functions.andM;Object management in distributed environments.andP;  Supporting object movementand storage, object concurrency and sharing, and the integration of multiplecomponent models and interpreters.andM;System architectures.andP;  Which network components must provide DOM functions,how object-management functions are distributed among components, and howthese components must interact to support processing.andM;System security.andP;  Providing adequate protection for system components (andobjects residing on them).andM;Applications and methodologies.andP;  Interactions between applications ofdistributed object-management systems and design requirements andmethodologies.andM;Interest in distributed object-oriented systems is increasing.andP;  [9, 10]  Mostwork has focused on operating systems or programming languages.andP;  Fullgenerality of such systems requires integrating heterogeneous and distributeddatabase technology.andM;Systems combining the required capabilities for KBIIS development illustratefeatures contained in separate database-management system, operating-system,programming-language, and sometimes knowledge-based system components.andP;  Oneof the issues raised by interoperability is whether the separation of thesecomponents will continue.andP;  Each component is extending its scope into areaspreviously handled by the others.andP;  For example, object-oriented anddistributed operating systems, operating system support for database systems,[11] object-oriented programming languages, persistent programming languages,expert and deductive database systems, concurrent programming languages, andincorporating explicit task facilities are all active research areas andinvolve combinations of the capabilities of previously separate components.andM;The effect of bundling these capabilities (particularly the potential forintegrating heterogeneous systems) must be carefully examined.andP;  For example,M. Stonebraker and A. Kumar [12] examined operating-system extensions tosupport database processing and concluded that some, such as generalizedtransaction facilities and distributed file systems, would provecounterproductive to the database system.andP;  (The operating system mightconceal information vital to distributed query optimization or concurrencycontrol mechanisms.)andP;  Similarly, it has been argued that the inclusion ofpersistent data and concurrency in programming languages [13] creates a tightcoupling between the programming language and specific required facilities inthe operating system.andP;  This approach may improve performance, but only if agood match exists.andM;DOM BREADBOARDandM;To gain experience in the problems involved in developing distributedobject-management capabilities, we developed a simple distributed system thatintegrates expert and database systems via a primitive version of thedistributed object-management architecture.andP;  The configuration of thissystem, called the DOM Breadboard (DOMBB), is shown in Figure 7.andM;The DOMBB has three components, GTE Laboratories developed PROPHET [7] todiagnose telephone cable sections likely to fail based on patterns of testresults stored in a database.andP;  PROPHET was implemented using the KEEexpert-system shell from IntelliCorp Inc. (PROPHET is an example of adiagnostic expert system shown in Figure 4.)andP;  Initially, the system wasimplemented to take test results from a file created by an offline program;this program was designed to extract selected test data from a largerdatabase called MARK.andP;  For our experiment, we substituted a subset databasecalled NewMARK for the test file.andP;  NewMARK is maintained using the Oraclerelational database-management system and corresponds to the cable testresults database in Figure 4.andM;To mediate access between these dissimilar components, a DOM was developedusing the Vbase object-oriented database-management system.andP;  [14]  It invokesthe components to handle requests and route necessary messages (requests orresponses) between these components.andP;  To perform this task, the DOM maintainsinternal data on computational and data resources available on the systemusing Vbase's object-oriented persistent storage.andM;LAIs for both PROPHET and Oracle were also developed.andP;  The PROPHET LAItranslates the DOMBB's and its own requests and data formats; the Oracle LAIperforms a similar role for the NewMARK database.andP;  The DOMBB and LAIs supportlocation and representation transparency for PROPHET by allowing it torequest data in terms of its own internal data formats (caled units)regardless of the data's physical location on the network.andM;DOMBB allows PROPHET to request data in two ways: the first, &quot;resourcerequest,&quot; corresponds to a situation in which the requestor knows the name ofthe network resource it requests service from and the message from theresource accepts.andP;  In this case, the resource is NewMARK and the form ofmessage is an SQL query.andP;  DOMBB then handles the routing of the request tothe site of the NewMARK database and translates the resulting relationaltable into KEE units.andP;  This integration is at a relatively low (but stilluseful) level.andP;  This level of integration may be appropriate when, forexample, global transparency is traded for improved performance.andP;  (In thiscase the DOMBB does not need to handle translation of a request expressed ina global data model into SQL).andM;The second type of request is a &quot;concept request&quot; and corresponds more towhat is expected in a generalized HDDBMS.andP;  In a concept request, requests areexpressed in terms of a global data model (very primitive in DOMBB's case)and translated into requests appropriate for the various resources.andP;  Thisapproach corresponds to a tighter level of system integration and providesmore transparency.andM;We're attempting to extend DOMBB-component capabilities to address moregeneral types of attached components and more advanced types of requesthandling.andP;  We're also developing a general object model, with object-basedconcurrency and recovery mechanisms, for a more complete DOM prototypesystem.andM;LOOKING AHEADandM;Future information systems will be developed much more flexibly using avariant of the object-oriented approach.andP;  One requirement in the constructionof such systems will be the integration of heterogeneous components (programsand databases) and the easy reuse of such components to address newrequirements.andP;  Extensions to both object-oriented and heterogeneousdatabase-management system technologies, which I characterize as distributedobject-management technology, will be key components in fulfilling thisrequirement.andM;REFERENCESandM;[1] Manola, Frank.andP;  Distributed Object Management TechnologyTM-0014-06-88-165.andP;  GTE Laboratories Inc., June 30, 1988.andM;[2] Manola, Frank.andP;  &quot;Applications of Object-Oriented Database Technology inKnowledge-Based Integrated Information Systems.&quot;andP;  In A. C. pta (ed.)andO;Integration of Information Systems: Bridging Heterogeneous Databases.andP;  NewYork, N.Y.: IEEE Press, 1989.andM;[3] Linn, J.L., and R.I.andP;  Winner, eds.andP;  Dept.andP;  of Defense Requirements forEngineering Information Systems, Institute for Defense Analysis 1 andamp; 2,Alexandria, Va., July 1986.andM;[4] Clemons, E.K., and F. W. McFarlan.andP;  &quot;Telecom: Hook Up or Lose Out.&quot;andO;Harvard Business Review, July-Aug.andP;  1986.andM;[5] Mylopoulos, J., and M.L.andP;  Brodie, eds.andP;  Readings in ArtificialIntelligence and Databases.andP;  Palo Alto, Calif: Morgan Kaufmann, 1988.andM;[6] Jarke, M., J. Clifford, and Y. Vassiliou.andP;  &quot;An Optimizing PrologFront-End to a Relational Query System.&quot;andP;  Proceedings of the 1984 ACM-SIGMODConference, Boston, Mass., 1984.andM;[7] Prerau, D.S., A.S.andP;  Gunderson, and S.P.andP;  Levine.andP;  &quot;The PROPHET ExpertSystem: Pro-Active Maintenance of Telephone Company Outside Plant.&quot;andO;Proceedings of the Fourth Annual Artificial Intelligence andamp; Advanced ComputerTechnology Conference, Long Beach, Calif., May, 1988.andM;[8] Dayal, U., and H. Hwang.andP;  &quot;View Definition and Generalization forDatabase Integration in a Multidatabase System.&quot;andP;  IEEE Trans.andP;  SoftwareEngineering 10(6) (1984): 628-645.andM;[9] Decouchant, D. &quot;Design of a Distributed Object Manager for theSmalltalk-80 System.&quot;andP;  In N. Meyrowitz (ed.) OOPSLA '86 ConferenceProceedings, ACM, Sept. 1986.andP;  (Published as SIGPLAN Notices 21(11), Nov.andO;1986.)andM;[10] Agha, G., P. Wegner, and A. Yonezawa, eds.andP;  &quot;Proceedings of the ACMSIGPLAN Workshop on Object-Based Concurrent Programming.&quot;andP;  In SIGPLAN Notices24(4), Apr. 1989.andM;[11] Borel, H., ed.andP;  Database Engineering 9(3), Sept. 1986.andM;[12] Stonebraker, M., and A. Kumar.andP;  &quot;Operating System Support for DataManagement.&quot;andP;  In H. Borel (ed.).andP;  Database Engineering 9(3), Sept. 1986.andM;[13] Liskov, B. &quot;Distributed Programming in Argus.&quot;andP;  Communications of theACM 31(3), Mar. 1988.andM;[14] Andrews, T., and C. Harris.andP;  &quot;Combining Language and Database Advancesin an Object-Oriented Development Environment.&quot;andP;  In N. Meyrowitz (ed.).andO;OOPSLA '87 Conference Proceedings, ACM, Oct. 1987.andP;  (Published as SIGPLANNotices 22(12), Dec., 1987.)andM;Frank Manola is on the research staff of GTE Laboratories, Waltham, Mass.andO;</TEXT></DOC>