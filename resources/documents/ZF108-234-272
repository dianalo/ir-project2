<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-234-272  </DOCNO><DOCID>08 234 272.andM;</DOCID><JOURNAL>The Seybold Report on Desktop Publishing  March 5 1990 v4 n7 p3(6)* Full Text COPYRIGHT Seybold Publications Inc. 1990.andM;</JOURNAL><TITLE>Royal vs ATM: the fruits of competition. (comparison ofApple/Microsoft Royal and Adobe Systems ATM desktop publishingsoftware technologies)</TITLE><AUTHOR>Seybold, Jonathan.andM;</AUTHOR><DESCRIPT>Company:   Adobe Systems Inc. (standards)Apple Computer Inc. (standards)Microsoft Corp. (standards).andO;Ticker:    MSFT; AAPL; ADBE.andO;Topic:     Desktop PublishingSoftware PackagesComparisonEnhancementsFontsComputer GraphicsGraphic FormsStandardsRaster ScanCharacter GraphicsSoftware DesignTesting.andO;Feature:   illustrationchart.andO;Caption:   Various character and graphics forms of Royal and ATM compared.andO;(chart)andM;</DESCRIPT><TEXT>Royal vs ATM: The Fruits of CompetitionandM;WE RECENTLY had the opportunity to perform some side-by-side comparisons ofthe Apple/Microsoft and Adobe ATM technologies.andP;  Although it is still tooearly to form any firm conclusions, the results we have seen thus far arecertainly interesting.andM;Different approaches.andP;  As we have noted before, there is a clearphilosophical difference between the approach Adobe has taken toward fontsand font rasterizers and the approach Apple (and now Microsoft) has taken.andO;There are a number of consequences and implications that flow from thesechoices.andM;Adobe: intelligent rasterizersandM;Adobe has tried to place as much intelligence as possible in the rasterizerand to rely on relatively straight-forward &quot;hints&quot; added to the characteroutlines to help the rasterizer cope with the problems that come up whenrendering characters at small sizes and low resolution.andP;  Adobe's ultimateobjective is to build rasterizers that are so &quot;smart&quot; that no hints will berequired at all.andM;For best appearance on &quot;old&quot; Adobe rasterizers (those built into the existingpritners), character outlines to be converted into Adobe Type One formatshould be &quot;regularized&quot; (adjusted so that all features that should be thesame weight are, in fact, the same size and weight) before conversion.andO;Adobe's font conversion software will convert the outline into Type Oneformat automatically, adding any hints that are required.andM;New Adobe rasterizers (such as ATM) will run existing Adobe fonts.andP;  Ifanything, they should make these fonts look even better than they looked whenrasterized with previous-generation Adobe software.andP;  ATM, for example,clearly does a better job of small point sizes at 300 dpi than does the olderAdobe rasterizer built into the current-generation Adobe laser printers.andM;However, since new rasterizers do a better job than previous ones, fontfoundries have the option of being less rigorous with their fonts andproducing fonts that achieve good results on the latest Adobe rasterizer butless impressive results on old Adobe rasterizers--or, for that matter, onrasterizers for Adobe Type One fonts developed by third parties.andM;We are already starting to see this happen.andP;  A couple of font foundries thathave been producing unregularized and unhinted Type One fonts have discoveredthat these fonts are rendered appreciably better by ATM than they are by theprevious-generation Adobe rasterizer.andP;  It is quite likely, therefore, thatcompanies such as Bistream will elect not to invest the time and effort toproduce hinted versions of their Type One fonts, but will continue to sellthe unhinted fonts.andP;  Users with one of the 600,000 or so printers that usethe existing Adobe printer rasterizer (and users of clone printers thatemploy non-Adobe rasterizers) will probably not get as good results withthese fonts as will the next generation of users who have printers thatincorporate ATM.andM;Please note that this caveat applies only to 300-dpi printers.andO;High-resolution recorders typically do not the &quot;hints&quot; and do not pose thesame problems.andP;  Unhinted Type One fonts should look fine on these deviceswith a competent Type One rasterizer.andM;Proprietary technology.andP;  In September, Adobe agreed to publish it Type Onefont specifications so that anyone who wished could develop and market TypeOne fonts, and anyone who wished could develop a rasterizer that will convertType One character outlines into screen or printer bitmaps.andM;Adobe is, naturally, still protecting its own software.andP;  If you use Adobe'ssoftware tools for converting your outline fonts into Adobe Type One format,you will have to pay Adobe royalties on the fonts you sell.andP;  If you use othertools that do not incorporate Adobe code, you have no such obligation.andM;Adobe will also license its rasterizer software.andP;  Thus far, it has onlylicensed this for use for screen displays or as part of an Adobe PostScriptcontroller.andP;  Vendors that wish to support Adobe Type One fonts in theirPostScript clone printers have had to develop their own Type One rasterizer,or license one from someone who has already developed one of his own.andM;We know of a number of companies and organizations that have developed theirown Type One rasterizers.andP;  These include The Company, RIPS, PhoenixTechnologies and the University of California at Berkeley.andP;  There will beothers.andM;Compatibility.andP;  However, just as non-Adobe PostScript interpreters have hadto prove their compatibility with the Adobe implementation, so will non-AdobeType One font rasterizers have to prove their quality against the Adobestandard.andM;As with PostScript interpreters, this is likely to be an on-going process.andO;As Adobe improves its rasterizers (and as font vendors evolve toward relyingon the capabilities of the new rasterizers), the clone rasterizers are goingto have to improve their implementations as well--while, at the same time,being careful not to copy Adobe's code.andM;We expect that all PostScript clone printers will run Adobe Type One fonts.andO;It's just that 300-dpi, text-sized output may look better on some than onothers.andP;  With the Adobe approach, the type output you see is a function ofboth the work of the font foundry and the intelligence built into therasterizer.andM;ATM improvements.andP;  Adobe has recently released version 1.2 of ATM.andP;  Itincorporates several improvements.andP;  The most important of these arecompatibility with Bitstream Type One fonts and improved rasterizing speedfor large-size characters.andM;As we mentioned earlier (see Vol.andP;  3, No.andP;  5, p. 24), Bitstream &quot;reverseengineered&quot; the Type One font format by figuring out what format the originalAdobe rasterizer would accept.andP;  It turned out that there are nuances in theType One spec that Bitstream did not know about because they were not used bythe original rasterizer.andP;  ATM 1.01 (the version currently in the field) willnot run bitstream fonts.andM;Adobe could have said that this is Bitstream's problem.andP;  Instead, it changedATM so that it would accept the Bitstream variation of the Type One format.andM;Version 1.2 also includes speed improvements, which make ATM faster whenrasterizing large type.andM;Royal: intelligent fontsandM;Apple took the opposite approach with its Royal (TrueType) technology.andP;  Itdecided to develop a comparatively simple font rasterizer.andP;  This meant thatAdobe-style &quot;hints&quot; would not be sufficient.andP;  Instead, it developed a fairlyelaborate programming language that allows the font foundry to writeinstructions that specify how the shape of an outline character should beadjusted to fit the &quot;grid&quot; implied by generating a particular point size at aparticular dot-per-inch resolution.andM;All of the adjustments are made by modifying the character outline.andP;  Therasterizer is left with the simple (and very quick) task of simply turning onthe pixels that fall within the character outline.andM;Dropouts.andP;  The problem with this approach is that, as the point size getssmaller and the output resolution gets coarser, it requires an increasingamount of distortion to adapt the character outline to the grid.andP;  Not onlymust the program adjust the character height, width and stroke weights to theoutput resolution, it must also worry about making certain that no criticalportion of the character will be missed by the rasterizing software.andM;We have reproduced on the next page two examples provided by Bitstream thatillustrate this problem.andP;  In both cases you can see that simply adjusting theoverall shape of the character to the grid, then rasterizing it, produces&quot;dropouts&quot;: holes in the character.andM;When we first got the opportunity in December to play with Royal outlinefonts on a Macintosh screen, we were dismayed at the results.andP;  Every font wetried had a significant dropout problem at 12 points and below.andP;  Many haddropouts at sizes up to 16 points or so.andM;Apple told us that the font foundries would correct this by addinginstructions to their characters that adjusted the character shapes at smallsizes to avoid problems with dropouts.andP;  However, of the font foundries wetalked with, only Bitstream was pleased with this approach.andP;  The others toldus that this would make it considerably more difficult to prepare fonts inRoyal format.andM;Apple heard the complaints.andP;  In January, it told the font developers that itwas adding several new functions--including dropout-control logic to itsrasterizer.andM;Dropout control.andP;  Dropout control (also called a &quot;continuity pass&quot;) is anextra step in which, after converting the character outline to a bitmap, thecharacter rasterizer makes an extra pass to fill in any breaks(discontinuities) in the character shape.andM;As you would expect, this extra step takes time (which is one of the reasonswhy Apple did not want to include it in the first place).andP;  So, Apple hasadded a &quot;dropout control&quot; instruction to the Royal language.andP;  If the fontvendor determines that it has coded a font so well that it does not needdropout control, the vendor does not have to use it.andP;  If, however, the vendorfinds that particular characters have dropouts below a particular size, itcan instruct that dropout control be invoked only below that size.andP;  Thismeans that the rasterizer takes the performance &quot;hit&quot; of the extra dropoutcontrol pass only when it is necessary.andM;This is a solution we think will please everyone.andP;  Font vendors can make asmuch or as little use of the dropout-control function was they wish.andP;  Fontsthat require less use of dropout control will rasterize faster than thosethat make extensive use of it.andM;Royal fonts.andP;  Dropout control will make it easier for font foundries toprepare fonts.andP;  However, we still do not know how easy &quot;easier&quot; will turn outto be.andP;  As we noted at the outset, even with dropout control, Royal placesmost of the burden on the programs that are part of each font and eachcharacter within a font.andP;  The better the program, the better the rasterizedfont will look.andM;Thus far, except for Bitstream (which has made a major commitment to convertits fonts into Royal format and has developed tools to enable it to do so),most of the major type foundries we have talked with report that creating aproperly hinted Royal font is a lot of work.andP;  They are either developinginternally their own tools or waiting for better, more automatic tools tospeed the conversion process.andM;Several software companies (including Bitstream) are working on such tools.andO;We probably will not know until later this year how effective these turn outto be.andM;Performance.andP;  Rasterizing speed has been another question mark.andP;  Apple andMicrosoft claim that the simple Royal rasterizer is much quicker than themore sophisticated Adobe rasterizer.andP;  This makes logical sense.andP;  The questionin our minds has been whether the extra processing time required to executeall of the Royal instruction associated with a character wouldcounter-balance the faster speed of the rasterizer.andM;Licensing.andP;  Apple and Microsoft will be delighted to license the Royalinterpreter and rasterizer to anyone who wants to use it (includingprinter-controller manufacturers).andP;  Unlike Adobe, Apple does not supplysoftware tools that will automatically convert existing outline fonts intoRoyal format.andP;  These, it expects, will be provided by third parties.andM;It does, however, provide a nice utility that helps a font foundry debug andtune the Royal hint instructions for a character or a font.andM;Side-by-side comparisonsandM;To get a feeling for how Royal is coming along, we arranged with Microsoft toconduct a comparison demonstration in our office using our computers.andP;  DennisAdler came down from Microsoft with two identical SCSI disk drives loadedwith identical test files.andP;  We connected the two drives to two identicalMacintosh CX computers with two identical display controllers and monitors.andM;We ran Royal (with dropout control) and Adobe ATM 1.01 side-by-side on thetwo machines and printed out copy to the same Hewlett-Packard DeskWriterprinter.andP;  Several days later, after we had received a copy of the new version1.2 of ATM, we ran a second set of tests to compare ATM 1.01 and ATM 1.2.andM;We really had only two Royal fonts to work with: Helvetica, we were told, isin reasonably finished form.andP;  Monotype Times New Roman is not quite as farlong as the Helvetica, but looked reasonably good to us.andP;  The other faceswere pretty much what we had seen before: they all looked ratty below 16points on a Macintosh screen.andP;  None of these faces appeared to includesufficient adjustments to character shape to avoid dropout.andP;  None invoked theautomatic dropout control now built into the rasterizer.andM;The test.andP;  The test that Microsoft uses is a &quot;waterfall:&quot; The first line onthe page is an upper- and lower-case alphabet set in six-point type.andP;  Thesecond line is the same text set in seven point, and so forth.andP;  Each line isset one point larger than the previous one.andM;This exercises the rasterizer over a fair range of sizes.andP;  It also allows youto see exactly what is happening as type is scaled.andP;  In many ways itrepresents a &quot;worst case&quot; test.andP;  Every character on the page is unique.andO;Every character must be rasterized from scratch.andM;Aldus PageMaker was used as the application software package.andM;Display speed.andP;  The total time it takes to display a new character on thescreen includes system overhead, the overhead associated with the applicationprogram, and the time it takes the computer to paint the screen as well asthe time it takes the rasterizing software to create the character bitmap tobe displayed.andM;Doubling the speed of the rasterizer will not cut the time to display text onthe screen in half.andP;  The rasterizer will be faster, but the other overheadswill remain unchanged.andP;  It probably would take a rasterizer that is fourtimes as fast to double the apparent display speed in a test such as this.andO;So, if you see a 2 X increase in display speed through an application programsuch as PageMaker, you are probably seeing something like a 4 X increase inraw rasterizer speed.andM;In the tests we ran with Helvetica and Times Roman, it was clear that ATMgenerated small-size type (below 10 point) faster than Royal, but foranything larger than this, Royal is markedly faster than ATM 1.01.andP;  Thelarger the point size, the greater the speed difference.andM;ATM 1.2 turned out to have less of a speed advantage over 1.01 than we hadanticipated.andP;  It actually appears to be slower than 1.01 for small and mediumsizes and faster only for display sizes.andP;  Adobe's primary objective with ATM1.2 was to improve the appearance of bold type at small sizes.andM;What will these speed differences mean to users?andP;  It is still too early totell for sure.andP;  The specific timing figures for both technologies may changeby the time Royal gets into the field.andP;  (Adobe claims that it is working onstill more speed improvements, and Royal speeds may improve as font foundriesget more experienced at how to code Royal fonts.)andP;  However, it makes logicalsense to assume that ATM will continue to have an advantage at very sizes,and that Royal will be faster for larger sizes.andM;Royal has a fixed overhead per character (regardless of size) involved ininterpreting the program instructions that are part of each character.andP;  Inaddition, small type sizes have the extra burden of the dropout-control pass.andO;However, the Royal rasterizer itself is considerably smaller and simpler thanis ATM, so it makes sense that it would go about the business of generatingbits more quickly than does ATM.andP;  You see this advantage in larger pointsizes.andP;  It takes more bits to fill the outline of a large character than itdoes a small one.andM;In short, although we do not expect to see big differences in documents thatinvolve mostly text-sized characters with a few headlines, from what we haveseen thus far, Royal is clearly faster than ATM in tests such as thePageMaker waterfall.andM;Printer speeds.andP;  Not surprisingly, the same speed advantage carries over tooutput on a printer driven by QuickDraw software in the host Macintosh.andP;  A300-dpi printer character contains four times as many dots as the 72-dpiscreen equivalent.andM;It took roughly half the time to print the waterfall test pages to our HPDeskWriter printer under Royal as it did under ATM 1.01.andP;  ATM 1.2 cut thatdifferential slightly.andP;  No real-life documents are as demanding as thewaterfall; however, it does look as if Royal currently has a speed advantagefor printer output.andM;Caching.andP;  Both ATM and Royal will use available memory for cache store of thecharacter bitmaps that have been computed.andP;  (1)  Since we were running asingle application program (PageMaker) on 5-MB machines, the font cache wasquite large.andP;  Once we had displayed a waterfall, of the character bitmapsrequired were stored in memory.andP;  Displaying the same page a second time wasan almost instantaneous operation!andP;  Even a &quot;restart&quot; did not clear the ATMbitmap cache.andP;  We had to turn the machines off and reboot the to force themto clear the cache.andM;Clearly, with any outline font technology, the user is going to benefit fromas much memory as possible.andP;  The more memory available, the more font/sizebitmaps will be cached, and the less frequently you will have to wait whilethe rasterizer computes bitmaps for the next font/size combination you intendto use.andM;Our experience with ATM thus far is that the time lost in computing characterbitmaps is a real problem on a 2-MB machine.andP;  (We stopped using ATM on 1-MBMacs.)andP;  On a 5-MB machine that is used for only one or two applicationprograms, there is plenty of room for cache storage of the font/sizecombinations a person generally uses.andP;  On a 5-MB machine that runs a varietyof software, the available memory quickly gets eaten up with programs.andM;This poses an interesting system management dilemma.andP;  Running underMultifinder on our Macintoshes, we have found that we tend not to &quot;quit&quot;programs when we leave them, but simply to click on the next file we want towork on (which automatically activates the program required).andM;The result is that we end up with a lot of programs loaded into memory thatare not being used at the time.andP;  If you leave the machine on all the time,programs loaded into memory will stay there forever.andP;  This business of simplyclicking on a file to open it is very seductive.andP;  After a while, you stopthinking about the application programs.andP;  You simply click on whatever youwant to see or work on.andP;  If the program required is already running, you areswitched into it automatically.andP;  If not, the program is automaticallyloaded--even if the operating system has to go out and find it on some fileserver on the network.andP;  It is very easy to forget that you opened an AldusPersuasion file two days ago, so Aldus Persuasion is still sitting in memoryin your computer.andM;Virtual memory will help this situation (programs used less frequently willbe swapped out of memory), but if we want to leave as much room as possiblefor cache storage of font bitmaps, we will have to get in the habit ofquitting programs that we do not expect to use for a while.andM;Quality.andP;  With only typefaces, it is hard to make any real judgments aboutthe quality of screen display or printer output.andP;  Here are some verypreliminary comments:andM;Both on screen and on printed output, the Adobe Helvetica looked better thanthe Royal Helvetica at small sizes, but Royal looked better at allsizes abovetext sizes.andP;  Moreover, Royal showed a much more even and consistent gradationfrom one point size to the next.andM;At small point sizes (10-point and below), the Adobe renderings were cleanerand better-formed.andP;  At larger sizes (14 point and above) the Adobe renderingwere distinctly more ragged on the screen.andP;  On printer output, the royalversion provides a much better rendering of the proper nuances of charactershape.andM;However, Helvetica was the first face Adobe ever did.andP;  Compared to later TypeOne faces it is, frankly, crude.andP;  (By like token, the Royal Helvetica is thefirst Royal fae.andP;  We presume that these faces will also get better in time.)andO;Adobe has told us that it is re-doing Helvetica to improves its quality.andP;  Wecan see why.andM;Comparison of the two New Times Roman faces is a little more difficult.andP;  TheAdobe Times is based on the Linotype design.andP;  The Royal Times is based on themore graceful Monotype original.andP;  Here again, however, we would give an edgeto Adobe in the smaller sizes both on screen and on printed output, a slightedge to Royal in larger sizes and a decided edge to Royal in he evenness ofthe gradation from on point size to the next.andM;Times Roman was the second face Adobe did.andP;  It too is being re-done.andP;  We donot know how much this will improve the output.andM;Compactness.andP;  The Royal code is more compact thn ATM.andP;  However, Royal fontswith their more elaborate hinting instructions take up more room than doAdobe Type One fonts.andM;ConclusionsandM;Adding droput control to Royal has made a big difference.andP;  Yes, it does slowdown rasterizing of small point sizes for screen display, but for the firsttime we have seen Royal screen fonts that look good at all sizes.andM;From what we have seen thus far, we are convinced that the Royal technologyis fast, and that--given a properly-coded font--it will produce qualityoutput and quality screen display type.andP;  We particularly like the smoothshapes of the larger-sized characters and how well the nuances of charactershape are reproduced.andM;The big question that remains is: how much effort does it take to produceroyal fonts that look this good?andP;  Thus far, the fonts we have seen have beencarefully programmed and carefully tweaked by hand.andP;  But this is not apractical way to build a large font library in a reasonable period of time.andO;We will be anxious to see how much of tje job the automatic Royal fontconversoin tools can do and how many manual adjustments will be required toproduce on a broad scale the level of quality we have seen from the firsthadn-tweaked fonts.andM;Benefits of competition.andP;  In any event, we think that we are clearly seeingthe benefits of competition.andP;  Both sides are hard at work improving theirproducts.andP;  We have already seen the first results of this in the new 1.2release of ATM.andP;  We expect that there will be additional developments andimprovements on both sides over the coming months and years.andM;(1) ATM asks the user to set the maximum amount of memory to be devoted tothe cache; Royal takes whatever is available.andO;</TEXT></DOC>