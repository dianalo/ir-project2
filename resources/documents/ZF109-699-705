<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-699-705  </DOCNO><DOCID>09 699 705.andM;</DOCID><JOURNAL>Patricia Seybold's Unix in the Office  Nov 1990 v5 n11 p1(10)* Full Text COPYRIGHT Seybold Office Computing Inc 1990.andM;</JOURNAL><TITLE>Open systems defined: a complex evolution from proprietary.andO;(includes related articles on open systems survey results and theUser Alliance for Open Systems)</TITLE><AUTHOR>Hurwitz, Judith S.andM;</AUTHOR><DESCRIPT>Topic:     Open SystemsComparisonProprietary SystemsCompatibilityUNIXTrendsIndustry Analysis.andO;Feature:   illustrationchart.andO;Caption:   The continuum of open systems. (chart)andM;</DESCRIPT><TEXT>Open Systems DefinedandM;OPEN SYSTEMS is becoming the protective mantle for vendors and users alike aseach group grapples with making the transition away from proprietarytechnology.andP;  To avoid repeating the systems problems created by multiplearchitectures and operating systems, users are looking for ways to protectthemselves from the unavoidable vicissitudes of the computer industry.andP;  Opensystems is the beginning of the evolution from technology and systems thatare isolated and incompatible to a new era when systems will have theflexibility to work together.andM;Unfortunately, like all complex stories, this one will not develop quickly.andO;We fear that user organizations that are grabbing onto the open systemsframework and demanding that vendors adhere only to de jure standards willhave a rude awakening--at least over the next 5 to 10 years.andP;  This posturewill make groups like the Houston 30 (now called the User Alliance for OpenSystems) backtrack when it becomes clear that forcing vendors to implement dejure standards that are still far from being ready for the commercialmarketplace will not be easy.andP;  We suspect that these organizations would bebetter served by a migration strategy with open systems based on de jurestandards as a long-term goal.andM;Why Open Systems, Anyway?andM;In essence, open systems means never having to say you're sorry.andP;  The systemschoices managers make have a dramatic impact on their political well-being intheir organizations.andP;  For example, suppose you were the manager responsiblefor implementing a system from a computer vendor that has fallen on hardtimes.andP;  One of your biggest problems is that, over the years, you have formeda close, mutually beneficial relationship with that vendor.andP;  During the goodyears, the vendor helped you solve problems, gave you advance informationabout the technologies it was developing, and even let you test out a productbefore buying.andP;  The vendor was your ally when you had to make presentationsto management.andP;  In some cases, these vendor sales and support people seemedto be part of the company.andP;  This environment has been the status quo for manybusinesses for the past 20 years.andM;But more and more companies are becoming uncomfortable with such coziness.andO;The discomfort hits home dramatically when your selected vendor--whether itbe Data General, IBM, Wang, or Digital Equipment--has a bad quarter or two.andO;Suddenly, management begins to question the wisdom of the decisions you madein the past.andM;Now, information systems (IS) managers are beginning to realize that choosinga system that is not so dependent on a single vendor is the only way to avoidpolitical minefields.andP;  However, these same managers are wary of getting onthe Unix bandwagon.andP;  Going out on a limb for Unix could have the samepolitical consequences as adopting technology from a single vendor.andP;  Afterall, Unix could be a passing fad.andP;  If IS managers come out too strongly inits favor now, in the future they could be viewed as using poor judgment.andP;  Inmany circles, Unix still has the reputation of being an unsound and esotericoperating system used only by scientists.andM;At the same time, technology managers realize they cannot continue to buytechnology as they have in the past.andP;  It is no longer acceptable to take hugerisks by purchasing unproven technology without some cushion of insurance.andO;That insurance is open systems.andP;  It is clear to many technologists that thereare times when it will be necessary to try new, leading-edge softwaretechnology.andP;  Without experimentation, they face the risk of losing theircompetitive edge.andP;  So, if an organization can purchase a new technology thatis based on accepted open standards, the risk is reduced.andP;  If software can beported to other platforms, the risk to the organization is lessened.andM;While open systems symbolizes safety, it is also ripe for misinterpretationand confusion.andP;  Exactly what is &quot;open,&quot; and how does it relate to theproprietary world?andP;  This report will define and put into perspective whatopen systems could mean to the industry in the long term.andM;What Is Proprietary?andM;Let's first look at what it means to be proprietary.andP;  In the computerindustry, proprietary is the antithesis of open.andP;  But, as with everythingelse, there are shades of meaning.andP;  A proprietary offering is something thatis controlled, developed, and licensed to users and developers by a singlevendor.andP;  This vendor controls its development, its direction, and its use.andO;It controls access to its code and collects licensing fees.andM;While this seems straightforward enough, the definition becomes fuzzy when aproprietary offering is widely accepted by a large percentage of theindustry.andP;  DOS is a case in point.andP;  No one would argue that DOS is owned 100percent by Microsoft.andP;  That makes it a proprietary operating system, right?andO;Well, there are those who would argue that because DOS is a de facto standardon the desktop and because thousands of developers write software for itsoperating system, DOS is open.andP;  There are those users who would argue thatsystems such as IBM's SAA and Digital's NAS are open because both companieshave published their programming interfaces so that third parties canintegrate their applications within these architectures.andP;  A more extreme casemight exist where there is a completely closed system that allows othersystems to transfer information to it via a gateway.andP;  Is this a form of open?andO;From the perspective that the transition to open systems will be anevolution, the answer would be yes--in the short term.andM;SPECIALIZED/PROPRIETARY.andP;  There are times when an open system based onindustry standards is simply out of the question.andP;  When an uncharted area ofthe industry or technology is evolving, no standards may be available.andP;  Inthat case, the vendor and the users requiring this functionality have nochoice but to introduce technology based on specialized, proprietary hardwareand software.andP;  For example, at the far end of the spectrum are the pureproprietary offerings.andP;  These would encompass specialized systems such as amedical imaging technology.andP;  These are often based on specialized hardwareand may even use their own operating systems because standards have notprovided the richness of functionality needed.andP;  However, as technology andstandards evolve, it would be reasonable to expect that the requirements ofmedical imaging vendors would be satisfied by mature standards.andP;  At thatpoint, medical imaging systems would be able to use standards and, therefore,would become more open.andP;  Another example is redundant system technology thathad been first developed on a proprietary operating system base because nostandards existed to support online transaction processing (OLTP).andP;  At thetime that companies like Tandem and Stratus were developing their technology,Unix had not evolved to the point where it could support OLTP.andP;  Likewise,X/Open and the IEEE had not begun to design specifications for standards inthis arena.andP;  It would be foolhardy to imagine that vendors innovating infrontier areas should wait until consensus or legislated standards emergebefore developing technology.andM;Defining the Shades ofandM;Open SystemsandM;Because of this evolutionary transition to open systems, there is a continuumfrom proprietary to open systems (see Illustration 1).andP;  As the industryevolves to open systems, the definition of what is open will also evolve.andP;  Inthis evolution, then, the minimalist definition of open would assumepublished APIs and gateways into outside systems.andP;  The ideal definitionassumes that users will be able to exchange information no matter whatapplication was used to originate the data.andM;COEXISTENCE WITH LEGACY SYSTEMS.andP;  Under the broad definition of open(published APIs), a user of DOS or VMS could participate in an openenvironment because there are clearly defined interfaces.andP;  This is importantbecause users cannot afford to throw out their older systems, which representhundreds of combined years of software and applications development.andP;  Opensystems, therefore, must presuppose that these systems can continue to existand participate on whatever level they can function.andM;THE MIGRATION CHALLENGE.andP;  Because evolution is such an overriding issue,flexibility is at the core of the open systems movement until legislatedstandards mature to the point where a majority of systems are based on thesame standards.andP;  One of the most difficult challenges for users is to developmethodologies for migration from proprietary systems and from de factostandards to software based on legislated standards.andP;  Many of the userconsorta, beginning to flex their muscles, are insisting that they want onlylegislated standards as their foundation.andP;  In reality, however, there has tobe an evolution.andP;  Take the example of IBM's LU6.2 protocol.andP;  When it wasfirst announced more than eight years ago, it was implemented in a closed,IBM-only environment.andP;  Then IBM published the APIs so that others couldaccess and gateway into IBM's implementation.andP;  These vendors then made thispeer-to-peer networking protocol into a de facto standard.andP;  Now, the DTPCommittee of Open Systems Interconnect (OSI) is considering LU6.2 as thefoundation for an open legislated standard.andP;  Likewise, an organizationbeginning with TCP/IP will be able to migrate to OSI legislated standards asthose standards mature.andM;HARDWARE DEPENDENCIES.andP;  The open systems momentum has emanated from thedesire to achieve hardware independence.andP;  However, in most proprietarysystems, the hardware and the operating system are inextricably linked.andP;  Opensystems demands that hardware dependencies be removed from the operatingsystem and the upper level functions such as user interface and file system.andO;However, we contend that hardware dependencies are only one of theingredients in the evolution to open systems.andM;EXCHANGING APPLICATION-INDEPENDENT DATA.andP;  In the long term, users will nothave to be concerned about the formats used in their particular applicationpackages.andP;  For example, if a user created an illustration using one drawingpackage, another user should be able to edit that illustration with anotherdrawing package.andP;  In most cases, this can be accomplished only if bothpackages have agreed upon the same intermediate translation standard (TIFF orCGM).andP;  Assuming that the vendors have provided translation facilities, theuser is still responsible for the translation process.andM;In some areas of technology, this type of transparent data exchange has beensmoothly implemented.andP;  A good example is the use of Keyword's translatorsoftware black box for translating formats between word processors,spreadsheets, and draw packages.andP;  If a vendor implements Keyword'stechnology, then users on that system are able to transparently translatebetween different word processing systems.andP;  Keyword's technology is anexcellent interim solution to the lack of standards.andP;  However, in the longrun, a standard from a legislated standards body will provide a common formatthat all vendors will be able to adhere to.andP;  Once this standard is agreedupon and widely implemented, users will not have to perform any translationbetween applications.andM;But this does not necessarily happen quickly.andP;  The X.400 InternationalStandards Organization (ISO) standard for electronic mail is a perfectexample.andP;  While X.400 promises electronic mail interoperability, itsimplementation has led to unanticipated problems.andP;  Because a standard is, infact, a specification, each vendor can interpret that specificationdifferently.andP;  To make matters worse, the 1984 and 1988 versions of X.400 areincompatible.andP;  Thus, even if a company thought it was conforming to a de jurestandard by writing to the 1984 standard, it would have to change all of itssoftware to comply with the revised standard.andP;  Companies such as Soft*Switchprovide a key translation between different mail systems based on X.400.andO;Problems like this are solved in the long run when there are test suites toensure that every vendor interprets the standards in the same way.andP;  But thiscould take up to 10 years.andM;The database field is probably the most important area for applicationsindependence.andP;  Currently, users are finding themselves inextricably linked totheir database providers, just as they have been tied to their systemsproviders in the past.andP;  To gain independence from their suppliers, users willhave to learn to write applications that are not tied to the underlyingdatabase engine.andP;  Database vendors will have to adhere to emerging databaseand online transaction processing standards.andP;  For example, there will have tobe better standards and enforcement of SQL standards so that users can takeit for granted that SQL will be implemented on different databases.andM;THE EVOLUTION FROM DE FACTO TO DE JURE.andP;  Another step in the evolution toopen systems is the de facto standard.andP;  In some cases, a de facto standardemerges when a majority of users implement a product because it fills anobvious void (such as DOS in the 1980s).andP;  In other cases, de facto standardsemerge from public domain software that proliferates because it is offeredwithout a licensing fee.andP;  As this technology takes on a life of its own, itis no longer controlled by the original developer.andP;  A good example would be XWindow, developed by MIT but put into the public domain.andP;  Sun's NFS is anexample of a de facto standard that came from a vendor.andM;In many instances, the technology that originates as de facto is used bylegislated standards organizations and becomes the basis for de jurestandards.andP;  Such is the case with both X Window and NFS.andP;  They both gained somuch momentum in the market that they could not be ignored by the standardsbodies.andM;Open Software Foundation:andM;Pushing the de FactoandM;One problem with waiting for technology to gain wide market acceptance on itsown is the time frame.andP;  It is increasingly clear that, to be competitive,systems developers want to implement the latest technology.andP;  However, at thesame time, these companies want the assurance that what they adopt will beacceptable to users.andP;  Therefore, it helps them if de facto technology ispushed out into the marketplace faster than would happen naturally.andP;  This iswhere an organization like the Open Software Foundation (OSF) is making itsmost important contribution.andP;  The emergence of Motif is an example of pushingtechnology.andP;  By taking the pulse of its members, OSF determined that anaffinity with IBM's Presentation Manager (PM) and the use of X Window as anunderlying technology were key requirements.andP;  Thus, through the Request forTechnology (RFT) process, OSF was able to quickly bring to market a softwareproduct that is becoming a de facto standard.andP;  Most of the large corporationswe have spoken to consider Motif to be their internal Unix user interfacestandard because of the PM look and feel.andM;Even more compelling is the selection by OSF of the Distributed ComputingEnvironment (DCE).andP;  Again, by forcing a technology to market quickly, OSF hasset up DCE as a de facto foundation for distributed networking for the comingdecade.andP;  In addition, it has forced competing organizations to rethink theirdistributed networking strategies.andM;Once technologies such as Motif and DCE become commonplace in the industry,they can more easily become part of de jure standards from thestandards-setting organizations.andM;Unix InternationalandM;It is increasingly clear that Unix International (UI) has less to do with theopen systems process than with ensuring that an implementation of onecompany's products is consistent with the needs of its licensees.andP;  UnixInternational is taking on a different market role from that of OSF.andP;  Overtime, the view of the two organizations as competitors will lessen.andP;  UI isincreasingly becoming the organization that pushes ATandamp;T Software Laboratoryto focus on the requirements of its members.andP;  While OSF has made progress inpushing the technology window, UI has taken on the role of making ATandamp;T moreresponsive to its licensees.andP;  Therefore, if ATandamp;T is debating the viability oftwo different technological directions, UI tells ATandamp;T the direction itprefers.andP;  The pressure exerted by OSF has led ATandamp;T to evolve System V a lotfaster than it would have in the normal process of evolution.andM;PUBLIC DOMAIN.andP;  As we previously stated, de facto technology often begins inthe public domain.andP;  This software is freely available to anyone who wants touse it.andP;  It often comes from universities whose goal is to demonstrate theirtechnical skill.andP;  Richard Stallman's Free Software Foundation is one end ofthe spectrum of public domain software.andP;  Stallman's philosophy is that no oneshould put a lock on ideas and information.andP;  Therefore, the technologydeveloped by his small group of researchers is offered to the industrywithout restrictions and without licensing fees.andP;  While the notion that theflow of ideas should not be restricted is admirable, it is hard to justify ina world where development costs vast amounts of money.andP;  Then there areofferings that follow a different route.andP;  Technology is sometimes developedby one vendor and put into the public domain in the hope that it will becomea de facto standard such as the Sun model we discussed earlier.andP;  Anothertwist on this model is the fact that Sun Microsystems put XView on the MIT XWindow tape, making it public domain software.andP;  Since developers do not pay alicensing fee for the X Window tape and are not restricted as to how they useit, it can be defined as an open system.andP;  Some might argue that, to be trulyopen, this unrestricted software would have to be agreed upon by a standardsbody.andM;CONSENSUS.andP;  In a consensus organization, such as the Open Software Foundationor the Object Management Group (OMG), a group of vendors, developers, and(sometimes) users have requirements for technology they want to agree upon.andO;Technology in this category can come from many different spheres.andP;  It couldbe standards-based technology, or it could emanate from the proprietaryworld.andP;  Usually, consensus organizations deal with software concepts that aretoo new for the standards bodies to become involved with.andP;  If legislatedstandards bodies have become involved, it is often too early in the standardscreation process for vendors to be able to use emerging standards toimplement technology.andP;  But because of the rapid pace of change, these vendorsneed a mechanism to generalize this technology quickly so that third-partyvendors have a common development target.andP;  The most obvious example of thisconsensus force is the development of Motif.andP;  Motif evolved from twodirections: First, it took de facto standards such as X Window, and then itapplied pragmatism--the need to conform to the look and feel of PresentationManager.andM;X/Open: Concrete SpecificationsandM;X/Open holds a unique role as a consensus organization.andP;  Its charter is toestablish an open systems environment both by taking de jure standards whenavailable and by codifying de facto standards when no de jure standardexists.andP;  Therefore, the X/Open Portability Guide (XPG) has provided animportant guidepost for those organizations making the transition to opensystems.andP;  The XPG is, in fact, a linchpin document for all parts of the Unixand non-Unix worlds.andP;  Even more important are the test suites that X/Open hasbeen developing to ensure conformance to its guidelines.andP;  Withoutconformance-testing, each vendor can interpret standards differently, as theycan in the case of specifications discussed above (&quot;ExchangingApplication-Dependent Data&quot;).andM;This, then, is X/Open at its best.andP;  The organization gets into trouble whenit tries to break new ground and set standards where no de facto standardsexist.andP;  For example, X/Open reached an impasse when it tried to choosebetween OSF's Motif and OpenLook as the candidates for user interface.andO;Vendors promoting their own candidate made sure that X/Open was hopelesslydeadlocked in this effort.andM;The Object Management GroupandM;The Object Management Group (OMG) attempts to achieve consensus when neitherde facto nor de jure standards exist.andP;  What is more fascinating about OMG isthat there are few commercially available object-oriented applications in thehands of users.andP;  If a truly open system requires that systems be able toexchange information at the object level, then an organization like the OMGcould be a great help in making open systems a reality.andP;  One of theobjectives of the OMG is to allow consensus among the world's leadingsoftware developers on the way objects can address each other.andM;The Object Management Group was a direct outgrowth of Hewlett-Packard'sdesire to make its NewWave environment and its Object Management Facility(OMF) the foundation of the industry standard.andP;  Over the past year of thegroup's existence, the OMG has taken on a life of its own (apart from HP'soriginal intentions), although the Object Management Facility remains thegroup's focus.andM;OMG's first deliverable is a standards manual.andP;  Its goal is to provideguidance to developers to ensure that their object-oriented systems worktogether.andP;  The manual includes a &quot;reference model&quot; for object systems thatdefines the interfaces for interoperability, as well as an abstract objectmodel.andP;  The OMG takes a minimalist approach to defining the object model.andM;Will the OMG succeed in leading the industry forward with a common objectmodel?andP;  Perhaps.andP;  However, one danger is the organization's timing: It may betoo early in the evolution of object technology.andP;  Also, there are those thatare still suspicious of Hewlett-Packard's implementation of the object modeland believe that more compelling models might emerge.andP;  One problem ofadopting a technology as a standard too early is that vendors suffer the riskof adopting technology that is immature.andP;  By the time a newer model isavailable, those vendors may have invested too much time and money in the defacto standard to backtrack.andM;What will it mean if the OMG's model emerges as a standard?andP;  Well, it couldbe a significant boost to the user community.andP;  In theory, if all vendorsadopted a common object model, then it would be possible to achieve trueinteroperability among objects no matter which vendor's system they were partof.andP;  However, to arrive at an object model that is acceptable to all vendorsis difficult.andP;  First, the vendors participating in the Object ManagementGroup are at varying stages of developing their object architectures.andP;  Somehave already spent a considerable amount of time and money developing anobject model that they are trying to popularize.andP;  To many of the members ofthe OMG, it is clear that a proprietary or &quot;non-open&quot; object architecturewill have a difficult time outside its installed base.andP;  For a company tobecome well-established in this emerging technology area, it will have toprovide a standard underpinning.andP;  At this stage, however, it is almostimpossible to know what model will succeed.andP;  Do vendors hold back on theirdevelopment until a standard is decided upon?andP;  Do they go ahead and developtheir own interpretation and hope that the standards will be close enough toallow them to modify their design?andP;  This is a challenge for vendors trying toplan their next-generation environments and ensure that they will not becondemned as proprietary.andM;Legislated StandardsandM;Legislated standards organizations are the obvious solution to the problem ofstandardization among different platforms.andP;  However, it is not necessarily ashort, smooth path to arrive at consensus within the standards organizations.andO;The IEEE and ISO are dominated by representatives of the major computervendors.andP;  Therefore, each is chartered with representing its companies'interpretations and implementations of technology.andP;  A lot is at stake in thisprocess.andP;  For example, if one vendor can convince an IEEE committee toimplement a large percentage of the vendor's implementation of what willbecome a standard, then that vendor has a technology advantage in time tomarket.andP;  This means that the standards process is tedious and time-consuming.andO;Remember, it has taken almost 10 years for the ISO protocol stack to emerge.andM;When these standards do emerge, they can have the optional outcome: toprovide all vendors with a common implementation of a technology that makesinteroperability easy to achieve.andP;  However, this is not always simple.andO;emerging standards are not cast in store.andP;  When vendors first begin toimplement them, there is a lot of room for interpretation.andP;  For example, twovendors that implement the ISO X. 400 protocol in their electronic mailsystems may have different interpretations of what the standard mandates.andO;Initially, when these two systems attempt to exchange messages,inconsistencies will make the communications unworkable.andP;  However, over time,both vendors will change their implementation so that the differencesdisappear.andM;Another problem confronting those organizations that implement de jurestandards is that the standard often begins life implementing the lowestdenominator.andP;  Take the Office Document Architecture (ODA) Standard as anexample.andP;  Here, the standards bodies are adopting a model that provides a lowlevel of functionality.andP;  Therefore, a vendor that wants to be standardscompliant may be caught in an untenable position.andP;  On the one hand, if thevendor implements a pure, native ODA, it will undeniably be an open system.andO;However, the functionality may be so limited that the vendor may be driven bycompetitive pressures to add advanced functionality on top of ODA.andO;Therefore, while vendors are waiting for a standard to mature, it makes senseto provide transforms so that the implementation can communicate with otherODA-based systems.andM;Another compelling example of the foibles of the standards process is theX.500 Standard.andP;  One factor standing in the way of universal directoryservices is a standard for global naming authority.andP;  This is much likeassuring that each user's telephone number is unique.andP;  In the case of theX.500 naming standard, the standards-setting bodies are currently deadlockedbecause each vendor would like its model to be adopted.andP;  Rather thanresolving the issue, the X.500 Committee has postponed its decision.andM;THE ROLE OF POSIX.andP;  The original role of the IEEE Posix specification was toprovide an API interface between the application and the operating system.andO;As originally conceived, this could have provided some of the answers to opensystems.andP;  What could be better than an open interface that would let aproprietary operating system evolve to include open systems calls toapplications also written to that specification?andP;  In an ideal world, allapplications would become Posix compliant and all operating systems wouldcomply with these standards.andP;  A proprietary operating system would betransformed into an open system.andM;In fact, this is precisely the tack that Digital equipment has taken withpositioning VMS and Ultrix.andP;  Digital is hard to work ensuring that VMS doesprovide the APIs that match the Posix specification.andP;  However, this is more amarketing ploy at this early stage than an open system solution.andP;  The majorproblem is that there are almost no Posix-compliant applications on themarket that could take advantage of a Posix-compliant operating system.andO;Another difficulty is that, as with most of the standards processes, vendorsgiven some latitude as to how strictly they implement a standard.andP;  Therefore,one software developer might implement conformant application while anotherwould implement a compliant application.andP;  The difference?andP;  the degree towhich the application includes all the details provided in the specification.andM;Another concern with Posix is the expansive nature.andP;  What had begun as asingle committee chartered to construct an interface definition evolved intoa series of 23 committees, each chartered with defining another aspect of thecomputing environment such as real-time and user interface.andP;  Suddenly, arelatively concrete, manageable concept became a complex and probablydecade-long quest for an open operating system interface.andM;The Role of EnforcementandM;Because evolving standards are open to interpretation, enforcement andverification become critical issues.andP;  As mentioned above (&quot;X/Open: ConcreteSpecifications&quot;), the XPG conformance test suites provide a way for vendorsto ensure that all are interpreting the specifications in the same way.andO;Helping organizations conform to the ISO specifications has been one of themost important roles of the Corporation for Open Systems (COS).andP;  It isbeginning to take an interesting twist since the newly-formed Alliance forOpen Systems has become a member of COS (see &quot;User Alliance for OpenSystems,&quot; page 10).andM;How Users Can I LeverageandM;the Open Systems MovementandM;Information systems organizations are at a critical juncture.andP;  Clearly, manycorporations are at a crossroads in terms of choosing their technologydirections.andP;  IS organizations have lost power over the past decade.andO;Developing strategies for evolving to open systems may be an excellent way toreestablish their leadership.andP;  Especially in these tight economic times,companies begin to question how they can better use the technology theyalready have and how they can plan for the future to make technology into acompetitive advantage.andM;We therefore recommend that corporate information systems managers take avery pragmatic view of open systems.andP;  They should attack the implementationof this technology from several different perspectives.andM;INVOLVE UPPER MANAGEMENT.andP;  ironically, some of the motivation to move fromproprietary architectures to open architectures has come from an uppermanagement push.andP;  From a financial pespective, it makes sense to choosetechnology that allows the user to have some leverage with vendors.andP;  Now thatthis movement is taking on a life of its own, information systems managersare beginning to understand that it is not safe to remain with a closedsystem.andM;When approaching upper management, IS managers must put open systems into areal-world context.andP;  No, open systems is not an overnight solution to allproblems.andP;  It is a transition from a narrow set of choices to a technologybase that will be more adaptable.andP;  In the long run, it will make it easierfor users to access all data, no matter what application or hardware theyreside on.andP;  Therefore, upper management has to understand that implementationof open systems is not an immediate change in the way information systems aredesigned and managed, but a 10-year strategy that will have excellent costand business benefits.andM;PLAN A TRANSITION TO OPEN SYSTEMS.andP;  The first step for IS managers is to planhow they will interconnect their legacy systems with their open systemstechnology.andP;  while the long-term goal should be the legislated standards, ISmanagement must be ready to use whatever transitional technology isavailable.andP;  It is dangerous to insist on nothing but a de jure standard.andM;PILOT NEW STANDARDS-BASED SOLUTIONS IN DEPARTMENTS.andP;  When new technologybecomes available, begin implementing it in departments first.andP;  For example,IS should work closely with user departments to implement distributedapplications based on nonproprietary platforms.andP;  This will allow users and ISto gain experience without committing the entire enterprise.andP;  One of the mostdramatic ways to convince upper management of the power of a certain solutionis to pilot a technology and show an impressive result.andP;  One successfulimplementation is worth hundreds of meetings and memos.andM;BEGIN DESIGNING FOR THE FUTURE.andP;  IS should begin to separate the codeprogrammers write from the applications used.andP;  This is especially critical inthe database arena.andP;  Users are beginning to realize that they are just asdependent on their database vendors as they had been on their systemssuppliers.andP;  We expect that the next target will be databases themselves.andO;Users will begin to separate their data from the actual database so that thedata will become portable.andP;  The sooner users gain experience keeping theircode separate from dependencies, the sooner they will be able to keep theirown applications open.andP;  One implication will be that users will have to stoptrying to improve performance by taking advantage of application-specificdesign elements.andP;  It is just as troublesome to tie programs to a specificdatabase implementation as it is to tie an application to a hardwareplatform.andM;The Fallout from OpennessandM;One of the greatest challenges for users and vendors as we move into the eraof open systems will be how to judge the quality of technology if everythingis open.andP;  The conformance to standards will make it more difficult forvendors to sell technologies because so many of them will appear to be thesame.andP;  Vendors will be forced to add value at more subtle levels, such as theway users manage technology.andP;  They will increasingly be promoting theirability to support and help users integrate their technologies.andP;  It will beno accident when suddenly every vendor becomes a systems integrator.andM;While having more openness will be beneficial for users, judging just howgood solution is will be increasingly difficult.andP;  therefore, users will haveto take on the greater burden of asking to be shown how well the newtechnology integrates with what they already have.andP;  Vendors will have toimplement added value on top of standards in a way that protects users.andP;  Inthis new reality, it will be more important than ever for users to experimentto see firsthand how technology being promoted as open really stands the testof time.andO;</TEXT></DOC>