<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> DOE1-50-1114 </DOCNO><TEXT>Logic-programming languages have several very attractive features, suchas separation of program logic from control, declarative reading of programs,and ease of understanding and maintenance. Despite this, however, thepragmatic problem of efficiency has hampered the widespread acceptanceof such languages as general-purpose programming languages, and has ledto proliferation of impure language features whose use compromises preciselythose properties of these languages that made them attractive in thefirst place. This dissertation takes the view that rather than leavethe burden of writing efficient programs to the programmer, and forcehim to deal with impure language features, it is preferable to have thesystem perform such optimizations for him. It is argued that the modeltheory of first-order logic, traditionally used to specify the semanticsof logic programs, is too weak to allow reason about the computationalbehavior of programs. A classical denotational semantics is developedfor Prolog, and notions of strong and weak program equivalence are defined.A general framework for data-flow analysis of logic programs, based onthis semantics, is developed. Several analysis problems considered inthe literature, such as mode inference, data dependency analysis, typeinference, functor propagation, and dead and unreachable code detection,are shown to be instances of this framework.</TEXT></DOC>