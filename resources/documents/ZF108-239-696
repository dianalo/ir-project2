<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-239-696  </DOCNO><DOCID>08 239 696.andO;</DOCID><JOURNAL>IEEE Software  March 1990 v7 n2 p36(9).andM;</JOURNAL><TITLE>Predicting source-code complexity at the design stage. (includes arelated article on quantitative metrics)</TITLE><AUTHOR>Henry, Sallie; Selig, Calvin.andM;</AUTHOR><TEXT><ABSTRACT>Studies of the application of quantitative complexity metrics tothe detailed design stage of program development show thatsoftware complexity can be predicted, first-generation undesirablesource code eliminated, development life cycle time reduced, andefficiency of the coding process improved.andP;  Twenty-seven projectsconsisting of Ada-like 'program-design-language' specificationsand resulting PASCAL code were processed by a code analyzer,generating metrics for each program.andP;  Initial results indicate theviability of code metrics are highly dependent on thespecification's refinement level, while structure metriceffectiveness is independent of refinement level.andP;  Otherconclusions include structure and hybrid metrics are useful atdesign time, automatic generation of metrics for designspecifications is desirable, and a method for generatingprediction equations can forecast source code complexity.andM;</ABSTRACT></TEXT><DESCRIPT>Topic:     Software ComplexitySource CodeSoftware MetricsResearch and DevelopmentMethodsPASCAL.andO;Feature:   illustrationcharttable.andO;Caption:   Diagram of a typical life cycle with complexity metrics. (chart)Extra statistics for low, middle and high refinement levels.andO;(table)Regression-line equations and statistics: low-, medium-,high-refinement. (table)andM;</DESCRIPT></DOC>