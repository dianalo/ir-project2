<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-007-116  </DOCNO><DOCID>08 007 116.andM;</DOCID><JOURNAL>Computer Language  Jan 1990 v7 n1 p71(5)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Of programs, philosophy, and phoolishness. (invention of desktoppublishing)</TITLE><AUTHOR>Kyle, Jim.andM;</AUTHOR><SUMMARY>Programming theory includes numerous concepts and techniques namedafter those who publicize them; in practice, programmers shoulduse whatever technique is best suited to the problem at hand.andP;  Twotechnical writers developed a simple desktop-publishing system inthe late 1960s; one used a bottom-up approach, while the otherworked from the top down.andP;  Examples of how these two approachesinteracted are given.andP;  The team achieved a degree of productivitywhich has never been matched.andM;</SUMMARY><DESCRIPT>Topic:     Desktop PublishingProgram Development TechniquesTheory of ComputationPhilosophyProgrammers.andM;</DESCRIPT><TEXT>Of Programs, Philosophy, and Phoolishness Whenever I read about softwareengineering or the theories of information analysis, I'm reminded of a sayinga long-time friend once attributed to William James: &quot;The first goal of everyphilosopher is to prove that all other philosophers are fools; they allsucceed.&quot;andM;Only when I tried to pin down the source of the quotation to use it here didI discover that what James actually said was far less cynical: &quot;There is onlyone thing a philosopher can be relied upon to do, and that is to contradictother philosophers.&quot;andM;So what does this have to do with information analysis, software engineering,Zen, the art of motorcycle maintenance, or the mythical man-month?andP;  Simplythis: no matter what rules any theorists establish, they're talkingphilosophy.andP;  In the real world where we and our products have to survive,pragmatism rules above all else.andP;  What works, works; what doesn't is usuallya dismal failure.andM;But far too many folk have interpreted this message of pragmatism as alicense to write spaghetti code (&quot;It works!&quot;) or to leap straight intodown-and-dirty programming without taking time to get any idea of wherethey'e heading.andP;  For them, I have only one word: don't!andM;Have a planandM;The goal of all software engineering methodologies is essentially the same:to simplify an enormously complex process into something we mortals cancomprehend by applying certain machine-like techniques.andP;  The differencesbetween the varying schools are primarily in the techniques chosen and howthey're applied.andP;  I have no quibble with any of these goals.andM;My battle, and it's more than a quibble, is with those true believers whoinsist that the theory be preserved even at the cost of making the problemmore complex.andM;Being afflicted with true believers is nothing new to the software industry.andO;I've heard reliable reports that Charles Babbage had to answer critics whodisagreed with his plans for programming the analytic engine.andP;  And in thepast two decades we've seen such ideas as top down, bottom up, HIPO(pronounced, of course, &quot;hype-oh!&quot;), and myriad techniques named for theirchief publicizers.andM;This may get me ejected from the ranks of recognized authorities, but Ibelieve in them all.andP;  Whichever technique best fits the problem at hand isthe best one to use in any specific case.andP;  And sometimes this ideal isachieved by using more than one at a time.andM;A case historyandM;Back in the dark ages of main-frame-only programming, the aforementionedphilosopher friend and I spent a few happy years designing something wecalled Publications Automation using a main-frame and remote terminals.andO;Today it's called desktop publishing and runs on much smaller machines, butthis was more than 20 years ago, in the 1967-1970 era.andM;Since at the time neither of us had credentials as a &quot;professionalprogrammer&quot; (both being technical writers with a major computer company), wehad no schedule to meet.andP;  We did, however, enjoy magnificent support from ourimmediate management.andP;  So long our regular tasks were done on time, we wereencouraged to spend any free moments on this unofficial project.andP;  We madesure we had many such moments.andM;Coming from the outside, as it were, we had no idea of the &quot;right&quot; way toapproach things, so we followed our instincts.andP;  Walt, an avid student ofgeometry who tended to think in pictures and in terms of step-by-step proof,selected bottom-up design as his method.andP;  Since I preferred the algebraictechnique of abstracting everything to the highest possible level ofgenerality, I chose to tackle problems from the top down.andM;&quot;It can't be done!&quot;andM;Now any theorist could tell you right away that this was a recipe fordisaster.andP;  But a few weeks after we began the project we had a small (butworking) system.andP;  In less than a year our manager was proudly showing offsome of our programs to &quot;professional&quot; data-processing managers (who, wefound out after the fact, had previously assured him that what we wereattempting simply could not be done; we didn't know any better, so we didit).andP;  By the time the company underwent a merger and the new managementscrapped the system because it was &quot;not cost-effective&quot; (although the four ofus using it were supporting more products than the new owner's 52-personwriting department could handle), more than half of all our service manualswere on the Publications Automation system.andM;How did we do it?andP;  Four basic things contributed in approximately equalportions ot our success.andM;First, we both had an exceptional grasp of our problem requirements, althoughwe never stopped to draw up a formal design document for them.andP;  After all, wewere trying to automate our everyday jobs rather than some operation we knewnothing about.andM;Second, we had total management support.andP;  As soon as that was taken away, theentire concept began to evaporate.andP;  (And that's why we're not recognizedtoday as the inventors of desktop publishing; management eventually wouldn'teven accept it for its own use, much less market it.)andM;Third, we had no time constraints; we could work at our own pace with never ahint of pressure to meet the schedule with whatever could be tossed togetherin time.andP;  Since I've crossed over into the ranks of DP professionals, I'veoften yearned for that freedom again!andM;But the fourth and possibly most important contributor to the achievement wasthat just the two of us were doing it and we communicated constantly.andM;When I tell how one of us would start at the top of a task, the other at thebottom, and we'd meet in the middle, the first question I'm usually asked is&quot;How did you ever manage to find the same middle?&quot;andP;  The answer is simply thatwe spent possibly two-thirds of each working day talking, alternating theroles of instructor and pupil, expounding our individual approaches to thetask at hand.andP;  These discussions continued until we reached mutual agreement,and that was always somewhere near the middle level of detail.andM;All is justifiedandM;Take the task of properly justifying our printed output.andP;  This was not atrivial problem because we had access to both a proportional spaced printerwith microjustification capability (a Friden Justo-writer) and conventionalmonospace fixed-pitch devices (the IBM 2741 communications terminal).andP;  Anysolution had to work equally well on both.andM;My top-down approach started by looking for what the two printers had incommon.andP;  Walt's build-from-the-bottom viewpooint had him searching for thesimplest way of coding whatever we came up with.andM;Time has dimmed the details of just who suggested what and when, but ourfinal result was an algorithm that collected individual words from the inputtext, calculated the length of each, and collected those words in a bufferwith special delimeter bytes separating them until the calculation indicatedthat the most recent word would not fit into the space remaining on the line.andO;At the point the most recent word was put into limbo and the necessary spacewidth between words was calculated based on the total length of all theaccumulated words divided by the number of words.andP;  This length calculationwas based on spaces of zero width, while the &quot;will-it-fit?&quot; calculationassigned an arbitrary width equal to te most common lowercase letters.andM;CPUs can calculateandM;We calculated the value; conventional wisdom at the time simply tallied thenumber of spaces required, then tossed in additional ones to fill out theline.andP;  Early WordStar documents are examples of that technique's results.andO;But having a mainframe with machine multiplication and division at ourdisposal, we used it.andP;  That must have been Walt's idea; it's too near thebottom level to have been mine.andM;We kept both the integer quotient and the remainder from that calculation.andO;The quotient gave us the width in units for each interword space, and theremainder told us how many units of extra padding were required to achieveperfect justification.andM;We handled the difference between fixed and  proportional-spaced output byproviding selectable-width tables.andP;  For the fixed-pitch output, eachprintable character had a width of one.andP;  For the proportional-space devices,the character widths were taken from measurements of the type size inmultiples of 1/60 inch.andP;  I am certain the changeable tables were my idea,based on  the algebraic concept of symbolic variables.andM;Not odd, get even...andM;At that point we had near-perfect justification of the proportional-spacedoutput, but when we used fixed-pitch all the &quot;extra&quot; spaces came out in theleft half of each line that created an unattractive river-of-white effect onthe printed page.andM;It took something like a week of discussion before we discovered that wecould use the even-odd condition of the line counter (already in place toindicate when to do an automatic page break) as a flag to select whether thepadding spaces should go on the left or the right.andP;  From there it took only aday or so to determine how to know when to start inserting padding if itneeded to go in the right half.andP;  We subtracted the total number of spaces onthe line from the number of pad spaces required, which always came outnegative.andM;Then, each time we inserted a space, we incremented that number.andP;  If it wasno longer negative, we added another one from the padding pool.andP;  Thisalgorithm took advantage of the automatic sign flags kept by the CPU andreduced special code to a minimum.andM;Peter Principle at workandM;We handled the entire design of the system in similar fashion.andP;  By the timeour division was sold to a competing firm, our system was capable of doingmost of the things done by today's desktop publishing systems except formerging in graphics (we pasted down photocopies of the artwork).andP;  It even dida few things that are not common yet, such as deciding where to place tabularmaterial to minimize the number of page breaks in the printed tables.andM;But after the merger, the new owners decided to make our department lean andmean, so they scrapped the automated system in favor of hand-scribbledfoolscap drafts that were manually transcribed by typists into camera-readycopy.andP;  They also decided that Walt and I wasted too much time talking aboutour plans and projects and broke up the team by transferring one of us toanother division.andM;In the years since, I've worked on a number of other project teams, both as acontributor and as the team leader.andP;  Never, though, have I participated inanother team that had even half the productivity.andM;Words for the whysandM;Being (still) something of a pragmatic philosopher about such things, I'vegiven considerable thought to trying to determine what we did right and howto maximize my chances of repeating that happy accident.andP;  I'm convinced thata major factor in our success was the personality mix: one geometer whothought in pictures and attacked things from the bottom up, step by laboriousstep, and one algebraist who thought in words and preferred to analyze thebig picture.andM;But having a mix of the two types, while a necessary condition for bestresults; is not sufficient.andP;  It's also necessary for everyone on the team tocommunicate with everyone else so the whole team is aware of the currentgoals, problems, and status as all times.andM;With that, you'll come closer to the goal, but if communications is limitedto the team you'll still run high risks.andP;  Only when you make consciousefforts to communicate with everyone involved--the intended users,management, those who must maintain the finished product, literallyeveryone--can you have any assurance of success.andM;Human nature being what it is, we'll continue to search for magic nostrums tosolve all our problems.andP;  That's fine, especially if you happen to be one ofthe magicians making big bucks helping true believers find the grail.andP;  Butkeep in mind that today's magic has a horrible history of becoming tomorrow'sfoolishness; keep Plan B in the wings, ready and waiting!andM;Jim Kyle is MIS administrator for the manufacturing division of a majorsupplier of mainframe peripheral equipment to the banking industry.andP;  He alsoserves as primary sysop of CLMFORUM, COMPUTER LANGUAGE's forum on CompuServe,where his user ID is 76703,762.andO;</TEXT></DOC>