<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-289-490  </DOCNO><DOCID>08 289 490.andM;</DOCID><JOURNAL>Software Magazine  March 15 1990 v10 n4 p41(5)* Full Text COPYRIGHT Sentry Publishing Company Inc. 1990.andM;</JOURNAL><TITLE>AD/Cycle tries to automate SAA standards fordevelopers.(Application Development/Cycle, Systems ApplicationArchitecture)</TITLE><AUTHOR>Tibbetts, John; Bernstein, Barbara.andM;</AUTHOR><SUMMARY>The relationship of AD/Cycle, IBM's entry into the computer-aidedsoftware engineering (CASE) tool arena, and SAA, IBM's SystemsApplication Architecture, is examined.andP;  AD/Cycle provides aframework for all the automation tasks in a software product'slife cycle, but unlike other CASE products, AD/Cycle allowscomponents to be provided by independent CASE developers.andP;  SAAprovides a foundation for AD/Cycle.andP;  It is highly technical in itsdetails, but its three goals are simple: to standardizeprogramming languages and services, making programs andprogrammers portable among environments; to prescribe a standardway for applications to present themselves to the end user, and topromote cooperative processing.andP;  Several experts in the CASE fieldgive their views of AD/Cycle and SAA.andM;</SUMMARY><DESCRIPT>Ticker:    IBM.andO;Product:   AD/Cycle (CASE software) (design and construction).andO;Topic:     SAAComputer-Aided Software EngineeringComparison.andO;Feature:   illustrationcharttable.andO;Caption:   Linking SAA and AD/Cycle. (chart)The CASE cycle. (chart)SAA's relationship to CASE. (table)andM;</DESCRIPT><TEXT>AD/CYCLE TRIES TO AUTOMATE SAA STANDARD FOR DEVELOPERSandM;Computer-aided software engineering (Case) tool vendors awoke last Sept. 19to find their world transformed--legitimized at last.andM;Many cheered, a few complained, but all agreed that IBM's announcement ofAD/Cycle would mean major changes for the software development industry ingeneral and Case providers in particular.andM;AD/Cycle is IBM's brand name for its own entry into the Case tool business.andO;AD/Cycle lays out a framework for all the automatable tasks in a softwareapplication's life cycle and provides a product (or products) to fit intoeach job slot.andP;  Some of these will be IBM products and some will come fromindependent &quot;business partners&quot; of IBM, such as Bachman Information Systemsand Index Technology Corp., both of Cambridge, Mass., and KnowledgeWare ofAtlanta.andM;Later this year, IBM will detail how one component of AD/Cycle hooks on tothe next, allowing independent Case developers to provide alternativecomponents.andP;  This differs from other soup-to-nuts Case systems, like theInformation Engineering Facility (IEF) offering from texas Instruments,Plano, Texas, and Foundation from Andersen Consulting, Chicago, which supplyall the components.andM;AD/Cycle is still more of a plan than an actual product family.andP;  Yet even inthis &quot;in utero&quot; state, it has exercised unprecedented influence.andM;Ed Yourdon, who publishes the American Programmer newsletter, New York, callsAD/Cycle &quot;the most important event of the decade in the software field.&quot;andO;Currently, over 30 Case tool providers have pledged to support AD/Cycle.andM;Movements of this magnitude are never completely revolutionary.andP;  Rather, theyfill a need that builds over time.andP;  Ever since the requirement for Case toolintegration emerged, suppliers have been quizzed about how they will deliverit.andP;  Once software is deliverable, IBM has an opportunity to create a defacto standard.andM;AD/Cycle is not the only standardization proposal IBM floated in the late1980s.andP;  It has a spiritual father in SAA, IBM's Systems ApplicationArchitecture.andP;  Just as it is not possible to understand where Case is headingwithout taking account of AD/Cycle, it is not possible to appreciate AD/Cyclewithout understanding SAA.andM;SAA provides a theoretical foundation that makes AD/Cycle possible.andP;  Inreturn, AD/Cycle will provide tools for developing SAA applications easilyand quickly.andM;AD/Cycle brings together two powerful computing concepts for the '90s:automation (Case) and standardization (SAA) (see Figure 1).andP;  Whether theentire AD/Cycle development approach will gain widespread acceptance is opento question, but the ideas that it promotes are here to stay.andM;WHAT IS SAA?andM;SAA is IBM's &quot;One World&quot; movement.andP;  It attempts to make a universal (at leastIBM-wide, and possibly more) software environment out of what is now a Babelof machines, operating systems, languages, protocols, interfaces, skills andtraditions.andM;To accomplish this transformation, SAA will surround old hardware/softwarebases with new &quot;protective layers&quot; that present a standard face to the world.andM;SAA is like a universal adapter: it accepts a range of oddly configuredelectrical plugs at one end and presents the standard three-prong at theother.andP;  The internals of the old software bases do not change, just the waythey interface with their users.andM;SAA specifies standard interfaces for three kinds of consumers of computerservices--end users, programmers and other computers.andM;* CUA, Common User Access, defines how applications look to the end user andresponds to instructions.andM;* CPI, the Common Programming Interface, lays out a common set of languagesand services for programmers to use, regardless of the SAA hardwareenvironment for which they are coding.andM;* CCS is the Common Communications Support layer, a set of communicationprotocols that lets machines pass information back and forth as cooperatingpartners.andM;SAA promises to make it possible to implement all of these interfaces on allfour designated SAA platforms: OS/2, AS/400, MVS and VM.andM;According to IBM, users will notice no difference between environments,because of CUA; programmers will be able to write code that can run on any orall environments, through CPI; and any of these foru machines can talk to anyother in a peer-to-peer relationship, thanks to CCS.andM;SAA is highly technical in its details but simple in its three goals to:andM;* standardize programming languages and services to make programs (andprogrammers) portable among different environments;andM;* prescribe a standard way for applications to present themselves to the enduser; specifically a graphical, windowed, mouse-driven intuitively navigablePC screen that will save the user from learning new rules for newapplications; and most importantlyandM;* promote computer systems where different size machines work together, eachexecuting the part of an application for which it is best suited; in otherwords, cooperative processing.andM;In cooperative processing, mainframes and PCs divide up computing tasks,often invisibly to both users and programmer, handing the job back and forththrough communications interfaces provided by SAA.andP;  The promotion ofcooperative processing is an SAA priority, according to IBM.andM;Each goal brings a corresponding benefit to the SAA user, said Chuck Balsly,publisher of the SAA Age newsletter, based in Dallas.andP;  &quot;Programming standardsmeans you get better value from your investment in programs and programmers;CUA means reduced training costs for end users; cooperative processing allowsfor better utilization of different machines.&quot;andM;One Case vendor we asked believed Case and SAA were not related, and anothervendor thought they were the same thing.andP;  So what is the relationship betweenCase and SAA?andP;  (See Figure 2.)andM;Jerry Grochow, vice president of corporate strategy at American ManagementSystems, Arlington, Va., said, &quot;Case and SAA have the same goal: developingsystems in a systematic way.andP;  But they work on different levels.andP;  Case coversthe whole development life cycle, whereas SAA relates only to the softwareimplementation phase.andP;  For this part of the software-production job, SAAoffers a framework that Case tools can subscribe to.&quot;andM;AMS was a developer of an early SAA application, the TieLine family ofproducts for telecommunications.andP;  AMS also developed the SAA version of theLocal Government Financial System (LGFS), and SAA versions of the GovernmentFinancial System (GFS) and College and University Financial System (CUFS).andM;When Grochow talks about developing systems in a systematic way, he toucheson the dual nature of the connection between SAA and Case.andP;  Case, after all,is software that produces software.andP;  SAA standards apply at both levels: theCase tool software itself, and the target software that the Case toolproduces (see Figure 3).andP;  In other words, if Case is like a factory, SAAdefines both how the factory operates and how the things made there operatein turn--a metrically tooled ruler factory making metric rulers.andM;Because Case and SAA intersect at two separate points, like somecomputer-architecture Mobius strip, they have a complicated, symbiotic effecton one another.andP;  This was called &quot;mirrors within mirrors&quot; by Case consultantVaughan Merlyn, chairman of Case Research Corp., Bellevue, Wash.andM;At the &quot;factory&quot; level, SAA standards make the job of building Case toolsmuch easier.andP;  And Case tools produced with these standards in mind go on tohelp spawn lots of SAA-compliant target applications.andM;This mutually beneficial cycle can be viewed in the light of the three SAAgoals outlined above: portable programs, standard user interface andcooperative processing.andM;For years, the Case market has been a free-for-all competition.andP;  This waspartly due to lack of an overall structure, and partly because Case-toolprogrammers faced the near-impossible task of automating an industry that hadfew accepted standards.andM;Standards were never necessary when software was hand-crafted, eachapplication built for a certain job.andP;  Now that applications are needed morequickly than hand-coding permits, the process needs to be mechanized.andP;  Thisis the job Case tools were invented to do.andP;  But mechanization is onlypossible when the output has some uniformity.andP;  You can't order anything youwant at McDonald's, but nobody makes hamburgers faster or cheaper.andM;SAA's Common Programmer Interface does the computer equivalent of limiting arestaurant menu to hamburgers, cheeseburgers, fries and soft drinks.andP;  Whenthe languages and services acceptable for applications of the future arenarrowed down and standardized, software production suddenly becomes an&quot;automatable&quot; job.andP;  Making tools to help design, build and test softwarebecomes a more practical and profitable idea than before.andM;&quot;What Case has needed for a long time,&quot; said Elliot Chikofsky, director ofresearch and technology for Index Technology, &quot;is far fewer options.andP;  TheCase tool vendors themselves have worked for years trying to define commonsoftware environments.andP;  No one had the clout to make it stick.andP;  Now SAA hasgiven us one, whole and entire, and put IBM's name on it.&quot;andM;&quot;SAA makes our life easier,&quot; said Charles Bachman, chief executive officer ofBachman Information Systems.andP;  &quot;It minimizes the number of software platformswe have to specialize in.andP;  We don't have to make a different tool for eachenvironment.&quot;andM;SAA's CPI standards also help ensure that Case tools from different vendorswill work together on different phases of a software development project.andO;Case tools are more likely to be in sync when their developers have beenworking with a common set of assumptions.andM;Chuck Riegel, vice president of marketing at the BST (Business SoftwareTechnology Inc.) Division of Legent Corp., Westborough, Mass., said, &quot;SAA,through AD/Cycle, gives common ground to all of us who automate pieces of thecycle.&quot;andP;  Legent makes a Case tool that provides software version control andconfiguration management.andM;This component approach would not work, however, without SAA's secondcontribution, a standard for user access, he said.andM;User InterfaceandM;The people who use Case tools to create new systems (Case users as opposed toCase builders) must interact in multiple ways, both textually andgraphically, with not just one Case tool but with several.andP;  Manysoftware-building projects integrate different Case component tools under oneroof with one central data repository.andM;SAA's CUA makes sure that these different components look and behave the sameway.andP;  If all Case tool vendors adopted the CUA interfaces, a user could movefrom, for example, the Enterprise Modeling phase to the Analysis/Designphase, or from an Index Technology tool to a Bachman tool, without majorjolts.andM;AD/Cycle, with its conglomeration of tools from IBM and others, lives or dieson CUA.andM;Arnold Kraft, president of Bachman Information Systems, said, &quot;AD/Cycle is awhole kit bag of tools.andP;  CUA will make them work together as one tool.andP;  Wewant to protect our users' investment in training people to use thesesystems.&quot;andM;Cooperative ProcessingandM;SAA's third goal is cooperative processing.andP;  Merlyn of Case Research said,&quot;Case turns out to be one of the classic applications for client-serverarchitecture, the very basis of cooperative processing.andM;&quot;The 'client' in Case is the graphical workstation that Case vendors haveused for some time to provide the powerful graphical interface the Case userneeds to analyze, design and test the target application.andP;  The 'server' isthe host repository.andP;  It is the 'data warehouse' where businessspecifications, design diagrams, source and object code are stored for thewhole community of developers,&quot; he said.andM;The more successful SAA becomes in promoting cooperative processing, the morecapable Case tool builders will be to integrate high-performance design toolswith central Case services.andM;&quot;IBM realizes the world needs lots of new applications and a lot of oldapplications rebuilt.andP;  IBM wants those to be SAA applications.andP;  That's whyIBM has gotten into Case in the first place,&quot; said Dick Dowdell, director ofresearch and development at McCormack andamp; Dodge, Natick, Mass.andM;Mandamp;D provided one of the original SAA OfficeVision applications, and Dowdellrealizes that building SAA applications by hand is neither quick noreconomical.andP;  This is where Case can return the favor to SAA, by significantlyspeeding development of applications that promote SAA's three goals.andM;For example, IBM is eager for target applications that conform to the CUAinterface.andP;  The more widely and the more quickly this look-and-feel emerges,the better chance it has to become an industry standard.andM;Unfortunately, CUA-compliant applications have proved rather difficult tohand-code, Merlyn said.andM;&quot;Presentation Manager, the facility which implements CUA for OS/2, is a verycomplex, very foreign piece of technology.andP;  We need easier ways to 'paint'SAA screens.andP;  We need tools that assist--even enforce--CUA standards,&quot; headded.andM;The Easel product from Interactive Images, Inc., Woburn, Mass., is beingbacked by IBM as a tool that can help build CUA-compliant screens on existing3270 host-based applications, as well as new applications.andM;Of course, not everyone is enchanted with the idea that human interfaces willbe constructed according to a strict set of rules as interpreted by anautomated code generator.andP;  &quot;We're going to lose some flexibility and flair inour applications,&quot; warned Fred Braddock, vice president of research anddevelopment at Sterling Software's Answer Systems Division, Canoga Park,Calif., an early developer of SAA systems.andM;&quot;Conformity will be enforced, and of course that's the idea.andP;  We'll getcolorless applications but cheap training,&quot; Braddock said.andM;It is true that distinctiveness is sacrificed to achieve automation, but theoutlook may not be quite so drab.andP;  A certain amount of &quot;color&quot; can remain inan application, depending on the degree to which a Case user stays involvedwith the user interface definition process, and how much the tool allows forindividual creativity.andM;Case-built applications also promote program portability, another of SAA'spriorities.andM;When a Case tool produces a target application using SAA programminginterfaces, it produces an essentially portable program, said Balsly of theSAA Age newsletter.andP;  &quot;The new SAA Case tools will be able to generate SAACobol with SAA SQL and CUA dialogs.andP;  With all these interfaces [being]standard, the program will run it on any SAA platform.&quot;andM;Platform decisions can wait until late in the development process.andP;  Thisallows for the maximum flexibility of implementation and provides thegreatest chance for reusability of the development work.andM;The portability process may even go beyond conventional SAA platforms.andP;  Forexample, Andersen Consulting's Foundation Case environment will generateSAA-compatible systems that can be ported to IBM, DEC or Groupe Bullhardware.andM;So far we have Case and SAA scratching each other's backs nicely.andO;Cooperative processing is the only SAA goal that presents a problem.andM;Most vendors agree that while Case is well on the way toward automating theproduction of standalone programs (even portable standalone programs), Casehas taken only a few steps toward tools that will automate the production ofcooperative processing applications.andM;&quot;This one's going to be hard to achieve,&quot; said Sterling's Braddock.andP;  He notedthat all cooperative processing applications, even the Case vendors' owncooperative processing components, are still hand-crafted.andP;  He expects noautomation of distributed systems for the near future.andM;Grochow of AMS said, &quot;We just don't understand the principles yet.andP;  We don'thave good data on how to cost-effectively distribute the databases or thecode.andP;  How do you make tools that can take into account network traffic,communication channel costs or performance at any given location?andP;  We've onlygot rules of thumb.andP;  So we keep building these cooperative processing systemsby hand.&quot;andM;Some Case vendors cautiously disagree.andP;  Index Technology's Chikofsky said,&quot;There's a long way to go, but we have been working on the problem.andP;  We'reworking with a methodology called Information Economics that will help uscapture costs of making placement decisions and the cost of distribution.andP;  Wethink we can simulate the behavior of the network and come up withintelligent decisions.&quot;andM;This part of SAA-compliant applications may never be as completely&quot;automatable&quot; as the others.andP;  Charles Bachman said, &quot;We may not buildcooperative systems directly, but we've never intended to do any softwareautomation directly.andP;  We believe in the cooperation between the Case tool anda human user who understands the problem.andP;  They can jointly make decisionsthat will generate better systems.&quot;andM;At first glance, SAA and Case may seem to live in two separate realms at twodifferent levels, but they are inextricably linked.andP;  The reasons have to dopartly with IBM's business position, partly with a corporate climate thatrequires rapid application turnover, and partly with a growing hunger in thesoftware development industry for consensus.andP;  SAA applications will neverreach critical mass without automation; and automation is impossible withoutstandards.andM;&quot;Sluggishness in the computer industry,&quot; said Bachman, &quot;is due to ourinability to build and maintain applications with any efficiency.andP;  Ifhardware were free, we couldn't consume more of it because we don't have theapplications.andP;  We have to reduce the human labor involved in getting thissoftware built.&quot;andM;If all goes according to IBM's plan, SAA will help through standardization;Case will help via automation.andM;John Tibbetts is president of Kinexis, a San Francisco-based consulting firmspecializing in cooperative processing issues.andP;  Barbara Bernstein, also aprincipal in Kinexis, is a managing editor of the SAA Update newsletter,published by Systems Education Associates, Dallas.andO;</TEXT></DOC>