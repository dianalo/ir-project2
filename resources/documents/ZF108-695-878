<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-695-878  </DOCNO><DOCID>08 695 878.andM;</DOCID><JOURNAL>Microsoft Systems Journal  July 1990 v5 n4 p53(11)* Full Text COPYRIGHT The Microsoft Corporation 1990.andM;</JOURNAL><TITLE>A new multiple document interface API simplifies MDI applicationdevelopment. (Applications Programming Interface) (tutorial)</TITLE><AUTHOR>Petzold, Charles.andO;AttFile:   MSJ\V05N04\MDI.EXE;2 Program:  MDI.EXE  Self-extracting archive.andM;</AUTHOR><SUMMARY>Multiple Document Interface (MDI) is a specification forapplications written for the Microsoft Windows environment or forOS/2 Presentation Manager programs.andP;  The user or programmer isallowed to work with multiple documents in a single applicationbecause an MDI application maintains multiple document windowswithin a single client area.andP;  The main application window in MDIis conventional in appearance, with a title bar, a menu, a sizingborder, minimize/maximize icons and a system menu icon.andP;  Userscreate child windows either for programming or for documentationand, aided by a sample program called MULTIPAD, can learn how towrite an MDI program.andP;  There are 3 menu templates used by theprogram.andP;  Microsoft Windows 3.0 still lacks the capacity forsplitting windows in half or quadrants.andM;</SUMMARY><DESCRIPT>Ticker:    MSFT.andO;Product:   Microsoft Windows 3.0 (Graphical user interface) (programming).andO;Topic:     Graphical User InterfaceUser InterfaceApplications ProgrammingApplications Programming InterfaceTutorial.andO;Feature:   illustrationchartprogram.andO;Caption:   The parent-child hierarchy of a Windows MDI application. (chart)MDI-related messages, structures, and functions in Windows.H.andO;(program)MDIDEMO. (program)andM;</DESCRIPT><TEXT>Te multiple Document Interface (MDI) is a specification for applicationswritten for the Microsoft&quot; Windows&quot; environment or OS/2 Presentation Managerprograms.andP;  The specification describes a window structure and user interfacethat allow the user to work with multiple documents in a single application(such as text documents in a word processing program or spreadsheets in aspreadsheet program).andP;  Just as Windows' maintains multiple applicationwindows within a single screen, an MDI application maintains multipledocument windows within a single client area.andP;  The MDI specification datesback to Windows Version 2.0 and was first used in Microsoft Excel forWindows.andP;  Windows programmers who wrote MDI applications before the releaseof Windows Version 3.0 must be commended for their bravery and stamina.andP;  I amcertainly not one of them.andP;  When I first saw a beta version of MicrosoftExcel, I was intrigued by several aspects of the program that appeared toexhibit non-standard behavior for a Windows application.andP;  Using SYMDEB, Ispent most of a day tracing through the Microsoft Excel code attempting todetermine what magic its programmers had performed.andP;  It turned out not to bemagic at all, but simply an enormous amount of work.andM;With Windows 3.0, however, much of that work has already been done for theapplications developer.andP;  Windows 3.0 includes one new window class, four newfunction calls, two new data structures, and eleven new messages specificallydesigned to simplify MDI applications.andP;  The Elements of MDIandM;The Multiple Document Interface is described in the Systems ApplicationArchitecture, Common User Access: Advanced Interface Design Guide (IBM,1989).andP;  The main application window of an MDI program is conventional: it hasa title bar, a menu, a sizing border, a system menu icon, andminimize/maximize icons.andP;  However, the client area (called a workspace) isnot directly used to display program output.andP;  This workspace contains zero ormore child windows, each of which displays a document.andM;These document child windows look like normal application windows, exceptthey do not have a menu.andP;  The menu on the main application window applies tothe document windows.andM;Only one document window is active at any time.andP;  The active window appears infront of all the other document windows and is indicated by a highlightedtitle bar.andP;  All the document child windows are clipped to the workspace areaand never appear outside the application window.andP;  Figure 1 shows severaldocuments in Microsoft Excel.andM;At first, MDI seems a fairly straightforward job for the Windows programmer.andO;All you need to do is create a WS_CHILD or WS_POPUP window for each document,making the program's main application window the parent of the documentwindow.andP;  But with a little exploration of an MDI application such asMicrosoft Excel, you'll find some complications that require some difficultcode.andM;The first intricacy is that an MDI document window can be maximized.andP;  Thetitle bar of the document window (normally used to show the filename of thedocument in the window) disappears, and the filename appears appended to theapplication name in the application window's title bar.andP;  The system menu iconof the document window becomes the first item in the top-level menu of theapplication window.andP;  The icon to restore the size of the document windowbecomes the last item in the top-level menu and appears to the far right.andM;Second, although some MDI programs don't allow this, a document window shouldalso be minimizable.andP;  Its icon should appear at the bottom of the workspace.andO;(Generally an MDI application will use different icons for the mainapplication window and each type of document.)andM;The third complication is that the system keyboard accelerator to close adocument window is the same as that used to close the main window, but ituses the Ctrl key rather than Alt.andP;  That is, Alt-F4 closes the applicationwindow while Ctrl-F4 closes the document window.andP;  In addition, Ctrl-F6switches among the child document windows within the active MDI application.andO;Alt-Spacebar invokes the system menu of the main window, as usual.andP;  Alt-Minusinvokes the system menu of the active child document window.andM;Fourth, when using the cursor keys to move among items on the menu in an MDIapplication, control passes from the application system menu, to thecurrently active document system menu, then back to the first item on themenu bar.andP;  (Standard windows pass control from the system menu directly tothe first item on the menu bar.)andM;Fifth, if the application is capable of supporting several different types ofchild windows (for example, the sheet and chart documents in MicrosoftExcel), the menu should reflect the operations associated with that type ofdocument.andP;  This requires that the program change the menu when a differentdocument window becomes active.andP;  In addition, when no document window exists,the menu should be stripped down to only those operations involved in openinga new document.andM;Finally, the top-level menu bar has an item called &quot;Window.&quot; By convention,this is the last item on the top-level menu except for Help.andP;  The &quot;Window&quot;submenu generally has options to arrange the document windows within theworkspace.andP;  Document windows can be cascaded from the upper left or tiled sothat each document window is fully visible.andP;  This submenu also has a list ofall the document windows.andP;  Selecting one moves that document window to theforeground.andM;All these aspects of MDI are supported in Windows 3.0.andP;  Some overhead isrequired, of course (as will be shown in a sample program), but it's notanything like the code you'd have to write to support all these featuresdirectly.andP;  Windows Version 3.0 and MDIandM;Some new terminology is necessary when discussing Windows 3.0 MDI support.andO;(I'm afraid this terminology will be a little confusing to OS/2 PresentationManager programmers.andP;  The use of the terms frame window and client window ina Windows MDI program isn't the same as in Presentation Manager.)andM;The main application window is called the frame window.andP;  Just as in aconventional Windows program, this is a window in the WS_OVERLAPPEDWINDOWstyle.andM;An MDI application also creates a client window based on the predefinedwindow class MDICLIENT.andP;  The client window is created by a call toCreateWindow using the WS_CHILD style.andP;  The last parameter to CreateWindow isa pointer to a small structure of type CLIENTCREATESTRUCT (see Figure 2).andO;This client window covers the client area of the frame window and isresponsible for much of the MDI support.andP;  The color of this client window isthe system color COLOR_APPWORKSPACE.andM;The document windows, called child windows, are created by initializing astructure of type MDICREATESTRUCT (see Figure 2) and sending the clientwindow a WM_MDICREATE message with a pointer to this structure.andP;  The documentwindows are children o the client window, which in turn is a child of theframe window.andP;  The parent-child hierarchy is shown in Figure 3.andM;You need a window class (and window procedure) for the frame window and eachtype of child window supported by the application.andP;  You don't need a windowprocedure for the client window because the window class is preregistered.andM;Sample ProgramandM;The Windows 3.0 Software Development Kit (SDK) includes a sample programcalled MULTIPAD that demonstrates how to write an MDI program.andP;  However,MULTIPAD contains quite a bit of code that has nothing to do with MDI.andP;  Itmight be easier for you to get a better feel for MDI programming by examininga smaller program that does little except demonstrate the MDI features.andP;  Thecomponents of this program, called MDIDEMO, are shown in Figure 4.andP;  Tocompile MDIDEMO, you need Microsoft C Version 6.0 and the Windows 3.0 SDK.andM;MDIDEMO (see Figure 5) supports two types of extremely simple documentwindows: one displays &quot;Hello, World!&quot; in the center of its client area andthe other displays a series of random rectangles.andP;  (In the source codelistings and identifier names, these are referred to as the Hello documentand the Rect document.) Different menus are associated with these two typesof document windows (compare Figures 5 and 6).andP;  The document window thatdisplays &quot;Hello, World!&quot; has a menu that allows changing the color of thetext.andP;  Three Menus Let's turn first to the MDIDEMO.RC resource script (seeFigure 4), which defines three menu templates used by the program.andP;  Theprogram displays the MdiMenuInit menu when no document windows are present.andO;This menu simply allows the creation of a new document or exit from theprogram.andM;The MdiMenuHello menu is associated with the document window that displays&quot;Hello, World!&quot; The File submenu allows the opening of a new document ofeither type, the closing of the active document, and exiting from theprogram.andP;  The Color submenu lets you set the text color.andP;  The Window submenuhas options to arrange the document windows in cascade or tile fashion, toarrange the document icons, and to close all the windows.andP;  This submenu willalso list all the document windows as they are created.andM;The MdiMenuRect menu is associated with the random rectangle document.andP;  Thismenu is the same as the MdiMenuHello menu except that it does not include theColor submenu.andP;  The MDIDEMO.H header file (see Figure 4) defines all the menuidentifiers as well as three constants:andM;#define INIT_MENU_POS 0andM;#define HELLO_MENU_POS 2andM;#define RECT_MENU_POS 1andM;These identifiers indicate the position of the &quot;Window&quot; submenu in each ofthe three menu templates.andP;  This information is needed by the program toinform the client window where the document list is to appear.andP;  Of course,the MdiMenuInit menu doesn't have a &quot;Window&quot; submenu, so I've indicated thatthe list should be appended to the first submenu (position 0).andP;  The list willnever actually be viewed there, however.andP;  You'll see why when I discuss theprogram.andP;  The IDM_FIRSTCHILD identifier doesn't correspond to a menu item.andO;This is the identifier that will be associated with the first document windowin the list that will appear in the &quot;Window&quot; submenu.andP;  You should choose thisidentifier to be greater than all the other menu IDs.andP;  Program initializationIn MDIDEMO.C (see Figure 4), WinMain begins by registering window classes forthe frame window and the two child windows.andP;  The window procedures are calledFrameWndProc, HelloWndProc, and RectWndProc.andP;  Normally, different iconsshould be associated with these window classes.andP;  For simplicity, I've usedthe standard IDI_APPLICATION icon and no icon for the Rect window.andP;  (Notethat I've defined the hbrBackground field of the MWDCLASS structure for theframe window class to be the COLOR_APPWORKSPACE system color.andP;  This is notentirely necessary because the client area of the frame window is covered upby the client window, and the client window is this color anyway.andP;  However,using this color looks a little better when the window is first displayed.)andO;The lpszMenuName field is set to NULL for each of these three window classes.andO;For the Hello and Rect child window classes, this is normal.andP;  For the framewindow class, I have chosen to indicate the menu handle in the CreateWindowfunction when creating the frame window.andM;The window classes for the Hello and Rect child windows allocate extra spacefor each window using a nonzero value as the cbWndExtra field of the WNDCLASSstructure.andP;  This space will contain a local memory handle that will referencea block of memory used to store information unique to each document window.andO;This block of memory is the size of the HELLODATA or RECTDATA structuresdefined near the top of MDIDEMO.C.andM;Next, WinMain uses LoadMenu to load the three menus and saves their handlesin global variables.andP;  Three calls to the GetSubMenu function obtain handlesto the &quot;Window&quot; submenu on which the document list will be appended.andP;  Thesehandles are also saved in global variables.andM;A call to CreateWindow in WinMain creates the frame window.andP;  During theprocessing of WM_CREATE in FrameWndProc, the frame window creates the clientwindow.andP;  This involves another call to CreateWindow.andP;  The window class is setto MDICLIENT, which is the preregistered class for MDI client windows.andP;  Thelast parameter to CreateWindow must be set to a pointer to a structure oftype CLIENTCREATESTRUCT.andP;  This structure has two fields, hWindowMenu andidFirstChild.andP;  The first field, hWindowMenu, is the handle of the submenu onwhich the document list will be appended.andP;  In MDIDEMO, this ishMenuInitWindow, which was obtained during WinMain.andP;  You'll see later how themenu is changed.andP;  The second field, idFirstChild, is the menu ID to beassociated with the first document window in the document list.andP;  This issimply IDM_FIRSTCHILD.andM;Back in WinMain, MDIDEMO displays the newly created frame window and entersthe message loop.andP;  The message loop is a little different from usual-afterobtaining the message from the message queue with a call to GetMessage, anMDI program passes the message to TranslateMDISysAccel.andP;  This functiontranslates any keystroke that may correspond to the special MDI accelerators(such as Ctrl-F6) into a WM_SYSCOMMAND message.andP;  If the functionTranslateMDISysAccel returns TRUE (indicating that a message was translated),TranslateMessage and DispatchMessage are not called.andP;  MDIDEMO uses its ownaccelerators also, so the message loop should call the TranslateMessage andDispatchMessage functions only if neither TranslateAccelerator norTranslateMDISysAccel returns TRUE.andM;Creating the Child WindowsandM;The bulk of FrameWndProc is devoted to processing WM_COMMAND messages thatsignal menu selections.andP;  As usual, the wParam parameter to FrameWndProccontains the menu ID number.andP;  For wParam values of IDM_NEWHELLO andIDM_NEWRECT, FrameWndProc must create a new document window.andP;  This is done byinitializing the fields of an MDICREATESTRUCT structure (most of whichcorrespond to CreateWindow parameters) and sending the client window aWM_MDICREATE message with lParam set to a pointer to this structure.andP;  Theclient window then creates the child document window.andM;Normally, the szTitle field of the MDICREATESTRUCT structure would be thefile name corresponding to the document.andP;  The style field can be set to thewindow styles WS_HSCROLL or WS_VSCROLL or both to include scroll bars in thedocument window.andP;  The style field can also include WS_MINIMIZE or WS_MAXIMIZEto display the document window initially in a minimized or maximized state.andO;The lParam field of the MDICREATESTRUCT structure provides a way for theframe window and the child window to share some variables.andP;  This could be setto a local or global memory handle that references a block of memorycontaining a structure.andP;  During the WM_CREATE message in the child documentwindow, lParam is a pointer to a CREATESTRUCT structure; the lpCreateParamsfield of this structure is a pointer to the MDICREATESTRUCT structure used tocreate the window.andM;On receipt of the WM_MDICREATE message, the client window creates the childdocument window and adds the title of the window to the bottom of the submenuspecified in the MDICLIENTSTRUCT structure.andP;  When the MDIDEMO program createsits first document window, the submenu used is the File submenu of theMdiMenuInit menu.andP;  We'll see later how this document list gets moved to theWindow submenu of the MdiMenuHello and MdiMenuRect menus.andM;The menus lists as many as nine documents, each preceded by an underlinednumber (1 to 9).andP;  If more than nine document windows are created, this listis followed by a &quot;More windows...&quot; item on the menu.andP;  This item invokes adialog box containing a list box that lists all the document windows (seeFigure 7).andP;  The automatic maintenance of this document list is one of thenicest features of the Windows MDI support.andM;More Frame Window Message ProcessingandM;Let's continue with FrameWndProc message processing before turning to thechild document windows.andP;  When you select Close from the File menu, MDIDEMOcloses the active child window, and it obtains the handle to the active childwindow by sending the client window a WM_MDIGETACTIVE message.andP;  If the childwindow responds affirmatively to a WM_QUERYENDSESSION message, then MDIDEMOsends the client window a WM_MDIDESTROY message to close the child window.andM;Processing the Exit option from the File menu requires only that the framewindow procedure send itself a WM_CLOSE message.andP;  Processing the Tile,Cascade, and Arrange Icons options from the Window submenu is a snap,requiring only that the WM_MDITILE, WM_MDICASCADE, and WM_MDIICONARRANGEmessages be sent to the client window.andM;The Close All option is more complex.andP;  FrameWndProc calls EnumChildWindows toenumerate the child windows through the callback function CloseEnumProc.andO;This function sends the child a WM_MDIRESTORE message and thenWM_QUERYENDSESSION.andP;  If the child window responds affirmatively to aWM_QUERYENDSESSION message, CloseEnumProc closes the child window by sendingthe WM_MDIDESTROY message to the client window.andP;  However, the icon titlewindows (the text beneath each document icon) must not be destroyed.andP;  You cancheek for these windows by a non-NULL return from GetWindow with a GW_OWNERparameter.andM;You'll notice that FrameWndProc does not process any of the WM_COMMANDmessages signaling that one of the colors has been selected from the Colormenu.andP;  These messages are really the responsibility of the document window.andO;For this reason, FrameWndProc sends all unprocessed WM_COMMAND messages tothe active child window so that the child window can process those messagesthat pertain to its window.andM;All the messages that the frame window procedure chooses not to process mustbe passed to DefFrameProc.andP;  This is one of the new MDI functions in Windows3.0.andP;  It replaces DefWindowProc in the frame window procedure.andP;  Even if aframe window procedure traps the WM_MENUCHAR, WM_NEXTMENU, WM_SIZE, orWM_SETFOCUS messages, they must also be passed to DefFrameProc.andM;Unprocessed WM_COMMAND messages must also be passed to DefFrameProc.andP;  Inparticular, FrameWndProc does not process any of the WM_COMMAND messagesresulting from the user selecting one of the documents from the list in theWindow submenu.andP;  (The wParam values for these options begin withIDM_FIRSTCHILD.) These messages are passed to DefFrameProc and processedthere.andM;Notice that the frame window does not need to maintain a list of windowhandles of all the document windows it creates.andP;  If these handles are everneeded (such as when processing the Close All option from the menu), they canbe obtained using GetWindow.andM;Child Document WindowsandM;Now let's look at HelloWndProc, which is the window procedure used for thechild document windows that display &quot;Hello, World!&quot;andM;As with any window class used for more than one window, static variablesdefined in the window procedure (or any function called from the windowprocedure) are shared by all windows based on that window class.andM;Data that is unique to each window must be stored using a method other thanstatic variables.andP;  One such technique uses window properties.andP;  Anotherapproach (the one I employed) uses memory space that is reserved by defininga nonzero value in the cbWndExtra field of the WNDCLASS structure used toregister the window class.andM;In MDIDEMO, I use this space to store a local memory handle that references ablock of memory the size of the HELLODATA structure.andP;  HelloWndProc allocatesthis memory during the WM_CREATE message, locks it, initializes the twofields (which indicate the currently checked menu item and the text color),unlocks the block, and stores the local memory handle using SetWindowWord.andM;When processing a WM_COMMAND message for changing the text colors (recallthat these messages originate in the frame window procedure), HelloWndProcuses GetWindowWord to obtain a handle to the memory block containing theHELLODATA structure.andP;  Using this structure, HelloWndProc unchecks the checkedmenu item, checks the selected menu item, and saves the new color.andM;A document window procedure receives the WM_MDIACTIVATE message whenever thewindow becomes active or inactive (indicated by a TRUE or FALSE value inwParam).andP;  You'll recall that MDIDEMO has three different menus: MdiMenuInit,used when no documents are present; MdiMenuHello, used when a Hello documentwindow is active; and MdiMenuRect, used when a Rect document window isactive.andM;The WM_MDIACTIVATE message provides an opportunity for the document window tochange the menu.andP;  If wParam is TRUE (meaning the window is becoming active),HelloWndProc changes the menu to MdiMenuHello.andP;  If wParam is FALSE,HelloWndProc changes the menu to MdiMenuInit.andM;HelloWndProc changes the menu by sending a WM_MDISETMENU message to theclient window.andP;  The client window processes this message by removing thedocument list from the current menu and appending it to the new menu.andP;  Thisis how the document list is transferred from the MdiMenuInit menu (which wasin effect when the first document is created) to the MdiMenuHello menu.andP;  TheSetMenu function should not be used to change a menu in an MDI application.andM;Another little chore involves the checkmarks on the Color submenu.andP;  Programoptions such as these should be unique to each document.andP;  For example, youshould be able to set blue text in one window and red text in another.andP;  Themenu checkmarks should reflect the option chosen in the active window (seeFigure 8).andP;  For this reason, HelloWndProc unchecks the selected menu itemwhen the window is becoming inactive and checks the appropriate item when thewindow is becoming active.andP;  The window procedure gets the firstWM_MDIACTIVATE message with wParam set to TRUE when the window is firstcreated, and the last (with wParam set to FALSE) when the window isdestroyed.andP;  When the user switches from one document to another, the  first document  window  receives  a WM_MDIACTIVATE message with wparam set to FALSE(at which time it sets the menu to MdiMenuInit) and the second documentwindow receives a WM_MDIACTIVATE message with wparam set to TRUE (at whichtime it sets the menu to MdiMenuHello or MdiMenuRect as appropriate).andP;  If allthe windows are closed, the menu is left as MdiMenuInit.andM;You'll recall that FrameWndProc sends the child window a WM_QUERYENDSESSIONwhen the user selects Close or Close All from the menu.andP;  HelloWndProcprocesses the WM_QUERYENDSESSION and WM_CLOSE messages by displaying amessage box and asking the user if the window can be closed.andP;  (In a realprogram, this message box would ask if a file needed to be saved.) If theuser indicates that the window should not be closed, the window procedurereturns zero.andP;  During the WM_DESTROY message, HelloWndProc frees the localmemory block allocated during the WM_CREATE message.andM;All unprocessed messages must be passed on to DefMDIChildProc (notDefWindowProc) for default processing.andP;  The messages shown below must bepassed to DefMDIChildProc whether the child window procedure does somethingwith them or not.andM;WM_CHILDACTIVATEandM;WM_GETMINMAXINFOandM;WM_MENUCHARandM;WM_MOVEandM;WM_NEXTMENUandM;WM_SETFOCUSandM;WM_SIZEandM;WM_SYSCOMMANDandM;RectWndProc is fairly similar to HelloWndProc, but it's a little simpler (nomenu options are involved and the window does not verify with the user if itcan be closed), so I needn't discuss it.andP;  But note that RectWndProc breaksafter processing WM_SIZE so it is passed to DefMDIChildProc.andM;Finishing UpandM;I mentioned earlier that the MDI support in Windows 3.0 involves one newwindow class, two new data structures, four new function calls, and elevennew messages.andP;  The window class, MDICLIENT, is used for creating the clientwindow.andP;  The two new data structures, CLIENTCREATESTRUCT and MDICREATESTRUCT,are used for creating the client window and the child document windows.andM;I discussed three of the four new function calls: TranslateMDISysAccel,DefFrameProc, and DefMDIChildProc.andP;  The fourth new function call isArrangeIconicWindows, which performs the same function in an MDI applicationas the WM_MDIICONARRANGE message.andM;MDIDEMO demonstrates nine of the eleven new messages.andP;  These messages are:andM;WM_MDIACTIVATEandM;WM_MDICASCADEandM;WM_MDICREATEandM;WM_MDIDESTROYandM;WM_MDIGETACTIVEandM;WM_MDIICONARRANGEandM;WM_MDIRESTOREandM;WM_MDISETMENUandM;WM_MDITILEandM;The other two messages are WM_MDIMAXIMIZE and WM_MDINEXT.andP;  But becauseWindows takes care of all the maximizing and switching of child windows,applications usually don't have to use these messages.andM;One aspect of the Multiple Document Interface described in the IBM book aboutCommon User Access (CUA), and used in Microsoft Excel, is splitting windowsin half or into quadrants using small controls to the top and left of thescroll bars.andP;  This is not part of the MDI support in Windows 3.0.andP;  However,all other features of MDI described in CUA are provided.andP;  The new featuresdescribed here make MDI accessible to Windows programmers and are implementedin a way that illustrates the power of the object-oriented architecture ofWindows.andO;</TEXT></DOC>