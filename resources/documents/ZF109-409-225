<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-409-225  </DOCNO><DOCID>09 409 225.andM;</DOCID><JOURNAL>Hewlett-Packard Journal  August 1990 v41 n4 p15(9)* Full Text COPYRIGHT Hewlett Packard 1990.andM;</JOURNAL><TITLE>Directory services in the HP MAP 3.0 environment.andO;(Hewlett-Packard's Manufacturing Automation Protocol)</TITLE><AUTHOR>Cooke, Beth E.; Fettig, Colleen S.; Koski, Paul B.; Swope, DarrellO.; Vandoorn, Roy M.andM;</AUTHOR><SUMMARY>The directory facility service in HP's Manufacturing AutomationProtocol (MAP) 3.0 can be used to determine the location ofapplications and other resources in a distributed computernetwork.andP;  The ISO/CCITT X.500 model serves as the directoryservice in HP MAP 3.0, defining the architecture, information andoperations required in a standardized directory: the architecture,also called the directory model, defines the directory user agentand the directory system agent; the information, also called theinformation model, defines the different types of data storage andthe rules applied to them; the operations, also called thedirectory services, are the operations that can be performed onthe directory.andP;  The File Transfer, Access and Management (FTAM)and Manufacturing Message Specification (MMS) are the twoapplication-level services using HP MAP 3.0's directoryoperations.andM;</SUMMARY><DESCRIPT>Company:   Hewlett-Packard Co. (products).andO;Ticker:    HWP.andO;Product:   HP Manufacturing Automation Protocol 3.0 (Communications software)(design and construction).andO;Topic:     Manufacturing Automation Protocol (Computer Network Protocol)SpecificationsOSI StandardX.500 ProtocolElectronic Mail SystemsDirectoriesResource Management.andO;Feature:   illustrationchart.andO;Caption:   The function of the directory user agent (DUA). (chart)The function of the directory system agent (DSA) in the directorymodel. (chart)The overall X.500 model. (chart)andM;</DESCRIPT><TEXT>To provide a standardized implementation of a directory service for locatingresources in the HP MAP 3.0 environment, the ISO X.500 directory standard isused.andM;AS COMPUTER NETWORKS BECOME larger and more complex, applications are beingdistributed throughout a network for maximum efficiency in the use of thecomputer resources.andP;  Determining the location of these applications iscritical to the success of the network from the user's perspective.andP;  Afacility called a directory service can be used to determine the location ofapplications and other resources in a network.andM;This article describes the general characteristics of a directory service andgives an overview of the ISO/CCITT X.500 model, the directory service in HPMAP 3.0.andM;DirectoriesandM;Directories have been around for many years, from the telephone directory inthe home to the card catalog at the local library.andP;  With the size andcomplexity of the modern computer network, automated directories are beingintroduced to perform a function in the network that is similar to the role atelephone directory plays in the home.andM;Let's consider the world of manufacturing, where the typical operation uses anumber of different and isolated computer systems.andP;  There is a mainframeapplication that manages the facility's entire inventory data base, a groupof engineering workstations for product design, robots for controllingsystems on the manufacturing floor, and personal computers that are used asterminals or low-level workstations.andP;  The workstations, controllers, andpersonal computers can be connected to other computers of the same type, butthey are usually isolated from the other systems.andP;  For instance, the robotcell controllers may not communicate with each other, the CAD workstationsonly talk to each other, and personal computers are often completelyisolated.andP;  These systems are classic examples of islands of information.andM;To implement just-in-time manufacturing, which is aimed at dramaticallyincreasing manufacturing productivity and flexibility, these islands have tobe coalesced into a unified system.andP;  More specifically, floor cellcontrollers should be able to update the inventory data base as they useparts to build the products, and the design engineers at the CAD workstationsshould be able to access the inventory data base to determine the immediateavailability of components that they may want to specify in their designs.andO;In fact, it may be necessary for them to be able to access their supplier'sinventory data base, which may be remote and controlled by a differentcompany.andM;In forming this complete system, there are many technical problems thatarise, only some of which a directory service can address.andP;  One of thefundamental difficulties is that the new system will be very large andcomplex, and therefore difficult for anyone to understand completely.andO;Another attribute of such a large system is that it will be dynamic-newcomponents will be added to it and taken away almost daily.andP;  Applications andsubnetworks will enter and leave the network.andP;  Paths between portions of thenetwork will also change frequently.andP;  Additionally, the addresses,availability, and physical locations of individual applications and networkresources may change.andP;  Thus, the changes to the state of the network can beviewed as asynchronous events and applications cannot be required to haveprior knowledge of them.andP;  Finally, the expected useful lifetime of anindividual application can be relatively long, and it will interact andcommunicate with other applications more often than it will change itsavailability, address, or other associated information.andM;Directory Service CharacteristicsandM;A directory service can help isolate applications from changes in the networkby providing a globally accessible repository of information about thedifferent objects in the network.andP;  In directory service terminology objectsare items such as printers, servers, workstations, files, directories,gateways, users, and processes (applications).andP;  As new applications enter thesystem they can be registered in the directory so that other applications canretrieve information about them, such as their current address and/or adescription of the services that they provide.andM;For the user's and application's benefit this large complex system should beas transparent as possible.andP;  One of the primary goals in designing atransparent network is to provide users with a simple and intuitive view ofthe network.andP;  The directory service can help with this problem by providing afacility through which network objects can be named in an abstract andconsistent manner.andP;  In general, it is much easier for users to use abstractnames than descriptions.andP;  For instance, individuals are addressed by a namelike  Joe,&quot; rather than a description like, &quot;tall 12-year-old with dark hairthat lives across the street.&quot; This naming facility also helps with thesecond general problem changes.andP;  If Joe moves, or gets older, he is stillgoing to be joe.andM;Although users and hence applications generally prefer to identify objectswith relatively simple, English-like names, processes on a network might needto have more information about an object.andP;  If the object is a file, they mayneed to know which machine it resides on, the directory it resides in, whattype of file it is, and the filename.andP;  This conflicts with the type of simplenaming that users would prefer.andP;  One goal of a directory service is toprovide a naming mechanism for users that does not require them to providesystem dependent knowledge about objects.andP;  Directory Service FunctionsandM;As mentioned earlier, a version of a directory service that has been used foryears is the telephone directory.andP;  Humans are not particularly fond of havingto memorize phone numbers to use the system.andP;  However, humans are fairly goodat remembering names or places of business.andP;  In the United States a telephonedirectory is divided into two sections: the white pages and the yellow pages.andO;The white pages are used to retrieve information, such as a person's phonenumber, address, and middle initial.andP;  In terms of the directory service, thisis known as name-to property binding.andP;  A user-friendly name can be used as akey to retrieve information associated with an object or properties of anobject, such as its network address.andM;The yellow pages section is used to find the information needed tocommunicate with some set of people, normally businesses.andP;  When the processis examined a little closer, what actually happens is that a property, sayHewlett-Packard dealership, is used to restrict retrieval to only thosebusinesses that are Hewlett-Packard dealers.andP;  In directory servicenomenclature this is property-to-name binding.andP;  In a network environment, aclient may wish to see a list of all printers in the building that support aparticular font, or all of the workstations that have a certain memoryconfiguration.andM;Unlike the common phone directory the directory service allows clients to usealiases or nicknames to identify an object.andP;  This is classified as providingname-to-name binding.andP;  All of the names in a particular set or equivalenceclass map to the same object.andP;  For example, the mail address/USA/HP/IND/Cupertino/Fred, could simply be addressed as Fred and thedirectory service would take care of mapping Fred to the full mail address.andM;Similarly, the directory service provides a name-to-listof-names bindingservice that returns a list of objects given a single object name.andP;  This is afacility that can be used for mailing to groups of users (distribution list),or in defining levels of access to network resources.andM;Inherent in the requirements for the four types of binding (name-to-pointer,pointer-to-name, name-to-name, and name-to-list) is the responsibility forstoring information.andP;  The data store contains a set of names and a set ofproperties that are associated with these names.andP;  The combination of a nameand a set of properties defines an object in the data store.andP;  The directoryservice also contains the ability to differentiate, in a simple form, betweendifferent classes of data.andP;  For instance, it can distinguish between thelogon name &quot;foo&quot; and the presentation level address &quot;foo.&quot; It can also tellthat the printer named &quot;Tom&quot; is different from the person with the same firstname.andP;  In a very fundamental sense, the directory service uses some semanticinformation as well as syntactical data.andM;Named objects must be organized in a hierarchical tree structure that enablesunambiguous, and possibly context sensitive naming.andP;  The purpose of this treeis to provide network administrators and users with logical groupings of theobjects they are likely to reference.andP;  This tree, or directory, may beorganized along some logical grouping such as an organizational structure orgeographical locations.andM;The directory service acts as a globally available register of systeminformation about the objects that are in the network.andP;  When requested, itretrieves specific portions of this data for clients.andP;  This implies that thedirectory service provides a dynamic binding capability for its clients.andP;  Forthe clients to rely upon the directory service, it must contain current andaccurate information about the state of the system.andP;  If it does, it willserve to increase the network's overall reliability because information aboutnetwork resources can be registered with one service that is responsible forsharing this information with processes on a dynamic basis.andP;  This featuregives the system a self-configuring capability that would not be feasible ifthe information had to be statically given to each client that might need thedata.andP;  This way, changes to the network have a minimal impact on networkoperations and applications can view the network as a relatively stable andabstract system.andM;Specifically, a directory service is an administrative name managementfacility for a transparent, distributed processing system.andP;  It provides aglobal naming service and manages information associated with each namednetwork object.andP;  With a directory service, users and applications can referto objects in an intuitive manner.andP;  Administrators can limit access to andmanage information on these objects through facilities provided in thedirectory service.andM;A Directory Service StandardandM;It is possible to conceive of different ways to implement a directoryservice, and with multiple vendors implementing directory services it isunlikely that these implementations will be able to communicate orinteroperate unless there is a directory standard.andP;  Therefore, to ensureinteroperability between the different implementations of a directoryservice, two international standards organizations-ISO (InternationalOrganization for Standardization) and CCITT (International Telegraph andTelephone Consultative Committee)-began a collaborative effort to standardizedirectory services.andP;  This work resulted in the CCITT 1988 X.500 standard andISO IS 9594.andP;  These two standards are identical.andP;  For simplicity, thedirectory standard will be referred to as X.500 throughout the remainder ofthis article.andP;  What is X.500?andM;To provide a standardized directory, three areas must be defined: thearchitecture, the information, and the operations.andP;  X.500 defines all three.andO;The architecture, called the directory model, defines two agents: thedirectory user agent and the directory system agent.andP;  The directory itself isdefined as a repository of information about objects.andP;  The information,called the informational model, defines the storage of the different types ofdata and the rules to which it must conform.andP;  The operations, or directoryservices, are the operations that can be performed on the directory.andO;Together, these two models and the operations form the model for the X.500directory standard.andM;X.500 Directory ModelandM;There are four objects in the directory model: the directory user, thedirectory, the directory user agent (DUA) and the directory system agent(DSA).andP;  The directory user can be either a user or an application.andP;  For adirectory user to operate on directory information, a connection must beestablished with the directory (see Fig.andP;  1).andP;  This is the job of the DUA.andO;The DUA represents the user to the directory.andP;  Interaction between the DUAand the directory occurs at an access point.andP;  The access point is theconceptual point at which an abstract service is obtained.andM;The directory is made up of one or more DSAs (see Fig.andP;  2).andP;  The role of aDSA is to communicate with the DUA representing the user, either directly orindirectly via other DSAs, and to provide access to the directory informationit is responsible for storing.andP;  When the directory consists of a singledirectory system agent, all directory information is contained within it.andO;When the directory consists of multiple DSAS, directory information isdistributed between the DSAS, which must share the information through anetwork.andP;  This is referred to as a distributed directory.andP;  The data containedwithin the directory is collectively known as the directory information base.andM;The overall X.500 model is shown in Fig.andP;  3.andP;  Here, multiple directory userscan access the directory through their own DUA.andP;  Users can reside on the samesystem, or across multiple systems.andP;  The DUA does rot have to reside on thesame system as the DSA with which it communicates.andP;  The directory itself maybe spread across multiple systems and information is shared throughinterfaces between the DSAS.andP;  Each DUA communicates user requests to andreceives results from the directory through a DSA's access point.andP;  Theinformation received may reside in the DSA that the DUA is accessing, or inanother DSA.andM;X.500 informational ModelandM;The informational model defines four areas: directory information base,directory entries, names, and directory schema.andP;  Directory Information Base.andO;The directory information base is the collection of information stored in thedirectory.andP;  This information represents objects.andP;  An object is something thatis identifiable (can be named) and is of interest.andP;  When an object is storedin the directory it is known as a directory entry.andP;  For entries to be foundafter they are stored in the directory, the entries are logically arranged ina tree structure with each entry representing a vertex (see Fig.andP;  4).andP;  Thisstructure shows the parent/child relationship between objects in thedirectory.andP;  Directory Entries.andP;  The information stored in an individual entryis divided into attributes.andP;  Examples of attributes are phone number,surname, and country.andP;  Many of the directory entries represent similarobjects that are grouped into an object class (e.g., software applications,devices, countries).andP;  The entry's object class determines the attributes anentry may and must contain.andP;  Each attribute consists of an attribute type andan attribute value.andP;  The attribute type identifies the attribute as apredefined type, such as organization name, locality, or presentationaddress.andP;  Names.andP;  To identify a particular entry, the entry requires a name.andO;This name is referred to as either a distinguished name or a directorydistinguished name.andP;  Each distinguished name is unambiguous and representsjust one entry in the directory.andP;  In the X.500 standard, the distinguishedname is a path down the tree to the entry.andP;  Therefore, a particulardistinguished name consists of the parent's name plus the information on howto proceed down to the last branch.andP;  To identify the path to the last branchin the directory tree, each entry has one or more naming attributes.andP;  Eachnaming attribute has exactly one attribute value called the distinguishedattribute value, which is used for naming (see Fig.andP;  5).andP;  Each child isuniquely identifiable and distinguishable from its siblings by its namingattributes.andP;  Directory Schema.andP;  The directory schema is the set of rules,definitions, and constraints that define the conformance requirements for alldirectory entries and their related information.andP;  These requirements governfour areas: the tree structure of the directory information base, theentries, the attributes, and the attribute values.andM;The rules governing the tree structure of the directory information basedefine which entry can be the child of another entry, as well as whichattributes can be used to distinguish one entry from another (namingattributes).andP;  The rules governing the parent/child relationship are based onobject classes and are necessary for maintaining a level of organization inthe directory information base.andP;  For example, it would make no sense for anentry defining a person to be the child of an entry defining an application.andO;It does make sense, however, for the person's entry to be the child of anentry defining an organization.andM;The rules governing the naming attributes are necessary to allow a directoryuser to estimate easily the name of an entry.andP;  For example, the namingattribute for an entry of the object class organization would be theorganization name.andP;  Using an attribute such as a locality name would makenaming ambiguous.andM;Each entry must conform to rules inherited from its object class.andP;  Asdiscussed above, the object class dictates when attributes may and must bepart of the entry.andP;  Other than those dictated, no additional attributes canbe included in the entry.andM;Each attribute must conform to a set of rules defining its identifier, thesyntax of its value, and whether the attribute can contain one or morevalues.andP;  These rules allow the directory user to interpret the data retrievedfrom the directory.andP;  For example, the value of a presentation addressattribute is defined as a single occurrence of a specialized structure,whereas the value of an organization name is defined as one or moreoccurrences of a character string.andM;The final set of rules governs the syntax of attribute values.andP;  An attributevalue's syntax identifies the rules used for matching a value of a particulartype.andP;  For example, it is necessary to use a matching rule during a search,when the user has specified some properties to be matched.andM;X.500 Directory ServicesandM;Three types of operations are defined in the X.500 standard:andM;* User authorization:bind, unbindandM;* Data retrieval:read, compare,list, and searchandM;* Data maintenance:add,modify, rename, and removeandM;The user authorization operations can be thought of as logging into andlogging out of the directory.andP;  The bind operation is used to initiate adirectory session when the user provides identification.andP;  The unbindoperation is used to terminate the directory session.andM;The data retrieval operations are used to obtain information from thedirectory.andP;  The most common operation is read.andP;  The read operation is used toperform name-to-property, name-to-name, and name-to-list bindings, andreturns the information stored in the entry.andP;  The compare operation is usedto verify the value of an attribute.andP;  The list and search operations are usedfor property-to-name bindings, and returns entries that meet certaincriteria.andM;The data maintenance operations are used to add, modify, rename, and deletethe information in the directory.andM;HP MAP 3.0 Directory ServiceandM;The directory's name-to-property binding operation is used in HP MAP 3.0 bytwo application level services called File Transfer, Access, and Management(FTAM) and Manufacturing Message Specification (MMS).andP;  These two applicationsare described in more detail in the articles on pages 24 and 31.andM;The FTAM standard specifies a virtual file store, a set of services tomanipulate that file store, and the protocols that define how to use theservices.andP;  If a user program wishes to use any FTAM service, it sends arequest to the FTAM initiator.andP;  The FTAM initiator then sends the userprogram's request to an FTAM responder that will service it.andP;  Fig.andP;  6 showshow this process works.andM;Directory services are used by the FTAM initiator when it needs to find thenetwork address of the FTAM responder that will service the request.andP;  TheFTAM initiator sends a distinguished name to the directory via a DUA.andP;  TheDUA will return the corresponding network address of the FTAM responder tothe FTAM initiator.andP;  After the initiator has the address, it can establish aconnection with the responder.andM;The Manufacturing Message Specification (MMS), which is the other HP MA.P 3.0application that uses directory services, provides data handling between avariety of machines in a manufacturing environment.andP;  The services of MMS areprovided to a client by an MMS service provider process.andP;  When a clientissues a request, NMS takes the request and sends it to the appropriatemachine to service the request.andP;  When the client MMS service provider needsto establish a connection to the machine (server) that will service therequest, the directory service is used to get the network address of theserver.andP;  Once the client has the network address, it can then establish aconnection to the desired server.andM;The architecture for the directory service for HP MAP 3.0 is an X.500implementation.andP;  Within the flexibility of the X.500 standard, certainliberties were taken for performance reasons and ease of implementation.andM;Design DecisionsandM;A centralized directory information base was selected for HP MAP 3.0 becauseit was easier to implement and it satisfied our schedule constraints.andP;  Withall the directory information centralized, it is only necessary to have asingle DSA.andP;  This eliminated the need for communication between DSAs and theneed to implement the X.500 directory system protocol, which defines theprotocol between DSAS.andM;The DUA represents the user to the directory.andP;  There are two ways toimplement the DUA.andP;  One way is to have one DUA per user and the other is tohave one DUA per system.andP;  The latter alternative was chosen because of thetypical use of X.500 in the HP KUP 3.0 environment.andP;  Each process wouldnormally obtain a single address from the directory and then perform itstask.andP;  It was determined that creating (forking) a process each time anaddress was needed would be too expensive in terms of performance.andP;  Linkingthe entire directory user agent into the user process was not done eitherbecause of process size concerns.andM;The final decision was to combine the DUA and the DSA into one process on themachine containing the directory information base.andP;  There needed to be a DSAdaemon process to service directory requests from DUAs on other systems.andP;  Ata minimum, the DSA daemon needs the ability to receive local interprocessmessages for administration operations.andP;  It was not a large extension to foldthe DUA agent functionality into the DSA process.andM;ArchitectureandM;An overview of the architecture for the directory service in HP MAP 3.0 isshown Fig.andP;  8.andP;  There are three processes that make up the directoryservices: the user process, the DUA, and the coresident directory useragent/directory system agent (DUA/DSA).andP;  The user process is the process thatneeds to use directory data.andP;  This process links in the DUA library (DUALIB)to gain access to functions that allow a user process to access thedirectory.andP;  The DUA resides on the machines that do not contain the directoryinformation base.andP;  The DUA receives the requested directory operation fromthe user process and forwards the request to the machine that contains thedirectory information base.andP;  The DUA/DSA process is located on this machine.andO;This process services the directory operations and receives requests fromDUAs on other machines and from user processes on the local machine.andM;User Process.andP;  The architecture of a user process is shown in Fig.andP;  9.andP;  Themodules that make up the user process are the user code, DUALIB, andmessaging.andP;  The user code is the application that operates on data stored inthe directory.andP;  This application accesses the directory through anapplication program interface.andP;  The functions called through the applicationprogram interface are all located in DUALIB.andP;  DUALIB performs input parameterchecking, encoding of the requested directory operation, sending thedirectory operation to the DUA, receiving the results from the DUA, decodingthe results, and returning them to the user code.andP;  The final module in theuser process is messaging.andP;  Messaging is an interprocess communicationsmodule that is built on top of sockets, which are identical to the socketsused in the Berkeley UNIX 4.2BSD operating system.andP;  Communication between theuser process and the directory user agent (or DUA/DSA process) isaccomplished by using proprietary protocol data units known as HP protocoldata units (HPPDUs).andM;There are three different types of HPPDUS: initiator, result, and error.andP;  Arequest for a directory operation is sent from the user process to the DUA asan initiator HPPDU.andP;  The DUA decodes this HPPDU and takes the appropriateactions.andP;  Once the directory operation has completed, either a result or anerror HPPDU is returned to the user process.andP;  DUALIB decodes this HPPDU andreturns the result or error to the user code.andP;  The decoding of the HPPDU isdone with a lex/yacc-generated parser.andM;The interface between the user process and the DUA is not an X.500 definedinterface.andP;  Therefore, it was decided to use a proprietary PDU (protocol dataunit) at this interface rather than leveraging one of the X.500 standarddefined PDUs for initial troubleshooting and supportability.andM;The HPPDUs are human readable, which aided in the original troubleshooting ofthe product and is expected to be a benefit during the support cycle of theproduct.andP;  In addition to communicating the directory operations, the HPPDUsare also used for administration operations.andP;  For example, duringinitialization an BPPDU is sent to the DUA with configuration information.andO;When the DUA daemon is to be shut down, a shutdown HPPDU is sent.andP;  Thisprovides consistent access to the DUA daemon processes.andM;Directory User Agent Process.andP;  The structure of the DUA process is shown inFig.andP;  10.andP;  The DUA process is divided into seven modules: messaging, control,client coordinator, connection management, ROSE (Remote Operations ServiceEntity), ASEs (application service elements), and presentation services.andM;*  Messaging Module.andP;  This is the same module that exists in the user processand is used for communication between the directory user agent and the userprocess.andM;*  Control Module.andP;  This is the main module that reacts to messages beingreceived either by the messaging or presentation services modules.andM;*  Client Coordinator Module.andP;  This is the controlling and coordinatingmodule for X.500-specific tasks.andP;  When a message is received from the userprocess, the control module calls the client coordinator.andP;  It is the clientcoordinator that determines what action the user process wishes to perform.andO;The directory operation comes in as an HPPDU, which the client coordinatorparses using an analogous lex/yacc-generated parser.andP;  Depending on theoperation, the appropriate modules are called.andP;  The client coordinatormaintains all the connection information.andP;  Since the DUA communicatesasynchronously with the DSA, the client coordinator needs to remember theoperation requested by each process.andP;  When an operation completes, the clientcoordinator encodes the result and sends it back to the appropriate userprocess.andM;The Data BaseandM;As can be seen from the role of the data base access module, the data basestores more than just the directory information base.andP;  Recall that thedirectory information base is defined as the complete set of information towhich the directory provides access.andP;  In addition to data for the directoryinformation base, the data base also contains the schema rules andproprietary information such as user capability levels.andM;The data base is implemented as a relational data base with an SQL(Structured Query Language) interface.andP;  Data stored in a relational data baseis organized into tables.andP;  The directory information base is divided betweenthree tables.andP;  The first table stores the directory information tree.andP;  Thisis done by representing the parent-child relationships of the entries.andP;  Theother two tables store the data.andP;  The data is divided between two tables toseparate the naming and the nonnaming attributes.andP;  This was done to optimizethe speed of name resolution.andM;Retrieving information from an entry involves two steps.andP;  First, thedistinguished name of the entry is used to navigate through the tree to theentry desired.andP;  The table storing the directory information tree, that is,the table that stores the parent-child relationships, is the table used forthis navigation.andP;  These relationships are used to step through each level ofthe tree until the specific entry is located.andP;  The table storing the namingattributes is used to verify the relationship at each level of the tree.andM;Since traversing the tree to locate the entry specified by the distinguishedname is time-consuming, two techniques are used to optimize this task.andP;  Thefirst is the use of a key to limit the searches performed at each level ofthe tree.andP;  At each entry in the path, which is represented by thedistinguished name, a search is made for all children of that entry until thechild that matches the given naming attributes is located.andP;  This has beensimplified by creating a key from these naming attributes.andP;  This key isstored in the table with other directory information tree information.andO;Rather than searching all the children of a given entry, this scheme limitsthe search to only those children whose key matches the key derived from thegiven naming attributes.andP;  With this optimization, the searches required ateach level of the tree are limited to a subset of the children, which isquite often a single child.andM;The second optimization actually bypasses the tree traversal by using a cacheof commonly used distinguished names.andP;  Each distinguished name has a uniqueidentifier associated with it.andP;  This identifier is assigned by the data baseand is used for internal searches.andP;  The result of locating an entry throughtree traversal is this identifier.andP;  The cache simply maps the distinguishedname to this identifier without the overhead required by traversing the tree.andO;In addition, the attribute that contains the network address is also storedin the cache.andP;  This optimizes the most commonly used function, the retrievalof an address for a given entry.andM;Once the entry specified by an operation is located, the operation is thenperformed on the entry.andP;  In the case of a read operation, the requestedattributes are retrieved from another table that holds all entry information.andO;The data base access module then returns the requested attributes to thecoordinator module and these attributes are ultimately returned to the userprocess that made the original request.andP;  ConclusionandM;As applications become more distributed, directory services are going to playan ever increasing role.andP;  In HP MAP 3.0, the directory is used to determinethe network addresses of applications.andP;  HP MAP 3.0 is the first user of thisimplementation of the X.500 directory.andP;  AcknowledgmentsandM;The authors would like the recognize the efforts of the other members of theX.500 product team and thank them for their contributions in making directoryservices for HP MAP 3.0 a reality.andP;  We especially wish to thank KevinMontgomery, not only for his ROSE efforts, but for his overall contributionto the product.andM;ReferencesandM;1.andP;  K.K.andP;  Kimball and M.A.andP;  Ellis, &quot;The Upper Layers of the HP OSI ExpressCard Stack,&quot; Hewlett-Packard journal, Vol.andP;  41, no.andP;  1, February 1990, pp.andO;28-36.andM;2.andP;  Ibid, pp.andP;  32-34.andO;</TEXT></DOC>