<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-080-298  </DOCNO><DOCID>08 080 298.andM;</DOCID><JOURNAL>Datamation  Jan 15 1990 v36 n2 p35(4)* Full Text COPYRIGHT Cahners Publishing Co. 1990.andM;</JOURNAL><TITLE>A new database for new times. (object-oriented databases)(technical)</TITLE><AUTHOR>Kim, Won.andM;</AUTHOR><SUMMARY>New types of applications are appearing that can not beefficiently managed by current data base management systems.andP;  Anynew type of DBMS must build on existing technology.andP;  Leading therace to be the next generation of DBMS are extended relationalDBMS and object-oriented DBMS systems.andP;  The extended relationalDBMS, of which POSTGRES from the Univ of CA, Berkeley is thebest-known example, uses a relational data model and a querylanguage, extending them in various ways.andP;  Object-oriented DBMSsstart with an object-oriented data model and a language thatcaptures it, and extends both.andP;  The rules governingobject-oriented databases are examined in detail.andP;  It is likelythat both extended relational and object-oriented DBMSs willco-exist.andM;</SUMMARY><DESCRIPT>Topic:     Object-Oriented Data BasesFuture of ComputingData base management systemsInformation resources management.andO;Feature:   illustrationcharttable.andO;Caption:   The evolution of database technology. (chart)Object-oriented databases available or in development. (table)Example of an object-oriented database. (chart)andM;</DESCRIPT><TEXT>A New Database For New TimesandM;New classes of computer applications are emerging for which conventionaldatabase technology may be seriously inadequate.andP;  Expert, computer-aideddesign (CAD) and multimedia systems, to name a few applications on thehorizon, are growing so complex that they defy management by even the best oftoday's relational databases.andM;That's why software developers, advanced technology groups and others arepaying so much attention to object-oriented databases--a field surging withactivity as systems companies, universities and start-ups vie to create a newgeneration of database technology suited to the needs of today's users.andM;Unfortunately, there is serious confusion about what constitutes anobject-oriented database.andP;  This article will set the record straight in aneffort to establish a benchmark for what promises to be a fundamentallyimportant technology in the years ahead.andP;  First, however, let's placeobject-oriented technology in a context that managers can understand and,more important, use.andM;During the past three decades, as applications have grown in functionalityand the cost of implementing, maintaining and extending them has risen,database software has evolved through four generations: file, hierarchical,CODASYL and relational.andP;  In each generation, more and more of the tedious andrepetitive bookkeeping functions have been offloaded to these databases fromapplications.andP;  This, in turn, has made it easier for developers to programdatabase applications.andM;The dominant database technology of today, relational, has its roots in theearly 1970s.andP;  Like all of the generations before it, it has limitationsstemming from its age and complexity.andP;  Although the relational products thatemerged in the late 1970s and in the 1980s--such as Oracle, SQL/DS, DB2 andINGRES--have proved robust for most conventional information systemsapplications (payroll processing, for example), they are not as well suitedfor new and future IS needs.andP;  The sorts of applications in search of a betterdatabase are computer-aided design, engineering, manufacturing and softwareengineering (CAD, CAE, CAM and CASE) systems; knowledge-based systems (expertsystems and expert system shells); and multimedia systems.andM;Whatever database technology comes next must build on conventional databasetechnologies (including relational) to meet the requirements of both today'sapplications and newly emerging ones.andP;  The two leading contenders for thenext-generation crown are extended relational database technology andobject-oriental database technology.andM;Rules of the Object GameandM;The two rivals differ in model and in language.andP;  The extended relationalapproach starts with a relational model of data and a query language andextends them in various ways to allow the modeling and manipulation ofadditional semantic relationships and database facilities.andP;  PSTGRES at theUniversity of California at Berkeley is the best known next-generationdatabase system base on the extended relational approach.andM;The object-oriented approach starts with an object-oriented data model and alanguage that captures it and extends them in various ways to allowadditional capabilities.andM;Both the extended relational and object-oriented approaches are viable.andP;  Mostlikely, both approaches will coexist.andP;  On the one hand, the case for theextended relational approach has much going for it: users already are makingwidespread use of relational databases, the technology has a mathematicalfoundation and there is even an industrywide standard for relationallanguage--structured query language (SQL).andP;  On the other hand, the promise ofobject-oriented database technology is significantas the chief means ofcoping with increasingly sophisticated software applications and thecorresponding costs of developing and maintaining them.andP;  So let's focus ourattention on some rules and definitions of object-oriented databasetechnology that might turn such promises into reality.andM;What is an object-oriented database system?andP;  It's a persistent and shareablerepository and manager of an object-oriented database, which itself is acollection of objects defined by an object-oriented data model--objects thatcapture the semantics of objects supported in object-oriented programming.andP;  Adata model is a logical organization of real-world objects (entitles),constraints on them and relationships among them.andM;Object-oriented concepts form a good basis for developing a rich data modelfor next-generation database applications.andP;  Notably, the concepts cover rulesfor grouping objects into a class, for aggregation relationships between anobject and objects it consists of (nested objects) and for generalizationrelationships between a class of objects and classes of objects specializedfrom it.andM;That means an object-oriented database sysem can provide a user interface forthe definition and manipulation of relationships among objects--a key benefitfor users because they need not explicitly program and manage theserelationships.andP;  For example, the aggregation relationship is the basis forthe recursive definition of a complex object in terms of other objects.andP;  Thatmakes it possible to successively refine the representation of complexobjects often found in such applications as CAD, CAE and compound documents.andM;Although numerous efforts have been made to build and market object-orienteddatabase systems, there is no standard.andP;  The reason?andP;  There is no standardobject-oriented database language in which to program applications.andP;  Thereisn't even any standard data model on which to base such a language.andP;  Thefield of object-oriented databases has matured enough, however, to warrantproposing a set of clear and pragmatic rules to define object-orienteddatabase systems.andM;The first rule is straightforward: an object-oriented database system mustprovide all the database facilities that conventional database systemsprovide.andM;Commercial relational database systems available today provide variousfacilities, including declarative queries and automatic query optimization,access methods to support efficient evaluation of queries, short-durationtransactions, concurrency control and recovery, semantic integrity controland authorization.andP;  Next-generation database systems must include all ofthese features as well because they have proven to be useful for both thecurrent classes of applications and most of the emerging classes.andM;The second rule has several components.andP;  It holds that an object-orienteddatabase system must allow the following:andM;* any real-world entity must be uniformly modeled as an object and mustgenerate a unique identifier (UID) for each object.andM;* Every object must have a state and a behavior.andP;  The state of an object isthe set of values specifying the attributes of the object.andP;  The behavior isthe set of methods (program code) that operate on the state of the object.andO;The value of an object's attribute is also an object in its own right.andO;Further, an object's attribute may take on a single value or a set of values.andM;* Objects sharing the same set of attributes and methods must be grouped intoa class so that an object belongs to only one class as an instance of thatclass.andM;* The domain (type) of a class' attribute can be a class in itself.andP;  Thedomain class may be a primitive class, such as integer, string and Boolean.andO;It may be a general class with its own set of attributes and methods.andP;  Thedomain of an attribute of a class C may be the class C.andM;* All the classes must be organized into a rooted directed acyclic graph or ahierarchy (called a class hierarchy or a lattice hierarchy).andP;  A classinherits all the attributes and methods from its immediate and remoteancestors on the class hierarchy.andP;  Semantically, a class is a subclass of theclass or classes from which it inherits attributes and methods.andP;  Conversely,a class is a generalization (superclass) of the classes that inheritattributes and methods from it.andP;  The class hierarchy must be dynamicallyextensible; that is, new subclasses can be drived from one or more existingclasses.andM;* The state and behavior encapsulated in an object can only be accessed orinvoked from outside the object through an explicit message.andP;  Further, thedatabase must support the run-time binding of a message to its correspondingmethod, since the method may have been inherited by the object from anancestor class.andM;Defining Data ObjectivelyandM;These concepts form the absolute basis of any viable object-oriented datamodel.andP;  There is a surprisingly high degree of agreement about them, despitea lack of standards for object-oriented databases.andP;  It's also plain to seehow such concepts affect the database language.andP;  So let's gauge the impactthat these concepts have on the three major components (known assublanguages) of a database language--data definition, data manipulationanddata control.andM;A data definition language (DDL) allows a programmer to specify a databaseschema or framework.andP;  In relational databases, the schema specifies a set ofrelations: the name of each relation, the names of each column of a relation,the domain (data type) of each column and integrity restraints on the domain.andO;The DDL for an object-oriented database must do the same.andP;  The semantics thatthe DDL must support are the core object-oriented concepts summarized above.andM;The uniform treatment of any real world entity as an object simplifies theuser's view of the real world.andP;  The object identifier is used to pinpoint anobject for retrieval.andP;  The identifier of an object is not reused even whenthe object with which it was associated is deleted from the system.andP;  Theobject identifier has been introduced in object-oriented systems for at leasttwo major reasons.andM;First, the state of an object consists of values for the attributes of theobject.andP;  The values are themselves objects, possibly with their own states.andO;Thus a natural representation for the state of an object identifies thevalues of the attributes of the object.andP;  For performance reasons, if thedomain of an attribute is a primitive class, the values of the attribute aredirectly represented; instances of a primitive class have no identifiersassociated with them.andP;  In an object-oriented database for car manufacturers,for example, the domain of the weight attribute of the class vehicle is theprimitive class integer; the value of the weight attribute of an instance ofthe class vehicle may be the integer 7,500 (pounds).andP;  In contrast, the domainof the manufacturer attribute of the class vehicle is the class company; thevalue of the manufacturer attribute of a vehicle instance may then be theobject identifier of an instance of the class company.andM;Second, object-oriented systems, languages and concepts have been developedunder the assumption that all objects reside in a large virtual memory.andP;  Thatmeans that object identifiers have been used as the sole means of specifyingdesired objects.andP;  The notion of a query for selecting an arbitrary set ofobjects that satisfy an arbitrary combination of search predicates has beenalien to the designers of object-oriented languages.andM;This assumption has naturally led to the navigational model of computation inmost of the existing object-oriented applications.andP;  The navigational accessof an object-oriented database through object identifiers is similar to theaccess method of heriarchical and CODASYL databases through record pointers.andO;However, an object identifier is a logical pointer; a record pointer isaphysical pointer.andP;  Object-oriented database systems of the 1990s mustaugment the navigational access with nonnavigational (declarative)manipulation of objects through an object-oriented equivalent of queries.andP;  Infact, object-oriented database systems such as GemStone, IRIS, ORION and 02increasingly support queries.andM;Having discussed objects and object identifiers, let's now focus ourattention on attributes of object-oriented databases themselves.andP;  The domainof an attribute may be any class: user-defined or primitive.andP;  That's asignificant difference from the normalized relational model in which thedomain of an attribute is restricted to a primitive class.andP;  The fact that thedomain of an attribute may be an arbitrary class gives rise to the definitionof a class of a nested structure.andP;  As such, a class consists of a set ofattributes; the domains of some or all of the attributes may be classes withtheir own sets of attributes, and so on.andM;Such a definition of a class results in a directed graph (in general, acyclic graph) of classes rooted at that class.andP;  In the special case where thegraph for the definition of a class is restricted to a strict hierarchy, theobject-oriented class is similar to the nested relation in extendedrelational databases or the nested record type in hierarchical or CODASYLdatabases.andP;  Nevertheless, hierarchical and CODASYL databases do not includesuch concepts as the class hierarchy, inheritance, methods and messagepassing.andM;The type of hierarchy that includes such concepts arises from the aggregationrelationship between a class and its attributes and from the fact that thedomain of an attribute may be an arbitrary class with its own set ofattributes.andP;  This hierarchy--class-composition hierarchy--is orthogonal to,or independent of, the concept of a class hierarchy.andP;  A class hierarchycaptures the generalization relationship between one class and a set ofclasses stemming from it.andP;  A class-composition hierarchy usually has nothingto do with inheritance of attributes and methods.andP;  In other words, a class inan object-oriented database is simultaneously a node on a class hierarchy anda node on a class-composition hierarchy.andM;In the automobile manufacturer's example, the class vehicle is the root of aclass-composition hierarchy that includes the classes vehicle/drive train,vehicle/engine, company and employee.andP;  The class vehicle also is the root ofa class hierarchy involving the classes automobile, domestic/automobile andtruck.andP;  The class company is, in turn, the root of a class hierarchy withsubclasses auto company, Japanese auto company and truck company.andP;  It is alsothe root of a class-composition hierarchy involving the class employee.andM;Unlike the class hierarchy, the links in a class-composition hierarchy mayform cycles.andP;  In the automotive example, if the class company has anadditional attribute--&quot;manufacturers,&quot; whose domain is the classvehicle--there will be a link from the class company to the class vehicle.andM;Capturing the Real WorldandM;Semantic data models capture a rich set of semantic relationships amongrealworld entities, including in particular the generalization/specializationrelationships and the aggregation relationships.andP;  For reasons of performanceand ease of use, the core object-oriented model needs to be extended toinclude additional semantic modeling concepts for specific classes ofapplications.andP;  The most relevant of such concepts include versions andcomposite objects (part hierarchies).andP;  They allow the user to deal with acollection of related objects as a single unit.andP;  For example, a compositeobject is a collection of objects related by the PART-OF relationship, andthe composite object may be used as a unit of access in a query and a unit ofintegrity.andM;The concept of a class is the most important link between object-orientedsystems and databases.andP;  First, it captures an important semanticdata-modeling concept--namely, the INSTANCE-OF relationship.andP;  Second, it isthe base on which a query may be formulated.andP;  In relational databases, aquery is issued against a relation or a set of relations.andP;  Similarly, inobject-oriented databases, a query may be issued against a class or a set ofclasses.andP;  Without the notion of a class to aggregate together relatedobjects, it is very difficult to conceptualize and evaluate anobject-oriented query.andM;Third, having classes can enhance the integrity of object-oriented systems byintroducing type checking.andP;  The specification of a class as the domain of anattribute makes it possible for the system to restrict the values that theattribute may take on only to those objects that belong to that class.andO;Fourth, in the absence of the class concept, when many objects share the sameset of attributes and methods, the names and any integrity-relatedspecifications of the attributes must be replicated in every object.andP;  Thatmay not only cause a large waste of storage space, but may make dynamicchanges to the database schema completely impractical.andM;If the principles that an object is an instance of a class and that a classis also an object are enforced, the notion of a metaclass as the class of aclass also must be considered.andP;  Of course, a metaclass is also an object, andit is an instance of a yet higher level metaclass (the infinite recursionmust be broken by establishing an arbitrary root metaclass).andP;  Mostobject-oriented database systems do not support the strict notion ofmetaclasses.andP;  For example, in ORION, a system-defined class called class isboth the class of all other classes and the root of the class hierarchy.andM;Multiple SuperclassesandM;All object-oriented systems allow a class to have any number of subclasses.andO;However, some systems allow a class to have only one superclass, while othersallow a class to have any number of superclasses.andP;  Where a class inheritsattributes and methods from only one superclass, it is called singleinheritance.andP;  Where a class inherits attributes and methods from more thanone superclass, it is called multiple inheritance.andP;  With single inheritance,the classes form a strict hierarchy.andP;  With multiple inheritance, the classesform a rooted, acyclic directed graph.andP;  Although multiple inheritancecomplicates things, it is necessary.andM;Won Kim is the chief architect of the ORION object-oriented database systemat the Austin, Texas-based Microelectronics and Computer Technology Corp.,andO;which has licensed the use of the technology for commercial resale to ArtemisTechnology Inc.andO;</TEXT></DOC>