<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-449-850  </DOCNO><DOCID>07 449 850.andM;</DOCID><JOURNAL>UNIX Review  July 1989 v7 n7 p56(7)* Full Text COPYRIGHT Review Publications Co. 1989.andM;</JOURNAL><TITLE>Equipping for a new platform.andO;</TITLE><AUTHOR>Zeigler, John Carl.andM;</AUTHOR><SUMMARY>The SAS System is a large and complex applications-developmentenvironment that has evolved over several years to run on adiverse set of machines, operating systems, and architectures.andO;The development of a new release of the SAS System is described,with a focus on how a release is readied on UNIX systems.andP;  Indeveloping a new SAS release, separate groups are responsible forsuch product areas as graphics, user interface, and databaseinterfaces, and each develops the highest levels of the system toconform to internal specifications.andP;  After the complete system hasbeen built, development testing and quality assurance testing takeplace prior to its release.andP;  Future product releases are expectedto contain as many as 2.5 million lines of source code, but UNIXand emerging industry standards are helping SAS shorten itsdevelopment cycle.andM;</SUMMARY><DESCRIPT>Product:   SAS System (Data analysis software) (usage).andO;Topic:     System DevelopmentUNIXManagement of EDPStandardsApplications Programming.andM;</DESCRIPT><TEXT>How do vendors develop new releases of software products that tie in with thebasic functions of UNIX and perform well on a diverse set of machines? Here'sa case study of a constantly evolving applications-development environmentandM;Imagine a large, multi-threaded, dynamically loaded applications-developmentenvironment that's been around for a long time.andP;  I mean a long time-one thatwas originally created in the early 1970s, say, in IBM 370 Assembly, toprovide data management and statistical analysis on IBM mainframes under theOS operating system.andP;  Suppose this system had grown over the years to includesuch features as presentation graphics, a fourth-generation language, atechnology-independent user-interface design tool, and increasingly powerfulstatisticalanalysis and data-management procedures.andP;  Consider that over amillion customers worldwide-in business, industry, education, andgovernment-were using it not just on mainframes but on DEC minicomputers,PCs, and UNIX-based systems.andM;Given this evolution over the space of two decades, you would assume such asystem could ill afford to remain static.andP;  Customers-and, for that matter,the vendor company's managementwould like the system to be adaptable enoughto perform, for example, on CPU architectures ranging from 16-bitsegmented-memory machines to 64-bit supercomputers.andP;  It would help if thesystem were designed to allow for adaptation to other natural languages andnational cultures as well, and to allow the number of UNIX systems supportedto grow.andP;  Moreover, it should be capable of taking full advantage of newuser-interface and networking technologies and, eventually, to providetransparent distributed processing and transparent access to databasesproduced by a range of vendors.andM;As you may have guessed by now, such a system does exist: the SAS System.andO;All this history and change, and all these present system requirements, ofcourse, make the continuing development of the SAS System a particularlyinteresting software-engineering case study.andP;  The purpose of this article isto describe how a new release of the SAS System is developed, concentratingon how a release is readied on UNIX systems.andP;  The structure of thedevelopment process will be outlined, along with the methodology used toensure that the system will run, perform well, and be maintainable on adiverse set of machines.andM;In 1981, SAS decided to rewrite the SAS System in PL/l, subset G, in order tomake it portable across operating systems and architectures.andP;  The idea was tomake a complete version of the environment-not just a subset-available forany machine our users requested ' The PL/I-G version of SAS (product versions4 and 5) was ported to IBM's MVS, VM/CMS, and DOS/VSE, DEC's VAX/VMS line,Data General's AOS/VS, and Prime's Primos.andM;SAS Version 5 was fairly successful, but during the development phase itbecame clear that we had not achieved the level of system independence thatwould be required to keep pace with evolving hardware technology.andP;  The mainproblems we faced were lack of a standard systems interface and poorexecution of what few standards there were from the hardware vendors.andP;  (Thiswas in the days before systems standards became chic.)andM;Many SAS users were asking that the system be made available for PCs, so wespent some time in 1984 exploring C programming.andP;  The investigation showedsuch promise that we decided to rewrite the system entirely in C for allhosts.andP;  This decision eventually led us to create our Multi -VendorArchitecture (MVA) for Version 6.andM;MVA is the software-engineering methodology we now use at the SAS Institute.andO;It describes both the architecture of the code we produce and theorganization of the development process.andP;  The system is divided into threelayers: host, supervisor (core), and applications.andP;  The applications andsupervisor, or core, layers are written in C in a completely portable manner.andO;They will compile and run on any ANSIconforming C compiler for machines usingintegers from 16 to 64 bits wide and where floating-point numbers are 8 byteswide.andM;SAS Release 6.03 consists of nine separately licensed products.andP;  Thesemodules represent 1.53 million lines of C code, contained in 9804 sourcefiles.andP;  As shipped, the product suite takes the form of a supervisoraccompanied by 322 relocatable object files that are dynamically loaded atruntime as needed.andP;  It also includes several ancillary files that containhelp screens, the notes and error-message database, political maps, sampleapplications, graphics device specifications, and several utility programsfor system administration.andP;  (Release 6.03 is designed for use on UNIX-basedworkstations manufactured by Hewlett- Packard and Sun Microsystems.andP;  It iswritten in C and assembly and runs on Motorola 680x0 CISC as well as HP andSun's respective RISC architectures.)andM;Basically, there are two ways to write portable code: You can write for thelowest common denominator among all the machines available, or you can hidesystem-specific constructs below standard interfaces.andP;  In Release 6.03, weused the latter method.andP;  We defined our own &quot;virtual operating system&quot; toprovide all the OS functionality the SAS System needs.andP;  This virtualoperating system, which we call the host layer, is implemented in terms ofeach target machine's native operating system.andP;  On UNIX systems, threepercent of the system's code resides in this host layer.andM;While applications and the core layers of the environment are designed to becompletely portable, the host layer can be written in whatever language isbest for each machine.andP;  Operating-system and machine -architecturedependencies are confined to the host layer, so there is no OS- orarchitecturedependent code in the application or core layers.andP;  If a requiredfunction is supplied by the target machine, then the host layer will have aninterface to it; if not, the function is implemented directly in the hostlayer.andM;The host layer is designed to support a generic applications interface, suchthat products other than SAS can be developed to run on top of it.andP;  The core(supervisor) layer, which is written in terms of the host layer and contains27 percent of the code, provides all access to SAS objects, provides for themanagement of SAS &quot;tasks&quot; (which are similar to threads), and performs otherservices.andM;It is the applications layer that contains all the user-interface,statistical, and graphics procedures (including graphics device drivers),along with many application-level services and support routines.andP;  Theapplications layer is written in terms of the core supervisor.andM;Several groups are invariably involved in the development of a new SASrelease.andP;  One group is responsible for each product area: graphics, userinterface, database interfaces, statistics, etc.andP;  Each develops the highestlevels of the system to conform to two specifications: In-House C Standards,a program-engineering guide written by a team of representatives from thehost, core, and product groups; and The Procedure Writer's Guide, which isproduced by design teams from the core group and various product groups.andP;  Ifthe rules and methods specified in these guidelines are followed carefully,the resulting code will be portable not only across UNIX systems, but acrossother, proprietary systems as well.andM;The core group has primary responsibility for the architecture of the systemand implements the core supervisor according to a document called The HostImplementation Guide.andP;  This specification is worked out in design teams madeup of members of the core and the host groups.andP;  A source management group isresponsible for the fairly complex set of software-development and CASE toolsused by the application and core developers; this group is also responsiblefor regular distribution of the code to the host groups.andM;The portable layers of the environment are developed on a ring of about 300Apollo workstations, on which the source management group maintains thesource repository and tools.andP;  Included among these programs is a specialmakelike tool called SDSBUILD.andP;  It resembles make in that targets areseparated from sources by colons, and command lists are used to specify howtargets are made from sources.andP;  Unlike make, however, SDSBUILD includes apowerful macro language that allows the use of very abstract descriptions ofthe way targets are to be built.andP;  These abstractions are applicable to allthe machines targeted, with all system dependencies buried in the low-levelmacro definitions on each host.andM;Host groups are responsible for implementing the host layer and actuallyproducing a finished product.andP;  There is a host group for each targetoperating system: MVS, VM/CMS, DOS/VSE, AOS, OS/2, VAX/VMS, Primos, and UNIX.andO;Each host group is responsible for developing a CASE system that can beintegrated into the source management group's CASE tools and SDSBUILD.andM;Making a new version of the SAS environment into a product that can be usedon UNIX systems is the responsibility of the UNIX host group.andP;  Unlike theother groups, this body of programmers labors to support essentially the sameoperating system across a wide variety of architectures.andP;  The first step forthis group is implementation of the host layer according to The Host Guide.andO;The host layer is divided into several subsystems, including:andM;* internal IIO, which performs all I/O to SAS-defined files, such as SASdatasets and catalogs;andM;* external IIO, which performs all other I/O to disk files, devices, pipes,etc.;andM;* the communications subsystem, which handles all inter-process communicationin a networkindependent manner;andM;*dynamic loading, which takes care of the runtime binding of SAS modules;andM;* tasking, which handles the separate process threads;andM;*memory management, which handles requests to allocate or free up memory;andM;* the user-interface subsystem, which makes use of the windowing system ofthe target machine when one is available-otherwise, one is provided by SAS;andM;* code generation, which provides native code execution of the SAS Data Steplanguage as well as optimized data movement and I/O;andM;* arithmetic, which gives low-level support for arithmetic and matrixmanipulations on the system's portable layers.andM;Many of these subsystems are dependent on machine architecture, while othersdepend on the operating system.andP;  The memory management subsystem, forexample, is essentially the same on all systems-once it is done for one UNIXtarget, it is done for all of them.andP;  This is also true of internal andexternal I/O.andM;Sections of the dynamic loader have to be rewritten for each machine thatuses a different object- file format, however.andP;  The COFF-based dynamicloader, for example, can be used on any UNIX system that uses COFF.andP;  If theUNIX system supplies a dynamic loader, SAS writes an interface between itsspecification and the loader supplied.andP;  Code generation, on the other hand,is an example of a subsystem that depends only on the machine architecture,not on the operating system.andP;  Arithmetic support depends on both theoperating system and the architecture.andP;  The SAS System makes extensive use offloating-point operations and exceptions, and the performance of thearithmetic subsystem can vary greatly among machines using similarmicroprocessors if they use different methods for handling exceptions.andP;  Muchof the arithmetic support code is written in assembly by the time a releasegoes to production, but it all starts out as C code.andM;For UNIX systems, the host layer alone consists of approximately 43,000 linesof C code for Release 6.03.andP;  For CISC architectures such as the MC68030, SAShas about 5000 lines of assembly code.andP;  For RISC-based platforms such asSun's Sparc, there are around 2500 lines of assembly code.andP;  Assembly code isused only in cases where it makes for a significant performance gain or whereit provides the only access to certain functions.andP;  At SAS, we have noticedthat there are far fewer advantages in writing assembly on RISC machines thanon CISC machines, given machine optimizations and today's compilertechnology.andP;  Typically, the assembly code and about 15 percent of the C codehave to be rewritten or modified before the system can be moved to a newUNIX-based machine.andM;For the most part, the UNIX systems with which we have worked, whether inproduction environments or in our labs, have been very similar.andP;  Slightdifferences between UNIX implementations can easily be handled by ourdevelopment process.andP;  In fact, the major cost o&quot;technical port&quot; Oust gettingthe system running on a new box) depends on the quality of the UNIXimplementation, not on slight operating-system differences across targetmachines.andP;  A difference in the way a system call is made or a signal ishandled can be accounted for in a day or two by re-implementing the affectedportion of the host layer.andP;  But a bug in the C compiler, runtime library, orUNIX kernel can sometimes take weeks to resolve.andM;The user-interface subsystem presents a special challenge.andP;  In its latestproduct releases, SAS does not take advantage of host machines' nativewindowing facility.andP;  Such support will be included in the next release, andplans include support for the X Window System, Sun's News, and NextStep.andP;  Thegoal is to give the SAS environment much the same appearance across alltarget machines (including non-UNIX systems), and at the same time to takefull advantage of the particular windowing system being used.andP;  This will beaccomplished by taking a &quot;dynamically loaded device driver&quot; approach to thedesign of the windowing subsystem.andP;  The higher levels of the SAS System dealwith abstractions for windows, buttons, and other features that the hostsubsystem translates for the windowing system.andP;  Some systems will providemore than one windowing system; the &quot;look and feel&quot; a user wants will bespecified through the command line or options file.andM;A new version of the host layer will be implemented simultaneous Iy with theportable layers.andP;  In order to test the host layer before the portable codecan be integrated into it, we write script-driven exercisers to test eachsubsystem completely for conformance to specifications.andP;  Exercisers areuseful only during the initial stages of the development of a new host layer;after that, testing the system itself is the best method of testing the hostlayer.andM;While the host layer is being written, source-management and developmenttools are implemented on the target.andP;  The first isSDSBUILD, mentioned above;the second is SDSBRIDGE.andP;  The latter tool takes an abstract specification ofentry points and the libraries that contain them and produces theassembly-language-transfer vectors that make dynamic loading possible.andP;  Oncethese two tools are in place, the system can be built.andM;SDSBUILD is completely portable across UNIX systems-a simple recompile is allthat is necessary for each.andP;  It can take several weeks, however, to bring upSDSBRIDGE, since it is closely tied to the implementation of the dynamicloader and a particular machine's architecture-especially segmentedarchitectures such as HP's (RISC) Precision Architecture and Intelarchitectures.andP;  The rest of the development support tools are completelyportable and are recompiled for each host.andP;  These include change control,library management, and other software management tools.andM;Once the host layer and tools are in place, the portable layers are broughtover from the development environment to the host.andP;  The source managementgroup is responsible for providing complete and consistent portable layers tothe host groups, They do this by regularly broadcasting the full source toeach host via a tape or network; this is called a &quot;full port&quot;.andP;  Between fullports, they broadcast incremental changes to the system.andP;  Each host group isresponsible for deciding whether or not to pick up the broadcasts, dependingon the state of its host layer.andM;The full port is then integrated with the host layer to build a completesystem.andP;  The first system built includes all the debugging information neededby symbolic debuggers and performance monitors.andP;  After testing has proceededfor a while, an optimized version is built for testing.andM;Once the complete system has been built, development testing begins.andP;  Severalsuites of tests, labeled level 0 through level 3, are written by thedevelopment testing group.andP;  The tests are sent out with each full port andare used by host groups to test the host system against the originaldevelopment environment.andP;  In the UNIX host group, we develop releases forseveral UNIX systems simultaneously.andP;  In order to test each of these systemseffectively, we have developed automated testing tools that allow us to runthe tests together on all of the networked UNIX-based computers.andM;Any bugs that are found are entered into our bug- tracking database, which isused to monitor the status of all known bugs, whether they have been found bystaff members or by users in the field.andP;  The bug database is used bydevelopers to track bugs and fixes, by the quality-assurance staff duringfinal release testing, and by technical-support staff to help answer users'questions.andM;While the system is being developed and tested for each machine, another partof the host group works on installation procedures, customer distribution,and maintenance tools.andP;  While the goal, of course, is a completely uniforminstallation procedure for all UNIX systems, attaining it is almostimpossible for several reasons.andM;For one, there is no standard mechanism for software distribution.andP;  Most UNIXsystems have 1/4inch tape cartridges, but these vary widely in quality, andnew formats and densities are being produced constantly.andP;  Furthermore, mostsys tems are built within tolerances designed primarily to allow gL drive toread tapes that it has written; the fact that a tape can be read on anotherdrive on another system is more the result of coincidence than of anythingelse! We have seen failure rates as high as 30 percent on customers' tapes,all because of hardware problems with the drive and tape mechanisms.andP;  Othermedia, such as floppy disks or optical disks, are either too limited incapacity or not widely used.andM;SAS also distributes customersupport materials such as &quot;zaps&quot;, updates, andusage notes.andP;  Zaps are fixes for SAS-executable modules and are applied bythe SASZAP utility.andP;  With a zap file, SASZAP applies the fix to a module andthen updates a zap log in each module so that a record is maintained.andP;  Anupdate is a new SAS product release, or an additional release supplementingan existing product.andP;  Usage notes are a quarterly compilation of technicalsupport notes documenting all known problems from the bug-tracking database,as well as answers to com monly asked questions and user feedback.andP;  They aredistributed with each new release and upon request.andP;  These support materialsare provided to licensees free of charge; effectively managing theirdistribution, therefore, is very important.andM;Support materials can vary in volume from a few thousand bytes to 1 or 2 MB.andO;High-capacity, expensive distribution media (such as optical disks) aretherefore not suitable.andP;  An ideal distribution medium would be widelyavailable, designed for data transfer (not simply backup), economical forproducing both large- and smallsized distributions, and useable on all themachines SAS supports.andM;Generally, we try to use the same software distribution media that the vendoruses on a particular system, but this is not always possible.andP;  UNIX, andworkstations in general, will have a hard time becoming part of a solution inlargescale commercial markets if vendors cannot develop more robustsoftware-distribution mechanisms.andM;Once a system is readied for release, it is sent to the quality assurance(QA) department, where it is tested.andP;  When QA finds a bug, it enters it intothe bug-tracking system and notifies the developer responsible for the codeaffected.andP;  Not all bugs are fixed.andP;  QA and the product managers discuss theseverity of each bug and determine the need for a fix.andP;  If the bug is judgednot too severe, it will be fixed in a later release.andP;  If the bug is severeenough to prevent the release from being shipped, it is fixed, and thechanged module is sent back to QA.andM;While QA is testing the release, installation procedures and thecustomer-tape production process are finalized.andP;  This is another functionthat has to be performed for each newly supported UNIX system, because thereis no standard software distribution mechanism.andP;  A master tape containing allthe products associated with a release is prepared.andP;  When a customer licensesSAS, a job order is submitted to the company mainframe, instructing it to cuta new tape customized for the particular site.andP;  The tape contains just thosemodules that have been licensed, plus the current usage notes.andP;  This is thenpacked with a set of manuals, some other product literature, installationinstructions, and a cover letter, and shipped to the customer.andM;QA signs off separately on the software and on the customer tape productionsystem.andP;  Once both have been approved, the system is declared to be &quot;inproduction&quot; and shipping begins.andP;  If a bug is found in a productionsystem-usually by a user-it is entered into the bugtracking system.andM;The SAS Technical Support Division is responsible for dealing with bugs insystems in production.andP;  If a bug is sufficiently severe, a correction zapwill be written for distribution with the usage notes.andP;  All bugs are reportedback to QA and to the system's developers so that steps can be taken toensure the bug is fixed in the next release.andM;As more UNIX systems are added to the list of ports, managing source code andscheduling releases becomes a more complex task.andP;  If development and testingfor many UNIX systems is to go on simultaneously, a production system for allsupported UNIX systems must be maintained.andP;  Doing so requires a great degreeof automation in both development and testing procedures.andM;In addition, future product releases will naturally incorporate new advances,new features, and new interfaces.andP;  All of this will add up to more sourcecode (perhaps as much as 2.5 million lines in the foreseeable future).andP;  Evenwith these increases, it appears that the power of UNIX systems will help SASshorten the development cycle so that this goal can be met.andM;The industry is helping by establishing standards, and this-as arduous aprocess as it can be-has already contributed to the success of the SAS UNIXhost group by allowing the company to produce four major releases of thesystem in just one year.andP;  It is hoped that an assembly-line-style productionprocess will eventually be set up so that new releases of the SAS environmentcan be prepared rapidly enough that the uncertain pragmatic considerations ofrelease engineering will no longer influence product scheduling andmarketing.andM;For this to happen, future UNIX standardization efforts will have to includebetter support for thirdparty software installation, maintenance, and licensevalidation.andP;  Once such standards are in place, the only thing that will beleft to keep UNIX from fulfilling its promise will be product and servicequality as delivered by vendors.andP;  Market competition should see to theprovision of such quality, and the user is sure to win.andM;Since giving up his &quot;JCL guru&quot; title to become a UNIX novice in 1978, JohnCarl Zeigler has worked on a multitude of release engineering projects.andP;  Inaddition, he has done image analysis of Landsat data for the Space SciencesResearch Lab at UC Berkeley and for the School of Forestry at North CarolinaState Univ.andP;  He has also worked as a system administrator for the departmentof electrical engineering at NCSU, where he earned a BS in computer science.andO;Zeigler is currently the manager of UNIX host development at the SASInstitute.andO;</TEXT></DOC>