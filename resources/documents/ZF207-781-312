<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-781-312  </DOCNO><DOCID>07 781 312.andM;</DOCID><JOURNAL>Computer Language  Sept 1989 v6 n9 p17(5)* Full Text COPYRIGHT Miller-Freeman 1989.andM;</JOURNAL><TITLE>Soup or art? (copyright protection for software concepts)(Programming on Purpose) (column)</TITLE><AUTHOR>Plauger, P.J.andM;</AUTHOR><SUMMARY>Lawsuits involving the 'look and feel' of a software package are adangerous trend.andP;  Copyrighting the aesthetics of how a piece ofsoftware is designed can only discourage the adoption of industrywide standards aimed at improving usability.andP;  Viewing software asfunctional writing rather than aesthetic work would make copyrightprotection more appropriate than patent granting.andP;  Areimplementation of a design would then not be in violation, but averbatim or slightly modified copying of source or binary would beunlawful.andP;  Copyrighting 'look and feel' would put the wholeconcept of computer literacy in jeopardy.andP;  Designs that makesoftware more 'driveable' for users should be shared betweenprograms, not locked up as the sole property of particularsoftware manufacturers.andM;</SUMMARY><DESCRIPT>Topic:     CopyrightLegal IssuesSoftware PiracySoftware ProtectionPatentSoftware DesignUser-Friendliness.andM;</DESCRIPT><TEXT>Soup or art? I was going to stay away from &quot;look and feel&quot; and the wholeissue of software protection for awhile.andP;  The big lawsuits started by AppleCorp. and Lotus Development Corp. are still working their way through thecourts.andP;  Since what the judges perceive is far more important than my myopicviewpoint, it appeared most seemly to wait until I could second-guess mybetters.andM;Unfortunately, stuff keeps happening.andP;  (I believe a popular bumper stickermakes the same observation, albeit with more direct language.)andP;  Severalrecent experiences got me thinking on this subject again.andP;  You should know bynow that the inevitable consequence is that you get treated to another3,000-word essay on the topic.andM;The fundamental issues currently being debated are highlighted beautifully byLily Tomlin in her one-woman play, The Search for Signs of Intelligent Lifein the Universe, and by playwright Jane Wagner in the book of the same title(New York, N.Y.: Harper and Row, 1986).andP;  It begins with the bag lady Trudydescribing her conversations with extraterrestrials:andM;We think so different.andM;They find it hard to grasp some things that come easy to us, because theysimply don't have our frame of reference.andP;  I show 'em this can of Campbell'stomato soup.andP;  I say, &quot;This is soup.&quot;andP;  Then I show 'em a picture of AndyWarhol's painting of a can of Campbell's tomato soup.andP;  I say, &quot;This is art.&quot;andM;This is soup.andM;And this is art.andM;Then I shuffle the two behind my back.andM;Now what is this?andM;No, this is soup and this is art!andM;The parallels with our business are staggering.andP;  Have you ever tried to get alawyer or judge to understand the distinction between software specificationand implementation?andP;  It's like trying to get an extraterrestrial todistinguish between soup and art.andP;  It's not that they're stupid or don't tryhard enough.andP;  They just think so different.andM;Fictitious aliens generally come equipped with fictitious death rays.andP;  Theycan zap you because of a silly misunderstanding.andP;  Unfortunately, real-worldjudges come equipped with real-world powers.andP;  They can zap our industry ifthey misunderstand the issues.andM;Soup vs.andP;  art is a recurring theme throughout Wagner's play.andP;  She emphasizesthat art is nourishment to the spirit, just as vital as the soup we eat tonourish our bodies.andP;  While I agree wholeheartedly, that is not part of theparallelism I celebrate here.andP;  I also won't disclose the charming way Wagnerhas Tomlin return to the theme to wrap up the play.andP;  Go see it, or at leastread the book.andM;I want to focus on the relative importance of protecting soup vs.andP;  art.andO;Commercial food recipes are traditionally kept secret.andP;  Should you get yourhands on a copy of the recipe, you cannot sell copies of it without riskingprosecution for trade-secret violations or copyright infringement.andP;  Shouldyou reverse-engineer the contents of a can of fish soup, however, nothingprevents you from selling the same mix of ingredients.andP;  Soup, being usable,is not a mode of expression that can be protected by copyright.andM;Paint a picture of a can of soup and you have a different kettle of fish, asit were.andP;  Aside from the fact that it is not very usable for physicalnourishment, it is also arguably a work of art.andP;  At least Warhol managed toconvince a number of people of this premise.andP;  Should someone stuff yourpicture through a copier, you can demand a royalty on any sale of the copies.andO;Should someone paint a similar picture, you have a case that the work is aderivative of yours.andM;Someone can even contrive to make your picture usable by making a windowshade out of it, for instance.andP;  You still have a protected work of art,however, because it can be admired independent of its function.andM;Most judges eat soup, admire art, and appreciate the distinctions between thetwo as expressed by centuries of copyright law.andP;  They understand, in fact,that a continuum of works are protectable by copyright.andP;  At one extremereside the purely aesthetic works, such as pictures of saints and soup cans.andO;The other extreme contains fairly functional writings, such as engineeringdrawings and recipes for soup.andM;While the whole spectrum is protected, functional writings enjoy considerablyless protection under copyright law than aesthetic works.andP;  Since the law doesnot protect the machine represented by the drawing or the soup represented bythe recipe, all it can cover is the unique expression captured in thefunctional writing.andP;  Many people could generate almost identical drawings orrecipes in their zeal to describe the underlying function.andP;  Unless you candemonstrate that another drawing or recipe contains gratuitious detail thatis also identical, you have a hard case claiming infringement of yourcopyright.andM;Few judges write or design software or appreciate the goals sought whenCongress explicitly spelled out copyright protection for it a decade ago.andO;Just where software belongs on the continuum of protection is critical whendetermining what constitutes infringement if you reimplement someone else'shighly successful product.andP;  If the courts broaden current notions about whatconstitutes infringement, we'll have to be much more careful.andM;The question is, does a piece of executable software constitute a functionalwriting that captures an underlying, unprotected set of concepts, and istherefore only protected against fairly flagrant copying?andP;  Or is it anaesthetic expression that demands broad protection?andP;  Is a software conceptsoup or is it art?andM;You'd think that the very use of the word &quot;concept&quot; would end the debate.andO;Copyright law has stated that you cannot protect a concept, only a particularexpression of the concept.andP;  Unfortunately, some courts have been known tojudge infringement of aesthetic works based on similarity of &quot;total conceptand feel.&quot;andM;For an excellent discussion of this and other topics in this column, seePamela Samuelson &quot;Why the Look and Feel of Software User Interfaces ShouldNot Be Protected by Copyright Law&quot; (Communications of the ACM, 32(5):563, May1989).andP;  I am endeavoring to paraphrase some of what she says, but pleaseremember that she is a lawyer and I am not.andP;  (I don't know law, but I knowwhat I like; read her article if you want to get the uncorrupted version.)andM;Samuelson cites a case in which McDonald's was taken to task for creatingadvertising characters that bore a strong resemblance to those from H.R.andP;  Puf'n' Stuf.andP;  The court chose not to confine the comparison to the usualanalytic dissection of similarities and differences.andP;  It went on to judgewhether the &quot;total concept and feel&quot; were substantially similar, irrespectiveof details.andP;  Moreover, the established pattern in such matters has not beento let experts do the dissection but to rely on the untrained impressions ofjudges or jurors to decide similarity of &quot;total concept and feel.&quot;andM;I should emphasize that &quot;total concept and feel&quot; have not been recognized byall of the different courts in the U.S.andP;  Nor have they been applied to anycases except those involving aesthetic works.andP;  Nevertheless, some people areeager to stretch such notions to broaden the copyright protections extendedto computer software.andM;An important first step in this direction was taken by Jack Russo and DougDerwin in 1985.andP;  These two lawyers introduced the concept of &quot;look and feel,&quot;which avoids the dirty word &quot;concept&quot; while embracing the same goals.andP;  Indoing so, they made a case for extending copyright protection to the userinterface of a piece of software.andM;&quot;Look and feel&quot; does not cover just the aesthetics of how a screen is drawn.andO;It also involves the patterns of interaction the software supports and theunderlying conventions that encourage those patterns.andP;  In other words, itcovers the very things everyone wants to knock off when they run across avery successful software product.andM;If you are the author of the successful software product, you understandablywant all the protection you can get.andP;  Often, a large part of your successdepends on discovering what patterns of interaction help people make the bestuse of the functionality the program provides.andP;  It is noticeably easier toreimplement (and improve on) an existing success than to achieve success in anew area.andP;  As someone who has reimplemented other designs and seen my owninnovations reproduced in turn, I can sympathize with the desire to control amarket long enough to get a good return on an investment.andM;However, we have a fundamental problem when protecting &quot;look and feel.&quot;andP;  Howdo you separate your innovations from those you inherited from others?andP;  AppleComputer benefitted from work done at Xerox Corp. and Lotus benefitted fromVisicalc.andP;  Even if the beneficiaries have obtained clear rights to theobvious key concepts (and evidence exists that each has), both have alsoprofited from many other sources.andP;  We all have--every one of us who hasproduced a commercial software product in the past 20 years.andM;If either Apple or Lotus prevails in their current legal efforts, the courtswill have opened Pandora's box.andP;  I can't imagine how a ruling can extendcopyright protection to &quot;look and feel&quot; without leaving the industry wideopen to infringement claims from owners of older software products.andP;  No doubtApple and Lotus will be prime targets for such legal aftershocks.andP;  Beingzapped by a death ray might be pleasant by comparison.andM;Samuelson apparently regrets that software was ever subsumed under copyrightlaw.andP;  She rightly observes that copyright protection discourages adopting thekind of standards software needs to improve usability.andP;  It forces each authorto find a different way to express the same old concept.andP;  She points out thatpatent law is better equipped to deal not only with technology, but withtechnology that is continually enhanced by incremental improvements onexisting protected works.andP;  Mostly, I agree with her.andM;I lack Samuelson's faith, however, that software patents will be adjudicatedany better than software copyrights.andP;  Lately, the trade press has been filledwith reports of patents granted to companies for software concepts that someconsider less inventive than the patent office.andP;  Maybe the lucky patentrecipients can collect some license fees until some company big enough andpersistent enough can prove in court that the key concepts exist in priorart.andP;  Meanwhile, the patent grants just make everyone run a little scared.andP;  Ifavor the patent court's earlier reluctance to issue software patents on thegrounds that most software innovations are largely unpatentable mathematicalconcepts.andM;On the other hand, I feel that copyright protection is exactly appropriatefor computer software, assuming that software has the status of functionalwriting rather than an aesthetic work.andP;  I wince when I see my clever programsreimplemented by a competitor.andP;  But that's what competition in high-techbusiness is all about.andP;  I scream in righteous indignation only when I seesomeone copy my source or binary verbatim or perform just a simple obscuringtranslation on the code.andP;  Then I look to the law for protection.andM;Most of my encounters with the court system have ended up with me on the sidethat did not prevail.andP;  (Think about that before you ask me to testify as anexpert witness.andP;  And never get in line behind me at a bank or toll booth.andP;  Iguess wrong there, too.)andP;  As I said previously, I don't know the law, but Iknow what I like.andM;More precisely, I think I know what the industry needs and doesn't need.andP;  Itdoes not need to have a dozen big software companies get a lock on the &quot;lookand feel&quot; of the most popular applications.andP;  It does not need to have everywould-be software start-up merge with a law firm out of self-defense.andP;  Itneeds protection from obvious rip-offs and encouragement to develop broaderstandards for interacting with computers.andM;We must not let people pretend that an accumulation of software conceptsconstitutes some form of art so it can be locked up in a private collection.andO;These concepts are soup and we need to be nourished by it.andM;What makes it soup is a fundamental concept called &quot;drivability.&quot; For anautomobile, the term is fairly obvious.andP;  It refers to features that must becommon to all cars so a typical driver can operate any car safely withoutretraining.andP;  All cars have steering wheels in front of a seated driver.andP;  Thesteering wheels rotate clockwise to turn the car to the right.andP;  The driver'sright foot falls naturally on the accelerator, the left foot to the clutch.andO;Once you learn how to drive one car, you can drive many others withoutconscious thought.andM;Some items affect drivability only marginally.andP;  You may have to grapple forthe headlight switch on a rental car.andP;  You may have some trouble finding thewiper control.andP;  And some items are downright arbitrary or even aesthetic.andO;You may not like the location of the hood release or the shape of the hornbutton, but neither is likely to interfere severely with your ability todrive the car safely.andM;You can bet that the first automobiles were not drivable by such universalrules.andP;  It took the industry awhile to standardize steering wheels and pedalplacement.andP;  Even today we see two major standards for pedals, one forautomatic transmission and one for manual.andP;  And you may need special trainingbefore you drive a large truck or bus.andP;  Nevertheless, standardization is therule more than the exception.andP;  It is a critical ingredient in the success ofthe automobile industry.andM;An obvious analogy in the world of computers is keyboard layout.andP;  The worldhas standardized on the familiar QWERTY layout, even though the engineeringreasons that led to its creation have long been subverted by otherconsiderations.andP;  An occasional diehard will still put forth a Dvorakkeyboard, which sells mostly to other diehards.andP;  A few more produce cheap ortiny keyboards in pure alphabetical order.andP;  All of the variants destroy theability of a trained typist to &quot;drive&quot; the keyboard, reducing everyone to thesame slow hunt-and-peck strategy of the untrained.andP;  I yearn for the day whenbrackets, backslash, and a few other nomadic keys settle down and take upfarming as well.andM;One of the Macintosh's significant successes is the greater attention paid tothe drivability of all its applications.andP;  The uniform use of the mouse forpointing, pull-down menus, and icons to click on has helped many beginnersand casual users past the usual hurdles involved in getting started withsoftware.andP;  It would be a shame if the lessons learned at Xerox and Applecould not be used to make all computers more drivable by the public.andM;Drivability issues abound in computer software.andP;  How do you navigate aspreadsheet?andP;  Can we find compelling reason to do it differently than Lotus?andO;How do you manipulate the objects in a drawing program?andP;  Can you beatpointing and dragging with a mouse? Why not let everyone standardize on thesame conventions for climbing over menus?andM;What is at stake is the whole business of computer literacy.andP;  Literacy iscomposed of a whole collection of common skills and shared meanings.andP;  Whereyou don't have literacy you need experts.andP;  Where you have a shortage ofexperts you have stunted growth.andM;R.andP;  W. Hamming used to lecture anyone who would listen about the days ofscriveners and reckoners.andP;  Before universal literacy, you wrote a letter bydictating it to a scrivener--for a fee, naturally.andP;  When you got an answer,you took it to the scrivener to get it read for another fee.andP;  Similarly, youdepended upon reckoners to do hairy calculations such as dividing up a cropinto 17 equal parts.andM;When the need for scriveners and reckoners became too widespread, societydiscovered the wisdom of teaching reading, 'riting, and 'rithmetic to all andsundry.andP;  That permitted most people to serve as their own scriveners andreckoners most of the time.andP;  It did not eliminate those professionscompletely.andP;  It simply elevated the level of competence needed to ply thoseparticular trades.andP;  Today, we call such people copywriters, stenographers,bankers, and CPAs.andM;The same thing happened with postillions and chauffeurs at the turn of thecentury.andP;  The gasoline-powered automobile with electric self-starterseliminated the need for such employees among a large class of people.andP;  Theylearned to perform such functions for themselves.andP;  Today most chauffeursdrive taxis and buses, but they're still around.andP;  Meanwhile, we have learnedall sorts of things about traffic signals, self-serve gas stations, readingroad maps, and so on.andP;  Just try listing all the synonyms you know for&quot;automobile&quot; and you'll see how much transportation culture you've absorbed.andM;The same thing happened with telephones.andP;  When the need for operators beganto exceed the supply, along came the automatic central office.andP;  We still havelots of operators, but not nearly the astronomical number predicted early inthe century.andP;  We can all talk knowingly about dial tones, area codes, tollcalls, and other arcana once understood only by the inner circle.andM;With computers, we are still in the phase of learning what makes softwaremore drivable.andP;  We lament the shortage of experts who can master the arcaneskills needed to drive unwieldy code.andP;  We make dire predictions of the effectof such shortages on various important parts of our society.andM;This is hardly the time to begin stifling standardization or innovation.andP;  Anycompany that pushes for control of a good user interface convention is beingextremely shortsighted.andP;  On the other hand, American business hasdemonstrated itself to be progressively more shortsighted.andP;  All that countsis what maximizes profitability in the next six months.andP;  We can hardly expectindividual businesses to be sufficiently altruistic or even sensible and worktoward the common goal of making computers more widely usable.andM;It's particularly critical that the courts understand the issues involved inprotecting computer software.andP;  Judges need to know how to distinguish soupfrom art in our very technical field.andP;  Otherwise, they can zap our ability tomake soup.andP;  And without soup, we have no art.andM;P.J.andP;  Plauger has been a writer of textbooks, a prolific programmer, and asoftware entrepreneur.andP;  He has been active in the development of standards,most notably for the C programming language.andP;  Dr. Plauger is currently achief engineer at Intermetrics Inc., Cambridge, Mass.andO;</TEXT></DOC>