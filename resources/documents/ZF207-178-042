<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-178-042  </DOCNO><DOCID>07 178 042.andM;</DOCID><JOURNAL>UNIX Review  March 1989 v7 n3 p61(10)* Full Text COPYRIGHT Review Publications Co. 1989.andM;</JOURNAL><TITLE>Uniting file systems; experimental large-scale, distributed filesystems are now being created. (includes related article on thehistory of the AFS Project)</TITLE><AUTHOR>Spector, Alfred Z.; Kazar, Michael L.andM;</AUTHOR><SUMMARY>Wide-area file systems (WAFSs), as exemplified by the CarnegieMellon University Information Technology Center's AFS 3.0, canprovide widely distributed users with consistent, transparentinteraction with single, powerful databases through the use oflow-level network protocols.andP;  Such systems facilitate cooperativework between distributed users, increase user mobility, and remoteinformation can be accessed as if it was local.andP;  A viable WAFSmodel may offer access and file name transparency, securitymeasures, autonomy of WAFS component networks, coexistence withother file systems, efficient use of communications, failuresemantics, support of diverse hardware-software platforms,sufficient performance and reconfigurability and scalability.andP;  AFS3.0 offers many of these features plus cache manager, filelocation control, and process manager.andP;  Details of AFS 3.0 aredescribed.andM;</SUMMARY><DESCRIPT>Topic:     Carnegie-Mellon University. Information Technology CenterWide Area NetworksDistributed Data BasesFile ManagementSystem DesignSystem DevelopmentRequirements AnalysisCase Study.andO;Feature:   illustrationchart.andO;Caption:   Wide-area file systems should be able to handle thousands ofcells. (chart)andM;</DESCRIPT><TEXT>UNITING FILE SYSTEMSandM;With wide-area file systems, properly authorized computer users cantransparently access and update files stored by other organizations, evenwhen those files are located across a continent or across an ocean.andP;  Ingeneral, such systems are not sponsored by a single authority, but rather byfederations of users.andP;  Groups of users allow others to access their ownnetwork file system (or cell) and are able, in turn, to access remote cells.andO;Such federations need to agree on common directory, protection,authorization, and file transfer protocols (or mechanisms), but federationmembers individually control the policies and administration of their owncells.andM;Customarily, such systems are called &quot;nationwide file systems&quot;, but there isno technical reason why they cannot cross international boundaries.andP;  Awide-area file system of this type would tend to hide the existence of theunderlying network, allowing its clients to issue normal file system commands(read, write, open, close, etc.) regardless of the location of the file theywant to access.andP;  In effect, a wide-area file system is a very largedistributed abstract data object, providing uniform access to a powerful,thought limited, database.andP;  In another view, wide-area file service can beconsidered a natural extension of existing network services, such as remotelogin, file transfer, and electronic mail.andP;  Wide-area file systems depend onlow-level network protocols, such as TCP, IP, or X.25, but require a largenumber of other session, presentation, and application-level protocols toprovide high performance and transparent access to remote data.andM;The rationale for nationwide file service is manifold:andM;* Wide-area file service can facilitate the collaboration of individuals andgroups.andP;  Within the computer industry alone, inter-organization collaborationhas been growing rapidly (witness the formation of the Open SoftwareFoundation and of The X Consortium).andM;* Wide-area file service can provide increased mobility within the workplace: an individual who is at home or traveling can access data over anetwork and work just as in the office.andM;* Information stored remotely can be browsed as if it were stored locally,using the wide-area file system as a database.andP;  Provided with appropriateindexing conventions, a wide-area file service can be a very valuable methodfor distributing reports, design specifications, and program sources.andM;* One appropriate security safeguards are in place, users can more easilysample software they might be interested in purchasing or licensing, sincethey can remotely execute programs that reside on a software vendor'smachine.andM;Overall, wide-area file service holds the promise of greatly increasing andsimplifying computer-supported cooperative work.andP;  In the long run, nationwidefile systems could substantially change the work environment for many people,giving them much greater flexibility and productivity.andM;Technologically, the time seems ripe to begin developing wide-area filesystems.andP;  Many critical components, such as authentication systems, protocolsfor remote procedure calls (RPCs), and higher-speed networks, are nowbecoming available.andP;  The development of many single-organization file systems(such as AFS, the Andrew File System [1,2,3], DS [4], NFS [5], and RFS [6]for UNIX Systems), has increased our understanding of what is needed forlarge-scale distributed file systems.andM;From a research perspective, it would be beneficial to test file system andcomponent technologies on a large scale in order to assess their limitations.andO;Certainly, there remain technological and societal challenges to creating awide-area file system, but it should be possible to meet them.andP;  Among thechallenges, software licensing and security issues seem the most difficult,but there are also issues of scale, naming, network protocols, and standardsadministration.andM;Most computer networks support some form of remote file access.andP;  Explicitfile transfer is the most basic service; using it, a client must invoke afile transfer utility to transfer a remote file before or after its use.andO;Many explicit file transfer programs perform limited data conversions tomitigate the effects of heterogeneous hardware and file formats, and some useauthentication and access-control mechanisms to provide protection.andP;  Theycurrently employ any of a variety of connection-based file transfer protocols(FTP and FTAM, for instance).andM;Explicit file transfer techniques have a number of disadvantages, however.andP;  Aclient cannot execute a remotely-stored program or a local program that usesremote files without first issuing explicit fetches and stores.andP;  Regardlessof how much data is actually accessed, the cost of whole-file access must bepaid.andP;  The semantics used for simultaneous access to a remote file bymultiple clients typically differ from those of the native file system.andO;Caching of remote files on a local file system has to be done manually, andthere are no system facilities for maintaining cache consistency.andP;  Also,clients must remember the name of the  particular computer node on which thedesired file is stored.andP;  In general, explicit file transfer is aninconvenient and time-consuming way to access remotely stored data.andM;In contrast, accessing remote files is quite easy under distributed filesystems, because they blur distinctions as to locations of files.andP;  Usersmerely refer to a file by name, and the distributed file system does therest: it locates the server on which the file is stored, performs thenecessary authentication and security checks, synchronizes access to thefile, and transfers the data.andP;  To ensure good performance, distributed filesystems may cache substantial data and directory information locally.andO;Distributed file systems may also replicate files and other information toprovide increased performance or reliability.andP;  They use network protocolsthat both minimize access latencies and maximize data-transfer bandwidth.andO;The semantics of shared-access files in a distributed file system are usuallysimilar to the semantics of files stored in the local file system the user isworking on.andM;Most distributed file systems, such as Sun's NFS, have been optimized toprovide service over local-area networks.andP;  However, some existing systems aredesigned to provide access transparency over wide-area networks.andP;  forexample, Digital's DECnet provides access to remote files, although usershave to be explicit in naming the computer on which such files are stored[7].andP;  Under DEC's scheme, most of the files accessed are assumed to belocally stored, so extensive caching is not necessary.andM;In this article we will discuss a networking model in which cell namesconstitute a subdirectory of /afs, the root of a wide-area file system.andP;  Forexample, users abc at CMU and def at MIT might have directories as follows:/afs/andrew.cmu.edu/usr/abc /afs/andrew.mit.edu/usr/defandM;Note that cells are named by their Internet domain names.andM;In specifying our model of a wide-area file system, we set goals in thefollowing areas:andM;* Access transparency.andP;  The primitives that are used to read and write fileslocally must work with files stored on remote systems.andM;* Authentication and security.andP;  Servers and clients can authenticatethemselves to ensure that data is protected against unwanted access.andM;* Cell autonomy.andP;  the administrator of a cell--a collection of file serversand clients typically serving one organization, and typically in onegeographic location--needs to have autonomy in issuing user-identifiers,allocating file servers, maintaining quotas, and choosing systemconfigurations.andM;* Coexistence with other file systems.andP;  A wide-area file system may not bethe only file system used by an organization, so it must be possible forclients to use other file systems as well.andM;* Efficient use of communication.andP;  The wide-area file system should reducethe need for communication as much as possible.andP;  This improves performance,reduces the system's sensitivity to network load, and lowers communicationcosts.andM;* Failure semantics.andP;  System or network failures should have minimaldeleterious effects, and those effects that do occur should be easilyexplainable.andM;* Heterogeneity.andP;  Recognizing that wide-area networks contain diversehardware and software, the file system must support many hardware platformsand most operating systems.andP;  While file servers may be restricted to runningUNIX, it should be feasible to have clients running DOS, Macintosh OS, andOS/2, as well as UNIX.andM;* Name transparency.andP;  Users should be able to refer to files by name, leavingit to the system to locate them.andP;  It should not be necessary to specify theparticular file server on which the file is stored, though it may benecessary to specify the particular cell in which it is located.andM;* Performance.andP;  The wide-area file system should perform so well that usersare not discouraged from using remote files.andP;  Good performance is necessaryif the goals of increased collaboration and sharing are to be realized.andM;* Protection.andP;  Protection information should be associated with data so as toprovide fine-grained protection while still permitting appropriate sharing.andM;* Reconfigurability.andP;  Cell administrators should be able to change theconfiguration of their cells without affecting any clients.andP;  For example, acell administrator should be able to change the location of a user's filesfrom one file server to another without the change being perceived by theclient.andM;* Scalability.andP;  A wide-area file system should be able to handle thousands ofcells, and each cell should be able to support thousands of client computers.andM;* Shared-access semantics.andP;  The semantics for shared access to files in thewide-area file system need to be reasonable; they should be similar to thesemantics used for accessing files stored locally.andM;The above list is not restrictive.andP;  Other desirable features might includemechanisms to permit users to customize their view on the common file systemtree.andP;  (Work toward this end is under way at IBM Almaden and the Universityof Washington [8,9].)andP;  It might be a good idea to specify particular datarepresentation standards (for example, ODA or SGML for documents [10]) tosimplify access to data.andP;  There could also be standard locations for certainclasses of files.andP;  Research institutions might find it desirable, forexample, to have technical reports stored on-line in PostScript format inwell-known locations, such as /afs/cell_name/reports/1988/report_name.andM;A number of useful techniques are available for developing a wide-area filesystem that has the characteristics described above.andM;Caching is perhaps the most important of these.andP;  Caching files, directories,and their storage locations reduces the need for clients to transfer dataover the network or to make requests to file servers.andP;  If clients use largelocal caches (on disk or in RAM), they can access the files they need withouthaving to retrieve them from a file server.andM;Call-backs can be used to help maintain cache consistency, and give clientsassurance that cached information is up to date.andP;  Under the call-backprocedure, file servers notify clients when data they have cached has becomeinvalid.andM;Logical volumes can be used to group together files and directories belongingto a particular user or project.andP;  Logical volumes are a convenientabstraction for managing storage quotas and moving data between file servers.andM;Directory services can be used to map file or directory names to particularfile servers.andP;  Because of locality-of-reference properties, directoryinformation should be cached.andM;Access-control lists attached to directories (and sometimes to files) providea means of specifying the users or groups of users that are allowed access tofiles.andP;  They give administrators fine-grained control for shared access to awide-area file system.andM;Cryptographic authentication techniques, such as those used in MIT's Kerberos[11], allow clients and file servers to prove their identifies to each other.andM;High-speed networks, such as NSFNet, can provide T1 (1.5 megabits per second)or even faster connections between local-area networks.andP;  As Markoff reports,these networks are the object of growing interest both in the scientificcommunity and in Washington, DC [12].andM;Remote procedure calls that can efficiently stream large chunks of files areneeded both to issue fine granularity requests and to permit the efficienttransfer of data at high speeds.andP;  Simple request and response protocols thatacknowledge each packet cannot achieve sufficient bandwidth over long-haulnetworks.andM;Replication of directories, data, and files on a number of servers can makefor increased performance as well as immunity to file-system or networkfailures.andP;  Replication of read-only or read-mostly data is easiest.andM;A FS 3.0, a system developed by the Information Technology Center at CarnegieMellon University, uses many of the implementation techniques and meets manyof the goals described above.andP;  The system evolved as a result of six years'work in large-scale distributed file systems.andP;  (See the inset on page 62 formore historical and operational perspective.)andM;The file system itself consists of a number of components that fit togetherto provide the AFS abstraction.andP;  The most important program in the AFS suiteis the file server process (actually implemented as two UNIX processes, forhistorical reasons), which runs on each file server machine and exports filesto network clients.andM;The file server deals almost exclusively with objects called volumes, whichcan be thought of as small disk partitions (typically from 1 to 50 MB),several thousand of which are loaded into a server machine.andP;  A volumecomprises a collection of files and directories, each indexed by a 96-bitfile identifier (fid), and forms a connected &quot;subtree&quot; of AFS.andP;  Theindividual volumes in the system are glued together at mount points to makeup the global AFS name space, in much the same way that individual diskpartitions are glued together to form a single file-system image in a normalUNIX system.andP;  Of course, there are differences.andP;  Unlike partitions, volumesdo not have a fixed permanent disk space allocation.andP;  Instead, many volumesshare a single UNIX disk partition on a file server machine, and each volumegrows and shrinks over time, constrained only by a per-volume quota and thetotal space available on the disk partition.andP;  The volume quota can bedynamically adjusted by a system administrator.andM;AFS volume mount points, unlike UNIX mount points, are file-system objects.andO;Thus, all workstations accessing AFS see the same file system tree structure.andO;For example, the file /afs/andrew.cmu.edu/usr/kazar is a mount point to thevolume named user.kazar, the volume containing Kazar's personal files.andM;In addition, volumes can move from server disk to server disk and, indeed,from server to server, without changing their names.andP;  This point is crucialfor providing location transparency in the system.andM;The file server uses RPC to export both operations on entirevolumes--restoring a volume from a backup tape, for instance--and operationson individual files or directories stored within a volume--such as fetching ablock of data from a file.andM;Cache manager.andP;  The next important component of the file system is the cachemanager, which resides on each AFS client machine.andP;  The cache manager cachesthe files and directories most recently used.andP;  It transforms UNIX file-systemcalls into combinations of cache references and RPCs to one or more fileservers.andP;  It is also responsible for eliminating entires from the cache whenthe cache becomes full.andM;The AFS 3.0 cache manager interfaces with the UNIX kernel via SunMicrosystems' Vnode Interface [13], which was originally designed to providea clean interface between the kernel and Sun's Network File System [5].andP;  TheUNIX kernel converts system calls into a set of procedure calls to theexternal file system module, which then implements the desired function.andM;At the interface between the cache manager and the file server, files arenamed by 96-bit fids.andP;  Unlike on some systems, AFS fids do not name immutableobjects: a file named by a single fid can have different contents atdifferent times.andM;Files are composed of a data part and a status part.andP;  The data part of a fileconsists of a stream of 8-bit bytes.andP;  The status part contains suchinformation as the file's length, its creation date, and its protection mode.andO;One important piece of status information is the file's data version number,which is incremented every time the file's data is changed and is used bymany of our consistency algorithms.andP;  The cache manager caches the data partand the status part of a file independently.andM;A file's fid is sufficient information to allow retrieval of the file'sstatus or data parts from a file server at any time.andP;  Because files are notimmutable, this file may contain different data at different times.andP;  However,a file's fid and its data version number, in combination, uniquely specify afile's contents.andM;In designing AFS, we were concerned about the processor time needed totranslate pathnames to fids.andP;  We were especially concerned that file serverswould not have enough processing resources available to handle extensivepathname-based computations.andP;  For this reason, we have tried to keep allknowledge of pathnames, as well as all requests that deal with pathnames, outof the file server interface.andP;  The server deals only with files named byfids, which the cache manager derives from pathnames.andP;  Thus, all knowledge ofpathnames is the province of the cache manager, which is also the AFScomponent that actually glues together into a single coherent tree thecollection of free-floating volumes supplied by the servers.andP;  It does so byinterpreting AFS mount points when they are encountered in pathnames.andM;In addition, it is the cache manager that knows which volumes in the systembelong to which cell [14].andP;  It is thus up to the cache manager to keep trackof the various identities that a user may have in different cells, and to usethe appropriately authenticated RPC connections at the right times.andP;  That is,the cache manager is given a set of identities for a user--one per cell--andassumes the appropriate identity when referencing a cell for the user.andM;File location.andP;  How does the cache manager know which server or servers afile resides on?andP;  A process called the volume location server sends thisinformation to cache managers and administrative programs everywhere in thenetwork.andP;  When a cache manager needs to perform an operation on a particularfile in a previously unseen volume, it contacts the cell's volume locationserver and obtains the set of servers from which that volume can be accessed(at present, only read-only volumes may exist at more than one site).andP;  Thecache manager, not surprisingly, caches this information so that mostreferences to a volume do not require contacting the volume location server.andO;Occasionally, a volume will move from one server to another, under operatorcontrol.andP;  When the cache manager subsequently attempts to reference thevolume at its old home, a distinctive error code will direct it to consultthe volume location server for information about the volume's new location.andM;Authentication.andP;  How does the file server know the identity of a clientaccessing a file?andP;  One of the fundamental tenets of AFS is that clientworkstations are inherently insecure.andP;  That is, fle servers have no way oftelling what software is actually running on a workstation over which thecomputation center has no physical control.andP;  Thus, we are unable to ask theworkstation's UNIX kernel for the identity of the person accessing a file.andO;In addition, in our particular environment, there are a large number ofworkstations and personal computers that can snoop on the network.andP;  For thesereasons, we decided it was unacceptable to send passwords over the network;it would be too easy for someone to write a program to snatch them as theyflew over the ether.andP;  Instead, we wrote an authentication server that usesNeedham and Schroeder's algorithm for mutual authentication in a networkenvironment.andP;  In AFS 3.0, we have replaced our original authentication serverwith MIT Project Athena's Kerberos authentication system [11].andM;While the Kerberos system is fairly complex, the fundamental idea behind itis quite simple: clients prove their identity not by sending a shared secret(such as a password) over the network, but by answering encrypted challengesfrom a server that also knows the shared secret.andP;  Specifically, the serverRPC package encrypts a challenge with the shares secret and sends it to theclient.andP;  The client RPC package receives the challenge, decrypts it, answersthe challenge, and sends the result, encrypted again with the shared secret,back to the server.andP;  Since the same challenge is never repeated, it is notpossible to simply replay a response to one challenge in response to a laterchallenge.andM;Protection model.andP;  The file server knows, thanks to the authenticationmechanism, the identity of the client on the other side of the RPC interface.andO;The file server then determines the client's rights of access to variousdirectories and files by consulting the access-control list associated witheach directory in the system.andP;  This list specifies access rights for thedirectory itself and for all the files contained in it.andP;  An access-controllist is an array of pairs; the first item in each pair is a user or groupname, and the second is information regarding the rights granted to that useror group.andM;The rights that describe access to a directory are one or more of thefollowing:andM;* lookup allows the reading of the names in a directory;andM;* insert allows the insertion of new entries in a directory;andM;* delete allows the deletion of entries from a directory;andM;* administer allows the modification of the access-control list associatedwith this directory.andM;The rights that describe access to the files within a directory are asfollows:andM;* read allows the reading of any files within the directory;andM;* write allows the writing of any files within the directory;andM;* lock allows the setting of locks on files within the directory.andM;In addition, AFS interprets the UNIX &quot;owner&quot; protection-mode bits in aspecial way, so that files without the owner &quot;read&quot; or &quot;write&quot; bits turned onare protected.andP;  For example, the access list on for user kazar's homedirectory is specified as: Access list for /afs/andrew.cmu.edu/usr7/kazar isNormal rights: System:AnyUser rl kazar rlidwkaandM;This means that members of the group System:AnyUser (which is made up ofeveryone in the system) may read files in kazar's home directory and look atthe names in it, but only users authenticated as kazar may update thedirectory or any files within.andM;AFS users are allowed to create new access-control groups in order to grantspecific rights to entire groups of users.andP;  The group's membership databaseis maintained by a server called the protection server, which is capable ofanswering two pertinent question: &quot;Who is a member of this group?&quot;andP;  and &quot;Whatgroups is this user a member of?&quot;andP;  The server also provides for the creationof new AFS user accounts.andP;  It is accessed via RPC's from the file serverprocess as well as from the cache manager and various system administrationutilities.andM;Operation server.andP;  The servers described above are all implemented asindividual UNIX processes.andP;  To help manage all of these processes, AFSprovides a process manager.andP;  It is the task of this server to control theother servers in the system, install new programs on the file servermachines, restart failing processes, provide status reports on processrestarts, and otherwise assist in operating the system.andM;Cache consistency and performance.andP;  The consistency guarantees provided by adistributed file system strongly affect the possible implementations of thatfile system.andP;  In building a high-performance distributed file system, thefirst requirement is appropriate consistency semantics.andP;  Consistencysemantics also affect the usefulness of a distributed file system forbuilding applications, especially distributed applications.andP;  If a distributedfile system has consistency guarantees that are too weak to use in building adistributed application, then that application will not be able to use thedistributed file system for storage and sharing, and the system will be afailure.andM;In AFS, calls to the cache manager must return up-to-date data from thecache.andP;  Rather than polling the file server on each call to the cachemanager, or simply assuming that the data in the cache is up to date, AFSuses a call-back system in which file servers notify client workstations whentheir caches contain invalid data.andP;  When a file server delivers data orstatus to a client workstation, it may also promise to notify the workstationbefore it changes the data or status information associated with the file.andO;(This happens when another user modifies the file.)andP;  Such a promise is calleda call-back.andP;  The process is notifying the appropriate workstations that aparticular file has changed--which must be performed before the contents orstatus information associated with a file has been changed--is called&quot;breaking&quot; a call-back.andM;Note that when a workstation has a call-back outstanding on a file in itscache, it can read the data or status associated with that file without anyfear that the information is outdated.andP;  This considerably reduces the loadthat a workstation places on a file server, but without weakeningcache-consistency guarantees.andP;  Note also that while call-backs areessentially a simple concept, their implementation can be tricky.andP;  Problemsarise in two areas: synchronization of calls to the file server withcall-back breaking messages from the same file server, and communicationsfailure while breaking a call-back promise.andP;  (See for a more detaileddiscussion of these issues.)andM;Communication.andP;  AFS uses an RPC mechanism named Rx for all interprocesscommunication, whether within a machine or between machines.andP;  RPC is awell-understood communications model, but there are several unique featuresof Rx that deserve mention.andP;  First of all, the interface between the core Rxpackage and its authentication modules is itself highly modular and thereforeallows for the easy definition of new authentication modules and thecoexistence of several distinct authentication schemes.andP;  For example, thefile servers at CMU's Information Technology Center currently support bothour old authentication tokens and Kerberos authentication tickets.andM;Second, Rx includes an enhanced RPC interface that allows the passing ofunbounded streams of bytes as parameters for Rx calls.andP;  When making suchcalls, a client-side Rx call appears to break into two parts; one part passesin input parameters and the other returns the output parameters.andP;  Betweenthese two parts, the caller can read or write data to an Rx stream; this datacan be written or read from the procedure called on the server.andP;  The resultis a very efficient and convenient way to pass unbounded amounts of data in aremote procedure call.andP;  AFS uses this mechanism when transferring largechunks of files (64 KB, for example) between the cache manager and the fileserver.andM;Finally, Rx was designed to use some of the fine-tuning performed by VanJacobson in his improvements to the TCP protocol.andP;  Our hope is that this willallow Rx to adapt to network congestion and variable-speed communicationslinks--at least as well as do modern TCP implementations.andP;  In early tests,the initial version of Rx proved capable of transferring data at about 400kilobits per second on a 500 kilobit-per-second long-haul link.andM;Interoperability.andP;  The AFS 3.0 cache manager can coexist with an NFSimplementation so that workstations can access both NFS servers and AFSservers.andP;  Additionally, the CMU computer science department has written aserver that exports AFS files using NFS protocols.andP;  This allows NFS clientsto access wide-area file service via an intermediate machine in theirlocal-area network.andP;  Of course, the system provides the minimum level ofsecurity provided by NFS and AFS.andM;In the future, we plan to construct an export server that will run on anarbitrary UNIX-based machine and export the file system as seen by thatmachine.andP;  At that point, it will be possible to export files from arbitrarydistributed file systems to AFS clients.andM;In August 1988, the CMU Information Technology Center (ITC) hosted a workshopon the concept of nationwide file systems and on the AFS system inparticular.andP;  At that time, the ITC announced its intention to deploy anexperimental, AFS-based wide-area file system in 1989.andP;  This file systemwould support between 10 and 20 sites (most of which are research-oriented).andO;To learn more about the effectiveness of wide-area file systems in supportingcooperative work, some of the sites will be chosen because they are workingon common projects or in similar areas of specialization.andM;As of early 1989, a wide-area file system with six cells was installed.andP;  Fourof the cells were at Carnegie Mellon, but remote cells were operatingexperimentally under Project Athena at MIT and at the University of Michigan.andO;The wide-area area file system has facilitated joint work on the file systemitself as well as on a user-interface toolkit project.andP;  The wide-area filesystem has also been used to provide remote access to the roughly 2000 publicbulletin boards maintained at Carnegie Mellon.andM;Among the goals of the experiment are gauging the utility of wide-area filesystems and users' reactions to specific features.andP;  For example, we hope tofind out how much faith users will put in cryptographic authenticationtechniques, and how they will use the fine-grained access-control lists.andP;  Weare also interested in learning how people perceive the performance on bothT1 and lower-speed networks.andM;We also expect to learn a number of technical lessons specific to AFS.andP;  Forexample, we expect to gain additional understanding of high-performanceprotocols and our file-caching strategies.andP;  We may also learn more aboutauthentication when we really begin to use AFS across a number oforganizations.andM;In addition, we expect to gain increased understanding about managing largesystems; there could easily be as many as 10,000 workstations connected toour system in the near future.andP;  Some of these insights should becomeavailable in the latter half of 1989.andM;One final benefit of the experiment is that it will tend to justify nationalnetworking initiatives.andP;  This wide-area file system would undoubtedly be oneof the first heavy users of very-high-speed long-haul networks.andM;Wide-area file service is feasible only among organizations that areconnected together by high-bandwidth links.andP;  Thus, scientists and researchprogrammers will be the ones who reap the initial benefits from such service.andM;The proliferation of fiber-optics technology, however, could lead to a vastincrease in the availability of high-speed networking.andP;  Vendors would thenbecome much more involved, and the technology could spread much further.andP;  Butfor it to become universal, standardized protocols for wide-area file serviceneed to be developed.andP;  We hope that our experience with AFS will contributevaluable ideas to the protocol-standardization process.andM;It is not yet clear how much bandwidth a wide-area file system will consume.andO;Certainly, we expect strong locality of reference for files stored within acell.andP;  Additionally, we expect that caching techniques, such as those used inAFS, will also substantially decrease the amount of bandwidth needed.andP;  On theother hand, files will tend to grow in size; images from the supercomputercenters are but one example of this.andM;Security and protection will require more thought on the part of users, evenif the security mechanisms used are bullet-proof.andP;  With the increasedopportunity to share information, users will need to be more aware ofdata-access rights; we expect that AFS access-control lists will be verybeneficial in this regard.andM;Technically, there are a number of interesting challenges we have not yetbegun to explore.andP;  There could also be network-wide authentication servicesthat would allow for the existence of authentication tokens that work inmultiple cells.andM;Furthermore, there could be increased focus on supporting heterogeneous filesystems.andP;  For example, AFS 3.0 does not support record-oriented operations.andO;Compression techniques for large files could be developed, particularly ifprocessing time is less expensive than communication.andP;  At present, entirevolumes can be moved transparently between file servers within a cell, butnot across cells.andP;  Additional functionality in this area could be madeavailable if it seemed worthwhile to do so.andM;As mentioned earlier, file systems could be made more configurable so thatusers could tailor their view on the wide-area file system.andP;  Also, both thelocations and formats of files could be standardized.andM;We are optimistic about the usefulness of wide-area file systems.andP;  We believethat our experimental system will receive substantial use, and that the nextsteps will become clear.andP;  Overall, we expect that wide-area file service willeventually be thought of in much the same way remote login, mail, andfile-transfer services are perceived today.andO;</TEXT></DOC>