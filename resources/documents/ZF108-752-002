<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-752-002  </DOCNO><DOCID>08 752 002.andM;</DOCID><JOURNAL>Communications of the ACM  August 1990 v33 n8 p23(5)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Should program algorithms be patented? (legal debate)</TITLE><AUTHOR>Samuelson, Pamela.andM;</AUTHOR><SUMMARY>Computer scientists and legal professionals are debating the issueof whether algorithms for computer programs should be patented.andO;Nearly 40 percent of respondents to one survey regard patentprotection for algorithms as appropriate, while eight percentbelieve algorithms should be copyrighted.andP;  Three precedents in theSupreme Court indicate that a computer program algorithm is not apatentable innovation.andP;  Gottschalk v. Benson in 1972 denied BellLaboratories employee Benson a patent on claims for a new way toconvert binary-coded decimals to pure binary form.andP;  The Court didrule, in the 1981 Diamond v. Diehr decision, that a patent claimfor a process should not be rejected solely because it is based onmathematical calculations or uses computers.andP;  The more recentIwahashi case also seems somewhat inconsistent with Benson, butpatents were also denied in the Grams and Meyer cases.andP;  Theserulings indicate the need for a legal standard which would ensurethe patentability of computer algorithms.andP;  Some question whetherpatent protection is necessary to provide incentives for computerprogramming innovation.andM;</SUMMARY><DESCRIPT>Topic:     AlgorithmsPatentLegal IssuesComputer scienceProgram Development Techniques.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Should Program Algorithms be Patented? In the Legally Speaking column lastMay [6], we reported on a survey conducted at last year's ACM-sponsoredConference on Computer-Human Human Interaction in Austin, Tex.andP;  Among theissues about which the survey inquired was whether the respondents thoughtpatent protection should be available for various aspects of computerprograms.andP;  The 667 respondents overwhelmingly supported copyright protectionfor source and object code although they strongly opposed copyright or patentprotection for &quot;look and feel&quot; and most other aspects of programs.andO;Algorithms were the only aspect of programs for which there was more than asmall minority of support for patent protection.andP;  Nevertheless, more thanhalf of the respondents opposed either copyright or patent protection foralgorithms.andP;  However, nearly 40 percent of the respondents regardedalgorithms as appropriately protected by patents.andP;  (Another eight percentwould have copyright law protect them.)andM;We should not be surprised that these survey findings reflect division withinthe technical community about patents as a form of protection for thisimportant kind of computer program innovation.andP;  A number of prominentcomputer professionals who have written or spoken about patent protection foralgorithms or other innovative aspects of programs have either opposed orexpressed reservations about this form of protection for software [2, 4, 5].andM;This division of opinion, of course, has not stopped many firms and someindividuals from seeking patent protection for algorithms or other softwareinnovations [8].andP;  Although the Refac Technology patent infringement lawsuitagainst Lotus and other spreadsheet producers may be in some jeopardy, it andother software patent lawsuits have increased awareness of the newavailability of software patents.andP;  This situation, in turn, has generatedsome heated discussion over whether this form of legal protection will be inthe industry's (and society's) long-term best interests.andM;The aim of this column is to acquaint readers with the legal debate on patentprotection for algorithms and other computer program innovations, an issuewhich seems to be as divisive among lawyers as those in the computer field.andO;[3, 9]andM;The Legal DebateandM;There are three U.S.andP;  Supreme Court decisions that seem to state quiteplainly that computer program algorithms are not the sort of innovation thatcan be patented.andP;  (More precisely, it has been said that program algorithmsare not among the kinds of &quot;processes&quot; Congress intended to be eligible forpatent protection when it passed the patent statute.)andP;  But as Ecclesiastesonce said, &quot;God made mankind straight, but men have recourse to manysubtleties.&quot;andP;  Patent lawyers have found ways of interpreting these threedecisions more narrowly than their plain meaning suggested was appropriate;through clever drafting of patent applications they have persuaded the patentoffice that these decisions do not bar patents for their clients' softwareinnovations.andM;Some patent lawyers, for example, have interpreted the third of these threeSupreme Court decisions as m eaning that algorithms are now unpatentable onlyif no practical applications is claimed for them [9].andP;  This reading of thejudicial opinion ignor es too much of the rest of what the Court said in thatcase to be a convincing interpretation.andP;  It also runs counter to a set ofguidelines that the Patent andamp; Trademark Office (PTO) issued within the pastyear concerning the standards by which it would judge patent claims foralgorithms [10].andP;  Nevertheless, some reccently issued patents suggest that atleast some patent examiners are operating on this basis.andP;  A lawyer who takesan aggressive stand on the patentability of software innovations is certainlymore likely to generate more business for him- or herself than one who has amore cautious interpretation of the patentability standard.andM;While lawyers have been arguing for many years about the patenting ofsoftware innovations, the legal debate over the patenting of algorithmsintensified when in 1986 Donald Chisum, an articulate and well-respectedpatent scholar, wrote an article arguing that the Supreme Court rulingsagainst patent protection for computer program algorithms be overruled.andP;  Heasserted that the rulings were an incorect interpretation of patent law aswell as being bad intellectual property policy [1].andP;  Since then, the PTO hasissued some  well-publicized patents for computer program algorithms,including one for industrial applications of Narendra Karmarkar's linearprogramming algorithm, assigned to ATandamp;T.andP;  And this past November, anappellate court overturned a decision by the PTO which would have denied apatent to a voice recognition algorithm.andP;  The implications of this case,however, are far from clear, for the decision said it was following theearlier Supreme Court rulings, and upheld the algorithm patent claim  ongrounds that are far from convincing and seem at odds with at least one ofthe previous Supreme Court decisions (see following discussion).andP;  And so thelegal debate continues.andM;While this column can give only a brief glimpse of the history of the legaldebate on this topi [7], it is well to begin with the story of the firstcomputer program algorithm case to be decided by the Supreme Court.andP;  Thiscase i typical of the problems that computer program innovations present forthe patent systems, and it is the case which Professor Chisum has arguedshould be overruled.andM;The Benson CaseandM;Gottschalk v. Benson is the 1972 Supreme Court decision that ruled a computerprogram algorithm is by its nature unpatentable.andP;  Gottschalk was theCommissioner of Patents who sought Supreme Court review of an appellate courtruling which had overturned the patent office's decision to deny Benson (anemployee of Bell Laboratories) a patent on his two claims for a new algorithmfor converting binary-coded decimals to pure binary form.andM;The appellate court regarded the first of Benson's two claims as easilymeeting the standards for a patentable process because the claim madereference to hardware elements, such as &quot;signals&quot; and &quot;reentrant shiftregisters.&quot;andP;  This meant, said the judges, that it was only a claim for themachine implementation of this process.andP;  Under standards this court hadannounced in previous cases, such hardware references made the claim apatentable one.andP;  The judges pointed out that cash registers, like Benson'smethod, worked, with numbers, but that did not make such registersunpatentable.andP;  (This analogy, however, misses the deeper question of whetheraddition itself would be patentable as a process merely because it is capableof being carried out on a machine such as a cash register, an issue whichwill be discussed further here.)andM;Benson's second claim, however, made no mention of any hardware elements.andO;The appellate court admitted that issuing a patent on this claim would coverthe method when performed manually with pencil and paper (which was why thepatent office regarded it as an unpatentable &quot;mental process&quot;).andP;  Since thecourt believed computer implementations would be the only practicalutilization of the invention, it decided this claim too was technologicalenough in character to be a patentable process.andP;  Consequently, the appellatecourt ruled that the patent office had been wrong to reject Benson's patentapplication.andM;The Supreme Court reversed this appellate court decision and ruled that thepatent office had been right to reject both of Benson's claims.andP;  It agreedwith the patent office that until that time, only processes that involved thetransformation of matter from one physical state to another (such as achemical process) had been considered patentable.andP;  Benson's method did nottransform matter.andM;While the court made clear it was not saying that transformation of matterwould always be required to support the patentability of a process, thejudges we persuaded by &quot;friend of the court&quot; briefs submitted by such firmsas IBM, Burroughs, and Honeywell that the mathematical character of theBenson algorithm excluded it from being the sort of process that waspatentable in nature.andP;  (The Court also agreed with the patent office thatmental processes are not patentable, although this was not one of its mainpoints.)andP;  The court compared Benson's algorith to a law of nature or ascientific principle--discoveries traditionally not considered to bepatentable in character.andP;  The fact that the only practical utilization of theBenson algorithm was in a computer was interpreted by the Court to mean thata patent on it would, in effect, preempt all uses of that algorithm.andP;  Thisfactor helped to influence the Court to deny its patentability.andM;Post-BensonandM;Patentability StandardsandM;In the years that followed the Supreme Court's 1972 Benson decision, theappellate court reviewed a number of other patent office decisions involvingcomputer program innovations.andP;  In these cases, the court experimented withvarious interpretations of the Benson decision (which the appellate court wasbound to follow, even if the judges did not agree with the Supreme Court'sruling).andM;For a while, the appellate court interpreted Benson as applying only toclaims drafted in process (or method) form, and not to claims drafted inmachine (or apparatus) form, although a patent lawyer could, through minorwording changes, easily draft the claims in either form.andP;  At some point,however, the appellate court decided to abandon this distinction.andP;  (But seethe following discussion of the Iwahashi case.)andM;Then the appellate court began to distinguish between &quot;mathematicalalgorithms&quot; (by which the appellate court generally meant mathematicalformulae), which it said were unpatentable under the Benson ruling, andnonmathematical algorithms (such as an algorithm for converting written textsfrom one natural language to another, which the appellate court regarded asnonmathematical in character), which could be patented.andM;For a time, the appellate court decided that even claims for &quot;mathematicalalgorithms&quot; might be patentable as long as the claims did not cover all usesof the algorithm: limiting the claim to some technological environment orfield of application was regarded by the appellate court as saving the claimfrom Benson's proscription against a patent on an algorithm.andM;However, in 1978 (and again in 1981), the Supreme Court said that a claimlimitation of this sort was not consistent with its ruling in Benson.andP;  Norwas it consistent with Benson to merely tack on to the claims some minorpost-solution activity.andP;  In its 1981 decision--Diamond v. Diehr--the SupremeCourt ruled that a patent claim for a process should not be rejected merelybecause it includes a mathematical calculation or a computer program as anelement.andM;The only requirement, the Court said, was that the process being claimed--inDiehr, the process was said to be one for curing rubber, which included as anelement some computerized calculations to determine when the curing wasdone--be of a patentable sort.andP;  Since rubber curing is a traditional type ofindustrial process (i.e., one involving the transformation of matter), theCourt found Diehr's process to be patentable in nature.andP;  The present PTOguidelines on the patentability of claims involving mathmematical algorithmsattempt to implement the Supreme Court's ruling in Diehr, as well as to beconsistent with other appellate courts' rulings on computer program-relatedinventions.andM;The Iwahashi CaseandM;Since the Supreme Court's decision in Diamond v. Diehr, there have beenrelatively few court decisions concerning the patentability of computerprogram algorithms or other software innovations.andP;  In the fall of 1989,however, the appellate court which oversees the patent office's decisionsissued two opinions concerning what the PTO found to be unpatentablealgorithms.andP;  In the Iwahashi case, the appellate court ruled that a patentshould have issued; in the Grams case, the appellate court upheld the PTO'srejection of the claims.andM;Iwahashi's claim was drafted in apparatus (rather than method) form, and wasfor an auto-correlation unit useful in pattern recognition (particularlyvoice recognition) to obtain auto-correlation coefficients for stored signalsamples.andP;  Iwahashi claimed to have invented a simpler way to obtain thedesired coefficients.andP;  (Rather than utilizing multiplication as the prior artdid, which required more complicated circuitry and more calculation time,Iwahashi's unit squared the sum of two factors in accordance with a statedformula.)andM;Most of the elements in the claim were for obtaining input values,calculating sums in accordance with a formula, and storing the valuesobtained from the calculations.andP;  Several of the claims elements madereference to &quot;read only memory&quot; (e.g., storing a value in read only memory).andO;Despite these references, the PTO regarded the claim as being for thealgorithm.andP;  The appellate court, however, focused on the fact that the claimwas for an apparatus (a &quot;unit&quot;), and made references to read only memory (ahardware component) in ruling that the claim was for a patentable machine.andM;Given that the Supreme Court, in the course of judging the patentability ofBenson's invention, did not distinguish between the claim which referred to&quot;reentrant shift registers&quot; and that which made no reference to hardwareelements, the appellate court's ruling in Iwahashi seems inconsistent withBenson.andM;The Iwahashi opinion does not seem to be in agreement with earlier decisionsby a predecessor appellate court, which regarded as immaterial whether aclaim reciting a mathematical algorithm was drafted in method or apparatusform.andP;  Based upon the reading of this case, one wonders whether all it takesnow to render a claim for a computer program-related innovation patentable isto draft it in apparatus form and mention a ROM.andM;Although the decision does not indicate whether the algorithm was intended tobe embodied in a program or in a chip, this distinction too would not seem tobe meaningful since the Benson algorithm, like all other computer programalgorithms, could have been embodied in a chip, rather than a program.andM;Another computer program algorithm patent which does not appear consistentwith the three Supreme Court decisions on this subject, is ATandamp;T's patent on&quot;industrial applications,&quot; of the Karmarkar algorithm, in view of the Court'sstatements that merely limiting the field of application for the algorithmdoes not make it patentable.andM;The Grams CaseandM;Grams made a number of claims related to a method of diagnosing abnormalconditions in complex systems.andP;  The method consisted of steps such asconducting tests on individual instances of the system, taking values fromthese tests and comparing them with values associated with normalindividuals, and conducting successive tests to determine the cause(s) of theabnormality.andP;  The patent application made evident that the method was to becomputerized.andP;  Relying on the 1982 Meyer decision in which an algorithm foran expert system program for diagnosis of neurological conditions had beenheld to be unpatentable because it was for a mathematical algorithm, theappellate court in Grams upheld the PTO's rejection of the claims.andM;One of the surprises about both the Grams and the Meyer decisions was that ineach of them the court took a broader view of what the term mathematicalalgorithm included than it had in some of its earlier decisions.andP;  In the 1978Toma case, for example, the appellate court had rejected the argument thatToma's algorithm for a computerized process of natural language translationwas a &quot;mathematical algorithm&quot; for it recited no equation; but then neitherdid Grams's or Meyer's applications.andP;  In the latter two cases, the appellatecourt also emphasized that the claims were for an unpatentable mentalprocess, even though it was clear that the intended implementation of bothwas a computer program.andM;What to do if PatentandM;Law's DistinctionsandM;are UntenableandM;Chisum has argued that the Supreme Court's Benson decision should beoverruled.andP;  Benson's algorithm was, in his view, a process that wastechnological enough in character to be patentable.andP;  Chisum has blamed theanalytic confusion reflected in the judicial case law (such as thedistinction between mathematical and nonmathematical algorithms) on theSupreme Court's Benson decision, and predicts that this confusion will beresolved once Benson is overruled.andP;  Chisum has also asserted that patentincentives are needed to stimulate investment in research that will lead toimportant algorithmic innovations and advance the state of the art ofcomputer programming.andM;The computer scientist Allen Newell, in responding to Chisum's article on thepatentability of algorithms, agreed with Chisum that the distinction betweenmathematical and nonmathematical algorithms is untenable, as is that betweenalgorithms and mental processes.andP;  Newell pointed out that cognitivescientists have been aiming to model the computational processes which occurin the brain by writing programs that stimulate this kind of computation;consequently, there is an equivalence between algorithms and mental processesthat makes any distinction between them for patent purposes doomed tofailure.andM;While agreeing with Chisum that the particular confusion that developed inthe law in the aftermath of the Benson decision might disappear if Bensonwere overruled, he questioned Chisum's conclusion that all the analyticconfusion in patent law concerning algorithms would be resolved by this act.andO;Newell thought more profound issues were raised by the patenting of programalgorithms than Chisum seemed to realize.andM;Newell suggested that the conceptual models on which the patent system wasbased might be broken when applied to algorithms and other programinnovations, and questioned whether more innovation in program algorithmswould result from patenting than has resulted from what has been the norm ofnonprotection.andM;Newell used the example of the commonly used algorithm for addition toillustrate the conceptual problems presented by patents for algorithms.andO;Suppose this example (or some other mathematical procedure of equallywidespread application) had just been invented.andP;  Chisum's definition of apatentable process would seem to include such an innovation as a patentableone.andP;  Yet it is surely the kind of innovation which would ordinarily not beconsidered patentable.andP;  Even the Supreme Court justices who would have uphelda patent on an equation useful in catalytic conversion plants in the 1978Parker v. Flook case gave multiplication as an example of an unpatentableprocess.andM;The Need for aandM;Standard of PatentabilityandM;Before overruling the Benson decision, it is surely wise to think carefullyabout the consequences of granting patent protection to computer programalgorithms, which are mathematical in character.andP;  What makes themtechnological enough to be patentable processes?andP;  the fact that they can becarried out on a computer?andP;  Some case law suggests this may be enough.andM;If this is the case, an algorithm for addition would seem to be patentable,as would the program to carry it out.andP;  Since a patent could issue on thealgorithm itself, and since patent law gives the holder of the patentexclusive rights to use the patented invention, some might even argue that itwould infringe upon the patent to write an article about the algorithm, forwriting about it would use it, inducing one's readers to use it as well; thismight be regarded as contributory infringement.andP;  Traditionally it has notbeen an infringement of a patent to draw a patented machine or to write anarticle about it, for one could not thereby make or use the machine, whereaswith mental processes like addition, one can use the invention by writingabout it.andP;  Computer program innovations, if and when patented, mark the firsttime it can infringe a patent to embody the innovation in a copyrightedwritten text.andM;Given that all types of information can now be processed by computer, astandard of patentability that rested merely on the ability to computerize itwould make all methods of representing, organizing, and manipulatinginformation patentable.andP;  (Benson's algorithm, for example, can becharacterized as a method of representing data--in that case, numericalinformation--or converting its representation from one form to another.)andP;  Inthe past, methods of representing, organizing, and manipulating informationhave been considered unpatentable--not technological in character.andP;  It seemsa rather broad stretch to make all information processing patentable justbecause one wants, for example, to give ATandamp;T incentives to invest in researchfor advances in computing such as the Karmarkar linear-programming algorithm.andO;Yet where does one draw the line?andM;Chisum punts when it come to indicating what the bounds of patentabilitywould be if Benson were overruled, looking only to a 1970 case which says allit takes to make a process patentable is that it be &quot;in the technologicalarts,&quot; without defining what they might and might not include.andP;  Later casesinterpreting that 1970 case seem to say that having the ability to be carriedout on a computer is enough to make a process patentable.andP;  Transformation ofmatter as a test of what patentable processes might include and not includemay have outlived its usefulness, but at least it was a standard thatprovided some limiting boundaries for patentability.andM;Furthermore, considering how the software industry has grown, and the amountof innovation it has exhibited in an environment in which patent protectionwas perceived to be unavailable, some have questioned whether more thancopyright or trade secret protection is really needed to provide incentivesfor innovations in computer programming.andM;Some also express concern about the ability of the PTO to make up for 30years of not keeping track of the state of the art of computer programming,and the adequacy of its classification system, as well as its judgment as tothe nonobviousness of some innovations which have been patented.andP;  Inaddition, some worry that the structure of the software industry will bechanged by the increasing utilization of patents for software innovations,and entry into the business will be made more difficult.andP;  Considering howmuch innovation in the field has come from small firms, the prospect ofhigher entry barriers from patents is worth considering carefully.andM;A New Policy StudyandM;is UnderwayandM;At the request of some conressional committees, the Office of TechnologyAssessment (OTA) of the U.S.andP;  Congress has just recently undertaken the studyof how the U.S.andP;  software industry can most effectively utilize intellectualproperty protection to maintain its competitive edge in the emerging globalmarketplace for software.andP;  Among the issues OTA will study is what rolepatents should play in the legal protection of program innovations.andP;  OTA willbe seeking input from computing professionals, industry, user groups, as wellas lawyers, in carrying out this work.andP;  OTA may well conclude that althoughgrowth of the industry might have been impeded if patents had been availablefor program innovations in the early stages, such protection is now needed tospur investment in software development and strengthen the position of U.S.andO;firms in the international arena.andP;  What do you think?andM;Pamela Samuelson is a professor of law at the University of Pittsburgh Schoolof Law.andM;ReferencesandM;[1] Chisum, D. The Patentability of Algorithms.andP;  Univ.andP;  of Pittsburgh LawRev.andP;  47, 959 (1986).andM;[2] Kapor, M. Testimony at Hearings before U.S.andP;  House of Representatives,Subcommittee on Courts, Intellectual Property and the Administration ofJustice, of the Committee on the Judiciary (March 5, 1990).andM;[3] Kahin, B. The Software Patent Crisis.andP;  Tech.andP;  Rev., 93, 52 (April 1990).andM;[4] Newell, A. The Models Are Broken!andP;  The Models Are Broken.andP;  Univ.andP;  ofPittsburgh Law Rev.andP;  47, 1023 (1986).andM;[5] Plauger, P.J.andP;  Soup or Art?andP;  (Copyright Protection for SoftwareConcepts), Comput.andP;  Lang.andP;  6, 17 (Sept.andP;  1989)andM;[6] Samuelson, P. and Glushko, R. Survey on the Look and Feel Lawsuits.andO;Commun.andP;  ACM 33, (May 1990), 483.andM;[7] Samuelson, P. Benson Revisited: Should Patent Protection Be Available forAlgorithms and Other Computer Program-Related Inventions?andP;  Emory Law J., 39,To be published--fall 1990.andM;[8] Soma, J. and Smith B. Software Trends: Who's Getting How Many of What?andO;1978 to 1987, J. of Pat.andP;  andamp; Tradem Soc.andP;  71, 415 (1989).andM;[9] Sumner, J. and S. Lundberg.andP;  The Versatility of Software PatentProtection: From Subroutines to Look and Feel.andP;  Comput.andP;  Lawyer, 3, 1 (June1986).andM;[10] U.S.andP;  Patent andamp; Trademark Office.andP;  Report on Patentable Subject Matter:Mathematical Algorithms and Computer Programs.andP;  Pat., Cop., andamp; Tradem.andP;  J.andO;(BNA), 38, 563 (1989).andO;</TEXT></DOC>