<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF208-017-526  </DOCNO><DOCID>08 017 526.andM;</DOCID><JOURNAL>EXE  Nov 1989 v4 n6 p48(5)* Full Text COPYRIGHT Process Communications Ltd. (England) 1989.andM;</JOURNAL><TITLE>A parallel future. (Equus parallel operating system)</TITLE><AUTHOR>Farncombe, Martin.andM;</AUTHOR><SUMMARY>The Equus operating system is a new parallel-processing systemrunning underneath UNIX that supports off-the-shelf hardware andis independent of communications networks or target systems.andO;Equus consists of two parts: a UNIX front end for development andsystem-service access, and a series of nodes running its ownkernel.andP;  Applications written to run under Equus group togetherlines of code to form 'segments;' a 'primary' segment acts as acontrolling procedure to determine the program's structure.andP;  Thesystem currently provides a library interface for the C language;interfaces for C++ and FORTRAN are planned.andP;  Equus allows multiple'incarnations,' or copies of a segment which executesimultaneously, and employs 'waves' of these incarnations as datapipelines.andP;  The Equus kernel can be ported to most RISC and CISCprocessor types.andP;  It runs at 95 percent of its theoretical maximumefficiency.andM;</SUMMARY><DESCRIPT>Product:   Equus (Computer program) (usage).andO;Topic:     Operating SystemsNew TechniqueParallel ProcessingUNIX.andO;Feature:   illustrationchartprogram.andO;Caption:   A pool of processors talking to an existing UNIX machine/underEquus. (chart)Recording of edge detection procedure for Equus. (program)Demonstrating segments, incarnations, and waves. (chart)andM;</DESCRIPT><TEXT>A Parallel Future The need for increasing computer performance seems to beforever increasing.andP;  Manufacturers have traditionally satisfied users bybuilding biggerand bigger machines.andP;  However, the law of diminishing returnsand the finite speed of light means that other solutions will have to befound.andP;  Once solution already being introduced is parallel processing ormulti processing systems.andM;Microprocessor technology has chipped away at the price/performance ratios ofthe bigger computers.andP;  We have now reached the point where a number of $500chips can, when working together, outperform a traditional mainframe.andP;  As faras high-performance computing is concerned, the future will almost certainlylie in parallel processing.andP;  Already, it is not uncommon to find parallelprocessing systems offering, say, a tenth of the performance of a Cray at ahundredth of the price.andM;some parallel systems have rather esoteric architectures.andP;  For example,machines that apply one CPU instruction to a large array of data in a singleinstruction cycle are well established in areas such as minefield detection.andO;Another example is the neural net, which is now starting to emerge from theresearch laboratories.andP;  The neural net is designed to mimic the function ofthe brain, and can be 'taught' by supplying test data.andP;  However, mostparallel processing systems fall into one of two simpler classes:shared-memory or distributed-memory machines.andM;Machine TypesandM;Shares-memory systems consist of a number of CPUs sharing the same memoryareas for both data and instructions.andP;  The concept of globally-availablememory makes them attractive to those with existing serial programs,especially old FORTRAN programs with large COMMON blocks.andP;  However, thedifficulties in maintaining the correctness of the CPU caches severely limitsthe number of processors in these machines and makes them relativelyexpensive.andM;distributed-memory machines consist of a number of separate processors, eachwith its own memory.andP;  The processors communicate by passing messages oversome medium such as a bus or local area network.andP;  It is generally harder toconvert existing software to use these systems, but they generally offerbetter price/performance and there is no limit on the number of processorswhich can be added.andP;  I know of one system that has 8192 processors,theoretically capable of delivering 60,000 MIPS.andP;  Examples ofdistributed-memory systems are Equus (software) and the varioustransputer-based and hypercube, systems (hardware).andM;The most famous British microprocessor, the Inmos Transputer, was conceivedin the late 70s as a component to be embedded in logic circuits.andP;  It rightlycaught the imagination of the industry because it was fast, and because,transputers could communicate directly between themselves, rather than viaexpensive (and slow) buses.andP;  The onchip comms made the Transputer an obviouschoice for parallel processing systems and, as a result, there are a largenumber of transputer-based machines installed in Britain.andP;  The rest of theWorld, it has to be said, has not been quite so enthusiastic.andP;  The technologyhas not changed a great deal in the last ten years and now looks ratherdated, but the future should be a lot brighter for Inmos since its recentacquisition by SGS-Thomson.andM;What it Equus?andM;Most, but not all, parallel processing systems are based on specialisthardware.andP;  It is possible, however, to use standard hardware with adistributed operating system.andM;Equus was designed to support parallel processing on off-the-shelf hardware,running alongside (not instead of) an existing operating system.andP;  It isindependence of target hardware or communications networks.andP;  Fast systems canbe built by having RISC processors closely coupled on a bus.andP;  Alternatively,lower-price systems can use slower chips loosely coupled over a local areanetwork.andP;  Applications would be portable from one system to the other.andM;An Equus system consists of two parts.andP;  First, a UNIX front end, used as adevelopment machine and as a way of accessing system services.andP;  Second, atarget system consisting of a set of nodes running the Equus kernel.andO;Standard UNIX workstations (System V, Sun etc.) are used as the front end,because they offer the programmer a well-known development environment andbecause they make it easier to port applications running on such systems.andM;This arrangement can be seen in Figure 1, where a program called Launchprovides an interface between the program running in the Equus pool and thefile and graphics systems of the workstation.andM;Applications and SegmentsandM;Parallel programs written to run under Equus consist of normal lines of code,grouped together to form segments.andP;  A controlling procedure (called theprimary segment) determines the initial structure of the program.andP;  Thebreakdown of the program into segments is determined by the structure of theproblem, and is usually obvious.andP;  Segments communicate via routines from theEquus libraries.andP;  Typically, less than 5% of an application consists of Equuscalls, and programming languages and techniques will remain unchanged.andO;Existing code can be easily edited and re-compiled to run in parallel.andP;  Thestandard machine compilers and linkers are used, and there is a set of #include files containing commonly used data structures.andP;  Equus currentlyprovides a library interface for C, but interfaces for FORTRAN, C++ and otherlanguages are planned.andM;An ExampleandM;In general, the numbe of Equus system calls used depends on the desiredcomplexity of the resulting wave.andP;  To take a simple example, if aconventional edge detection program calls a C procedure to detectdiscontinuities in a large block of data, it would be a good idea to convertthis procedure to an Equus segment and run a number of these segments inparallel, with each working on a separate fragment of the data.andP;  The actualcode of the procedure would need little or no modification.andP;  It would,however, need a main ( ) statement at the top, since it runs as a 'standalone' process.andP;  It would also need an Equus receive call to receive its dataand an ssend call to return results.andM;The code in Figure 2 shows the main code modifications that would be needed.andO;The ssend call here is synchronous--the caller waits until the message isdelivered--but it is also possible to send the data asynchronously or toallow another segment access to your memory area.andP;  The code for invoking theprocedure would require the modifications shown in Figure 3.andM;The simple example demonstrates that a serial program can be converted to anEquus wave with very little effort.andP;  More complicated waves would obviouslyrequire more thought and effort, but for the great majority of applications asimple wave is sufficient to improve performance significantly.andM;Of course, it would be nice if we could provide a system in which existingcode did not have to be changed (or even recompiled) to get the benefits ofparallelism, but this is more or less impossible with distributed memoryarchitectures.andP;  Moving from a serial environment to a parallel one is similarto moving from portrait painting to sculpture--you can continue to produceflat artwork, but only by ignoring the third dimension.andP;  Similarly, you canrun your existing programs on their own processors, but they are still serialprograms.andP;  Such multi processing systems provide some speed benefits, and areof often used to support large numbers of users, but they cannot give vastperformance improvements.andM;Incarnations and WavesandM;Under Equus, you can have several identical executing copies of a segment.andO;These copies are known as incarnations.andP;  Incarnations can run in the sameprocessor or in different processors.andP;  Figure 4 shows the relationshipbetween an application, its segments, and their incarnations.andP;  Any segmentcan be incarnated a number of times (see [B.sub.1., B.sub.2., B.sub.3]).andM;The set of incarnations of the segments can be regarded as an entity called awave.andP;  The wave runs on the target system, and is the parallelised version ofone of its strengths.andP;  Like UNIX, each of the target processors can supportmore than one incarnation, provided that the memory management capabilitiesof the host processors allow this.andP;  Equus also allows incarnations from anumber of different waves (and users) to run on the same CPU: all the userscan use all the processors all the time.andP;  In figure 5, incarnation A1 sharesa processor with incarnation B3 as well as with a number of other waves.andM;As long as a processor has a reasonably good memory management system, it cansupport multiple users.andP;  The lack of this feature is the reason why Equussystems are not available on hardware based on the current generation ofTransputers, where multi-user support can only be (paradoxically) achieved byallocating each processor to a single user.andP;  Access to multiple users isvital if the parallel system is supporting a network of conventionalmachines, and indeed Equus was designed with this in mind.andM;Wave StructureandM;The two most common structures used in parallel processing are pipelines andfarms.andP;  Pipelines are useful when a large number of operations needs to beperformed on the same data (or where operations performed on the data affectssubsequent operations), and the farm model is applicable to any problem wherethe same operation is applied to a lot of independent data.andM;An Equus pipeline wave consists of a number of incarnations connected insequence.andP;  Each piece of data is processed by each incarnation of the pipe inturn before being passed on to the next.andP;  This is analogous to a productionline, where the product moves along a conveyor belt with workers standing byit.andP;  Each worker adds a small part to the product as it progresses down theline, until it emerges completed at the end.andP;  The advantage of this is that npieces of data are processed simultaneously (where n is the number ofelements in the pipeline).andP;  Alternatively, the least incarnation in the pipemay have its output connected to the input of the first to produce a circularpipe, and the data then circulates around the pipe until processing isfinished.andM;A processor farm wave consists of a number of incarnations connected inparallel.andP;  The individual incarnations perform (usually the same) tasks on aseparate, independent block of data.andP;  The incarnations do not need tocommunicate with each other, and do not even need to know of each other'sexistence.andP;  It is usual to send the processed data to other incarnations forstorage or display, thus forming a 'fat pipe'.andM;As noted earlier, each wave has a primary segment.andP;  The function of theprimary segment is to create the rest of the wave by creating theincarnations of the other segments.andP;  The primary usually has a much higherproportion of Equus library calls than the other segments.andP;  The programmerwill usually make use of off-the-shelf primary segments available forstandard structures such as pipelines or processor farms, but one can write aprimary segment defining an unusual structure if this is more suitable forthe application.andP;  It is even possible to create waves whose structures changewhile they are running, allowing programs to grow, shrink or completelychange their structure if the application demands it.andP;  Not just messages, butthe ability to send and receive them, can be passed around: this would beuseful, for example, in artificial intelligence programs.andM;Systems SoftwareandM;As well as application waves running on the Equus system, there are twosystem waves used to monitor and balance the system load.andP;  The Pool Managerwave has several functions: it can segment the pool if this is required (forsecurity reasons, perhaps); it starts the primary segment of each wave; itkeeps track of the system resources and it balances the load.andP;  When aworkstation launches the Load Monitor wave, it notes the usage of the CPU oneach node and plots these as a bar chart in an X11 window.andP;  Balancing theload is achieved by selecting the position of new incarnations and, moreunusually, by moving existing incarnations.andP;  Load balancing means that theCPUs are constantly and evenly used, which increases considerably theefficiency of the system.andM;Naturally, an incarnation is only moved if the expected speed-up outweighsthe migration tiem.andP;  It is also possible to move an incarnation if it hasrequested more memory than is available on its current processor.andM;PortabilityandM;Very few of the major players in the parallel processing market seem toregard vendor-independence as important.andP;  This will undoubtedly change,because applications are more likely to be written for an operating system ifthey can run on several implementations of it.andP;  The widespread nature of UNIXand MS-DOS software is an example of this.andM;The Equus kernel was designed to run on most CISC and RISC chip types.andP;  Thecurrent generation of equus systems uses off-the-shelfMotorola 68030 boards,but the kernel is being ported to other chips and, hopefully, a futuregeneration of Transputers.andM;PerformanceandM;There are no recognized benchmarks for parallel processing systems, and it isnot generally possible to refer to the standard serial benchmarks such asDhrystone or LINPACK.andP;  Instead, real applications should be considered asindications of performance.andP;  The example used here (other applications givethe same results) is an image convolution algorithm.andP;  This is a mathematicaltechnique used for edge detection in digitised images, where each pixel in apicture is operated on by a two-dimensional Laplacian-of-Gaussian function(LOG, [sigma] = 8) to give a set of values distributed about zero: the edgesare determined by transitions between positive and negative values.andP;  Thisalgorithm can be used in the preparation of images for detection, by shaperecognition, of fractures or tumours in X-ray pictures.andP;  Parallelisation ofthe algorithm yields two benefits: larger images can be worked on and theprocessing is (obviously) faster.andM;The structure of the wave consists of a primary segment and a number ofidentical worker segments, each running on a 68030 card connected via a VMEbus.andP;  The application is compute intensive, but passes very large messagesbetween the processors.andP;  Figure 6 shows the main conclusion to be drawn fromthis benchmark: that there is no perceptible tail-off in relative performancewhen extra processors are added.andP;  The Figure gives the effect of adding moreprocessors to an Equus system as a measure of the number of pixels per secondthat the application can process.andP;  The system runs at greater than 95% of thetheoretical maximum efficiency (ie a nine processor system will run verynearly three times as fast as a three processor system).andM;For processor-intensive applications such as this, a system based on aboutfive 68030s will outperform a top-end VAX for about a fifth of the cost.andM;ApplicationsandM;Applications suitable for distributed-memory parallel processing systems arethe sorts of applications currently running on mainframes and the smallersupercomputers; image processing; mathematical modelling; simulation; fluiddynamics and so on.andP;  Perhaps the most obvious use for Equus is in speeding upnetworks of existing UNIX workstations by providing a parallel computeserver.andM;Zebra Parallel Ltd (the organisation behind Equus) also offers a softwareconversion service to move existing serial applications into an Equusenvironment and to develop new applications.andP;  For example, an imageprocessing suite is being developed to clean up images, find edges in themand recognise shapes, even if they are partially hidden or are 'near misses.andM;ConclusionandM;There will always be markets for supercomputing as well as shared-memory anddistributed-memory parallelism, but the trend does seem to be towarddistributed-memory parallel systems (presumably because of price/performancebenefits).andP;  Equus, although a new product, has several interesting features.andO;First, it is a real multi tasking, multi-user system running on standardhardware and alongside existing UNIX systems.andP;  Second, Equus offers arelatively easy conversion path from existing code, and the ability tobalance the load dynamically makes the system much more cost-effective.andM;Martin Farncombe, after working as a research chemist, joined Logica andmanaged projects for them for several years.andP;  He was later lured by the sirenvoices of parallelism and now works for Zebra Parallel Ltd, the originatorsof Equus.andP;  He can be contacted on 016369826.andO;</TEXT></DOC>