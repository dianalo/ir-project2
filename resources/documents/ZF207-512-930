<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-512-930  </DOCNO><DOCID>07 512 930.andM;</DOCID><JOURNAL>UNIX Review  August 1989 v7 n8 p38(7)* Full Text COPYRIGHT Miller Freeman Publications 1989.andM;</JOURNAL><TITLE>The big picture. (accessing information on remote data managementsystems)</TITLE><AUTHOR>Bishop, Mitch; Wasiolek, Eric.andM;</AUTHOR><SUMMARY>In order for corporate data processing to advance, there must be away for multi-vendor data base management systems (DBMS) to becompletely accessible to all users within the organization.andO;Issues preventing accessibility include incompatible client-serverprotocols, inconsistent query languages, different data types,proprietary error codes, and divergent system catalog structures.andO;Open data access could be created by using multiple softwareversions of application code to interact with a particularvendor's data management system.andP;  Another method is to design andbuild protocols offering access to multiple data sources.andO;Pass-through gateways can also be used to get to DBMS viaproprietary servers.andP;  The solutions require more work bydevelopers to gain access to additional data sources.andP;  For userapplications to access data, they will need a single interfacethat is machine-, network- and data-independent.andM;</SUMMARY><DESCRIPT>Topic:     UNIXData Base AdministrationInformation Storage and RetrievalStructured Query LanguageAccess MethodsData ProcessingSoftware MigrationMultivendor Systems.andO;Feature:   illustrationchart.andO;Caption:   Implementation of Extended Open Data Access. (chart)Accessibility and portability using Open SQL, GCA and gatewaycomponents. (chart)User applications of Open SQL. (chart)andM;</DESCRIPT><TEXT>THE BIG PICTUREandM;If UNIX is ever to be widely used in the commercial arena, it must firstbecome a bona fide participant in corporate America's data processingenvironments, in which IBM mainframes and DEC minicomputers currently holdsway.andP;  As straightforward as this assertion is, it ushers in a host ofcomplex implications.andP;  Among them is one on which we'll focus our attentionhere: in corporate data processing environments, UNIX applications must offerso-called &quot;seamless&quot; access to information stored in foreign databases--suchas IMS, DB2, or RDB--located on remote mainframes.andM;In order to make effective business decisions, users today need access toinformation located throughout their organizations.andP;  They should be able togain this access directly from their desktop machines, whether they areconnected via a workstation, a PC, or a timesharing terminal.andP;  Yet the bulkof corporate information is controlled by data management systems supplied bymultiple vendors.andP;  Often, different hardware platforms, operating systems, ordatabase management systems (DBMSs) are implemented within a single company.andO;As a result, one department is cut off from information held by another.andO;This leads to low productivity, organizational inefficiency, and ill-informedmanagement.andM;Moreover, the fluidity of today's business environments and rapidtechnological progress require that information management strategies bemodifiable.andP;  Users do not want to be locked into using a single vendor'smachine, network, or database system.andP;  Ideally, applications and tools frommany vendros should work transparently with servers supplied by severaldatabase companies.andM;Since they know what the problem is, why don't the database companies gettogether and come up with a solution?andP;  As you might expect, the answer is notthat easy.andP;  Significant technical issues must be addressed before users canhave true plug-and-play access to data managed by different database systems.andO;These issues include incompatible client-server protocols, inconsistent querylanguages, different data types, proprietary error codes, and diverget systemcatalog structures.andP;  Let's consider each of these in more detail.andM;Proprietary Client-Server Protocols.andP;  Most relational database productsfollow a client-server model of operation:  applications (clients) accessdata by communicating with an SQL engine (server).andP;  Very often, thiscommunication is hidden from developers in a low-level protocol designed tofacilitate the transfer of queries to the server, and to return data to theclient.andP;  Problems arise because no two protocols are alike.andP;  Vendor A'sclient cannot establish communication with Vendor B's server, because VendorA's client sends information in a different order, using a message formatdifferent from the one Vendor B's server expects.andP;  Once a client applicationis built, a proprietary client-server protocol is embedded in the binary.andO;Thus, the client application becomes tied to a particular vendor's databaseengine.andM;SQL dialects.andP;  Nearly all RDBMSs support Structured Query Language (SQL), buteach vendor's SQL version is slightly different.andP;  Although an AmericanNational Standards Institute (ANSI) committee was established a few years agoto come up with an industry-standard SQL, the database industry is increasingits demands on SQL much faster than the ANSI committee is able to setstandards.andP;  Vendors routinely implement extensions to the existing ANSI SQLstandard in response to requests from customers.andP;  In addition, the semanticsof the SQL standard are not complete.andP;  While SQL syntax is well understood,any given SQL statement may still be subject to semantic interpretation.andM;The existence of incompatible SQL versions clearly has an affect onapplication portability.andP;  The bulk of today's sophisticated productiondatabase applications use embedded SQL for data access.andP;  Applications writtenfor a specific SQL dialect and used to access data in a specific databasemanagement system must continually be modified if they are to be able toaccess data across the range of SQL engines available today.andM;Incompatible Query Languages.andP;  The need for a single query language foraccessing heterogeneous databases goes far beyond the problem of SQLdialects, since users need access not only to RDBMSs, but also tonon-relational DBMSs, which don't use SQL.andP;  Many users also need access, forthat matter, to non-DBMS data sources such as file systems, where a greatdeal of corporate information is stored.andP;  In the absence of a common querylanguage, applications must use radically different access methods to readthe information they need.andM;Databse Error Messages.andP;  Not all SQL implementations are the same, then, andnon-relational query languages differ even more.andP;  Is the same true of theerror messages returned by servers to client applications?andP;  On the question,the news for developers is not good: each RDBMS supports literally thousandsof error messages, and they are not standardized.andM;This means that client applications written for one vendor's database servercannot access data managed by another's unless they are modified to handle awhole new set of error messages.andP;  To access information controlled by five orsix different servers, an application would have to handle five or sixincompatible sets of these messages.andP;  Adding such capabilities to anapplication is not a good use of programmer time.andM;System Catalogs.andP;  The system catalog is that portion of a DBMS that describesthe structure of the database--what tables, fields, and columns it contains,and what the data looks like.andP;  Relational database applications access thesystem catalog primarily to avoid the necessity of hard-coding the &quot;look andfeel&quot; of the data inside applications themselves, so that the structure ofthe data accessed may change without affecting the applications.andM;As you may have guessed by now, each DBMS vendor's system catalog is unique.andO;The names, structures, and fields used in catalog tables are not consistentacross RDBMSs, and non-relational DBMS catalog structures are radicallydifferent.andP;  Many vendors choose to use an object-oriented representation offorms/frames within the data dictionary, generally in a proprietary format.andO;This makes it quite difficult to port applications from one DBMS to another.andM;Not surprisingly, there have recently been a number of attempts to addressthe larger issue of open data access.andP;  A few of the more noteworthy aredescribed below.andM;Multiple Software Versions: The Brute-Force Method.andP;  It is certainly possibleto build multiple versions of application code, each tailored to interactwith a particular vendor's data management system.andP;  This approach has beentaken by Unify Corp., Information Builders Inc., and Progress Software Corp.andO;It provides customers with wide availability on a large number of platforms,if the vendor can afford the porting, testing, and support costs that go withit.andP;  While some vendors may have solved the access problem for theircustomers this way, in so doing they've created a nightmare for themselves.andO;The same executable cannot access data located in different sources.andP;  Thesevendors are therefore spending a good portion of their time porting,modifying code, and testing in order to support a wide range of incompatibleDBMS products.andP;  It's a risky venture at best.andM;Vendor-Specific Client Access to Remote Data.andP;  Some companies have decided todesign and build their own protocols as a way of offering access to multipledata sources from a specific client platform.andP;  CL/1, developed by NetworkInnovations (a wholly owned subsidiary of Apple Computer), is an example ofthis approach.andP;  CL/1 offers Macintosh users access to a predefined set of SQLdatabases, but does not, however, solve the critical problems associated withdifferences in system catalogs.andP;  Because CL/1 is engineered for a specificset of data management systems, it has to be modified to allow access to newones.andP;  Furthermore, CL/1 client applications are not widely available outsideof the Macintosh environment.andM;&quot;Pass-Through&quot; Data Gateways.andP;  With this approach, client applications can infact get to other DBMS systems, but only by attaching themselves to aproprietary server.andP;  Good examples of this architecture are Sybase's OpenServer and Oracle's SQL*Connect products.andM;Under the Sybase scheme, a client application attaches itself to a Sybaseserver that contains a non-Sybase database procedure.andP;  The procedure holdsall the code required to access the foreign database: the error-handling,data-reformatting, and catalog-access routines.andP;  The procedure isessentially, then, a data gateway constructed for a predefined query.andP;  Thisapproach allows client applications to remain portable, because foreigndatabase code is stored in the server's procedure.andP;  It requires, however,that a proprietary server always be present, that code existing on theforeign database platform understand the procedure call, and that a verycomplicated gateway procedure be written for each foreign database.andP;  Thismethod allows data to be qualified on the non-Sybase host and down-loaded tothe proprietary Sybase server.andP;  Users are locked into using an SQL enginethat may not be their first choice for a number of reasons--performance andfeature set among them.andP;  In addition, predefined procedures mean that no adhoc querying of the foreign database is supported.andM;Oracle's gateway product, on the other hand, allows Oracle clientapplications to access a DB2 or SQL/DS database (see &quot;Rites of Passage&quot;,p.48).andP;  The Oracle approach involves hard-coding connections between clientsand foreign data managers, making the clients unportable as well as difficultto code.andP;  It allows a single client application to use different querylanguages to access different databases, rather than providing a single querylanguage to access multiple DBMSs.andP;  It offers no ability to access data innon-relational databases or file systems, and offers no common access toforeign database catalogs.andM;In summary, all of these approaches solve some of the technical issuesinvolved in transparent data access, but none of them solves all or even mostof the issues.andP;  Each requires a great deal of work on the part of developersto gain access to each additional data source.andM;If user applications are going to be able to access all the data residing indifferent formats in today's corporations, they will need to have a singleinterface that is machine-, network-, and data-independent.andP;  To meet withwide acceptance, such an interface would need to be based on industrystandards.andP;  The goal of database vendors is to offer developers the abilityto develop a single version of an application that can access any type ofdata anywhere, without any recoding (this is the meaning of transparency).andO;Another goal is to allow users to purchase a single executable that canaccess any type of data in any machine location on a network.andP;  In both cases,the major objective is to allow applications to maintain data access evenwhen data changes locations or is moved to a different type of database.andM;In its new release of the Ingres database product (Release 6), RelationalTechnology Inc. (RTI) includes three components that yield data-typeindependence for applications, and that specify a consistent data interface,a common query language, a consistent communications mechanism, andcommon-to-proprietary-construct-mapping processes (gateways) that reside onforeign database nodes.andP;  Ingres Release 6 also provides complementarylocation transparency, allowing the data-access solution to extend acrossmultiple machines and network types.andM;RTI's Open Data Access is aimed at providing two capabilities critical toinformation management in today's computer environments: data accessibilityand application portability across heterogeneous databases and file systems(see Figure 1).andM;Universal accessibility, if attainable, would mean that users and developers,by adding the appropriate database gateways, would be able to use or developapplications that could, without modification, access data in incompatiblerelational and non-relational databases and file systems.andP;  Such applicationswould be developed once and only once, and they could access data residing inany database for which a data gateway had been provided.andP;  Universalportability describes the hypothetical situation in which developers have theability to port a given application to different platforms and run them ontop of different types of databases with minimum code rewriting, thanks tothe implementation of a consistent data interface.andM;The key to open data access is data-type transparency.andP;  It is made possiblethrough the specification of a layer of data transparency--a common clientapplication interface to all data.andP;  The interface implemented by RTI includesa common query language and set of data types, a generic set of error codes,a common system catalog specification, and a consistent communicationsprotocol.andP;  All the proprietary features of underlying data managers arehidden by data gateways, which translate proprietary features into theircommon application interface counterparts--DB2-specific errors into genericerrors, for example, or IMS catalog structures into common system catalogstructures, or Open SQL to RMS-indexed file-access routines.andP;  Seen from theclient-application side, the data source being accessed always appears to bea relational database of the same type.andP;  The underlying foreign data manageralways &quot;thinks&quot; that it is being accessed by a client of its own type.andO;Without the specification of a consistent client interface to all data,data-type-independent application development would not be possible.andM;Open SQL is a query language that applications may use to access relational,non-relational, or file-system data (see Figure 2).andP;  RTI developers havecomposed the document defining this greatest common denominator of the SQLvariants used by the industry's major RDBMSs: DB2, RDB, Tandem, and the ANSILevel I Standard (SQL-1).andP;  All Ingres Release 6 products generate Open SQL,and all Release 6 tools allow for the building of Open SQL,vendor-independent database applications.andP;  Applications developers who useonly this set of SQL statements should be able to design applications thatare portable to all relational, non-relational, and file system data gatewaysthat implement Open SQL.andP;  Developers can choose to use &quot;portable&quot; SQLstatements, or to use the dialect of a particular DBMS product.andP;  While OpenSQL allows a &quot;pass-through&quot; mode to execute proprietary data managerstatements directly, application portability is lost if this mode is used.andM;DBMS products that use Open SQL and define a reasonably large set of datatypes commonly used by the industry (integer, character, floating point, andothers) are a first step toward implementing a much broader set offunctionality in the language itself.andM;A key component of the Open SQL language specification is the handling oferror messages.andP;  Using the ANSI Level II SQLSTATE error specification as amodel, developers at RTI have modified Ingres so that it supports a minimalset of &quot;generic&quot; error messages.andP;  Developers can now code applications usingthis set of about 40 messages instead of the more than 3,000 DBMS-specificerror messages that are usually supported in an RDBMS product.andP;  ForDBMS-specific error handling, each generic error message has a proprietaryerror code attached.andM;Developers can also count on the appropriate Ingres gateways to mapproprietary database error codes, providing maximum applications portabilityacross and accessibility to other databases.andM;To resolve the question of incompatible system catalogs, RTI has defined auniform set of database views for delivery with its RDBMS products.andP;  Onceapplications developers use them, all system catalogs look the same to theprogram, whether it is running with Ingres or another database system.andP;  Theseviews present a consistent look at tables, forms, columns, and entities,freeing the developer from having to know the specifics of a particular DBMS.andM;For obvious reasons, corporate MIS directors are keen on protecting theirinvestments in data stored under proprietary data management systems--be theyrelational DBMSs such as DB2, SQL/DS systems, or RDB; non-relational DBMSssuch as IMS/DB; or non-database data sources such as DEC's RMS filemanagement system or IBM's VSAM.andM;One way to provide access to proprietary data sources is to provide databasegateways, which are programs that run on a host machine that holds a foreigndatabase.andP;  The design rule RTI used in putting such gateways together wasthat application code must operate identically whether it is accessing datain a native database or data stored in a foreign format.andM;Ingres data gateways are independent processes that map consistent constructsinto the proprietary equivalents on the underlying data manager.andP;  Open SQLstatements sent by a client application to a proprietary server areintercepted by the data gateway process and translated into the appropriateproprietary access language.andP;  Open SQL statements might be translated into,for example, an RMS indexed file access routine.andP;  The proprietary server thenexecutes the access routine and returns data to the gateway process.andP;  Thegateway translates proprietary data types to Open SQL data types--a DB2gateway, for instance, translates a DB2 data type into an Open SQL data type.andO;If an error occurs, the gateway translates the proprietary error code sent bythe server into a generic error and prepends it to the proprietary error codebefore returning the error code to the client application.andM;If the client application needs access to the proprietary server's systemcatalogs, the client application accesses the common system catalog, which isthen translated into a proprietary catalog-access routine.andP;  The data gatewayalso handles all protocol conversions and message format translations betweenincoming message formats and protocols and outgoing, proprietaryclient-server protocols and message formats.andM;Differences in the query languages, data types, error messages, and systemcatalog structures used by underlying data managers are all, therefore,hidden from client applications.andP;  No modification of client-application orDBMS code is necessary to ensure access to data in radically different datasources.andM;All Ingres Release 6 products use a common protocol to communicate with eachother.andP;  This protocol, the Global Communications Architecture (GCA), is basedon the International Standards Organization (ISO) Remote Data Access (RDA)specification, which defines how client applications can access remotedatabases.andP;  Ingres application developers use GCA without necessarily knowingabout it, since it is automatically embedded into all Ingres applications atcompile time.andP;  Once an application is built, it can &quot;talk&quot; to all otherIngres products and to any other DBMS that understands GCA.andP;  As RDA gainsmore commercial adherents, the developers and users of database systems willindeed have a wider range of SQL engines and tools to choose from.andP;  GCA workstransparently on top of industry-standard OSI communications protocols suchas TCP/IP, SNA, and DECnet.andM;In reality, transparent access to heterogeneous data sources is not all thatorganizations require today--location transparency is required as well.andP;  Notonly should client applications be able to access information in multipletypes of data sources, but they should also be able to access information indifferent locations without the applications themselves having to bemodified.andP;  Data should be able to move between data sources--that is, bedownloaded from one type of database to another--without requiring thatclient applications be modified.andM;In order to accomplish these goals, RTI's Open Data Access solutionimplements three additional components:  a GCA name server, a GCAcommunications server, and an Open SQL/GCA-based distributed data manager(see Figure 3).andM;The GCA name server provides database location transparency for userapplications:  a user application specifies the database name it wants toopen, and the name server maps that name to the process ID of the Ingres datamanager, data gateway, or distributed data manager responsible for managingthe database named.andP;  If the target database is remote, the name server workswith the GCA communications server to connect to the remote database server.andM;The GCA communications server provides transparent access to remote data.andP;  Itaccepts Open SQL requests in GCA message format and forwards messages to theappropriate remote system communications server, which then, through thelocal name server, attaches and sends the message to the destination Ingresor foreign data manager (through an Ingres gateway).andP;  The communicationsserver is an independent, multi-threaded process that routes Open SQLrequests from multiple local clients to multiple remote servers usingmultiple communications protocols, and concurrently process requests comingin from multiple remote clients to multiple local data managers.andP;  It is basedon the upper four layers of the OSI reference model and is both network- andmachine-independent.andM;Are truly portable DBMS applications possible?andP;  This question is being askedwith increasing frequency by information management professionals.andP;  Just afew years ago, the answer to it would have been distinctly non-committal.andO;Today, the situation has markedly improved.andM;Challenges lie ahead, however--not the least of which is the need for DBMScompanies to cooperate on standardizing key pieces of technology.andP;  The factthat Open Data Access is based on the SQL, RDA, and OSI standards might helpspeed general industry acceptance.andP;  To the extent that other vendors'databases utilize a common method, gateways will no longer be needed.andO;However, non-relational DBMS will probably never be rewritten to comply withnew standards, so non-relational gateways will probably never disappear.andM;The good news is that companies are cooperating.andP;  Standards bodies such asthe Open Software Foundation and ISO are studying database interoperabilityissues, customers are driving DBMS vendors toward solutions, and realproducts that address many of the technical issues are beginning to appear.andO;Although it may take some time, the future for standard, portable,transparent DBMS applications looks very bright.andM;Mitch Bishop is director of marketing for UNIX-based INGRES products atRelational Technology Inc.andP;  Previously, he was director of operating systemsdevelopment at Altos Computers.andM;Eric Wasiolek is RTI's manager of distributed INGRES product marketing, withresponsibility for GCA and networking products as well as for the INGRES/STARheterogeneous distributed data manager.andM;AcknowledgementandM;Dave Simonson of RTI is the original architect of INGRES Open Data Access.andO;</TEXT></DOC>