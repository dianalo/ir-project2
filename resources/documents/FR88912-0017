<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> FR88912-0017 </DOCNO><DOCID>fr.9-12-88.f2.A1016</DOCID><TEXT><ITAG tagnum="18">National Institute of Standards and Technology</ITAG><ITAG tagnum="41">[Docket No. 80341-8133]</ITAG><ITAG tagnum="56">Approval of Federal Information Processing Standard (FIPS) 151, Posix;Portable Operating System Interface for Computer Environments </ITAG><ITAG tagnum="10"><T2>AGENCY: </T2>National Institute of Standards and Technology (NIST),Commerce.</ITAG><ITAG tagnum="10"><T2>ACTION: </T2>Announcement of Federal Information Processing StandardsPublication 151, POSIX: Portable Operating System Interface for ComputerEnvironments.</ITAG><ITAG tagnum="10"><T2>SUMMARY: </T2>The purpose of this notice is to announce that the Secretaryof Commerce has approved a Federal Information Processing Standard whichwill be published as FIPS 151. This standard has been adopted on an interimbasis to enable the Federal government to proceed with procurement actionsneeded to acquire advanced technology at the least cost to the government.The standard will enable Federal agencies to utilize the POSIX specificationin developing systems for applications portability. A FIPS adopting finalvoluntary industry specifications for POSIX will be proposed when thosespecifications are completed. The applications portability profile includedin the Appendix to this FIPS will be further developed by NIST.The written comments submitted by interested parties and other materialavailable to the Department relevent to this standard were reviewed byNIST. On the basis of this review, NIST recommended that the Secretaryapprove the standard as a Federal Information Processing Standard (FIPS),and prepared a detailed justification document for the Secretary's reviewin support of that recommendation. The detailed justification document which was presented to the Secretary,and which includes an analysis of the written comments received, is partof the public record and is available for inspection and copying in theDepartment's Central Reference and Records Inspection Facility, Room 6628,Herbert C. Hoover Building, 14th Street between Pennsylvania and ConstitutionAvenues, NW., Washington, DC 20230. This FIPS contains two sections: (1) An announcement section, which providesinformation concerning the applicability, implementation, and maintenanceof the standard, and an Appendix which provides an initial plan for developingan Applications Portability Profile in cooperation with industry and users,and (2) a specifications section (IEEE 1003.1/POSIX, Draft 12) which dealswith the technical requirements of the standard. Only the announcementsection of the standard is provided in this notice. A delayed effective date is not required for this FIPS because this standardis exempt from the Administrative Procedure Act by 5 U.S.C. 553(a)(2).</ITAG><ITAG tagnum="10"><T2>DATE: </T2>This standard is effective September 12, 1988. Agenciesmay use this standard immediately. The elements identified in the Appendixshould be considered in planning for future procurements.</ITAG><ITAG tagnum="10"><T2>ADDRESS: </T2>Interested parties may purchase copies of this standard,including the technical specifications portion, from the National TechnicalInformation from NTIS. Specific ordering information from NTIS for thisstandard is set out in the Where to Obtain Copies Section of the announcementportion of the standard.</ITAG><ITAG tagnum="10"><T2>FOR FURTHER INFORMATION CONTACT:</T2>Mr. Roger Martin, Institute forComputer Sciences and Technology, National Institute of Standards and Technology,Gaithersburg, MD 20899, telephone (301) 975-3295.<ITAG tagnum="6">Ernest Ambler, </ITAG><ITAG tagnum="4">Director. </ITAG><ITAG tagnum="34">Date: September 6, 1988. </ITAG><ITAG tagnum="85">Federal Information Processing Standards Publication 151 [date], Announcingthe Standard for POSIX, Portable Operating System Interface for ComputerEnvironments</ITAG>Federal Information Processsing Standards Publications (FIPS PUBS) areissued by the National Institute of Standards and Technology after approvalby the Secretary of Commerce pursuant to section 111(d) of the FederalProperty and Administrative Services Act of 1949 as amended by the ComputerSecurity Act of 1987, Pub. L. 100-235.<T3>Name of Standard. </T3>POSIX: Portable Operating System Interface forComputer Environments.<T3>Category of Standard. </T3>Software Standard, Operating Systems.<T3>Explanation. </T3>This publication announces the adoption of Draft12 of the Institute of Electrical and Electronics Engineers (IEEE) Standardfor Portable Operating System Interface for Computer Environments (IEEE1003.1/POSIX) as a Federal Information Processing Standard (FIPS) on aninterim basis. IEEE 1003.1/Draft 12 defines a C language source interfaceto an operating system environment. This standard is for use by computingprofessionals involved in system and application software development andimplementation. This standard is the first component of a series of specificationsneeded for application portability. The Appendix to this standard discussesthe elements needed in an Applications Portability Profile and providesa schedule for the additional specifications.<T3>Approving Authority. </T3>Secretary of Commerce.<T3>Maintenance Agency. </T3>U.S. Department of Commerce, National Instituteof Standards and Technology (Institute for Computer Sciences and Technology).<T3>Cross Index. </T3>The Institute of Electrical and Electronic EngineersStandard for Portable Operating System Interface for Computing Environments,IEEE 1003.1/Draft 12 (POSIX).<T3>Related Documents.</T3>a. Federal Information Resources Management Regulation 201-8.1, FederalADP and Telecommunications Standards.b. Draft Proposed American National Standard X3J11/87-140, ``ProgrammingLanguage C''.<T3>Objectives. </T3>This FIPS permits Federal departments and agenciesto exercise more effective control over the production, management, anduse of the Government's information resources. The primary objectives ofthis FIPS are:a. To promote portability of computer application programs at the sourcecode level.b. To simplify computer program documentation by the use of a standardportable system interface design.c. To reduce staff hours in porting computer programs to different vendorsystems and architectures.d. To increase portability of acquired skills, resulting in reduced personneltraining costs.e. To maximize the return on investment in generating or purchasing computerprograms by insuring operating system compatibility.Government-wide attainmment of the above objectives depends upon the widespreadavailability and use of comprehensive and precise standard specifications.<T3>Applicability. </T3>This FIPS should be used for operating systemsthat are either developed or acquired for Government use where POSIX-likeinterfaces are required. This FIPS is applicable to the entire range ofcomputer hardware, e.g.:a. Micro-computer systems.b. Mini-computer systems.c. Engineering workstations.d. Mainframes.<T3>Specifications. </T3>The POSIX FIPS specifications are the specificationscontained in the Institute of Electrical and Electronics Engineers Standardfor Portable Operating System Interface for Computer Environments, IEEE1003.1/Draft 12 (POSIX) as modified below. IEEE 1003.1/Draft 12 definesa C language source code level interface to an operating system environment.IEEE 1003./Draft 12 refers to and is a complement to draft ANSI standardX3J11/87-140, C Language, which is under development by Accredited StandardsCommittee X3. IEEE 1003.1/Draft 12 requires specific areas of ANSI X3J11/87-140,C Language, to complete the environment specification for portable applicationsoftware.The following modifications to IEEE 1003.1/Draft 12 Standard for PortableOperating System Interface for Computer Environments are required for implementationsof POSIX that are acquired by Federal agencies:a. A null pathname shall be considered invalid and generate an error (2.10.3,lines 894-896).b. The use of the chown() function shall be restricted to a process withappropriate privileges (2.10.4, lines 924-926).c. Only a user with appropriate privileges shall be allowed to link orunlink directories (2.10.4, lines 938-939).d. The owner of a file may use the utime() function to set file timestampsto arbitrary values (2.10.4, lines 943-945).e. The implementation shall support a value of {NGROUPS-MAX} greater thanor equal to eight (8) (2.9.2).f. The implementation shall support the setting of the group-ID of a file(when it is created) to that of its parent directory (2.10.4, lines 934-937).g. The use of chown( ) shall be restricted to changing the group-ID ofa file to the effective group-ID of a process or when {NGROUPS-MAX}andgreater;0,to one of its supplementary group-IDs (2.10.4, lines 927-930).h. The exec( ) type functions shall save the effective user-ID and group-ID(2.10.3, lines 902-903).i. The kill( ) function shall use the saved set user-ID of the receivingprocess instead of the effective user-ID to determine eligibility to sendthe signal to a process (2.10.3, lines 891-893).j. When a session process group leader executes an exit( ) a SIGHUP signalshall be sent to each member of the session process group (2.10.3 lines880-883).k. The terminal special characters defined in Sections 7.1.1.10 and 7.1.2.7can be individually disabled by using the value specified by -POSIX-V-DISABLE(2.10.4, lines 946-949; 7.1.1.10; 7.1.2.7).l. The implementation shall support the -POSIX-JOB-CONTROL option (2.10.3,lines 884-886).m. The implementation shall provide support for both the CPIO and USTARdata interchange formats (10.; Appendix D).n. Pathname components longer than {NAME-MAX} shall be considered invalidand generate an error (2.10.4, lines 940-942).o. When the rename( ), unlink( ) or rmdir( ) function is unsuccessful becausethe conditions for [EBUSY] occur, the implementation shall report the [EBUSY]errno (5.5.1.4, lines 481-482; 5.5.2.4, lines 523-524; 5.5.3.4, lines 593-594).p. When the rename( ) function is unsuccessful because the conditions for[EXDEV] occur, the implementation shall report the [EXDEV] errno (5.5.3.4,lines 593-594).q. When the fork( ) or exec type function is unsuccessful because the conditionsfor [ENOMEM] occur, the implementation shall report the [ENOMEM] errno(3.1.1.4, line 54; 3.1.2.4, lines 175-176).r. When the getcwd( ) function is unsuccessful because the conditions for[EACCES] occur, the implementation shall report the [EACCES] errno (5.2.2.4,lines 148-149).s. When the chown( ) or wait2( ) function is unsuccessful because the conditionsfor [EINVAL] occur, the implementation shall report the [EINVAL] errno(3.2.1.4, line 272; 5.6.5.4, line 857).t. The tcsetattr( ) function shall only set the parameters supported bythe underlying hardware associated with the terminal (7.2.1.2, line 502).<ITAG tagnum="21"><T4>Note: </T4>If tcsetattr( ) is called with a parameter within the termiosstructure set to a new value not supported by the terminal device fileassociated with fildes, tcsetattr( ) shall return successfully. A subsequentcall to tcgetattr( ) will return the original value of the parameter withinthe termios structure.</ITAG>u. If a write( ) is interrupted by a signal after it successfully writessome data, it shall return the number of bytes written (6.4.2.2, lines195-196).v. The write( ) function shall return ^1 and set errno to [EINTR] whenthe write( ) operation was terminated due to the receipt of a signal andno data was transferred (6.4.2.4, lines 240-242).<T3>Implementation. </T3>This standard is effective (<T3>please insert date of publication in the Federal Register</T3>). Theother elements identified in the Appendix should be considered in planningfor future procurements.a. <T3>Acquisition of a Conforming Portable Operating System Environment.</T3>Operating system environments which are to be acquired for Federaluse after the publication date of this standard and which have applicationsportability as a requirement should use this FIPS. Conformance to thisFIPS should be considered whether the operating system environments are:1. developed internally,2. acquired as part of an ADP system procurement,3. acquired by separate procurement,4. used under an ADP leasing arrangement, or5. specified for use in contracts for programming services.b. <T3>Interpretation of the FIPS for Portable Operating System Interfacefor Computer Environments. </T3>NBS provides for the resolution of questionsregarding the FIPS specifications and requirements, and issues officialinterpretations as needed. All questions about the interpretation of thisFIPS should be addressed to:<ITAG tagnum="15">Director, Institute for Computer Sciences and Technology, Attn: POSIXFIPS Interpretation, National Institute of Standards and Technology, Gaithersburg,MD 20899.</ITAG>c. <T3>Validation of Conforming Operating Systems Environments. </T3>NBS hasdeveloped cooperatively with industry a validation suite for measuringconformance to this standard. This suite will be required for testing conformanceof POSIX implementations. Requirements for testing will be announced inthe near future.<T3>Where to Obtain Copies: </T3>Copies of this publication are for saleby the National Technical Information Service, U.S. Department of Commerce,Springfield, VA 22161. (Sale of the included specifications document isby arrangement with the Institute of Electrical and Electronics Engineers,Incorporated.) When ordering, refer to Federal Information Processing StandardsPublication 151 (FIPSPUB151), and title. Payment may be made by check,money order, or deposit account. <ITAG tagnum="84">Appendix A</ITAG>POSIX, as currently defined, is the crucial first step in providing a vendorindependent interface specification between an application program andan operating system. The current definition, however, must be extendedin order to provide interface specifications for full operating systemfunctionality. These additional interface specifications must include:(1) <T3>Shell and Tools: </T3>These functions provide an interactive interfacefor users to control processing. Example: listing the files in a directory.(2) <T3>Advanced Utilities: </T3>These utilities provide additional capabilitiesand specialized functions that make users and programmers more productive.Example: full-screen editing.(3) <T3>System Administration: </T3>These functions are required to operatethe system. Example: mount a file system.(4) <T3>Terminal Interface Extensions: </T3>These functions are called by applicationprograms. They enable programs to perform interactive terminal operationsin a way that is independent of the type of terminal being used. Example:turn on attributes such as blinking characters or reverse video.POSIX, when fully extended, will provide the functionality required tosupport source code portability for a wide range of applications acrossmany different machines and operating systems. However, even the extendedPOSIX will not be sufficient to achieve portability for all applications.There is increasing recognition of the need for an architectural approachto applications portability. This recognition has come about because earlierattempts to use a language-based approach to applications portability werenot successful. Language portability is only one aspect of the problemof porting applications software from one operating system environmentto another. Applications software portability depends on additional factorswhich include:(1) Characteristics of the underlying hardware/software, (e.g. word length,input/output (I/O) architecture, processor, operating system),(2) Portability of software utilities used by the application, (e.g. database management, graphics, operating system functions, and communciations),(3) Data form, format and representation that may need to be transportedwith the software, and(4) Language implementation (compiler/interpreter/processor) includingspecific limits or subsets of the language used in programming, (e.g. magnitudeof number of subscripts and number of labels).Unless each of these factors is addressed as part of an overall architecture,the benefits of applications portability will not be fully realized.A planned Applications Portability Profile (APP) has been developed toprovide sufficient functionality to accommodate a broad range of applicationrequirements. The functional components of the APP constitute a ``toolbox'' of standard elements that can be used to develop and maintain portableapplications. A key aspect of the APP is that it is an open systems architecturebased upon non-proprietary standards. The current planned components ofthe APP are summarized in Figure 1 and described in the following paragraphs.Additional components may be added as technology changes and as Federalgovernment requirements change.Database ManagementDatabase management is an important aspect of applications portability.A growing number of organizations use a Database Management System (DBMS)to allow application programs, written in a variety of languages, to workon the same basic data. In addition, a DBMS can facilitate lanaguage independencein the design, development, and maintenance of data resources.FIPS 127, Database Lanaguage SQL, and the proposed FIPS for InformationResource Dictionary Systems (IRDS) are the initial components to meet thedatabase management requirement.Data InterchangeIn addition to the mechanism for managing data, the data itself is an importantaspect of applications portability. In many situations, the problems associatedwith porting the applications software from one system to another palesin comparison to the problem of porting the data. There are three categoriesof particular concern regarding data interchange:andbullet; Business Graphics.andbullet; Product Data.andbullet; Document Processing.FIPS 120, Graphical Kernel System (GKS) and FIPS 128, Computer GraphicsMetafile (CGM) are the initial components to meet the business graphicsrequirements. Initial Graphics Exchange Specification (IGES) is the initialcomponent to meet the requirements to exchange product data. Standard Generalized.Markup Lanaguage (SGML) and Office Document Architecture/Office DocumentInterchange Format (ODA/ODIF) are the initial components to meet the requirementsfor document processing.Network Services  There are two basic network services that should be provided:  File Management is an integral part of most applications. File managementfunctions have traditionally focused on accessing data within a local filesytem. That focus has now shifted to fucntions that permit shared accesto files in a heterogeneous environment of computer hardware, software,and networks. A standard approach to managing this shared access to remotefiles is an important aspect of software portability. Failure to provideshared access to remote files will inevitably lead to local, incompatibleapproaches that inhibit application portability.  Network File System (NFS) is the initial component to meet file managementfacility requirements.  Data Communications facilities permit interoperability among applicationsin a heterogeneous environment of computer hardware, software, and networks.The requirement to manage shared access to remote files is just part ofa larger requirement for applications software to perform its functionsin a network environment. Here again, failure to provide this functionwill inevitably lead to local, incompatible approaches that inhibit applicationsportability.  Government Open Systems Interconnection Profile (GOSIP) is the initialcomponent to satisfy the data communications requirements.User Interface  The most neglected aspect of applications software portability is the requirementto maintain a consistent user interface across all systems on which theapplication resides. The fact that the application is likely to be distributedover a heterogeneous environment of computer hardware, software, and networksmeans that the user interface facility must provide the flexibility toallow the user to interact with programs within such an environment.  The X Window System is the initial component to meet user interface requirements.Programming Languages The most emphasized aspect of applications software portability is therequirement for programming language portability from one system to another.The major problem is that programming language portability is often equatedwith applications software portability. A key requirement for programminglanguages is that a sufficient variety be included to encompass the fullrange of application requirements.  The C language binding is the initial component for programming languageinterfaces. Additional bindings will be developed for FORTRAN, COBOL, Ada,and Pascal.<ITAG tagnum="110"><C/> <H1>Function</H1><H1>Element</H1><H1>Specification</H1><ITAG tagnum="1">Operating System<D>POSIX</D><D>IEEE P1003.1.</D></ITAG><ITAG tagnum="22"> </ITAG><D>xl</D><D>IEEE P1003.2.</D><ITAG tagnum="1">Data Base Management<D>SQL</D><D>FIPS 127.</D></ITAG><ITAG tagnum="22"> </ITAG><D>IRDS</D><D>X3.138 (proposed FIPS).</D>Data Interchange:<ITAG tagnum="2">_Business Graphics<D>GKS andamp; CGM</D><D>FIPS 120, 128.</D></ITAG><ITAG tagnum="2">_Product Data<D>IGES</D><D>NBSIR 86-3359.</D></ITAG><ITAG tagnum="2">_Document Processing<D>SGML</D><D>ISO 8879-1986.</D></ITAG><ITAG tagnum="22"> </ITAG><D>ODA/ODIF</D><D>ISO/DIS 8613.</D>Network Services:<ITAG tagnum="2">_Data Communications<D>OSI</D><D>GOSIP.</D></ITAG><ITAG tagnum="2">_File Management<D>NFS</D><D>IEEE P1003.X.</D></ITAG><ITAG tagnum="1">User Interface<D>X Window System</D><D>X3H3.6.</D></ITAG><ITAG tagnum="1">Languages<D>C</D><D>X3J11 draft X3.159.</D></ITAG><ITAG tagnum="22"> </ITAG><D>COBOL</D><D>FIPS 021-2.</D><ITAG tagnum="22"> </ITAG><D>FORTRAN</D><D>FIPS 069-1.</D><ITAG tagnum="22"> </ITAG><D>Ada</D><D>FIPS 119.</D><ITAG tagnum="22"> </ITAG><D>Pascal</D><D>FIPS 109.</D></ITAG><ITAG tagnum="22"> </ITAG><D/><ITAG tagnum="81">Figure 1_Applications Portability Profile</ITAG>Schedule While NBS will continue to work with both national and international standardsorganizations to produce the needed specifications, current federal requirementsdictate immediate action. In order to meet this need NBS will adopt a seriesof specifications based on emerging national and international standards.These specifications will include interface specifications for (1) Shelland Tools, (2) Advanced Utilities, (3) System Administration, and (4) TerminalInterface Extensions, (5) X Window System, and (6) NFS. These specificationswill be added to the profile according to the following schedule: 4th Quarter FY88_Shell and Tools, Advanced Utilities, System Administration,Terminal Interface Extensions. 1st Quarter FY89_X Window System, NFS. The components of the APP represent varying stages of maturity. Some havenot been introduced into the formal standards process (i.e. X Window System),others exist only as draft standards (e.g. POSIX), and others have beenadopted as national and international standards (e.g. SQL). As these standardsmature there will be a need to update the APP to reflect the changes thatwill occur. NBS will establish a process to ensure that the APP incorporatesthe evolving (maturing) consensus of the national and international standardsactivities for each of the functional components of the APP. In addition,specifications for bindings for languages and other APP components maybe required. NBS will identify the need for these bindings and augmentthe APP as required. Both users and vendors will be included in this process through an ongoingseries of user workshops and implementor workshops which will provide forumsfor feedback and comments on the evolving APP. The user workshops willbe designed to (1) provide users with information about the progress ofdefining the APP and (2) provide NBS with input and feedback on the evolvingAPP and what priorities should be given to the various functional components.The Implementors Workshops will provide a forum in which to discuss theevolving APP with the vendors and to get feedback on the technical meritsof the proposals. These implementor workshops will be designed to ensurethat there is a general consensus on the part of vendors to commit to buildingproducts to the evolving APP specifications. <ITAG tagnum="40">[FR Doc. 88-20595 Filed 9-9-88; 8:45 am] </ITAG><ITAG tagnum="68">BILLING CODE 3510-CN-M</ITAG></ITAG></TEXT></DOC>