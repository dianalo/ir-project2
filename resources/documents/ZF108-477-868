<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-477-868  </DOCNO><DOCID>08 477 868.andM;</DOCID><JOURNAL>MacUser  July 1990 v6 n7 p238(5)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1990.andM;</JOURNAL><TITLE>Scroll your own. (adding scroll bars to Macintoshapplications)(Power Tools) (tutorial)</TITLE><AUTHOR>Matthies, Kurt W.G.; Hogan, Thom.andM;</AUTHOR><SUMMARY>Tips for adding scroll bars to Macintosh windows are presented.andO;QuickDraw and the Control Manager control scroll bars and pixelscrolling, but applications must place the window contents so thatdata scrolls correctly under the 'stationary window.' Importantdimensions include the window 'frame,' created by C functionprimitives; maximum size of the area a document's contents willoccupy; and relative 'movement' of document contents within aframe after a scroll.andP;  The scroll value, which is specific to adocument type, defines the number of pixels to scroll for eachtouch of the scroll arrow.andP;  Apple's Control Manager manipulatesscroll bars, while special code objects determine scrollparameters.andM;</SUMMARY><DESCRIPT>Company:   Apple Computer Inc. (products).andO;Ticker:    AAPL.andO;Product:   Apple Macintosh (Microcomputer) (programming).andO;Topic:     WindowingGraphical User InterfaceProgramming InstructionTutorial.andO;Feature:   illustrationchart.andO;Caption:   The window frame. (chart)After a scroll. (chart)The scroll bar. (chart)andM;</DESCRIPT><TEXT>Scroll Your OwnandM;A colleague of ours wanted to add scroll bars to his application, so hecalled and asked what routine enabled the scroll bars in a window.andP;  Heassumed that scrolling was a function supported by the Toolbox and that onceyou put the scroll bars in the window, scrolling followed.andM;Much to his disappointment, it doesn't work that way.andP;  Although thescroll-bar controls are drawn by the Control Manager, and a QuickDrawprocedure exists for pixel-scrolling an arbitrary rectangle, it's theapplication's job to place the window contents so that the data seems to moveunder the stationary window.andP;  And this is no small job!andM;If you're a first-time reader, you've just walked into the third installmentof a three-month tour of our Generic App -- &quot;the only program you'll everneed.&quot;andP;  Our original intention for this month's column was to cover Genericin greater detail.andP;  We had also planned to start you on the way to doing yourown enhancements: adding scroll bars, a window menu, and other things.andO;Instead, we've decided to devote the entire column to Mac scrollingmechanics.andM;When you write a column such as this one, you need to read around and seewhat's already been done and keep an eye out for holes in the coverage.andO;We've discovered a gaping hole in the Mac programming literature regardingscrolling, and we wonder why it exists.andP;  Perhaps it's because of the closeassociation of scrolling techniques and document display.andP;  Because mostauthors tend to follow the lead of Inside Macintosh and organize their worksto correspond to the Toolbox managers (if you read our last column, you knowthat we're also guilty of this), an interdisciplinary topic such as scrollingfalls through the cracks.andP;  The result is that all new developers have todiscover the technique for themselves.andP;  So, in keeping with the charter ofthis column, we'd like to cover this topic once and for all.andP;  This monthwe'll use Generic app to show you how to scroll both text and graphicsdocuments.andM;Fundamentals ofandM;ScrollingandM;A good place to start is with the document's content rectangle, which we callthe window frame.andP;  The frame is where the document is displayed.andP;  Generic'sprimitive makeFrameRect () calculates this rectangle by first getting theport rectangle (see Figure 1) and then subtracting the width and height ofthe scroll bars from the right and bottom sides.andP;  Incidentally, a verticalscroll bar is 16 pixels wide and a horizontal scroll bar is 16 pixels high.andO;Although there's no system constant that defines these dimensions, this factis mentioned somewhere in Inside Macintosh.andP;  So we've defined our ownconstant, kScrollBarSize.andP;  It's always a good idea to use defined constantsinstead of raw numbers: It not only makes the code more readable, but it canalso help you years later when you are making changes, a long time after youhave forgotten why 16 is subtracted from frameRect.bottom.andM;Another important dimension is the maximum size, in pixels, of the area thedocument's contents will occupy.andP;  We call this the document extent.andP;  In somecases, the document extent is known or can be calculated, as with a PICTfile; in others, such as large text files, the best you can get withoutprocessing the entire file is an estimate.andP;  Either way, you must know thehorizontal and vertical extents of your document in order to set the controlmaximum and thumb position of the scroll bar (see Figure 3).andP;  Figure 1, whichshows an unscrolled document, illustrates the relationship of thesequantities to each other.andM;Figure 2 shows the relative &quot;movement&quot; of the document contents within theframe after a scroll.andP;  An important aspect of scrolling is displaying thearea of interest in the document within the window frame.andM;In the latter two figures, we've marked the corners of the document extentand window frame.andP;  These locations are in the window's local coordinatesystem, and the relative position of the contents is managed as an offset ofthe document relative to the window frame's origin, shown in Figures 1 and 2as curScroll.andP;  In a way, scrolling is much like imposing yet anothercoordinate system on top of the local system.andP;  Remember, we have globalcoordinates -- a base coordinate system that is used primarily to locate awindow on the screen.andP;  Imposed on top of the global system is the window'slocal coordinate system, with its origin at the upper left corner of thewindow's content region (not at the upper left corner of the window, where itwas misplaced in our April '90 installment [page 245] -- we're stillblushing!).andP;  Instead of adding a third coordinate system for the scrolleddocument, it's simpler to maintain an offset, or current scroll position, forthe window.andM;Of course, when we say an offset, we are really talking about values in boththe horizontal and vertical directions, since you can usually scroll eitherway.andP;  Point is the data structure of choice for each of these variables.andP;  Forthose unfamiliar with QuickDraw, a Point is defined as typedef struct { shortv, h; } Point;andM;The current scroll is the pixel offset of the document due to scrolling.andP;  Thevalue of the current scroll is adjusted whenever the user clicks in a scrollbar.andP;  Both the horizontal and vertical current scroll values range from 0 tothe maximum scroll in each direction.andP;  The thumb of the scroll bar depictsthe current scroll position relative to the maximum scroll.andM;The maximum scroll is the total travel distance required to view the entiredocument.andP;  This value is not the document extent, as you might have guessed.andO;But the extent is part of the calculation: maxScroll.h = docExtent.h -frameWidth; maxScroll.v = docExtent.v - frameHeight; frameWidth andframeHeight are simply the width and height of the frame rectangle.andP;  And ifyou've ever wondered how to get the width of a rectangle, the formula is asfollows: width = rect.right - rect.left;andM;We'll leave the formula for calculating the height as an exercise forreaders.andM;The Document and Its ContentsandM;The document is the central data structure for Generic's windows.andP;  We'vemodified the function createNewDoc (), which has been Generic'sdocument-creation utility for the past two months, for the purpose ofdemonstrating scrolling in both text and graphic windows.andP;  The File menu'sNew selection is now a hierarchical menu with items for both text and PICTdocuments.andM;We've modified createNewDoc () so that it forks on the document type tocreate a text or PICT document.andP;  Each document is tagged with a bit in theflags field of the Doc data structure to identify its type, thus binding thecontents to the document and making you think in terms of the contents beforeyou do certain things to a document.andM;Because your documents now have different types, your rendering function, forexample, needs to know what type of document it is drawing.andP;  Generic uses amacro, ISPICTDOC, to determine the document type and then acts accordingly invarious strategic places in the code -- namely, during document creation,deletion, and rendering.andM;In creating the document, the issue is: What do you put into the window?andP;  Thegraphic document is loaded from a PICT resource, created with a drawingprogram, and written to the project's resource file with ResEdit.andP;  Fortoday's example, we chose a picture that we knew would be larger than awindow (although if you're using a full-page display, it might not be).andP;  TheToolbox utility GetPicture loads the resource into RAM and returns a handleto the data structure, as in the call picHdl = GetPicture (kDocPictID);andM;The picture handle is kept in the contentHdl field of the Doc structureduring the life of the window.andP;  Generic relies on the picture frame -- arectangle that defines the extent of the PICT resource and is part of thePicHandle data structure -- for the document extent.andP;  Generic obtains theextent in the following expression: extent = (*picHdl)-andgt;picFrame;andM;The text document contains text data in the TextEdit data structure TERec.andO;In the bottom fork of doNewDoc (), a TEXT resource is read into RAM by theuse of GetResource, the general-purpose Resource Manager routine.andP;  Here,Generic uses some TextEdith routines to create a TERec structure and load thetext.andP;  Generic then calculates the document's vertical extent by multiplyingthe number of text lines by the line height; Generic finds both of thesequantities in the TERec data structure.andM;The scrolling values -- docExtent, curScroll, maxScroll, andsoon-to-be-mentioned scrollVal -- are also document-related quantities andare kept in the Doc data structure.andP;  They are calculated when the data isbound to the document and, except for curScroll, they are never changed forthe life of the document.andM;In a full-blown application, these values would be dynamic and would changeas the document extents of the window changed.andM;Scrolling and the Scroll ValueandM;The scroll value is document-type specific and defines the number of pixelsto scroll for each touch of the scroll arrow.andP;  For a PICT document, we setthis value to 1 for a very fine scroll, but a better value for it -- one thatbalances smooth scrolling with speed -- might be 8 or 10.andM;For a text document, the scroll value is the height of the new line of textthat will be brought into view.andP;  Text documents don't scroll in thehorizontal direction in Generic; the words wrap at the right edge of theframe, so we're concerned only with vertical scrolling.andM;Generic uses an older-style TextEdit record that has only one text style forall text in the data structure.andP;  Therefore, all lines have the same height,which makes it easy to calculate the scroll value.andP;  You look up the scrollvalue in the TERec field lineHeight, as in scrollVal.v =(*docText)-andgt;lineHeightandM;Rendering the Scrolled DocumentandM;Generic's rendering functions reside in the module Display.c.andP;  To render thescrolled document, Generic uses a combination of clipping and offsetting onthe document's contents by the curScroll value before drawing them.andP;  Clippingis a computer-graphics term that you might not be familiar with, but ifyou've ever used masking tape while painting, you should be familiar with theprocess.andP;  Clipping limits drawing to a particular area, in this case, thewindow's frame.andP;  Clipping ensures that the document's contents don'toverwrite the scroll bars.andP;  Remember, they lie in the content region of thewindow.andM;Pictures are rendered with the QuickDraw procedure DrawPicture.andP;  drawDocPICT() offsets the picture frame by the inverse of the document's current scrollfor the proper effect, first setting the window's clipping region to thewindow frame.andM;TextEdit data is rendered by the TextEdit routine TEUpdate.andP;  A more thoroughdiscussion of TextEdit is required than we have space for here, but briefly,Generic offsets the destination rectangle of TERec by the document's currentscroll before its call to TEUpdate.andP;  In essence, both rendering functions usethe same technique -- offset and then draw.andP;  It's the implementation detailsthat differ with the document contents.andM;The Control ManagerandM;You need a user interface to initiate the scroll, and here's where the Systemlends a big hand.andP;  Scroll bars are controls, and you manipulate them withControl Manager routines.andP;  The scroll bars of last month's Generic wereinoperable and rendered inactive; today you'll activate them by changingtheir highlight state with HiliteControl.andM;Activation of the controls occurs during window activation, but Generic hasto abide by the manana principle and draw only during the update event.andP;  Ittherefore invalidates the scroll bars, secure in the knowledge that thesubsequent update event will render them.andM;drawScrollBars (), which is in WindowUtil.c, consolidates all the logic todraw active and inactive scroll bars correctly.andP;  Scroll bars have a minimum,maximum, and current value, and this is represented by the position of theelevator box and set with the calls SetCtlMin, SetCtlMax, and SetCtlValue.andO;drawScrollBars () is responsible for managing the task of setting thecontrol's correct values, which is based on the document's curScroll andmaxScroll, before drawing them.andM;Determining the ScrollandM;ParametersandM;Once the scroll bars have been activated, they can accept mouse-down events.andO;After doMouseDown() determines that the mouse click was in the content regionof the window (remember the scroll bars are in the content region),doInContent() calls the Toolbox Manager routine FindControl.andP;  If the mousewas clicked in a control, this routine returns true and supplies you with thehandle to the control and with the part code of the control where themousedown happened.andM;mouseInScroll() is called with the relevant information (see Example 1) andpasses control to scrollDoc() in several ways, depending on the part code.andO;Because the mouse can stay down in an arrow part, causing continuousscrolling, TrackControl is the calling agent for scrollDoc() when the partcode is an arrow.andP;  (Note that the only purpose of scrollWinProc() is toformat the call for scrollDoc().)andP;  Clicking in the page areas callsscrollDoc() directly, and clicking on the thumb also requires TrackControl,with a final call to scrollDoc().andM;Generic's scrolling is encapsulated within scrollDoc() (see Example 2).andP;  Itis passed the control handle, a part code, and a scroll-value multiplier.andO;The first lines of code in scrollDoc() find out what scroll bar it is dealingwith -- horizontal or vertical -- and set the local variables hScroll andvScroll.andP;  These values are the pixel value to be scrolled, according to thecontrol; the document's scrollVal; and the scroll-value multiplier.andP;  Afterthis initialization phase, scrollDoc() enters a scrolling loop.andM;Inside this loop, a few things happen.andP;  First, the window's clipping regionis set to the window frame, which is the area that will scroll.andP;  Because youdon't want the scroll bars to scroll up or across the window with thedocument's contents, you set the window's clipping rectangle to the windowframe before the scrolling operation.andP;  Inside the switch are some tests thathandle boundary conditions and determine the need to scroll before callingthe Power Programming Toolbox-call-of-the-month-club selection, ScrollRect.andM;Now look at how hScroll and vScroll are assigned -- negative values scrollup, and positive values scroll down.andP;  When ScrollRect has finished, itreturns a handle to the area that needs refreshing.andP;  Normally, drawing isdone inside doUpdateEvent().andP;  But, in complete violation of the mananaprinciple, a mini update handler is invoked, complete with calls toBeginUpdate, drawDocContents(), and EndUpdate.andP;  Generic needs to draw insidescrollDoc() because Mac users expect their document to continue scrollingwhile they hold the mouse button down.andP;  The loop completes by assigning thenew value to the scroll bar.andP;  Note that you need to expand the clippingregion to the size of the port rectangle so that the scroll bar's thumb canbe redrawn in its new location.andM;That's scrolling.andP;  The details are left for you to discern from the sourcecode (see the &quot;Source-Code Sources&quot; sidebar).andP;  We suggest you use a debuggerto trace through a scroll operation and see the thread of what happens andwhere it occurs in our solution to the problem of scrolling.andP;  There are manyways to approach activities with as many variables as scrolling has, and yourmethod might be better than ours.andP;  If so, we'd like to hear about it.andP;  Dropus a line, in care of MacUser.andM;For example, we could have saved a few lines of code in scrollDoc () bymoving ScrollRect and the new curScroll calculations outside the switch,arithmetically negating the values of hScroll and vScroll in one case.andP;  Thiskind of optimization sacrifices clarity for the sake of economy of space.andO;Although the practice of squeezing bytes out of the object code is the modusoperandi in commercial sweatshops, traditionally it is the final step inprogram refinement.andP;  (Some software houses actually recode key passages ofthe program in assembly language at this stage.)andM;Generic is your program (&quot;the only program you'll ever need&quot;), and you'reencouraged to make refinements.andP;  In fact, our intent is always that it serveas both generic shell and teaching tool, and no teaching is effective withoutexploration and experimentation.andP;  Never forget that the development processis cyclical, and you should thoroughly test any changes to working code.andO;Design, implement, and test -- please don't forget to test.andP;  Testing revealsbugs and therefore takes you back to where you started -- to the designphase.andM;But, while you're burning the midnight oil, pushing the envelope of newtechnology, we recommend that you temper your efforts with the wisdom of theold adage &quot;If it ain't broke, don't fix it.&quot;andM;Source-Code SourcesandM;You can get a copy of the C code for this month's column by logging on toCompuServe and typing GO MACUSER at any! prompt.andP;  If you are not a CompuServeuser, you can call (800) 848-8199 or (614) 457-8600 for more information onsubscribing.andP;  Alternatively, you can order the disk directly from us for $10by calling (800) 952-6300 and asking for Department 28.andO;</TEXT></DOC>