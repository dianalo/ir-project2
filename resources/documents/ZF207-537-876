<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-537-876  </DOCNO><DOCID>07 537 876.andM;</DOCID><JOURNAL>AI Expert  August 1989 v4 n8 p42(10)* Full Text COPYRIGHT Miller Freeman Publications 1989.andM;</JOURNAL><TITLE>The Ford Motor Company DLMS. (direct labor management system)(technical)</TITLE><AUTHOR>Johnson, Wayne P.; Woodhead, Richard; O'Brien, John.andM;</AUTHOR><SUMMARY>The Ford Motor Company Direct Labor Management System is animportant part of a multiphase manufacturing process planningsystem that is meant to help planning and production personnel inall parts of the manufacturing process.andP;  The five major goals ofthe system include standardizing process description and improvingclarity of process sheets, creating work allocation sheets,accurate estimation of nonproduct and product labor time, genericprocessing and language translation.andP;  A detailed explanation ofthe system is included.andM;</SUMMARY><DESCRIPT>Company:   Ford Motor Co. (data processing).andO;Ticker:    F.andO;Topic:     ManufacturingPlanningProcess ControlLanguage TranslationLabor CostsPersonnel Management.andO;Feature:   illustrationchartprogram.andO;Caption:   DLMS software architecture. (chart)Typical process sheet. (program)Part of the DLMS taxonomy. (chart)andM;</DESCRIPT><TEXT>The FORD MOTOR COMPANY D L M SandM;Ford Motor Co.'s Direct Labor Management System (DLMS) is one major subsystemof a multiphase manufacturing process planning system designed to assistproduction and planning personnel in all aspects of the manufacturingprocess.andP;  It will eventually support several thousand users.andP;  The ambitioussystem has profound implications for Ford; it aims to improve the assemblyline and has targeted key areas in the planning process.andP;  Its five majorobjectives include:andM;* Standardizing process description and improving process sheet's clarity:The process sheet conveys assembly information from the initialprocess-planning stage to the plant's assembly lines.andP;  Process sheets andtheir derivatives should communicate information effectively at all thestages of construction.andM;* Creating work-allocation sheets: Detailed plant-floor instructions areautomatically generated from the more abstract process sheet text.andM;* Estimating product and nonproduct labor times accurately: Product timesrepresent effort directly associated with product assembly.andP;  Nonproduct timesrepresent any indirect effort.andP;  Removing this essentially clerical task freesthe industrial engineer to analyze assembly processes.andP;  Consistent processdescriptions can help by highlighting inefficiencies.andM;* Processing generically: Process sheets are written at a fine level ofgranularity.andP;  The objective of generic processing is to provide higher-levelprocess descriptions, standardizing assembly across vehicle types.andP;  Processsheets can now be written at any level of abstraction.andP;  Instructions can bewritten in terms of the assembly workers' micromotions (such as &quot;graspscrew,&quot; &quot;position screw,&quot; and so on), or as macrodescriptions applied tocomplete vehicle subsystems (such as &quot;install brake system&quot;).andM;* Translating: Automobile production is an international effort; translatingprocess instructions into different languages involves considerable cost.andO;The standard language is designed to simplify translation and the taxonomy isstructured so it can serve as an interlingual form for all the targetlanguages.andM;SYSTEM ARCHITECTUREandM;An illustration of the system architecture is shown in Figure 1.andP;  The firststeps in system development were to identify a grammar for describingassembly processses and a standard format for writing process descriptions.andO;These were originally written in freeform English and uninterpretable bycomputer.andP;  Process sheets in the reengineered system are described with acase grammar that meets automotive assembly requirements.andP;  English assemblyinstructions can be expressed at any level of detail.andP;  Potentially thousandsof engineers with different educational levels will use this language; itneeded to clear but effective for all.andP;  Approximately 300 engineers have beentrained to use the language without significant difficulties.andM;A typical process sheet is illustrated in Figure 2.andP;  Process data falls intotwo categories: process descriptions, specified in the body of the text andin &quot;part&quot; and &quot;tools&quot; areas of the sheet, and contextual data--for example,the sheet title and vehicle and plant information.andP;  Certain word categoriesin the language have very specific semantics defined by the engineers.andP;  Verbsare associated with specific assembly actions and modified by adverbs whereappropriate.andP;  For instance, the fragments &quot;inspect,&quot; &quot;visually inspect,&quot; and&quot;manually verify&quot; have different interpretations.andP;  Important cases in thelanguage are denoted by specific tokens.andP;  Sentence 110 from the example sheetis illustrated with its constituent cases in Figure 3.andP;  Other areas of theprocess sheet containing part, tool, vehicle, and other related informationare parsed to provide extra detail and context for the sheet.andM;The DLMS system contains a large taxonomy of automotive assembly expertise,which maintains descriptions of concepts required to interpret the surfacelanguage and generate work instructions.andP;  Concepts in the taxonomy includeparts, process equipment, standard operations, and geometric workstationmodels.andP;  A portion of the taxonomy is illustrated in Figure 4.andM;The DLMS knowledge-representation system is implemented on the NIKL [1, 2]model.andP;  All concepts in the environment are described in terms of aFrame-based Description Language (FDL), a variation of the FL-languagedescribed by Brachman and Levesque.andP;  [3]  It meets all the identifiedrequirements for terminological reasoning and avoids the computationallimitations implied by FL-.andM;Concepts in the taxonomy fall into two basic categories, primitive andnonprimitive.andP;  Primitive concepts have structures that contain necessary butnot sufficient criteria for determining subsumption.andP;  This means the ststemwill never automatically infer that a supplied concept is subsumed by aprimitive concept, it must be specifically instructed to make the connection.andO;The operation concept in Figure 4 is primitive.andM;Nonprimitive concepts are assumed to be fully defined by their descriptions,which contain necessary and sufficient criteria for determining subsumption.andO;Nonprimitive concepts are defined by their roles, which describe propertiesof a concept by relating it to another concept.andP;  Roles correspondapproximately to slots in a frame and form a subtaxonomy in their own right.andO;A role is attached to a domain concept (the most general concept for whichthe role has meaning) and represents a set of fillers for each instance ofthat concept.andP;  Role restrictions constrain the set of values a filler cantake.andP;  The Secure threaded fastener using power tool concept from Figure 4 isa nonprimitive concept.andP;  A partial description of the concept and some of itssuperconcepts are shown in Figure 5 (the notation follows Moser's example[1]).andM;Concepts can also be attributed with nondefinitional information; forexample, a mini-process script can be associated with each standardoperation.andP;  Because of the precisely specified semantics of theconcept-description language, subsumption and an associated classificationprocedure can be defined.andP;  Classification involves determining the mostspecific subsumers and most general subsumees of the current concept with thetaxonomy.andM;Subsumption is intuitively clear:andM;Concept 1 subsumes Concept 2 andless;=andgt; all objects that are a Concept 2 are also aConcept 1andM;The test for subsumption used in this application is as follows:andM;Concept 1 subsumes Concept 2 if:andM;All primitive concepts that subsume Concept 1 also subsume Concept 2.andM;For each roleset of Concept 1 and the corresponding roleset of Concept 2, thevalue description of Concept 1's subsumes that of the value description ofConcept 2's roleset.andM;The DLMS classifier is incremental.andP;  As concepts are added or modified, onlyinferences required to position the current concept and reclassify anyrelated others are made.andP;  Two interfaces to the knowledge-based managementsystem are provided.andP;  A procedural interface has been developed to supportreasoning within the process sheet and user Knowledge Base Update (KBU)subsystems.andP;  An interactive graphic interface inspired by the ISI grapher [4]supports taxonomy maintenance for system development purposes.andP;  The number ofconcepts and the level of detail at which they must be represented isdetermined by the requirements of any standard operations and the need todiscriminate between them.andP;  The set of defined operations determined the&quot;granularity&quot; of the resulting plan and hence the resolution of anyassociated time estimates.andP;  The required granularity or resolution can onlybe determined with respect to the processing requirements of any downstreamclient application.andP;  System resolution increases as significant derivativesof existing operations are identified.andP;  This leads to a definition ofoperational redundancy: a concept is redundant (for the purpose of creatingwork instructions) if no associated standard operations refers uniquely toit.andP;  For example, in Figure 5, the concept nut is redundant as the onlysignificant operation refers to the concept threaded fastener, which subsumesnut.andM;THE PARSING SUBSYSTEMandM;The parser produces a structure for grammatically correct sentences andprovides information about the state of the parse to the error subsystem whenparsing fails.andP;  It was designed primarily to process syntactically correctsentences efficiently and provide for flexible grammar extension.andP;  As thesystem is transaction-oriented and no direct user interaction is possible,any errors are processed as a group later in the analysis.andM;The parser is implemented as an Augmented Transition Network (ATN).andP;  [5, 6] To improved the ATN's performance, the implementation includes a cut operatorthat eliminates backtracking in cases where traversing a specific ar clearlyexcludes all other alternatives.andP;  In addition, to eliminate the cost ofundoing actions during backtracking, the parser defers most of its actions toa second phase, which it performs after a successful parse.andP;  This secondphase generates a predicate-based representation of the parse tree used inthe element analyis subsystem described later.andP;  The parser has an associated,rule-based, error-processing component tailored to match the standardgrammar.andP;  It detects errors and suggests appropriate corrections to the user.andO;No attempt was made to implement a general mechanism, for instance, like thatproposed by Weischedel and Sohndeimer.andP;  [7]  Error-system requirements werederived by analyzing the types of errors made by process engineers duringinitial attempts to use the process-description language.andM;Data is passed to the error subsystem by the parser, which maintains a set ofstates representing the progress it has made in interpreting a givensentence.andP;  This set contains those partial shares with the greatest number ofedges.andP;  If the parser is blocked, it reconsctructs the partial parse tree foreach of these states and applies rules to select one as the most likelyintended interpretation.andP;  The error system proceeds by using information fromthe lexicon to identify case markets in the unparsed portion of the sentence.andO;These case markers are then used to hypothesize any constituent phrasesintended by the user from clues provided by the marker itself, the partialparse, and the phrase's position relative to other datum tokens (any verb ordirect object, for instance).andP;  These hypotheses are tested using theappropriate transition subnetwork.andP;  When a complete hypothesis for theintended sentence structure has been determined and validated, it istranslated into an error message and appropriate correction strategy forreturn to the user.andM;ELEMENT ANALYSISandM;Element analysis generates a set of atomic work elements representing thedirect labor content implied by the process sheet.andP;  Direct labor encompassesall actions that contribute to automobile assembly.andP;  Indirect laborconstitutes all the activities required to effect the associated directactions.andP;  The process sheet shown in Figure 2 motivates the discussion.andM;A preliminary task identifies any significant contextual data (such asvehicle, plant, and functional subsystem of the vehicle) from the processsheet and establishes plausible defaults.andP;  The sytem then interprets theparse trees supplied by the parsing subsystem.andP;  The first phase resolves anyweak or implied references in the sheet (ellipsis, intra- and intersententialanaphora, and so on).andP;  The next phase maps individual statements on the sheetinto the corresponding operation concept within the taxonomy.andP;  Considerstatement 110 from Figure 2.andP;  Objects implied by the constituent noun phrasesin the statement are identified.andP;  Appropriate prepositional phrases aretransformed into a normal noun-noun modifier form.andP;  Noun-noun modifiers areanalyzed and individual concepts identified, using a precompiled dictionarystructure.andP;  Finally, concept descriptions are created and classified todetermine the closest taxonomic concept.andM;Significant cases in the statement are identified from the appropriate tokensand mapped onto their corresponding roles.andP;  Any tools associated withstatement are identified as necessary instrumental cases.andP;  An operationdescription is constructed and classified to identify its counterpartstandard operation, and the assembly script stored with the definition ofthis operation is retrieved.andP;  The operation description created for statement100 is illustrated in Figure 6.andM;After any necessary variable bindings have been established for the script,its constituent activities are classified to identify their standardcounterparts.andP;  This process continues until a set of terminal scripts hasbeen identified, representing the direct labor content of the statement.andO;This set is then supplemented by adding any tool-handling informationrequired to undertake the operation.andP;  The set of direct allocatable elementsgenerated by statement 110 is shown in Figure 7.andP;  Redundant data is embeddedin the output to maintain contextual information when the elements are splitup into operator work allocations.andP;  The codes in parentheses represent thedirect labor times associated with each elementandM;The assembly simulator elaborates the set of direct elements by generatingany additional indirect work elements required to implement the current plan.andO;The operator needs to make these motions to move around in the workstation.andO;The first stage in this process is to identify the workstation configurationin which the assembly operation is assumed to take place from a taxonomy ofstandard configurations.andP;  Creating a workstation description from contextualinformation in the sheet and classifying it achieves this end.andP;  Each workelement is then processed in sequence to identify any datum locationsreferred to in the text.andP;  The operator is assumed to relocate between datumlocations in carrying out the assembly operation.andP;  The absence of a datumlocation for a given element is presumed to mean that the operator remains insitu for that element.andP;  Datum locations are once again identified by creatingconcept descriptions and classifying them, allowing a location to beassociated with a concept at any level of detail.andP;  Figure 8 shows thecomplete set of elements for sentence 110 of Figure 1.andM;UPDATING THE KNOWLEDGE BASEandM;The KBU is accessible to all process or industrial engineers who use thesystem.andP;  Users are allowed unrestricted access to maintain that part of thetaxonomy directly related to their assembly expertise, necessitated becauseno single source of assembly expertise exists; in fact, several hundredassembly experts contribute.andP;  The KBU is divided into two basis areas offunctionality.andP;  Process engineers maintain a common dictionary and describeparts, tools, and other assembly equipment.andP;  Industrial engineers maintainthe part of the taxonomy containing standard operations.andP;  A query facility isuniversally available to facilitate knowledge-base interrogation.andM;The DLMS system is installed within the existing Ford systems network.andP;  Anoverview of the &quot;back-end processor&quot; architecture is shown in Figure 9.andM;The Texas Instruments Multi-Processor (MP) is the hardware platform.andP;  It usesa 16-slot Nubus architecture and allows four Explorer II processors to sharea chassis and console.andP;  System software supports interprocessor communicationand individual-processor rebooting; it also allows processors to share acommon load band.andP;  Communication with the IBM host is effected via the TI SNAII processor, which acts as a 3274 terminal controller and terminal emulator.andO;The rule-based system components were implemented from Inference Corp.'s ART.andO;All other software was written in Common LISP.andM;FUTURE DEVELOPMENTandM;DLMS was developed with continuous input from process and industrialengineers.andP;  Because the database required to describe all Ford vehicles ishuge and its integrity of paramount importance, incremental deployment iscritical.andP;  The system was introduced experimentally six months ago and isbeing used by a small subset of process and industrial engineers.andP;  Part of amajor initiative at Ford, the system will continue to be enhanced for yearsto come.andM;REFERENCESandM;[1] Moser, M.G.andP;  An Overview of NIKL, the New Implementation of KL-ONE.andO;Cambridge, Mass.: Bolt Beranek and Newman Inc., 1983.andM;[2] Kaczmarek, Thomas S., Raymond Bates, and Gabriel Robins.andP;  &quot;RecentDevelopments in NIKL,&quot; in AAAI-86 Proceedings, Philadelphia, Pa., 1986.andM;[3] Brachman, Ronald J., and Hector J. Levesque.andP;  &quot;The Tractability ofSubsumption in Frame-based Description Languages,&quot; in AAAI-84 Proceedings,Austin, Texas, 1984.andM;[4] Robins, Gabriel.andP;  &quot;The ISI Grapher and the ISI NIKL Browser,&quot; internalmemo.andP;  Marina Del Rey, Calif.: USC/Information Sciences Institute, 1987.andM;[5] Winograd, Terry.andP;  Language as a Cognitive Process.andP;  Reading, Mass.:andO;Addison-Wesley, 1983.andM;[6] Allen, James.andP;  Natural Language Understanding.andP;  New York, N.Y.: BenjaminCummings, 1987.andM;[7] Weischedel, Ralph M., and Norman K. Sondheimer.andP;  &quot;Meta-rules as a Basisfor Processing Ill-formed Input,&quot; American Journal of ComputationalLinguistics 9, (3-4): 161-177, 1983.andM;John O'Brien is manager of engineering systems development at Ford MotorCo.'s body and assembly division, Allen Park, Mich.andM;Richard Woodhead and Wayne P. Johnson are knowledge engineers at InferenceCorp., Los Angeles, Calif.andO;</TEXT></DOC>