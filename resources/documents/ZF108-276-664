<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-276-664  </DOCNO><DOCID>08 276 664.andM;</DOCID><JOURNAL>IBM Systems Journal  March 1990 v29 n1 p79(11)* Full Text COPYRIGHT International Business Machines Corp. 1990.andM;</JOURNAL><TITLE>Implementing tool support for box structures. (technical)</TITLE><AUTHOR>Tagg, B.S.andM;</AUTHOR><SUMMARY>This paper describes a feasibility study to implement partial toolsupport for the graphical component of the box structuremethodology (BSM).andP;  By following the defined strategy and process,an existing computer-aided software engineering (CASE) environmenthas been extended with a customizer to provide support for the boxdefinition graphics (BDG) component of BSM.andP;  The criticalfunctions required from a CASE environment are also described toprovide the reader with a background for selecting one of thevarious implementations available today.andP;  (Reprinted by permissionof the publisher.)andM;</SUMMARY><DESCRIPT>Topic:     Case StudyComputer-Aided Software EngineeringMethodsCustomizationComputer Graphics.andO;Feature:   illustrationchart.andO;Caption:   Logical structure of existing CASE environment. (chart)Extended CASE environment. (chart)Process for implementing box definition graphs. (chart)andM;</DESCRIPT><TEXT>Implementing tool support for box structures This paper describes afeasibility study to implement partial tool support for the graphicalcomponent of the box structure methodology (BSM).andP;  By following the definedstrategy and process, an existing computer-aided software engineering (CASE)environment has been extended with a customizer to provide support for thebox definition graphics (BDG) component of BSM.andP;  The critical functionsrequired from a CASE environment are also described to provide the readerwith a background for selecting one of the various implementations availabletoday.andM;The creation of the box structure methodology (BSM) provides systemsdevelopers with a new powerful, yet straightforward, software engineeringmethodology.andP;  [1]andM;After the inception of BSM, a course of study was developed to educatesystems developers in the creation of requirements specifications [2] byemploying BSM to solve problems involving the design of systems.andP;  Theexpectation was that as more developers became trained in its use, BSM couldevolve into one of the mainstream methodologies used to describe and definesystems.andM;Since BSM is relatively new, it has had to compete against other, moreestablished methodologies such as structured analysis and structured design.andO;Sophisticated support environments were developed to provide functions forcreating and analyzing the deliverables of these methodologies.andP;  When BSM wasintroduced, it lacked a support environment that would provide functions toenter and analyze BSM data.andP;  Without such functions, the strategy forincorporating BSM in the internal development process was weakened.andM;This paper describes the study developed to create a support environment forBSM.andP;  The first section describes a strategy developed to implementcomputer-aided tool support by using a computer-aided software engineering(CASE) tool customizer.andP;  The conceptual view of a CASE environment isintroduced along with the view of an extended environment representing thenew customized functions created.andP;  With a strategy identified, the nextsection defines a process that results in the successful integration offunctions supporting the entry and analysis of box definition graphics (BDG).andO;The process begins with learning the methodology from a user's point of view,and then describes the methodology with an entity-relationship diagram sothat its components can be determined.andP;  A target CASE environment is chosen,learned, and implemented.andP;  Successful results are achieved by following thestrategy and procedures explained in the section on BSM tool results.andO;Finally, the validation process is presented.andM;The major product of this study was the successful implementation of limitedBSM support.andP;  The support is significant, since it represents a pioneeringeffort in providing BSM users with an environment that allows the creation ofBDG in an existing, integrated CASE environment.andM;BSM tool support strategyandM;Numerous papers have been written containing the evaluation of available CASEtechnology.andP;  [3-6]  The majority of these papers deal with the methodologiessupported by current CASE environments and how these methodologies can beapplied to design software systems.andP;  Few, if any, of these papers deal withthe aspect of customizing these environments to support new softwareengineering methodologies.andM;The focus on CASE tool customization has emerged recently with the creationand increased popularity of BSM.andP;  Proponents of this software engineeringmethodology were limited in its use because there was no tool support.andP;  Toaddress this problem, a strategy was defined that would lead to the creationof the required computer-aided tool support.andM;In developing this tool support, the tool builder is immediately faced with achoice between creating a stand-alone tool or extending an existing CASEenvironment.andP;  Since a critical requirement in providing tool support for BSMwas to have BSM integrated with other, more mature software engineeringmethodologies, the strategy defined here is based on extending an existingenvironment that already supported the more common methodologies anddiagramming techniques such as data flow diagrams, structure charts, andentity-relationship diagrams.andP;  Several existing CASE environments meet thiscriteria and provide customization support.andP;  Customizer[R] from IndexTechnology Corporation and SYLVA [TM] Foundry from Cadware, Inc. are two suchenvironments that were both used to validate the strategy and processdefined, although this author describes only his own use of the IndexTechnology Corporation products.andM;Extending an existing CASE environment.andP;  The strategy defined here revolvesaround creating extensions to an existing environment.andP;  To successfullyintegrate a new methodology, the tool features that must be addressed aremenus, entity support, relationship support, screens and data capturing, andmethodology rules support.andP;  Each of these features is addressed in thispaper.andM;The logical structure of an existing environment is depicted in Figure 1.andP;  Inthis environment, users access menus to create deliverables (e.g., graphs) ofthe various methodologies supported.andP;  The user also follows the built-indefinitions that determine how the methodology is to be used, how itscomponents (or entities) are stored in the environments dictionary, and howthe methodology constructs are related.andM;Figure 2 depicts an extended CASE environment.andP;  New methodology support hasbeen added and the environments dictionary has been extended to allow forcreating and storing instances of entities defined for the new methodology.andO;Additionally, new relationships have been defined which allow a user tocreate and store links between previously existing methodologies and thenewly defined methodology.andM;The paper next addresses the process required to effectively implement theextended environment strategy.andM;BSM tool support proceduresandM;Figure 3 illustrates a process consisting of five basic procedures that havebeen followed to successfully implement BDG in an existing CASE environment.andO;These are now discussed.andM;Learn the methodology.andP;  There are several major areas that should be ofprincipal consideration in supporting a new methodology within an existingenvironment.andM;The goal of learning the methodology to be implemented requires one to beable to identify the entities and relationships which make up themethodology.andP;  By identifying the entities and relationships, the tool builderwill have, in effect, developed a scheme to be used in actually implementingthe methodology.andP;  The entity-relationship diagram for BSM shown in Figure 4provides an example of how this helps in learning and understanding BDG.andM;Most of the steps and procedures described are independent of whichenvironment has been chosen for implementation.andP;  Past experience has shownthat learning the methodology may take as much as 80 percent of the timerequired to implement tool support for the methodology.andP;  The remaining timeis involved with learning about a particular environment and itscustomization functions.andM;An important step in developing tool support is to completely understand howthat methodology is used.andP;  This involves reading available literature on amethodology such as box structures and actually using it to address a sampleproblem.andP;  [1,2]  The tool builder can then determine the effect of automatingthe methodology using the tool support.andP;  Most of the reference materialswritten on methodologies include examples that show the reader how to applythe methodology.andP;  It is important for the tool builder to follow theseexamples, since they will provide insight into ways the methodology has beensuccessfully applied and where tool support is most required.andM;While using the new methodology, tool builders will develop ideas on how theythink it should be implemented in conjunction with understanding how thechosen CASE environment supports its standard set of methodologies.andP;  In thiscase, BSM diagramming techniques need to be studied to determine how theymight be used in conjunction with data flow diagrams, entity-relationshipdiagrams, and data modeling.andM;Identify the components.andP;  Once it is learned how BSM is used to describe asystem, the tool builder must now develop an underlying understanding of whatthe components of BSM are and how they relate to one another.andP;  The mostefficient method of doing this is to create an entity-relationship diagramfor BSM (see Figure 4).andP;  The following describes the preliminary work todefine the entity-relationship diagram.andM;There are two basic types of entities in a software engineering methodology.andO;The first type, a simple entity, cannot be decomposed and is completelyatomic.andP;  The second type, complex entities, are those which can be thought ofas containing or being composed of one or more simple entities.andM;A study of BSM produced this list of simple entities:andM;* Black boxandM;* State boxandM;* DecisionandM;* StimulusandM;* ResponseandM;* State-inandM;* State-outandM;Further study determined that BSM consists of the following complex entities:andM;* Black box diagramandM;* State box diagramandM;* Clear box diagramandM;The next step is to determine the relationships between these entitiesallowed by the definition of BSM.andM;Two important types of relationships are defined: The contains relationshipindicates that a complex entity can contain (or be composed of) anotherentity.andP;  The explodes-to relationship indicates that an entity (of eithertype) may be described in further detail by another entity (usually a complexentity).andP;  Given these relationships, we determined that BSM is made up of thecontains relationships shown in Table 1.andP;  BSM also allows the explodes-torelationships shown in Table 2.andM;These core relationships define BSM and are the minimum relationships whichmust be supported to adequately aid in the creaton of BDG diagrams.andP;  Otherrelationships may be created which relate entities of BSM to entities ofother methodologies.andM;Choose a target CASE environment.andP;  The topic of choosing a CASE toolenvironment has been covered in many papers that also describe how to matchan implementation with the user's methodology needs.andP;  Since this paper dealswith CASE environment customization, the focus here is on requirements thatmust be fulfilled to be able to quickly add new methodologies to anextendable environment.andP;  The following paragraphs discuss a required list offunctions that should be considered in addition to the basic commonfunctions.andP;  Each required function includes a brief description of theaspects of the environment that it affects.andM;This list of functions is not meant to be conclusive, but should give thereader an idea of the critical aspects of an environment that should becapable of being customized.andP;  The list can then be used to compare differentCASE environments.andM;Standard set of methodologies.andP;  Environments should contain a standard set ofmethodologies that include support for data flow, control flow, and modeling.andO;This allows tool builders to spend their time enhancing these standardmethodologies or creating new methodologies not in the standard set.andP;  Theenvironment should allow the user to create relationships between existingmethodology support and new methodology support created as a result ofextending the environment.andP;  These relationships can then be followed to tracethe transformation of information described.andM;Creation of new entities and shapes.andP;  To create tool support for newmethodologies, the environment must allow tool builders to define newentities to the dictionary that the environment maintains.andP;  The new entitiesthat are created should have the same support that any existing entities(included in the standard set of methodologies) might have.andM;The environment must support the creation of user-defined shapes that willrepresent the physical attributes of the entities that they have defined.andO;Primitive shapes should be provided to the tool builder from which to makesimple modifications and create customized shapes and symbols.andM;Screen and menu customization.andP;  Screen customization that capturesinformation is a necessary function.andP;  Tool builders should be able to usefunctions of the environment to alter the content and format of any screenused by the tool.andP;  Additionally, the environment should allow the creation ofany new screens required by the introduction of new methodologies.andM;Menu customization must be allowed.andP;  The environment should also allow theuser to create new menus, menu hierarchies, and chains of menus and screens.andO;Tool builders should be given functions that allow them to view the existingmenu hierarchies and change them to fit their requirements for newmethodologies and extensions to existing methodologies.andM;Analysis extendability.andP;  A critical function of any environment is theability to analyze the dictionary elements created as a result of using theenvironment.andP;  This type of analysis involves using the methodology rules tocheck for completeness, accuracy, and consistency.andP;  Analysis can becategorized into two types, static analysis and dynamic analysis.andM;Analysis consisting of rules that check the usage of the methodology, that isperformed after the methodology has been used, and occurs after the toolsdictionary has been populated with design information is called staticanalysis.andP;  These rules are invoked by users whenever they decide that theyhave a sufficient level of information to begin verification.andP;  Invocation ofthese rules takes place outside of the diagram editing environment, usuallyby the creation of a report.andP;  A user-definable query capability should beprovided by the environment to allow users to generate reports that meettheir unique needs.andM;Static analysis and dynamic analysis can have the same rules.andP;  Thedistinction between the two types of analysis is in the way that the rulesare invoked.andP;  With dynamic analysis, the environment parameters determinewhen to invoke the rules that evaluate the correctness of what has beenentered.andP;  This would allow the identification of an error as it was made,such as in the diagram editing environment.andP;  For an environment to supportthe customization of dynamic analysis rules, functions must be provided tothe tool builders, thereby allowing them to create and change rules for newor existing diagrams and components of diagrams.andM;Migration of customized product.andP;  Existing users of the CASE environment mustbe given a simple migration path to utilize the new features and functions ofany new customized versions.andP;  The environment should not require the user ortool builder to write additional functions to perform any migrations.andM;As tool customizers become increasingly popular, more and more uniqueversions of customized environments will be developed.andP;  Since some of theseenvironments will have features and support that others do not have, therequirement to merge the various versions becomes critical.andP;  Additionally,integration with existing tools is a necessary function.andP;  The CASEenvironment should employ an architecture that fosters enabling theenvironment to allow users to invoke their own functions and tools.andP;  A primeexample of this would be the support for allowing a PC-to-hose communicationproduct to remain active while the CASE environment is running.andP;  Thisprovides the user with the capability of switching easily to the host sessionand performing functions on the host.andM;Printing support.andP;  Support should be provided for creating embedded fileswhich can become part of large design documents.andP;  New graphs should have thesame workstation printing support as graphs from the standard set ofmethodologies found in the environment.andP;  Diagrams and other dictionaryelements should be capable of being exported from the environment in a formatwhich can be converted and printed on a host-connected page printer.andP;  Thedictionary should allow a fast easy way of exporting dictionary elements tosupport tool builders in writing their own functions to export the elements,transfer them to the host, and transform them to the required printer format.andM;Programming interface.andP;  No environment can anticipate all the possible waysin which users will want to access and use their design information.andP;  Toallow for customized access to the design information in the dictionary, aprogramming interface is required.andP;  This programming interface would definefunctions and methods for retrieving stored information, such as instances ofnew and existing entities.andM;Learn the target CASE environment.andP;  Once an environment has been chosen, thetool builder must become familiar with the end-user functions provided.andP;  Thisinvolves learning the environments dictionary capabilities, standardmethodology support, user interface functions, and menu structure.andP;  Thefollowing describes these areas in further detail.andM;A most important aspect of an environment is the support provided to captureand maintain information in a dictionary.andP;  Characteristics of a dictionaryinclude entity definition where the components of a methodology must bestored as distinct entities that have attributes and relationships alsomaintained in the dictionary, and entity reporting where the dictionaryshould allow the retrieval of the attributes and relationship information.andM;The tool builder must understand the level of support provided for thecreation and maintenance of entities.andP;  To do this, the tool builder must usethe functions of the environment that support entity definition.andM;Most environments have a standard set of methodologies that cover some subsetof the software development life cycle.andP;  For tool builders to implement a newmethodology in the environment, they myst first understand the existingmethodologies and how they are meant to interact and relate to each other.andO;This includes understanding which existing methodologies should connect andtie into the new methodology.andP;  Additionally, the tool builder should note anysimilarities between existing and new methodology constructs, so that aspectsof these constructs can be reused in the new methodology.andM;The user interface defines the look-and-feel of the user's interactions withthe environment.andP;  Tool builders should become familiar with the followinguser interface related functions:andM;* Zooming allows the user to physically view a graph at different levels ofdetail.andM;* Scaling allows the user to change the size of the shapes that represent amethodology construct.andM;* Line drawing represents connections, inputs, or outputs and how those linesare redrawn whenever the methodology construct to which they are connected ismoved or deleted.andM;* Text labeling allows the user to enter and view text associated withmethodology constructs (for example, the user-defined name of a shape).andM;* Scoping allows the user to select methodology constructs to make them thefocus of an operation, such as moving or deleting.andM;* Delete verification allows the user to be prompted for verification beforea delete is actually performed.andM;In general, any new methodologies will have a user interface similar to thestandard one provided by the environment.andP;  Trade-offs and shortcomings in thestandard methodologies will be present in any new methodology implementedwith the chosen environment.andM;The menu structure of the environment defines the menus from which theenvironments functions are selected.andP;  The tool builder needs to understandall of the menus which could be affected as a result of the addition of a newmethodology.andP;  Additionally, the tool builder may wish to rearrange theexisting menu structure.andP;  This would allow tool builders to replace or deleteexisting menu entries for functions of the environment that their targetusers do not use.andM;Implement the methodology.andP;  At this point in the process, the tool buildershould have a documented description (by following the previous procedures)of the new methodology.andP;  The tool builder will also have an understanding ofthe capabilities of the environment selected.andP;  With this information, thetool builder can then begin to implement support for BSM using thecustomizing functions of the CASE environment.andM;So far, the procedures in this process have not been specific to theselection of a particular environment.andP;  During this step, however, the toolbuilder will begin to use functions which are specific to each individualenvironment implementation.andP;  The tool builder will begin by following thedocumentation provided by the environment and must determine exactly how todefine the following types of information: menus and menu flow, entitydefinition, relationship definition, physical definition of entities andrelationships (shapes), data capturing screens and their flow, andmethodology rule enforcement.andM;Existing CASE environments that provide customization have that functiondisjoint from the actual end-user functions.andP;  This prevents the user fromcreating unvalidated versions of tool support for the methodology.andP;  Once animplementation is created and tested, the last step is to validate the newtool support.andP;  This includes using the newly created tool to enter andanalyze a sample problem.andP;  While this can be done by the tool builder, it isbest to have the validation step performed by another group, such as oneresponsible for educating new users of the methodology.andP;  It is alsobeneficial to include people from the user organization who may haveapplication-specific insight into how the methodology will be used.andP;  As aresult of validation, the implementation may require changes to themethodology to make it more amenable to computer-aided tool support.andM;BSM tool resultsandM;By following the strategy and procedures define in the previous sections,computer-aided tool support for the box definition graphics component of thebox structure methodology was created.andP;  This section describes this toolsupport and explores its current and future use.andM;Using ab existing tool environment.andP;  A commercially available vendor toolenvironment (Excelerator [R+ and Customizer) was utilized to create the BSMtool support described in this paper.andP;  The customizer component of the toolenvironment (Customizer) enabled the creation of new functions required forBSM, and the run-time product (Excelerator) was then used to test the newlyadded functions.andM;The principal reason for choosing an existing CASE environment for thisexercise was the need to quickly create prototype BSM tool support andevaluate its impact on increasing the effectiveness and acceptance of themethodology.andP;  Since the BSM user community required immediate tool support,creating a specific stand-alone BSM environment was not an option.andP;  Bycustomizing an existing CASE toool environment, a prototype could bedeveloped quickly and different versions of the BSM support could be comparedto determine which version best supports the methodology.andP;  Additionally, byusing an available environment, several distinct advantages are obtained.andM;One advantage with this strategy is the ability to integrate BSM with othermethodologists.andP;  For example, by integrating BSM support in Excelerator,users could use the entity-relationaship support to createentity-relationship diagrams for their system.andP;  Following this exercise theycould then creaate box definition graphs that could be linked to theentity-relationship diagrams.andP;  This would provide the users with two powerfulviews of their system, with the connections between these views maintained bythe tool environment.andP;  With this strategy, the BSM data are stored in thesame dictionary as the data created from using other methodologies.andP;  Thisallows the user to reuse this information in the creation of graphs.andO;Additionally, the information defined in the graphs can be reused in othermethodologies.andM;Another advantage is the seamless environment that is presented to the user.andO;When the CASE tool user sees the BDG support, it looks and feels like thesame support provided for the other methodologies in the tool set.andP;  Thiscommon user interface provideds a large degree of productivity since the userof BDG does not have to learn a new interface to be able to enter BDG data.andM;Not all of the advantages of this strategy are tied directly to BSM.andP;  Thefact that Excelerator is an established tool with a large user community isalso an advantage.andP;  This wide user acceptance means that there is a large setof potential users who are already using the methodologies supported byExcelerator with help and installation support in place.andP;  Additionally,classes are available that educate the new Excelerator user about the userinterface and base dictionary support.andM;Excelerator with BSM.andP;  The following paragraphs describe the variouscomponents of Customizer and how they were used to create a customizedversion of Excelerator that supports the entry and analysis of box definationgraphs.andM;Defining the BSM shapes.andP;  Each of the simple entities of BSM has a physicalshape associated with it.andP;  These shapes were defined in the document whichintroduced BSM.andP;  [7]  One of the first steps in creating a customized versionof Excelerator is to define these shapes using the Customizer shape editorthat supports the creation of customized shapes used to represent theentities of a graphical methodology.andP;  With the exception of a diamond shapefor the decision entity, the shapes corresponding to the other BSM entitiesare simple boxes.andM;Defining BSM entities and relationships.andP;  Most of the work defining entitiesand relationships utilized functions of the Customizer system dictionary.andO;Excelerator menus were extended to include options for box structuresconstructs.andP;  This includes allowing the user to choose to work with blackbox, state box, and clear box diagrams from the main menu.andP;  Additionally, newmenus were created for each of these types of diagrams containing theconstructs available for use in that diagram.andP;  Other Excelerator menus werealso extended to include the BSM entities and relationships.andP;  An example ofthis would be the menus that allow the exporting of Excelerator data.andM;The Excelerator dictionary (XLDictionary) was extended to include thedefinition of the entities described during the &quot;learn the methodology&quot; phaseof the procedures.andP;  These entities were defined and, where appropriate,matched to shapes created with the shape editor.andP;  The black box, state box,and decision entities all had corresponding shapes.andP;  The stimulus, response,state-in, and state-out entities were defined with the Customizer asconnections, with stimulus and response being represented by straight linesand state-in and state-out represented by dotted lines.andP;  XLDictionary wasalso extended to include the definition of the relationships.andM;The contains relationships were created implicitly by allowing the entitiesto be available on certain menus.andP;  The explodes-to relationships were createdusing a standard Customizer explodes-to screen.andP;  This allowed explodes-torelationships to be created in two directions, from BSM to othermethodologies and from other methodologies to BSM.andM;Validation with methodology educators andandM;potential usersandM;After the extended version of Excelerator was created, a process wasperformed to determine the validity of using the tool to create boxdefinition graphs.andP;  To maximize the effectiveness of this process, arepresentative from the area responsible for educating developers in the useof BSM and representatives of potential users of the new BSM support wereincluded to ensure that the new tool environment not only supported themethodology from a theoretical view but also from a practical view.andM;At the core of the validation process was a real life problem for which boxdefinition graphics had already been created without the use of a CASE toolenvironment.andP;  [2]  The problem was represented in the extended environmentusing the newly created tool (Figure 5) and the computer-assisted BSM supportwas then analyzed and changed to more closely match the methodology and toimprove on its ease of use.andM;Once the customized Excelerator prototype had been validated, education,tool-usage procedures, and online help text was then developed.andP;  Theseprocedures were developed in a cooperative effort between the arearesponsible for methodology educaton and a user representing the potentialuser community.andM;Finally, the customized Excelerator environment and the education materialwere successfully used on a pilot project for a computer-integratedmanufacturing system being created by the IBM Application Solutions Division.andM;What was learned.andP;  Several important results were derived from the creationof tool support for BSM.andP;  Most important was the validation of the strategyof using a tool customizer to quickly create effective tool support for BSM.andO;The steps involved in implementing BSM with a tool customizer took onlyseveral days, once the strategy and procedures were define and followed.andO;After the methodology had been mastered, the time to create differentversions of tool support was minimal, providing the opportunity to choose thebest implementation.andM;Since BSM was a new methodology that had not been used extensively, there wasno definitive example or precedent detailing its use.andP;  This became apparentin the development of the entity-relationship diagram for BSM.andP;  Whileperforming this part of the process, it was evident that the availableliterature was lacking in helpful examples.andP;  To solve this shortcoming, anarea responsible for technical education assisted in the determination ofthose decisions in tool support resulting in the best tool implementation.andM;When questions arose regarding tool support for BSM, they usually originatedfrom an incomplete or inaccurate understanding of the methodology.andP;  From thiswe learned that the most important step of the procedure is learning themethodology.andP;  During this step it was very important to get the experts inthe methodology involved to ensure that any ambiguities in the definition ofthe methodology were clarified and that a solution was agreed upon.andM;Another outcome of this study was the familiarity gained with toolcustomizers.andP;  It was learned that these customizers have extensivecapabilities, allowing almost every aspect of the CASE tool environment to betailored.andM;Having succesfully implemented tool support for BSM, other methodologies arenow being considered for implementation.andP;  THese methodologies could beincluded in the same CASE tool invironment as was BSM support, allowingpotential users more options in choosing methodologies that match theirproblems and work well together.andP;  An example of this is the current study todevelop support for the intergrated computer-aided manufacturing definitionmodel (IDEFO) [8] Methodology.andP;  This methodology is used to model enterprisedata and functions and can be used in conjunction with BSM.andM;ConclusionandM;Development of computer-aided tool support for new software engineeringmethodologies can be achieved quickly and efficiently once al strategy andset of procedures is developed and followed.andP;  Most of the tool builder's timeis invested in becoming familiar with the methodology and a CASE environmentto support it.andP;  Implementing a new mehodology is actually the moststraighforward task and takes the least amount of effort.andM;The available tool customizers evaluated are both powerful and easy to use.andO;By choosing to create tool support for BSM in existing environments, severalimplementations of BSM can be created, reviewed, and validated in sshortperiod of time by following the procedures described in this paper.andP;  As toolsupport for BSM matures, the methodology may increase in popularity andacceptance, allowing it to become more widely used in the developmentcommunity.andM;The tool support that was described in this paper (Excelerator with BSM) iscurrently being used internally in IBM to develop systems using the boxstructure methodology.andM;AcknowledgementsandM;The author would like to thank Jack Odom, Len Marchese, Bruce Sicherman, andJanet Slyman for their roles in the work described in this paper.andP;  a specialthanks to Jay Friedman for his tireless and careful editing to the originalversion of this paper.andM;Customizer and Excelerator are registered trademarks of Index TechnologyCorporation.andM;SYLVA is a trademark of Cadware, Inc.andM;Cited referencesandM;[1.] H. D. Mills, R. C. Linger, and A. R. hevner, &quot;Box Structured InformationSystems,&quot; IBM Systems Journal 26, No.andP;  4, 395-413 (1987).andM;[2.] J. E. Odom, &quot;Using Box Structures for Definition or RequirementsSpecifications,&quot; IBM Systems Journal 29, No.andP;  1, 59-78 (1990, this issue).andM;[3.] P. Judge.andP;  &quot;Support Stage for Analysts (CASE Tools Survey),&quot; SystemInternational (Surrey, England) 17, No.andP;  3, 37-42 (March 1989).andM;[4.] R. J. Norman and J. F. Nunamaker, Jr., &quot;Integrated Devellopments:Environments: Technological and Behavioral Productivity Perceptions,&quot;Proceedings of the Twenty-Second Annual Hawaii International Conference onSystem Sciences, Vol.andP;  II: Software Track, IEEE Computer Society Press(1989), pp.andP;  996-1003.andM;[5.] P. N. Robillard, &quot;On the Evolution of Graphical Notations for ProgramDesign,&quot; ACM SIGSOFT Software Engineering Notes 14, No.andP;  1, 84-88 (January1989).andM;[6.] C. R. Necco, N. W. Tsai, and K. W. Hogelson, &quot;Current Usage of CASESoftware,&quot; Journal of Systems Management 4, No.andP;  5, 6-11 (May 1989).andM;[7.] H. D. Mills, R. C. Linger, and A. R. Hevner, Principles of InformationSystems Analysis and Design, Academic Press, Inc., New York (1986).andM;[8.] &quot;Integrated Computer-Aided Manufacturing Final Report: IDEFO FunctionalModeling Manual,&quot; U.S.andP;  Government Contract No.andP;  F33612-73-C-5158, SOFTECHInc., Waltham, MA (January 1981).andM;Bradley S. Tagg  IBM Enterprise Systems Division, P.O. Box 700, Suffern, NewYork 10901.andP;  Mr. Tagg is a staff programmer who designs and implements IBMComputer-integrated manufacturing (CIM) systems.andP;  He graduated from OhioState University in 1982 with a B.S.andP;  in computer and information science,and joined IBM in 1984 as a programmer.andP;  He has worked on a variety ofdevelopment assignments, including IBM internal computer-aided softwareengineering (CASE) and CIM systems.andO;</TEXT></DOC>