<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> WSJ880122-0161 </DOCNO><HL> Computer Glitch: Patching Up Software Occupies Programmers And Disables Systems --- Companies' New Applications Run a Year Behind Plans And 100% Over Budgets --- New Generation of Language </HL><AUTHOR> Paul B. Carroll (WSJ Staff) </AUTHOR><SO> </SO><IN> EDP </IN><DATELINE> NEW YORK  </DATELINE><TEXT>   When catastrophe strikes in the middle of the night at a major corporation, the guy who usually gets rousted out of bed isn't the chief executive. It is the jargon-spouting young fellow with the short-sleeved shirt and the pocket protector who carries a beeper everywhere.    He is so vital because the computer software he maintains keeps blowing up, threatening to keep paychecks from being issued or invoices from being mailed. He must repeatedly ride to the rescue night and day because the software, altered repeatedly over the years, has become brittle. Programming problems have simply gotten out of hand.    Corporate computer programmers, in fact, now spend 80% of their time just repairing the software and updating it to keep it running. Developing new applications in this patchwork quilt has become so muddled that many companies can't figure out where all the money is going.    Corporate America spends tens of billions of dollars a year developing software to offer new services, manage the company better or simply save the company money through automation. But the breakdowns and the complexities of developing new programs can mean costly delays that can give competitors a huge advantage.    Productivity problems even restrain the growth of the computer hardware industry; more computers aren't needed if the software for them is lacking.    &quot;Whoever solves the problem has found the Holy Grail,&quot; says James Davis, a marketing executive at Sun Microsystems Inc., a maker of workstations.    It won't happen soon. As corporations have loaded task upon task into their central computers, the systems have become so complex that programmers have become specialists in putting out fires and have been hampered in developing new applications. A decade ago, when computer power was scarce, programmers could concentrate on refining programs to make them work as efficiently as possible. Now, there are hardware and speed to burn, but the programmers are overwhelmed.    Software projects in progress are typically 100% over budget and a year behind schedule, according to Edward Yourdon, a New York author who writes on the subject. When projects are completed, programmers sometimes find they are already obsolete or unwanted by the departments that requested them.    Computer departments are so far behind in their work that it would take many two to three years to catch up on the software work even if no further requests were made to them.    James Martin, a consultant and author based in Bermuda, says several airlines suffered setbacks because they took too long developing reservation systems for travel agents. Travel agents gave most of their business to American and United airlines because those carriers first produced systems that let the agents make reservations through central computer operations, saving the agents time and money. American, in fact, now makes more money from its travel-service computer-booking operations than from its airline business. United and American also benefited because, at least initially, their systems gave preferential treatment to their own flights.    Peter Levine, a consultant with Gartner Group Inc. in Stamford, Conn., says many mutual-fund managers lost out during the October market turmoil because they failed to have computer software that would let them cross-check the customer files of all their funds to try to prevent big withdrawals. The managers wanted to suggest that worried customers merely transfer the funds, say, from stocks to bonds rather than liquidate their holdings and take their money elsewhere. Fidelity Investments, with such software in place, won big as a result, Mr. Levine says.    Manufacturers Hanover Trust Co. initially proceeded slowly on software to track the bank's global debt exposure. The project, begun in 1981, will let the bank determine within minutes how much all its various operations have lent to a certain institution, to institutions in a given country or to a region. After the Latin American debt crisis surfaced and the bank's heavy exposure there prompted worries about a run on the bank, the need for speed became painfully obvious, and work has proceeded apace. But the project is just now being implemented.    Valley National Bank in Phoenix, Ariz., was delayed more than two years in beginning work on automating the administration of safe-deposit boxes. Now that the system is complete, Larry Prout, the manager of the bank's development support center, estimates that the software saves a third of an employee's time at each of the bank's 250 branches.    Bad management is blamed for much of the productivity problem. George Mayo, the director of information-systems technology at Eastman Kodak Co., says he once worked at another company on a lengthy project that did just what it was supposed to. &quot;But in the meantime,&quot; he says, &quot;management changed, and the new management simply didn't want the system.&quot; Data-processing executives say that happens all the time.    A. Donald Rully, who is in charge of International Business Machines Corp.'s internal software development, says managers outside the computer operations at most companies would be amazed to find how little correlation there is between their goals and the way the computer departments are spending their money.    Besides management problems, confusion also develops in data-processing departments because programmers have written computer code without documenting how they are approaching the problem; the poor soul patching up a problem 10 or 20 years later, after the initial programmer is long gone, is out of luck.    Ken Hamilton, a senior vice president at Manufacturers Hanover, says one programmer labeled the parts of his programs using the initials of his friends. That gave the programmer guideposts to use in navigating through the computer code, but anyone else who subsequently tried to fix or enhance that program would operate blind.    Once dozens of programmers leave their mark on software as it starts moving through its life cycle of 10 to 20 years, it becomes like a dangerous inner tube. &quot;It's been patched and extended and enhanced to the point that it is now a maintenance nightmare,&quot; says Michael Bealmear, a partner at Coopers andamp; Lybrand.    Melvyn Bergstein, who runs the technology consulting operation at Arthur Andersen andamp; Co., says that because of all the problems, programmers may write as little as five to 10 lines of computer code a day -- roughly equivalent to a writer producing five to 10 sentences. A billing system for a utility requires about a million lines of code -- 20,000 pages of computer printout -- so it could take a programmer as long as 1,000 years to write that system. Mr. Bergstein says a corporate project typically takes more than two years from start to finish.    Even ideas that seem simple -- such as paying interest on certain checking accounts -- may take hundreds of man-years to put into effect. T. Capers Jones of Software Productivity Research Inc. in Cambridge, Mass., estimates that General Motors Corp. spends $3 billion a year on software and that ITT Corp. spends $1 billion. &quot;Senior executives are uncertain whether they are getting their money's worth,&quot; he says.    Some hope for a solution is seen in what are called fourth-generation languages, which let programmers use a few lines of code to do what would have taken dozens or even hundreds in traditional languages. That is like giving reporters something that would let them just write an outline for an article rather than having to write the whole thing.    Some users talk of quintupled productivity in writing programs, and they add that software written in fourth-generation languages is far easier to change. But the new languages can be applied only selectively. They may work just for one part of a project on one type of operating-system software on one type of computer.    Software that uses them also runs more slowly than software written in traditional languages. Because New Jersey relied too heavily on a fourth-generation language, the state's vehicle-registration and driver-license operations slowed almost to a halt a few years ago, and officials are still sorting their way through the mess.    Another area that promises huge productivity gains is so-called computer-aided software engineering. It gives programmers the sorts of design tools that computer-aided design products have given mechanical engineers.    Mr. Prout of Valley National Bank says he abandoned a project to switch to nine-digit ZIP codes in the bank's computer programs after determining that it would take a man-year to make the switch and that the new method could cause some of the software to crash. But if his existing software had been written using a computer-aided software engineering product, which wasn't available at the time, he would have been able to make the switch in minutes in the several hundred programs that involve ZIP codes.    Again, however, the products have a long way to go. Few address the problem of maintaining existing software, and they can handle only part of the programming for a new application.    Manufacturers Hanover has had success splitting off some of its data-processing staff members and assigning them to specific areas so that they will react faster and will understand their users' needs better. Many other companies have made impressive gains simply by managing matters more carefully. IBM says it has been improving its programmers' productivity about 7% a year that way.    Still, even those who have made great strides in solving the productivity problem figure they have only begun. &quot;It took us a lot of years to get into this mess,&quot; says Ray Stanley, a vice president at American Express Co., &quot;and it's going to take us a lot of years to get out of it.&quot; </TEXT></DOC>