<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-330-602  </DOCNO><DOCID>08 330 602.andM;</DOCID><JOURNAL>PC Magazine  May 15 1990 v9 n9 p315(3)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1990.andM;</JOURNAL><TITLE>Databases. (Borland International's Paradox Engine) (column)</TITLE><AUTHOR>Neuhaus, Trudy.andM;</AUTHOR><SUMMARY>With its release of Paradox Engine, Borland International becamethe first major data base vendor to offer a full-fledged C librarythat interacts with its data base system.andP;  Paradox Engine is a setof data base functions extracted from the Paradox data base andplaced in libraries.andP;  Turbo C and Microsoft C developers can addthe data base management capabilities of Paradox by linking theParadox Engine libraries to their applications.andP;  Thesecapabilities include having applications read and write Paradoxdata base and index files, support of Paradox's multiuser currencyfeatures, support of multiuser record locking and dynamicencryption, the use of interactive Paradox as a front-end and theuse of Paradox Application Language as a prototyping tool.andM;</SUMMARY><DESCRIPT>Company:   Borland International Inc. (products).andO;Ticker:    BORL.andO;Product:   Paradox Engine (Program development software) (usage).andO;Topic:     Data base management systemsProgram LibrariesSoftware Architecture.andM;</DESCRIPT><TEXT>DatabasesandM;DEVELOP THE BEST APPSandM;Last time, we looked at the pros and cons of developing applications usingdatabase languages such as DBASE, and the alternate approach of using ahigh-level language (HLL).andP;  You may have concluded from our discussion that Cisn't a natural when it comes to writing database applications.andP;  UnlikedBASE, C has no built-in database commands of features; the standard Clibrary contains file-handling functions for opening, reading, writing, andclosing files, but none for high-level database access and manipulation; and,if you want to create an index file or use an indexing scheme, such as ISAM(Indexed Sequential Access Method) or B-Tree, you have two choices: purchasea third-party library or write your own.andM;Choosing the right database library isn't easy, and there are definitelylimitations.andP;  Each third-party library is different.andP;  Some use a standardfile format, such as dBASE.DBF files, but they cannot read or write dBASEindex files, and they have their own indexing schemes.andP;  Other libraries havedeveloped their own file formats, which are completely nonstandard.andM;None of the libraries offer a standardized front end, if they offer one atall.andP;  What do you need a front end for once you finish your application?andO;Well, one you finish it, nothing.andP;  But until you do, a front end can beextremely useful and can provide a great deal of flexibility.andP;  For example,using a front end, you can maintain a database interactively without writinga separate program.andP;  In addition, it lets end users begin entering data intoa new database while development is still underway.andP;  By not using a frontend, you forego these time-saving techniques.andM;Some database libraries are actually interface calls to a resident databaseengine: the engine is a separate program that is loaded in much the samefashion as many popular TSR (terminate-and-stay-resident) utilities.andO;Unfortunately, like TSRs, these libraries use an inordinate amount of memoryand often conflict with other TSRs.andP;  Btrieve is one example.andM;Knowing the company that publishes the library is just as important asknowing the library.andP;  How well established is the company?andP;  Does it offer thesource code for the product?andP;  It is willing to put the code in escrow in theevent that it goes out of business?andP;  Does it have a reputation for issuingregular updates?andP;  Will it make the library available on a variety ofplatforms?andP;  The answers you get to these questions could convince you of themerits of your other alternative--to &quot;roll your own.&quot;andM;Writing your own library of database functions does have certain advantages.andO;You can fine-tune the performance of your database functions, easily portyour library to other operating environments (since you have the sourcecode), and customize the library to fit your own needs.andP;  But this is no smalltask; you should seriously consider whether it is worth the effort, not tomention the time away from developing the actual application.andM;Both of these choices are limited.andP;  But Borland has just given you a viablealternative.andM;THE PARADOX ENGINEandM;In february of this year, Borland International shipped its new ParadoxEngine and became the first major PC database vendor to offer a full-fledgedC library built specifically to interact with its established databasesystem.andM;Paradox Engine is a set of database functions that have been extracted fromthe heart of the Paradox database and placed in libraries.andP;  By simply linkingthese libraries to their applications, Turbo C and Microsoft C developers canadd the database management capabilities found in interactive Paradox.andP;  Theywill be able to have their applications read and write Paradox database andindex files, support Paradox's multiuser concurrency features, supportmultiuser record locking and dynamic encryption, use interactive Paradox as afront-end, and use PAL (Paradox Application Language) as a prototyping tool.andM;But C developers aren't the sole beneficiaries of this new product.andP;  ForParadox developers, the Engine means that they can increase the performanceof their applications by writing the most processing-intensive modules in C.andO;They can also add features such as windowing to their applications viathird-party libraries.andM;Borland has also incorporated the Engine into Quattro Pro and SideKick forPresentation Manager, so your applications can share data with them as wellas interactive Paradox.andP;  Plus, it appears likely that Borland will continueto incorporate the Engine in many of its future commercial applications, soan application that uses the Engine will be forward-compatible as well.andM;Let's take a closer look at the Engine's features.andM;FILE COMPATIBILITYandM;Many a programmer will now be able to jump the initial hurdles of databasedevelopment because, with the Engine, applications can be built that accessParadox database and index files.andP;  With file compatibility, you, thedeveloper, can have end users use Paradox to enter data directly into adatabase before the application is finished.andP;  You can use the same tables asParadox, even create the tables with Paradox, while the application is underdevelopment.andP;  Furthermore, you can use Paradox fordatabasemaintenance--creating and modifying tables and indexes, testing queries, andimporting data from dBASE and other file formats for use by the engineapplication.andP;  (Normally, you'd have to write a separate maintenance program.)andO;Finally, file compatibility means you can write customized C applicationsagainst the relatively large installed base of Paradox databases.andM;PROTOTYPINGandM;Since Engine application are compatible with PAL applications, you can useParadox to prototype your application, screens, menus, and so on, while the Cversion is still under development.andP;  You can also use PAL and the ParadixReport Generator to prepare and prototype reports.andP;  Keep in mind, however,that you do not need to own Paradox to use the Engine and write Engine-basedapplications.andM;EXPAND APPLICATIONSandM;If you have already invested in Paradox--trained your staff and completed alot of data entry--you can add capabilities to your current applications bywriting Engine applications.andP;  For intance, it's a relatively simple task towrite an Engine application to download data from a serial port on your PCinto a Paradox table (using your favorite C routines for accessing the serialport).andP;  You could run the application from Paradox or PAL with the RUNcommand.andP;  Or leave it running on a network workstation and have it depositthe data in a table used by Paradox running on other workstations.andP;  Anotheridea might be to add data import and export capabilities, to and from Paradoxtables, which can handle different file formats not supported by Paradox.andO;These features are difficult or impossible to implement with Paradox and PAL,but easy in an Engine application.andM;PROGRAM EFFICIENTLYandM;PAL has full access to every aspect of interactive Paradox, along with theability to extend macros that &quot;walk&quot; through Paradox menus, and a fullcomplement of facilities for writing interactive menus and screens.andP;  So ifthe end users already own Paradox, save youself some time and write the bulkof the application in PAL.andP;  Then use the Engine to write time-criticalsections of features that cannot be written in PAL.andP;  For example, apoint-of-sale system with a bar code reader might be written in PAL, whilethe portion that interacts with the bar code reader could be written as anEngine application in C.andM;ADD YOUR FAVORITE LIBRARIESandM;Since Engine applications are written in C, you can add graphics, serialcommunications, and windowing from C routines that you've written yourself orpurchased elsewhere.andP;  The Engine does not get in the way since its purpose isto supply database-handling capabilities.andP;  In fact, Turbo C offers a numberof windowing and graphics features in its standard library.andM;QUATTRO PRO AND SIDEKICKandM;You can extend Quattro Pro and SideKick for Presentation Manager with Engineapplications or, conversely, use these programs to complement and extend yourEngine applications.andP;  In addition, since the Engine fully incorporatesParadox's multiuser concurrency technology, it can even share data and tableswith Quattro Pro and SideKick PM across a network.andM;Let's suppose you need to write a statistical analysis application in C withthe Engine.andP;  Quattro Pro can be the front end through which the user enterdata and displays graphs from the data.andP;  And as long as the user remembers tosave the data in a Paradox table, the Engine application can perform itsanalysis and even change the data in the table if necessary.andM;If Quattro Pro is running on another machine across a network, it canautomatically sense the changes being made to the financial data and refreshits own display of the data (including graphs).andP;  Because Paradox's multiuserconcurency technology is incorporated in the Engine (and thus in yourapplication), your application and Quattro Pro can easily access and sharethe same data simultaneously.andM;The reverse is also true: you can use Quattro Pro and SideKick PM to extendthe capabilities of your Engine applications.andP;  For instance, Quattro Procould be a spreadsheet front end for an inventory-control Engine application.andO;Bring up Quatrro Pro against the inventory database and you can graphicallydisplay the inventory relationships without writing these into yourapplication.andP;  With SideKick PM, your Engine application can make notations inthe Scheduler file to remind or notify a user of an upcoming event.andM;(Note: the Paradox Engine is not yet available for OS/2 programmers.andP;  ThePARADOX.DLL dynamic link library provided with SideKick PM is the Engine, butin a form before the current Engine was developed.)andM;MULTIUSER CONCURRENCYandM;As we just mentioned, you can use Paradox's multiuser concurrency to buildautofresh into your Engine applications.andP;  The Engine provides functions tosee whether tables on a network have changed.andP;  You can use these functions toexamine a table periodically to see if some other application has changed it,and to refresh the Engine's buffers for that table accordingly.andP;  Then you canredisplay any on-screen data from those buffers.andP;  This gives you applicationthe same auto-refresh capabilities as Paradox, PAL, Quattro Pro, and SideKickPM.andP;  Incidentally, the Engine offers support for the same networks asParadox, including those from IBM (Token-Ring/Extended Edition), Novell,3Com, Banayn, Torus, and ATandamp;T (StarLAN).andM;DATA ENCRYPTIONandM;The Engine provides full support for Paradox's data encryption scheme andprevents unchecked access to password-protected files.andP;  So not only can youinclude these features in an Engine application, but such an application willhave no more right to access a password-protected file without a passwordthan Paradox.andP;  the Engine can also dynamically encrypt and decrypt records,so an encrypted table remains largely protected while individual records arebeing accessed.andM;PROGRAMMING THE ENGINEandM;The Engine has the full capabilities of Paradox.andP;  It supports up to 64 opentables and 128 file locks at a time.andP;  You can have up to 2 billion recordsper table, and 255 fields per record.andP;  The record size extends to 4,000bytes, minus some space given over to managing indexes.andM;The Engine API consists of over 70 functions that let you access and updateParadox tables, records, and fields.andP;  You can also manipulate indexes, searchfor records in indexed and database order, control multiuser access (via bothtable and record locking), and encrypt (password-protect) and decrypt atable.andM;When you open a table, the appropriate API function returns a handle, whichyour program uses to reference the table; to access the records in a table,another function lets you create a record buffer, and returns a handle to beassociated with that bugger.andP;  Use these handles when using the API functionsto manipulated the table, the records, or the fields.andM;It is possible to create more than one record buffer at a time (up to 10 bydefault, and a maximum of 128), in order to access different parts ofdifferent tables at the same time.andM;The contents of each field can be retrieved from the record buffer.andP;  Eachfield is referenced by a field handle--the offset of the field in the record,beginning with 1.andP;  You also have the option of referencing a field by name.andM;A program that is unfamiliar with the structure of a table can query theEngine for the number of fields per record in a given table, then retrievethe field information (name, type, length) and the contents of any field inany record.andM;WRITING AN APPLICATIONandM;To put it simply, this is powerful stuff!andP;  The payback in flexibility andperformance (you can fine-tune your routines) gained by the investment in amore complex system like the Paradox Engine is enormous.andM;Still not convinced that this is the way to go?andP;  Take note:  You can writeParadox-compatible applications using the Engine and distribute them wthoutpaying Borland any runtime fees.andP;  So to help you get started writing Engineapplications, we'll present a utility in the next issue.andM;LET US HEAR FROM YOUandM;Share your database experience, tips, and techniques and we'll pay you $50for any submissions we print.andP;  Submissions must be made on-disk, and be sureto include a printout.andP;  Mail your contributions to Databases, PC Magazine,One Park Avenue, New York, NY 10016.andO;</TEXT></DOC>