<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-349-001  </DOCNO><DOCID>07 349 001.andM;</DOCID><JOURNAL>Software Magazine  Feb 1989 v9 n2 p33(6)* Full Text COPYRIGHT Sentry Publishing Corp. 1989.andM;</JOURNAL><TITLE>It only needs to know everything. (IBM's data repository)</TITLE><AUTHOR>Hamilton, Hank.andM;</AUTHOR><SUMMARY>IBM Corp is developing a 'repository' product that will functionas a control and integration layer that retains information aboutapplications.andP;  Such repositories are based on the'entity-attribute' relationship' (EAR) model, can collect,'aggregate,' entities in the repository to function as a singleunit, and can relate entities by 'inheritance' of attributes.andP;  IBMis expected to implement its repository on top of DB2 or SQL-DSfor 370- and OS-400 systems.andP;  The repository will not be fullydynamic, will provide data dictionary-type services only atcompile times, but utility and service programs will be able toaccess the repository at any time.andP;  Many other firms haveimplemented repository tools, and several products andapplications are briefly described.andM;</SUMMARY><DESCRIPT>Company:   International Business Machines Corp. (product development).andO;Ticker:    IBM.andO;Topic:     Data DictionariesProductsSystem DevelopmentApplicationsSystem Design.andO;Feature:   illustrationtable.andO;Caption:   Representative CASE-repository tools. (table)andM;</DESCRIPT><TEXT>IT ONLY NEEDS TO KNOW EVERYTHINGandM;Despite the riches of software available for IBM computer systems, users ofthe system have been frustrated for years by the failure of one tool to workwith other tools.andP;  After completing computer-aided analysis, the user oftenfound the results would not feed into a follow-up code generator of choice.andM;It appears that an IBM product currently under development, referred to hereas the repository, can permit that situation to change.andM;This product is much more than a powerful data dictionary.andP;  While it willsupport some of the functions of traditional data dictionaries, theRepository was originally conceived to support the computer applicationsenvironment.andP;  It differs from a data dictionary in many ways.andM;The evolution toward the Repository can be traced back to the 1970s withinthe IBM user group, Share Inc., and an effort by a team of Share members andIBM staff.andM;The effort was called Silt (Share-IBM Liaison Team) and was headed by TedDolatta, then with Bell Labs and now a software developer in the Los Angelesarea.andP;  This team tried to look into the future of customers' data processingneeds and make some predictions of requirements for the medium-to long-termfuture.andM;As a result of that study, Share initiated a pair of new study groups--LargeSystems Requirements for Application Development and the Language FuturesTask Force.andM;The Large Systems Requirements for Application Development group focused onhardware and operating systems requirements to support large-scale futurecomputer applications.andP;  Participants in the effort were from companies suchas General Motors Research, Tymshare, Exxon, Perkin-Elmer and Boeing ComputerServices.andM;Their requirements, published in 1979, endorsed the direction of very largescale virtual memories that would allow computer users to developapplications without regard to limits of memory size.andM;The Language Futures Task Force began work in 1976 under the leadership ofJohn Ehrman (then with Stanford Linear Accelerator Computer Center, now withIBM).andP;  Among the other enterprises contributing to the task force work wereChevron Corp., the University of Connecticut, State Farm Insurance, Pennsylvania Power andamp; Light, First National Bank of Chicago, American Express,Westinghouse Electric, Harry Diamond Labs of the U.S.andP;  Army and TWA.andM;The original question was, &quot;What can be done to/for the traditional'high-level languages' to make working with them more productive?&quot;andM;Application generators or 4GLs were not ignored.andP;  Rather, it was agreed theybe treated separately.andM;Later, the team discovered that the requirements it developed tended tosupport 4GLs as well.andM;Very quickly, the team concluded that no changes to the languages themselveswould produce worthwhile boosts in productivity.andP;  Rather, changes needed tobe made in the environment where applications are developed and executed.andM;In 1979, the task force was broadened with the inclusion of representativesfrom another user group, Guide International.andM;In discussing numerous recommendations and solutions, the team kept findingthat a place was needed to save certain information about applicationprograms.andP;  An example of that information would be definitions of units ofbusiness data, screen formats and other components that needed to beavailable to one or more development tools.andP;  Some of the information may havebeen stored there by the development tools themselves.andP;  For instance, acompiler might store its symbol table there.andM;Informally, the term &quot;dictionary&quot; was used to describe the place where thatinformation resided.andP;  However, the term proved confusing to those alreadyfamiliar with one or another of the &quot;dictionary&quot; products then available.andM;In 1980, after some word-filled pillow fights, the neutral term &quot;repository&quot;was adopted to describe the place where &quot;things are put.&quot;andM;Later, some other groups began using &quot;repository&quot; to describe similar butdifferent things; and communications were clouded again.andM;The Language Futures Task Force report was formally delivered in late 1984,but the effect of IBM's participation in the endeavor had already begun toinfluence IBM decisions about the environment and development of products.andM;One can find most characteristics of the SNA network and the recentlyannounced IBM Enterprise Systems Architecture in the Large SystemsRequirements for Application Development report.andP;  But features of the SystemsApplication Architecture and suggestions in the task force report can almostbe mirrored one-for-one.andM;The participating groups felt the task force was so successful that shortlyafter its conclusion, another customer-driven effort, the ApplicationDevelopment Joint Project was initiated.andP;  This time, representatives fromfive major international IBM user groups were assembled under the leadershipof Mark Piper of Arthur Andersen andamp; Co. of Chicago and Ed Peters ofManufacturers Hanover Trust of New York City.andM;The Application Development Joint Project is attempting to makerecommendations about the contents of the application development toolkit.andO;The toolkit project will identify all the tools the application developerneeds, ranging from planning, design and test, to data generation andediting.andP;  It could encompass up to 400 tasks.andM;Notably, early in its work the Application Development Joint Project assumedthe existence of a &quot;repository,&quot; which served the same functions that theLanguage Futures Task Force found desirable.andM;Based on what IBM officials have said in public and what has been implied byreferences to &quot;the Repository&quot; in the trade press, one might conclude thatmany diverse groups have found the (even hypothetical) existence of theReposity useful.andM;Before mentioning some of these uses, one thing should be clear: the&quot;repository&quot; is not the &quot;data dictionary.&quot;andP;  It is likely that it is not adata dictionary at all.andP;  However, the repository should support and probablyenhance the data dictionary.andM;The major difference between the two is that the IBM data dictionaryencompassed a data store, a database engine and a collection of tools, suchas those that load Program Specification Blocks for IMS databases and thosethat extract structures for PL/1 and Cobol.andM;The repository will be a control and integration layer above a relationaldata store.andP;  Any tool will exist outside the repository but within the sameapplication development environment (see Figure 1).andM;Today's vision of the repository is that of an &quot;entiry-relationship&quot; model ofa type that professor Peter Chen of Louisiana State University popularizedunder the name &quot;E-A-R&quot; (entity-attribute-relationship).andP;  The basic modelwould be modified to include characteristics of &quot;aggregation&quot; so thatelements in the repository can be collected together and referred to as asingle unit.andM;It might also have the chaaracteristics of &quot;inheritance&quot; so that attributescan be inherited from other specified elements.andP;  These last two additionswould give the repository some &quot;object-oriented&quot; capability.andM;The repository will most likely be implemented on top of a relationaldatabase and on 370-type macines; DB2 or SQL/DS will be the engine.andP;  Therepository will be able to take advantage of distribution of its owncomponents and data to the extent that those engines permit it.andM;Until other basic system problems are solved, requirements for security andintegrity probably will dictate that owner of the repository will be limitedto a single CPU.andM;The performance of DB2 is fairly well understood, and it is expected tocontinue to improve.andP;  The &quot;efficiency&quot; of a repository with a DB2 enginecannot be projected unless the implementation model is known, and IBM issilent about that.andP;  The company apparently prefers not to havepre-announcement speculation drive potential users away.andP;  The silence permitsIBM to change implementation details right down to the wire.andM;Without a doubt, the company understands the serious performance requirementsthe Repository must meet and the penalty for delivering a CPU &quot;hog.&quot;andM;We do know that the IBM Repository will be implemented for OS/400 machinesand the 370s.andP;  Even the largest PS/2 apparently cannot quite handle the load,but that is the kind of problem that decreases over time.andM;Also, the IBM Repository will not be fully &quot;dynamic.&quot;andP;  A repository that isactive and available during program execution could permit constantvalidation of data passing between modules or completely decouple programsfrom their screens.andP;  IBM Says its Repository will not be that dynamic.andM;Data dictionary-type services for application programs will be available onlyat compile time.andP;  However, utility and service programs can access theRepository any time the system is up.andM;Again, one might hope that this restriction eases with time.andP;  Certainly, onewould expect service subroutines or exits that would permit an application tointerrogate the Repository if needed.andM;The price of the Repository software is not known, but obviously will be ofconcern to users.andM;The Language Futures Task Force tried to avoid thinking of &quot;the repository&quot;as a &quot;thing.&quot;andP;  The task force left the door open for the repository to be acollection of &quot;things&quot; that were known to a central agent.andP;  The view was notso much that of a &quot;dictionary&quot; as of a card catalog in a library.andP;  It is notnecessary for the repository to contain all the things it knew about, but itshould know about everything.andM;As in the library where some information is in books, some in newspapers andsome on film, information intimate to the repository was permitted to be in avariety of places determined by the use of the information.andP;  For example, thecompilation history of a module can be stored with the module, as long as therepository knows that and can find the module when that information isneeded.andM;Nathan Uffenheimer, president of OCC, an Evanston, Ill., software andconsulting firm, feels that the present dictionaries/repositories are passiveand not part of the development process.andP;  He says that new dictionaries needto be more interactive with the databases they describe.andM;He suggests &quot;the dictionary needs to contain meta-data, to describe the datathat it refers to, and to define its own contents.&quot;andM;Uffenheimer said a single, centralized repository &quot;would be beneficial ineliminating the local pockets of development which today become incompatiblewith separate data dictionaries.&quot;andM;COORDINATING RELATIONSHIPSandM;CasePac, marketed by On-Line Systems, International, Ft.andP;  Lee, N.J., wasoriginally designed at Fireman's Fund Insurance in San Rafael, Calif.andM;Shirley Evemeyer, manager of Database Administration, remembers in 1985 whenFireman's found its development effort--which was scattered among a number ofseparate systems--contained many contradictory specifications.andP;  The cost ofrectifying the resulting incompatible products was great.andM;The need for a single repository to coordinate this work led to the design ofCasePac, which was later given to On-Line Systems for implementation andmarketing.andM;The repository included definitions of business rules, data elements, programinput requirements, program output formats (screens or reports), and otherspecifications.andP;  It would contain or know where to find definitions ofproject milestones, documentation, and other criteria.andM;Because of the E-A-R character, the user can define relationships betweenpieces of information.andP;  The intent is to permit definitions of elements ofdata, their relationships to one another, and their relationship to businesspolicies and rules.andM;A simple relationship might be a Social Security number (SSN) to a programnamed Payroll and to a report or screen named PayrollControl.andP;  Queries wouldreveal that the data element SSN was referred to by both Payroll andParyrollControl, as well as Payroll Control being used by Payroll (see Figure2).andM;One should be able to specify that SSN in the context of Payroll controlshould be represented as nine numeric characters with separating dashes, butSSN in the context of Payroll is nine packed-decimal digits with nopunctuation.andM;Language processors, running as tools in the application developmentenvironment, would be able to refer to the repository to deduce the need fornecessary conversions and/or edit validations when moving SSN between Payrolland Payroll Control.andM;Likewise, language processors or binders can use the repository to validatethe argument list of a subroutine call against what it knows about theparameters of the subroutine that is called.andM;The repository can support testing and post mortem analysis tools bypermitting the mapping of absolute entries in stopped programs back to theoriginal source code, and even to relevant specifications.andM;One can imagine that if the repository has sufficient information about therelationships between data and processes involved in an application, itshould be easy for a tool such as an application generator to automaticallyput together a usable application program.andP;  In appropriate circumstances, thegenerator could even &quot;run the application&quot; without ever producing a &quot;real&quot;program.andM;QUERYING AND REPORTINGandM;In addition, the repository can be used as a basis for query and reportsconcerning the Information System and the enterprise.andP;  If the information inthe repository is complete enough, it can be used as the center of operationsand control for DP throughout the organization.andM;As conceived now, the repository would serve as many as four areas of aninstallation: application development, systems management, office systems,and engineering and manufacturing.andM;If would serve the application development activity by supporting tasks inthe areas of database and data administration and in program developmentmaintenance.andM;The repository can support system management in the areas of network designand problem, change and configuration management.andM;Office systems can benefit by having centralized directories and documenttracking.andM;Engineering and manufacturing operations will be helped by looking to therepository to unite &quot;islands of automation.&quot;andM;One of the most direct benefits of the repository will be obtained from theability to share data and information among applications and tools in thedata processing environments.andM;Another benefit accrues from having a central point of storage forinformation about business and DP-related objects.andP;  Many people will findgreat benefit from being able to define and enforce the use of business rulesregarding the entities, attributes and relationships defined in therepository data model.andM;UNDERSTANDING LIMITATIONSandM;Remember, however, the expectation is that the repository will offer a&quot;generalized&quot; E-A-R model.andP;  Its use within organizations will be limited onlyby the ability of someone to understand and define those items.andM;Here is the greater cost of the repopsitory.andP;  When data dictionaries becameavailable, many installations expended a lot of resources in many falsestarts.andP;  Installations that were unable to successfully understand their owndata relationships went from product to product in an attempt to find aproduct that would solve that problem for them.andM;Most shops either learned what they needed from the exercise of refittingeach product and finally stopped, or they simply stopped from exhaustion.andM;Those users who have worked to bring the repository into the world feel itwill give the user more than a &quot;data dictionary.&quot;andM;But with that expanded mission comes the danger of a tool that can be muchharder to properly use, or which can result in much more costly mistakes.andP;  Itis not clear at this time what training or skills the user of the repositoryshould have.andM;Many independent software vendors are aware of the imminence and usefulnessof the repository and have positioned themselves to apply it to their ownproducts.andM;TRACKING DEVELOPMENTSandM;Pansophic Systems, Inc., Lisle, Ill., which has an E-A-R repository at thecenter of its Telon product, indicates that it has been tracking thedevelopment of the IBM Repository.andP;  Pansophic states that it is positioned tolet the customer replace their repository with the IBM product if that isappropriate.andM;On-Line Systems, as a matter of policy, closely tracks IBM strategies andindicates that it is positioned to move toward the IBM Repository.andM;Sage Software Inc., Rockville, Md., specializes in building applicationdevelopment tools for the IBM environment.andP;  Harold Daniels, vice president ofmarketing, says the IBM Repository is &quot;a major, major need in the field.&quot;andP;  Hecites the array of incompatible dictionaries or repositories producedindependently by various vendors.andM;The incompatibility limits the ability of the developers to effectively use awide spectrum of tools, Daniels said.andP;  He feels the IBM Repository willbecome the industry standard, permitting tools to cooperate better.andM;The post-repository image of the mid- to large-scale IBM development shopwill change.andP;  A number of intelligent workstations may share a singlerepository, perhaps accessed over a network, drawing from it definitionssupporting development of a single application.andM;Application designers will enter specifications from their design into therepository.andP;  There, the design can be available to anyone interested enoughto look (subject to security and authorization controls).andP;  Design will bemore open to users and management.andM;As each developer creates new entities, the central repository will beupdated so that others can use that work and everyone is synchronized.andO;Project planners can enter deadlines and checkpoints for each component andfor each developer.andP;  An automated project manager can then walk individualsthrough task lists and provide management with up-to-the-moment progressreports.andM;With sufficient information in the repository, generators may causeprogrammers to evolve into planners.andP;  Prototype can be created and evaluted.andO;Working from range and value limitations, test data generators can createtest data or automatically validate results.andM;The real payoff, however, will come when IBM and other vendors begindepending on the repository as the place to record the results of the use ofeach tool.andP;  This will stress the importance of a comprehensive andwell-documented data model of the development process.andP;  And IBM appearscommitted to deliver that.andO;</TEXT></DOC>