<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-589-645  </DOCNO><DOCID>07 589 645.andM;</DOCID><JOURNAL>Communications of the ACM  May 1989 v32 n5 p546(17)* Full Text COPYRIGHT Assn. for Computing Machinery, Inc. 1989.andM;</JOURNAL><TITLE>Intelligence in scientific computing.andO;</TITLE><AUTHOR>Abelson, Harold; Eisenberg, Michael; Halfant, Matthew;Katzenelson, Jacob; Sacks, Elisha; Sussman, Gerald J.; Wisdom,Jack; Yip, Kenneth.andM;</AUTHOR><SUMMARY>The development of intelligent techniques for computerizedpreparation, execution, and control of numerical experiments isdiscussed.andP;  Although no computer version of an engineer'sassistant yet exists, there are many computer programs whichinclude important parts of the assistant's capabilities andduties.andP;  These include automatic preparation and monitoring ofnumerical simulations, automatic generation of qualitativeinterpretations of numerical results, and the unprecedentedsolving of computationally demanding problems with specialcomputers.andP;  The technology behind these capabilities is explored.andO;How knowledge-based systems and dynamical systems can be encodedusing constraints and symbolic rules is demonstrated as are waysto formulate algorithms with higher order procedures.andP;  Methods forcombining these procedures with symbolic algebra to automaticallycreate numerical programs are presented.andM;</SUMMARY><DESCRIPT>Topic:     Scientific ResearchNew TechniqueAlgorithmsProblem SolvingKnowledge-Based Systems.andO;Feature:   illustrationchartmap.andO;Caption:   (diagram on fluid mechanics). (chart)(PLR's phase diagram). (chart)(summary of Henon's map). (map)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>INTELLIGENCE IN SCIENTIFIC COMPUTING Combining numerical techniques withideas from symbolic computation and with methods incorporating knowledge ofscience and mathematics leads to a new category of intelligent computationaltools for scientists and engineers.andP;  These tools autonomously preparesimulation experiments from high-level specifications of physical models.andO;For computationally intensive experiments, they automatically designspecial-purpose numerical engines optimized to perform the necessarycomputations.andP;  They actively monitor numerical and physical experiments.andO;They interpret experimental data and formulate numerical results inqualitative terms.andP;  They enable their human users to control computationalexperiments in terms of high-level behavioral descriptions.andM;As an example of such a tool, imagine an ocean engineer designing an offshoremooring tower for large ships.andP;  When standing free, such a tower can bemodeled in a straightforward way as an inverted pendulum anchored to the seabed, driven by wave motion, and restored to vertical position by its bouyancyin seawater.andP;  However, a massive ship attached to the mooring structurevastly complicates the dynamics: when the mooring line is slack, therestoring force is the same as before; but when the line is taut,the shipalso exerts a force through tension in the line.andP;  Numerical simulations ofsuch systems have shown that the effect of even small waves can lead topotentially dangerous resonances that can make the structure fail.andP;  The goalof the engineer is to design a structure that can withstand the worstconditions that can be expected to occur in the environment without makingthe structure excessively expensive.andM;The following excerpt of a dialogue shows how we imagine an intelligentcomputer assistant aiding an ocean engineer in the design of such astructure.andP;  Assume that the engineer has already proposed a particularstructure, either by drawing it or by combining previously definedstructures.andM;Computer: The dynamical equations for this model are: (displays a very largeset of equations).andM;Engineer: Call that the full model.andP;  Try to find a simpler approximate model.andM;Computer: The time constants for the bending moments and torsional stressesin equations 1 through 25 are very small compared with the period of lowestmode of the structure seen as a pendulum and with the periods of the largestcomponents in our standard wave spectrum for this region of the Gulf Coast.andO;Because the deflections of the structure are small we can use the followingapproximate model: (displays a much smaller number of equations).andM;Engineer: Call that the simplified model.andM;Engineer: Characterize the response of the simplified model to the standardwave spectrum.andM;Computer: State-space analysis shows that the response of this system can bebroken into three regions.andP;  For very small deflection angles (smaller than 2degrees) there are stable oscillations, damped with time constants similar tothe oscillation frequencies.andP;  Significant deflections toward the boat showtrajectories with competing domains of attraction.andP;  There are largesubharmonic responses.andP;  For deflections larger than about 10 degrees we findcomplex chaotic motions, but such large deflections violate the assumptionsof the model.andM;Engineer: Characterize the response to the dominant frequency in the spectrumas the amplitude varies from 1-foot to 20-foot seas.andM;Computer: There are two families of periodic motions here, A and B.andP;  Family Ais present at the start of the parameter range s = 1, with a periodic motionof order 1.andP;  At s = 5.2 this motion undergoes a symmetry-breaking bifurcationand splits into a pair of motions A.sub.1 and A.sub.2.andP;  As s increases, bothA.sub.1 and A.sub.2 undergo peiod-doubling cascades: order 2 (s = 6.5), or 4(s = 9.8), order 8 (s = 10.7), order 16 (s = 10.9).andP;  The cascade was nottraced past the order 16 motions.andP;  Chaotic motions were observed at s = 12.andO;Family B begins with a motion of order 1 arising from a fold bifurcation at s= 8.andP;  This motion persists through the end of the parameter range s = 20.andM;Engineer: How do the maximum stresses affect the structure?andM;Computer: Family A motions are within the safe operating region forstructures of type UG/751 construction, but the family B motions can easilyexceed the safe operating region in a 50-year storm.andM;Engineer: Perform the same analysis, assuming that we triple the bouyancy ofthe float.andM;Computer: The qualitative behavior in the two situations differs slightly inthe initial phase of growth of oscillations.andP;  Once oscillations areestablished the behavior is approximately the same.andP;  The maximum deflectionsdiffer by less than 10 percent between the two situations, but thefrequencies are very different.andM;Engineer: Begin design of an active stabilizer to damp the family B motions.andO;Assume we install thrusters at positions halfway up the structure and at 90percent of the height of the structure.andP;  Expand the full model to includedrives from these thrusters....andM;No systems as sophisticated as this engineer's assistant yet exist.andP;  However,computer programs incorporating important pieces of it are already in place.andO;Generating stylized natural language is not too hard, although understandingunstructured English text is still difficult, and we will not address thatproblem in this article.andP;  Additionally, our discussion is not really aboutocean engineering; the scenario above is not intended to illustrate gooddesign practice in that domain.andP;  Rather, our concern here is with thedevelopment of intelligent techniques appropriate for the automaticpreparation, execution, and control of numerical experiments, and with theautomatic interpretation of their results.andM;* Our envisioned engineer's assistant begins with a description of amechanism and automatically generates efficient numerical programs thatpredict its dynamical behavior.andP;  This may require more than juststraightforward simulation.andP;  A stability-analysis task such as &quot;characterizethe response to the dominant frequency in the spectrum&quot; requires compilingprocedures that evolve, in addition to the state, the variations with respectto changes in initial conditons and the sensitivities with respect to changesin parameters.andM;* The engineer's assistant automatically prepares high-performance numericalexperiments.andP;  It has extensive knowledge of numerical methods and it cancompose appropriate and correct numerical procedures tailored to the specificapplication.andP;  For critical applications, this compilation can be targeted tothe automatic synthesis of special-purpose hardware.andM;* The engineer's assistant interprets the results of numerical experiments inhigh-level qualitative terms.andP;  This interpretation is based on generalmathematical and physical knowledge that constrains the kind of behavior toexpect.andP;  The interpretation is used to prepare a report to the user, but itis also used in the experimental protocol.andP;  The summary of behavior producedfrom observations of the results of previous experiments is used toautomatically select critical values of experimental parameters forsubsequent experiments, thus efficiently uncovering the salient phenomena.andM;We begin by demonstrating significant portions of these capabilities.andP;  Theseinclude the automatic preparation and monitoring of numerical simulations,the automatic generation of qualitative interpretatons of numerical results,and the achievement of breakthrough performance on computationally demandingproblems with the aid of specially designed computers.andP;  Our special-purposeengine for computing planetary motions has produced the first solid numericalevidence that the solar system's long-term dynamics is chaotic, therebyanswering the famous questions of the stability of the solar system.)andM;Next, we take a closer look at the technology behind these demonstrationresults.andP;  We explain how algorithms from computer vision are applied tointerpret phase-space diagrams in dynamics.andP;  We illustrate how knowledgeabout dynamical systems can be encoded using constraints and symbolic rules.andO;We show how to formulate numerical algorithms at appropriate levels ofabstraction with higher-order procedures and how to combine these withsymbolic algebra to automatically generate numerical programs.andM;Finally, we sketch some of the next required to realize the vision of systemslike the engineer's assistant.andM;NUMERICAL MODELINGandM;CAN BE AUTOMATEDandM;In a typical numerical modeling study, an investigator repeatedly preparesand runs a series of computations and examines the results at each step toselect interesting new values for parameters and initial conditons.andP;  Whenenough values have been tried, the investigator classifies and interprets theresults.andP;  Even with powerful numerical computers, this process requiressubstantial human effort to prepare simulations, and it relies uponsignificant human judgment to choose interesting values for parameters, todetermine when a simulation run is complete, and to interpret numericalresults in qualitative terms.andM;We will exhibit three programs that automate much of this process.andP;  TheBifurcation Interpreter investigates the steady-state orbits in parameterizedfamilies of dynamical systems, classifying the types of orbits and thebifurcations through which they change as parameters vary.andP;  The KAM programautonomously explores nonlinear conservative systems and produces qualitativedescriptions of phase-space portraits and bifurcations.andP;  Both programsautomatically generate summary reports similar to those appearing inpublished papers in the experimental dynamics literature and in engineeringstudies of artifacts that have complex dynamics, such as airfoils, shiphulls, and mooring structures.andP;  In addition, the capabilities demonstrated bythese programs have application in the design of intelligent automaticcontrol systems.andP;  The breadth of applicability is illustrated by theKineticist's Workbench, a program that models how chemists understand complexchemical reactions.andP;  It combines numerical and symbolic methods tocharacterize reaction mechanisms in qualitative terms that are useful for theworking chemist.andM;We also discuss the place of special-purpose numerical engines as scientificinstruments and survey significant results in planetary dynamics obtainedusing the Digital Orrery.andM;Programs Can Discover and InterpretandM;Qualitative BehaviorandM;In a nonlinear dynamical system with a periodic drive, motion starting fromany set of initial conditions will typically evolve to a steady-state orbit.andO;For a parameterized family of dynamical systems, tracing the changes insteady-state orbits as the parameters vary provides a valuable summary of thefamily's qualitative behavior.andP;  Much research in nonlinear dynamics isdevoted to studying these bifurcations, or changes in type, of steady-stateorbits.andP;  For one-parameter families at least, the generically encounteredbifurcations have been classified and are well understood.andP;  Some examples arethe fold bifurcation, at which a stable orbit can appear or vanish, the flipbifurcation, at which the period of an orbit doubles, and the pitchforkbifurcation, at which an orbit splits into two orbits of the same period.andO;There are also commonly observed bifurcation sequences that occur as theparameter varies.andP;  An example is the period-doubling cascade, where the orderof an orbit successively doubles via a sequence of increasingly closelyspaced flip bifurcations, producing chaos.andM;Dynamicists commonly gain insight into the qualitative behavior of nonlinearsystems by developing summary descriptions of steady-state orbits andbifurcations.andP;  Figure 1, reproduced from, shows a schematic summary drawn byV.andP;  Franceschini based on numerical studies of the two-dimensionalNavier-Stokes equation for an incompressible fluid.andP;  As the Reynolds numberof the fluid increases, the steady-state orbits evolve through a sequence ofbifurcations.andP;  The diagram summarizes how the evolving orbits can be groupedinto four distinct families.andM;The Bifurcation Intepreter, (Figure 2) a computer program being developed atMIT by Abelson, automatically generates such summary descriptions forone-parameter families of periodically driven dynamical systems.andP;  Thedynamical system can be specified by differential equations to be integrated,by a period map that directly computes successive states at multiples of thedrive period, or by a description of a physical model such as an electricalnetwork.andP;  Given a dynamical system, a parameter range to explore, and adomain in state-space, the interpreter discovers periodic orbits, trackstheir evolution as the parameter varies, and locates and classifiesbifurcations.andP;  Using this information, the program categorizes the orbitsinto families and produces a summary report that describes each family andits evolution through bifurcations.andM;Figure 3 depicts a sample input to the bifurcation interpreter.andM;The system to be investigated models the vibration of a hinged bar withviscous damping subjected to a fixed-direction periodic impact load at thefree end.andP;  This problem is discussed in [13], which derives the period mapfor this motion.andP;  Here x is the angular displacement and y is the angularvelocity, a specifies magnitude of the load and m specifies the dampingfactor.andP;  The interpreter is asked to explore the system as the load rangesfrom 1 to 7.andP;  With this specification, the interpreter analyzes the systemand generates the following report:andM;There are two distinct families of periodic orbits, A and B.andM;Family A is already present at the start of the parameter a = 4.130 there isa supercritical-flip bifurcation at which A.sub.0 undergoes period doublingto produce a period orbit A.sub.1 of order 2.andP;  At a = 6.489 there is asupercritical-pitchfork bifurcation at which the family A splits intosubfamilies A(1) and A(2), beginning with A.sub.1 splitting into two periodorbits of order 2.andP;  As the parameter a increase, each subfamily undergoes aperiod-doubling cascade via a sequence of supercritical flip bifurcations toorder 4 at a = 6.838, order 8 at a = 6.891, order 16 at a = 6.901, order 32at a = 6.903.andP;  The period-doubling cascade was not traced past the order 32orbit, which apparently period doubles again at a = 6.904.andM;Family B first appears at a = 3.969 with an orbit B.sub.0 of order 4appearing at a fold bifurcation.andP;  As the parameter a increases, B undergoes aperiod-doubling cascade via a sequence of supercritical-flip bifurcations toorder 8 at a = 4.239, order 16 at a = 4.239, order 32 at a = 4.251.andP;  Theperiod-doubling was not traced past the order 32 orbit, which apparentlyperiod doubles again at a = 4.252.andM;The progran can display this same information as a diagram (Figure 2) that issimilar in style to the manually developed Navier-Stokes analysis in Figure1.andM;Smart Programs Can SeeandM;What Not to ComputeandM;Dynamical behavior is complex, but it is not arbitrary.andP;  There is structureon phase space that restricts the classes of legal trajectories and providesa grammar of legal phase portraits.andP;  For example, trajectories of autonomoussystems cannot intersect, and as we vary the initial conditions, thetrajectories vary smoothly except at isolated places where the behaviorchanges.andP;  As we vary parameters, the phase portrait changes qualitativelyonly at bifurcations.andP;  In Hamiltonian systems the evolution of the phasespace is area preserving, which greatly restricts the classes of possiblestructures that can occur in the phase space.andP;  This kind of knowledge enablesdynamicists to infer a good understanding of a physical system from only asmall, but well-chosen, set of experiments.andM;The phase portrait in Figure 4, taken from a historically important paper indynamics by Henon, describes how adding a simple quadratic nonlinearity to alinear rotation can lead to dramatic changes in dynamical behavior.andP;  Thefigure charactereizes the dynamics by showing only a few orbits.andP;  Presumably,Henon was able to generate this figure after performing only a fewjudiciously chosen numerical experiments.andM;The KAM program developed by Yip at MIT can analyze systems in the same way.andO;It knows enough about the constraints on the structure of phase space tochoose initial conditions and parameters as cleverly as an expert dynamicist.andO;KAM's summary description of Henon's map, shown in Figure 5, is almostidentical to the summary presented by Henon.andP;  Moreover, KAM was able todeduce this description after trying only 10 initial conditions.andM;KAM's ability to control numerical experiments arises from the fact that itnot only produces pictures for us to see--it also looks at the pictures itdraws, visually recognizing and classifying different orbit types as theynumerically evolve.andP;  By combining techniques from computer vision withsophisticated dynamical invariants, KAM is able to exploit mathematicalknowledge, represented in terms of a &quot;grammar&quot; that dictates consistencyconstraints on the structure of phase space.andP;  When it chooses new initialconditions to explore, it does so in an attempt to make the pictureconsistent with these constraints.andP;  In addition to drawing the picture, KAMgenerates a textual analysis that explains what the program &quot;sees.&quot;andP;  Here isKAM's description of the picture it generates for Hennon's map:andM;The portrait has an elliptic fixed point at (0, 0).andP;  Surrounding the fixedpoint is a regular region bounded by a KAM curve with rotation number between1/5 and 1/4.andP;  Outside the regular region lies a chain of 5 islands.andP;  Theisland chain is bounded by a KAM curve with rotation number between 4/21 and5/26.andP;  The outermost region is occupied by chaotic orbits that eventuallyescape.andM;Programs Can Construct andandM;Analyze ApproximetionsandM;A powerful strategy for analyzing a complicated dynamical system is toapproximate it with a simpler system, analyze the approximation, and map theresults back to the original system.andP;  The approximations must be accurateenough to reproduce the essential properties of the original system, yetsimple enough to be analyzed efficiently.andP;  Human experts have found thatpiecewise linear approximations satisfy both critereia for a wide class ofmodels.andP;  The PLR program, developed by Sacks at MIT, exploits this fact toautomate the analysis of second-order autonomous ordinary differentialequations.andP;  It derives the qualitative behavior of intractable equations byapproximating them with piecewise-linear equations and constructing phasediagrams of the approximations.andM;PLR constructs a composite phase diagram for a piecewise-linear system bycombining the local phase diagrams of its linear regions.andP;  It employs thestandard theory of linear equations to ascertain the local phase diagrams.andO;Linear systems have simple well-understood dynamics.andP;  Either all trajectoriesare periodic, all approach a fixed point, or all approach infinity.andP;  PLRpastes together the local phase diagrams by determining which sequences ofregions trajectories can traverse.andP;  It summarizes the results by a transitiongraph whose nodes and links represent regions and transitions.andP;  Each paththrough the transition graph of a piecewise-linear system indicates thattrajectories traverse the corresponding regions in the prescribed order.andO;Loops denote trajectories that remain in one region forever, whereas longercycles denote trajectories that continually shift between regions.andM;As a simple example, PLR can qualitatively analyze the behavior of anundriven van der Pol oscillator, a simple nonlinear circuit consisting of acapacitor, an inductor, and a nonlinear resistor connected in series.andP;  Thecurrent through the circuit obeys the equation with C the capacitance, L theinductance, and k a scaling factor.andP;  PLR approximates this equation with apiecewise-linear equation and construct the phase diagram and transitiongraph shown in Figure 6.andP;  It deduces that the system oscillates from the factthat tracing edges starting from any node in the graph leads to a cycle.andO;Intuitively, the system oscillates because the nonlinear resistor adds energyto the circuit at low currents and drains energy at high currents.andM;Domain Kowledge Can Guide Numerical ModelingandM;Eisenberg's Kineticist's Workbench, also being developed at MIT, is a programthat combines general knowledge of dynamics with specific knowledge aboutchemical reactions in the analysis, understanding, and simulation of complexchemical reaction mechanisms.andM;Chemists, in trying to model reactions, typically hypothesize a set ofelementary reaction steps (corresponding to molecular collissions) thatconstitute a proposed pathway for the overall reaction.andP;  This collection ofelementary steps may be large.andP;  It usually gives rise to a mathematical modelconsisting of many tightly coupled nonlinear differential equations.andP;  Theproblem of simulating such a system can be formidable, but a simulationmerely provides numerical results.andP;  Even more important to the chemist is toachieve some sort of qualitative understanding of the reaction mechanism.andO;The Kineticist's Workbench combines numerical simulation with a variety ofsymbolic methods in order to characterize reaction mechanisms in terms thatare meaningful to the working chemist such a equilibrium, steady states, andoscillations.andM;The Workbench also suggests ways to simplify complex mechanisms.andP;  The keyidea here is that the program can use its qualitative characterization of agiven mechanism's behavior to determine which steps within the mechanism havean important behavioral effect, and which are superfluous and may thereforebe dropped from the chemist's model.andM;The following scenario shows how the Workbench is intended to interact with auser in the analysis of a chemical process.andP;  The initial information isspecified as follows:andM;External sources for species C (rate of addition: 100 mmol/liter-sec)Concentration of A ssumed constant at 1 mmol/liter.andP;  Initial concentrationsof all species besides A are 0 mmol/liter.andM;With this specification, the Workbench responds:andM;The mechanism may be decomposed into two submechanisms.andP;  The first may bewritten as follows:andM;This submechanism results in a rapid equilibrium between C and B; the finalconcentrations of both C and B (1 and 3 mmol/liter, respectively) areindependent of their initial concentrations.andM;The second submechanism may be written as follows: (2.1) [External] * X (2.2)B + X [right arrow] Y (2.3) 2X + Y [right arrow] 3XandM;Since the concentration of B in the first submechanism is constant at 3mmol/liter, the second submechanism may be further simplified as follows:(2.1') [External] * X [right arrow] Y (2.2') 2X + Y [right arrow] 3XandM;Simulation of this second mechanism reveals that the concentrations of X andY oscillate over time.andP;  Each oscillation consists of five phases: (1) slowgrowth in the concentration of X and Y; (2) more rapid growth in X; (3) largejump in X and decline in Y; (4) large decline in X and increase in Y; (5)slower decline in X and slow increase in Y.andP;  The time between oscillationpeaks is approximately 17.8 seconds.andM;The chemist now asks the program to compare the results of the approximatemechanism (2.1'-2.2') with the numerically exact results of mechanism (1-7),comparing the qualitative behavior of the two mechanisms as reflected inspecies X and Y.andP;  The Workbench responds:andM;The qualitative behavior of the two mechanisms differs slightly during theinitial phase of slow growth in X and Y.andP;  Once oscillations begin, the exactmechanism (1-7) displays the same qualitative structure as the approximatemechanism (2.1'-2.2'), and the period is still approximately 17.8 seconds.andO;The concentrations of X and Y at comparable points in the oscillations differby less than 2 percent between the two mechanisms.andM;The chemist now tries a different variation on the original reaction, andalters the original mechanism so that the concentration of A is not constantover time, but is rather an explicit function of time, as given by theequation [A] = 1 + sin t.andP;  The Workbench responds:andM;The decomposition into submechanisms is not affected; nor is the constantconcentration of B.andP;  Again, the concentration of X and Y appear to beoscillating, but each oscillation now consists of eight phases, instead offive, as before.andM;It is worth noting some of the key features of this example.andP;  First, theWorkbench is able to decompose the original mechanism into two submechanisms,each of which is capable of independent simulation; this simplifies both theanalysis and simulation of the larger mechanism.andP;  Second, the Workbench isable to decompose the first of the two submechanisms in terms of a dichotomybetween fast and slow steps; this allos the program to approximate thesubmechanism as a system in equilibrium.andP;  Third, the program uses numericalsimulation to derive equilibrium concentrations for this submechanism.andO;Finally, the Workbench is able to describe the results of simulating thesecond submechanism in terms of a succession of qualitative episodescharacterized by changing growth rates of the species X and Y.andM;Fast computers Need Not Be Large or ExpensiveandM;Numerical modeling often requires substantial resources.andP;  Scientists andengineers have traditionally obtained these resources either by acquiringlarge-scale computers or renting time on them.andP;  However, a specializedcomputer can be simple and physically small.andP;  Indeed, it may be just as easyto design, build, and program a special-purpose computer as to developsoftware for general-purpose supercomputers.andP;  Moreover, the specializedcomputer can become an ordinary experimental instrument belonging to theresearch group that made it, thus avoiding the administrative burden and thescheduling problems associated with expensive, shared resources.andM;The question of the stability of the solar system is probably the most famouslongstanding problem in astrodynamics.andP;  In fact, it was investigations intoprecisely this problem that inspired Poincare to develop the modernqualitative theory of dynamical systems.andP;  In 1988, Sussman and Wisdomcompleted a series of numerical experiments at MIT demonstrating that thelong-term motion of the planet Pluto, and by implication the dynamics of theSolar System, is chaotic [25].andM;The stability question was settled using the Digital Orrery [4], aspecial-purpose numerical engine optimized for high-precision numericalintegrations of the equations of motion of small numbers of gravitationallyinteracting bodies.andP;  Using 1980 technology, the device is about 1 cubic footof electronics, dissipating 150 watts.andP;  On the problem it was designed tosolve, it is measured to be 60 times faster than a VAX 11/780 with FPA, or1/3 the speed of a Cray 1/S.andM;Figure 7 shows the exponential divergence of nearby Pluto trajectories over400 million years.andP;  This data is taken from an 845-million-year integrationperformed with the Orrery.andP;  Before the Orrery, high-precision integrationsover simulated times of millions of years were prohibitively expensive.andP;  Thelongest previous integration of the outer planets was for five million years,performed on a Japanese supercomputer in 1984 [14].andP;  Even though the Orreryis not as fast as the fastest supercomputer, its small scale and relative lowcost mean that it can be dedicated to long computations in ways thatconventional supercomputer could not.andP;  To perform the integration thatestablished Pluto's chaotic behavior, the Orrery ran continually for fivemonths.andM;The Orrery was designed and built by six people working part-time for onlynine months.andP;  This was possible only because of novel software support of thedesign process.andP;  The simulator for the Orrery is partiallysymbolic--simulated registers hold symbolic values and simulated arithmeticparts combine these to produce algebraic expressions (in addition to checkingtiming and electrical constraints).andP;  This means that a successful simulationyields a simulated memory containing algebraic expressions that can bechecked for correctness.andM;INTELLIGENT NUMERICAL COMPUTINGandM;REST ON AI TECHNOLOGYandM;The previous illustrations achieve their impressive results by bringingsymbolic methods to bear on the problems of numerical computation.andP;  Some ofthese techniques are traditional AI methods, which achieve new power whenthey are combined with deep knowledge of dynamical systems.andP;  The KAM program,for example, uses techniques from machine vision to recognize and classifythe relevant geometrical properties of the trajectories.andP;  The BifurcationInterpreter uses algebraic manipulation and knowledge about the localgeometry of bifurcations to automatically generate numerical procedures thatrack periodic orbits.andM;The key to automatically generating high-performance numerical algorithms isto express knowledge of numerical analysis at an appropriate level ofabstraction.andP;  This is supported by a library of numerical methods that isorganized around the liberal use of higher-order procedure abstractions.andO;With the organization, one constructs sophisticated numerical methods bymixing and matching standard components in well-understood ways.andP;  Theresulting programs are both more perspicuous and more robust thanconventional numerical methods.andM;The KAM Program ExploitsandM;Vision TechniquesandM;Yip's KAM program is notable because it applies judgement, similar to that ofan expert dynamicist, in directing the course of its numerical experiments.andO;In making judicious choices of what to try next, KAM must interpret what itsees.andP;  This process occurs in three phases: aggregation, clustering, andclassification.andP;  The images of an initial point produced by iterating the mapforms a set of isolated points.andP;  This orbit must be classified.andP;  InHamiltonian systems there are three types of orbits to distinguish.andP;  In asurface of section, periodic orbits appear as isolated points, quasiperiodicorbits appear as closed curves or island chains, and chaotic orbits appear tofill regions of 2-dimensional space.andP;  KAM must also aggregate the componentsof an orbit so that it can be further classified.andP;  It must be able todetermine the number of islands in an island chain, as this number gives theperiod of the enclosed periodic point.andP;  KAM must be able to estimate thecentroid and area enclosed by a curve and to recognize the shape of a curve.andO;KAM implements these abilities with techniques from computational geometryand computer vision.andM;KAM classifies orbits using methods based on the Euclidean minimal spanningtree--the tree that interconnects all the points with minimal total edgelength--which it constructs by means of the Prim-Dijkstra algorithm [5].andP;  Foreach subtree of the spanning tree, KAM examines the degree of each of itsnodes, where the degree of a node is the number of nodes connected to it inthe subtree.andP;  For a smooth curve, the spanning tree consists of two terminalnodes of degree one and other nodes of degree two.andP;  For a point set thatfills an area, its corresponding spanning tree consists of many nodes havingdegree three or higher (Figure 8).andM;To aggregate points, KAM deletes the tree edges that are significantly longerthan nearby edges, following an aggregation algorithm suggested by Zahn [32].andO;This divides the tree into connected components.andP;  Figure 9 shows how theprogram aggregates points of a quasiperiodic orbit and recognizes it as anisland chain.andM;To compute the area and centroid of the region bounded by a curve, KAMgenerates an ordered sequence of points from the spanning tree, andspline-interpolates the sequence to obtain a smooth curve.andP;  Straightforwardalgorithms are then applied to compute the area and centroid.andP;  Shaperecognition is accomplished using scale-space methods pioneered by Witkin[29].andM;AI Techniques Can ImplementandM;Deep Mathematical KnowledgeandM;Viewed as abstract examples of AI technology, our demonstration programs arehardly novel.andP;  The uniqueness of these programs, and the source of theirpower, is that they use classic.andP;  AI methods to exploit specific domainknowledge based on rigorous mathematical results.andM;PLR for instance, combines geometric reasoning, symbolic algebra, andinequality reasoning to test whether trajectories of a piecewise linearsystem cross between adjacent regions in phase space.andP;  For a trajectory tocross from region R to S via boundary u, its tangent t at the intersectionpoint with u must form an acute angle with the normal n, as shown in Figure10.andP;  This geometric condition is equivalent to the algebraic condition thatthe inner product t.n be positive.andP;  Hence, a transition exists from R to Sunless t.n [is less than or =] 0 everywhere on u.andP;  PLR resolves theinequality t.n [is less than or =] 0 on u with the BOUNDER inequalityreasoner [21].andM;PLR combines symbolic reasoning with deep knowledge about dynamical systemsto interpret the transition graphs that it constructs.andP;  For example, thetransition graph for the van der Pol equation shows that all trajectoriesspiral around the origin, but tells nothing of whether they move inward, moveoutward, or wobble around.andP;  In its analysis of the van der Pol equation, PLRuses symbolic algebra to derive inequalities proving that all trajectoriesconverge to a unique limit cycle.andM;The KAM program limits the number of phase-space trajectories it must exploreby drawing upon constraint analysis, as pioneered by Waltz [28].andP;  As in anyconstraint analysis, KAM relies upon &quot;grammar&quot; that expresses the consistentways in which primitive elements can be combined.andP;  In KAM's case, theprimitive elements incorporate sophisticated mathematical invariants, and thegrammatical rules embody deep theorems about the behavior of dynamicalsystems.andM;One such invariant, for example, is the rotation number of an orbit, aquantity that measures the asymptotic average of the angular distancesbetween any two successive iterates in units of 2 [pi]-radians.andP;  A rule inKAM's grammar embodies a theorem that the rotation numbers of nearby orbitsmust change continuously [16].andP;  As an example of how this is used, supposethat KAM has located two nearby almost-periodic orbits having rotationnumbers [rho]1 and [rho]2 respectively.andP;  Suppose [rho]1 is slightly smallerthan 1/5, and [rho]2 slightly larger.andP;  With only these two orbits, KAM'sevolving phase-space picture cannot be complete.andP;  By ccontinuity, KAM expectsto find a third, nearby orbit with rotation number exactly equal to 1/5, thatis, a periodic orbit of period 5, which KAM proceeds to search for andclassify.andM;In a similar manner, Abelson's Bifurcation Interpreter draws upon knowledgeof the geometry of typical changes in the steady-state orbits ofone-parameter families of dynamical systems.andP;  Periodic orbits of aperiodically driven oscillator can be identified as fixed-points of theperiod map, which maps a state to the end-point of the trajectory startingfrom that state and evolving for one period of the drive.andP;  Stability of anorbit is determined by the stability of the corresponding fixed point.andP;  Ifthe interpreter notices that a stable orbit suddenly becomes unstable as thefamily parameter increases, it attempts to explain this change as the resultof a bifurcation.andP;  The type of bifurcation can be conjectured by examiningthe eigenvalues of the period map at the fixed point, and the conjecture canbe verified by a search that is tailored to the local geometry for thatbifurcation type.andM;For example, for a stable orbit, the complex eigenvalues of the correspondingfixed point of the period map must lie within the unit circle.andP;  If stabilityis lost with an eigenvalue apparently crossing the unit circle at --1, aclassification theorem for bifurcations [11] tells the interpreter to expectthat this is a supercritical-flip bifurcation, which corresponds to a perioddoubling of the orbit.andP;  Near the bifurcation one should expect to see astable orbit just before the critical parameter value and, just after thecritical value, an unstable orbit together with a stable orbit of double theperiod.andP;  for this type of bifurcation, the interpreter attempts to locate thenew expected orbits using a search technique that detects fixed points bycomputing the Poincare index of the period map [12].andP;  If these orbits arelocated, the bifurcation is probably a flip.andP;  If a different local geometryis found, the apparent bifurcation may be the result of numerical error, orthe interaction of two nearby bifurcations, or it may be a bifurcation ofnon-standard type.andP;  In any case, the result of the search is passed to acritic that attempts to reconcile the local results for all bifurcationsdetected and produce a consistent description.andM;Going beyond general knowledge of dynamical systems, the Kineticist'sWorkbench program employs a number of techniques specific to the domain ofchemical kinetics.andP;  for example, the program examines the qualitative historyof a reaction simulation, attempting to find periods of time during whichconcentrations of some species may be treated as constant; this is anautomation of the kind of steady-state analysis that is a staple of kineticinvestigation [15].andP;  Another portion of the program--that portion devoted tospotting fast equilibria within a mechanism--makes extensive use of thereaction network formalism developed by Feinberg, Horn, Jackson, andcoworkers at the University of Rochester [6].andP;  An especially fruitful resultof their work is the zero-deficiency theorem, which provides a simplealgorithmic test for determining whether a reaction mechanism gives rise tostable equilibria.andP;  Finally, the portion of the Workbench program devoted todecomposing mechanisms according to mutual influence between species may beused to identify transient species, and to drop those species from aparticular simulation as soon as their concentrations are deemed too low toaffect the remainder of the simulation.andM;Numerical ExperimentsandM;Can Be Prepared AutomaticallyandM;Translating high-level specifications into high-quality numerical routinescan be a tedious and erro-prone process whose difficulty limits the utilityof even the most powerful numerical computers.andP;  A program by Abelson andSussman draws upon a spectrum of computational tools--numerical methods,symbolic algebra, and semantic constraints (such as dimensions)-- to automatethe preparation and execution of numerical simulations.andP;  These tools aredesigned so that combined methods, tailored to particular problems, can beconstructed on the fly.andP;  One can use symbolic algebra to automaticallygenerate numerical procedures, and one can use domain-specific constraints toguide algebraic derivations and to avoid complexity.andM;Figure 11 shows the wiring diagram for a simple nonlinear circuit, a drivenvan der Pol oscillator consisting of voltage source, a capacitor, aninductor, and a nonlinear resistor with the cube-law characteristic v =ai.sup.3 - bi.andP;  The figure also shows a description of this wiring diagram isa language formulated for describing electrical networks.andP;  This descriptionspecifies the circuit's parameters, its primitive parts, and how the partsare interconnected.andM;Given this description, the program combines models of the primitive elementsto form equations that are then algebraically solved to produce stateequations for the van der Pol oscillator.andP;  The state equations are compiledinto a procedure (the system derivative) that will evolve the systemnumerically when combined with an appropriate numerical integrator.andM;These operations can involve a nontrivial amount of algebraic manipulation.andO;Even for systems that are specified in closed form, most nonlinear systemscannot be algebraically solved to produce explicit state equations.andP;  In thegeneral case, the program recognizes variables that cannot be eliminated fromthe state equations and compiles an iterative scheme for approximating thesevariables.andP;  This requires symbolic differentiation to produce a Jacobian thatis incorporated into a Newton-Raphson search and to augment the system stateso that it will evolve good starting points for Newton's method at each stepof the integration.andM;For applications such as the Bifurcation Interpreter, one must also compilenumerical routines that find period orbits and track them as the systemparameters vary.andP;  Finding and tracking periodic orbits rests upon determiningthe sensitivity of trajectories to variations in initial state andparameters.andP;  This can be done by evolving the variational system, obtained bysymbolic manipulation of the state equations, and by evolving various derivedsystems obtained by differentiating the state equations with respect toparameters.andP;  Figure 12 shows a numerical routine, automatically generatedfrom the circuit description in Figure 11, that can be combined with anumerical integrator to evolve the states and the variational states of thedriven van der Pol oscillator.andM;The result of the physical modeling, algebraic manipulation, and fancycompilation shown in Figure 12 is a higher-order procedure--asystem-derivative generator for the dynamical system under study.andP;  Thegenerator takes as arguments numerical values for the system parameters andproduces a system-derivative procedure, which takes a system state vector asargument and produces a differential state (a vector that when multiplied byan increment of time is an increment of state).andP;  This system-derivativeprocedure is passed to an integration driver that returns a procedure which,given an initial state, evolves the system numerically.andM;Since all system derivative procedures are constructed to respect the sameconventional interfaces, we may choose from a variety of integration methods.andO;Moreover, the integration methods themselves can be automatically constructedfrom a library of procedures that can be used as interchangeable componentsin the construction of traditional applications.andP;  Going further, we believethat it is not difficult to automatically implement these numericalprocedures as special-purpose hardware, like the Orrery.andM;To support the automatic construction of numerical procedures, we aredeveloping a kernel numerical library that is organized around the liberaluse of high-order procedural abstractions.andP;  For example, Figure 13illustrates this mix-and-match construction of numerical routines, expressingRomberg's method of quadrature as a combination of trapezoidal integrationand Richardson extrapolation, following the exposition given by Halfant andSussman in.andP;  Such a formulation is valuable in that it separates the ideasinto several independent pieces.andP;  Clever ideas need be coded and debuggedonly once, in a context independent of the particular application, thusenhancing the reliability of software built in this way.andP;  For instance,Roylance shows how to construct high-performance implementations of specialfunctions, abstracting recurrent themes such as Chebyshev economization.andP;  Hisautomatically constructed procedure for computing Bessel functions in 40times more accurate, for the same number of terms, than the approximationspecified in the National Bureau of Standards tables.andP;  More significantly,Roylance's formulation clearly exposes the underlying approximation methodsso that parameters, such as the required precision of the routines, can bechanged at will.andM;Besides providing a convenient target for automatic construction of numericalprocedures, powerful abstraction mechanisms help us to express some of thevocabulary and methods of numerical analysis in a form that is close to themathematical theory, and is thus easy to understand and check.andP;  A program isa communication, not just between programmers and computers, but also betweenprogrammers and human readers of the program; quite often, between theprogrammer and him/herself.andP;  One power of programming is that it allows oneto make the knowledge of methods explicit, so that methods can be studied astheoretical entities.andP;  Traditional numerical programs are hand-crafted foreach application.andP;  The traditional style does not admit such explicitdecomposition and naming of methods, thus forfeiting much of the power andjoy of programming.andM;INTELLIGENT TOOLS ARE FEASIBLEandM;The work described demonstrates much of the technology required to produceprograms that can serve scientists and engineers as intelligentproblem-solving partners, programs such as the engineer's assistant that weenvisioned at the beginning of this article.andM;We have shown how to use symbolic algebra to compile high-level descriptionssuch as circuit diagrams directly into numerical modeling and simulationprograms whose elements can be automatically generated from a library ofmix-and-match numerical subroutines expressed at appropriate levels ofabstraction.andP;  Our experience with the Digital Orrery proves that suchnumerical programs can be run at supercomputer speeds, without the costs of ageneral-purpose supercomputer.andP;  The Bifurcation Interpreter, KAM and PLRdemonstrate that intelligent programs incorporating knowledge of dynamicalsystems can automatically control and monitor numerical experiments andinterpret the results in qualitative terms.andP;  The Kineticist's Workbenchillustrates how these capabilities can be combined with knowledge about aparticular domain to produce a sophisticated tool for modeling and analysis.andM;Most systems of interest have more than two degrees of freedom, yet the KAMand PLR programs and the Bifurcation Interpreter depend upon specialproperties of low-dimensional systems.andP;  The grammar of possible phaseportraits and the catalog of generic bifurcations embodied in these programscannot easily be extended to higher dimensional systems.andP;  On the other hand,there are qualitative features of such systems that can be usefully extractedand used to guide numerical experiments.andM;Exploring the qualitative behavior of high-dimensional systems requires acombination of analytic and numeric methods.andP;  Analytic methods can provideclear definitive information, but are often hard to apply or unavailable.andO;There are well-established methods for deriving the local behavior oftrajectories in the neighborhood of fixed points, but few tools exist fordetermining global behavior.andP;  On the other hand, a program could detect asaddle analytically, calculate its stable and unstable manifolds numerically,determine whether the manifolds intersect each other, and draw conclusionsabout global behavior.andM;Moreover, even in high-dimensional spaces, it is still possible to useclustering techniques to examine the set of iterates of a map or the flow ofa differential equation and determine if a trajectory is confined to a lowerdimensional submanifold of the formal state space.andP;  Each reduction indimension is evidence of an integral of motion, such as conservation ofenergy.andP;  One can also (as people do) apply visual recognition techniques tolow-dimensional sections and projections of the full space.andP;  Despite the factthat orbit types and bifurcations in high-dimensional spaces have not beencompletely classified, nonetheless it is still possible to recognizequalitatively different regions of behavior, and to map out these regions instate space and parameter space.andM;Computers, Like People,andM;Need Imagistic ReasoningandM;In observing professional physicists and engineers, we are often struck byhow an expert's &quot;intuitive grasp&quot; of a field is hard to articulate verbally.andO;This is perhaps indicative of the use of non-verbal reasoning processes aspart of the process of solving otherwise verbally presented problems.andP;  Weobserve scientists, mathematicians, and engineers continually using graphicalrepresentations to organize their thoughts about a problem.andP;  The programs weare developing use numerical methods as a means of shifting back and forthbetween symbolic and geometric methods of reasoning.andP;  The programs not onlydraw graphs and state-space diagrams, but they look at these diagrams andhold them in their &quot;mind's eye&quot; so that powerful visual mechanisms can bebrought to bear on what otherwise would be purely symbolic problems.andM;The idea that problem solvers employing visual, analogue, or diagrammaticrepresentations can be more effective than those relying on linguisticrepresentations alone is not new.andP;  Even before 1960, Gelernter'sGeometry-Theorem Proving Machine used diagrams to filter goals generated bybackward chaining.andP;  Nevins's forward-chaining theorem prover focused itsforward deduction of facts on those lines explicitly drawn in a diagram.andO;Stallman and Sussman's El program performed antecedent deductions in circuitanalysis by exploiting the finite connectivity of devices, and Novak's ISAACprogram used diagrams to solve word problems in physics.andM;What is provocative, however, is the suggestion that our thought processesare importantly imagistic, and that visual thinking may play a crucial rolein problem solving.andP;  In scientific computation there has been tremendousemphasis on visualization, but this has mostly meant the development ofcomputer graphics technology to aid human visualization.andP;  We believe thatimagistic reasoning is a very general class of problem-solving strategies,each with its own appropriate representations and technical support.andP;  Theprograms discussed here suggest that it may be at least as important forscientific computation to develop visualization aids for programs as well asfor people.andO;</TEXT></DOC>