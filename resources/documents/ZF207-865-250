<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-865-250  </DOCNO><DOCID>07 865 250.andM;</DOCID><JOURNAL>Computer Language  August 1989 v6 n8 p11(3)* Full Text COPYRIGHT Miller Freeman Publications 1989.andM;</JOURNAL><TITLE>Feedback. (letter to the editor)</TITLE><AUTHOR>Bieber, Dennis Lee; Allison, Mike; Dickson, John; Elo, Arpad;Davis, Richard G.andM;</AUTHOR><DESCRIPT/><TEXT>FEEDBACKandM;Let's make upandM;Dear Editor:andM;For those people who are running against the limits of available memory, HankBlake's goal in &quot;Makeless Making&quot; (COMPUTER LANGUAGE, June 1989, pp.andP;  51-55)is a worthy one.andP;  However, the procedure he describes seems somewhatinefficient and even clumsy.andM;Blake's procedure uses a small executable to append lines to a batch file,with the argument(s) to this executable being the text of a normal makefileaction line.andP;  Make is then forced into an error exit so the batch file may berun.andP;  At the end of the batch file, the driving batch procedure is reinvokedto restart the sequence for the next level of update.andP;  As a result, make isinvoked with the consequent loading of code, scanning of the makefile, andchecking of timestamps, for each component requiring updating!andM;The make utilities I have used all allow for test runs, in which the requiredaction(s) would be logged to standard output, but not executed!andP;  By routingstandard output to a disk file, the appropriate batch file can be created.andO;The syntax (in VAX/VMS MMS, and Aztec's C for the Amiga) is:andM;MMS/OUTPUT=batchfile/NO ACTION make andgt;batchfile --nandM;Finishing the procedure merely requires a simple driving batch file.andP;  Thisbatch file would perform two operations: first, invoke make with the optionsneeded to create a batch file; second, invoke the resultant batch file.andM;This method retains the advantage of releasing the memory used by make beforethe actual build takes place.andP;  Furthermore, it does not require a customizedmakefile and timestamps are scanned only once.andP;  On a medium to large system,the processing of the makefile could be a significant part of total requiredprocessing time.andM;Dennis Lee Bieber Sunnyvale, Calif.andM;Plaugergate revealedandM;Dear Editor:andM;I am writing in reference to P.J.andP;  Plauger's &quot;What you see is what you get&quot;(Programming on Purpose, COMPUTER LANGUAGE, May 1989, pp.andP;  17-23), whichtested and compared three products: Nerd Perfect, 3M MiniDisks, and VenturaPublisher v. 2.0.andP;  While I agree with many of Plauger's points, I do have afew questions I would like clarified.andM;1.andP;  While I have used Nerd Perfect for a number of months and I have beencompletely satisfied with its total lack of errors, bugs, and unfriendlyfeatures, I must say that Plauger seems a bit biased.andP;  For example, he statedthat Nerd Perfect was the only product tested that he did not personally payfor.andP;  The criticisms levelled at the other two products lead me to questionPlauger's ethics and morals.andM;2.andP;  Plauger stated that the 3M MiniDisks were not accompanied by anydocumentation.andP;  I beg your forgiveness, but I find fault with this claim.andO;Although I do not use 3M disks, I do utilize a similar product from Kodak.andO;Plauger failed to take into account that each product was separately wrappedand each disk comes complete with its own documentation in five languages, iswell-illustrated, and has a toll-free assistance number (mine even has alifetime warranty).andP;  Not to mention that the box has a complete descriptionyou can read before purchase as well as another toll-free number forassistance on the outside of the package (intangible values at least).andP;  Alsoincluded at no extra change is a label-making kit with gummed labels thatstick to almost anything, the disks being a notable exception.andP;  Thus I feelPlauger was a bit hard on the minidisk market.andM;3.andP;  Somehow the makers of Ventura Publisher obtained a list of the registeredusers of Nerd Perfect and have been sending us some interesting productliterature.andP;  They claim that a registered Nerd Perfect user is authorized a$10 credit off Ventura's price and they made some direct comparisons, evengoing so far as to call the magnetic media still bound in the jacket a bonusrather than a bug.andM;4.andP;  Like so many product reviewers, Plauger used an in-house benchmark totest the software rather than utilizing public benchmark.andP;  For example, howdo we know what the packing materials were for the velocity tests?andP;  Were theproducts drop-tested in their factory package or were they packed by theexpress company?andP;  Often the express company will optimize drop times byloading the packing with dry stones.andP;  This can affect a difference in speeds.andM;Overall, Plauger's column raised more questions than it answered.andP;  Iaccidently placed a program jacket that still had the magnetic media in it inmy disk drive, which caused it to whirr and strange messages to appear allover my normally blank display.andP;  COMPUTER LANGUAGE's readers deserve a morein-depth review.andP;  I'll be waiting.andM;Mike Allison Monterey, Calif.andM;Columnist P.J.andP;  Plauger responds:andM;1.andP;  I can't imagine how you can question my ethics and morals.andP;  I was bribed.andO;I stayed bought.andP;  What's to question?andM;2.andP;  It's nice that Kodak documents its diskettes better than 3M does, butthey're still not funny.andP;  Maybe they should use Bill Cosby for more than justselling film.andM;3.andP;  Some vendors make a virtue out of any product's shortcoming.andM;4.andP;  I wish I'd thought of using dry stones.andP;  Maybe next time.andM;Call it a drawandM;Dear Editor:andM;I am reading COMPUTEr LANGUAGE for the first time, debating whether to putyour publication on my file 13 list (to read on nights when I can't sleep) orthe &quot;worth my time to read&quot; list.andM;I just finished reading Stan Kelly-Bottle's column &quot;Let no man steal yourtime&quot; (Bit By Bit, COMPUTER LANGUAGE, June 1989, pp.andP;  83-89).andP;  Please tell mewhat he said.andP;  Does he really have something to communicate to professionalsor was the column simply intended as a word game to occupy long airlineflights?andM;On the other hand, Ed Yourdon's &quot;Productivity: A personal choice&quot; (EOF, pp.andO;143-144) was well worth the time spent reading it.andM;John Dickson Takoma Park, Md.andM;Fool for FORTRANandM;Dear Editor:andM;I was surprised that your June Productivity issue failed to address some ofthe most important productivity issues, factors concerning the environment inwhich software is developed.andP;  In 12 years of managing software developmentfor a large chemical company, repeatedly my shop outperformed a neighboringshop on similar projects, often by a factor of 10 to one.andP;  Both shops didmost of their work on timesharing mainframes.andP;  Both worked with minis andmacros.andP;  Wherein lay the difference?andM;* We recognized that it is easier to teach a chemist programming than toteach chemistry to a programmer.andP;  Since our programmers were chemists, theywere intimately familiar with the applications they were developing.andM;* My shop was running DEC-10 under TOPS-10.andP;  The other shop was running anIBM 3033, at first under TSO and later under VM/CMS.andP;  We reaped the benefitsof a machine and operating system that helped rather than hindered programdevelopment.andM;* We recognized that an inference appropriate for a naive user is likely tobe a serious impediment to a programmer.andP;  For example, we rejectedfull-screen editors, which waste too much time in navigation and screenpainting, in favor of TECO, with its powerful macro capabilities, minimalistcommand language, and direct exit to the appropriate compiler.andM;* We did most of our programming in FORTRAN.andP;  Our reasons had nothing to dowith the legendary superiority of FORTRAN for scientific programming.andO;FORTRAN-77 is a very portable language.andP;  It can be used on DEC-10s, PDP-11s,VAXs, and even (albeit with some agony) on IBM hardware.andM;FORTRAN is an ideal language in which to take advantage of reusable code.andO;The programmer has access to many well-documented, relocatable objectlibraries.andP;  We used IMSL, several libraries of graphics routines, and screenand database managers.andP;  To compensate for FORTRAN's notorious weakness inI/O, we built our own library of routines for input parsing, outputformatting, and so on.andP;  This approach is a bit less effective on today's PCsbecause we do not yet have standard calling conventions or linkers that areas fast and smart as LINK-10.andM;FORTRAN's ad hoc but intuitively appealing syntax makes efficient use of aprogrammer's time.andP;  We used a job-estimating algorithm derived from TomGildersleeve's Data Processing Project Management and, based on our ownexperience, worked out the following multipliers to be applied to theestimated work hours depending on the language to be used for implementation:FORTRAN 1.0, BASIC 1.4, Pascal 2.0, MACRO-10 1.5, MACRO-11 2.0, and COBOL10.0.andM;The small multipliers for assembly languages may be surprising, but DECmachines have such powerful instruction sets that MACRO-10 comes close toqualifying under James Martin's criterion for a fourth generation language: alanguage in which an application can be coded in one-tenth as many lines asCOBOL.andM;Contemporary ALGOL-derived, block-structured, nearly-context-free languagesseem to be designed more for the convenience of the compiler writer than theapplication developer.andP;  Pascal, for example, is a useful teaching languagebecause the compiler saves the teacher the trouble of slapping students'wrists for many common errors.andP;  The professional programmer, however, tendsto commit different errors, which no compiler I know of will trap.andM;Worse, these languages introduce new bad habits and new kinds of errors,unheard of in our unstructured youth.andP;  Block-structured languages and topromote monolithic programs designed from the bottom up and programmed fromthe top down, in direct contradiction of techniques many of us have foundeffective.andP;  Furthermore, we must worry about the scope of variables, aquestion that hardly ever arises in FORTRAN, because we must cope with thebegin-end semicolon maze and because the arithmetic operators for addition,subtraction, and multiplication are overloaded, but division is not.andM;The ideas of reusable code, method hiding, and separate compilation, allcommon two or three decades ago, are becoming fashionable again.andP;  We all tendto discard history in favor of the latest toys, but we'd be well advised toconsider what valuables might lie beneath the cobwebs in the attic.andM;Arpad Elo St. Johnsbury, Vt.andM;Taking your MUMPSandM;Dear Editor:andM;Robert S. DeWolf recently seized the concept of data independence inapplication program design (COMPUTER LANGUAGE, June 1989, pp.andP;  57-62) andstruggled to make this worthy principle a practical reality in Pascal.andP;  Heobserves that &quot;DBMSs were developed to provide a better way to manipulatedata than was available using third-generation programming languages.&quot;andP;  BothDeWolf and the inventors of DBMSs to whom he refers have not been affordedthe opportunity to consider the language MUMPS, or these events might haveevolved differently.andM;The article stresses the problems caused by programming languages that assumethe data environment is resident in the volatile memory of the CPU.andP;  DeWolfcalls for &quot;file-oriented data structure&quot; and &quot;data-independent I/O.&quot;andP;  What isthe fundamental property of a computer programming system underlying DeWolf'sobservations?andM;The most general term I can think of is &quot;data persistence.&quot;andP;  If a computerlanguage must have a grammar to operate on data so the data will persistafter the program ceases to exist, the features DeWolf correctly wishes forwill be built into the language definition.andM;MUMPS, developed in the mid-1960s, had data persistence from its veryearliest versions.andP;  When a MUMPS language phrase manipulates data in the formof symbols, the referenced data resides on some form of long-term storage--inthe local system or some distant location on another system.andP;  Today it isroutine for applications based on MUMPS to use data-independent designs thatavoid all of the system overhead mentioned in DeWolf's article.andM;I agree with the objectives that motivate DeWolf to examine Pascal'sshortcomings.andP;  But I discourage the elaboration of a computer languagedefinition such as DeWolf's when the proposed changes lie at the fundamentalfoundations of the language.andM;As a practical matter, I encourage consideration of an alternative languagethat already possesses those desired properties, and is a matureANSI-standard language implemented on virtually every noteworthy computerplatform in use--the MUMPS ANSI X11.1-1984 standard computer language.andM;I look forward to seeing COMPUTEr LANGUAGE provide more information to itsreaders on what distinguishes MUMPS in the field of high-level programmingsystems.andP;  People may not be able to change their commitments to programminglanguages, but they certainly can benefit from the experience that surroundsthe MUMPS technology.andP;  This experience can be applied to other languagesystems.andP;  I imagine DeWolf would feel very differently about the problem hehas addressed if he were familiar with the properties of the MUMPS language.andO;</TEXT></DOC>