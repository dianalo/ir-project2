<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-306-807  </DOCNO><DOCID>07 306 807.andM;</DOCID><JOURNAL>PC Week  Feb 6 1989 v6 n5 p41(1)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>Programming for PM: author shares his own experiences.andO;(Presentation Manager) (interview)andM;</TITLE><SUMMARY>Charles Petzold, author of 'Programming the OS-2 PresentationManager', says that Presentation Manager's graphical programminginterface (GPI) offers many features that are not available inMicrosoft Windows.andP;  GPI offers stored segments that makes iteasier for uses to construct pictures on screen.andP;  GPI is morepowerful than Display PostScript (DPS) and it has a hierarchy ofcoordinate spaces that makes some drawing and structuring taskseasier.andP;  DPS, on the other hand, allows the user to rotate bitmaps and offers more flexibility with fonts.andP;  Ultimately, itshould be possible to accomplish many of DPS's tasks usingPresentation Manager on a laser printer.andM;</SUMMARY><DESCRIPT>Product:   OS/2 Presentation Manager (Graphical user interface) (usage).andO;Topic:     ProgrammersOS-2Interview.andO;Feature:   illustrationportrait.andO;Caption:   Charles Petzold. (portrait)Person:    Petzold, Charles (interviews).andM;</DESCRIPT><TEXT>NEW YORK -- Charles Petzold is the author of ''Programming the OS/2Presentation Manager,'' scheduled to be released by Microsoft Press in March.andM;An expert on programming for both Microsoft Windows and Presentation Manager,Petzold describes himself as ''the only freelance writer making a livingentirely out of writing for OS/2.''andM;In a recent interview with PC Week Senior Editor Pat Bellamah, Petzold sharedhis experiences programming for PM, and proffered words of encouragement toother developers hovering on the brink of OS/2.andP;  This is the second of threeparts.andM;PC Week: How much did the PM change as you were writing this book?andM;Petzold: It changed a lot.andP;  The first version of PM that I saw was in Augustof '87.andP;  It was barely functional and there were no shell programs.andM;You were in a character-mode environment, you'd compile your programs, you'drun them off the command line and the screen would switch to a graphics mode.andO;And then when you ended the program it would switch to a character mode -- ifyou were lucky.andM;It was difficult to keep anything running for more than a couple minutes.andO;The whole graphics programming interface component was missing in the firstversion that I saw.andP;  You had to write to the screen by almost going directlyto the device driver.andM;The next few versions got better.andP;  I was able to finish the book, the previewedition by the end of October of 1987 -- in time for the beta version, whichMicrosoft planned to release in December.andM;PC Week: Did you write it based on actual code, or was it based on theoryabout what the code was supposed to do?andM;Petzold: A little of both.andP;  As it turned out, PM was not ready for developersto see in December of 1987.andP;  Developers didn't get their first look at ituntil March of '88, at which point there had been a number of changes thatrendered all of the programs in the book out of date.andP;  But the basic conceptswere there.andM;Every PM program has what is called a window procedure.andP;  Parameters arepassed to this window procedure, two of which are called message parameters.andO;They started out being 32-bit integers when I was finishing the book, and afew months later they were 32-bit far pointers.andP;  It was a matter of definingthem a little differently, which affects the program.andM;Basically the look and feel of PM programs was really nailed down a long timebefore the book was completed.andP;  But, even in the final few months before therelease, there were still changes that affected every program.andP;  There weresome facilities that were originally in the specification that did not makeit into the final release.andP;  For example, in the graphics programminginterface [GPI] there were a collection of functions that let you work withpaths, which were similar to PostScript paths except that the GPI paths wentfar beyond the PostScript paths.andP;  A lot of that was dropped because itcouldn't be finished in time.andM;It is kind of a cheap way to make a deadline.andP;  If you can't finish up apiece, just drop it from the specification.andM;PC Week: Talk a little bit about the graphics programming capabilities in PMrelative to those in Windows.andM;Petzold: GPI is a real graphics system.andP;  I can go down the list of thingsthat it has that Windows doesn't.andM;It has something called stored segments.andP;  A segment is a collection ofgraphics drawing orders that allow you to more easily construct pictures onthe screen.andP;  By a picture I mean a collection of different graphics objects.andO;You can construct this more easily by breaking it down into components andcreating segments for each component.andP;  Then you play the segment back to drawthe objects.andM;PC Week: How does it compare to DPS?andM;Petzold: For the most part, I think GPI is more powerful than DPS.andP;  GPI hasthis hierarchy of coordinate spaces that makes some structuring some drawingtasks a lot easier, and Display PostScript does not.andM;GPI has much better color support, particularly for bit maps.andP;  PostScript'sbit maps are monochrome with gray shades only.andM;On the other hand, DPS allows you to rotate bit maps and GPI does not.andP;  DPS'sreal strength, of course, is in fonts.andP;  Because it uses vector fonts, itallows these fonts to be scaled and rotated and stretched in any conceivableway.andP;  More accurately, it allows you to perform linear transformations onfonts.andP;  Linear transformation is translation, scaling and rotation.andM;Both GPI and DPS allow you to perform linear transformations on vector fonts.andO;However, PS's implementation of vector fonts is better than GPI's in terms ofhow the fonts will actually look.andP;  DPS takes account of rounding errors whenscaling fonts, and it eliminates those errors.andM;Again, to give you an example, a capital H in Helvetica, the two legs of theH should be exactly the same width.andP;  DPS font generation ensures that theyare.andP;  GPI's vector font logic cannot avoid rounding errors that would makeone leg of the capital H one pixel bigger than the other leg.andP;  It's veryobvious on the screen and even on a 300-dpi [dot-per-inch] laser printer, itwill be noticeable.andM;Unfortunately, we don't have the device drivers necessary to demonstrate thisat this time.andM;All these neat things in DPS -- like rotating fonts and stretching them out,making the fonts as big as the page -- in theory you will be able to do thatfrom the PM on any laser printer, say an HP LaserJet.andP;  GPI will be using itsown vector fonts and going out to the LaserJet with those and ignoring theLaserJet's internal, built-in fonts, unless the program wants to use theinternal LaserJet fonts.andO;</TEXT></DOC>