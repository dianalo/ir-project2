<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-327-882  </DOCNO><DOCID>07 327 882.andM;</DOCID><JOURNAL>Communications of the ACM  June 1989 v32 n6 p756(3)* Full Text COPYRIGHT Assn. for Computing Machinery, Inc. 1989.andM;</JOURNAL><TITLE>Abstracts from other ACM publications.andM;</TITLE><DESCRIPT/><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Abstracts from Other ACM PublicationsandM;ACM Computing Surveys  March 1989andM;Human-Computer Interface Development: Concepts and SystemsandM;for Its Management H. Rex Hartson and Deborah HixandM;Human-computer interface management, from a computer science viewpoint,focuses on the process of developing quality human-computer interfaces,including their representation, design, implementation, execution,evaluation, and maintenance.andP;  This survey presents important concepts ofinterface management: dialogue independence, structural modeling,representation, interactive tools, rapid prototyping, developmentmethodologies, and control structures.andP;  Dialogue independence is the keystoneconcept upon which all the other concepts depend.andP;  It is a characteristicthat separates design of the interface from design of the computationalcomponent of an application system so that modifications in either tend notto cause changes in the other.andP;  The role of a dialogue developer, whose mainpurpose is to create quality interfaces, is a direct result of the dialogueindependence concept.andP;  Structural models of the human-computer interfaceserve as frameworks for understanding the elements of interfaces and forguiding the dialogue developer in their construction.andP;  Representation of thehuman-computer interface is accomplished by a variety of notational schemesfor describing the interface.andP;  Numerous kinds of interactive tools forhuman-computer interface development free the dialogue developer from much ofthe tedium of &quot;coding&quot; dialogue.andP;  The early ability to observe behavior orthe interface--and indeed that of the whole application system--provided byrapid prototyping increased communication among system designers,implementers, evaluators, and end-users.andP;  Methodologies for interactivesystem development consider interface management to be an integral part ofthe overall development process and give emphasis to evaluation in thedevelopment life cycle.andP;  Finally, several types of control structures governhow sequencing among dialogue and computational components is designed andexecuted.andP;  Numerous systems for human-computer interface management arepresented to illustrate these concepts.andM;For correspondence: Department of Computer Science, Virginia PolytechnicInstitute and State University, Blacksburg, Virginia 24061andM;Unification: A Multidisciplinary Survey Kevin KnightandM;The unification problem and several variants are presented.andP;  Variousalgorithms and data structures are discussed.andP;  Research on unificationarising in several areas of computer science is surveyed; these  areasinclude theorem proving, logic programming, and natural language processing.andO;Sections of the paper include examples that highlight particular uses ofunification and the special problems encountered.andP;  Other topics covered areresolution, higher order logic, the occur check, infinite terms, featurestructures, equational theories, inheritance,  parallel algorithms,generalization, lattices, and other applications of unification.andP;  The paperis intended for readers with a general computer science background--nospecific knowledge of any of the above topics is assumed.andM;For Correspondence: Computer Science Department, Carnegie-Mellon University,Pittsburgh, Pennsylvania 15213-3890andM;ACM Transactions on Graphics  April 1989andM;Discrete Smooth Interpolation Jean-Laurent MalletandM;Interpolation of a function f(.) known at some data points of R.sup.p is acommon problem.andP;  Many computer applications (e.g., automatic contouring) needto perform interpolation only at the nodes of a given grid.andP;  Whereas mostclassical methods solve the problem by finding a function defined everywhere,the proposed method avoids explicitly computing such a function and insteadproduces values only at the grid points.andP;  For two-dimensional regular grids,a special case of this method is identical to the Briggs method (see &quot;MachineContouring Using Minimum Curvature,&quot; Geophysics 17, 1 (197)), while anotherspecial case is equivalent to a discrete version of thin plate splines (seeJ. Duchon, Fonctions Splines du type Plaque Mince en Dimention 2, Seminaired'analyse numerique, n 231, U.S.M.G., Grenoble, 1975; and J. Enriquez, J.andO;Thomann, and M. Goupillot, &quot;Application of bidimensional spline functions togeophysics,&quot; Geophysics 48, 9 (1983)).andM;For Correspondence: Centre de Recherche en Informatique de Nancy and EcoleNationale Superieure de Geologie, B.P.andP;  40, 54501 Vandoeuvreles-Nancy,France.andM;Multiple-Knot and Rational Cubic Beta-Splines Barry JoeandM;Goodman (Properties of Beta-splines.andP;  J. Approx.andP;  Theory 44, 2 (June 1985),132-153) gave an explicit formula for cubic Beta-splines on a  uniform knotsequence with varying [beta]1 and [beta]2 values at the knots.andP;  We establishan alternative explicit formula for cubic Beta-splines on a nonuniform knotsequence with constant [beta]1 = 1 and varying [beta]2 values at the knots.andO;This alternative formula can also be used if the knot sequence containsmultiple knots, and is useful for knot insertion.andP;  We show how to efficientlyevaluate a cubic Beta-spline curve at many values using this formula.andP;  Weintroduce rational cubic Beta-spline curves and surfaces that have extraparameters for shape control, and show that they satisfy the same geometriccontinuity conditions and properties as nonrational cubic Beta-spline curvesand surfaces.andM;For Correspondence: Department of Computing Science, University of Alberta,Edmonton, Alberta, Canada T6G 2H1.andM;Curvature Continuity and Offsets for Piecewise Conics Gerald FarinandM;In this paper the construction of curvature continuous, planar curves (openor closed) that consist of conic segments, represented in the rational Bezierform, is discussed, and an iterative procedure to compute their offset curvesis outlined.andM;For Correspondence: Computer Science, Arizona State University, Tempe, AZ85287.andM;Journal of the Association for Computing Machinery  April 1989andM;Probabilistic Inductive Inference L. PittandM;Inductive inference machines construct programs for total recursive functionsgiven only example values of the functions.andP;  Probabilistic inductiveinference machines are defined, and for various criteria of successfulinference, it is asked whether a probabilistic inductive inference machinecan infer larger classes of functions if the inference criterion is relaxedto allow inference wit probability at least p, (0andless;pandless;1) as opposed torequiring certainty.andP;  For the most basic criteria of success (EX and BC), itis shown that any class of functions that can be inferred from examples withprobability exceeding 1/2 can be inferred deterministically, and that forprobabilities p [less than-or equal] 1/2 there is a discrete hierarchy ofinferability parameterized by p.andP;  The power of probabilistic inferencestrategies is characterized by equating the classes of probabilisticallyinferable functions with those classes that can be inferred by teams ofinductive inference machines (a parallel model of inference), or by a thirdmodel called frequency inference.andM;For Correspondence: Department of Computer Science, University of Illinois atUrbana-Champaign, 1304 West Springfield Avenue, Urbana, IL 61801.andM;Size-Time Complexity of Boolean Networks for PrefixandM;Computations G. Bilardi and F. P. PreparataandM;The prefix problem consists of computing all the products x.sub.0.x.sub.1 ...andO;x.sub.j.(j = 0, ..., N - 1), given a sequence x = (x.sub.0., x.sub.1., ...,andO;x.sub.N-1.) of elements in a semigroup.andP;  In this paper we completelycharacterize the size-time complexity prefixes with Boolean networks, whichare synchronized interconnections of Boolean gates and one-bit storagedevices.andP;  This complexity crucially depends upon two properties of theunderlying semigroup, which we call cycle-freedom (no cycle of length greaterthan one in the Cayley graph of the semigroup), and memory-induciveness(arbitrarily long products of semigroup elements are true functions of alltheir factors).andP;  A nontrivial characterization is given ofnon-memory-inducive semigroups as those whose recurrent subsemigroup (formedby the elements with self-loops in the Cayley graph) is the direct product ofa left-zero semigroup and a right semigroup.andP;  Denoting by S and T Size andcomputation time, respectively, we have S = [theta]((N/T)log(N/T)) formemory-inductive non-cycle-free semigroups, and S = [theta](N/T) for allother semigroups.andP;  We have T E [[omega](1), O(N)].andP;  The preceding results arealso the exception of those whose recurrent subsemigroup is a right-zerosemigroup, for which T E [[omega](1), O(N)].andP;  The preceding results are alsoextended to the VLSI model of computation.andP;  Area-time optimal circuits areobtained for both boundary and nonboundary I/O protocols.andM;For Correspondence: G. Bilardi, Department of Computer Science, CornellUniversity, Ithaca, NY 14853; F. P. Preparata, Coordinated ScienceLaboratory, Departments of Electrical and Computer Engineering and  ofComputer Science, University of Illinois at Urbana-Champaign,Urbana-Champaign, IL 61801.andM;Rasterizing Curves of Constant Width John D. HobbyandM;This paper gives a fast, linear-time algorithm for generating high-qualitypixel representations of curved lines.andP;  The results are similar to what isachieved by selecting a circle whose diameter is the desired line width, andturning on all pixels covered by the circle as it moves along  the desiredcurve.andP;  However, the circle is replaced by a carefully  chosen polygon whosedeviations from the circle represent subpixel corrections designed to improvethe aesthetic qualities of the rasterized curve.andP;  For nonsquare pixels,equally good results are obtained when an ellipse is used in place of thecircle.andP;  The class of polygons involved is introduced, an algorithm forgenerating them is given, and how to construct the set of pixels covered whensuch a polygon moves along a curve is shown.andP;  The results are analyzed interms of a mathematical model for the uniformity and accuracy of line widthin the rasterized image.andM;For Correspondence: ATandamp;T Bell Laboratories, 600 Mountain Avenue, Murray Hill,NJ 07974.andM;A Model for Concurrency in Nested Transactions Systems Catrial Beeri, PhilipA. Bernstein, and Nathan GoodmanandM;Today's standard model for database concurrency control, calledserializability theory, represents executions of transactions as partialorders of operations.andP;  The theory tells when an execution is serializable,that is, when the set of operations of a transaction execute atomically withrespect to those of other transactions.andP;  It has been used successfully toprove correctness of most concurrency control algorithms.andP;  Its most seriouslimitation is its inability to represent nested computations conveniently.andM;This paper presents a more general model that permits nested transactions.andO;In this model, transactions may execute subtransactions, giving rise totree-structured computations.andP;  A serializability theory is developed for thismodel, which can be used to prove the correctness of concurrency controlalgorithms for nested transactions and for multi-level database systems.andM;The theory is based on an abstract model of computation that allows arbitraryoperations, and parallel and even nondeterministic programs.andP;  Axioms arepresented that express the basic properties that programs that manage oraccess data need to satisfy.andP;  We use these axioms to derive proof techniques.andO;One new technique--substitution--shows the equivalence of two executions bysubstituting one subcomputation by another, usually shallower (i.e., lessnested), one.andP;  Our proof techniques are illustrated by applying them toseveral well-known concurrency control problems.andM;For Correspondence: C. Beeri, Department of Computer Science, The HebrewUniversity, Jerusalem, Israel 91904; P. A. Bernstein, Digital EquipmentCorporation, Cambridge Research Laboratory, One Kendall Square--Bldg.andP;  700,Cambridge, MA 02139; N. Goodman, Codd and Date International, Suite 109, 6489Candem Avenue, San Jose, CA 95120.andM;On the Path Length of Binary Trees Rolf Klein and Derick WoodandM;It is shown that the external path length of a binary tree is closely relatedto the ratios of means of certain integers and establish the upper boundExternal Path Length [less than-or-equal] N(log.sub.2.N + [delta] -log.sub.2[delta] - 0.6623), where N denotes the number of external nodes inthe tree and [delta] is the difference in length between a longest and ashortest path.andP;  Then it is proved that this bound is tight up to an O(N) termif [delta] [less than-or-equal] *N.andP;  IF [delta] andgt; *N, we construct binarytrees whose external path length is at least as large as N(log.sub.2.N +[theta](N, [delta])[delta] - log.sub.2[delta] - 4), where [theta](N, [delta])= 1/(1 + 2([delta]/N)).andM;For Correspondence: R. Klein, Institu fur Informatik, Universitat Freiburg,Rheinstrasser 10-12, 7800 Freiburg, West Germany; D. Wood, Data StructuringGroup, Department of Computer Science, University of Waterloo, Waterloo,Ontario N2L 3G1, Canada.andM;Average Case Selection Walter Cunto and J. Ian MunroandM;It is shown that n + k - O(1) comparisons are necessary, on average, to findthe kth smallest of n numbers (k [less than-or-equal] n/2).andP;  This lower boundmatches the behavior of the technique of Floyd and Rivest to within alower-order term, 7n/4 [plus-or-minus] 0(n) comparisons, on average, areshown to be necessary and sufficient to find the maximum and median of a set.andO;An upper bound of 9n/4 + 0(n) and a lower bound of 2n - 0(n) are shown forthe max-min-median problem.andM;For Correspondence: W. Cunto, IBM Scientific Center, P.O. Box 388, Caracas,Venezuela; J. I. Munro, Data Structuring Group, Department of ComputerScience, University of Waterloo, Waterloo, Ontario, Canada, N2L 3G1.andM;Optimum Combinations of Sorting and Merging G. K. Manacher, T. D. Bui, And T.andO;MaiandM;In 1979, G. K. Manacher showed that the Ford-Johnson sorting algorithm [FJA],acting on t real numbers, can be beaten for an infinite set  of values t.andO;These values form a partial cover of constant density not close to 1 over aninitial sequence of each band running from u.sub.k = *(4/3)2.sup.k.* tou.sub.k+1 - 1.andP;  This early result depended on showing that the Hwang-Linmerging algorithm [HLA], merging m elements with n, m [less than-or-equal] n,could be surpassed by cm comparisons, where c is an arbitrary small positiveconstant.andM;In this paper, it is shown that the FJA can be beaten for a set of integersof aymptotic density 1 under the greatly weakened assumption that the HLA canbe surpassed by only (1/2 + *)log m comparisons, with * a small positiveconstant.andP;  The even weker assumption that no improvement in the HLA exists,but that an isolated value t.sub.0 exists for which the FJA can be surpassedby only (1 + *)log t.sub.0 comparisons yields the same result.andP;  Only for aset of &quot;refractory&quot; integers of size about t.sup.1/2 in the neighborhood ofeach u.sub.k does the FJA fail to be beaten.andM;All these results depend on a new technique for obtaining optimum sort-mergesequences for best-possible sorting given a merging method.andP;  The techniqueturns out to be amendable to precise asymptotic analysis.andP;  When the techniqueis applied using the most powerful known merging algorithm [Christen's], thedensity mentioned above is still 1, but islands of refractory points stillremain, this time forming setf provably of size [theta](log.sup.2.t) in theneighborhood of each u.sub.k..andM;It is shown that if &quot;information theoretic&quot; merging were achievable, the FJAcould be beaten for all t andgt; u.sub.10 = 1365.andP;  From these results and a fewothers, we adduce evidence in support of our main conjecture: that evenoptimum combinations of optimum merging and Ford-Johnson  sorting will notbeat the FJA when t = u.sub.k., but will instead produce refractory regionsof size [theta](log.sup.2.t) in the neighborhood of each u.sub.k..andM;For Correspondence: G. K. Manacher, Department of Mathematics, Statistics,and Computer Science, University of Illinois, Chicago, IL 60680; T.D.andP;  Buiand T. Mai, Department of Computer Science, Concordia University, Montreal,Quebec, Canada H3G 1M8.andM;A Generalized Algorithm for Centrality Problems on Trees Arnon Rosenthal andJose A. PinoandM;A general framework is presented for rapidly analyzing tree networks tocompute a measure of the centrality or eccentricity of all vertices in thetree.andP;  Several problems, which have been previously described in theliterature, fit this framework.andP;  Some of thse problems have no publishedsolution better than performing a separate traversal for each vertex whoseeccentricity is calculated.andP;  The method presented in this  paper performsjust two traversals and yields the eccentricities of all vertices in thetree.andP;  Natural sufficient conditions for the algorithm to work in linear timeon any given problem are stated.andM;or Correspondence: A. Rosenthal, Xerox Advanced Information Technology, FourCambridge Center, Cambridge, MA 02142; J. A. Pino, Departamento de Cienciasde la Computacion, Universidad de Chile, Casilla 2777, Santiago, Chile.andM;Efficient Dispersal of Information for Security, Load Balancing,andM;and Fault Tolerance Michael O. RabinandM;An Information Dispersal Algorithm (IDA) is developed that breaks a file F oflength L = !F! into n pieces F.sub.i., 1 [less than-or-equal] i [lessthan-or-equal] n, each of length !F.sub.i.! = L/m, so that every m piecessuffice for reconstructuring F. Dispersal and reconstruction arecomputationally efficient.andP;  The sum of the lengths !F.sub.i.! is (n/m) .andP;  L.andO;Since n/m can be chosen to be close to 1, the IDA is space efficient.andP;  IDAhas numerous applications to secure and reliable storage of information incomputer networks and even on single disks, to fault-tolerant and efficienttransmission of information in networks, and to communications betweenprocessors in parallel computers.andP;  For the later problem provablytime-efficient and highly fault-tolerant routing on the n-cube is achieved,using just constant size buffers.andM;For Correspondence: Harvard University Center for Research in ComputingTechnology, Aiken Computation Laboratory, Cambridge, MA 02138.andM;ACM Transactions on Computer Systems  June 1989andM;An Analytical Cache Model Anant Agarwal, Mark Horowitz, and John HennessyandM;Trace-driven simulation and hardware measurement are the techniques mostoften used to obtain accurate performance figures for caches.andP;  The formerrequires a large amount of simulation time to evaluate each cacheconfiguration while the latter is restricted to measurements  of existingcaches.andP;  An analytical cache model that uses parameters extracted fromaddress traces of programs can efficiently provide estimates of cacheperformance and show the effects of varying cache parameters.andP;  Byrepresenting the factors that affect cache performance, we develop ananalytical model that gives miss rates for a given trace as a function ofcache size, degree of associativity, block size, subblock size,multiprogramming level, task switch interval, and observation interval.andP;  Thepredicted values closely approximate the results of trace-driven simulations,while requiring only a small fraction of the computation cost.andM;For Correspondence: Computer Systems Laboratory, Stanford University,Stanford, CA 94305.andP;  A. Agarwal is currently with the Laboratory for ComputerScience (NE 43-418), MIT, Cambridge, MA 02139.andM;Decentralizing a Global Naming Service for ImprovedandM;Performance and Fault Tolerance David R. Cheriton and Timothy P. MannandM;Naming is an important aspect of distributed system design.andP;  A naming systemallows users and programs to assign character-string names to objects, andsubsequently use the names to refer to those objects.andP;  With theinterconnection of clusters of computers by wide-area networks andinternetworks, the domain over which naming systems must function is growingto encompass the entire world.andM;In this paper we address the problem of a global naming system, proposing athree-level naming architecture that consists of global, administrational,and managerial naming mechanisms, each optimized to meet the performance,reliability, and security requirements at its own level.andP;  We focus inparticular on a decentralized approach to the lower levels, in which namingis handled directly by the managers of the named objects.andP;  Client-namecaching and multicast are exploited to implement name mapping with almostoptimum performance and fault tolerance.andP;  We also show how the naming systemcan be made secure.andP;  Our conclusions are bolstered by experience with animplementation in the V distributed operating system.andM;For Correspondence: D. R. Cheriton, Computer Science Department, StanfordUniversity, Stanford, CA 94305; T. P. Mann, Digital EquipmentCorporation-Systems Research Center, 130 Lytton Ave., Palo Alto, CA 94301.andM;High-Speed Implementation of Rule-Based Systems Anoop Gupta, Charles Forgy,and Allen NewellandM;Rule-based systems are widely used in artificial intelligence for modelingintelligent behavior and building expert systems.andP;  Most rule-based programs,However, are extremely computation intensive and run quite slowly.andP;  The slowspeed of execution has prohibited the use of rule-based systems in domainsrequiring high performance and real-time response.andP;  In this paper we explorevarious methods for speeding up the execution of rule-based systems.andP;  Inparticular, we examine the role of parallelism in the high-speed execution ofrule-based systems and study the architectural issues in the design ofcomputers for rule-based systems.andP;  Our results show that contrary to initialexpectations, the speed-up that can be obtained from parallelism is quitelimited, only about tenfold.andP;  The reasons for the small speed-up are: (1) thesmall number of rules relevant to each change to data memory; (2) the largevariation in the processing requirements of relevant rules; and (3) the smallnumber of changes made to data memory between synchronization steps.andO;Furthermore, we observe that to obtain this limited factor of tenfoldspeed-up,  it is necessary to exploit parallelism at a very fine granularity.andO;We propose that a suitable architecture to exploit such fine-grainparallelism is a shared-memory multiprocessor with 32-64 processors.andP;  Usingsuch a multiprocessor, it is possible to obtain execution speeds of about3800 rule-firings/sec.andP;  This speed is significantly higher than that obtainedby other proposed parallel implementations of rule-based systems.andM;For Correspondence: A. Gupta.andP;  Computer Science Department, StanfordUniversity, Stanford, CA 94305; C. Forgy and A. Newell, Computer ScienceDepartment, Carnegie-Mellon University, Pittsburgh, PA 15213.andO;</TEXT></DOC>