<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-631-428  </DOCNO><DOCID>07 631 428.andM;</DOCID><JOURNAL>PC Week  Sept 11 1989 v6 n36 p76(1)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>OOP goes beyond the commonsense meaning of 'object.' (part 2)(object-oriented programming; Applied Intelligence) (column)</TITLE><AUTHOR>Martin, James.andM;</AUTHOR><SUMMARY>Object-oriented programming, a new technology that is changing theway programmers and users deal with computers, can be used todescribe environments where a data-modeling language definesobjects and relationships.andP;  The programmer's objects can representboth physical entities, such as inventory items, and abstractentities, such as file browsers.andP;  A programming object can be usedto 'modularize' any programming concept because it contains bothdata and procedures.andP;  The properties of an object cannot beaccessed directly from outside the object but are manipulated bythe behaviors of the object, which can only be invoked by sendingmessages to the object.andP;  An object's implementation of theproperties and behaviors is hidden from the outside, and theobject's data and processes are encapsulated within the object.andM;</SUMMARY><DESCRIPT>Topic:     Object-Oriented ProgrammingNew TechniqueFunctional CapabilitiesApplications.andO;Feature:   illustrationchart.andO;Caption:   The hierarchical arrangement of objects. (chart)andM;</DESCRIPT><TEXT>OOP Goes Beyond the Commonsense Meaning of 'Object'andM;When we think of the term &quot;object,&quot; we have an intuitive grasph of what thatmeans.andP;  In our everyday world, objects have both properties and behaviors: Anoven has shape and size; it can be bake and broil.andM;An object in a program also has properties and behaviors.andP;  For example, anorder form in a business application has properties such as items and quanityordered, as well as behaviors such as process and verify.andM;It's easy to see how object-oriented programming can be used to describeenvironments in which a data-modeling language defines object andrelationships.andP;  In fact, object-oriented technology originated with languagesdesigned for simulation and is thriving in graphics applications where theuser manipulates objects on the screen.andP;  However, the formal term &quot;object&quot;has meaning beyond the commonsense meaning of the word.andM;The programmer's objects can represent physical entities such as inventoryitems, but they can also represent more abstract entities such as stacks,numbers, file-browsers dispatchers or collections.andM;Because it contains both data (properties) and procedures (behaviors), aprogramming object can be used to &quot;modularize&quot; any programming concept.andO;Examples include collections, which are objects made up of other objects, andbrowsers, which are procedures for examining files.andM;The properties of an object can't be directly accessed from outside theobject.andP;  They are only manipulated by the behaviors of the object.andP;  Thebehaviors of an object can only be invoked by sending messages to the object.andO;The implementation of the properties and behaviors of an object is completelyhidden from the outside.andP;  The object's data and processes are encapsulatedwithin the object.andM;To illustrate this, let's look at portions of a simple customer order-entryapplication.andP;  THe system has an object--the order--which has behaviors thatallow manipulation and inspection of its properties.andP;  The definition mightlook like this:andM;Object class: order; property variables: customer, item, quantity; behaviors:verify, process, back-order, add.andM;An important distinction needs to be made between a class of objects andparticular objects.andP;  The definition of the class of object &quot;order&quot; containsdefinition of the property variables.andP;  Each particular object contains justthe values for the variables of that object.andP;  Messages are sent to theparticular object.andP;  The behaviors for responding to the message depend on thevalues of the variables of a particular object.andM;Object-oriented programming techniques are used to invoke the behaviors in anobject.andP;  For example, the verification message to an order object wouldinvoke an order behavior that would send a message to an inventory objectrequesting the quantity on hand for the item.andP;  The inventory object could, inturn, send messages to other objects to obtain the quantity on hand.andM;The benefit of this approach is increasingly important as systems get largeand complex.andP;  Programmers implementing the order object do not need to knowanything about the internal workings of the inventory object.andP;  They simplyhave to know which messages the inventory object will respond to and sendthose messages to it.andM;In addition, object-oriented languages allow information to be organizedconceptually.andP;  The object definitions are organized in a class hierarchy, asshown in the figure.andP;  A class above an object is its superclass, and the onebelow is a subclass.andP;  Objects in subclasses can inherit any or all of theproperties and behaviors of the classes above.andM;The programmer working with an object-oriented language defines classes ofobjects ranging from the general down to the specific.andP;  For example, indesigning the inventory object shown in the figure, the top of the hierarchymight be the abstract object, &quot;collection.&quot;andP;  It responds to a number ofmessages, such as &quot;add an item&quot; and &quot;return an item.&quot;andP;  It is ageneral-purpose programming construct that might have been predefined in thesystem or might be part of a programmer's library of reusable code.andM;The programmer implementing the inventory object hierarchy might definecategories of parts (such as Type A part, Type B part, and so on) as asubclass of the collection because the inventory is a collection of differenttypes of items.andP;  The inventory items in each category of parts can themselvesbe objects, such as screw or bolt.andP;  The inventory object inherits all thebehaviors of the collection object and category object, so that with nofurther work from the programmer the code can add or delete inventory items.andM;Each of the inventory types would have to respond to the message, &quot;checkreorder.&quot;andP;  Each of the particular types would define &quot;check reorder&quot; as itbest applies to that object, or inherit more general check-reorder behaviorsfrom superclasses.andP;  The complexity of differing reorder policies iscompletely shielded from other parts of the full application, which sends thesame check reorder message to all inventory type objects.andM;The ability of objects to respond to the same message and each implement itappropriately is called polymorphism.andP;  It is one of the aspects ofobject-oriented programming that simplifies complex code.andM;To better understand polymorphism, let's look at the inventory object.andP;  Oneof its behaviors checks all inventory for items that might need reordering.andO;It is simple to make a loop that sends the check-reorder message to each ofthe inventory items in the collection.andP;  The code might look like this:global-check-reorder: do i = 1 to end check-reorder -- [is greater than]inventory-item(i)andM;This has tremendous implications for program maintainability.andP;  As new itemtypes are added to the inventory and new procedures for checking reorders areimplemented, the code for the inventory object never needs to be changed.andO;This is unlike a conventional application that would need to dispatch thecorrect reorder procedure for each inventory type.andM;Fine-Tuned Inventory ControlandM;In this example, polymorphism, coupled with both the inheritance of reorderpolicies for standard parts and the ability to customize and override thestandard policies for particular parts, allows an organization to programmore complexity in the reordering logic of a manufacturing application, thusgiving it more finely tuned inventory control and a significant competitiveadvantage.andM;A number of languages are available for programmers interested inexperimenting with object-oriented programming.andP;  The oldest and perhaps thepurest is Smalltalk, which has some excellent implementations on smallmachines.andP;  The system enforces object-oriented programming throughout and isan excellent tool or learning pure object-oriented programming.andM;A different approach is to enhance existing languages with object-orientedcapabilities.andP;  This is the approach taken by C++ and Objective-C, which areboth C extensions, as well as Flavors, which is a LISP extension.andP;  While thisapproach provides the familiarity of a conventional language, it has thedisadvantage of not forcing the programmer to use object-oriented techniquesconsistently.andP;  The programmer must unlearn the procedural programming stylethat is so ingrained in anyone with even a little programming experience.andO;Old programming habits are hard to break.andM;Next week I'll took at examples of object-oriented programming applicatioins.andO;</TEXT></DOC>