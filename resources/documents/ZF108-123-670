<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-123-670  </DOCNO><DOCID>08 123 670.andM;</DOCID><JOURNAL>Dr. Dobb's Journal  Dec 1989 v14 n12 p140(4)* Full Text COPYRIGHT Mandamp;T Publishing 1989.andM;</JOURNAL><TITLE>OOPSLA '89: fourth down and goal to go. (Fourth Annual Conferenceon object-oriented systems, languages and applications)</TITLE><AUTHOR>Swaine, Michael.andM;</AUTHOR><SUMMARY>Approximately 2,000 people attended OOPSLA '89 in New Orleans andmany seemed pleased with the event.andP;  Apple announced its C++ andsays it is planning a user programming language, AppleScript.andO;Borland announced Turbo Pascal 5.5 that offers object-orientedsupport.andP;  The conference began with tutorials on topics such asintroduction to object-oriented programming (OOP) concepts.andP;  Theactual conference began after two days of tutorials.andP;  Participantsfrom industry, the military and universities presented a varietyof papers.andP;  In at least one instance, however, the programdiscussed was not actually an object-oriented program.andP;  Some talksdiscussed teaching OOP concepts and others discussed usingobject-oriented technology for real applications in commercialsoftware development.andP;  Scientific papers focused on CLOS,Smalltalk and C++ and other topics dealt with reusable code.andM;</SUMMARY><DESCRIPT>Topic:     ConferencesObject-Oriented LanguagesResearch and DevelopmentExhibitsPresentations.andM;</DESCRIPT><TEXT>OOPSLA '89: Fourth Down And Goal to GoandM;As I walked through New Orlean's colorful French Quarter one hot night inearly October, a man caught my sleeve and offered to bet me five dollars thathe could guess where I got my shoes.andP;  I declined his tempting offer, assumingthat the answer was, in a shoe store.andP;  I was in town for the Fourth AnnualConference on object-oriented systems, languages, and applications (OOPSLA'89), and the next morning as I sat listening to a panel discussion, itstruck me that this was an object-oriented gag, deliberately confusing classwith instance.andP;  Maybe OOPS is taking over the world.andM;Talking About a RevolutionandM;It was easy to believe that there was an object-oriented revolution underwaythat day at the show.andP;  There was a lot of enthusiasm, and there were a lot ofpeople.andP;  Although claims of 2000 attendees at last year's OOPSLA may havebeen exaggerated, this year there probably were about that many.andP;  Thepre-registration and on-site registration attendee lists give 1626 names, bymy count.andP;  In any case, the figures don't reflect the mad rush when theexhibit doors opened Tuesday morning.andP;  Although they gave different reasons,everyone I asked said that this OOPSLA was the best they'd been to.andM;Some attendees had a greater presence than most.andP;  Apple announced its C++ andtalked around the edges of Apple Script, its planned user programminglanguage.andP;  Borland announced Turbo Pascal 5.5 with object-oriented support.andO;But there was more interest in what might be coming in the next few monthsfrom Borland and from Microsoft, which was not present as an exhibitor,although a number of Microsoft employees were there.andP;  The biggest presence atOOPSLA '89, though, was definitely C++, already the most widely-usedobject-oriented language and spreading like -- well, you can supply your ownsimile.andP;  Some people think C++ is a disease that we will all soon be requiredto contract.andM;All the expected exhibitors were there: Digitalk, The Whitewater Group, andInteractive Software Engineering in the booth right in front of the entrance.andO;But there were few announcements of importance; this was an ACM conference,not Comdex, and the real action was in the presentations.andM;The tutorials began the conference, and to a certain extent, they reflect thetopics of greatest programmer interest or areas of greatest difficulty in OOPtoday, because they cover the topics that teachers of OOP are finding ademand for.andP;  Most of the tutorials were not specially created for the showbut are classes that people in the field have been putting on over the pastyear.andM;Jon Pugh of Carleton University set up the tutorials, which includedintroductions to OOP concepts, MacApp, and C++, plus object-oriented issuesin databases and concurrency.andP;  There were also tutorials evaluating OOPenvironments, including NextStep, C++, Smalltalk, MacApp, and a portable C++class library for Unix called &quot;ET++,&quot; along with more advanced tutorials onobject-oriented analysis and design, prototyping, and managingobject-oriented software projects.andP;  ET++ is likely to get a lot of attention,because there's not much out there in the way of libraries for C++.andM;After two days of tutorials, the conference proper began.andP;  The emphasis inthe conference program shifted this year away from some peripheral issuessuch as general software engineering, user interface design, and databases,and toward more depth of coverage in theory, language design andimplementation, and concurrency.andP;  Conference Chair Kent Beck explained thatthe peripheral areas were welcomed in the past because they would not havegot a proper hearing in any other venue until recently.andP;  Now, though,object-oriented work is invading the general computer magazines and journalsand other conferences, and OOPSLA could get more focused.andM;The overall impression I got from the attendees, the exhibits, the tutorials,and the conference program, was of a fringe thread in the process of beingpulled up into the general fabric of software research and development.andM;Except, of course, for the fact that there still does not seem to be auniversally accepted definition of object-oriented programming.andM;Views from the Navel ObservatoryandM;If you can believe Johnny Carson, some 20 percent of the people in thiscountry examine their belly buttons daily.andP;  A disproportionate number ofthese navel observers were at the Hyatt Regency in New Orleans the first weekin October, asking themselves and each other what object-oriented programmingis.andP;  To be fair, I should add that just as many people were answering thequestion as asking it; I just wish I could say that they were giving the sameanswer.andM;The answer involves some subset of these features, apparently: Thesedata/code hybrids called objects, object classes of which particular objectsare instances, an inheritance mechanism defined on these classes, and theability to define new object classes.andP;  At least one language has been calledobject-oriented despite the lack of each of these features, although each hasbeen put forth as necessary by one authority or another, and all at OOPSLA'89.andM;The keynote speech by Peter Wegner of Brown University was a proper questionraiser and territory mapper.andP;  Wegner wrote the first book on Ada and gotinterested in object-oriented programming early on because of his perceptionof Ada's deficiencies as a language for software engineering.andP;  In Wegner'sview, the goals of object-oriented programming are: Creating a technology ofoff-the-shelf software components, developing distributed national andinternational software libraries, and growing to a capital-intensive softwaretechnology in which one can buy rather than build.andP;  He also sees, as apresent goal, the extending of OOP to encompass what he calls OOP in thelarge: Object-oriented systems supporting concurrency and persistent objectsfor multiple computers and multiple users, and distributed data andcooperative computing.andM;Not all the presentations followed Wegner's map.andM;One session described SELF, a dynamically-typed object-oriented language.andO;The authors, Craig Chambers, David Ungar, and Elgin Lee, all of Stanford,presented an object-oriented approach that substitutes prototypes forclasses.andP;  Although SELF has objects and inheritance, by Wegner's criteria itis not object-oriented, because it has no classes.andP;  Objects are cloned fromother (prototype) objects, from which they inherit behavior directly.andP;  Inanother session, Ungar predicted that prototype-based languages willultimately replace class-based ones.andM;Of more immediate interest than the implementation peculiarities of the SELFlanguage, though, is the fact that SELF runs twice as fast as the fastestSmalltalk implementation, even though SELF is inherently less efficient thanSmalltalk.andP;  The authors have optimized SELF with techniques applicable (butnot yet applied) to any other object-oriented language, and have not had tohardwire any user-level operations into the compiler, as some researchershave done with Smalltalk implementations.andP;  The bluntly say &quot;researchersseeking to improve performance should improve their compilers instead ofcompromising their languages.&quot;andM;That could be the answer to one of the other nagging issues inobject-oriented programming: Can an OOP system provide the strong typingneeded for software engineering and at the same time remain a good system forrapid prototyping?andP;  Those of a software engineering bent and those who likeOOPS for rapid prototyping both like inheritance, but seem to use it fordifferent purposes.andP;  The differences revolve around type checking and therelationship between types and classes.andP;  Panelists in one session argued thattypes and classes are really orthogonal and should not be confused; and thatprogramming environments could be, but are not, constructed to support bothproduction and exploratory programming.andP;  But one dissenter, David Stempel ofthe University of Massachusetts, said that the only way that one environmentcan support both styles of programming is by really being two environments,with a switch to turn off prototyping features when in production mode.andM;Several talks dealt with the teaching of OOP concepts.andP;  The simplesttechnique presented was in some ways the most intriguing.andP;  Kent Beck of Appleand Ward Cunningham of Wyatt Software Services presented an index-card-basedapproach they have been using to teach OOP.andP;  The approach involvesrepresenting objects with 3 X 5 index cards, and placing the cards inappropriate physical relationship to one another.andP;  A card contains threekinds of information about the object: Its class name, its responsibilities(problems it is to solve), and its collaborators (what other classes itmessages or is messaged by), presumably when in pencil for easy modification.andO;This simple technique apparently underscores the objectness of the objects,and the authors report students picking the cards up and waving them aroundto demonstrate their interaction.andM;Getting Software Engineering on the TrackandM;There's not even agreement that software engineering is the goal of OOP,although many people not only believe it to be the goal but even speak asthough there were such agreement.andM;The early afternoon of the first day of the program was given over tosoftware engineering papers and a panel on the more-or-less SE-oriented topicof the role of transactions in object-oriented systems.andP;  A couple of otherpanel discussions directly addressed software engineering concerns as well,including a discussion moderated by Brad Cox on the software industrialrevolution.andP;  Cox was of the opinion that the revolution will need more thaninterchangeable parts -- it'll also need gauges or templates to ensure thatthe parts fit.andP;  He stressed the importance of developing the gauges apartfrom the parts they test -- possibly even employing a different technology todevelop them.andM;There was one field report from pioneers trying to build a full softwaredevelopment environment using object-oriented technology.andP;  William Harrison,John Shilling, and Peter Sweeney described their system, which runs on a PS/2under OS/2, an RT/PC under AIX, and even an AT under MS-DOS in 640K RAM.andO;(Two of them work for IBM.)andP;  The system has a persistent object store -- theobject-oriented version of a file system.andP;  With some 200,000 objects in theirstore, the authors have some experience with the use of objects, and it issuggestive that they found that organizing objects by type hierarchy did notwork well, because their actual use of objects did not reflect a typehierarchy.andP;  They found some serious hurdles, too, and concluded that theobject-oriented paradigm needs some extensions if it is to be used for thingssuch as version control, and that the paradigm currently does not provide thenecessary support for modifying and extending the paradigm itself.andM;Lt.andP;  Col.andP;  John Morrison of the National Test Bed spoke briefly of one of themore ambitious software projects to date: The Strategic Defense Initiative.andO;Whether one thinks SDI is a brilliant and achievable project or a fast oneput over on a gullible chief executive, SDI research should be a remarkabletestbed for software engineering and reusable components.andP;  One of theelements is intended to be a large national library of reusable softwarecomponents.andM;Real ApplicationsandM;Others discussed how they were using object-oriented technology for realapplications in commercial software development, CAE/CAD, and scientificcomputing.andM;Aldus personnel discussed how they are using object-oriented techniques tomanage software development in expanding teams of developers in the face ofcompetitive pressure to deliver.andP;  The Aldus VAMP system has helped themisolate the developer from differences in Macintosh and Windowsevent-dispatching, for example.andM;There were several presentations on business applications.andP;  Two that seemedsignificant were an implementation of security in an object-oriented systemat MCC, and a language developed at GE Corporate Randamp;D and Calma.andP;  The MCCsystem implemented security levels from Unclassified through Confidential andSecret to Top Secret, more than the average business requires, one wouldthink, but it was classified as a business presentation.andP;  The system fromCalma and GE, called DSM, is designed for commercial CAE/CAD applications.andO;DSM supports most of the features expected in an object-oriented language andis reported to be nearly as efficient as writing straight C code.andP;  The onlyexplanation offered for this remarkable performance was that DSM tradesmemory for speed.andM;Papers on scientific computing came from three distinct object-orientedbackgrounds: CLOS (the Common Lisp Object System), Smalltalk, and C++.andO;Besides talks on systems for function minimization, automaticdifferentiation, and linear algebra, there was an interesting discussion ofscientific prototyping.andP;  I guess what I found most interesting about it wasthe realization that the ability to construct 3-D computer models of objectsand processes and to manipulate the models has become an essential tool ofscientific research.andP;  Sandra Walther and Richard Peskin presented aSmalltalk-based scientific prototyping environment that uses C primitives forefficiency.andM;Is OOP seeing real use in embedded systems development?andP;  Design?andO;Implementation?andP;  And does it have a future there?andP;  The one case study ofembedded system development presented at the conference suggests what onemight expect: OOP was a good tool for managing the development process andcoming up with the basic design in a short time, but the actualimplementation required substantial recoding in C and assembler.andM;The State Space of the ArtandM;Any description of the state-of-the-art in any developing field always soundswrong to some part of the audience.andP;  What looks close to SOA to one personmay be SF to another.andP;  To traditional DP professionals it may be a non-issue:Bill Joy said he did not consider traditional DP professionals a market forOOP because they would not understand it.andP;  Later, being fair, he added thathe'd say the same about most C programmers.andM;Bill Joy said that, not me.andP;  My only point is that the state-of-the-art hasthickness; it's not so much a time slice as a time loaf.andP;  At OOPSLA '89 therewere SOA talks on theory, and SOA talks at the implementation level.andM;A couple of the implementation issues on the edge are efficient garbagecollection and how to implement persistent objects and virtual memory forobjects.andP;  One of the concepts being usefully employed in garbage collectionis the notion of a generation: Several systems separate objects by age,focusing garbage collection on the youngest generation, where turnover islikely to be most rapid.andM;One of the more interesting theoretical papers showed that inheritance,rather than being merely a feature of object-oriented programming, is ageneral method that can be applied to any form of recursive definition.andM;Some presentations were state-of-the-art in any sense, focusing on conceptson the edge, such concurrency, agents, and reflection.andM;Object-oriented programming decomposes problems in ways nicely suited tocommunicating processes in a parallel architecture.andP;  The conferencedemonstrated that there are real implementations of OOP systems thatimplement fine-grained parallelism, although they probably won't run on yourmachine yet.andM;Several talks dealt with agents that may turn out to be important for makingsharable, reusable software components work in practice in widely distributedsystems.andP;  Agents are independently executing entities sensitive to particularstimuli.andP;  Such entities could be trained to search libraries for the softwarecomponents needed.andP;  In &quot;Swaine's Flames&quot; I speculate about the economicconsequences of such a system, but the need for some method of automating thesearch for software components seems clear.andP;  If one of the goals ofobject-oriented programming is reusability, and if objects are going tomultiply as fast as some of the presentations at the conference suggest,automating the process of connecting the component with the person who needsit will be essential.andM;Reflection is the ability of a system to represent and reason about itself.andO;It turns out to be relatively easy to implement some form of reflection inSmalltalk and some other OOP languages.andP;  The benefits discussed at theconference include modifying the behavior of the system, monitoring entitiesof the system, and self reorganization (learning).andP;  Formerly viewed as anacademic topic, reflection is beginning to be considered for practicalimplementations.andP;  One presentation discussed a way of implementing many ofthe benefits of full reflection with no cost in efficiency.andM;Maybe reflective programs could debug themselves.andP;  That would be handy.andM;During one of the panel discussions, Bjarne Stroustrup, humble developer ofan arrogant language, told the audience that anyone claiming thatobject-oriented programming will bring about bug-free software was probablyspending his evenings in the French Quarter guessing where people got theirshoes.andP;  I didn't notice if Lt.andP;  Col.andP;  Morrison laughed.andO;</TEXT></DOC>