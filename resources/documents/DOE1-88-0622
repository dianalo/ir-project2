<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> DOE1-88-0622 </DOCNO><TEXT>This work introduces two-level grammar (TLG) as a programming languagefrom giving consistent and complementary definitions of programming languagesin an implementable manner. It is shown that TLG is a functional programminglanguage. Advantages of using the TLG as a programming language are readabilityand strong typing of function domains. To execute TLG specificationsdirectly, algorithms for sequential and data flow models of interpretationof TLG's are given. TLG allows the closest to programming in naturallanguage the author has seen,and hence TLG programs are self-documenting.With the above advantages, TLG is an elegant executable metalanguage.To demonstrate the capability of TLG to give consistent and complementarylanguage specifications, a Pascal-like language with recursive proceduresand recursive functions and the usual control constructs is used as asubject language. The uniqueness of this work is that this is first timea single metalanguage is being used to define languages using the threeaccepted methods. The significance of the results is that semantics-directedimplementation is made possible from an operational or a denotationaldefinition.</TEXT></DOC>