<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-285-288  </DOCNO><DOCID>07 285 288.andM;</DOCID><JOURNAL>Computer Language  Jan 1989 v6 n1 p73(5)* Full Text COPYRIGHT Miller-Freeman 1989.andM;</JOURNAL><TITLE>Mastering the methodology; Warnier-Orr diagrams represent-and helporganize-programming building blocks.andO;</TITLE><AUTHOR>Olson, Eric J.andM;</AUTHOR><SUMMARY>Warnier-Orr diagrams are popular for illustrating computer programdesign specifications.andP;  Programmers like them because of theirsignal-to-noise ratio, simple diagramming technique andapplicability to both procedural and data flow.andP;  The diagrams,which originated in France and the US in the mid-1970s, are basedin set theory and Boolean algebra and are meant to help users todesign faster, translate designs into code more easily and writestructure programs that run correctly the first time around.andO;Warnier-Orr diagrams were especially created to use withstructured programming.andP;  Their other advantages include makingapplications more clear and maintainable and providing a singlediagramming technique for designing a program and providing codestructure.andM;</SUMMARY><DESCRIPT>Topic:     Structured Design TechniquesProgram Development ToolsApplications Programming.andO;Feature:   illustrationchart.andO;Caption:   Warnier-Orr diagram. (chart)Program control structure. (chart)Selection. (chart)andM;</DESCRIPT><TEXT>Mastering the Methodology A picture is worth a thousand words.andP;  In noactivity is this more true than designing computer programs.andP;  Designspecifications can require volumes unless we use some form of diagram tosummarize them.andP;  But deciding what kind of picture to use is another story.andO;Everyone has a different suggestion: bubble charts, structure charts,Nassi-Schneiderman charts, N2 charts...the list goes on and on.andM;Warnier-Orr diagrams are popular because of their favorable signal-to-noiseratio, simple diagramming technique, and applicability to both procedural anddata flow.andP;  The diagrams were introduced in the mid-1970s by Jean-DominiqueWarnier in France and Kenneth T. Orr in the U.S.andP;  The technique hadfoundations in set theory and Boolean algebra and promised to helpprogrammers design faster, translate designs into code more easily, and writestructure programs that ran correctly the first time.andP;  The approach is asapplicable to large programs as to small ones and works with COBOL, PL/I,Algol, FORTRAN, BASIC, RPG, C, Pascal, and assembly language.andM;Warnier-Orr diagrams were specifically designed to implement the techniquesof structured programming.andP;  These techniques require six basic features:hierarchy, sequence, repetition, selection, concurrency, and recursion.andP;  Allof these elements may be expressed with Warnier-Orr diagrams.andM;Hierarchy and sequenceandM;Warnier-Orr diagrams are an adaptation of mathematical set theory.andP;  Forexample, normal mathematical notation to represent an ordered set is X =[a,b,c,d].andP;  This denotes that the set, X, consists of elements a, b, c, andd, which could be either atomic elements or subsets.andM;In a Warnier-Orr diagram, X would be the universal and a, b, c, and d wouldbe members or atomic elements.andP;  Figure 1 illustrates such an arrangement.andO;This diagram is read, &quot;Set X consists of a followed by b followed by cfollowed by d.&quot;andM;The important part of the diagram is the connection represented by the brace.andO;It represents a system that is a collection of structural intersections.andP;  Thetechnique clearly depicts the hierarchical relationships and order ofcombinations.andM;The bracket represents flow of control.andP;  Execution begins at the firststatement at the top of the bracket, then flows from statement to statement(as bounded by the bracket) until it reaches the bottom, where it exits backto the next highest level of the structure.andP;  You can see exactly how thisconforms to the rules of structured programming.andP;  Elements of the program areassociated with each other in a hierarchy.andP;  Statements are executed insequence.andP;  And each module has a single entry point and a single exit point.andO;This technique simply doesn't allow gotos or breaks.andM;Repetition and selectionandM;We need more than hierarchy and sequence to represent a system.andP;  We now needto look at the two main control constructs, repetition and selection.andO;Repetition lets us show the number of times a subset occurs within a set.andP;  Todo this, we associate with the repeating set either the notation (n), where nis a finite number representing the number of times the subset is to berepeated, or (0,n) if the number of repetitions is governed by a condition.andO;The existence of a condition is represented in the diagram by a footnotenumber.andP;  The condition is printed at the bottom of the page.andM;Figures 2 and 3 show two similar program control structures.andP;  In Figure 2,Statement-2 is executed exactly three times.andP;  If the statement were to beexecuted at least once and repeated until an end-of-file condition isreached, we would replace (3) with (1,c)?1, where ?1 refers us to a footnotethat explains what the condition is.andP;  This is illustrated in Figure 3.andM;With this technique, you can quickly see how easy it is to represent do-whileand do-until loops.andP;  In the first case, the repetition is represented by(1,n), showing that the loop is executed once before testing the condition.andO;In the second, use (0,n), which indicates that the condition is tested beforethe loop is executed.andP;  If you have ever had to change a do-while loop to ado-until loop in flowchart notation, you know what an effort it is.andP;  Withthis technique, all you have to do is change a 1 to a 0.andM;With selection, you execute one subset under one set of conditions, anotherunder another set of conditions.andP;  The selection is the result of a mutuallyexclusive condition or conditions.andP;  The selection can be based on either atrue or false state of one condition or a series of choices, all mutuallyexclusive, as in a case statement.andP;  We represent the repetition factor as(0,1), indicating that the subset will be repeated either once or not at all(Figure 4).andM;The plus-sign notation (+) represents the exclusive-or comparator.andP;  The barabove condition in the second part of Figure 4 represents negation.andP;  The samenotation can be used to represent data, particularly if we are showing thedata structure of an output such as a record of transactions.andP;  If a customercan have either a credit or a debit but not both in the same transaction, youcan use this method to show that any given transaction entered in the reportcan have one form if it is a credit and another form if it is a debit.andM;The concept of removing the condition from a position of importance to afootnote may seem unusual, but it stresses the importance of what Warnier-Orrdiagrams are meant to show: the relationships among sets and subsets.andP;  Inthis notation, the condition is not lost.andP;  It is merely moved out of the wayso more important issues may be viewed.andM;Concurrency and recursionandM;Concurrency is used to show two or more elements or sets whose order orpresence is not necessarily known.andP;  The order of execution or occurrence canbe random or unknown.andP;  It can also be used to show two or more incompatiblesets, both of which may be operating on the same data simultaneously.andP;  Thisincompatibility is referred to as a structure clash.andP;  Structure clashestypically occur when there is a difference between the hierarchy of the databeing output and the physical device being used to create the physicaloutput.andP;  A logical view of data often does not take things like page breaksand headers into consideration, for instance.andP;  Concurrency is specified bythe + symbol.andM;Recursion is a difficult construct to grasp, but it is clearly represented inWarnier-Orr diagrams (Figure 5).andP;  Basically, recursion means that a set cancontain itself.andP;  It can be used not only to show a routine calling itself butextended to show the same routine being called from different points.andO;Recursion can therefore be used to show blocks of reusable code orsubroutines.andM;Bold or double-line brackets indicate that the subset is identical withanother one someplace else in the diagram.andP;  These brackets serve as areminder that if anything is changed in the subset, it should be changedelsewhere as well.andM;Diagrams in practiceandM;Using only these six constructs, we can theoretically describe any datarelationship or process.andP;  But appreciation of the theoretical base does notautomatically translate into the ability to develop real systems.andP;  To bridgethe gap between theory and practice, I will describe the creation of a smallCOBOL program.andM;A structured program is like a set of notes written in outline form.andP;  Itstarts with a top-level main topic, which is subdivided into a set ofsubtopics.andP;  Each of these may be further subdivided until an end is reached.andO;This process of subdivision is known as decomposition.andM;To illustrate the use of this diagramming technique, let's develop a programthat will print a list of employees of an organization based on informationstored in a file (Figure 6).andM;As a general structure, we know that the program will have a beginningsection where we open files and initialize variables, a main section where wedo the processing, and an ending section where we close the files andterminate the program.andP;  The condition for terminating the program will bereading the last record in the file.andP;  If we could always assume there will beat least one record in the file, we would not need the if statement in theinitialize step.andP;  But we do have to read a record before starting the mainprocess step.andM;Since the condition for terminating the process is encountering the end ofthe file, that step must take place at the bottom of the bracket.andP;  If weplaced it at the top of the bracket, we would have more than one exitpoint--a violation of Warnier-Orr notation and structured programming style.andM;It's now time to flesh out the design.andP;  Around the core structure, we add thelanguage statements that identify the environment, declare the data and filestructure, and carry out the logic of the design.andP;  The value of Warnier-Orrdiagrams is that they clearly show the structure of the program and theconnection of all the pieces.andP;  Software tools (such as Brackets, distributedby Optima Inc., Schaumburg, Ill.) reformat the diagrams into paragraphs ofsource code that can be fed to the compiler.andP;  When changes are necessary, thediagrams are as easy to read as the documentation of the system.andP;  Thediagrams can be changed and the code regenerated.andM;Warnier-Orr diagrams provide a number of advantages.andP;  They reinforce theprinciples of structured programming, making applications clearer and moremaintainable.andP;  And they provide a single diagramming technique that can beused to design the program and provide the structure for the code as well.andO;</TEXT></DOC>