<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-488-576  </DOCNO><DOCID>08 488 576.andM;</DOCID><JOURNAL>Communications of the ACM  March 1990 v33 n3 p323(14)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Integer programming vs. expert systems: an experimentalcomparison. (Artificial Intelligence and Language Processing)(technical)</TITLE><AUTHOR>Dhar, Vasant; Ranganathan, Nicky.andM;</AUTHOR><SUMMARY>A comparison of integer programming (IP) and expert systems (ES)is made via their solution of a course scheduling application incolleges and universities.andP;  Modeling of the constraints involvedin decision making can be done with the mathematical approach ofIP or the symbolic logic method of ES.andP;  An ES called RevisableAcademic Course Scheduler (RACS) produces teaching assignmentswithout contradictions, based on a truth maintenance system andexpert knowledge.andP;  The comparison shows the solution time of IP tobe variable and unpredictable.andP;  RACS's solution time is moreregular and RACS produces a partial solution if it cannot find acomplete one.andP;  About three-fourths of the assignments are the samethrough the two methods.andP;  IP does not handle revisions based onchanging assumptions well without disturbing the overall schedule.andM;</SUMMARY><DESCRIPT>Topic:     Expert SystemsInteger programmingComparisonColleges and UniversitiesScheduling Applications.andO;Feature:   illustrationchart.andO;Caption:   Data hierarchy. (chart)A consistent well-founded state. (chart)Contradiction state. (chart)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Integer Programming vs.andP;  Expert Systems: An Experimental Comparison Virtuallyall decision making situations involve constraints.andP;  What distinguishesvarious types of problems is the form of these constraints.andP;  Depending on howthe problem is visualized, they can arise as rules, data dependencies,algebraic expressions, or other forms.andM;Constraint satisfaction problems (CSPs) have been studied extensively in theoperations research (OR) and artificial intelligence (AI) literature.andP;  In ORformulations constraints are quantitative, and the solver (such as theSimplex algorithm) optimizes (maximizes or minimizes) the value of aspecified objective function subject to the constraints.andP;  In contrast, AIresearch has focused on inference-based approaches with mostly symbolicconstraints.andP;  The inference mechanisms employed include theorem provers,production rule interpreters, and various labeling procedures such as thoseused in truth maintenance systems.andM;It has been apparent for some time that there is a close relationship betweenlogical and quantitative inference.andP;  Dantzig [2] showed how logicalpropositions could be expressed quantitatively using Boolean variablestogether with algebraic operators.andP;  In this way, symbolic constraints can bemodeled in terms of an integer programming formulation.andP;  For example, theconstraint *[X.sub.1], [X.sub.2] [right arrow] [X.sub.3] is equivalent to theclause &quot;[X.sub.1] or not-[X.sub.2] or [X.sub.3]&quot; where each [X.sub.1] is apropositional variable.andP;  A clause can be expressed as an inequality; theabove clause is equivalent toandM;[X.sub.1] + (1 - [X.sub.2]) + [X.sub.3] [is greater than or equal to] 1andM;where the truth values true and false are denoted by 1 and 0, respectively.andO;In general, as has been noted independently by Hinton [7] and Hooker [8], aclause can be expressed as the following inequality: [C.sub.1][X.sub.1] + ...andO;+ [C.sub.n][X.sub.n] [is greater than or equal to] 1 - n(c) where theelements [C.sub.1], [C.sub.2], ..., [C.sub.n] are elements of a row vector C,[X.sub.1], [X.sub.1], [X.sub.2], ..., [X.sub.n] are elements of a columnvector X, and n(c) is the number of negative elements in C.andP;  Each [C.sub.i]is 1, 0, or -1, indicating whether [X.sub.i] appears, does not appear, or*[X.sub.i] appears in the clause respectively.andP;  The above notation is fromHooker [8].andM;In concrete terms, the symbolic/quantitative equivalence means that manyconstraint satisfaction problems can in principle be modeled using symbolicinference techniques employed in expert systems or the quantitativetechniques of OR.andP;  In practice, there are pros and cons to both approaches.andO;One of our objectives has been to study the tradeoffs involved in detail.andM;Over the last year, several researchers of the Reasoning Architectures groupat the Microelectronics and Computer Technology Corporation (MCC) ArtificialIntelligence Laboratory have collaborated with an experienced department headat the University of Texas in analyzing the problem of planning theassignment of faculty to courses, and revising plans as assumptions (aboutfaculty availability and enrollments) change.andP;  The problem is of interest forseveral reasons.andP;  It characterizes many types of planning problems wheresolutions are assumption based or defeasible and must be revised in light ofa changing reality.andP;  The problem also involves a diverse variety ofconstraints, making it a good canonical problem for analyzing differentmodeling approaches.andM;Based on an extensive knowledge engineering effort over the last year, anexpert system has been built and implemented in PROTEUS [14].andP;  The expertsystem (called RACS -- Revisable Academic Course Scheduler) consists of aheuristic rule-based problem solver, which contains the expert's knowledge,and a truth maintenance system (TMS), which maintains a contradiction-freedatabase of assignments.andM;In this article, we present an integer programming formulation correspondingto the expert system and report on our experiences with running this model.andO;We are interested in studying whether the integer programming model canprovide the results that derive from the reasoning process of the expert,whether it can be modified easily to accommodate changes, and how generalpurpose integer programming techniques do in terms of computationalperformance.andM;The remainder of this article is organized as follows.andP;  In the next sectionwe provide a mathematical formulation of the problem and describe its generalstructure.andP;  This is followed by a description of the problem-solver/TMSarchitecture that constitutes the expert system.andP;  We then describe thearchitectural components of the IP implementation and analyze the resultsfrom running this model, comparing them with an expert's decisions whenpresented with the same problem data.andP;  In doing so, we classify some of thelimitations of the mathematical model and describe why the problem-solver/TMScombination does not suffer from these problems (although it has otherdrawbacks).andP;  We conclude with a list of short- and long-term issues that mustbe addressed in order to design more expressive and flexible reasoningsystems.andM;THE INTEGER PROGRAMMING FORMULATIONandM;Generating a course schedule requires assigning faculty to courses whiletaking into consideration a variety of constraints and preferences.andO;Constraints pertain to bounds on the number of sections of courses, minimalfaculty teaching requirements, dependencies (i.e., whoever teaches&quot;Introduction to Logic&quot; must also teach &quot;Advanced Logic&quot;), etc.andP;  Preferencesare expressed by teachers for desired courses and alternatives.andP;  In addition,the scheduler (chairman) expresses preferences in deciding how to deal withconflicts that arise in synthesizing the plan.andP;  After courses have beenassigned, class rooms and times are scheduled.andP;  We do not deal with thelatter problem in this article.andM;The structure of the problem data is presented in Figure 1.andP;  There are threeclasses of data involved: teacher, course, and term.andP;  There are three typesof teachers (three subclasses), each with specific instances.andP;  Likewise,there are two types of courses and instances of these two types, and twoterms -- fall and spring.andP;  Constraints are defined at all levels ofabstraction, in terms of the various classes and instances.andM;The formulation of the problem we present is based on a detailed problemdescription that appears in Petrie et al.andP;  [12].andP;  Many of the constraints inthe IP formulation have been derived from the rules in the expert system.andO;The IP formulation is best presented by first defining all subscripts,variables, and coefficients, followed by the constraints and objectivefunction.andM;SubscriptsandM;i = 1, 2, ..., n instructors j = 1, 2, ..., m courses t = 1, 2 terms (fall orspring) k = 1, 2 ..., p categories of courses (for balancing curriculum)andM;VariablesandM;[X.sub.ijt] = {1 if faculty i is assigned to course j in term t 0 otherwiseandM;CoefficientsandM;[P.sub.j] = load factor of course j (depending on its size and type)[T.sub.i] = teaching load requirement (TL) for teacher i [lb.sub.jt] = lowerbound on sections of course j to be taught in term t [ub.sub.jt] = upperbound on sections of course j to be taught in term t [lb.sub.j] = lower boundon total sections of course j to be taught in year [ub.sub.j] = upper boundon total sections of course j to be taught in year [Y.sub.j] = number ofsections of course j to be taught in the entire year [G.sub.t] = the numberof graduate level courses normally offered during term t [C.sub.ijt] = costof assigning teacher i to course j in term t.andM;This can take on three values: [C.sub.ijt] = { 0 if course j is desired byfaculty i in term t M, a small number if j is an explicit alternative Z, alarge number if j is an implicit alternative or if faculty i can teach coursej in term [t.sub.1] [is not equal to] tandM;Actually, another number is added to the value of c to incorporate theflexibility of a teacher in terms of his capability and propensity to teachalternative courses.andP;  Specifically, teachers are ranked on a scale of 1 to 5(both inclusive) where a 1 expresses least flexibility.andP;  The combined numberis the cost coefficient and expresses a &quot;penalty&quot; associated with assigningfaculty i to course j in term t.andP;  We shall discuss this further shortly.andM;[g.sub.j] = { 1 if j is a graduate level course 0 otherwise [u.sub.j] = { 1if j is an upper division course 0 otherwise [l.sub.j] = { 1 if j is a lowerdivision course 0 otherwise [w.sub.j] = { 1 if j is a writing course 0otherwise [f.sub.j] = { 1 if i is a faculty member 0 otherwise [C.sub.jk] = {1 if course j is in category k 0 otherwise [t.sub.ijt] = { 1 if course j isproposed as a tutorial by i in term t 0 otherwise [AB.sub.j] = { 1 if coursej has the A-B sequence 0 otherwiseandM;ConstraintsandM;1.andP;  Number of teachers assigned to a course in each term should be betweenthe lower and upper bounds on the number of sections of that course:andM;&quot;[Mathematical Expression Omitted]&quot;andM;for 1 [is less than or equal to] j [is less than or equal to] m, and t = 1, 2andM;2.andP;  The total number of sections of course j taught in the year should be:andM;&quot;[Mathematical Expression Omitted]&quot;andM;for 1 [is less than or equal to] j [is less than or equal to] m, and t = 1, 2andM;3.andP;  Each teacher must satisfy some minimal teaching load:andM;&quot;[Mathematical Expression Omitted]&quot;andM;for i = 1, 2,..., n, and t = 1, 2andM;4.andP;  Only professors can teach graduate courses:andM;[X.sub.ijt] [is less than or equal to] 1 - (1 - [f.sub.i])[g.sub.j]andM;for i = 1, 2,..., n, for j = 1, 2,..., m and t = 1, 2andM;5.andP;  No professor can teach more than G graduate courses per year:andM;&quot;[Mathematical Expression Omitted]&quot;andM;6.andP;  Course sequence continuity (A-B) constraint:andM;[AB.sub.j]([X.sub.ij2] - [X.sub.ij1]) [is less than or equal to] 0andM;for i = 1, 2,..., n, and j = 1, 2,..., mandM;Constraint 6 says that someone can only teach a B course in spring if theytaught the A course in the fall.andP;  If someone must teach the B course if theytaught the A course in fall, the inequality must be changed to an equality.andM;7.andP;  There must be at least U upper division writing courses offered eachterm:andM;&quot;[Mathematical Expression Omitted]&quot;andM;for i = 1, 2,..., n and t = 1, 2andM;Similar constraints are formulated for lower division writing courses and thenumber of graduate courses that must be offered each term.andM;Objective FunctionandM;A variety of objective functions can be formulated for this problem dependingon the primary goal.andP;  One reasonable goal is to maximize fit, or minimizedeviations from teachers' desired courses.andP;  To express this, the objectivefunction is:andM;[Mathematical Expression Omitted]andM;This objective function states that the good of the many outweights the goodof the few.andM;Problem StructureandM;If one considers courses as &quot;producing&quot; sections for which there are maximumand minimum supplies (capacities) and teachers as &quot;demand&quot; points, theproblem can be viewed as a transportation problem.andP;  In fact, with constraints1 and 2 are the objective function, the problem is a classical transportationproblem.andP;  This problem has a nice property in that it produces an integersolution for integer inputs.andP;  Thus the problem of fractional assignments doesnot arise.andM;Unfortunately, the third constraint, relating course load factors to teachingload requirements, is a knapsack problem constraint (see page 65 of Garey andJohnson [6] for a description of this problem).andP;  This destroys the integersolution property.andP;  More importantly, the problem becomes NP-complete and itssolution time varies extremely unpredictably.andM;Actually, the real problem is more complex in one other way.andP;  On occasion, ateacher may teach more than one section of a course.andP;  Also, a few courseshave sections of different sizes (i.e., large, double-large) and thereforehave different load factors associated with them.andP;  Modeling this requiresmodifying the decision variable to include another subscript for coursesections.andP;  If this is done, the number of decision variables increasessignificantly thereby increasing the overall complexity of an alreadydifficult to solve problem.andP;  Specifically, the problem becomes a bin packingproblem which is known to be NP-hard [6].andP;  The expert deals with thiscomplexity by assuming default section sizes in making assignments to come upwith a rough initial (usually infeasible) solution, and then for each teachereither increasing assigned section sizes in order to satisfy a teaching loadrequirement, or assigning additional sections of a course to a teacher ifthey have been explicitly requested.andM;The IP formulation deals with this problem in a rather inelegent, thoughpractical way.andP;  Specifically, since relatively few courses (e.g., PHL 304)have sections of different sizes (PHL304Large, PHL304Double-Large), thesedifferent sized sections are treated as different courses with appropriateload factors.andP;  Similarly if a teacher requests more than one section of acourse, they are treated as different courses (e.g., PHL304-1, PHL304-2).andP;  Ineffect, such courses (like PHL304 in this example) are treated as objectclasses; constraints on the number of sections of such a course are thenstated in terms of instances (PHL304Large, PHL304Double-Large etc.) of theclass.andM;EXPERT SYSTEM ARCHITECTUREandM;In the contrast to the IP model, the expert system has no global objectivefunction that guides it toward an optimal solution.andP;  Rather, the process offinding a solution involves a series of local decisions that are mostpreferred at each point in the problem solving process.andM;The expert system consists of two components, a problem-solver that employs agenerate-and-test strategy, and a TMS.andP;  The problem solver is essentially aproduction system consisting of rules whose patterns are matched byassertions (propositions) in a global database.andP;  Each assertion is aproblem-solver datum such as an assignment of a value to a variable (i.e., adecision) or an operation that can result in an assignment.andP;  The problem datais represented in terms of an ISA object hierarchy corresponding to thestructure in Figure 1.andP;  Problem constraints are stated in terms of predicatesthat reference objects in the hierarchy.andP;  For example, if the defaultteaching load for a professor is 9 credits, this would be represented by theproposition &quot;(TL ?F:Professor 9)&quot; where ?F denotes a variable that will unifywith object instances of type Professor.andP;  In this case, TL is a binarypredicate, which is a slot in the Professor object type.andP;  With the aboveproposition, unless the TL for an instance of Professor is otherwisespecified, its value will be 9.andP;  Similarly, the proposition &quot;(max-sectionsPHL304 ?T:Term 10)&quot; states that the maximum number of sections of PHL304 inany term is 10.andP;  For details about the frame-based representation of PROTEUS,the reader is referred to [15].andM;Apart from the data that are specified as part of the problem description,the problem-solver creates data corresponding to the assignments ingenerating the solution.andP;  Each problem-solver datum has a justificationassociated with it.andP;  The justification encodes the reasons for belief in thedatum.andP;  The task of the TMS is to ensure that the global database iscontradiction-free, that is, the data are logically consistent (their truthvalues do not result in logical contradictions).andM;Before describing the problem-solver it is expedient to explain how the TMSworks.andP;  For an overview of truth maintenance systems, the reader should referto survey articles by Reinfrank [16], McAllester [11], or Dhar [4].andP;  However,the fundamental concepts and mechanics underlying the TMS should be clear inthe following description.andM;The Truth Maintenance SystemandM;There are two types of TMSs, justification-based [5] and assumption-based[3].andP;  We shall concern ourselves with the former type.andP;  Further, thediscussion is in terms of a Doyle-style TMS since this is the type of TMSused in the expert system.andM;In a TMS, every datum has a support status associated with it; a status of INindicates that the datum is currently believed whereas an OUT indicatesdisbelief.andP;  The values IN and OUT are computed via justifications associatedwith the datum.andP;  Each justification has two parts, an inlist and an outlist.andO;A justification is considered valid if it evaluates to true, that is, if eachdatum in its inlist is IN and each datum in its outlist is OUT.andP;  Ultimately,all data depend on &quot;ground&quot; level justifications of two types, premises andassumptions.andP;  In a premise justification, the inlist and outlist are bothempty.andP;  This type of justification is always valid.andP;  An assumptionjustification has a non-empty outlist, that is, its belief is justified by alack of belief in some other datum.andP;  Such a justification is considerednon-monotonic since its validity depends on a lack of belief in some otherdatum.andP;  Finally, deductive justifications are those in which the outlist isempty.andP;  A datum can have more than one justification associated with it.andP;  Adatum is IN if it has at least one valid justification, otherwise it is OUT.andO;A datum without a justification (an empty justification) is OUT.andM;To illustrate, consider the following example.andP;  Upper case symbols denotefunctions and lists of lower case symbols refer to data:andM;Datum: (assign Sartre PHL304) Justification: (AND (INLIST (wants SartrePHL304) (available PHL304)) (OUTLIST ()))andM;Datum: (assign Kant PHL304) Justification: (AND (INLIST (wants Kant PHL304)(available PHL304)) (OUTLIST ()))andM;Datum: (available PHL304) Justification: (AND (INLIST ()) (OUTLIST(max-sections-satisfied PHL304)))andM;Datum: (wants Sartre PHL304) Justification: (AND (INLIST ()) (OUTLIST(on-leave Sartre)))andM;Datum: (wants Kant PHL304) Justification: (AND (INLIST ()) (OUTLIST (on-leaveKant)))andM;Datum: (max-sections-satisfied PHL304) Justification: ()andM;Datum: (on-leave Sartre) Justification: ()andM;Datum: (on-leave Kant) Justification: ()andM;The example can be visualized in terms of the graph in Figure 2 which showsthe justifications of data referenced in the previous justifications.andP;  Eachcircle corresponds to a justification, with an arrow pointing to thejustified datum, positive arcs connected to the elements of the inlist andnegative arcs connected to the elements of the outlist.andP;  The datum &quot;(assignSartre PHL304)&quot; has a two element inlist.andP;  The datum &quot;(wants Sartre PHL304)&quot;has an empty inlist and a non-empty outlist, which is a non-monotonicjustification.andP;  The datum &quot;(on-leave Sartre)&quot; has an empty list ofjustifications and is therefore OUT.andP;  If this datum were to acquire a validjustification (if Sartre were to go on leave), its support status and that ofthose that depend on it must be reevaluated.andP;  Specifically, the &quot;(wantsSartre PHL304)&quot; would become OUT, also causing &quot;(assign Sartre PHL304)&quot; to goOUT.andM;Actually, in reevaluating the belief status of the data, referred to asreason maintenance, what the TMS really does is to ensure that the data as awhole satisfies two properties, consistency and well-foundedness.andP;  In aconsistent state each datum with at least one valid justification is IN andeach one without a valid justification is OUT.andP;  A state is well-founded if noset of beliefs is mutually monotonically dependent; in terms of a labelednetwork such as that in Figure 2, this means that there is no set of arcsfrom a node to itself all of which are labeled positively.andM;In the expert system, the TMS works in conjunction with the problem solver asfollows.andP;  Each problem-solver action is communicated to the TMS at whichpoint the TMS executes a constraint satisfaction procedure to ensureconsistency and well-foundedness.andP;  Essentially, this involves updating thejustifications associated with each datum such that the two conditions aresatisfied.andP;  A problem-solver action can lead to a constraint violation whichis recorded in the network as a contradiction, that is, a special node calledcontradiction becomes IN.andP;  When this is detected by the TMS, it tries tocompute a new labeling that makes the contradiction OUT.andP;  Control then passesback to the problem solver, and the cycle repeats.andP;  We shall later describein more detail the workings of the TMS in the context of an example.andM;The Problem SolverandM;The problem solver is a production system consisting of a set of rules, someof which are designed to implement a generate-and-test strategy.andP;  It shouldbe noted that there are alternative AI approaches to solving constraintsatisfaction problems that employ a somewhat different problem solvingstrategy, namely, the principle of least commitment (Marr, [9]; Stefik, [17];Waltz [18]).andP;  In least commitment, the solver avoids making a choice thatmight have to be undone later.andP;  In effect, the objective is to avoidbacktracking that is characteristic of the generate-and-test approach.andP;  Theleast commitment approach usually involves a problem solver iterating over&quot;states&quot; or variables that have several possible associated interpretationsthat become successively constrained with each cycle.andP;  This approach has beenapplied most effectively in computational models of vision ([9, 18]).andP;  Afeature of such problems is that there is sufficient new information abouteach state in each iteration so that generate-and-test is in fact a poorstrategy.andP;  The assignment problem we have modeled can be viewed in thisframework as one where the possible interpretations for each state (teacher)are already specified at the outset as a constrained ordered set of courses(the course repertoire).andP;  Therefore, in order to generate a solution, theproblem-solver uses a generate-and-test strategy based on this ordering.andM;In the following paragraphs we describe the expert system architecture usinga simplified set of rules that play a role in one part of the problem solvingprocess.andP;  The rules employ a LISP-like prefix notation that is used inPROTEUS [13].andP;  In the following rules a question mark followed by a symboldenotes a variable, i.e.andP;  ?xxx is the variable xxx.andP;  Each list in a ruleconsists of a pattern (a form) that is matched against a datum in the globaldatabase.andP;  There are two types of rules, forward and backward.andP;  When theproblem solver has a proposition that it is trying to prove to be true, itattempts to do so via a backward rule.andP;  A &quot;[left arrow]&quot; symbol denotes abackward rule; the form appearing before it is the consequent and the onesafter it are antecedents.andP;  In trying to prove a goal, the assertions thatmatch the antecedents become subgoals.andP;  Proving all of these subgoalscompletes the proof of the original goal.andP;  This process is known as backwardchaining.andM;The symbol &quot;[right arrow]&quot; denotes a forward rule.andP;  The forms appearingbefore it are antecedents, the others are consequents.andP;  The forward rule&quot;fires&quot; when assertions match its antecedent.andP;  When this happens, the datum(instance) corresponding to its consequent is added automatically to theglobal database.andP;  This process is known as forward chaining.andM;In the following rules, the variables used in the patterns are as follows:andM;?prof refers to the current professor under consideration.andM;?sem refers to a semester (either fall or spring).andM;?course refers to the course that is under consideration for assignment.andM;?p-cycle refers to the list of professors who have already been consideredfor ?course.andM;?c-cycle refers to the list of courses that have already been considered for?prof.andM;The following backward rule states that the goal of making a course ?course achosen course for professor ?prof in semester ?sem can be achieved if thatcourse is actually desired by the professor unless that course has alreadybeen considered (and presumably failed) for that professor:andM;(Mark-desired-course-as-chosen ;;name of this rule, rule 1 (chosen-course?prof ?course ?sem ?c-cycle) [left arrow] (desired-course ?prof ?course ?sem?c-cycle) (unless (element ?course ?c-cycle)))andM;The following forward rule would fire whenever there is an assertion statingthat courses be assigned to a professor:andM;(Select-Course ;;rule 2 (assign-courses-to-prof ?prof ?sem ?p-cycle ?c-cycle)(chosen-course ?prof ?course ?sem ?c-cycle) [right arrow] (attempt-to-satisfy?prof ?course ?sem ?p-cycle ?c-cycle))andM;In the previous rule, the datum corresponding to the consequent would havethe two data items matching the first two antecedent forms on its inlist.andM;The remaining rules can be interpreted similarly.andP;  Each form is accompaniedby a comment whenever necessary.andM;(Semester-Succeeds ;;rule 3 (attempt-to-satisfy ?prof ?course ?sem ?p-cycle?c-cycle) (unless (unacceptable-for-semester ?sem ?prof ?course ?p-cycle?c-cycle)) [right arrow] (successful ?prof ?course ?sem ?p-cycle ?c-cycle));;mark as successfulandM;In this rule, a datum corresponding to the consequent would have the datummatching the first form on its inlist and the datum matching the form in the&quot;unless&quot; part on its outlist.andP;  In effect, it would have a non-monotonicjustification.andM;(Semester-Fails ;; rule 4 (attempt-to-satisfy ?sem ?prof ?course ?p-cycle?c-cycle) ;;If this semester is not acceptable (unacceptable-for-semester?sem ?prof ?course ?p-cycle ?c-cycle) [right arrow] (failed-semester ?sem?prof ?course ?p-cycle ?c-cycle)) (Contradiction-detection-type-1 ;;rule 5(failed-semester ?sem ?prof ?course ?p-cycle ?c-cycle) [right arrow](CONTRADICTION))andM;Constraint knowledge is also encoded as rules.andP;  These are used to enforceteaching loads, bounds on the number of sections, and other requirements suchas those stated in the IP formulation.andP;  For example, the following rule (inconjunction with other rules such as rule-3 and rule-4) enforces the upperbound on the number of sections for a course during a particular semester:andM;(Course-section-check ;;rule 6 (unacceptable-for-semester ?sem ?prof ?course?p-cycle ?c-cycle) [left arrow] (semester-max-constraint-satisfied ?course?sem))andM;In addition to the assignment and constraint checking types of rules, thesystem also contains rules for contradiction resolution.andP;  When acontradiction arises, the TMS first finds a culprit to be made OUT to resolvethe contradiction.andP;  The process of finding a culprit is a recursive one thatinvolves determining the ground level data (the assumptions) that support thecontradiction.andP;  The contradiction is resolved by invalidating all validjustifications of one of its supporters, called the culprit.andP;  This involvesjustifying some belief on the outlist of the justification being invalidated.andO;For example, if an attempted assignment fails, one way to resolve the problemis to exchange that (chosen) course with an alternative course that thatprofessor can teach.andP;  The following rule shows the use of a predicate, FIX,that is designed to do contradiction resolution as described above.andP;  In [13]terminology, a datum that unifies with its first argument is referred to asthe target, one that unifies with its second as the fix-culprit, and thethird as the fix-elective:andM;(Fix-via-alternative-course ;;rule 7 (fix (failed-semester ?sem ?prof ?course?p-cycle ?c-cycle) (chosen-course ?prof ?course ?p-cycle ?c-cycle) (exchange?alt-course ?course ?prof ?sem ?p-cycle ?c-cycle)) [left arrow](alternative-course ?prof ?course ?alternatives) (element ?alt-course?alternatives))andM;If an exchange is successful in resolving a contradiction, the following rulemakes the alternative course a desired course, which in turn causes the firstrule to make it chosen, thereby repeating the cycle.andM;(Try-An-Alternative ;;rule 8 (exchange ?alt-course ?course ?prof ?sem?p-cycle ?c-cycle) [right arrow] ;;mark the alternative course as desired;;(this will cause the Select-Course -- Rule to fire (desired-course ?prof?alt-course) ;;reject the original course.andP;  (rejected-course ?prof ?course?p-cycle ?c-cycle))andM;An ExampleandM;In order to illustrate how the rules above work, let us consider a scenariowhere among other data, the following are in the database:andM;Sartre wants to teach phl304 in fall: (desired-course sartre phl304)andM;Sartre has as alternatives to phl304 in the fall, phl310 and phl318:(alternative-course sartre phl304 fall (phl310 phl318))andM;Suppose that the maximum allowable sections of phl304 have already beenallocated for fall: (semester-max-constraint-satisfied phl304 fall)andM;Suppose Sartre is now up for consideration (Anselm has already beenconsidered for phl304): (assign-courses-to-prof Sartre fall (Anselm) ())andM;The rules try assigning phl304 to Sartre in the fall and fail because themaximum constraint has been satisfied for the term.andP;  This creates acontradiction as shown in Figure 3.andP;  For simplicity we have truncated thedata, assuming that they refer to Sartre in the fall term.andM;In the dependency network in Figure 3, the contradiction is IN.andP;  The TMSattempts to make the contradiction OUT by finding a culprit and invalidatingone of its in-supporters.andP;  In this case, the culprit is &quot;(chosen-course 304)&quot;(it unifies with the fix-culprit in rule 7) and its in-supporter&quot;(desired-course 304)&quot; is invalidated by putting the &quot;(exchange 310 304)&quot;datum on its outlist, and &quot;(desired-course 310)&quot; gets a valid justificationby the exchange datum (via rule 8) on its inlist.andP;  Finally, the contradictionis put on the outlist of exchange which makes it (the contradiction) OUT.andO;Part of this new stable and well-founded state is shown in Figure 4.andM;In summary, the dependency network maintains the reasons for assignments.andO;This includes desired as well as unexpected assignments such as the oneresulting from the exchange effected by rule 8.andP;  Whenever a justification forsome datum becomes invalid, the TMS computes what beliefs must be revised inorder to restore consistency and well-foundedness.andP;  It is important torecognize that the problem of contradiction resolution is often anunderconstrained one, that is, there are many possible labelings that satisfyconsistency and well-foundedness.andP;  Rules 7 and 8 provide one way of doing itusing domain-specific knowledge.andM;THE IP ARCHITECTUREandM;The integer programming formulation consists of about 700 binary variablesand 300 constraints.andP;  The model has been implemented using the ZOOM (Zero OneOptimization Model) library of the XMP package [10].andP;  XMP includes a modelinglanguage, XML, for expressing the problem.andM;ZOOM solves an integer program as follows.andP;  The LP relaxation (ignoringintegrality) is first solved.andP;  After an LP solution is obtained, a heuristicprocedure, called Pivot and Complement (Balas and Martin [1]) attempts tofind an integer solution.andP;  Basically, this involves a sequence of pivotoperations which put all slacks into the basis at minimum cost.andP;  If afeasible integer solution is found, it is then improved by flipping variablesto their opposite bounds.andM;As shown in Figure 5, we have implemented a preprocessor that translates theinput data used by our expert system into the ZOOM modeling language, XML.andO;The XML interpreter generates an MPS file that is used by ZOOM.andP;  Thepreprocessor takes as input problem data expressed in terms of the objecthierarchy of Figure 1.andP;  Expressing the constraints in XML requires thepreprocessor to translate them into algebraic expressions stated in terms ofdecision variables.andP;  For example, a constraint such as &quot;A faculty member canteach at most 1 graduate course per year&quot; involves searching the ISAhierarchy to locate all instances of faculty, graduate courses and terms,defining the decision variables, and writing out the constraint.andP;  In thisway, only decision variables essential to the formulation are defined.andP;  Thenumber of decision variables can be further reduced by analyzing eachteacher's course repertoire and excluding variables corresponding toimpossible assignments.andP;  For example, if Frege's repertoire slot does notinclude phl381, he can never be assigned this course, and there is no pointin defining a decision variable for this assignment.andM;The resuls produced by ZOOM are translated into a schedule for the user.andO;Although not implemented by us, it is also possible to produce othersummaries and answer questions using the generated schedule and the objecthierarchy.andP;  For example answers to questions like &quot;how many faculty areteaching undergraduate courses that meet twice a week,&quot; can be very useful tothe decision maker.andM;The preprocessor and translator are both implemented in Common Lisp.andP;  Theexperiments were carried out on a SUN-3 workstation, which is also one of theplatforms on which the expert system has been developed.andM;ANALYSIS OF RESULTSandM;The data used by the ES and IP models was provided by the expert.andP;  Itconsisted of profiles of his departmental faculty, their teachingpreferences, and departmental course requirements over the last two years.andO;The expressiveness and performance of the two models could therefore becompared with the real plans that had been formulated by the expert and hisassistants based on actual data.andP;  In this section we present an analysis ofthe results produced by the IP model relative to the expert model on theavailable data.andM;PerformanceandM;Like many integer programs, we found the solution time of the IP model to behighly unpredictable, varying from a few minutes to a few days.andP;  Inparticular, it was extremely sensitive to the teaching load (TL) constraint(number 3 in the IP formulation, the knapsack constraint).andP;  Specifically,varying the value of [T.sub.i] in the range of interest (i.e.andP;  the range inwhich solutions are feasible or &quot;almost feasible&quot;) by as little as 2 percentresulted in orders of magnitude variations in solution time.andP;  This wasindicative of tightly constrained nature of the problem -- in this case, thebounds on the numbers of sections of each course (constraint 1) were suchthat it was difficult to satisfy that constraint and the minimum teachinglocal requirements simultaneously.andM;In all cases, when a solution was found, it was obtained quickly by the pivotand complement heuristic [1] which is incorporated in the ZOOM code.andP;  Italways took under five minutes on a dedicated SUN-3.andP;  If a feasible solutionwas not found with this heuristic, it was not found at all.andP;  (1)  Further,the branch and bound algorithm, which ZOOM resorts to if the heuristic fails,never found a solution even after many hours of running time.andP;  This isbecause the number of fractional valued variables remaining after the LPsolution, typically between 300 and 500, gives rise to an enormous searchtree.andM;In contrast, the expert system's solution time was less volatile.andP;  Underidentical conditions on the SUN-3 it usually takes between 1 and 2 hours forit to generate a solution if one exists.andP;  If it cannot find one, it generatesa partial solution along with a history (in the form of the dependencynetwork) which can be examined to determine why a complete solution could notbe found.andP;  This is an important advantage of the expert system, which wereturn to later.andM;Control of ReasoningandM;In general, the integer program generates a plan that has aboutthree-quarters of the same assignments as those made by the expert.andP;  In somecases the expert was pleasantly surprised by its decisions, but in a largerproportion of the cases the differing assignments were judged to beundesirable.andP;  The most common manifestations of such undesirable results werecases where teachers had too many preparations, too few preparations, and anunnecessarily heavy load of students (e.g., two huge classes that were notrequired for the TLs).andM;Based on the expert's analysis of the solutions generated by the IP, we haveidentified three reasons for the differing assignments which we call singleobjective limitations, compiled knowledge limitations, and globaloptimization limitations.andM;Single Objective LimitationsandM;The objective function used in the formulation expresses one goal of thedecision maker: to give all teachers their desired courses to the extentpossible.andP;  However, in reality there are other goals that the expert tries tosatisfy simultaneously.andP;  One of these is to ensure that as far as possible,each teacher's load is as close as possible to the minimum required.andP;  What isrequired, therefore, is a multi-objective formulation.andP;  Unfortunately, thismakes solution extremely difficult.andP;  Even if the problem is solvable, a&quot;frontier&quot; of optimal solutions is generated which must be evaluated by thedecision maker.andP;  For large problems involving discrete choices, analyzing thegoodness of alternative sets of assignments can be difficult.andM;While the single objective formulation works well in most cases, it sometimesproduces undesirable results.andP;  For example, consider two teachers, Helga andHegel, who have been assigned courses that result in TLs of 9 and 12respectively and that 9 is the minimal requirement.andP;  Assume that Hegel ismore flexible than Helga.andP;  Now, if a section of Ethics needs to be taught andHelga and Hegel are the only qualified teachers, Hegel will be assigned sincehis cost coefficient is lower than Helga's.andP;  Clearly, if balancing loads is aconcern, the course should be assigned to Helga.andM;It is possible to alleviate this problem to some extent by expressing theobjective function as a constraint, but this too has severe limitations.andP;  Onemust decide on a reasonable TL upper bounds for each teacher.andP;  In thisexample, if Hegel's upper bound is 14, the course will be assigned to Helga,as desired.andP;  However, setting such bounds is difficult.andP;  If an inappropriatevalue is used, feasible solutions can be excluded.andM;In contrast, it is relatively easy to encode knowledge about multipleobjectives in the expert system rules.andP;  For example, in the Hegel/Helga case,it is possible to have in the antecedent of a rule that attempts to assigncourses (such as the select-course rule) a form such as &quot;(least-loaded?prof))&quot; which would result in the rule condition becoming true (unificationsucceeding) only with the least-loaded professor.andP;  Such rules ensure that&quot;locally good&quot; decisions will be made but they do not guarantee a globaloptimal solution.andP;  We shall elaborate on this point in the following section.andM;Compiled Knowledge LimitationsandM;The behavior of the system and the solution are very sensitive to the costcoefficients.andP;  Each teacher has three cost values, corresponding to thepenalty associated with assigning a desired course, an explicit alternative,and an implicit alternative (a course that the teacher is capable of teachingbut did not ask for).andP;  The values are organized as shown in Table I.andM;Observing the first column, we see that a teacher with less flexibility (CFI= 1) will get preference for a desired course over a teacher that has moreflexibility.andP;  Moreover, the penalty associated with giving the former anexplicit alternative instead of a desired course (9) is higher than doing itfor the latter (1).andP;  For conflicting desired courses, if the less flexibleteacher gets the desired and the more flexible one gets an explicitalternative, the cost is 1 + 6, otherwise it is 5 + 10.andP;  Similar reasoningapplies to the situation where there are conflicts in the explicitalternatives.andP;  Finally, it should be noted that the coefficients are designedso that a desired plus explicit alternative combination is always preferredto a desired plus implicit alternative combination.andM;The basic problem with the cost coefficients is that they incorporate a lotof compiled knowledge about preferences, flexibility and trading criteriawhich makes the behavior of the system somewhat unpredictable.andP;  We have foundthat changing the cost values and differentials can have significantunforeseen (desirable or undesirable) consequences on the assignments in thefollowing ways.andP;  When the differentials between explicit and implicitalternatives are made larger, the penalty associated with assigning implicitalternatives is high, hence fewer of these are assigned.andP;  However, this alsohas the effect of reducing the desired courses assigned since in conflictingsituations the penalty associated with assigning explicit alternativesrelative to the desired courses is low.andP;  When both types of differentials,desired-explicit and explicit-implicit, were increased, there were a fewchanges in assignments.andP;  However, we were not able to determine a generalpattern underlying these changes nor the reasons for the changes.andM;Another related difficulty with compiled knowledge is that of encodingcomplex preferences in it.andP;  For example, it is usually preferable to teachtwo instead of three courses but if someone needs to teach three (to make therequired TLs) it is preferable to have two sections of one course and onesection of another instead of one section each of three different courses.andO;This is because there is a diminishing marginal effort associated withteaching an additional section of a course.andP;  Such knowledge is not expressedin the coefficients of the objective function, but it is important inmatching the expert's behavior.andM;Another type of knowledge that is difficult to express either in theconstraints or the objective function is one involving unusual situations,that is, an action that is rarely undertaken but is a good one under somecircumstances.andP;  For example, a seminar required in the spring term would notnormally be swapped into the fall term except under certain unusualcircumstances.andP;  Clearly, it is not appropriate to exclude such actions viaconstraints.andP;  Nor is it appropriate to attach heavy penalties to suchactions, since this would prevent them from being taken even underappropriate conditions.andP;  In the expert system, unusual situations can be leftto the contradiction resolution (backtracking) by embedding the appropriateknowledge required for backtracking in fix rules (such as rule 7).andM;The examples above bring out some of the differences in how the IP and ESmodels incorporate problem solving knowledge.andP;  The ES proceeds locally in aGPS-like manner, reducing the differences between an evolving partialsolution and the requirements based on preference information encoded asheuristic rules.andP;  In effect, the rules are sensitive to the state of theevolving solution, giving the system builder considerable control overinference.andM;It is easy to define rules that encode knowledge about the types ofpreferences discussed earlier.andP;  That is, preferences for assigning additionalsections of a course before considering a new course, preference in unusualsituations, or for assigning courses to less loaded teachers as discussedearlier.andP;  In the IP formulation, however, such knowledge is compiled into thecoefficients.andP;  Given the inevitable loss of information resulting from thistransformation it is not surprising that there is a general loss in controlover reasoning with the IP model.andP;  In other words, in the IP formulation, allsuch preference knowledge is usually compiled into one global objectivefunction, which controls how the search space is explored.andP;  We will nowcomment on some of the consequences of global optimization.andM;Global Optimization LimitationsandM;While the minimization of cost is designed to maximize the extent to whichteachers are assigned desired courses as a whole, the system has a tendencyto schedule sections that are as close as possible to the lower bound sincethis also minimizes cost.andP;  This can have the effect of not assigning suchcourses to teachers that desired them.andP;  To illustrate, if at most one sectionon Ethics should be scheduled, the system has a tendency to schedule none.andO;This turns out to be undesirable in situations where a professor requestedEthics but was assigned an alternative instead.andM;Essentially, this problem would be avoided if in the case of a professorasking for that course, the lower bound is set to one instead of zero.andP;  Ineffect, the constraint is conditional on the data.andP;  However, deciding theappropriate bound based on the input data is tricky since tightening it couldrule out feasible solutions or interfere negatively in unforeseen ways withothers' assignments.andM;The only way to express constraints as conditional on the data is to usenon-monotonic justifications.andP;  For the example above, a rule with an &quot;(unless...)&quot; form could be used to set the bound.andP;  Then, an assignment would havethe datum matching the condition in the unless in its outlist, making itclear that one section was scheduled since a professor desired it.andP;  If thatprofessor were to go on leave, invalidating the desire for that course, theTMS could automatically validate the datum specifying the bound of zero.andP;  Ingeneral, a TMS is a natural mechanism for modeling default reasoning of thistype.andM;Another consequence of global optimization is the lack of explanation for itsdecisions.andP;  In analyzing the results of the IP we were generally able toinfer after analyzing the data in detail, why a teacher had not been assigneda desired course.andP;  For the most part, this happened when there wascompetition for a limited number of sections.andP;  Often, however, the rationalefor assignments could not be determined even after considerable analysis ofthe constraints, preferences and flexibility indices.andP;  In such cases, globaloptimization essentially obscures the reasons for assignments.andM;In contrast, the ES attempts to make good local assignments whosejustifications are recorded by the TMS.andP;  The justifications are extremelyuseful for purposes of explanation and for incremental revision of existingdecisions in an evolving solution.andP;  Although the ES has no notion of a globaloptimum, the more the knowledge provided to the system for resolvingconflicts, making choices, etc., the better the quality of its solution.andP;  Thefactors that determine whether the expert system will work better than the IPmodel are the extent to which it is important to specify complex preferencesof the type described in the preceding discussion, and the ease with whichsuch knowledge can be specified by the expert.andP;  These two factors interact ina complex manner.andP;  If complex preferences need to be specified, it is usuallyindicative of the complexity of defining optimal solutions, and hence thelimitations of the objective function as the mechanism driving the search.andO;However, in such situations the expert also finds it increasingly difficultto specify the preference knowledge in terms of abstractions.andP;  Over time,this can result in a situation where interactions among the various pieces ofknowledge become very complex, thereby eroding the modularity of theknowledge base.andM;The Need for Partial SolutionsandM;A major problem during the early runs of the IP model was its inability tofind a feasible integer solution even after many hours of running time.andP;  Twofactors contributed to this situation.andP;  Firstly, the data were often suchthat the constraints were not satisfiable.andP;  For example, if three sections ofa course were required and only two people were qualified to teach it,clearly, no solution would be found.andP;  Secondly, we found that the knapsackconstraints, on TLs, were often too tight for it to find a feasible integersolution.andM;We solved the first problem by analyzing the behavior of the expert system.andO;While that system is also often unable to find a feasible solution, itgenerates a useful partial solution indicating those &quot;holes&quot; in the schedulethat still need to be filled.andM;Partial solutions are extremely useful to the decision maker.andP;  There is noguarantee that the skills of the teachers will cover the requirements(particularly if a significant number of faculty are on leave).andP;  In suchcases, and the decision maker needs to know what the holes are.andP;  Typically,there are several holes in the schedule in the initial draft.andP;  These arepatched by hiring visiting professors, lecturers, or graduate students.andP;  Inthis respect, the integer program is deficient because if it fails to find afeasible integer solution, it runs virtually forever and finally provides nouseful information to the decision maker.andP;  What is required in such cases isan integer solution which even though not feasible, is close to feasible.andM;Even though the results of the expert system pointed us to the sectionrequirements constraints to loosen, we still did not manage to obtain asolution until we simplified the problem by excluding the TL constraints,solving it as a transportation problem.andP;  We then introduced lowered TLrequirements.andP;  As we mentioned earlier, we found that the ability of thesystem to find an integer solution was extremely sensitive to the TL value.andO;On analyzing the expert's behavior, we found that he dealt with the TLrequirements by first ignoring them, making assignments that put teachers'loads in the &quot;ballpark,&quot; and then massaging the schedule to satisfy therequirements.andP;  For the most part, this massaging consists of giving teacherslarger sections which have higher credits (instead of giving additionalcourses which increase the number of preparations) or assigning them lightadministrative responsibilities for which they earn small amounts of credit.andM;PLAN REVISIONandM;A major drawback of the IP model is its lack of support in making revisionsto a plan whose underlying assumptions often change.andP;  Planning courseassignments is based on assumptions about enrollments (which determine thenumbers of sections planned), and faculty availability.andP;  If enrollments turnout to be higher than expected, additional sections must be scheduled.andP;  If afaculty member gets a grant or goes on leave, substitute teachers must befound.andP;  In all such cases, it is important that the overall plan be perturbedas little as possible.andM;Several types of actions can be taken by the decision maker when assumptionschange.andP;  Depending on the change, the action can include hiring assistantinstructors, hiring visiting professors, and swapping assigned courses amongfaculty.andP;  Hiring a visitor is usually feasible only if there is sufficienttime to negotiate a contract.andM;Some changes are easy to manage.andP;  For example, if a faculty that goes onleave was teaching low level undergraduate courses, instructors can be hiredto fill in.andP;  However, if graduate courses are involved revision becomes morecomplex since such courses can be highly specialized, making it difficult tofind faculty qualified to teach them.andP;  Also, faculty are limited to a maximumof one graduate course per year.andP;  In summary, determining who to assign to anunassigned graduate course can be difficult, depending on how many facultyare qualified to teach the course, how flexible they are, whether they arealready scheduled to teach a graduate course, and whether substitutes can befound for such courses.andM;The IP model supports revision as follows.andP;  The decision maker must specifywhat subset of the existing set of assignments can be changed.andP;  Thecomplement set is considered fixed; the assignments in this set are thereforeadded as constraints and the problem is re-solved.andP;  In effect, the decisionmaker must specify what part of the plan is fixed and what is variable.andO;Further, the decision maker must make a judicious choice in specifying whatcombination of lecturers, Assistant Instructors and visiting professorsshould be considered to fill the newly created holes in the plan.andM;Unfortunately, it is usually difficult for the decision maker to specify inadvance with any degree of confidence which parts of the plan should beconsidered variable.andP;  Rather, the process of figuring out what to changerequires negotiation, the results of which serve as further input indetermining what parts of the model can be considered changeable.andP;  In effect,figuring out what should be changed is where support is most needed.andP;  In thissense, the IP model requires the decision maker to do too much.andO;Specifically, if changes are to be minimal, he must keep the variable setsmall, otherwise the new solution can contain too many changes.andP;  However,this small set of changeable assignments should also result in a solutionbeing found, otherwise the exercise is of little use.andP;  Determining theappropriate set can require considerable trial and error; finding it istherefore the really difficult part of the problem where support is mostneeded.andM;Another aspect of revision is that certain changes actually require thatchanges be made to the constraints.andP;  For example, if an instructor who goeson leave was teaching a course that is not strictly required, it is usuallynot re-assigned to anyone when the IP model is run with the new data sincethe objective is to minimize cost.andP;  Clearly, this is problematic if thatcourse has already been listed as an offering.andP;  In such cases, what is reallyrequired is that the constraints be modified to state that the listed coursemust be offered.andM;In order to support revision, it is necessary that a system actually suggestalternative course of action to the decision maker.andP;  For this to be possible,it is necessary for it to record the rationales for existing assignments.andO;For example, if an instructor [I.sub.1] who goes on leave was teaching[X.sub.1] which was desired by but not assigned to [I.sub.2] (perhaps due toan exchange like the one illustrated in the example), it might make sense toconsider whether [I.sub.2] should now teach [X.sub.1].andP;  This type ofreasoning is supportable with a truth maintenance system.andP;  In a TMS, forexample, one of the justifications for the assignment [I.sub.2] [left arrow][X.sub.2] would be the fact that [I.sub.1] was assigned [X.sub.1].andP;  When thislatter proposition is no longer true, the justification for [I.sub.2] [leftarrow] [X.sub.2] becomes invalid, making it possible to assign [X.sub.1] to[I.sub.2].andP;  This process can be repeated recursively until a consistent setof assignments is found.andM;In practice, however, it would probably be undesirable for the above processto happen automatically for two reasons.andP;  Firstly, it is conceivable thattaking away [X.sub.2] from [I.sub.2] could create an even bigger problem ifit is difficult to find someone to teach [X.sub.2].andP;  Secondly, it would notmake sense to take such a course away if a significant amount of preparationhas already gone into preparing for that course or if the teacher assigned toit is inflexible.andM;Regardless of these limitations, a TMS should prove to be useful.andP;  Even if itfails in repeated attempts at finding a solution, the reasons for failure canbe recorded and presented to the decision maker.andP;  In this way, even if theTMS does not find a solution, it provides useful information that can be usedto find a solution.andP;  Since it is desirable to try several avenuessimultaneously, an ATMS [3] might be suitable even though in principle anyTMS could be used.andM;The problem of determining how breakable an assignment is is a much moredifficult problem.andP;  It depends on the flexibility of the teacher, how suitedsubstitutes are for a course, and how much time has already gone intopreparation.andP;  We are currently in the process of trying to formalize theseconcepts so that they might be representable and used by a TMS.andM;DIRECTIONS FOR FUTURE WORKandM;It is clear that the optimization problems solvers such as ZOOM must be mademuch more flexible if they are to prove useful as decision support tools forpractical problems.andP;  Based on our experience with the experiments andanalysis of expert behavior, we feel that there are at least two directionsthat are worthwhile pursuing.andP;  First, a more expressive interface is requiredwhich allows the problem data to be specified as &quot;naturally&quot; as possible.andO;Second, it should be possible to augment ZOOM so that it provides more usefuloutput to the user.andM;On the interface front, we have found that specifying problem data in termsof the object hierarchy and defining constraints in terms of such objects isa very useful functionality for the user.andP;  In effect, we have built a layeron top of XML.andP;  Currently languages like XML and GAMS are used directly asspecification languages.andP;  While they (especially GAMS) allow the user tospecify the problem in terms of a compact notation, they are still relativelylow-level utilities.andP;  We feel there are significant productivity gainspossible by providing a higher level modeling environment where a user canspecify an arbitrary class hierarchy and constraints over it, and have themathematical formulation generated automatically.andP;  We are currently workingon the primitives that such an environment must have for it to be able towork for all mathematical programming problems.andM;We also feel it should be able to build in a truth maintenance functionalityinto the optimization package, making it more flexible and useful to theuser.andP;  In ZOOM, for example, considering that the branch and bound is usuallyunsuccessful (in our case it was always unsuccessful), it makes sense to tryand generate an &quot;almost feasible&quot; solution in cases when the Pivot andComplement heuristic fails.andM;When the heuristic fails, the system knows which constraints are beingviolated (in our problem these were the knapsack constraints).andP;  At thispoint, if the number of non-integer variables is not too large (i.e.andP;  lessthan about 30), the system could perform a local search around thesevariables only (keeping values of all integer variables fixed), that is,attempt different combinations of integer values for the non-integervariables, and keeping a record of the contradictions.andP;  Such a history couldbe used by the system (or the user) to decide which constraints to loosen inorder to generate a feasible solution.andP;  In effect, this boils down toaugmenting the Pivot and Complement heuristic with a primitive truthmaintenance system.andP;  Actually, this is quite similar to what the expert doesin overconstrained situations (i.e.andP;  ignore TLs, obtain a solution, andgradually introduce the TLs).andP;  By enabling the system to loosen constraintsin situations where no solution is in sight, it can begin to approximate theproblem solving behavior of experts.andP;  As a next step in this research we areconsidering ways of incorporating a truth maintenance functionality intooptimizers to handle such situations.andM;Acknowledgments.andP;  We are extremely grateful to Ted Stohr, Charles Petrie andElaine Rich for comments that have greatly improved this article.andP;  The expertsystem rules were formulated by Charles Petrie, and the system wasimplemented by Donald Steiner and Petrie.andP;  We thank Donald Steiner forproviding us with the rules used for the belief revision example in thisarticle.andP;  Robert Causey provided extensive critiques of the solutionsproduced by the integer programming model.andP;  Finally, thanks to Roy Marstenfor ZOOM.andM;(1) The heuristic procedure never found a solution once it started executingits rounding procedure.andP;  (The reader interested in the description of theseheuristics is referred to [1] and [10].andM;REFERENCESandM;[1.] Balas, E., and Martin, C.H.andP;  Pivot and complement -- A heuristic for 0-1programming.andP;  Management Sci.andP;  26, 1 (Jan.andP;  1980), 86-96.andM;[2.] Dantzig, G. Linear Programming and Extensions.andP;  Princeton Univ.andP;  Press,1963.andM;[3.] de Kleer, J.andP;  An assumption-based TMS.andP;  Artif.andP;  Intell.andP;  28, 2 (March1986).andM;[4.] Dhar, V.andP;  A truth maintenance system for supporting constraint-basedreasoning.andP;  Decis.andP;  Support Syst.andP;  (Fall 1989).andM;[5.] Doyle, J.andP;  A truth maintenance system.andP;  Artif.andP;  Intell.andP;  12, 3 (1979).andM;[6.] Garey, M., and Johnson, D.andP;  Computers and Intractability: A Guide to theTheory of NP-Completeness.andP;  W.H.andP;  Freeman and Co., N.Y., 1979.andM;[7.] Hinton, G.E.andP;  Relaxation and its role in vision.andP;  Ph.D.andP;  thesis, Univ.andO;of Edinburgh, 1977.andM;[8.] Hooker, J.N.andP;  A quantitative approach to logical inference.andP;  Decis.andO;Support Systems 4, 1 (March 1988).andM;[9.] Marr, D. Vision.andP;  W.H.andP;  Freeman and Co., N.Y., 1982.andM;[10.] Marsten R. ZOOM/XMP User's Manual Release 4.0, XMP OptimizationSoftware Company, Tucson, Ariz., July 1987.andM;[11.] McAllester, D.andP;  Reasoning Utility Package.andP;  MIT-AI Lab Memo 667, April1982.andM;[12.] Petrie, C., Russinoff, D., and Steiner, D.andP;  Proteus 2: SystemDescription.andP;  MCC Technical Report AI-136-87, May 1987.andM;[13.] Petrie, C., Revised dependency-directed reasoning for defaultreasoning.andP;  Proceedings of the Sixth National Conference on ArtificialIntelligence (AAAI-87), July 1987, pp.andP;  167-172.andM;[14.] Petrie, C., Causey, R., Steiner, D., and Dhar, V.andP;  A Planning Problem:Revisable Academic Course Scheduling.andP;  MCC Technical Report ACT-AI-020, June1989.andM;[15] Proteus.andP;  Proteus: A Default Reasoning Perspective.andP;  MCC TechnicalReport AI-352-86, 1986.andM;[16.] Reinfrank, M.andP;  Lecture Notes on Reason Maintenance Systems.andP;  TechnicalReport INF2 ARM-5-88, Siemens AG, Munich, W. Germany, 1988.andM;[17.] Stefik, M.andP;  Planning With Constraints.andP;  Ph.D.andP;  thesis and TechnicalReport STAN-CS-80-784, Department of Computer Science, Stanford Univ.,andO;Stanford, Calif., 1980.andM;[18.] Waltz, D.andP;  Understanding Line Drawings of Scenes With Shadows.andP;  ThePsychology of Computer Vision, P.H.andP;  Winston, Ed.andP;  McGraw-Hill, N.Y., 1975.andM;ABOUT THE AUTHORSandM;VASANT DHAR is associate professor of Information Systems at the Leonard N.andO;School of Business, New York University.andP;  His research focuses on thestructure of planning and design problems and the development ofrepresentation and reasoning formalisms for knowledge-based systems dealingwith such problems.andM;NICKY RANGANATHAN is a Ph.D.andP;  student of Information Systems at the LeonardN. School of Business, NYU.andP;  He is also affiliated with MCC and the EastmanKodak Corporation where he is analyzing the process of design with theobjective of identifying what parts of this process can be supported withintelligent design systems, and the representations needed to build suchsystems.andM;Authors' Present Address: Information Systems Dept., New York University, 40W. 4 St., Room 619, New York, NY 10003.andM;Permission to copy without fee all or part of this material is grantedprovided that the copies are not made or distributed for direct commercialadvantage, the ACM copyright notice and the title of the publication and itsdate appear, and notice is given that copying is by permission of theAssociation for Computing Machinery.andP;  To copy otherwise, or to republish,requires a fee and/or specific permission.andO;</TEXT></DOC>