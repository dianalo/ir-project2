<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-007-404  </DOCNO><DOCID>08 007 404.andM;</DOCID><JOURNAL>Computer Language  Jan 1990 v7 n1 p101(5)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Structured techniques in the 90s? (structured programming)</TITLE><AUTHOR>Yourdon, Ed.andM;</AUTHOR><SUMMARY>Trends in structured programming are discussed.andP;  Conventionalstructured analysis and design techniques will continue to evolveand will lose their 'mystique,' while automation of systemsdevelopment eliminates programmers.andP;  Maintenance will dominate asfewer new systems are developed, and users will replaceidiosyncratic systems with vendor-supplied equipment which theycan customize.andP;  Revolutionary changes are unlikely.andP;  Structuredanalysis and design will be communicated to the masses.andO;Computer-aided software engineering will eliminate some needs forknowledge about structured design and programming, but not theneed for structured analysis.andP;  Business paradigms have changeddramatically since 1980 with the introduction of powerfulmicrocomputers.andM;</SUMMARY><DESCRIPT>Topic:     Program Development TechniquesFuture of ComputingStructured Design TechniquesStructured Programming.andM;</DESCRIPT><TEXT>Structured techniques in the 90s? &quot;Structured analysis is obsolete.andO;Structured design is irrelevant.andP;  And structured programming is passe.&quot;andP;  Thusbegins the preface to the new edition of one of my books, Managing StructuredTechniques (Prentice Hall, 1988).andM;When I wrote those words, I didn't really believe them.andP;  Indeed, I went on tosay: &quot;If you believe these gloomy pronouncements, here are a few more:capitalism is doomed; greed is out.andP;  Organized religion is on the wane; soonthere will be no more churches.andP;  And Congress is going to vote next year toabolish alcohol and tobacco.andP;  It's even going to balance the budget.&quot;andM;But I've been deeply immersed in a start-up company of my own since then, andI've gained a new perspective.andP;  On a per-employee basis, I probably have morecomputer power at my disposal than most Fortune 500 companies, regardless ofwhether you measure such things in MIPS or megabytes.andM;I haven't written a single line of code in any programming language nor do Iintend to hire anyone to do so.andP;  I haven't drawn any dataflow diagrams orstructure charts; I've had no need for conventional structured analysis ordesign.andM;What does this mean?andP;  Have I grown bored with the techniques I've beeninvolved with for so many years?andP;  Aren't structured analysis and designrelevant for start-up companies?andP;  Will computer-literate users who buildtheir own systems rely on different techniques?andM;Some of the tools and concepts that have served us well in the past won'tserve us well in the future.andP;  People who grew up believing financial securitycould be achieved by putting money in a passbook savings account weredisappointed by the raging inflation of the late 1970s.andP;  And people who madetheir money by investing in the bull market of the 1980s learned on October19, 1987, that the y could lose as well as make money.andP;  Times change.andM;So what's changing in the field of systems development?andP;  What's going to bedifferent about programming, design, and analysis as we enter the 1990s?andP;  Idon't believe just one future awaits us, but a spectrum of futures.andP;  Thefuture of systems development in company A may be quite different from thatof company B.andP;  The future of an individual organization will depend on anumber of factors.andP;  I believe the likely scenarios for the 1990s are these:andM;* Ongoing evolution of structured techniquesandM;* An end to the mystique of structured techniquesandM;* Complete automation of systems development, eliminating programmersandM;* Decreased development of new systems and the dominance of maintenanceandM;* Replacement of idiosyncratic, one-of-a-kind systems with generic,vendor-supplied systems that can be tailored by the user.andM;Scenario 1: ongoing evolution of the structured techniques.andP;  Structuredtechniques have gradually evolved and will no doubt continue to evolve.andP;  Sowhat?andP;  I don't foresee any fundamental, revolutionary changes.andP;  And if arevolution comes, it won't be brought about by our generation of fuddy-duddysoftware engineers.andM;The next generation of software engineers, the kids in high school andcollege today, may come up with something revolutionary.andP;  Maybe they willinvent a three-dimensional data-flow diagram -- but why would they want toextend a paradigm from the 1970s?andM;The evolution of structured techniques and associated software engineeringformalisms will be more important for software companies that developoperating systems, word-processing programs, spreadsheets, and payrollsystems, and then manufacture hundreds of thousands of copies for the retailmarketplace.andP;  While productivity will be an omnipresent goal within suchcompanies, quality and reliability will gradually assume paramountimportance.andP;  It's bad enough to discover a bug in a program of which only onecopy exists; it's far worse to discover one in your spiffy new word processorafter you've shipped 500,000 copies.andP;  Structured techniques are crucial inthis area.andM;Scenario 2: an end to the mystique of structured techniques.andP;  Structuredprogramming, design, and analysis were never difficult concepts.andP;  But becausethey represented such a radical departure from the accepted way of buildingsystems, they had a certain mystique.andP;  Analysts attended five-day workshopsto learn how to draw data-flow diagrams and still came away puzzled.andO;Designers read a 600-page &quot;orange monster&quot; textbook to learn about couplingand cohesion and were overwhelmed by the vocabulary.andM;While structured programming quickly permeated the curriculum of evenhigh-school programming courses, structured analysis and design were oftenreserved for computer-science graduate students.andP;  Even today, many CASEvendors urge their customers to attend a training course on structuredtechniques to understand how to use their products.andM;But the mystique can't last forever; structured techniques are already beingcommunicated to the masses.andP;  Universities now teach structured analysis anddesign at the freshman level; a few high schools teach structured design inthe eleventh and twelfth grades.andP;  Remember, long division was once a collegesubject.andM;Scenario 3: complete automation of systems development and the elimination ofprogrammers.andP;  This, of course, is the dream of CASE vendors.andP;  We certainlydon't have it today, and it won't be a practical reality for the generalclass of systems development projects for another five years.andP;  But even whenwe do have it, all that will be eliminated is the need for knowledge aboutstructured design and programming.andP;  We will still need structured analysisbecause we will still have to provide the CASE tool with a description of theuser's requirements.andM;Or will we?andP;  Another scenario is that the CASE vendors will begin to developlibraries of templates for generic systems.andP;  You want a payroll system?andO;Rather than starting from scratch, why not use a set of data-flow,entity-relationship, and state-transistion diagrams for a generic payrollsystem that you can modify to meet your organization's idiosyncrasies?andP;  Whenfinished, you will have a complete requirements model of your own customizedpayroll system that the CASE stool can translate into the COBOL, C, Pascal,or some other language.andM;To make this work, we need an industry of template makers.andP;  While the ideahas been discussed at countless CASE conferences, I haven't seen anybodyproducing such templates.andM;We will also need a marketplace with at least a reading-level familiaritywith the graphical modeling tools of structured analysis--data-flow andentity-relationship diagrams.andP;  If you see this scenario for your company, itmeans the computer-literate user is not the one who has written a dozen linesof BASIC or who concocts bizarre macros in Lotus, but the one who understandsprocess and system models.andM;Scenario 4: decreased development of new systems and dominance ofmaintenance.andP;  So far, structured techniques have been applied primarily tothe design, development, and analysis of new systems.andP;  But between 50% and80% of the work data-processing organizations do is maintaining old systems.andM;By the mid-1990s, Fortune 500 companies will spend 90% of their resources tomaintain existing information systems.andP;  If only 10% of the resources aredevoted to building new systems, who cares about structured analysis?andO;Indeed, structured analysis and design might disappear entirely if those fewnew systems are developed from generic application packages (see Scenario 5).andM;One trend that makes this scenario less likely is the evolution of hardwaretechnology.andP;  As hardware becomes dramatically more powerful, most largeorganizations will simply operate as usual and enjoy the advantages of doingso faster and cheaper.andP;  Thus, in the 1990s, a few IBM 1401 programs willstill be emulated on supercomputers.andP;  A lot of second-generationsequential-file batch programs will still exist.andP;  And countless on-linetransaction-processing systems will be based on the concept, as John Landryof Cullinet describes it, of presenting dumb forms to a dumb user at a dumbterminal.andM;But gradually users in large organizations--ranging from senior management toclerks and administrators--will find new uses for these computers.andP;  They willdiscover new products, new businesses, new markets, and new ways oforganizing and communicating.andP;  Just as the desktop PC revolutionized thebusiness world of the 1980s, the supercomputer of the 1990s--super-powerful,super-cheap, and super-miniaturized--will bring about radical changes.andM;Those radical changes, whatever they are, will inevitably create a need fornew information systems--systems that cannot be patched together from oddbits and pieces of existing systems.andP;  Today's systems may continue to run orbe scrapped, but new systems will be built in any event.andP;  To the extent thatthis is true, we will still need structured techniques to build the newsystems.andM;Another possibility is that not only will today's information systems bescrapped but the organizations that built them will be scrapped as well.andO;Dinosaurs became extinct because they couldn't adapt to environmentalchanges; old Fortune 500 companies may suffer the same fate.andP;  The new systemsthat will be built to run on the supercomputers of the 1990s might be builtby new companies.andP;  And those new companies may not use classical structuredtechniques but follow the next scenario.andM;Scenario 5: replacement of idiosyncratic, one-of-a-kind systems with generic,vendor-supplied systems that can be tailored by the user.andP;  This is the worldI live in with my new company.andM;To understand what this scenario is all about, consider the followingquestions.andP;  If you were going to start a company of your own tomorrow fromscratch, would you write your own payroll system?andP;  Would you design and codeyour own accounting system?andP;  Would you even consider hiring programmers todesign and code payroll and accounting systems for you?andP;  Obviously not!andP;  Ifyou're going to start the Widget Manufacturing Co., why on earth would youwant to hire programmers or systems analysts?andP;  All they do is take up spaceand consume our precious supply of oxygen.andP;  Better to conserve that oxygenfor widget designers.andM;The paradigm for starting a new business today is fundamentally differentthan it was in the 1960s, 1970s or even the early 1980s.andP;  A partial reasonfor this is the appearance, around 1985, of sufficiently powerful PCs with aadequate, affordable hard-disk storage.andP;  Along with the desktop PC came apotpourri of office-automation technology--fax and Xerox machines, laserprinters, smart phone systems, local area networks, and so forth--that madeit possible for a new business to run a fully automated office and ultimatelyfully automated information systems with little or no need for clerks,administrators, or secretaries.andM;In contrast, 1970s-era office automation often consisted of nothing moresophisticated than an electric typewriter.andP;  When I started my first businessin 1974, I thought I was very advanced because, in addition to a vintage 1966IBM Selectric typewriter, I had a hand-held calculator, purchased fromHewlett-Packard for the outrageous price of $600.andP;  The new-business paradigmof the 1970s inevitably required paper-based information systems during itsformative years.andP;  And the profusion of paper required a small army ofclerical and administrative people to type it, file it, stamp it, process it,send it out, log it in, and so forth.andM;The critical point is that a small army of people forms a tribal culture, andthe tribal culture develops its own idiosyncrasies.andP;  (The tribal cultureoften has little to do with the fundamental business of the company but ismore concerned with the personalities of the people in the office.)andP;  Theinternal, day-to-day business policies and procedures of small company A areoften totally different from those of small company B, even if both are inthe same industry.andM;Sooner or later, the small business grows to the point where it needs or canafford the luxury of a computer.andP;  In my case, it occurred in 1976, two yearsafter the formation of the business.andP;  But two years is long enough to developa rich, complex culture and a mind-numbing array of idiosyncrasies, specialcases, and exceptions.andP;  If you're going to automate the business at thatpoint, you generally end up automating the idiosyncrasies and exceptions too.andO;Thus the automated information system of medium-sized company A looks quitedifferent from that of medium-sized company B.andP;  Each is a customized,one-of-a-kind system, built from scratch by a horde of programmers andsystems analysts.andM;If this is true of relatively small companies that have only been in businessfor a few years, imagine how much more difficult it is to automate thebusiness policies of a century-old business whose tribal folklore ofidiosyncrasies is so rich and subtble that much of it cannot even bearticulated.andP;  And because it can't be articulated, structured techniques arerequired to provide abstract, graphicl models of the business so everyone cancommunicate.andM;None of this is necessary for the new business of 1990.andP;  At a modest cost, itcan operate from day one with a full range of office automation technology.andO;A clerical army is not necessary; with voice mail, fax machines, and wordprocessors, the new business can sometimes escape hiring any clerical people.andO;No tribal culture, no idiosyncrasies.andM;Equally important, the new business can start up with vendor-supplied,generic application packages to handle the fundamental functions of payroll,order entry, invoicing, accounts receivable, accounts payable, generalledger, inventory control, and so forth.andP;  These vendor-supplied packages havetheir own peculiarities and quirks; however, more and more of them provide afacility to tailor the package to the user's own needs.andP;  One example is SBT,a vendor that provides PC-based accounting software written in dBASE III.andO;When you buy the software package, you get the dBASE III source code so youcan tailor it to your heart's content.andM;Even if application software packages couldn't be tailored, it wouldn't muchmatter.andP;  A small business in its formative stages can almost always adapt itspolicies and procedures to conform to the idio-syncrasies of the softwarepackage.andM;During the past five years, the trend has been for package vendors to releasenew versions of their software annually, endowing each version with morefunctionality, more flexibility, and better performance.andP;  What does this haveto do with structured techniques?andP;  Quite simply, it reduces the need forthem.andP;  If my business is conceptually simple because it has fewidiosyncrasies and a nonextistent tribal culture, I don't need abstractgraphical modeling tools to represent it.andP;  If I can buy a software package tocarry out my information-processing needs, I don't have to worry aboutstructured design and programming.andP;  From this perspective, the hot-shot skillfor the next decade will be enterprise modeling: helping new, growingcompanies develop overall models of their businesses from which informationsystems will be generated with no coding, no design, and no data-flowdiagrams.andM;None of this is relevant for most of the older Fortune 500 companies.andP;  On theother hand, remember that some of today's Fortune 500 companies--Apple andCompaq, for example--didn't even exist a decade ago.andP;  In addition to thearguments I've presented, these new companies have yet another reason toeliminate customized programming projects: they are growing too quickly towait for an army of programmers to spend two years developing a system.andM;Iam not saying General Motors and Exxon will disappear tomorrow or in thenext decade.andP;  But it's important to remember that small, start-up companieshave provided virtually all the new jobs in this country in the past 10 yearsand that there has been a net loss of jobs in the larger companies.andP;  Smallcompanies are going to play an increasingly important role in our society forthe rest of this century.andP;  Some of them will grow to become Fortune 500companies along the way, displacing dinosaur companies that will quietlydisappear.andP;  And it's important to keep in mind that for many of these smallcompanies, structured techniques may be viewed an irrelevant anomaly of theidiosyncratic, elephantine systems.andM;Unfortuntately,t here is a fly in the ointment.andP;  I've discovered after twoyears of running an automated business without data-flow diagrams or anyold-style programming that sooner or later (usually much later than wouldhave been true with vintage 1970s businesses), a growing business doesdevelop its own culture and idiosyncrasies.andP;  And sooner or later, generic,vendor-supplied PC packages run out of space and capacity, and their quirks,limitations, bugs, and idiosyncrasies become more and more annoying.andP;  Evenbefore that happens, the difficulties of linking together all of theseparately purchased packages with a common database become untenable.andO;Sooner or later (egad!) it may be necessary to build your own, customizedsystem from scratch.andM;What then?andP;  That's my current position.andP;  My network of Macintoshes has notrun out of power and my hard disks still have plenty of room.andP;  That'scritically important point, because it means I don't have to worry abouthand-coding everything to save a few microseconds.andP;  But the hodge-podgecollection of $200 application packages I've been using for the past twoyears does far more than its makers ever intended.andP;  My wife keeps telling meI'm just inenting problems because I'm really a code bum at heart--but I knowbetter.andP;  The time has come to begin specifying, designing, coding, testing,and maintaining my own system.andM;Argh!andP;  What does a software-engineering-textbook author do when he has tobuild his own system &quot;by the book&quot;?andP;  Buy his own book?andP;  Think of it this way:what would you do if you were your own boss and you could decide to buildyour next system the right way?andP;  What if you had the freedom to build asystem to be really maintainable for the next 10 years?andP;  What would you do?andO;Draw data-flow and entity-relationship diagrams?andP;  Buy a CASE tool with abuilt-in code generator?andP;  Start coding in Smalltalk and see what happens?andO;Stand up on your chair and announce that C is for wimps and begin programmingin assembler?andP;  In future columns, I'll share some of the soul-searching, thealternatives, and the trials and tribulations of this great new adventure ofmine.andM;Ed Yourdon wrote his first computer program in FORTRAN II in 1963 and wasterrified lest be suffer instant brain death.andP;  He survived the experience andhas since muddled on through several dozen programming language sand hardwareplatforms.andP;  He is now a consultant and author; his latest book, co-authoredwith Pete Coad, is Object-Oriented Analysis (Prentice Hall, 1990).andP;  He alsopublishes a software journal, American Programmer; a complimentary copy canbe obtained by writing Yourdon at 161 West 86th Street, New York, N.Y.andO;10024.andO;</TEXT></DOC>