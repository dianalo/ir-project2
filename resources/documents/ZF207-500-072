<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-500-072  </DOCNO><DOCID>07 500 072.andM;</DOCID><JOURNAL>Communications of the ACM  August 1989 v32 n8 p918(4)* Full Text COPYRIGHT Assn. for Computing Machinery, Inc. 1989.andM;</JOURNAL><TITLE>ACM forum. (letter to the editor)</TITLE><AUTHOR>Schwarz, Robert; Maverick, Peter Lee; Loeser, Rudolph; Hampton,Harvey W.; Lehmann, Fritz; Fetzer, James H.andM;</AUTHOR><DESCRIPT/><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>acm forumandM;On Regulation and Legislation I write in response to Bryan Kocher'sPresident's Letter in the June 1989 Communications (p.andP;  660).andM;Kocher argues that professions can and should regulate themselves &quot;...topursue the ideal of self-regulation...&quot;andM;I disagree.andP;  It is naive to assume that simply belonging to a group thatadvocates a standard of ethical behavior will stop anyone from violating thatstandard.andM;Kocher argues that someone (either &quot;we&quot; or &quot;others&quot;) needs to take control ofprofessional computing.andP;  &quot;We must take control of professional computing orothers will control it for us.&quot;andM;I disagree.andP;  If one member of a group breaks the law, punish that individual;do not regulate the group.andP;  There is no reason to treat theft by computer anddifferently than theft by any other means.andP;  The judicial system already knowshow to deal with criminals; computer criminals should be treated nodifferently than any other kind of criminal.andM;Kocher argus the &quot;innocent until proven guilty&quot; is not the appropriatestandard.andP;  He claims that Senator Torres' plan says that&quot;...anyone can be asoftware engineering until he proves himself a felonious practitioner.&quot;andP;  Hegoes on to say that &quot;That is a pessimistic assessment of our profession.&quot;andM;Whether or not it is pessimistic, that is how our system of justice operates.andO;I see no reason to apply a different standard to computing professionals thanto members of society at large.andM;Kocher argues that different state legislatures creating different laws forthe same thing is bad.andP;  &quot;State regulations will inevitably be haphazard,inconsistent and conflicting.&quot;andM;I disagree.andP;  This is the situation for many kinds of laws of today.andP;  Inaddition to the insurance industry mentioned by Kocher, divorce law issubstantially different among states.andP;  I do not hear anyone proposing thatdivorce law be shaped at the federal level.andP;  Besides, there is an excellentreason to have 50 state legislatures creating different sets of laws for thesame thing--it gives citizens the chance to choose which set works the bes.andO;If the residents of Texas decide they prefer Idaho's laws to Virginia's laws,then they can either pass similar laws in Texas or move to Idaho.andM;Kocher, arguing that &quot;...federal regulation would assure geographicconsistency and a higher quality of regulation is likely, because all of theavailable talent can be concentrated on one target,&quot; makes federallegislation preferable to state legislation.andM;This is absurdly naive.andP;  Did the federal government get Section 1706 right?andO;Did the federal government truly simplify taxes with the last two or threemajor changes in the tax code?andP;  Who is all this &quot;available talent&quot; thatKocher thinks will get computer crime legislation right the first time?andM;Kocher argues that &quot;...the regulations governing computing will be written bypeople knowing nothing about computing.&quot;andP;  Why should computing regulation beany different from other regulations? Politicians are not supposed to beexperts in every field they regulate.andP;  They can call in people who areexperts, to acquire the necessary background, before they write legislation.andM;Kocher points out that &quot;Legislatures across the country are reacting bypassing laws that can be restrictive, harmful, or at least worrisome tocomputing professionals...andP;  If we, the leaders of the computing profession,do nothing, there will soon be a crazy quilt of state laws regulating thecomputing profession in fifty different ways.&quot;andM;Should not ACMs role be to prevent or minimize this from happening?andM;Kocher says, &quot;We can accept growing piecemeal regulation and licensing bystate legislatures...or federal regulation...andP;  It is time for ACM...topropose and strive for adoption of appropriate federal standards for thecomputing professions.andM;I disagree.andP;  We do not have to accept EITHER state OR federal legislationspecifically aimed at computing professionals.andP;  ACM should not be begging thegovernment to regulate its members.andP;  It should be doing the exact opposite.andO;Legislation specifically aimed at any subgroup in wrong.andP;  Laws should applyequally to everyone.andP;  Theft is not &quot;more wrong&quot; if it is accomplished bycomputer.andP;  Computer crimes are crimes.andP;  Computer criminals are criminals.andP;  Wealready have laws in place to catch and punish criminals.andP;  Maybe we need moreor better enforcement, or more severe punishment, but the last thing we needis to invite government into our profession to regulate us &quot;for our owngood.&quot; Robert Schwarz 12 Governor Endicott Rd. Billerica, MA 01821andM;Software EngineeringandM;The report on the Software Engineering Institute (Communications, May 1989,pp.andP;  594-605) implies that software engineering must be taught at thegraduate level and requires an undergraduate degree in computer science.andP;  Ibelieve that the two areas are different like chemistry and chemicalengineering.andP;  That is, a software engineer needs training in computer sciencebut not a degree.andP;  Peter Lee Maverick Systems Engineer 1018 DeWitt CircleDallas, TX 75224andM;In the May 1989 issue of Communications, Norman E. Gibbs writes: &quot;We mightsay that software engineers are attempting to do what civil engineers wouldhave to do to build bridges under the constraint that right triangles havenot yet been discovered...andP;  Just as medicine was practiced before medicalscience was accepted, software engineering can be practiced before itsprinciples have been fully defined.&quot;andM;Oh?andM;A person practicing medicine without the benefit of medical sicence is calleda witch doctor.andP;  If anything will provoke scornful laughter at &quot;softwareengineering: the very idea,&quot; it is Gibbs' extraordinary claim.andM;In 1967, &quot;the phrase 'software engineering' was deliberately chosen as beingprovocative, in implying the need for software manufacture to be based on thetypes of theoretical foundation and practical disciplines that aretraditional in the established branches of engineering&quot; (Report of the NATOConference on Software Engineering, October 1968).andP;  Twenty years later we aresaddled with a monumental credibility problem which has resulted fromprofligate misuse of that phrase, from pretense that an established field of&quot;software engineering&quot; now exists, and from pretense that there currently arepracticing &quot;software engineers.&quot;andM;To aspire to software engineering is a noble endeavor.andP;  But until we getwithin striking distance, let us be content with software development andsoftware developers, and perhaps even professional software developers forthose who qualify.andM;If as many bridges failed as software products do, bridge designers would notbe allowed to call themselves &quot;engineers&quot; either.andP;  Rudolph Loecer Center forAstrophysics Harvard College Observatory Smithsonian AstrophysicalObservatory Solar and Stellar Physics Division 60 Garden Street, M/S 16Cambridge, MA 02138andM;In the May 1989 issue of Communications of the ACM the article about SEIeducation by Norman E. Gibbs discusses a lot of good ideas, but gives one inparticular with which I disagree.andP;  To quote the article:andM;The do not need more &quot;compiler writers,&quot; but people who are capable ofdeveloping software under practical constraints such as: working as a memberof a team, completing projects on time and within budget, producing productsthat are usable, reliable, and safet within an application domain.andM;The are necessary but not sufficient conditions for successful softwareproject management.andP;  These characteristics alone result in the short-sighted,short-term, make-a-buck-today philosophy that has hurt Amercian industrialand engineering groups for the past twenty years.andP;  We need to think smart andwork smart--not blindly just to meet a deadline.andP;  We need new and better&quot;compiler,&quot; and we need more research and development--not less.andP;  Harvey W.andO;Hampton Universiy of Tennessee Knoxville, TNandM;More on Visual FormalismsandM;The Forum Editor was right in not viewing my letter, on using Charles S.andO;Peirce's &quot;Existential Graphs&quot; in Artificial Intelligence (December 1988, p.andO;1374), as an attack on David Harel.andP;  Harel's umbrage (Communications, May1989, p. 539) is chiefly over my saying his article, &quot;On Visual Formalisms,&quot;(Communications, May 1988, p. 514) &quot;neglects the work&quot; of Peirce.andP;  &quot;Neglects&quot;has a looser meaning than a charge of serious academic negligence (Ineglected to button my collar button today) and Harel should not bedistressed: the whole word unduly neglected the work of Peirce for a century.andO;I thought readers might enjoy seeing an interesting and rigorous &quot;visualformalism&quot; which Harel's list of prior work had left out.andP;  I have promotedHarel's higraphs in lectures, as a way to keep IS-A relation ships(subsumption, or strict inheritance links) from being confused withrelational links by using capsule enclosure instead of IS-A links.andM;I do have a genuinely condign addition to his article, however.andP;  He made noreference to an interesting 1977 article by Harold Boley in ArtificialIntelligence, &quot;Directed Recursive Labelnode Hypergraphs: A NewRepresentation-Language&quot;, a system of set-capsules which truly does containalmost every major idea in Harel's higraph article except for his CartesianProduct notation.andP;  Even this is not &quot;negligence&quot; by Harel; no one can orshould spend a lifetime pursuing every little academic highway and bywaylooking for possible citations.andP;  (I have surely made such omissions in thepast and will in the future.)andP;  I just think I do readers a favor by pointingout other relevant references, and it it nice to give some credit for goodwork.andM;He also challenges anyone to say how Peirce &quot;anticipated&quot; his and others'work.andP;  He is right that I should not single him out on this point.andP;  At afundamental level, Kempe and Peirce anticipated all work in Semantic Networksby inventing them and then begin forgotten (or neglected).andP;  I amguest-editing a special issue on Semantic Networks in Computers andMathematics with Applications, and I welcome information or proposals forarticles revealing other historical (pre-Quillian) examples.andM;The claim that Euler/Venn diagrams are more applicable in AI than ExistentialGraphs are is refuted by Sowa.andP;  I like both.andP;  Since my letter I have foundothers using Peirce in AI, including Wlodek Zadrozny of IBM (working onsystems of triadic signs), and almost everyone in the growing &quot;conceptualgraphs&quot; community; papers relating to AI will appear at the PeirceSesquicentennial Congress in September.andP;  Peirce himself wrote on AI.andP;  A minorcorrection to Harel: Existential Graphs do not involve &quot;many interlockinglasso-curves;&quot; the lasso-curves represent nested negations and cannotinterlock or overlap; if there are exotic logic systems with more than onespecies of negation which can &quot;overlap&quot; arbitrarily it might make sense touse overlapping capsules, but I am unaware of any.andP;  Finally, I still wouldlike to hear from anyone who has thought about mapping overlapping logicalblobs (or, equivalently, multiple-inheritance posets) into strings of symbolsat least as elegantly as parentheses do it for nested blobs (orsingle-inheritance trees).andP;  Fritz Lehmann 124 Parsons Avenue Webster Groves,Missouri 63119andM;Another Point of ViewandM;In their Viewpoint, &quot;Program Verification: Public Image and Private Reality&quot;(Communications, April 1989, pp.andP;  420-422), John Dobson and Brian Randellsubmit two principal objections to my analysis of the theoretical limitationsof program verification: (1) &quot;the (unfortunately justifiable) fearthat...[my] paper will be misinterpreted by laymen, particularly thoseinvolved in funding,&quot; and (2) the belief that I may have mistakenlyentertained proofs of program correctness as intended to provide explanatory,as opposed to evidential, reasons.andP;  I want to indicate my response to theirarguments, especially because their plausibility exceeds their truth.andM;The possibility that those funding verification projects might bepersuaded toreallocate their resources in support of more promising activities as aresult of my article is logically irrelevant, so long as my analysis is bothjustifiable and correct.andP;  If my position is misconceived, however, the claimthat unfortunate consequences may ensue does not qualify as fallaciousreasoning.andP;  The crucial question thus becomes whether they have undermined myposition.andP;  Dobson and Randell are right in thinking that there are importantdifferences between evidential and explanatory reasoning, but most of theinferences they draw are unwarranted and false.andM;In particular, when they maintain that mathematical logic provides&quot;explanatory reasons,&quot; Dobson and Randell commit a blunder.andP;  Logicspecifically and formal methods generally are context independent.andP;  They areapplicable for deriving conclusions from premises without any concern for thepurpose of the arguments thereby constructed.andP;  Indeed, their own tree-shadowcase clearly indicates that the ability to deduce a conclusion (about theheight of a tree, for example) is not the same thing as the ability toexplain that phenomenon (why the tree has that height).andP;  These differencesare ones I have explored in greater detail elsewhere.andM;The distinction between algorithms as logical structures and programs asimplementations of those structures in a form suitable for execution bymachine is fundamental to my analysis.andP;  Dobson and Randell, therefore, mayhave inferred that my underlying reasons for contending that programverification cannot succeed as a general and reliable procedure forguaranteeing the performance of a program presupposes an explanatoryconception.andP;  The outcome of executing a program, after all, &quot;obviouslydepends upon various different causal factors, including the characteristicsof the compiler, the processor, the printer, the paper, and every othercomponent whose specific features influence the execution of such a program&quot;.andM;If so, Dobson and Randell have misunderstood my position, because I amassessing the prospects for program verification independently of whether itis viewed as evidential or as explanatory reasoning.andP;  In fact, programs aremerely partial causes of the outcomes resulting from their execution; hence,program verifications cannot provide explanatory reasoning.andP;  Moreover, sinceexplanatory reasoning itself is a special kind of evidential reasoning,Dobson and Randell are completely confused when they maintain &quot;that formalmethods are considered to be explanatory, not evidential in nature&quot; and whenthey infer that I regard rogram verification as explanatory rather than asevidential.andM;Dobson and Randell suggest that proponents claim that program verificationmerely provides evidential reasons for believing a program will performcorrectly when it is executed.andP;  Their position here, however, is nottherefore at odds with my own since the fundamental point of my article wasthat the kind of evidence that a program verification can provide isuncertain rather than certain evidence.andP;  This conclusion certainly does notcontradict the possibility that the proper role of program verifications isevidential; on the contrary, my position implies that it is true.andP;  Consider,for example, a summary of the basic elements of my argument.andM;(a) Programs are only one aspect of the complex causal systems that areinvolved in bringing about the results of their execution.andP;  Hence, the factthat a program has been verified cannot possibly proide an adequateexplanation of what occurs when it is executed.andP;  Specific outcomes dependupon a variety of factors, only one of which is the program itself.andM;(b) The verification of a program depends upon causal axioms that relateinput-causes to their output-effects.andP;  These programs may be intended forabstract machines, where the truth of those axioms can be established bydefinition; or they may be intended for target machines, where their truthcan only be established by induction.andP;  The direct evidence supporting thoseinductions, however, arises from program testing.andM;(c) As a consequence, the strongest kind of reasoning that programverifications can supply for any target machine is evidential, indirect, anduncertain.andP;  It cannot be explanatory, because programs are but partial causesof the performance of a program by a complex causal system.andP;  It cannot bedirect, because the only direct evidence concerning what any causal systemwill do when it executes a program results from program testing.andP;  And itcannot be certain, because reasoning is only certain when it relies upondeductions from premises that cannot possibly be false.andM;These considerations tend to suggest that Dobson and Randell have not fullygrasped the function of deductive procedures within explanatory andevidential contexts.andP;  Instead of establishing that my position is&quot;misconceived,&quot; they introduce distinctions that confirm rather than refutemy principal views.andP;  Thus, to bring this stage of the debate to a conclusion(however temporary it may prove to be), my appraisal of the situation is asfollows.andM;I have enjoyed the benefits of a diverse assortment of comments andcriticism, and my replies are a matter of record.andP;  None of these critiqueshas offered any reason for me to think that I have been mistaken inmaintaining that the very idea of program verification trades upon anequivocation.andP;  Some instances, such as, even allege grounds for criticismthat, when properly understood, turn out to provide further evidence for myviews.andM;I therefore reaffirm the contention that the success of program verificationas a generally applicable and completely reliable method for guaranteeing theperformance of a program is not even a theoretical possibility.andP;  Thefoundation for this position, which I have outlined above, of course, isrooted in the character of causal systems themselves rather than in theabsence of social processing, as previous authos have mistakenly believed.andO;Insofar as Dobson and Randell endorse a similar conception, therefore, Iinfer that they, like DeMillo, Lipton, and Perlis before them, have arrivedat the right general conclusion for the wrong specific reasons once again.andO;James H. Fetzer Philosophy and Humanities University of Minnesota Duluth, MN55812</TEXT></DOC>