<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-017-662  </DOCNO><DOCID>08 017 662.andM;</DOCID><JOURNAL>EXE  Dec 1989 v4 n7 p26(4)* Full Text COPYRIGHT Process Communications Ltd. (England) 1989.andM;</JOURNAL><TITLE>What can C++ do for you?andO;</TITLE><AUTHOR>Smith, Paul G.andM;</AUTHOR><SUMMARY>Many of the ways in which the C++ programming language expandsstandard C are designed to support object-oriented programming.andO;C++ is highly compatible with C. C++ allows the programmer todefine and use user-defined types.andP;  C++ classes can contain datafields.andP;  A new C++ class can inherit the properties of otherclasses.andP;  C++ enables the programmer to ensure that classes arealways created in a known state.andP;  C++ includes facilities forstrict function prototyping and type checking.andP;  C++ was developedaccording to pragmatic principles to meet specific needs.andO;Experienced C programmers can begin producing useful C++ code intwo days, but novices in object-oriented programming can take upto a year.andM;</SUMMARY><DESCRIPT>Product:   C++ (Program development software) (product specifications).andO;Topic:     Programming LanguagesObject-Oriented ProgrammingSoftware DesignFunctional CapabilitiesLearning Curve.andO;Feature:   illustrationprogram.andO;Caption:   A C++ class declaration. (program)Sample code for use of the new complex type. (program)C++ provides default arguments. (program)andM;</DESCRIPT><TEXT>What can C++ do for you? C++ was designed, says Bjarne Stroustrup, 'to makeprogramming more enjoyable for the serious programmer.'andP;  C++ extends standardC in a number of ways, many of which are designed to support object orientedprogramming.andP;  A summary of the most important of these features follows.andM;The C++ language builds on the features of ANSI C, retaining a very highdegree of compatibility.andP;  However, the purposes of the two languages aredifferent: ANSI C serves to codify the existing C language and resolveinconsistencies between implementations.andP;  C++ is a new tool, intended toprovide a new and expressive programming model.andP;  Where there areincompatibilities between the C subset of C++ and ANSI C, they existintentionally as the price of important C++ features and concepts.andM;The high degree of compatibility between C++ and C gives a number ofadvantages, the primary ones being that: programmers can learn C++ veryeasily; the existing body of C software, which is very large indeed, can beinterfaced to with very little effort; all the ANSI C libraries can be useddirectly from C++ programs.andM;Of central importance is the concept of user defined types.andP;  In standard C,it is easy to define a structure that combines data fields in a named entity.andO;However, one cannot be very expressive in the manner in which one deals withthis entity.andP;  C++ allows one to define entirely new data types, which may beused with all of the expressiveness of the standard C built-in types.andP;  Forexample, one can define a new fixed-point fractional number data type 'fixed'so that ordinary variables can be defined thus:andM;fixed c, d; int a = 60;andM;and then perform ordinary arithmetic on them:andM;c = 647 .andP;  825; d = C * a;andM;The C++ language allows the programmer to define and work with user-definedtypes.andP;  They are identified with the keyword 'class' (C-style 'struct' typesare also supported), as illustrated in Figure 1.andP;  User defined types are notmerely the data that they represent.andP;  All the properties of the data areassociated with a user defined type (the information required to representit, and the functions and operators that are necessary to initialise,manipulate, and dispose of it) are bound to that type.andM;Classes and InheritanceandM;C++ classes can contain data fields, which correspond to the fields in Cstructures.andP;  They can also contain functions and operators.andP;  Together, themembers of a class represent the properties of that class.andP;  Members can bepublic, protected, or private.andP;  Public members can be accessed by any code,in the same way as standard C structure fields.andP;  Private members are onlyaccessible by other members of the same class.andP;  Protected members are likeprivate members, except that they may also be accessed by members of classesderived from the class in which they are defined.andP;  Members of 'class' typesare private by default, and members of 'struct' types are public by default.andM;A new class can inherit the properties of other classes.andP;  If a class isderived from another class, it inherits all the properties of that class,except for those that are explicitly overridden by the programmer.andP;  Thisallows you to define hierarchies of classes that share common properties.andO;New data fields,  and new functions, only need to be defined where the newclass differ from their ancestors.andM;C++ classes are actually defined in two parts.andP;  First comes the classdeclaration, in the form shown in Figure 1.andP;  Second are the functionsthemselves, which are written in almost the same way as ordinary C functions.andO;See Figure 2 for an example of code for one of the functions declared inFigure 1.andP;  Note the header of the function, which specifies the class towhich the function belongs.andP;  Class objects may be allocated automatically,statically or dynamically, just like any other C++ variable.andP;  Special 'new'and 'delete' operators are defined to create and dispose of dynamic classobjects.andM;ConstructorsandM;C++ allows the programmer to ensure that classes are always created in aknown state.andP;  The programmer can, if necessary, define special functionscaled constructors to initialise objects.andP;  Constructors are just likeordinary functions--they have the same name as the class to which theybelong, and they may be defined with or without parameters.andP;  A class may bedefined with no constructors, or with one or both types of constructor.andP;  If aconstructor has been defined, it is called every time an object belonging toits class is declared or created.andP;  Constructors without parameters areintended for the default case, and are also called to initialise elements ofarrays; constructors with parameters are called when, at the time a classobject is created, the parameters are specified.andM;Destructors are functions with the same name as the class, but prefixed bythe tilde character.andP;  A destructor is called when an automatic or staticclass object goes out of scope, or when a dynamic object is disposed of.andP;  Ifmembers of a group of objects have common properties, but actually work indifferent ways, it is convenient to be able to write code that calls on thosecommon properties the same way without knowing of the differences.andP;  Forinstance, similar objects may be stored in a linked list in memory, oraccessed via a vector of pointers.andP;  The code that manipulates them might needto ask them to perform certain operations without knowing the actual type ofeach object.andP;  C++ allows one to call on objects of different classes, notknowing anything more than the common ancestor they are derived from.andP;  At runtime, C++ will determine which object type is actually being called, andensure that the correct function code is used to respond to the call.andP;  Theone restriction is that the objects must derive from a common ancestor thatshares all the properties called upon.andM;When a derived class overrides a function, and the programmer wants C++ todetermine at run-time which function to call according to the actual class itbelong to, the programmer must have declared the function in the commonancestor class to be 'virtual'.andP;  This tells the compiler that it must use atable lookup mechanism to determine the actual function to be called atrun-time.andP;  (In previous articles in .EXE, I looked at how different versionsof Apple's Object Pascal implement virtual functions.andP;  The two mechanismsused are flat virtual function tables, in which there is a fixed (and small)run-time overhead on each virtual function call, and inverted virtualfunction tables which use substantially less memory at the cost of aniterative search through the table for each virtual function call.andP;  C++ usesflat virtual function tables).andM;C++ allows, as part of a class definition, standard C++ operators to beredefined to work in ways appropriate to the class.andP;  For example, althoughstandard C arithmetic operators will work fine with ints, longs, doubles andso on, they would be confused by a user defined complex number type thatstores numbers in two parts.andP;  In this case, the arithmetic operators can beoverloaded within the class definition to tell C++ how to manipulate theclass variables in arithmetic expressions.andP;  This is similar to a feature ofAlgol68, but is much more powerful.andP;  If you need to, you can overloead theassignment operator, to ensure that classes that store informationdynamically can be copied correctly.andP;  You can overload the [right arrow]operator if dynamic objects are not stored in simple heaps.andP;  You can overloadthe array operator [].andP;  In fact, all the C++ operators can be overloaded.andO;You cannot, however, change the precedence of operators from their normalorder of evaluation.andM;Ordinary functions can be overloaded, as well.andP;  There can be multipleversions of a function, all having the same name but accepting differentarguments (the return types do not need to differ).andP;  The C++ compilerdetermines which function to call be examining the argumentsandM;Constructors can be used to control how memory is allocated for objects.andO;Overloaded operators can be used to redefine how the objects are accessed andmanipulated.andP;  For instance, you can overload the 'new' operator and implementa customised heap management system.andP;  The programmer has total control overmemory management.andM;PrototypingandM;ANSI C introduced extensive facilities for strict function prototyping andtype checking.andP;  These features originated in C++.andP;  C++ insists on functionsbeing used for all operations connected with objects.andP;  To allow theprogrammer to control this potentially inefficient way of working, functionscan be defined as being 'inline'.andP;  At the compiler's discretion, inlinefunctions are embedded in the program code to avoid the function calloverhead.andP;  This can lead to significant performance improvements.andP;  The C++programmer can specify default arguments for functions.andP;  Default argumentscan be omitted when the function is called, and the compiler will fill in thecorrect values.andP;  See Figure 3 for an example.andM;In C, one can refer indirectly to variables by pssing around their addresses.andO;C++ abstracts this into the concept of 'reference types'.andP;  A reference typeis an alias for the object in references.andP;  It can be used interchangeablywith an ordinary variable; the C++ compiler automatically generates all thecode necessary to de-reference it.andP;  C++ allows functions to return referencevalues.andP;  A reference type is declared using the 'andamp;' symbol thus:andM;doubled; doubleandamp;e=d;andM;The reference variable e is now an alias for d, with which it can be usedinterchangeably.andP;  Another way in which C++ is different, compared to C, isthe // comment delimiter.andP;  All character after // on a line are treated as acomment.andM;What's New In 2?andM;The main new features in version 2.0 of C++ are summarised in Figure 4.andP;  Themost important of these are support for multiple inheritance, and type-safelinkage.andP;  Multiple inheritance exists when a class inherits the properties ofmore than one class.andP;  Applying this technique, a class may be created that isa composite of base classes that represent independent concepts, asillustrated in Figure 5.andP;  Each base class is treated as a separate sub-classwithin the derived class.andP;  Public and protected base class members can beaccessed just as if they were declared within the derived class, subject to afew restrictions which serve to eliminate ambiguities.andM;Many object oriented programming languages, such as Object Pascal, constrainthe thinking of the program designer by only allowing single inheritance.andO;C++ 2.0, by allowing multiple inheritance, removes this constraint.andP;  Singleinheritance tends to force the program designer to create a singlehierarchical tree of classes, all inheriting the properties of a single baseclass.andP;  This is usually quite effective, but it can be difficult to define astraightforward hierarchy that represents a very complex system: the designerhas to work harder.andP;  It may be more convenient to break down a problem intosmaller, independent hierarchies of classes that can be developed withoutknowledge of the properties of other classes.andP;  This is particularly true ofgeneral-purpose classes that are intended to be reused.andP;  Multiple inheritanceallows these independent classes to be combined, exactly as required, forspecific uses.andP;  Multiple inheritance can lead to ambiguities, and the C++compiler detects ambiguous code and reports it as an error.andP;  For instance, itis fine for a new class to inherit the properties of two different classesthat, in turn, inherit the properties of a common base class.andP;  The compilerwill insist, however, that the base class member is qualified by the name ofone of the sub-classes that contains it.andP;  Thus, C++ ensures that exactly themember that was intended is accessed.andP;  If the keyword 'virtual' is used toqualify common base classes, C++ will ensure that only one instance of thevirtual base class exists in the derived class however many times it isderived.andP;  Otherwise, one instance will exist for each derivation of the baseclass.andM;As an extension of the mechanism that had to be implemented to allow theoverloading of functions, C++ ensures that the arguments passed to externalfunctions are compatible with their original definitions.andP;  The compiler doesthis by 'mangling' the function name, with its arguments, to create acompound name that contains all the necessary information.andP;  C++ considers thename of a function to be a combination of the original function name plus allits arguments: this is the name passed to the linker.andP;  Accordingly, if anexternal function is localy prototyped with an incorrect argument list, thelinker will treat it as a different function and report an error.andM;Getting startedandM;Bryan Boreham of Kewill Systems says 'it takes around three months for a goodprogrammer to start producing useful code in C++.andP;  Knowledge of C is a verysmall advantage.'andP;  However, Bjarne Stroustrup told me that, in hisexperience, it takes new C++ programmers anything between two days and a yearto start doing useful work with C++.andP;  Two days for experienced C programmersthat don't need to use the object oriented programming features of C++, andup to a year for people who are new to both C++ and object orientedprogramming.andM;There are large number of C++ 2.0 compilers becoming available.andP;  Zortech havealready shipped their compiler.andP;  The ATandamp;T implementation is available (orsoon will be) for 80386s, for Sun workstations and for the Apple Mac.andM;ConclusionandM;C++ was conceived and developed by real people to solve real problems.andP;  It isincorrect to define C++ (as did Any Redfern in Personal Computer World,recently) as a language that 'started life in academia as an exercise inimproving C'.andP;  C++ is much more than that.andP;  It began as a solution to agenuine need, and throughout its life the development of C++ has been guidedby pragmatic principles.andM;Paul G Smith is a freelance software development consultant and technicalwriter.andP;  He can be contacted on CIX as pgsmith, and on AppleLink as UK0310.andO;</TEXT></DOC>