<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-840-720  </DOCNO><DOCID>08 840 720.andM;</DOCID><JOURNAL>Data Based Advisor  Sept 1990 v8 n9 p106(7)* Full Text COPYRIGHT Data Based Solutions 1990.andM;</JOURNAL><TITLE>At work in a doctor's office. (medical office management systems)</TITLE><AUTHOR>Hey, John.andM;</AUTHOR><SUMMARY>GMT Corp produced a medical office management system with moreflexibility and power than others.andP;  A special concentration wasgiven to comprehensive insurance claim management.andP;  Microsoft Cwas used to develop the new system.andP;  Emerald Bay, from RatliffSoftware Production Inc, was chosen as the database engine, alongwith its utilities, such as C Toolkit and Vulcan.andP;  The package metall the requirements.andP;  It was client-server based, operated on80286 computers with 640K of memory, and provided full support forvariable-length fields and compact data storage.andP;  The Med-Packsystem was reborn.andM;</SUMMARY><DESCRIPT>Company:   Ratliff Software Production Inc. (products).andO;Product:   Emerald Bay (Data base management system) (usage)Microsoft C (Compiler) (usage).andO;Topic:     Case StudyProgram Development ToolsMedical OfficesAutomation.andO;Feature:   illustrationphotograph.andM;</DESCRIPT><TEXT>At Work in a Doctor's Office Project: Produce a medical office managementsystem with more flexibility and power than others currently available, andconcentrate particularly on comprehensive insurance claim management.andM;Tools: Emerald Bay database engine, server, report writer, Vulcan, andRosetta import facility (Ratliff Software Production, Inc.); Microsoft CCompiler v. 5.1 (Microsoft); C-Worthy v. 1.1 (Solution Systems); SilverWareAsynch C Toolkit (SilverWare, Inc.).andM;It was a developer's worst nightmare: The creeping realization that themedical office management package my company had &quot;inherited&quot; suffered frommajor, irreparable design flaws that rendered it difficult to support andimpossible to extend or enhance.andM;These were crippling debilitations.andP;  Medical practice management is a complexand fluid area.andP;  As a result, computer packages designed to cope with amedical office differ quite sharply from standard accounting packages.andP;  Theprograms are complex, because the accounting problems encountered arespecialized.andP;  The fluidity arises from the constantly changing federal andstate regulations that govern medical service charges and billing policies.andM;Many users are computer illiterate, which makes providing support for acomplicated package all the more difficult and costly.andP;  At the same time, apackage that is difficult to extend and improve will consume a great numberof programming hours just to maintain, much less enhance.andM;What does a medical office management package do?andM;Just what are the capabilities of such a management package?andP;  Basically, thesystem must maintain a database of patients and a large amount of specializedaccounting information, including insurance policy information.andP;  When apatient is treated in the office or hospital, various line-item services(called &quot;procedures&quot;) must be entered as transactions.andP;  Each transaction mustbe &quot;justified&quot; by matching it with a valid diagnosis code, place of service,performing physician I.D., and perhaps referring physician I.D., eachrequiring management of a separate ancillary database file.andM;But that's the simple part.andP;  The difficulty lies in deciding, &quot;Who owes thismoney?&quot;andP;  The answer lies with the patient's insurance coverage.andP;  The initialcharge may depend on the policies of the primary insurance carrier.andO;Secondary insurance carriers may require documentation based on the primaryinsurance carrier's disposition of its portion of the cost.andP;  Federal andstate insurance carriers (Medicare and Medicaid/MediCal) determine the actualcharge allowed, so that in many cases, the &quot;real&quot; charge may only bedetermined after the insurance carrier has decided how much it will pay.andO;This charge difference becomes a special kind of write-off, which must betracked separately from the &quot;standard&quot; write-off of bad debts anduncollectible fees.andM;The system must correctly juggle the order in which different claims arefiled, each of which may require submission on a different paper form.andP;  Atsome point, the package has to determine when to begin billing each patientfor the remaining balance due.andP;  Some federal laws place legal restrictions onthis determination, and many doctors want to control billing contingent onthe patient's insurance coverage.andM;Finally, a whole host of useful practice management reports must be prepared,including detailed breakdowns of account balances, revenue and write-offs asfunctions of insurance carriers, revenue and practice patterns by procedureperformed, etc.andP;  Different practices may require different reports, makingcustom report writing mandatory.andM;Starting from scratchandM;Our medical management package, Med-Pack, was quickly becoming difficult tomaintain due to inherent design flaws.andP;  Since we inherited the product, manyof the decisions the original developers made were now coming back to hauntus.andM;Just for starters, Med-Pack was written in an off-brand version of BASIC thatwas no longer supported by its defunct manufacturer.andP;  Med-Pack consisted of28 executable files linked together with a simple menuing program.andP;  Itfunctioned more like 28 separate programs than the seamless package wewanted.andM;In addition, certain trade-offs had been made in the original data filedesign, sacrificing capability for performance.andP;  Each patient account waslimited to 32K of data file storage, which meant old patient accountingactivity had to be purged constantly to make way for new information.andP;  Thisprevented any sophisticated practice management reporting, for which theusers were all clamoring.andM;Emerald Bay developer Wayne Ratliff has provided a picturesque description ofthis dilemma: You want to build a skyscraper, but you start out with a simpleshack.andP;  By the time you reach the second or third floor, it becomes obviousthat serious structural flaws preclude further construction.andP;  All you can dois bring in the demolition experts and start over from scratch.andM;That's exactly what we determined to do.andP;  This time around, we would havecomplete control over product design and execution.andP;  We ended up not reusinga single line of code; the entire package was rewritten from scratch.andM;Design decisionsandM;The first decision we made was to develop with Microsoft C.andP;  We wanted toavoid the tedium of assembly, but wanted the speed and compactness that onlyC or assembler could offer.andM;Another thing the C programming language has going for it is its ability topass around function pointers.andP;  This allows programmers to &quot;customize&quot;routines from the outside in, by calling the routine in different places withdifferent function pointer arguments.andP;  The routines thus become morereusable.andM;Our next important decision concerned the selection of a back-end databasemanagement system.andP;  Several important criteria were established.andM;First, the database manager had to be client-server based.andP;  Our experiencewith file-server based systems led us to rule them out for performance andintegrity considerations.andP;  For example, we wanted users to be able toabsent-mindedly switch off workstations without doing damage to open databasefiles.andP;  We wanted more comprehensive record locking mechanisms thantraditional file-server technology could provide.andP;  We knew that Med-Pack datafiles would possess multiple indexes, and file-server-based methods wouldsimply be unable to provide the network throughput we needed.andM;Second, the database engine had to run on &quot;reasonable&quot; hardware under MS-DOS.andO;We didn't feel that the market we were addressing could afford, let alonecope with, a file server with 16M of memory, OS/2, and adifficult-to-maintain software package.andM;Third, the database system had to provide compact data storage and sufficientspeed for data retrieval and storage.andP;  Index maintenance had to be automatic.andO;Speed degradation with very large database files was not acceptable.andM;Fourth, we needed to have convenient &quot;back-door&quot; access to our databasefiles, especially during the development stage.andP;  Many of the financialroutines in Med-Pack are extremely sophisticated and therefore would requireextensive debugging efforts.andP;  We needed high-level access to our data to viewand manipulate it, without having to write a lot of C code.andM;Finally, we needed a sophisticated report writer that could be integratedseamlessly with the rest of the application.andP;  It had to be flexible enough toprepare a wide host of insurance forms and patient bills, as well as manycomplicated reports.andP;  The number, variety, and flexible nature of thesereports precluded hard coding them in C.andP;  Rather, we needed a report writer&quot;script language&quot; that could provide the increased flexibility andproductivity we wanted.andM;From the beginning, our choices were rather limited.andP;  The client-serverrequirement ruled out all but a handful of database products.andP;  The hardwarerequirements of all the SQL server products precluded their use.andP;  That leftwriting our own client-server database engine or opting for RatliffSoftware's Emerald Bay technology.andP;  The only problem was, Emerald Bay wasn'ton the market in June 1989--the courts were busy trying to decide who ownedthe product after the collapse of its distributor, Migent.andP;  So the choicecame down to this: Reinvent the wheel and write our own, or take a gamblethat EMerald Bay would re-emerge from the litigation intact and marketable.andM;We decided to pursue the Emerald Bay option, and obtained the C Toolkit,Vulcan, and other utilities under a beta test site agreement.andP;  This packagesatisfied each of our database selection criteria: It is client-server based,operates on 80286 computers with 640K of memory, and provides full supportfor variable-length fields and compact data storage.andP;  Our informal benchmarktests showed that its retrieval and update speeds were more than adequate,even with large database files.andP;  Vulcan, Emerald Bay's enhanced dBASE-likeprogramming language, provided us with a powerful yet easy-to-use &quot;back door&quot;to our complex database files, and the report writer seemed to have thefunctionality we needed.andM;Writing the codeandM;Surprisingly, coding the project proceeded with few incidents.andP;  First, weprepared a suite of database functions that transparently fetched and storedthe records between the database and various C structures.andP;  Our internallibrary implemented transparent index control, minimum and maximum indexfilters, and standard record filters.andP;  We considered this initial experiencewith the Emerald Bay C Toolkit to be time well spent, allowing us to becomefamiliar with its intricacies and providing excellent routines we could usein future projects.andM;A similar process was undertaken with the C-Worthy user interface library,which we used for designing the front end of our product.andP;  A great deal ofconsideration was given to the menu and form tree of the final package.andO;Users must be able to perform look-ups for several different ancillarydatabase files containing procedure codes or other such information) from avariety of contexts within various data-entry forms.andM;We implemented all look-ups with the same generic ManageLookup() function.andO;The function allows the user to enter the code or, failing to remember that,a keyword from the description of the procedure, diagnosis, place of service,etc.andP;  The ManageLookup() function tries to find a unique entry; failing that,it provides a virtual scrolling picklist, from which the user may choose aparticular item.andP;  The user may also choose to edit the entry or add a newone.andM;This means the user is able to edit a procedure code, which was &quot;looked up&quot;from within a transaction edit screen, which was picked from the transactionpicklist, which was called while editing a patient.andP;  This capability toperform deeply nested &quot;edits&quot; and &quot;inserts&quot; of the ancillary data tables wascrucial to the design of a usable package.andM;Report integration:andM;a data-driven solutionandM;Since we wanted comprehensive reporting in Med-Pack, we cast about for aflexible method of integrating the reporting features with the rest of thepackage.andP;  Clearly, our user base was not sophisticated enough to manage a setof standalone reports.andP;  What we needed was an integrated solution, so thatMed-Pack could be enhanced with new reports without having to recode,recompile, and relink the application.andM;What we settled on was a data-driven design.andP;  A new table was added to thedatabase, containing complete descriptions of each available report.andP;  Usingthis table, a picklist can be produced, from which the user selects thedesired report.andP;  Additional information from the report table is extracted toconstruct, on the fly, the necessary data entry form to query the user forany information needed to run the report.andP;  Med-Pack then takes thisinformation and loads and executes the Emerald Bay report writer.andM;Adding new reports is simply a matter of writing the report, then adding thenecessary records to the report table in the database; all this is donewithout making any modification to the system.andP;  The integration of thereporting features with the rest of the application is seamless, and userscan't tell where the C code ends and the Emerald Bay report writer begins.andM;We've found the Emerald Bay report writer to exceed all other report writerson the market in its sophistication and capabilities.andP;  Not only have we beenable to implement complex reports using it, but we've found that it canproduce insurance claims forms, patient bills, and even binary files foruploading to insurance mainframe computers.andM;The print spooler solutionandM;Another design problem we faced was how to manage the voluminous printeroutput produced by Med-Pack.andP;  In addition to the reports, there are alsolarge numbers of insurance claim forms, patient statements, and bills, eachrequiring the printer to be loaded with a special form or paper.andP;  If thereport writer output were routed directly to the printer, then a printer jamor paper outage would force the entire report to be restarted from thebeginning.andM;We solved this by writing everything to disk, then providing a print spoolingfacility with Med-Pack.andP;  Using a background processing feature C-Worthyprovides, we were able to design a print spooler that was fully integrated,resulted in no annoying keyboard suspensions for the data-entry personnel,allowed the operator to print alignment &quot;sample&quot; pages, and permitted theprint job to be restarted at any page the operator specified.andM;Take home lessonsandM;Of course, we learned a few lessons from the development process:andM;* Try to assess the technical support offered by your development toolmanufacturers before wading out into deep water.andP;  When you rely on a toolwritten by someone else, you're pretty much at their mercy to fix any bugsthat crop up.andP;  Make sure the companies you work with have a good track recordof responsiveness in these matters.andP;  Luckily, we experienced no problems inthis area.andM;* Don't reinvent the wheel.andP;  Always be on the look out for commercial orshareware libraries that already do what you want to do.andP;  Treat this as aneconomic decision: Figure out how much you'd charge a client to create aroutine, then see if somebody sells it for less than that.andP;  If they do, snapit up.andP;  If you can get other people to program for you cheaper than youprogram for yourself, then you're ahead!andM;* Start by planning utility functions first.andP;  This makes sense, but mostdevelopers just dive right in and start coding the main project.andP;  Thisdoesn't give them time to become intimately familiar with the developmenttools or libraries they've chosen until well into the project.andP;  In addition,a strategy that skips over utility function development will result in yourspending time rewriting code to be reused elsewhere in the program.andP;  Advanceplanning of utility and helper functions can save you rewrite time later.andM;* Along the same lines, consider designing code that you can reuse in futureprojects.andP;  A library of reusable routines will be a substantial asset to yourfuture development activities, even after you've spent all the money you makefrom your current development project.andM;* Be willing to let go of pet designs and code fragments when you knowthey're not working.andP;  Sometimes, a routine is so poorly conceived, that thebest thing to do is discard it and start from scratch.andP;  In our case, wedumped 50,000 lines of code.andP;  Granted, that's a pretty drastic approach.andP;  Butyou have to be willing to do that sometimes, to get a fresh perspective and aclean slate to work on.andM;Future directionsandM;A package like Med-Pack is never really finished--there are always changesand improvements to be made.andP;  In addition to the obvious enhancements (addingmore reports and support for more insurance forms), we've begun porting theapplication to QuarterDeck's DESQview API, taking advantage of itsmulti-tasking capabilities.andP;  When that project is complete, we intend toaddress the question of appointment scheduling and integrating wordprocessing.andM;Overall, we've found the Med-Pack development project a satisfying andrewarding experience.andP;  Despite the constant fear developers harbor thatthey'll inadvertently paint themselves into a corner, either through a basicdesign flaw or a limitation in the tools they've chosen, we suffered no suchmajor setbacks.andP;  We're pleased with Emerald Bay and the other developmenttools we chose.andP;  And, more importantly, our customers are pleased with theproduct we've provided them.andM;John P. Hey holds a doctorate in chemistry from the University of Chicago andis president of GMT Corp., a software development company located inGreenwood, Mississippi.andP;  You can reach him at (601) 453-8412 or on the DataBased Advisor Readers Exchange BBS, (619) 270-2042.andO;</TEXT></DOC>