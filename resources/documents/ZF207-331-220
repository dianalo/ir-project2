<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-331-220  </DOCNO><DOCID>07 331 220.andM;</DOCID><JOURNAL>Communications of the ACM  June 1989 v32 n6 p700(4)* Full Text COPYRIGHT Assn. for Computing Machinery, Inc. 1989.andM;</JOURNAL><TITLE>Password cracking: a game of wits. (the Internet worm)</TITLE><AUTHOR>Seeley, Donn.andM;</AUTHOR><SUMMARY>The worm that infected the Internet computer network included anelaborate and efficient password-cracking algorithm which it usedto gain access to remote nodes on the network.andP;  Unix makes use ofan encryption scheme in which no version of the unencryptedpassword is available on the system.andP;  The worm's encryptionalgorithm performs considerably faster and more efficiently thanthe traditional Unix algorithm, allowing it to make many tries ata password in a short space of time.andP;  A discussion of the worm'sencryption algorithm and its ramifications is presented.andM;</SUMMARY><DESCRIPT>Topic:     Internet (Computer network)Computer virusesPasswordsEncryptionAlgorithm Analysis.andO;Feature:   illustrationcartoon.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Password Cracking: A Game of Wits A passowrd cracking algorithm sems like aslow and bulky item to put in a work, but the worm makes this work by beingpersistent and efficient.andP;  The worm is aided by some unfortunate statisticsabout typical password choices.andM;For example, if the login name is &quot;abc,&quot; then &quot;abc,&quot; &quot;cba,&quot; and &quot;abcabc&quot; areexcellent candidates for passwords.andP;  [F.T.andP;  Grammp and R. Morris]andM;The worm's password guessing is driven by a 4-state machine.andP;  The first stategathers password data, while the remaining states represent increasingly lesslikely sources of potential passwords.andP;  The central cracking routine iscalled cracksome ( ), and it contains a switch on each of the four states.andM;The routine that implements the first state we named crack_0( ).andP;  Thisroutine's job is to collect information about hosts and accounts.andP;  It is onlyrun once; the information it gathers persists for the lifetime of the worm.andO;Its implementation is straightforward: it reads the files /etc/hosts.equivand /.rhosts for hosts to attack, then reads the password file looking foraccounts.andP;  For each account, the worm saves the name, the encrypted password,the home directory and the user information fields.andP;  As a quick preliminarycheck, it looks for a .forward mail forwarding file in each user's homedirectory and saves any host name it finds in that file.andM;We unimaginatively called the function for the next state crack_1()..crack_1( ) looks for trivially broken passwords.andP;  These are passwordswhich can be guessed merely on the basis of information already contained inthe password file.andP;  Grampp and Morris [2] report a survey of over 100password files that found that between 8 and 30 percent of all passwordscould be guessed using just the literal account name and a couple ofvariations.andP;  The worm tries a little harden than this: it checks the nullpassword, the account name, the account name concatenated with itself, thefirst name (extracted from the user information field, with the first lettermapped to lower case), the last name, and the account name reversed.andP;  It runsthrough up to 50 accounts per call to cracksome( ), saving its place in thelist of accounts and advancing to the next state when it runs out of accountsto try.andM;The next state is handled by crack_2( ).andP;  In this state the worm compares alist of favorite passwords, one password per call, with all of the encryptedpasswords in the password file.andP;  The list contains 432 words, most of whichare real English words or proper names; it seems likely that this list wasgenerated by stealing password files and cracking them at leisure on the wormauthor's home machine.andP;  A global variable nextw is used to count the numberof passwords tried, and it is this count (plus a loss in the populationcontrol game) that controls whether the worm exits at the end of the mainloop--nextw must be greater than 10 before the worm can exit.andP;  Since the wormnormally spends 2.5 minutes checking for clients over the course of the mainloop and calls cracksome( ) twice in that period, it appears that the wormmust make a minimum of 7 passes through the main loop, taking more than 15minu tes.andP;  It will take at least nine hours for the worm to scan its built-inpassword list and proceed to the next state.andM;The last state is handled by crack_3( ).andP;  It opens the UNIX online dictionary/usr/dict/words and goes through it one word at a time.andP;  If a word iscapitalized, the worm tries a lower-case version as well.andP;  This search canessentially go on forever: it would take something like four weeks for theworm to finish a typical dictionary like ours.andM;When the worm selects a potential password, it passes it to a routine wecalled try_password( ).andP;  This functions calls the worm's special version ofthe UNIX password encryption function crypt( ) and compares the result withthe target account's actual encrypted password.andP;  If they are equal, or if thepassword and guess are the null string (no password), the worm saves thecleartext password and proceeds to attack the hosts that are connected tothis account.andP;  A routine we called try_forward_and_rhosts( ) reads the user's.forward and .rhosts files, calling the previously described hu1( ) functionfor each remote account it finds.andM;FASTER PASSWORD ENCRYPTIOandM;The use of encrypted passwords appears reasonably secure in the absence ofserious attention of experts in the field.andP;  [R.andP;  Morris and K. Thompson]andM;Unfortunately, some experts in the field have been giving serious attentionto fast implementations of the UNIX password encryption algorithm.andP;  UNIXpassword authentication works without putting any readable version of thepassword onto the system, and indeed works without protecting the encryptedpassword against reading by users on the system.andP;  When a user types apassword in the clear, the system encrypts it using the standard crypt( )library routine, then compares it against a saved copy of the encryptedpassword.andP;  The encryption algorithm is meant to be basically impossible toinvert, preventing the retrieval of passwords by examining only the encryptedtext, and it is meant to be expensive to run, so that testing guesses willtake a long time.andP;  The UNIX password enryption algorithm is based on theFederal Data Encryption Standard (DES).andP;  Currently no one knows how to invertthis algorithm in a reasonable amount of time, and while fast DES encodingchips are available, the UNIX version of the algorithm is slightly perturbedso that it is impossible to use a standard DES chip to implement it.andM;Two problem have been mitigating against the UNIX implementation of DES.andO;Computers are continually increasing in speed--current machines are typicallyseveral times faster than the machines that were available when the currentpassword scheme was invented.andP;  At the same time, methods have been discoveredto make software DES run faster.andP;  UNIX passwords are now far more susceptibleto persistent guessing, particularly if the encrypted passwords are alreadyknown.andP;  The worm's version of the UNIX crypt( ) routine ran more than ninetimes faster than the standard version when we tested it on our VAX 8600.andO;While the standard crypt ( ) takes 54 seconds to encrypt 271 passwords on our8600 [the number of passwords actually contained in our password file), theworm's crypt( ) takes less than six seconds.andM;The worm's crypt( ) algorithm appears to be a compromise between time andspace: the time needed to encrypt one password guess versus the substantialextra table space needed to squeeze performance out of the algorithm.andO;Curiously, one performance improvement actually saves a little space.andP;  Thetraditional UNIX algorithm stores each bit of the password in a byte, whilethe worm's algorithm packs the bits into two 32-bit words.andP;  This permits theworm's algorithm to use bitfield and shift operations on the password data,which are immensely faster.andP;  Other speedups include unrolling loops,combining tables, precomputing shifts and masks, and eliminating redundantinitial and final permutations when performing the 25 applications ofmodified DES that the password encryption algorithm uses.andP;  The biggestperformance improvement comes as a result of combining permutations: the wormuses expanded arrays which are indexed by groups of bits rather than thesingle bits used by the standard algorithm.andP;  Matt Bishop's fast version ofcrypt( ) [1] does all of these things and also precomputes even morefunctions, yielding twice the performance of the worm's algorithm butrequiring nearly 200 KB of initialized data as opposed to the 6 KB used bythe worm and the less than 2 KB used by the normal crypt( ).andM;How can system administrators defend against fast implementations of crypt()?andP;  One suggestion that has been introduced for foiling the bad guys is theidea of shadow password files.andP;  In this scheme, the encrypted passwords arehidden rather than public, forcing a cracker to either break a privilegedaccount or use the host's CPU and (slow) encryption algorithm to attack, withthe added danger that password test requests could be logged and passwordcracking discovered.andP;  The disadvantage of shadow password files is that ifthe bad guys somehow get around the protections for the file that containsthe actual passwords, all of the passwords must be considered cracked andwill need to be replaced.andM;Another suggestion has been to replace the UNIX DES implementation with thefastest available implementation, but run it 1000 times or more instead ofthe 25 times used in the UNIX crypt( ) code.andP;  Unless the repeat count issomehow pegged to the fastest available CPU speed, this approach merelypostpones the day of reckoning until the cracker finds a faster machine.andO;It's interesting to note that Morris and Thompson measured the time tocompute the old M-209 (non-DES) password encryption algorithm used in earlyversions of UNIX on the PDP-11/70 and found that a good implementation tookonly 1.25 milliseconds per encryption, which they deemed insufficient;currently the VAX 8600 using Matt Bishop's DES-based algorithm needs 11.5milliseconds per encryption, and machines 10 times faster than the VAX 8600at a cheaper price will be available soon (if they aren't already!).andM;OPINIONSandM;The act of breaking into a computer system has to have the same social stigmaas breaking into a neighbor's house.andP;  It should not matter that theneighbor's door is unlocked.andP;  [K.andP;  Thompson]andM;[Creators of viruses are] stealing a car for the purpose of joyriding.andP;  [R.andO;Morris, in 1983 Capitol Hill testimony, cited in the New York Times,11/11/88]andM;I do not propose to offer definitive statements on the morality of the worm'sauthor, the ethics of publishing security information or the security needsof the UNIX computing community, since people better (and less) qualifiedthan I are still copiously flaming on these topics in the various networknewsgroups and mailing lists.andP;  For the sake of the mythical ordinary systemadministrator who might have been confused by all the information andmisinformation, I will try to answer a few of the most relevant questions ina narrow but useful way.andM;Did the worm cause damage?andP;  The worm did not destroy files, intercept privatemail, reveal passwords, corrupt databases or plant trojan horses.andP;  It didcompete for CPU with, and eventually overwhelm, ordinary user processes.andP;  Itused up limited system resources such as the open file table and the processtext table, causing user processes to fail for lack of same.andP;  It caused somemachines to crash by operating them close to the limits of their capacity,exercising bugs that do not appear under normal loads.andP;  It forcedadministrators to perform one or more reboots to clear worms from the system,terminating user sessions and long-running jobs.andP;  It forced administrators toshut down network gateways, including gateways between important nation-wideresearch networks in an effort to isolate the worm.andP;  This action led todelays of up to several days in the exchange of electronic mail, causing someprojects to miss deadlines and others to lose valuable research time.andM;It made systems staff across the country drop their ongoing hacks and work24-hour days trying to corner and kill worms.andP;  It caused members ofmanagement in at least one institution to become so frightened that theyscrubbed all the disks at their facility that were online at the time of theinfection, and limited reloading of files to data that was verifiablyunmodified by a foreign agent.andP;  It caused bandwidth through gateways thatwere still running after the infection started to become substantiallydegraded--the gateways were using much of their capacity just shipping theworm from one network to another.andP;  It penetrated user accounts and caused itto appear that a given user was disturbing a system when in fact they werenot responsible.andP;  It's true that the worm could have been far more harmfulthan it actually turned out to be: in the last few weeks, several securitybugs have come to light which the worm could have used to thoroughly destroya system.andP;  Perhaps we should be grateful that we escaped incredibly awfulconsequences, and perhaps we should also be grateful that we have learned somuch about the weaknesses in our system's defenses, but I think we shouldshare our gratefulness with someone other than the worm's author.andM;Was the worm malicious?andP;  Some people have suggested that the worm was aninnocent experiment that got out of hand, and that it was never intended tospread so fast or so widely.andP;  We can find evidence in the worm to support andto contradict this hypothesis.andP;  There are a number of bugs in the worm thatappear to be the result of hasty or careless programming.andP;  For example, inthe worm's if_init( ) routine, there is a call to the block zero functionbzero( ) that incorrectly uses the block itself rather than the block'saddress as an argument.andP;  It's also possible that a bug was responsible forthe ineffectiveness of the population control measures used by the worm.andO;This could be seen as evidence that a development version of the worm &quot;gotloose&quot; accidentally, and perhaps the author originally intended to test thefinal version under controlled conditions, in an environment from which itwould not escape.andM;On the other hand, there is considerable evidence that the worm was designedto reproduce quickly and spread itself over great distances.andP;  It can beargued that the population control hacks in the worm are anemic by design:they are a compromise between spreading the worm as quickly as possible andraising the load enough to be detected and defeated.andP;  A worm will exist for asubstantial amount of time and will perform a substantial amount of work evenif it loses the roll of the (imaginary) dice; moreover, one-in-seven wormsbecome immortal and cannot be killed by dice rolls.andM;There is ample evidence that the worm was designed to hamper efforts to stopit even after it was identified and captured.andP;  It certainly succeeded inthis, since it took almost a day before the last mode of infection (thefinger server) was identified, analyzed and reported widely; the worm wasvery successful in propagating itself during this time even on systems whichhad fixed the sendmail debug problem and had turned off rexec.andP;  Finally,there is evidence that the worm's author deliberately introduced the worm toa foreign site that was left open and welcome to casual outside users, ratherungraciously abusing this hospitality.andP;  He apparently further abused thistrust by deleting a log file that might have revealed information that couldlink his home site with the infection.andP;  I think the innocence lies in theresearch community rather than with the worm's author.andM;Will publication of worm details further harm security?andP;  In a sense, the wormitself has solved that problem: it has published itself by sending copies tohundreds or thousands of machines around the world.andP;  Of course, a bad guy whowants to use the worm's tricks would have to go through the same effort thatwe went through in order to understand the program, but then it only took usa week to completely decompile the program.andP;  Therefore, while it takesfortitude to hack the worm, it clearly is not greatly difficult for a decentprogrammer.andP;  One of the worm's most effective tricks was advertised when itentered--the bulk of the sendmail hack is visible in the log file, and a fewminutes work with the sources will reveal the rest of the trick.andP;  The worm'sfast password algorithm could be useful to the bad guys, but at least twoother faster implementations have been available for a year or more, so it isnot very secret, or even very original.andP;  Finally, the details of the wormhave been well enough sketched out on various newsgroups and mailing liststhat the principal hacks are common knowledge.andP;  I think it is more importantthat we understand what happened, so that we can make it less likely tohappen again, rather than spend time in a futile effort to cover up the issuefrom everyone but the bad guys.andP;  Fixes for both source and binarydistributions are widely available, and anyone who runs a system with thesevulnerabilities needs to look into these fixes immediately, if they have notdone so already.andM;CONCLUSIONandM;It has raised the public awareness to a considerable degree.andP;  [R.andP;  Morris,New York Times, 11/5/88]andM;This quote is one of the understatements of the year.andP;  The worm story was onthe front page of the New York Times and other newspapers for days.andP;  It wasthe subject of television and radio features.andP;  Even the Bloom County comicstrip poked fun at it.andM;Our community has never before been in the limelight in this way, and judgingby the response, it has scared us.andP;  I will not offer any fancy platitudesabout how the experience is going to change us, but I will say that I thinkthese issues have been ignored for much longer than was safe, and I feel thata better understanding of the crisis just past will help us cope better withthe next one.andP;  Let's hope we are as lucky the next time.andO;</TEXT></DOC>