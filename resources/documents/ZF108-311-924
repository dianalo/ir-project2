<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-311-924  </DOCNO><DOCID>08 311 924.andM;</DOCID><JOURNAL>Lotus  April 1990 v6 n4 p66(10)* Full Text COPYRIGHT Lotus Publishing Corp. 1990.andM;</JOURNAL><TITLE>Collecting factory data. (consolidating and displaying productiondata in real time with Lotus 1-2-3)(includes related article onhardware and software add-ins for factory data management)(tutorial)</TITLE><AUTHOR>Losole, Nicholas J.andM;</AUTHOR><SUMMARY>Many companies now use computer integrated manufacturingtechniques to increase competitiveness.andP;  A macro-driven templatefor consolidating real-time factory data in Lotus 1-2-3 isdescribed.andP;  The template can read data from ASCII files created bydata-collection software or accept direct input from a datacollection board.andP;  A worksheet file starts macros that displaymenus attached to shift-start, shift-end, data-acquisition, andgraphing routines.andP;  The macro expects to find data in speciallyformatted files.andP;  Guidelines for customizing the model throughmacro editing are presented.andP;  Macro modules provide menu optionsat startup, save data, and prompt the user for additional data.andP;  Acomplete macro program listing is presented, along with a guidefor setting up the worksheet.andM;</SUMMARY><DESCRIPT>Company:   Lotus Development Corp. (products).andO;Ticker:    LOTS.andO;Product:   Lotus 1-2-3 (Spreadsheet software) (usage).andO;Topic:     Factory ManagementComputer-Integrated ManufacturingData Acquisition SystemsData AnalysisSpreadsheetsTutorial.andO;Feature:   illustrationprogram.andO;Caption:   Macro listing (program)andM;</DESCRIPT><TEXT>COLLECTING FACTORY DATAandM;To remain competitive, more and more companies are turning tocomputer-integrated manufacturing, or CIM.andP;  When combined with such othervital tools as statistical process control and just-in-time-inventorymanagement, CIM can be a powerful assist in reducing the cost of products.andM;But CIM comes in many shapes and sizes.andP;  It can be as simple as the use ofbar codes to capture data on the status of parts during manufacture.andP;  Or itcan be as vast and intimidating as a fully automated factory, in which alloperations are linked by the computer.andP;  The lesson that many of us havelearned is that it pays to implement CIM in small bites, starting withoperations that we fully understand and that are already running well.andP;  Thatlimits the impact of mistakes.andP;  And it's less likely that we'll outpace thework force in its ability to absorb the changes.andM;The PC and 1-2-3 can be excellent tools for implementing CIM in bite-sizepieces.andP;  In a recent article, I showed how a macro-driven template canprovide an interface that makes it simple for a machine operator to enterdata from the factory floor (&quot;To Control Production, Point and Shoot,&quot;December, page 38).andP;  In this article, I will show how to take the next stepby consolidating factory data--whether they are input manually or retrievedautomatically--from many sources and presenting it in a useful form.andM;The macro-driven template described in this article runs in 1-2-3 Releases2.01, 2.2, and 3.andP;  As Figure 1 suggests, it produces a table that shows youhow many parts were begun, finished, and released for each shift and for eachmachine, as well as how many hours each machine was busy.andP;  The program alsoallows you to see instantaneously a graph of parts production and a graph ofmachine uptime.andP;  You can store the table as a worksheet, call it up, andprint it out.andM;HOW TO USE THE MODELandM;The template can be used in two ways.andP;  It can read data from ASCII files thatare created by data-collection devices, such as hand-held readers ordata-collection servers.andP;  Or it can read data directly from a data-collectionboard that is attached to the same PC on which 1-2-3 is running.andP;  Some boardsthat are available are noted in the &quot;Getting Data in Real Time&quot; box on page73.andP;  A board allows data to be collected, displayed, and updated in the 1-2-3worksheet in real time.andM;The simplest and least costly way to begin is to use a device that cancollect data, store it as ASCII strings, consolidate it into an ASCII file,and dump it onto a PC's disk through a COM port.andP;  Most hand-helddata-collection devices have these capabilities.andP;  Most also allow you toformat data strings having various lengths and various delimiters.andP;  Forexample, you can separate time, date, and production counts by using commas.andO;Or, as is assumed in this article, you can position the data in each recordat specific locations within a single string.andM;To use the model, first make sure that you have initialized it (describedlater).andP;  Then load 1-2-3 and call up the worksheet, which we'll call FACTORY.andO;When the file loads, it starts a macro that displays the menu shown in figure1.andP;  Here is a description of a typical sequence of operations that you mightfollow:andM;1.andP;  Choose Start_Shift.andP;  This puts the cell pointer at the beginning of row2.andP;  Press the RightArrow key to move to any data item for which you wish tochange the data, then press the F2 key.andP;  A data-entry prompt appears in1-2-3's control panel, and the cursor waits there for your input.andP;  Press theLeftArrow key to back up to previous data items, and press Escape when youhave finished entering the shift data.andP;  The macro's main menu reappears.andM;2.andP;  Choose Get_Data.andP;  You are prompted for a file name.andP;  Unless the ASCIIdata files are in the default directory, include the full path name.andP;  Themacro reads the data from the file into the table, line by line.andP;  When itfinishes, choose Get_Data again and enter the next file name.andP;  This time, theincoming data are automatically added to the previous contents of each cellin the table.andM;3.andP;  Choose End_Shift.andP;  The macro stores the tabular data on disk under a filename that includes both the date and the shift number--for example,3-14-90.SH1.andP;  The macro deletes all production data from the screen andredisplays the main menu.andM;4.andP;  Choose Parts_Graph or Uptime_Graph to see a graphical summary of partsproduction or of the machine's uptime, respectively, based on theconsolidated data on the screen.andP;  The graphs are like those in figure 2.andM;5.andP;  Choose Quit to end the macro and exit 1-2-3.andM;You can use the other menu option, Reset, to reset the production counts tozero if you make an error during data retrieval.andP;  Caution: You must selectStart_Shift and reenter the START time after you select Reset.andM;At any time while in 1-2-3, you may retrieve a shift record as a worksheetand print it out.andP;  You can also set up a worksheet to combine data from manyshift records by using the File Combine commands.andP;  If you have Release 3, youcan do this much more easily than in Release 2/2.01.andM;BUILD AND TEST THE MODELandM;To build this model, follow the instructions in the setup box on pages 74 and75.andP;  The labels and starting values to be entered are shown in figures 3, 4,and 5.andM;Before you can exercise the model, you must have some data to import.andP;  Themodel, as presented in this article, expects to find the data in files thatare organized precisely as shown in figure 6.andP;  The figure shows six files.andP;  Isuggest that you prepare those six files; store them under such names asDATA1.PRN, DATA2.PRN, and so forth; and use them to test the model.andM;Each row in figure 6 is a record consisting of a single ASCII string.andP;  Eachdatum in the row must start in the column indicated.andP;  The starting points arecolumns 0, 15, 20, 30, 40, 45, and 50.andP;  The model does not read the row ofrepeating digits at the top of each file, but you should enter that row ofdigits to help ensure accuracy in placing the data.andP;  Do not enter the rows ofhorizontal and vertical lines shown in figure 6.andM;You can produce such a file by using an ASCII word processor, or by usingSymphony's DOC mode and printing to a file.andP;  You can also choose to type thedata in a single column in a separate 1-2-3 worksheet and print to a file.andO;Be sure to define the Print range to include all the columns covered by thedata on the screen.andM;If you use an ASCII word processor, assign a .PRN extension to the file name.andO;The model has been coded to look for that string and therefore does notrequire you to enter an extension when you issue the Get_Data command.andP;  Youcan change that extension if you alter the macro code in cell B125accordingly, or you can permit various extensions by eliminating theextension entirely from that line of macro code.andP;  To do that, eliminate theexpression .prn from the code in cell B125.andM;You must initialize the model before you can use it for the first time.andO;Initialization consists of entering the date and time values in row 2 undermacro control.andM;To do so, retrieve the worksheet and select Start_Shift.andP;  Press the F2 keyand enter any date by using the mm/dd/yy format (for example, 3/14/90).andP;  Movethe cell pointer to cell E2, press the F2 key and enter 7:30.andP;  Similarly,enter 15:30 in cell F2.andP;  You must enter military time, though the model willdisplay the time in the usual way.andP;  Press Escape to return to the macro'smain menu.andM;The model is ready to receive data.andP;  If you select Get_Data and then, one ata time, retrieve the six data files you prepared, you should end up with ascreen that looks like figure 1.andP;  Bear in mind that the display representsonly part of a shift.andP;  In practice, at the end of a shift you would retrievea final data record that would be time-stamped.andM;If you run into a problem in testing the model, you can break out of macrocontrol by pressing Control-Break, then Escape.andP;  You can restart the macro byholding down the MACRO key (Alt on most computers) and pressing M.andM;After you have tested the model with the six files provided, you may want totest it more thoroughly.andP;  If you produce additional data files, note that itis not necessary to list every machine in every file or even to list them inthe same order in every file.andM;MODIFYING THE MODELandM;If you have reasonable facility with macros, a little study of the macromodules in figure 5 will show you how to adapt the model to different dataformats.andP;  The key is the series of @HLOOKUP and @TRIM statements in rangeB129..B154.andM;You may also want to consider some of the enhancements offered by the newreleases of 1-2-3.andP;  Releases 2.2 and 3 allow you to suppress the row andcolumn borders.andP;  And Release 2.2, for example, allows you, duringinstallation, to specify a 43-line screen if you have an EGA or VGA monitor.andO;The model is not designed to permit up-and-down scrolling, so on a normalscreen it is limited to a department that has 11 machines.andP;  The 43-linescreen would allow you to use this model for as many as 29 machines if youmoved the macro code down accordingly.andM;With Release 2.2 you could take advantage of file linking.andP;  For example,assume that a production-control analyst maintains a worksheet thatcalculates the number of work hours available to a department, based on theplant's labor standards.andP;  If the figure is in a cell named work_hrs, which isin a source file called HOURS.WK1, you could put the following file-linkformula in cell G2 of the target file:andM;+[is less than][is less than]hours.wk1[is greater than][is greaterthan]work_hrsandM;For Release 2.2 you could also add a menu option called Print that wouldinvoke Allways, assuming you have attached it, and then you could specify apreviously designed settings sheet.andM;Release 3 offers file linking similar to that of Release 2.2.andP;  As yet, it hasno Allways-like capability.andP;  However, it does let you show a graph and therelated worksheet on the same screen.andP;  You would have to add such an optionto the menu and write macro code that would both position the cursor at thecorrect point on the screen and issue a Worksheet Window Graph command.andM;You might also want to use the multisheet capability of Release 3 to separatethe macros from the input screen.andP;  Just build the model in sheet A.andP;  Thenselect/Worksheet Insert Sheet After and enter 1.andP;  Hold down the Control keyand press PageDown to return to sheet A.andP;  Then select/Move, enter A30..H181as the range to move from, and enter B:A30 as the range to move to.andP;  Themacros will now reside on sheet B, safely out of the way of anymiscalculations related to data input.andM;If you're skilled in Symphony, it would not be hard to change the macros towork in that environment.andP;  The previous production-control article listedmany of the types of macro commands you would have to alter (December, page42, column 2).andM;HOW THE MACRO MODULES WORKandM;As in the earlier model in this series, a key feature of the program is thetable of variables, which you'll see in range A168..B181.andP;  The macro assignsthese variables different values at different times.andP;  This simplifies theremaining code, which can use the variables' range names instead of a muchlonger list of range names.andM;The economy is especially apparent in the proflic use of the matrix_row andmatrix_col variables in the large read_loop section of the code.andP;  Withoutthose variables, we would have to put specific row and column numbersthroughout the code.andP;  As it is, for example, you don't have to know in whatrow a machine is listed.andP;  You can add rows by using the Worksheet Insert Rowcommand without having to change the code.andM;Another technique worth noting is the use of the @VLOOKUP and @HLOOKUPfunctions in that same section.andP;  To set variable matrix_col to the correctvalue, for example, the macro uses @HLOOKUP to search across the second lineof column headings (row 8 on the screen) for the appropriate string ofcharacters, say, STS.andP;  The technique has two advantages.andP;  First, it makesthose lines of code self-documenting.andP;  Second, it means that you can insertanother column in the data matrix without having to edit extensively thatsection of code.andM;As in the earlier model, the macro uses some dynamic code--code that changeseven as the macro is running.andP;  In this model, such code is used in cell B118to incorporate the current date in the name of the new file to be saved.andP;  Andthe code is used in cell B125 to pick up the name of the data file that'sbeing retrieved.andM;STARTUPandM;You can see most of the macro, which is shown in figure 5.andP;  Figure 5, whichstarts on page 70, continues on page 71 and then on to this page.andM;When you load the template, the macro will start automatically.andM;Sheet_setup puts the appropriate starting message in the help_msg range andsets up the screen for the macro's main menu.andM;Main_menu sets up a seven-choice menu in the control panel and places thecell pointer on the first entry.andP;  The first three options and the last twooptions, when selected, branch to the routines described in the next section,Menu Options.andP;  The fourth and fitth options use Graph Name Use commands todisplay named graphs.andM;MENU OPTIONSandM;The code for the menu options is shown in figure 4.andM;Start_shift puts a new help message in the help_msg range and calls theprompt_ctrl routine to interpret the user's keystrokes during the entry ofshift-start data.andP;  When that step is complete, the macro branches to restart.andM;End_shift uses the {GETLABEL} command to capture a keystroke in the variablekey.andP;  If key is y or Y, the macro calls the save_data and init_shift routines(see below) and then branches back to restart.andP;  If key is anything else, themacro goes to restart immediately.andM;Get_data uses the {GETLABEL} command to capture the name of a data file invariable file_name.andP;  It puts a help message in help_msg, then callsread_file, a major routine described later.andP;  Finally, the macro branches torestart.andM;Initialize uses the {GETLABEL} command to capture a keystroke in the variablekey.andP;  If key is y or Y, the macro calls the init_shift routine and thenbranches to restart.andP;  If key is anything else, the macro goes to restartimmediately.andM;Exit_app uses the {GETLABEL} command to capture a keystroke in the variablekey.andP;  If key is y or Y, the macro issues a Quit Yes yes command (onlyReleases 2.2 and 3 need the second Yes) to end the program.andP;  If key isanything else, the macro branches to main_menu.andM;TO END AND START A NEW SHIFTandM;Save_data puts a new help message in the help_msg range.andP;  It recalculates thefile_save macro range in order to ensure that its dynamic code includes thecurrent date, and it executes the dynamic code in the file_save subroutine.andM;File_save extracts the range file_data, which contains the production datathat has been collected, and saves it to disk.andP;  The macro uses stringfunctions to capture the current date and shift number in the file name.andM;Init_shift puts a new help message in the help_msg range.andP;  For each row inthe data table (matrix), it then runs the nested subroutine init_loop.andP;  Foreach column, this subroutine calls the subroutine col_loop, which inserts 0in the cell.andP;  Thus the data table is initialized to zero values throughout.andO;A {RECALC} command updates the @SUM formulas in the file_data range,andcontrol returns to the initialize routine and thence to restart.andM;PROMPTING FOR INITIAL DATAandM;Prompt_ctrl puts the cell pointer on the first data cell in input and passescontrol to the input_loop subroutine.andM;Input_loop waits for a keystroke.andP;  It accepts RightArrow and LeftArrowcommands as long as they keep the cell pointer within input.andP;  If Escape ispressed, the subroutine recycles to the macro's main menu.andP;  If F2 is pressed,control passes to the input_prompt subroutine.andP;  Pressing any other keyresults in no action.andM;Input_prompt determines what column of the input range the cell pointer is onand puts the corresponding number in the variable col.andP;  It then uses @HLOOKUPfunctions to determine which item of data corresponds to each column numberand calls the appropriate subroutine from the list of q_ subroutines.andM;Each of the seven q_ subroutines uses a {GETLABEL} or {GETNUMBER} command toissue a prompt and wait for the user to enter data.andP;  If data is entered, themacro inserts it in the current cell.andP;  If the user presses Escape, the olddata is left in the cell.andP;  In either case, control returns to input_prompt.andO;The @ISERR function is required with the {GETNUMBER} command to keep the cellfrom evaluating to ERR when Escape is pressed.andP;  The @TIMEVALUE and @DATEVALUEfunctions are used for time and date entries, respectively, to convert thelabels to values that can be used in calculations.andM;READING THE FILEandM;When you select Get_Data from the macro's main menu, you are prompted for thename of the data file that you want to read into th template.andP;  Read_filerecalcultes the macro range open_it to furnish the file name you specified toan {OPEN} command.andP;  It then passes control to open_it.andM;Open_it opens the named file.andP;  If the file is not found, the macro branchesto the routine no_file.andP;  If the file is found, the subroutine uses {FILESIZE]to determine its size and assign it to the variable fsize.andP;  It then passescontrol to the lengthy subroutine read_loop.andM;Read_loop uses the {READLN} command to read the first line of the data fileand store it in the variable rcd.andP;  It uses the {GETPOS} command to determinethe cumulative number of bytes read, and then it stores this in the variablebytes.andP;  A {LET} command stores the first 15 bytes--the characters in the WORKSTATION column--of the record in the variable data.andP;  It then uses @VLOOKUP,coupled with @ISERR, to see if that string corresponds to any entry in thecorresponding column of matrix.andP;  If it does not, the macro branches toeof_test to see if the end of the data file has been reached.andP;  Otherwise, themacro proceeds to read the next line of the data file.andM;When the macro locates a match in the WORK STATION column, it sets thevariable matrix_row to the number of that row in the matrix range, then putsthe next five characters of rcd into the variable data.andP;  It then uses@HLOOKUP to locate the field name STS, for status, and sets the variablematrix_column to the number of that column in matrix.andP;  It uses @INDEX toretrieve the value in that cell and to store it in variable prev_sts.andP;  Ituses a {PUT} command to store the new string from rcd in that STS cell, andit uses another @INDEX command to copy that value into the variable data_sts.andM;The macro uses a similar sequence of commands to retrieve the value in theTIME column, to store the previous time value, and to insert the new value inthe table.andP;  It checks to see if the previous status was Run.andP;  If not, itbranches to subroutine do_oper.andP;  If so, read_loop uses @HLOOKUP to find theUPTIME column in matrix and sets matrix_col to the number of that column.andO;And it uses @TIMEVALUE to extract time value from the variable data and tostore it in the variable new_time.andP;  It uses a lengthy @IF formula to subtractprev_time from new_time, taking into account the possibility that a shift mayrun past midnight.andP;  It uses @INDEX to determine the existing time value inthat cell (matrix_row, matrix_col) of the table, adds the new time interval,inserts the result in that same cell, and passes control to the subroutinedo_oper.andM;Do_oper reads and inserts data from rcd in the same way read_loop does,filling cells in the OPERATOR, STARTED, FINISHED, and RELEASED columns.andP;  Theonly difference is that there is no need to store copies of new or previousdata for these columsn in separate variables.andP;  After handling the RELEASEDdata, the macro runs the eof_test routine.andP;  This uses an {IF} command to seewhether the value in bytes, the pointer's current position in the externalfile, equals the value in fsize, the size of that file.andP;  If not, the macrobranches to read_loop to retrieve the next record from the file.andP;  If so, themacro passes control to read_end.andM;Read_end closes the external file and then uses {RECALC} to update theresults of the @SUM formulas in the range file_data, the data table on thescreen.andM;No_file, a subroutine that is called if the file you name cannot be found,beeps, displays a help message, waits for a keystroke, and branches torestart.andM;Nicholas J. Losole, a former manager of factory-automation systems at GeneralMotors Corp., is manufacturing-market-development manager for LotusDevelopment Corp.andO;</TEXT></DOC>