<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-011-041 </DOCNO><DOCID>11 495 634</DOCID><JOURNAL>PC Week  Nov 18 1991 v8 n46 p121(3)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1991.andM;</JOURNAL><TITLE>Interface tools simplify Windows work: WindowsMaker provideseasy-to-use interface; CASE:W generates more complete code.andO;(overview of two evaluations of program-developmentsoftware)(includes related article on testing methodology)(Software Review) (Evaluation)</TITLE><AUTHOR>Methvin, Dave.andM;</AUTHOR><SUMMARY>Writing applications for Microsoft Windows, using the C language,can be a difficult task, but it is made easier with good toolsfrom third-party software developers.andP;  Two such products, whichhelp a developer to design and test a Windows application, areevaluated: WindowsMaker Professional 3.1, $995, from Blue SkySoftware Corp; and CASE:W Corporate Edition 3.12, $995, fromCaseworks Inc. These products automatically generate C code neededfor menus and dialog boxes in an application's interface.andO;Interface generators make it easy to create a program because itallows the programmer to simply point and click with a mouse.andP;  Atest mode checks to see that menus are fully specified andappropriately connected.andP;  Both these products are themselvesundergoing continuous development and can be expected to appear inimproved versions soon.andM;</SUMMARY><DESCRIPT>Company:   Blue Sky Software Corp. (Products).andO;Product:   Microsoft Windows (Graphical user interface) (evaluation)WindowsMaker Professional 3.1 (Program development software)(evaluation)CASE:W Corporate Edition 3.12 (CASE software) (evaluation).andO;Topic:     Program Development SoftwareEvaluationComputer-aided software engineeringUser Interface Management Systems.andO;Feature:   illustrationtable.andM;</DESCRIPT><TEXT>By Dave MethvinandM;Anyone who has written, or has tried to write, an application for MicrosoftWindows using the C language would concede that it's difficult.andP;  Fortunatelyfor programmers, third-party software developers have seized upon thisopportunity to provide tools that are much more powerful than those providedin the Microsoft Windows Software Development Kit.andP;  PC Week Labs examined twoproducts that allow the developer to graphically design and test aWindows-based application's user interface: Blue Sky Software Corp.'sWindowsMaker Professional 3.1 and Caseworks Inc.'s CASE:W Corporate Edition3.12.andP;  Once the design has been specified, both products automaticallygenerate the C code required to manage the menus and dialog boxes of theapplication's user interface.andM;Without these Windows interface code generators, developers must use a texteditor to create or edit a resource file that describes the menus and dialogboxes they will use in the application.andP;  In a separate file, they must placeC code that is called when the menus or dialog boxes are selected.andM;Often developers cannot tell if they made a mistake in the resource file orcorresponding C code until the entire application is recompiled and tested.andO;This process is tedious and error-prone, especially for applications withcomplex user interfaces.andM;Interface generators simplify developers' work by letting them point andclick with a mouse as they design a Windows interface.andP;  Developers canspecify the menu and submenu items and the actions that the code should takewhen the user selects those items.andP;  If the menu links to a dialog box, theinterface generator handles the work needed to display the dialog box.andM;It is also easy to change items such as the colors of windows, frame stylesand captions.andP;  For example, instead of specifying the window's position bytyping screen coordinates into the resource file, the user of an interfacegenerator can simply drag the window to its desired position using the mouse.andM;To simplify testing of the user interface, both products provide a test modethat interprets the specification of the user interface.andP;  This lets thedeveloper check that all menus are fully specified and connected to theappropriate dialog boxes.andM;After defining the user interface and using the interface generator to createthe corresponding C code, the developer must complete the application.andP;  Thisinvolves modifying the generated C code to perform the work required when theuser requests a particular action.andM;In a data-entry application, for example, the user may have typed data into adialog box for a new data record.andP;  The interface generator creates only thecode to invoke the dialog box.andP;  To complete the operation, the developer mustwrite code to take the data entered into that dialog box and save it into thedatabase.andP;  With its extended code support, CASE:W goes a bit further thanWindowsMaker Professional in generating the dialog-box interface, but bothproducts stop far short of building a completed application.andM;With either product, a developer still needs a good knowledge of the WindowsSoftware Development Kit (SDK) to produce a finished application.andP;  Inaddition, the developer must learn the rules imposed by the interfacegenerator about what parts of the generated code can be modified.andM;The amount of code that must be written to complete the application willdepend greatly on the type of application being written.andP;  The data-entryexample mentioned above would probably require very little additional code.andO;On the other hand, a drawing application that allows the user to manipulategraphical objects would take considerably more programming effort.andM;An application's user interface rarely remains unchanged for long.andP;  Givendevelopers' frequent need to change an existing application, both of theseinterface generators can regenerate an application even after the developerhas added code to complete the application.andP;  Thus, the interface generatorremains a useful tool throughout the life of the application.andM;Another convenience common to both products is the ability to manage thesoftware development process from within the interface generator.andP;  Extensivecontrol over compilation options is provided.andP;  The developer can also invoketext editors, dialog editors, Make programs or other utilities.andP;  In addition,neither product is standing still.andP;  Blue Sky's Magic Fields, a data-fieldvalidation tool for Windows slated for release in December, will help toclose the gap with CASE:W in dialog-box field-validation capabilities.andO;Caseworks plans to migrate improvements from its recently released OS/2version into the CASE:W product in a new release slated for availabilityearly next year.andM;The two Windows interface generators were tested on a Compaq Deskpro 386/20ewith 4M bytes of RAM, running Windows 3.0 and DOS 5.0.andM;To test the products, PC Week Labs created the interface for a simple texteditor.andP;  The editor was designed as a Multiple Document Interface (MDI)application so that multiple files could be opened inside the main window.andM;Dialog boxes for the application were created using both the dialog editorssupplied by the Microsoft Windows Software Development Kit and Blue SkySoftware Corp.'s WindowsMaker Profecssional 3.1.andP;  The application wascompiled with Microsoft C version 6.0, using the Make facility.andM;Code generated by each product was inspected for clarity and quality.andO;Combinations of program options were tested to assess their effect on codegeneration.andP;  Code was then added to the user-interface code frameworkgenerated by the product, and the interface was regenerated to determine theeffect of developer-added code on the generationandM;process.andP;  -- D.M.andM;</TEXT></DOC>