<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-429-854  </DOCNO><DOCID>08 429 854.andM;</DOCID><JOURNAL>Communications of the ACM  May 1990 v33 n5 p495(10)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Building bilingual microcomputer systems. (Integrated ArabicSystem)</TITLE><AUTHOR>Tayli, Murat; Al-Salamah, Abdulla I.andM;</AUTHOR><SUMMARY>The need for bilingual microcomputer systems continues to increasein the Arab world.andP;  Along with the ability to process the Englishand Arabic scripts, an ideal system should support the use ofexisting applications with Arabic data and provide access to thesystem facilities through Arabic interfaces.andP;  The IntegratedArabic System (IAS) was developed to study the feasibility ofbuilding such systems using existing microcomputers and softwaresolutions.andP;  IAS's layered architecture helps to overcomedifficulties associated with bilingual microcomputer systems,including the need to preserve the native assets of the originalsystem, and the necessity to port existing applications on the newsystem and use them with either language or a combination of thetwo.andM;</SUMMARY><DESCRIPT>Topic: ; Processor ArchitectureLanguageApplicationsComputer DesignMicrocomputersStudyUser InterfacePopulation Groups.andO;Feature:   illustrationchart.andO;Caption:   Phonetic value of basic elements of the Arabic alphabet. (chart)Shapes of Arabic letters depend on their context. (chart)Architecture of the integrated Arabic system. (chart)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Arabic, one of the five official languages of the United Nations, is themother tongue of some 200 million people in 21 countries [6].andP;  The Arabicalphabet and script are also used, with minor variations, to write otherlanguages like Farsi, Urdu, and Malay markedly extending the geographical andeconomical impact of this language.andP;  In all of these countries, a wide rangeof computing tools, originally designed to process Latin-based scripts, havebeen in use for decades despite the linguistic barriers and inadequacy oftheir user interfaces.andM;In addition to the need for ad hoc peripherals capable of handling Arabicscript, the computer profession requires, at almost all its levels, anadditional qualification: a proficiency in the English language.andP;  This addedburden restricts many who would benefit from computers if the facilities wereavailable to them in their own language, particularly at entry levels.andP;  Onecan easily imagine the potential problems if computer operators, in theUnited States for example, had to control their machines by using japanesecommands coded with Kanji characters.andP;  In many countries, the investment inlinguistic training and the use of specialized input/output units have beenrelatively successful when the operation of computing tools have beenisolated from the production environment.andP;  For instance, many organizationsequipped with mainframe systems have managed to serve large user communitieswith a relatively limited number of well-trained specialists.andP;  The advent ofmicrocomputer systems on the market, however, has radically altered thisremote man-machine relationship and placed the end-users in the front line.andM;To meet the pressing needs of the Arab market, several companies that operatemainly in the Middle East, have developed a wide range of products foravailable microcomputer systems.andP;  In addition to Arabic versions of popularbusiness-oriented applications, a number of software tools and utilityprograms [1, 8, 14, 15, 18] have been provided to process Arabic andbilingual data with standard input/output units of these systems.andM;Although all these products helped to boost popular usage, the languageproblem remained largely unsolved.andP;  The installation and operation of suchproducts still required the knowledge of the English language.andP;  Furthermore,the case-by-case search for particular solutions resulted in theproliferation of different norms that often conflicted with each other andled to the severe incompatibility problems.andP;  Whatever their scope, all theefforts invested to incorporate the Arabic language in computer systems havebeen commonly referred to as the arabization of computer systems or in itsabbreviated form the arabization process.andP;  The contextual semantics of thisterm is redefined in various parts of the article.andM;This article presents the design principles and architecture of a bilingualsystem called the Integrated Arabic System.andP;  This experimental system, builtaround the IBM Personal Computer family, is also used as a framework tointroduce and discuss problem areas of the arabization process at theworkstation, operating system, and application levels.andP;  MOTIVATIONS ANDOBJECTIVES This study has been designed to answer the following question:andM;Can an existing microcomputer system, designed to operate in Latin-basedenvironments, be transformed to an Arabic system, with bilingualscript-processing capabilities and still keep most of its original assets?andM;If an affirmative answer is the aim, the objectives that must be achievedinclude:andM;* the building of a system which operates in Arabic and which supportsbilingual (Arabic-English) script-processing capabilities, and in which thelinguistic issues are treated with a coherent and unified set of solutions;andM;* the provision of a series of development tools, whereby those interestedcould rapidly build new Arabic and bilingual applications;andM;* the usage of existing applications, designed to process Latin-basedscripts, with Arabic and bilingual data;andM;* the operation and usage of existing Latin-based packages, without anymodification or restriction.andM;DESIGN GUIDELINESandM;To delineate the framework of the bilingual system a number of designguidelines, (depending on more or less heuristic considerations) were set.andO;These were:andM;* for economic reasons, the arabization process had to rely mainly onsoftware solutions and let the user exploit basic capabilities of the systemwithout restriction;andM;* to address a large audience, the core of the bilingual system had to be apopular and relatively powerful workstation; * to dissociate hardwaredependent issues from higher abstraction levels (operating system andapplication layers), problems inherent to the arabization of input/outputfunctions had to be solved, whenever possible, at the workstation level; * tosupport complex layout design requirements of the display unit and allow itssharing, basic capabilities of the workstation had to include advanceddisplay management and resource multiplexing mechanisms; * to provide acomplete Arabic processing environment, the operating system of theworkstation had to support Arabic user interfaces; andandM;* to meet the functional objectives, the final system had to includebilingual development tools and programming interfaces to existing languages,at its application layer.andM;PROBLEMS OF BILINGUAL TYPESETTINGandM;The initial phase in building a bilingual system is to look for appropriatesolutions to represent selected languages accurately on the target computingmedia and secure their coexistence with minimal compromise.andP;  In the contextwe define, problems to overcome fall into three categories:andM;(1) issues related to the representation of the Arabic script;andM;(2) inconsistencies resulting from typesetting mixed language layouts;andM;(3) selection or definition of an appropriate bilingual character code setthat satisfies both international standards and requirements of the specifiedsystem.andM;Typesetting of the Arabic script on computing media originally designed toprocess Latin texts constitutes the first challenging step in the arabizationprocess.andP;  Difficulties stem not only from fundamental dissimilarities betweenthe Arabic and Latin scripts, but also from the lack of well-establishedstandards for the automation of Arabic typesetting.andP;  Problems of automaticprocessing of the Arabic script and bilingual typesetting are thoroughlycovered in [5] and [12].andP;  The following sections summarize characteristics ofthe Arabic script and highlight problem areas of the arabization process.andM;Characteristics of Arabic ScriptandM;To the uninitiated, Arabic script exhibits a number of unusual and confusingfeatures.andP;  The basic alphabet consists of a set of 28 letters, representingmainly the consonants and a few long vowels.andP;  It is extended to some 90elements by additional shapes, marks, and vowels formally recognized in theArabic morphology.andP;  Arabic letters, written in elegant cursive forms, do notdifferentiate between upper and lower case figures (Figure 1a).andM;A large number of diacritical signs, which are similar to accent marks ofEuropean languages, are used to mark short vowels and emphasize or loosen aletter's sound.andP;  These marks can be mixed and written above or below thecharacters to produce composite phonetic effects (Figure 1b).andM;Arabic script, which evolved in contemplation of the traditions ofhandwriting, is context sensitive.andP;  The shape of most of the charactersdepends on their position within a word and the characters adjacent to them.andO;Each character may be represented up to four different ways of which only onewould be correct in a particular situation (Figure 1c).andP;  Moreover, many ofthese intermediary forms depend on the adopted calligraphic style.andP;  As anextreme case of contextual reshaping, Arabic script allows ligatures betweencharacters.andP;  In other words, adjacent letters can be fused to produce newgraphical forms.andP;  In order to emulate handwriting, approximately 400ligatures are available, yet only three of them have mandatory usage (Figure1d).andM;Orientation of the Arabic script is from right to left, but Arabic numeralsare written and read from left to right (Figure le).andP;  Unlike Latin-basedalphabets, elements of the Arabic script convey directional semantics, whichcontrol the orientation of a typesetting process (a more detailed discussionis presented in the coming sections).andM;Arabic calligraphy adopted a sloping and curved concatenation model asopposed to the flat baseline of Latin-based scripts.andP;  This flowing style,along with diacritical marks, contextual shapes, and ligatures, formessential decorative elements of the Arabic handwriting.andP;  Nevertheless, theresolution of conventional computer display media is often a limiting factorthat prevents accurate reproduction of complex forms.andP;  Automatic typesettingof the Arabic script on nonspecialized equipment becomes, rather, anapproximation of an original calligraphic style (Figure 1f).andM;Typesetting of Mixed ScriptsandM;Arabic and Latin-based scripts have opposite directionalities.andP;  A compositetext, including a mixture of these scripts, can be typeset in two differentways considering one or the other language as the host context.andP;  The type ofthe host, which imposes the default orientation of the layout, is to be fixedexplicitly by external agents when no implicit indication is available.andO;Elements of the guest script are treated as counterflow insertions to themainstream.andP;  Punctuations and non-alphabetical characters common to bothtypes of script can cause contextual confusions and contribute to thecomplexity of bilingual typesetting.andM;Typesetting of mixed scripts is somewhat analogous to bidirectionaltypesetting of Arabic literals and numerals.andP;  Provisions can be made to tryto handle both cases with a common set of mechanisms.andP;  Nevertheless, mixedtypesetting maybe a recursive process and become intractable when nestedinsertions occurs, i.e., the insertion of an Arabic text that includes someLatin script, within a Latin host.andM;The basic constraint in the automation of mixed script typesetting is theexclusion of all solutions that use special formatting characters along withthe original text.andP;  In other words, in order to guarantee the portability ofexisting software, decisions on the direction of the layout have to rely onlyon the semantics of character codes, not the presence of extra directionalidiosyncrasies in the stored text.andM;Bilingual Character SetandM;The character set is one of the elementary, yet critical, features of acomputer system.andP;  Its ability to represent the language correctly and beaccepted readily by users are primary criteria to measure the adequacy of itsdesign.andP;  To the designers from English speaking countries, the availabilityof well-established international standards, such as the ASCII and EBCDICcodes, imposes de facto norms and eliminates the need to consider thedefinition of new sets.andP;  Where languages are written with Latin-basedscripts, slightly modified versions of these codes can be easily provided atthe cost of minor compromises.andP;  Even where non-Latin scripts are used,provisions have been made to fit national code sets within these 7 or 8 bitsframes in order to ensure the portability of existing hardware and softwarecomponents [8].andP;  Nevertheless, more complex coding schemas are necessary toportray several Middle Eastern and Asiatic languages accurately.andP;  Forexample, the use of extended coding schemas has been recommended to censurethe originality of the Chinese and Arabic calligraphies [4, 13, 17].andO;Consequently, for the designers from these countries, the decision to adoptan international character code standard or define a better national setdetermines whether existing products may or may not be integrally used.andM;ARCHITECTURE OF THE INTEGRATED ARABIC SYSTEMandM;The Integrated Arabic System (IAS) is organized around a kernel consisting ofan arabized workstation called the Intelligent Arabic Workstation (IAW) andthe Arabized Operating System (AOS).andP;  It also includes a series of tools,facilities, and interfaces to assist users in the development of newapplications and the arabization of existing ones.andP;  Figure 2 depicts IASarchitecture as compared to the reference system.andP;  Shaded boxes represent newmodules implementing bilingual processing functions and extensions carriedout on the original system to augment its basic capabilities.andM;INTELLIGENT ARABIC WORKSTATIONandM;The IBM Personal Computer, equipped with an Enhanced Graphics Adaptor (EGA)[9], was selected to be the target workstation.andP;  The rationale of thisadoption depended mainly on IAS's design guidelines.andP;  First of all, theIBM-PC is a popular and widely available machine with numerous clones.andP;  Arelatively large number of models exists that correspond to various systemswith different power.andP;  Furthermore, it has an open architecture and can beused as a building block to form more complex systems through variousnetworking strategies.andM;Conforming to our design principles, arabization of most of the input/outputfunctions has been carried out at the workstation level.andP;  In addition tolinguistic extensions, the Basic Input Output System (BIOS) of theworkstation has been modified to redefine the video display unit as a logicaland multiplexible resource.andP;  Furthermore, an alternative display typesettingmechanism, the Asynchronous Display Transformation Facility (ADTF), has beenadded to the workstation's arsenal in order to meet special layoutrequirements.andM;Bilingual Character SetandM;The IAW has been provided with a nonstandard, 8-bit, ASCII-like bilingualcharacter set [19].andP;  The new set was designed to comply with IAS'sobjectives, as existing national [2, 3] and international standards [10, 11]did not satisfactorily meet the specified requirements.andM;In the new set, Latin characters keep their original positions in the firsthalf of the codes [8].andP;  The second half, codes from 128 to 255, is devoted tothe Arabic alphabet and its associated shapes.andP;  A sufficient number ofdiacritical marks is included in the set to improve the accuracy of theArabic script representation.andM;Two special codes, the numeric space and the numeric comma (traditionallyused as the Arabic equivalent of the decimal point) have also been added tothe set in order to ensure proper visualization of numerals and Arabicliterals including numeric characters.andP;  This double coding for the comma andspace characters is due to both the bidirectional orientation of the Arabicscript and our decision not to include directional idiosyncrasies in thestored text.andP;  For example, the string &quot;869_7440&quot; represents either twodistinct numbers separated by a space in Latin-based scripts or a numeralformatted in a special way, such as a telephone number.andP;  The right semanticsof the string is deduced from the context in which it occurs.andP;  As for theArabic, the numeral has the same representation as its Latin counterpart, butnumbers 869 and 7440, which are separated by a space, are written as 7440_869&quot;, given the right-to-left orientation of its script.andP;  As the sameseries of characters, &quot;8-6-9-_-7-4-4-0,&quot; is presented to the system for bothcases, only the semantics of the space character can be used to decide on thecorrect Arabic layout.andP;  Similar considerations are also valid for a number ofother separators such as the comma, hyphen (also used to represent the minussign), parentheses, and brackets.andM;Bilingual TypesettingandM;IAW adopted Arabic as the host language, setting the native direction of theoutput media from right to left.andP;  Latin characters and Arabic numerals,gathered in a single subset, are treated in the insertion mode with noprovisions for nested operations.andP;  Most of the punctuation andnon-alphabetical characters form a neutral subset, thus having no impact onthe orientation of the layout.andP;  Variable shapes of Arabic characters aredynamically generated through a context analysis by substituting providedcodes with their proper alternatives.andP;  In addition, the screen layout isautomatically readjusted to render the correct typesetting.andP;  For instance, topreserve the logical orientation of the line and mark the position of thenext character on the display, the cursor is set: to the left of an Arabicliteral or to the right of a numeral or a Latin string.andP;  In the latter case,the advent of an Arabic character causes the cursor to skip over the entirestring and be placed to the left end of the current line (Figure le).andO;Conversely, a destructive backspace function is expected to restore theprevious visual effect.andM;The above paradigm along with the adopted character set established aworkable typesetting model in which the use of extra directional codes isavoided.andP;  Users are provided with a transparent working environment wherethey feed their input to the system in the natural order and where storeddata is processed and transmitted in the chronological sequence [19].andO;Nevertheless, IAS also requires the definition of an additional typesettingschema in order to run off-the-shelf products without modification and usethem with Arabic data.andP;  This complementary model, which has to handlecomposite scripts and a mixture of host contexts, is left to the control ofthe unorthodox ADTF mechanism presented in the following sections.andM;Advanced Display Management MechanismsandM;The interactive nature of the IAS environment evoked the idea that theextension of IAW's capabilities by a number of elaborated display managementmechanisms would be a judicious investment to promote future developments.andO;Observations revealed that designers often face two categories of problems inthe definition of their screen layouts:andM;* the restrictions imposed by the physical limits of the output media, andandM;* the need for dynamic formatting of displayed frames.andM;Similar problems also exist at the operating system level and are emphasizedby the need to create multiple instances of this non-sharable resource.andP;  Inorder to meet the requirements of both the operating system and applicationlayers, capabilities of the IAW have been extended to support two newobjects: the virtual screens and the windows.andP;  The semantics of thesecomplementary objects and visual effects resulting from their simultaneoususe are sketched in Figure 3.andM;The virtual screen mechanism allows the creation and concurrent use of anumber of logical screens whose dimensions may exceed physical limits of thedisplay unit.andP;  A given application is allowed to create, a priori, anunlimited number of virtual screens (in reality limited by the availablememory) and write simultaneously on all of them.andP;  Nevertheless, only one ofthe virtual screens can be displayed at a time.andP;  Based on the position of thecursor and its subsequent movements, the selected virtual screen is mapped onthe physical unit.andP;  If the cursor reaches the limits of the output media, theview is automatically reframed by a number of columns or lines in theindicated direction.andM;Dynamic formatting of the display unit is carried out by better-knownobjects: the windows.andP;  As opposed to virtual screens, windows are assigned tofixed coordinates on the physical unit and keep their position until they arecancelled.andP;  Their size might be equal to or less than the display unit.andP;  Likevirtual screens, any number of them can be created and used simultaneously,subject to the same memory restrictions.andP;  Unlike virtual screens, all thewindows are concurrently displayed, covering each other fully or partially.andO;The visibility of the windows is controlled by a simple mechanism, whichqueues the reference of created objects in a system list and builds thescreen image by overlapping listed items in sequence.andP;  The resulting viewbecomes, by default, a pile of windows stacked in chronological order.andP;  Thereference list is, however, a global IAW object.andP;  It can be accessed by therest of the system and reorganized at will.andP;  The operating system andapplications have the liberty to define their own window hierarchy such astrees and circular queues by reordering the reference list and obtainautomatically corresponding visual effects.andM;IAW's support for the virtual screens and windows is kept limited to basiccontrol functions and text-editing primitives common to both categories [21].andO;At the initialization of the system, IAW redefines the display unit as thedefault virtual screen, with a permanent life span.andP;  Other display objectsare created, activated, and destroyed on request as needed by the operatingsystem and running applications.andP;  Processes access and share display objectsthrough unique identifiers and can ask for the redirection of output requeststoward other objects.andP;  IAW does not impose a priori policies on theutilization of display objects.andP;  Decisions such as: how much of the screen isdevoted to a window; how and when an object is resized; whether windowsoverlap or are laid out as tiles; and where keystrokes are directed, arerelegated to higher levels such as &quot;Screen or Presentation Managers&quot; orspecialized applications.andM;Asynchronous Display Transmutation FacilityandM;IAW's typesetting mechanisms described so far, guarantee the arabization andproper functioning of most of the existing applications.andP;  Nevertheless, anumber of packages would still produce incorrect or scrambled layouts whenused with Arabic data.andP;  They correspond to a category, which can be qualifiedas irregular, accessing the display memory directly and bypassing allstandard system interfaces.andP;  Consequently, as neither the operating systemnor the BIOS control the flow of the operations, arabization proceduresintegrated to them are also ineffective as shown in Figure 4.andP;  The ADTF isused for the arabization of such packages and the control of specialtypesetting needs that are not supported by IAW's native mechanisms.andP;  Onesuch special case is the mixture of Arabic and English scripts, both used ashost contexts in the same screen layout.andP;  The situation occurs whenoff-the-shelf, Latin-based applications such as word processors or databasemanagement systems, which usually format the screen in data and commandfields, are used with Arabic data.andP;  A reasonable user expectation is to seecommand fields kept in their original form and data typeset in Arabic.andO;ADTF's basic function is to transform displayed images according to thosespecific layouts, without being noticed either by the application or theuser.andM;ADTF is implemented as part of EGA services and operates asynchronously fromthe rest of the processes in the system.andP;  It is periodically activated by theinterrupts of the EGA that, as Figure 4 shows, are generated at the end ofeach vertical retrace cycle.andP;  Once operational, ADTF periodically scans thedisplay memory, rearranges, and typesets its contents according to aprescribed layout.andP;  The implementation of the ADTF, as a phantom process atIAW level, provides a transparent and application-independent mechanism.andO;Another integration policy, such as its inclusion at the application level orin the operating system, would have failed to guarantee the same degree ofreliability and transparency.andP;  For example, the scheduling of the ADTFactivities would have depended on the system clock (a heavily used systemresource) and caused a potential threat to critical time-dependentoperations.andP;  Moreover, asynchronous accesses by the ADTF and EGA to thedisplay memory also would have produced flickering and snowing effects on anumber of video units [9].andM;ARABIZED OPERATING SYSTEMandM;The unusual term &quot;Arabized Operating System,&quot; which we use, refers to asystem that:andM;* interacts with the users through Arabic interfaces,andM;* identifies system objects, i.e., logical and physical units, directories,and files, with Arabic names, andandM;* implements bilingual script processing capabilities on various input/outputdevices.andM;IBM-PC DOS, the de facto market standard for this line of personal computers,was selected to form the core of the AOS.andP;  Its adoption depended on a seriesof considerations, similar to those involved in the selection of theworkstation.andP;  The segmented architecture of DOS shown in Figure 2a helped toisolate problem areas and ease the development process.andP;  The loading sequenceof DOS modules in the memory corresponds somewhat to abstraction levels ofthe objects in this system.andP;  The first module that is loaded at systeminitialization (IBMBIO.COM) consists of low-level functions to interface thephysical machine and the BIOS.andP;  It is followed by the file management system(IBMDOS.COM) and the command processor  COMMAND.COM), which carries out themajority of user dialogues.andP;  A series of independent utilities, called&quot;external DOS commands,&quot; complete the operational environment of IBM-PC DOS.andM;The arabization of IBM-PC DOS relied basically on the guidelines andprocedures defined in this system for the implementation of customizedsolutions [7].andP;  It consisted of the development of a series of device driversand a new command processor as shown in Figure 2b.andP;  External DOS commandshave been treated as special application programs and arabized by means ofsimilar mechanisms.andM;Bilingual Device DriversandM;Architecture of IBM-PC DOS includes provisions for the installation ofuser-defined device drivers.andP;  AOS exploits this feature to implement twodifferent services.andP;  First, it installs new drivers that control input/outputunits according to the semantics of bilingual typesetting rules.andP;  Second, itnames logical and physical system objects such as line printers, systemconsol unit, and input/output ports in Arabic [20].andM;IAW's display management mechanisms provide substantial support in thedevelopment of bilingual device drivers, especially for output units.andP;  Thesimulation of device data buffers by means of virtual screens lets IAW'sinput/output primitives handle the complex bilingual typesetting task.andP;  Forexample, AOS printer drivers consist of two layers.andP;  A generic layer, commonto all printer types, creates a virtual screen for each printer.andP;  It has thedimensions of one line and a number of columns representing the width of theprinter.andP;  Outputs to printers are first directed to associated virtualscreens for bilingual typesetting.andP;  A second layer, formed by devicedependent modules, maps the contents of these virtual screens oncorresponding physical devices.andM;In addition to Arabic mnemonics, AOS also preserves original Englishdenominations of system objects.andP;  This dual naming schema helps to assigndifferent behavioral patterns for some devices.andP;  For example, a printerequipped with a proper bilingual character set produces outputs according tothe Arabic layout when addressed to by its Arabic name and acts in its nativemode (Latin) when the corresponding English mnemonic is used.andM;Arabic Command ProcessorandM;The user interface of IBM-PC DOS resides in its command processor.andP;  In AOS,this processor is replaced by a fully compatible and functionally equivalentmodule, the Arabic Command Processor (ACP).andP;  The ACP accepts commands enteredin Arabic or in English, but replies exclusively in Arabic.andP;  As with theoriginal module, multiple copies of the ACP can be activated simultaneouslyor invoked from application programs.andP;  ACP can also be interleaved with theoriginal command processor when necessary [20].andM;The major functional difference between the two command modules resides intheir memory utilization policy.andP;  While the ACP is a single-resident modulefollowing other DOS segments in the memory, the original command processorsplits itself into two segments.andP;  A small resident segment relocates the restof the code to the other end of the memory.andP;  This larger segment, transferredin the user area, is occasionally overwritten by the running applications.andO;The decision to implement the ACP as a single resident segment depended onobvious technical considerations.andP;  First of all, a transient segment of some20Kb does not constitute a substantial memory saving, given the large memoryconfigurations of today's microcomputers.andP;  Further, the necessity to reload afrequently used system segment is a cumbersome and time consuming process.andO;Finally, the use of a nonreentrant module is a major drawback when multiplecopies of the command processor have to be invoked simultaneously.andM;APPLICATION LAYERandM;The IAS application layer includes a number of programming tools, systemutilities and arabized versions of the most frequently used external DOScommands.andP;  The development of new applications is supported by a series ofprogram libraries containing system interface routines for Pascal, C, andMacro Assembler languages [21].andP;  An Arabic line editor helps in thepreparation of bilingual text files and elementary documents.andM;A screen layout design utility is provided to prepare user-defined templatesfor the ADTF mechanism (Figure 4).andP;  This facility is particularly useful whena given screen layout requires the mixture of both the Arabic and Latinscripts as host contexts.andP;  For example, a spreadsheet or a word processingprogram arabized with the help of ADTF would provide, by default, reversedscreen images suitable to the Arabic script, in which the upper left cornerof the image is mapped to the upper right corner of the screen and viceversa.andP;  Yet, parts of these images, such as header and trailer lines, andcommand menus are reserved to system messages and are likely to be coded inEnglish.andP;  To keep the original orientation and formatting of these areas,ADTF must be guided with specific, case-dependent templates, which aredynamically associated with the current application.andP;  In its simplest form, atemplate consists of a boolean array that defines the native orientation ofthe lines on the screen.andP;  ADTF refers to this vector to determine the hostcontext and lessen the ambiguities inherent in the bidirectional typesettingof mixed scripts (as presented in earlier sections).andP;  In practice, it hasbeen shown that most applications require only a limited number of suchtemplates.andP;  Once generated, these can be filed for future use.andP;  Theassociation of templates with the applications is done in a number of ways.andO;For frequently used packages, the layout design facility generates anencapsulation code to load the concerned template and start the selectedprogram.andP;  Users run their application by invoking encapsulation codes.andP;  Atemplate can also be explicitly loaded using appropriate system commands.andO;For casual cases, a hot-key service allows users to display and change thecurrent template interactively.andM;The Arabic Operating System is a functional replicate of DOS.andP;  As such, itdoes not present a more user friendly interface than the original system.andO;Users, despite their interaction with the system in Arabic, still have todeal with the line-oriented syntax of DOS commands and their even lessobvious parameters.andP;  In an effort to reduce the syntactical diversity ofsystem commands and assist non-sophisticated users, IAS was equipped with anoptional system interface: the Arabic Command Interface (ACI).andP;  ACI aims toease operation of the system through the use of single key stroke actions,appropriate command menus, and a display of current information on theoperational context [20].andP;  Unlike other user-defined shells it is tightlyintegrated with the underlying system.andP;  To execute a command, which requiresthe support of the operating system, ACI passes the request to a residentcommand processor instead of invoking another copy of it.andP;  The ACI representsa typical example of an application that exploits the facilities offered byIAW's display management mechanisms to fullest extent.andP;  The main menu is avirtual screen on top of which command dependent windows are popped.andP;  Beforetransferring the control to the selected program, ACI activates the defaultvirtual screen, making it possible for the application to run in the originalcontext and create others.andP;  At the completion of the execution, ACI regainsthe control and resumes its operations by restoring its initial virtualscreen.andP;  Like other applications, this facility may be discontinued at will,leaving the user in direct contact with the native operating systeminterface.andM;CONCLUDING REMARKSandM;The IAS became operational at the end of 1986, and about one hundred copieshave been distributed for assessment.andP;  Hardware requirements of the IASremain modest and limited to a display adaptor with a downloadable charactergenerator and some 70Kb of memory for resident parts of the system.andP;  Theperformance of the system and especially that of the workstation did not showmeasurable degradation despite the complexity of the bilingual typesettingalgorithms and sophisticated display management mechanisms.andM;The IAS project has shown that it is feasible to build bilingual systemsusing currently available microcomputers and software solutions.andP;  AlthoughEnglish and Arabic were considered in this investigation, the concepts areapplicable to other language pairs that do not necessarily belong to the samelinguistic family.andP;  The conversion that allowed the microcomputer system tooperate in a language other than and quite different from the one for whichit had been designed was further complicated by pragmatic considerations.andO;First, there was a desire to preserve the native assets of the originalsystem.andP;  Moreover, the necessity to port existing applications on the newsystem and use them with either language or a mixture of the two created anumber of additional challenges.andP;  IAS's layered architecture helped toovercome many of these issues.andP;  Thus, for example, the problems encounteredin the design of common linguistic interfaces to output media, which resultfrom the use of different alphabets (and, therefore, different charactersets) have been contained at the workstation level.andP;  Similarly, thedifferences in typesetting rules (including orientation of the script,ligatures, and diacritical marks) have also been solved at this level.andP;  Theoperating system was mainly involved in the translation process, andcomponents at the application layer provided the necessary logistic supportfor the new environment.andM;In retrospect, the fundamental problems faced during the IAS project resultedmainly from:andM;* the inadequacy of existing bilingual character code sets (including the oneadopted by the IAS) to accurately represent the Arabic language,andM;* the lack of appropriate bilingual keyboard layout standards, andandM;* the quasi-absence of proper Arabic computer terminology and the nonstandardnature of current technical vocabulary [16], issues that have beenconscientiously kept beyond the scope of the investigation.andM;REFERENCESandM;1.andP;  Appropriate Technology Ltd. APTEC Arabic Utilities Programming Manual v2.andO;London, 1984.andM;2.andP;  Arab Standards and Metrology Organization.andP;  Data processing 7-bit codedArabic character set for information interchange.andP;  ASMO 449 Tech.andP;  Rep.,andO;Amman jordan, 1982.andM;3.andP;  Arab Standards and Metrology Organization.andP;  8-bit coded Arabic/ Latincharacter set for information interchange.andP;  ASMO DS 708 Tech.andP;  Rep., 1985.andM;4.andP;  Archer, N. P., et al.andP;  A Chinese-English microcomputer system.andP;  Commun.andO;ACM 31, 8 (Aug.andP;  1988), 977-982.andM;5.andP;  Becker, J. D. Arabic word processing.andP;  Commun.andP;  ACM 30, 7 (July 1987),600-610.andM;6.andP;  Dempsey, M. W. Atlas of the Arab World.andP;  Facts on File Pub., New York,1983.andM;7.andP;  International Business Machines, Inc. DOS Technical Reference v3.1.andP;  No.andO;6138536.1985.andM;8.andP;  International Business Machines, Inc. Personal Computer NationalSupplement Arabic.andP;  No.andP;  8223445.andP;  1985andM;9.andP;  International Business Machines, Inc. EGA Technical Reference: Optionsand adaptors.andP;  No.andP;  SS34-000700.andP;  1986.andM;10.andP;  International Organization for Standardization.andP;  Informationprocessing-Arabic 7-bit coded character set for information interchange.andO;ISO/TC 97, ISO 9036 Tech.andP;  Rep, 1987.andM;11.andP;  International Organization for Standardization.andP;  Informationprocessing-8-bit single-byte coded graphic character sets-Part 6: Latin/Arabic alphabet.andP;  ISO/TC 97, ISO 8859-6 0, Tech.andP;  Rep., 1987.andM;12.andP;  MacKay, P. Typesetting problem scripts.andP;  Byte 11, 2 (Feb.andP;  1986),201-218.andM;13.andP;  Manzer, M., and Mahmoud, N. N. A special purpose computer for Arabictext processing.andP;  In Proceedings of Tenth National Computer ConferenceGeddah, Saudi Arabia, Feb. 28-March 2).andP;  1988, pp.andP;  679-688.andM;14.andP;  Microsoft MSDOS User's Guide Arabic Supplement.andP;  Microsoft, 1988.andM;15.andP;  01 Systems ITHA User's Guide and Advanced Programmers Reference Rel.andO;3.0.andP;  Bahrain, 1988.andM;16.andP;  Saad, H., Adnan, N., and Mohammed S. Recent experience in thedevelopment of a standard Arabic information processing glossary.andP;  InProceedings of Eleventh National Computer Conference (Dharan, Saudi Arabia,Mar. 4-7).andP;  1989, pp.andP;  373-381.andM;17.andP;  Sakamura, K. BTRON: The business-oriented operating system.andP;  IEEE Micro,7 (Apr.andP;  1987), 53-65.andM;18.andP;  Saudi Soft.andP;  AL MUSSAED AL ARABI.andP;  Jeddah, Saudi Arabia, 1986.andM;19.andP;  Tayli, M., and Nafisah, M. Intelligent Arabic workstation.andP;  InProceedings of the Ninth National Computer Conference (Riyadh, Saudi Arabia,Sept. 23-27).andP;  1986, pp.andP;  10-2-1 to 10-2-8.andM;20.andP;  Tayli, M. integrated Arabic system.andP;  In Proceedings of the First KSUSymposium on Computer Arabization (Riyadh, Saudi Arabia, Apr. 6-9).andO;1987,pp.135-143.andM;21.andP;  Tayli, M. Integrated Arabic system technical information and programmingmanual.andP;  College of Computer andamp; Inf Sci., King Saud Univ., Saudi Arabia, 1988.andM;(Tables and other figures omitted)</TEXT></DOC>