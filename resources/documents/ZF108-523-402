<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-523-402  </DOCNO><DOCID>08 523 402.andM;</DOCID><JOURNAL>Communications of the ACM  June 1990 v33 n6 p658(10)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Departmentalization in software development and maintenance.andO;(alternative bases for systems staff departmentalization)(technical)</TITLE><AUTHOR>Swanson, E. Burton; Beath, Cynthia Mathis.andM;</AUTHOR><SUMMARY>Three alternative models of staff departmentalization ininformation systems (IS) are discussed.andP;  Classical W-typemanagement theory divides labor horizontally between disciplinesand vertically between workers and managers.andP;  The 'A-type' modeldivides labor by application type, and the 'L-form' definesspecialization by life cycle phase.andP;  L-forms separate developmentof new systems from maintenance work on installed systems.andO;W-forms help develop programming skills, but coordination costscan be substantial.andP;  A-type departmentalization focusesspecialization on output rather than skill, letting applicationsshare communality within areas but increasing the cost ofintegrating across applications.andP;  L-forms provide support ofday-to-day business operations but can be expensive to coordinateduring implementation.andP;  A study of current practice is presented,and a process of change from W-forms to L-forms is discussed.andO;L-forms have compelling advantages in terms of improving userservice and ensuring accountability.andP;  Potential problems include astatus differential between development and maintenance, loss ofknowledge when personnel transfer from development to maintenance,and the cost of coordination between units.andM;</SUMMARY><DESCRIPT>Topic:     Program Development TechniquesOrganization StructureTechnologyProgramming Management.andO;Feature:   illustrationtable.andO;Caption:   Trade-offs among alternative organizational forms. (table)Twelve cases in information systems organization. (table)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Exploring the strengths and weaknesses of three alternative bases for systemsstaff departmentalization suggests the benefits of an organizational form inwhich maintenance is separate from new system development.andM;Software maintenance-the correction, adaptation, and perfection ofoperational software [37]-has been a relatively neglected subject in theliterature of software engineering and management.andP;  Attention has insteadfocused primarily on improved techniques for new system development.andP;  Thevirtues of these techniques are often held to include ease of maintenance onimplementation.andP;  However, such claims are seldom validated through empiricalstudy.andP;  It has not been shown that the maintenance burden is reduced by userinvolvement, prototyping, or the use of fourth generation developmenttechniques.andP;  Systems beget systems; better systems generate more systems,subject data bases, and strategic information systems.andP;  The installedsoftware base grows larger and more diversified as end user developedsystems, third party developed systems, and purchased packages are added.andO;The maintenance burden grows too.andP;  (For background, see [10, 11, 30, 35,47].)andM;The allocation of organizational resources to new system development andinstalled system maintenance has rarely been studied as a joint problem.andO;Among the few studies which touch upon this issue are those of Lientz et al.andO;[28] and Lientz and Swanson [26, 27], who report, based on their surveys ofapplication software maintenance, that information systems (IS) organizationsgenerally devote about the same amount of effort to maintenance as to newsystem development.andP;  Lientz and Swanson [261 also report that the expenditureof staff time to maintain a system tends to increase with both its age andsize.andP;  Further, growth in size averages a substantial 10 percent per year, afinding which closely parallels that of Belady and Lehman [6] in theirclassic study of the growth of Operating System/360 over successive releases.andO;In both studies, the provision of additional features and functionality isfound to largely account for the common pattern of growth.andP;  Thus, oldersystems tend to be larger and harder to maintain; one reason for theincreased difficulty is they have been enhanced to meet the needs of theirusers.andP;  (See also related studies by [20, 21, 42].)andM;The mature IS organization is therefore responsible for a substantialaccumulation of installed application systems, which undergoes continuousgrowth and &quot;evolution&quot; [6, 7, 25], and which must be managed in conjunctionwith the acquisition and development of those new systems to which theorganization also commits itself.andP;  With growth in the size of the ISorganization often limited by management fiat despite continued growth in thesize of the application system portfolio, the proper organization of work tocarry out the joint tasks of maintenance and development is a subject ofsubstantial management interest (see [15, 46]).andM;IS productivity in system development and maintenance is recognized to be amajor concern [23]; the typical organizational backlog of programs to bewritten stretches to a period of three years or more [24, 32].andP;  The businessrisks of failure both in development and maintenance are also significant.andP;  Anotorious case of such failure is Bank of America's attempt to develop a newtrust accounting system at an estimated cost of $80 million; among manydifficulties the staff bore the brunt of working concurrently on both the newsystem and the older operational system it was designed to replace [16].andP;  Thefrequently reported failures of critical operational software also illustratethe risks involved (see [22]).andM;Two issues form the crux of the organizational problem: The first is whetherthe individual professional analyst or programmer should divide his or hertime between maintenance and new system development work.andP;  Here, the matchingof the motivating potential of the work to the &quot;growth need strength&quot; of theindividual is an important consideration in any assignment, according toCouger and Colter [13], who found that development work has higher motivatingpotential than does maintenance work.andP;  The second issue, which arises onlywhere it is decided that an individual should not divide his or her timebetween the two tasks, is whether or not maintenance staff should beorganized as a separate department.andP;  In this case, considerations ofproductivity gains through specialization, efficiency of communication, andmanagement control have been suggested to be of primary importance [38].andO;This article will focus on the departmentalization issue.andM;We begin by presenting three alternative bases for departmentalization of thesystems staff.andP;  The strengths and weaknesses of the three alternatives arediscussed.andP;  Then, data taken from a set of twelve case studies are used todescribe current departmentalization practice.andP;  In subsequent discussion, anhistorical interpretation of the pattern of practice is suggested, and it isargued that a life cycle based organizational form, in which maintenance isorganized separately from new system development, deserves closer scrutiny byIS management.andP;  Implications for current practice and further research aredrawn in conclusion.andM;ALTERNATIVE BASES FOR DEPARTMENTALIZATIONandM;Issues in the organization of work have long been studied by management andorganizational researchers, as well as by other social scientists interestedin the impacts of organizational practice on society.andP;  Classical managementtheory, dating from the early 1900s, originating in Adam Smith's 18th centurywork, provides much of the contemporary theoretical vocabulary.andP;  (For areview, see Galbraith [17].) Among its basic concepts are the horizontaldivision of labor among workers based upon specialization; and the verticaldivision of labor between workers and managers, and among levels ofmanagement, typically based on principles of command and control.andP;  Closelyrelated is the concept of departmentalization, the aggregation of work rolesto form groups, units, departments and divisions.andP;  Galbraith [17], whoseinformation-processing theory of organization design we draw upon here,suggests three fundamental bases for departmentalization: input resources(grouping by function, technical specialty, or process), outputs (grouping byproduct, market, or customer) and physical location.andM;Our own analysis of application software development and maintenance suggeststhat three particular bases for the division of labor and thedepartmentalization of systems staff are of importance:andM;Work type: systems analysis versus programmingandM;Application type: application group A versus application group BandM;Life cycle phase: development versus maintenanceandM;Here the term &quot;versus&quot; indicates simply that a formal distinction is made forthe purpose of organizing work.andP;  As we shall indicate, these bases relateclosely to organizing around inputs or outputs as described by [17].andM;Division of labor by work type implies job specialization according todistinctive work skills.andP;  Historically, the most common work type distinctionhas been between systems analysis and programming, with systems analystsspecializing in the functional specification of a system, and programmers inits computer-based implementation [12].andP;  Where departmentalization is alsobased on this specialization-systems analysts and programmers are organizedinto separate departments-the organization may similarly be said to have awork type (W-type) form (also referred to in the general managementliterature as a &quot;functional&quot; form; see [46]).andP;  The W-type form corresponds tothe concept of departmentalizing around input resources.andP;  Its distinguishingfeature is concurrent multidepartment responsibility for a system'sdevelopment or maintenance.andP;  This is necessary even though systems analysisprecedes programming within the task sequence because analysis as a whole isiterative and continuous.andM;Division of labor by application type constitutes the second basicalternative.andP;  Here, the distinction is between individuals being assignedwork on one system or group of systems versus their being assigned work onanother system.andP;  Specialization is in the knowledge associated with thedomain of application, rather than in certain work skills.andP;  Such a domainoften, though not always, maps closely to one or more user departments.andP;  (Insome instances, the domain may be integrative across departments.) Wheredepartmentalization is also based on application domain, the organization maysimilarly be said to have an application type (A-type) form which correspondsclosely to the &quot;product&quot; form discussed in the general management literature.andO;The A-type form corresponds to the concept of departmentalizing aroundoutputs.andP;  Its distinguishing feature is that a single department isresponsible for the development and maintenance of a system over the system'slife.andM;A third alternative is the division of labor by life cycle phase.andP;  Thedistinction here is typically between development work on new systems or onnew versions of installed systems, and maintenance work on installed systems[37].andP;  Specialization is in the skills and management of the development ormaintenance phases of the life cycle.andP;  Where departmentalization is alsobased on this distinction-developers and maintainers are organized intoseparate departments or work units-the organization may similarly be termed alife cycle based (L-type) organization.andP;  Less obviously than the A-type form,the L-type form also corresponds to the concept of departmentalizing aroundoutputs.andP;  In this case, the development unit focuses upon software productsas its output, while the maintenance unit concentrates on service to users ofinstalled systems.andP;  The important distinguishing feature of the L-type formis the transfer of responsibility for a system's development and maintenancebetween departments at the time the system becomes operational.andM;The L-type form, based on a distinction between development and maintenancework, is an idea that has been around for years (see [34]).andP;  It may beemployed in several variations.andP;  Among these are the centralized developmentunit with decentralized maintenance at multiple installation locations; thelocation of a fire fighting&quot; maintenance team within the computer operationsunit [38]; and the integration of maintenance into the user organization [8].andM;The choice of any particular organizational structure necessitates tradingoff the strengths and weaknesses of the three alternatives, (i.e.,andO;departmentalization by work type, application type, or life cycle phase).andP;  InTable I we summarize these basic trade-offs.andP;  Following Galbraith's [17]theory of organization design, focal strengths and weaknesses of the threeforms are presented in terms of their knowledge development and informationprocessing implications.andP;  Uncertainty in the development and maintenancetasks is understood to be the basis of information and communicationrequirements within the IS organization, both laterally and hierarchically.andO;Increased uncertainty requires that the IS organization find ways to increaseits capacity to process information, or reduce its need for information.andP;  Thepreferred IS organizational form is in general that which is best matched tothe task uncertainty faced.andP;  (See [17, 45] for details.)andM;The unique strength of the W-type form, in which programmers and systemsanalysts are organized into separate departments, is the development andspecialization of programming skills.andP;  Here, the role of the systems analystis to buffer the programmer from the user, allowing the programmer to focuson translating specifications into software.andP;  Where programming is aformidable task-as it is where machine constraints are tight and theprogramming language is close to that of the machine-the development ofprogramming knowledge and skills may be critical and the advantage of theW-type form decisive.andP;  However, the weakness of the W-type form is alsosignificant.andP;  Costs of coordination between systems analysts and programmersmay be substantial for two reasons: the software specification bears theburden of formally mediating work between the two departments, often withconsiderable difficulty; and resulting interdependency problems between thedepartments may require frequent and costly resolution within the managementhierarchy.andP;  These costs may, of course, be moderated where softwarespecification is relatively straightforward and few problems need resolution.andO;However, where software specification is particularly problematic and subjectto ambiguity or instability, the weakness of the W-type form may be itsundoing.andM;The A-type form in which departmentalization is based on application type hasits own unique strength and weakness.andP;  Its strength is the development andspecialization of application knowledge [15].andP;  In contrast to the W-type formin which specialization focuses on inputs, such as programming skills,specialization in the case of the A-type form focuses on outputs, (i.e., uponthe functionality of the applications).andP;  To the extent that applicationsshare substantial communality within areas, such specialization is likely tobe particularly important.andP;  However, there is a weakness here regarding thecost of coordinating and integrating across application areas.andP;  An overallinformation architecture may be needed to formalize applicationinterdependence and autonomy.andP;  A strategy may also be required to establishpriorities for resource claims across domains.andP;  However, such formalmechanisms will not always suffice.andP;  Where application areas are stronglyinterdependent, the resulting frequent conflicts, problems, and ambiguitieswill require resolution by the management hierarchy, at significant furthercosts.andM;In the case of the L-type form, in which development and maintenance areorganized as separate departments, the particular strength is in thespecialization and provision of services in support of day-to-day businessoperations which rely on installed information systems.andP;  These services,which focus on improving the value of installed systems to their users, havehistorically taken a back seat to new system development.andP;  In particular, thesystem development life cycle has focused almost entirely upon aspects of thetask that precede system installation and maintenance.andP;  In the ISorganization, maintenance has been a background rather than a foregroundtask.andP;  But where the installed base of systems is large and mature, theadvantages of specializing in the maintenance and enhancement of theirservices may be substantial.andP;  Like the other forms, the L-type form has aweakness.andP;  It is in the cost of coordination during implementation and intransferring responsibility for development and maintenance betweendepartments.andP;  Here again, it will be necessary for the management hierarchyto resolve problems, especially in coordinating a system replacement; as withthe A-type form, the costs may be significant.andM;No form is perfect.andP;  Fortunately, the three alternatives are by no meansmutually exclusive as bases for organizing, and thus their strengths andweaknesses can be balanced through combination.andP;  For example, an individualwork assignment may consist wholly of maintenance programming of a singleapplication system or subsystem.andP;  In the case of departmentalization, ISorganizations may combine two or even all three of the basic alternativesinto a hybrid form.andP;  In deciding whether and how to combine the basicalternatives IS organizations have an opportunity to trade off the pluses andminuses of the three forms, if they so choose.andM;How do IS organizations currently make choices among alternative forms? Whathybrid forms, if any, are employed, with what frequencies? What stresses andstrains result with what implications? The design choices of 12 contemporaryIS organizations will now be presented and analyzed to illuminate currentpractice.andM;A STUDY OF CURRENT PRACTICEandM;A set of 12 cases on application software maintenance was recently developedas part of an ongoing research project.andP;  These cases focus on the comparativemaintenance environments of IS organizations, and on alternative ISmanagement strategies for maintenance of the application system portfolio,including alternative approaches to organization design; task definition andassignment; work technique; and policies for coordination and control.andM;Development of the cases concluded in the summer of 1985.andP;  Among theparticipating organizations were four high technology manufacturers, two foodand beverage producers, one oil company, a retail grocery firm, an aerospacecompany, a research and development laboratory, a public utility, and auniversity.andP;  Six of the organizations are based in southern California; therest are dispersed throughout the U.S.andP;  Significant diversity among theparticipants, in terms of organizational size and type, was sought.andP;  Thesample is not representative of a specific population.andP;  Rather, its purposesare intentionally exploratory and the appropriate logic of comparativeanalysis is that of theoretical replication, where each case is roughlyanalogous to a separate experiment [44], in which a single research questionis studied from several different experimental vantage points.andP;  Thus,diversity among participants may be compared to variety among experimentalarrangements, with the expectation that the findings should also be richacross cases.andM;Questionnaires, on-site interviews, and reviews of organizational documentswere used in data gathering.andP;  Both quantitative and qualitative data wereobtained, following a common protocol [401.andP;  Together, the cases appear inSwanson and Beath [41].andP;  Selected data are presented in Table II.andM;Across the 12 cases, classification of the organizational forms employed isbased on the three basic forms discussed earlier: the work type (W-type); theapplication type (A-type); and the life cycle based (L-type) forms.andP;  Bothpure and hybrid forms are identified, with the latter described in terms ofprincipal and subordinate bases of departmentalization as explained in TableII.andP;  Remarks on each of the cases included in Table III explain each instanceof the forms and provide additional perspective.andP;  Considerable diversity isseen to exist, and it is further apparent that various temporal andcontextual factors (e.g., company reorganization or strategic realignment)also shape the organizational design choices.andP;  (Zmud, [46], makes a similarargument.)andM;Overall, the A-type form is represented in all 12 cases, and is the primarybasis of departmentalization in 10 instances.andP;  The L-type form is currentlyrepresented in five cases, though most frequently as a subordinate basis ofdepartmentalization.andP;  The W-type form appears only once in a subordinaterole.andP;  While the A-form dominates current practice, the less-recognizedL-form is well represented.andM;The cases provide a good illustration of the ways in which IS organizationsseek to strike a balance among the advantages and disadvantages of the threeprincipal forms.andP;  Half the cases present hybrid forms.andP;  In several cases,transitions between forms occurred prior to or subsequent to the datagathering.andP;  Organization 1 has recently changed from L-A form to A-L form.andO;In the words of one manager, however, this &quot;was probably a mistake.&quot; (A taskforce was appointed at this site to examine the issue, and subsequent to ourstudy, the department returned to an L-A form.) Organization 5, which used anL-A form for about 14 years, recently changed to A-L, retaining manydesirable features of their L-A form in the process.andP;  Organizations 11 and 12are both in the process of establishing groups dedicated to maintenance.andO;Small groups dedicated to the maintenance of an important or problematicsystem were found at other organizations.andM;On balance, the predominant trade-off that concerns IS managers is between(a) forms in which most of the application staff members split their timebetween maintenance and development (the A and A-W forms in our cases), and(b) forms in which development and maintenance staff are separated to someextent (the L-A and A-L forms in our cases).andM;We analyzed the data of Table II to compare these two alternatives-the moretraditional A or A-W forms with the two L-forms (L-A and A-L).andP;  Specifically,we asked whether separating maintenance and development (as in the twoL-forms) was related to (i) organizational size; (ii) management span ofcontrol; (iii) application portfolio maturity, as indicated both by systemsmaintained as a proportion of the total under new development andmaintenance, and by replacement systems as a proportion of the total undernew development; and (iv) the percentages of staff effort allocated todevelopment and maintenance.andP;  No statistically significant differences werefound, except for the percentages of staff effort allocated to developmentand maintenance.(2)  Here it was found that relatively more staff time wasallocated to development work, on average, where development and maintenancewere organized separately.andP;  Figure 1 summarizes.andM;Interpretation of Figure 1 is by no means straightforward.andP;  Our owninterpretation provides for an almost paradoxical finding.andP;  While caution isin order, given the sample, we believe that separating maintenance fromdevelopment is associated with a focusing of managerial attention onmaintenance, with the result that the maintenance staff is more efficient andmore productive at maintaining systems.andP;  Therefore, more resources areavailable for development work.andP;  Of course, other interpretations areconceivable.andP;  The firms in our sample with separate maintenance departmentsmay simply be understaffing maintenance, or they may have relatively smallermaintenance burdens for reasons we have not considered.andP;  In any case, a moresystematic study of this issue is clearly needed.andM;How do we account for the pattern of organizational practice found here? Whydoes the A-form dominate while the W-form is barely represented? Whatfeatures of the L-form account for its apparent efficiencies, and what areits overall benefits and costs when examined in more depth? What are thelikely implications for the future? We will now turn to these questions.andM;DISCUSSIONandM;We suggest a process of historical change underlies current ISdepartmentalization practice.andP;  During the early years in which ISorganizations emerged, almost three decades ago, division of labor wasfrequently based on work type, by distinguishing between the programming andsystems analysis tasks [43].andP;  Because systems were typically constructed inlower-level languages (frequently, assembler languages) and utilized anexpensive and scarce computing resource, the programmer's task was to workclose to the machine, while systems analysts inherited the problem ofmediating between the programmers and users who knew little if anything ofcomputing technology.andP;  Overall task uncertainty derived in large part fromthe computing resource and its efficient deployment, and the development ofcomputing expertise was critical.andM;Over the years, however, as user organizations have become morecomputer-sophisticated, and as computer technology itself has become moreuser-friendly, the systems analysis task (and with fourth-generation tools,even the programming task) has increasingly been shared between IS and userorganizations.andP;  Moreover, because programming work no longer takes place soclose to the machine, and because the mediating role of systems analysisspans less of a knowledge gap, the distinctive features of both jobs havebecome blurred even within IS; apparently this basis for the division oflabor has eroded.andP;  Increasingly, more individuals possess the skillsnecessary for both roles, and the integrated programmer/analyst job is now arealistic alternative.andP;  For example, at Organization 9 a recentreorganization has merged programmers with analysts, who formerly worked inuser departments.andP;  The new department hopes for &quot;synergism in theprogrammer/analyst activity.&quot;andM;Also, since the early years, the IS organization has gradually shifted itstask focus to its application outputs.andP;  Beyond the automating of routineaccounting procedures, the application domain has been extended to almost allcorners of the enterprise.andP;  Certain applications have further come to berecognized as strategic [33].andP;  Therefore, task uncertainty for the systemsstaff has increasingly derived less from computing resources than fromcomplexities and risks associated with applications.andP;  Development of theseapplications has accordingly required the nurturing of application expertiseamong systems staff, and as a substantial and diversified base ofapplications has been accumulated, increased specialization by applicationtype has been pursued.andP;  Thus, the application domain has come to constitutethe predominant basis for departmentalization in today's IS organization.andM;Nevertheless, as depicted earlier, a significant number of organizations domake use of the life cycle based alternative in which a distinction betweensystem development and maintenance forms at least some basis fordepartmentalization.andP;  Use of this alternative may also be on the rise.andP;  Arecent study in the UK (cf.andP;  [36]) found the percentage of IS departmentsthat organize maintenance into separate groups was significantly higher (40percent vs.andP;  16 percent) than the level found by Lientz and Swanson [26].andO;Why should use of the life cycle based alternative persist? In our view,L-forms (here, the L-A and A-L forms; more generally, any form that separatesdevelopers from maintainers) offer certain important advantages for thecontemporary IS organization.andP;  Diversity among applications is not the onlysource of task uncertainty for the systems staff; a more important source ofuncertainty may lie in the immediate organizational impacts of installedapplications.andM;This suggests that the overall strengths and weaknesses of L-forms should beexamined more closely.andP;  Based on the present study, in addition to drawingfrom other related work, we present our own assessment.andP;  As summarized inTable IV, five overall strengths and five weaknesses are suggested.andP;  Wediscuss each briefly.andP;  As a matter of practical interest, we includementioning ways in which adopters of L-forms may attempt to compensate forits weaknesses.andP;  In doing so, we do not mean to suggest that L-forms are ingeneral superior, but rather they need to be more deeply examined and morebroadly understood.andM;StrengthsandM;A first strength of the L-forms is clear accountability for both maintenanceexpenses and the investment costs of new system development, which has longbeen a problem for IS management.andP;  When personnel are assigned bothmaintenance and new system development work, they have some discretion in thecharging of their time between the two classes of activity.andP;  Our caseobservations suggested that under- or overcharging to maintenance iscommonplace and follows the management pressures of the moment.andP;  Campaigns to&quot;reduce the time spent on maintenance&quot; or &quot;meet those development targets&quot;may thus be deceptive in their appearance of success.andP;  L-formdepartmentalization puts an end to this situation, and gives bettervisibility to both maintenance expenses and the costs of new systemdevelopment.andM;Buffering of new system development staff from the intermittent demands ofmaintenance is a further advantage of L-forms, our studies suggest.andO;Maintenance problems are by their nature largely unpredictable, and they playhavoc with the more orderly process of new system development.andP;  A manager atOrganization 10 complained that a major problem for developers was beingdrawn into &quot;answering user questions&quot; about installed systems, which henoted, was &quot;the biggest chunk of maintenance.&quot; At Organizations 1, 2 and 5 wewere told that maintenance had been separated from development in part tobuffer the development staffs from the demands of maintenance, allowing thedevelopers to concentrate on their projects.andP;  Many failures to deliver newsystems on schedule have been attributed to the siphoning off of staff timeto meet the exigencies of maintenance.andP;  With an L-form this drain is muchmore apparent and can be more easily resisted.andM;Facilitation of software quality assurance is also supported by the L-forms.andO;The maintenance unit is clearly motivated to require a meaningful acceptancetest prior to assuming responsibility for a newly-developed system.andP;  AtOrganization 12, an elite group &quot;possessing the best talent within IS,&quot; isbeing formed to provide the first line of support for installed systems.andP;  Ofnecessity, this group is expected to design and administer acceptancecriteria for new systems.andP;  These criteria may be more or less formal, ourcase studies indicate, depending upon the working relationships between themaintenance and new system development work units.andP;  Acceptance tests provideleverage for assuring that quality standards are not unduly compromised bythe pressures of new system development schedules and budgets.andM;A focus on an improved level of user service, particularly regardingresponsiveness to user requests for maintenance, is also encouraged by L-formdepartmentalization.andP;  In contrast to new system development, which orientsitself more toward delivering a software product, maintenance is by itsnature a service activity, undertaken largely in response to a continuingstream of user requests.andP;  Thus, maintenance managers at Organization 5pointed with pride to the &quot;big in-basket and big out-basket&quot; aspect ofmaintenance.andP;  Centralization of maintenance also allows users and IS to moreclosely evaluate responsiveness in meeting these IS requests.andM;Where user service is particularly important, pockets of staff dedicated tomaintenance are often found in an overwise A-form organization.andP;  AtOrganization 8, for example, the IS department's principal mission is toprovide high reliability operations of a few critical applications in ahighly dynamic business environment.andP;  Maintenance of critical systems isreserved for a small group of highly skilled senior people who have developedelaborate and reliable techniques for making changes and retesting thesesystems while providing continuous service to their users.andM;Finally, productivity gains in maintenance may also apparently be achievedthrough specialization and L-form departmentalization, as originallysuggested by Mooney [31].andP;  Why might this be the case? Recall thatfamiliarity with systems is fundamental to maintenance [1, 26].andP;  Where staffsplit their time between maintenance and new system development, more staffmust generally be assigned to maintain a given portfolio of systems with theconsequence that their collective familiarity is more fragmented.andP;  We suspectfragmented familiarity is difficult to deploy and sustain.andP;  Loss ofefficiency follows.andM;Separate maintenance groups may also be more efficient because their analystsand programmers develop expertise in maintenance and because their managerslearn how to manage maintenance.andP;  At Organization 9, for example, after themanager began distributing a simple report of processing times andmaintenance assignments for a group of systems, processing times for thesystems were cut by half.andP;  Centralization of maintenance also makes it easierto justify investment in modern maintenance tools, such as restructuring orcode analyzer packages.andM;WeaknessesandM;These strengths of L-forms are clearly compelling.andP;  However, against thesestrengths there are a number of weaknesses.andM;A potential status differential between the new system development andmaintenance units is a first concern.andP;  Among the most discussed subjects inthe literature is the low status and motivating potential of maintenance work([13, 29, 34]).andP;  To the extent that maintenance is seen as undesirable work,an L-form is disadvantaged, in that it creates two classes of citizens insystem development and maintenance.andP;  When an L-A form was adopted 14 yearsago at Organization 5, it was feared that everyone might quit.andP;  They did not.andO;But at Organization 2, which uses an A-L form, the maintenance manager'sprincipal worry is morale.andM;Some argue that maintenance is inherently less motivating than new systemdevelopment, because, for example, the hours are unpredictable and itinvolves routine work with older technology.andP;  Others disagree, arguing thatmaintenance offers at least as great a work challenge, involving, forexample, expert troubleshooting under substantial operational pressurerequiring a sensitive, experienced touch.andP;  Among our cases, for instance, atOrganizations 5, 11 and 12, management's experience is that some peopleprefer maintenance work to development work.andP;  Our own view, based on the casestudies, is that managerial attitudes and traditional IS career paths mayexplain much of the present motivational differential where it exists.andP;  AtOrganization 10 (A-type), for example, the IS manager told us he believesthat maintenance work is not as challenging as development; his lower levelmanagers told us that development assignments had more impact on upwardcareer movement.andP;  Similarly, at Organization 2 where the maintenance managerworries about morale, IS management's attention is on development, and acommon career path is from operations, through maintenance, and &quot;up&quot; todevelopment.andM;Too many careers begin or end in maintenance.andP;  Newcomers are often initiatedin maintenance before advancing to new system development.andP;  Similarly,old-timers skilled in earlier technologies too frequently find themselvesretired to the maintenance pastures.andP;  At Organization 11 (A-W form), managerstry to avoid the &quot;second-class citizen syndrome&quot; by rotating maintenanceassignments, but they are reluctant to do this if it means sacrificingin-depth knowledge of a system.andP;  So, some maintenance assignments drift onindefinitely.andM;Career paths in which responsibility for a major installed system isrecognized as a significant and necessary mid-career achievement might domuch to alleviate the current motivational issue.andP;  At Organization 7, anA-type organization where management nevertheless devotes attention andresources to maintenance, a period of responsibility for a &quot;production&quot;(installed) system is a prerequisite for advancement to management.andP;  (See [2,4, 5, 18].)andM;Investment in new maintenance technology should also contribute tomotivation, in that staff skills may be upgraded, In fact, managerialattention to maintenance in almost any form seems to alleviate some of themorale problem.andM;Loss of knowledge about systems in transferring them from new systemdevelopment to maintenance is a second potential disadvantage of L-forms.andP;  Asdiscussed earlier, knowledge about a system is fundamental to its efficientmaintenance.andP;  To mitigate against this loss, the use of maintenance escortsis recommended [261.andP;  At Organizations 2 and 5, maintainers sometimesparticipate in development projects and then rejoin the maintenance staff tomaintain the system.andP;  An even simpler approach, also used at Organization 5,is for developers to take a few days to teach the maintainers the generaldata flow of the new system.andM;The costs of coordinating between the new system development and maintenanceunits, especially for replacement systems, is a related disadvantage ofL-forms.andP;  Here the problem is not so much the permanent loss of knowledgeabout the system in transferring responsibility from development tomaintenance as it is the temporary sharing of knowledge needed to effect asmooth changeover.andP;  Where the new system replaces one or more existingsystems, as it increasingly does (see Table II), this process is particularlydelicate and trouble-prone.andP;  Required coordination costs may, however, bemoderated by employing implementation teams as lateral integrating mechanisms[17, 38].andM;Increased costs of system acceptance by the maintenance unit must also beweighed against the quality benefits associated with acceptance tests.andP;  Whensystems are turned over to L-form maintenance units, some acceptance criteriaestablished by that unit typically must be met.andP;  Documentation must becomplete, all functions must be implemented, loose ends must be tied up.andO;Sometimes meeting these acceptance criteria will require short-terminvestments which have unpredictable long-term value-documentation may neveragain need to be referenced or functions agreed to in specifications mayultimately not be needed.andP;  In A-type organizations these costs may be avoidedor simply postponed until much later.andM;In L-form units, our studies suggest, acceptance costs may be moderated overtime by the growth of mutual trust between departments, founded on theirlong-term relationship.andP;  In Organization 5, trust between units evolved overthe 14 year period in which maintenance was centralized, and acceptancestandards and methods were worked out in cooperation with the systemdevelopment unit, eventually easing the acceptance process.andP;  Over time, thedevelopment group improved its compliance with standards and the maintenancegroup gained a better understanding of which standards were really importantto them.andM;Finally, possible duplication of communication channels to user organizationsis a concern with L-forms.andP;  Users must work with both new system developmentand maintenance units.andP;  Nevertheless, the costs of such duplication may beoffset by other considerations.andP;  For example, the use of separate channels toresolve maintenance and new system development issues may be more effectivein practice in that the integrity of each process is less easily compromised.andO;However, we have no direct evidence that this is so from our cases.andM;CONCLUSIONandM;In our view, the most significant insight in the above analysis lies in thetrade-offs among the classical system parameters of quality, schedule, andbudget.andP;  The most compelling advantage of the L-forms may be their potentialfor quality assurance and improved user service, which may have beenneglected in application systems work due to the pressures of schedules andbudgets associated with new system development.andP;  Adoption of anorganizational form in which maintainers are separated from developers bringsabout a shift of emphasis to improved quality assurance and user service, webelieve.andP;  This shift is also responsive to rising user expectations forinformation services, which have been fueled by user experiences withmicrocomputer products and services available in the marketplace.andM;Because of its quality and productivity improvement potential, we believe anL-form structure, in some variation, deserves consideration by many ISorganizations, especially those with mature, well-developed applicationsystem portfolios, where services to day-to-day business operations are ofcentral importance.andP;  At the same time, we would caution the unwary manageragainst seizing upon an L-form as a general solution to problems of ISproductivity and service.andP;  Good organization design makes a difference in IS,as it does elsewhere, but organization design is more than organizationstructure [17].andP;  The benefits of a separate maintenance unit are alsodependent on good management at the head of the maintenance unit, recognitionand rewards for its members, and viable systems acceptance criteria, ourresearch suggests.andM;Most of the IS managers in our cases are attempting to derive some of thebenefits of an L-form arrangement while maintaining the benefits they haveachieved with A-form designs.andP;  Both forms are ways of departmentalizingaround outputs.andP;  In the L-forms, the output focus is user service; withA-forms, it is software products.andP;  Since both of these are important outputsof the IS department, some combination of approaches seems appropriate.andP;  Aspossible combinations we note the various L-A and A-L forms, and also thedesign adopted at Organization 7, where an A-type form is combined withexplicit managerial commitment to the installed system base.andM;Much remains to be learned about organization design for IS.andP;  Additionalresearch is needed to investigate the relative productivity and qualitybenefits of A-forms and L-forms.andP;  Of particular interest may be the user'sresponse to differences in form.andP;  The task for IS researchers, in our view,is to accompany practitioners in their various organizational redesigns: theywill observe their reforms as experiments, as originally suggested byCampbell [9], to better reveal the complex workings of the organizationalprocess in the variety of settings in which it unfolds so that futurepractice may continue to be better informed.andM;Acknowledgments.andP;  We are grateful to Chris Kemerer and to three anonymousreviewers and the department editor for their helpful comments on earlierversions of this article.andM;(2) Unpaired T-tests were used to compare six A and A-W form cases to threeL-A and A-L form cases.andP;  Three cases were excluded from theanalysis-Organizations 3, 9, and 12-because in each case no development wasbeing performed at the time due to various organizational exigencies.andO;T-values and significance levels were: Development work (D-role plus half ofS-role), T = -4.68.andP;  p + .001; Maintenance work (M-role plus half of S-role),T = 5.62, p = 001.andM;REFERENCESandM;1.andP;  Bankar, R.D., Datar, S.M., and Kemerer, C.F.andP;  Factors affecting softwaremaintenance productivity: An exploratory study.andP;  In Proceedings of the EighthInternational Conference on Information Systems (Pittsburgh, Dec. 6-9, 1987),pp.andP;  160-175.andM;2.andP;  Baroudi, J.J.andP;  The impact of role variables on IS personnel workattitudes and intentions.andP;  MIS Q. 9, 4 (1985), 341-356.andM;3.andP;  Baroudi,  .J., and Ginzberg, M.J.andP;  Impact of the technologicalenvironment on programmer/analyst job outcomes.andP;  Commun.andP;  ACM 29, 6 (1986),546-555.andM;4.andP;  Bartol, K.M.andP;  Turnover among DP personnel: A causal analysis.andP;  Commun.andO;ACM 26, 10  1983), 807-81 1.andM;5.andP;  Bartol, K.M., and Martin, D.C.andP;  Managing information systems personnel: Areview of the literature and managerial implications.andP;  MIS Q., Special Issue(1982), 49-70.andM;6.andP;  Belady, L.A., and Lehman, M.M.andP;  A model of large program development.andO;IBM Syst.andP;  J. 15, 3 (1976), 225-252.andM;7.andP;  Bendifallah, S., and Scacchi, W. Understanding software maintenance work.andO;IEEE Trans.andP;  Softw.andP;  Eng.andP;  SE-13, 3  1987), 311-323.andM;8.andP;  Boehm, B. The economics of software maintenance.andP;  Software MaintenanceWorkshop, Naval Postgraduate School, Monterey, Calif.,andM;Dec.andP;  6-8, 1983, in R.S.andP;  Arnold (Ed.), Software Maintenance Workshop Record,IEEE Computer Science Press, N.Y., 9-37.andM;9.andP;  Campbell, D.T.andP;  Reforms as experiments.andP;  Am.andP;  Psych.andP;  24.andP;  4 (1969),409-429.andM;10.andP;  Canning, R.G., Ed.andP;  That maintenance 'Iceberg'.andP;  EDP Analyzer, (Oct.andO;1972), 1-14.andM;11.andP;  Canning, R.G., Ed.andP;  Easing the software maintenance burden, EDP Analyzer(Aug.andP;  1981), 1-14.andM;12.andP;  Cheney, P.H., and Lyons, N.R.andP;  Information systems skill requirements: Asurvey.andP;  MIS Q. 4, 1 (1980), 35-43.andM;13.andP;  Couger, J.D., and Colter, M.A.andP;  Maintenance Programming: ImprovedProductivity Through Motivation.andP;  Prentice-Hall, Englewood Cliffs.andP;  N.J.,andO;1985.andM;14.andP;  Couger, J.D., and Zawacki, R.A.andP;  Motivating and Managing ComputerPersonnel.andP;  Wiley Press, New York, 1980.andM;15.andP;  Dickson, G.W., and Wetherbe, J.C.andP;  The Management of InformationSystems.andP;  McGraw-Hill.andP;  New York, 1985.andM;16.andP;  Frantz, D. BofA's plans for computer don't add up.andP;  L.A.andP;  Times (Feb.andO;7, 1988), 1 ff.andM;17.andP;  Galbraith, J. Designing Complex Organizations.andP;  Addison-Weslev.andO;Reading, Mass., 1973,andM;18.andP;  Ginzberg, M.J., and Baroudi, J.J.andP;  MIS careers-A theoreticalperspective.andP;  Commun.andP;  ACM 31, 5 (1988), 586-594.andM;19.andP;  Goldstein, D.K., and Rockart, J.F.andP;  An examination of work-relatedcorrelates of job satisfaction in programmer/analysts, MIS Q. 8, 2 (1984),103-115.andM;20.andP;  Gremillion, L.L.andP;  Determinants of program repair maintenancerequirements.andP;  Commun.andP;  ACM 27, 8 (1984), 826-832.andM;21.andP;  Guimaraes, T. Managing application program maintenance expenditures.andO;Commun.andP;  ACM 26, 10 (1983), 739-746.andM;22.andP;  Haffner, K. Is your computer secure? Bus.andP;  Week (Aug.andP;  1, 1988), 64-72.andM;23.andP;  Izzo, J.E.andP;  The Embattled Fortress: Strategies for Restoring InformationSystems Productivity.andP;  Jossey-Bass, San Fran., Calif., 1987.andM;24.andP;  Kim, C., and Weston, S. Software maintainability: perceptions of EDPprofessionals.andP;  MIS Q. 12, 2  1988), 167-185.andM;25.andP;  Lehman, M.M.andP;  Programs, life cycles, and laws of software evolution.andP;  inProceedings of the IEEE.andP;  Special Issue on Software Engineering, 68, 9 (Sept.andO;1980), 1060-1076.andM;26.andP;  Lientz, B.P., and Swanson, E.B.andP;  Software Maintenance Management.andO;Addison-Wesley, Reading, Mass., 1980.andM;27.andP;  Lientz, B.P., and Swanson, E.B.andP;  Problems in application softwaremaintenance.andP;  Commun.andP;  ACM 24, 11  1981), 763-769andM;28.andP;  Lientz, B.P., Swanson, E.B., and Tompkins, G.E.andP;  Charateristics ofapplication software maintenance.andP;  Commun.andP;  ACM 21, 6  1978), 466-471.andM;29.andP;  Liu, C.C, A look at software maintenance.andP;  Datamation 22, 11 (1976),51-55.andM;30.andP;  Martin, J., and McClure, C.L.andP;  Software Maintenance: The Problem and ItsSolutions.andP;  Prentice-Hall, Englewood Cliffs, N.J., 1983.andM;31.andP;  Mooney, J.W.andP;  Organized program maintenance.andP;  Datamation 21, 2 (1975).andO;63-64.andM;32.andP;  Port, O. The software trap: Automate-Or else.andP;  Bus.andP;  Week SpecialReport, (May 9, 1988), 142-154.andM;33.andP;  Porter.andP;  M.E., and Millar, V.E.andP;  How information gives you competitiveadvantage.andP;  Harvard Bus.andP;  Rev.andP;  63, 4 (1985), 149-160.andM;34.andP;  Riggs, R. Computer systems maintenance.andP;  Datamation 15, q  1969).andP;  227,231-2.andM;35.andP;  Schneidewind, N.F.andP;  The state of software maintenance.andP;  IEEE Trans.andO;Softw.andP;  Eng.andP;  SE-13, 3 (1987), 303-310.andM;36.andP;  Software Maintenance News.andP;  Numbers from England.andP;  7 (July 1989), 8.andM;37.andP;  Swanson, E.B.andP;  The dimensions of maintenance.andP;  In Proceedings of theSecond International Conference on Software Engineering (San Fran., Calif.,andO;Oct. 13-15, 1976).andP;  pp.andP;  492-497.andM;38.andP;  Swanson, E.B.andP;  Organizational designs for software maintenance.andP;  InProceedings of the Fifth International Conference on Information Systems(Tucson, Ariz., Nov. 28-30, 1984), pp.andP;  63-72.andM;39.andP;  Swanson, E.B., and Beath, C.M.andP;  The demographics of software maintenancemanagement.andP;  In Proceedings of the Seventh International Conference onInformation Systems (San Diego, Calif., Dec. 15-17, 1986).andP;  pp.313-326.andM;40.andP;  Swanson, E.B., and Beath.andP;  C.M.andP;  The use of case study data in softwaremanagement research.andP;  J. Syst.andP;  Softw.andP;  8 (1988), 63-71.andM;41.andP;  Swanson, E.B., and Beath, C.M.andP;  Maintaining Information Systems inOrganizations.andP;  Wiley.andP;  Chichester, England, 1989.andM;42.andP;  Vessey, I., and Weber, R. Some factors affecting program repairmaintenance.andP;  Commun.andP;  ACM 26, 2 (1983), 128-134.andM;43.andP;  Willoughby, T.C.andP;  Staffing the MIS function.andP;  Comput.andP;  Surveys, 4, 4(1972), 241-259andM;44.andP;  Yin, R.K.andP;  Case Study Research: Design and Methods.andP;  Sage, BeverlyHills, Calif., 1984.andM;45.andP;  Zmud, R.W.andP;  Management of large software development efforts.andP;  MIS Q. 4,2 (1980), 45-55.andM;46.andP;  Zmud, R.W.andP;  Design alternatives for organizing information systemsactivities, MIS Q. 8, 2 (1984), 79-93.andM;47.andP;  Zvegintzov, N. Immortal software.andP;  Datamation (June 15, 1984), 170-180andM;CR Categories and Subject Descriptors: D.2.9 [Software Engineering]:Management-productivity; K.6.3 [Management of computing and InformationSystems]: Software Management-software maintenanceandM;General Terms: DepartmentalizationandM;Additional Key Words and Phrases: Development, maintenance, management,organizational formsandM;ABOUT THE AUTHORS:andM;E.andP;  BURTON SWANSON is associate professor of Information Systems at theAnderson Graduate School of Management.andP;  His research interests include theorganizational uses of computer-based information systems, and organizationalapproaches to system development, implementation and maintenance.andP;  Author'sandM;Present Address: Anderson Graduate School of Management, University ofCalifornia, Los Angeles, CA 90024.andM;CYNTHIA MATHIS BEATH, assistant professor of Information and DecisionSciences at the University of Minnesota, is currently a visiting assistantprofessor at the Anderson Graduate School of Management, UCLA.andP;  Her researchinterests focus on the partnership between the IS function and its users.andO;Author'sandM;Present Address: Carlson School of Management, University of Minnesota,Minneapolis, MN 55455.andM;Permission to copy without fee all or part of this material is grantedprovided that the copies are not made or distributed for direct commercialadvantage, the ACM copyright notice and the title of the publication and itsdate appear, and notice is given that copying is by permission of theAssociation for Computing Machinery.andP;  To copy otherwise, or to republish,requires a fee and/or specific permission,andM;TABLE 1.andP;  Trade-Offs Among Alternative Organizational FormsandM;W-Type Departmentalization by work type (systems analysis versus programming)Focal strength: development and specialization of programming knowledge andskillsandM;Focal weakness: costs of coordination between systems analysts andprogrammersandM;A-Type  Departmentalization by application domain (application group A versusapplication group B)andM;Focal strength: development and specialization of application knowledgeandM;Focal weakness: costs of coordination and integration among applicationgroupsandM;L-Type  Departmentalization by life-cycle phase (development versusmaintenance)andM;Focal strength: development and specialization of service orientation andmaintenance skillsandM;Focal weakness: costs of coordination between development and maintenanceunitsandM;TABLE III.andP;  Remarks on Organizational Forms Org Form  RemarksandM;1  A-L  Maintenance has a significant profile in this organization.andP;  Of sixdepartments, four are responsible for application systems grouped by userfunctional areas.andP;  A fifth is responsible for development of a major newsystem.andP;  A sixth provides planning and technical support.andP;  Withindepartments, staff are assigned to either new system development ormaintenance.andP;  A few years ago, maintenance was centralized as a separatedepartment.andP;  Now, management is weighing whether to return to thisarrangement.andM;2  L-A  Maintenance is a major function in this organization.andP;  Of fourdepartments, two work primarily on new system development, with division oflabor by user area.andP;  A third maintains systems developed by the first two.andP;  Afourth develops and maintains systems for another area of use.andP;  Managementconsiders the arrangement cost-effective, but worries about the &quot;stigma ofmaintenance&quot; and its effects.andM;3  L-A  A single small department works wholly on maintenance and localplantsite support.andP;  Within the department, two supervisors are responsiblefor distinct application groups.andP;  New systems are developed and supplied bythe parent organization.andP;  A major group of Manufacturing Resource Planning(MRP) systems is soon to be implemented, and one supervisor is working fulltime on the project.andM;4  A  Of six departments in this organization, four develop and maintainsystems according to area of application.andP;  Within one of these, a team offive individuals maintains a major system.andP;  However, this reflects the scaleof the system, more than a commitment to maintenance organization.andP;  Two otherdepartments develop and maintain supporting common systems.andP;  Managementenvisions a transition to a distributed processing environment withuser-developed applications.andM;5  A-L  Management in this organization believes that maintenance anddevelopment appeal to different types of people.andP;  Maintenance was oncecentralized.andP;  Now two departments develop and maintain systems for distinctuser divisions.andP;  Within each, separate staffs are associated with maintenanceand new system development.andP;  Each has its own supervisor.andP;  A third departmentdevelops and maintains office systems'andM;6  A  This large organization is departmentalized by groups of applications.andO;Eighteen units are formed within five departments under one manager.andP;  Thereis no formal distinction between maintenance and new system developmentstaff.andP;  Enhancement of existing systems occupies a substantial proportion ofstaff time, and the age and maintainability of applications is a concern.andO;User dissatisfaction with the backlog of work is also a problem.andM;7  A  In this organization, four departments develop and maintain systemsgrouped by area of application.andP;  Responsibility for production systems, asopposed to new systems, is a formal requirement for career advancement.andO;However, there is no division of labor based on maintenance versusdevelopment, and, in fact, the distinction is blurred.andP;  Responsibility forproduction systems includes their further development.andM;8  A  In this organization, the systems staff is departmentalized by area ofapplication.andP;  Each of three groups has full responsibility for developmentand maintenance within its area of jurisdiction.andP;  Necessarily, more time isspent on maintenance than on development, but an attempt is made to spreaddevelopment opportunities equitably.andP;  Responsibility for the maintenance ofseveral systems critical to business operations is reserved for seniorpeople.andM;9  A  This new organization is responsible for the development andmaintenance of manufacturing information systems, and reports directly to themanager or manufacturing.andP;  It has just been spun off from a large,centralized IS function.andP;  New system development is frozen during the presenttransition period.andP;  Staff include programmers as well as analysts whoformerly worked in user departments.andP;  All now work as programmer/analysts.andO;Departmentalization is by area of application.andM;10  A  This organization is departmentalized by area of application into twomajor groups.andP;  Each unit within a group is responsible for both developmentand maintenance.andP;  Staff tend to split their efforts evenly between the twotasks.andP;  Nearly half the systems in the current portfolio are more than tenyears old.andP;  New system development is motivated by changes in the corebusiness technology supported.andM;11  A-W  This organization consists of five departments, four of whosesupervisors divide development and maintenance responsibility for theapplications portfolio.andP;  Systems are allocated to supervisors by client area,for the most part.andP;  Separate staffs for programming and systems analysisexist within each department.andP;  Analysts tend to work in a liaison rolebetween users and programmers.andM;12  A-L  New system development is currently frozen in this largeorganization, while the business seeks a major new government contract.andO;Three departments are responsible for systems grouped by area of application.andO;A fourth department provides system support, which will shortly includeacceptance of all systems put into production, as well as primaryresponsibility for corrective maintenance in the event of operationaldifficulties.andM;TABLE IV.andP;  The Life Cycle Based on Organizational FormandM;(Departmentalization by Maintenance and Development)andM;Over-all StrengthsandM;1 .andP;  Clear accountability for both maintenance expenses and the investmentcosts of new system development.andM;2.andP;  Buffering of new system development personnel from the intermittentdemands of maintenance.andM;3.andP;  Facilitation of software quality assurance, in that the maintenance unitis motivated to require a meaningful acceptance test prior to acceptingresponsibility for a system.andM;4.andP;  Supports a focus on improved level of service to the user, by means ofmaintenance specialization.andM;5.andP;  Increased productivity in maintenance, through concentration of systemfamiliarity.andM;Overall WeaknessesandM;1 .andP;  Potential status differential between development and maintenance units,with consequential degradation of maintenance work and demotivation of thosewho perform it.andM;2.andP;  Loss of knowledge about system in transferring it from development tomaintenance.andM;3.andP;  Costs of coordinating between the development and maintenance unitsduring implementation period, especially where new systems are replacementsystems.andM;4.andP;  Increased costs of system acceptance.andM;5.andP;  Possible duplication of communication channels to user organizations.andO;</TEXT></DOC>