<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> DOE1-21-0353 </DOCNO><TEXT>The MODEL approach reported in this paper allows human designers to havea nonprocedural implementation-independent view of a concurrent system.The designers specify the problem to be solved through representing problemconcepts by variables and composing equations which define the variables.They partition the overall problem into modules, which are candidatesfor being computed concurrently. Each module consists of a subset ofthe equations. Excluded are such dynamic implementation concepts as sequencesof program events, synchronization, exchanges of messages and relativetiming. The translation from the specification into a respective computationby an object computer architecture is performed by the language processors.The methodology supports independence in specifying and testing individualmodules. The language processors detect inconsistency and incompletenesserrors in both the individual modules and in the global system. The automaticimplementation of a specified system is performed by the MODEL systemon two levels. On the global level, the Configurator accepts as inputa graph of the network of subsystems, modules, and files and their interconnections.It verifies the validity of interfaces and implements the network bygenerating command language programs that set up communications, optimizeconcurrency of modules and oversee execution of the overall system. Onthe local level, the Compiler accepts as input an individual module specification.It performs checking of completeness and consistency of variables andequations and generates an optimized sequential program in a high levellanguage. The overall methodology is described through the dining philosopherswhich represents resource allocation, widely used in operating systemsand real-time systems. Brief description of the operation of the Configuratorand the Compiler are also given.</TEXT></DOC>