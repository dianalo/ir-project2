<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-593-915  </DOCNO><DOCID>09 593 915.andM;</DOCID><JOURNAL>Communications of the ACM  Nov 1990 v33 n11 p27(7)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>How to interpret the Lotus decision (and how not to). (the LotusDevelopment Corp-Paperback Software International softwarecopyright case) (Legally Speaking) (column)</TITLE><AUTHOR>Samuelson, Pamela.andM;</AUTHOR><SUMMARY>Interpretation of a federal court judge's ruling in LotusDevelopment Corp's software copyright lawsuit against PaperbackSoftware is difficult.andP;  Therefore, the decision has not resolvedany questions regarding copyright protection for user interfaces.andO;Paperback Software is being held liable for copyright infringementbecause it copied the menu structure of the Lotus 1-2-3 program.andO;The judge, in his ruling, makes some statements that suggest hisruling is a narrow one but other statements can be interpretedquite broadly.andP;  Therefore, it is not possible to know what the lawis regarding copyright protection for user interfaces in theaftermath of this decision.andP;  Attorneys currently can only advisedevelopers to make their interfaces as different as possible fromother interfaces on the marketplace.andP;  Paperback will appeal and itis hoped that the appeals court will clarify the interpretation.andM;</SUMMARY><DESCRIPT>Company:   Lotus Development Corp. (Cases)Paperback Software International (Cases).andO;Ticker:    LOTS.andO;Product:   Lotus 1-2-3 (Spreadsheet software) (Legal aspects).andO;Topic:     CopyrightSoftware PackagesCourt Casesm User InterfaceSoftware Design.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>How to Interpret the Lotus Decision (And How Not To) On June 28, 1990, afederal court judge in Boston made public his decision in favor of LotusDevelopment Corporation in its software copyright lawsuit against PaperbackSoftware.andP;  People in the software industry had been waiting for this decisionsince the lawsuit was first filed in January 1987, certain that it would be alandmark case and would resolve many vexing questions about copyrightprotection for user interfaces.andM;The trade press has abounded with varying interpretations of Judge Keeton'sopinion in the Lotus case: Some have said the decision is a narrow one,making illegal only the direct copying of another firm's interface [9]; Somehave seen it has a much broader ruling--one that will have a chilling effecton development of competitive software products [15]; Others have assertedthe case draws a reasonable line, and will have a positive effect overall[4]; Several have argued the ruling will be harmful because it ignores theinterests of users of software, and will make standardization of userinterfaces impossible to achieve.andP;  [3]  Still others perceive the opinion asonly setting the stage for a new confrontation over the issues in theappellate courts.andP;  [1]  Lotus has given some indication of how broadly itinterprets the Paperback decision by filing a new round of user interfacecopyright lawsuits against two of its other spreadsheet competitors.andM;This column, rather than just adding one more interpretation of the Lotusdecision to the bin of those already expressed, will give the reader aglimpse of the nature of the legal process and of judicial opinions so he orshe can see why people can interpret the Lotus opinion differently.andP;  Thefollowing three factors make it difficult to know what the Lotus decisionmeans: 1) The legal process is not yet over, and the meaning of the case wildepend in part on the outcome of this further process.andP;  2) While Judge Keetonmakes some statements that seem to suggest his ruling is a narrow one, someof his other statements could be interpreted much more broadly.andP;  3) Even fromunambiguous statements Judge Keeton makes, different people can drawreasonable but nonetheless differing inferences about what the judge would doin similar (though somewhat different) cases.andP;  For these reasons, it isimpossible to know with any certainty what the law concerning copyrightprotection for user interfaces is in the aftermath of the Lotus decision.andM;It's Not Over Till It's OverandM;Let us begin with something of which we can be certain.andP;  Paperback Softwarehas been held liable for copyright infringement because it copied the entiremenu structure of the Lotus 1-2-3 program, which Judge Keeton decided wasprotectable &quot;expression&quot; of the Lotus program.andP;  (It is a basic principle ofcopyright law that a copyright protects against unauthorized copying of anauthor's &quot;expression,&quot; but not copying of the &quot;ideas&quot; in the work.)andP;  The factthat Paperback lost at the trial court level does not, of course, mean thatit has necessarily lost the case forever, for Paperback can and will appealJudge Keeton's ruling to a federal appellate court.andP;  (Paperback cannot justappeal the court's ruling because it does not like the outcome.andP;  An appealhas to be based on a claim that the judge made some errors of law--that is,misinterpreted the law in some way.andP;  Paperback will, therefore, have toidentify the specific legal errors in thinks Judge Keeton made in hisanalysis of copyright law as applied to the facts of this case to make itsappeal.)andM;If the appellate court (which usually consists of a panel of three judges)agrees with Paperback that Judge Keeton made some errors of law, it canreverse his ruling.andP;  Or if it agrees with Lotus that Judge Keeton made nolegal error, it will affirm his ruling.andP;  The appellate court can also send acase back to the trial judge for additional proceedings if it decides thetrial judge did not make some determination he or she should have made.andP;  (Forexample, the appellate court in the Lotus case could decide that Judge Keetonshould have made detailed findings about Paperback's claim that the Lotuscommands constitute an unprotectable language or that Lotus' interface hadbecome a de factor standard, and could send the case back for specificfindings on these issues.)andM;If Paperback loses in the appellate court, it will probably try to persuadethe U.S.andP;  Supreme Court to review the appellate court's ruling, again arguingthat errors of law were made by the judges who had previously ruled on thecase.andP;  (Lotus, of course, would be the one to seek Supreme Court review ifPaperback won in the appellate court.)andP;  However, the Supreme Court takes onlyabout 150 cases of the many thousands that seek its attention each year,which means that the appellate court decision in the Lotus case will probablybe the final resolution of the copyright dispute between Lotus and Paperback(unless that court sends it back to the trial court for further proceedings).andM;The appellate process will take some time to happen.andP;  It may be another yearbefore the appellate court decides on Paperback's appeal, and perhaps anotheryear after that before the Supreme Court decides whether it will review thecase.andP;  Should the Supreme Court decide to hear an appeal in the Lotus v.andO;Paperback case, final resolution of the case will obviously take even longer.andO;The Supreme Court can also send the case back to the lower courts for furtherproceedings, which, of course, would further delay final resolution and wouldprobably set off a new round of appeals after the trial judge made the newfindings for which the case was sent back.andM;Whatever the federal appellate court eventually does with the Paperbackappeal with become &quot;the law&quot; within the First Circuit (which includesMassachusetts, Maine, New Hampshire, Rhode Island, and Puerto Rico) unlessthe Supreme Court takes the case and makes a ruling which would then be thelaw throughout the U.S.andP;  Elsewhere, the opinion of the First Circuit Court ofAppeal would most likely be taken into account (that is, given somedeference) in similar cases, but the Lotus v. Paperback decision will not bebinding in these other jurisdictions unless judges in other cases decide tofollow what the First Circuit has done--which they need not do.andM;The primary reason for the recent filing by Borland of a lawsuit inCalifornia asking the court to rule that the interface of its Quattro programdoes not infringe Lotus' copyright was to get its legal dispute with Lotusstarted in a jurisdiction where the Lotus v. Paperback opinion is not abinding precedent.andP;  Judges in other circuits can sometimes be persuaded todisagree with the ruling from a particular circuit, and can adopt aconflicting rule which will then become the law within that circuit.andP;  Thejudge for Ashton Tate's lawsuit against Fox Software, for example, couldreject Judge Keeton's ruling.andP;  (It is when different circuits have differentrules on the same issue, that the Supreme Court is most likely to take anappeal to resolve whatever conflict exists between or among circuits.andP;  Butsometimes conflicting rules exist from many years before the Supreme Courttakes a case to resolve the conflict.)andM;What The AppealsandM;Court SaysandM;We need to await the First Circuit's ruling in the Lotus v. Paperbackcase--not only to know whether the trial judge's ruling will be affirmed,reversed, or sent back for further proceedings--but also because the FirstCircuit's opinion is likely to give us a clearer view about the correctinterpretation of that case.andP;  In general, appellate court opinions, unlessthey are very short and explicitly endorse the trial judge's reasoning, aremore influential (that is, they are given more weight as precedent) thantrial court decisions.andP;  Often, after an appellate court issues a decision ina case, the earlier trial court opinion ceases to be used as a source ofunderstanding the meaning of the case.andM;Certainly, to the extent there is a difference of opinion between what theappellate court and the trial court say about the case, the appellate courtopinion is the one that lawyers understand should be followed.andP;  If, forexample, the appellate court agrees with a trial judge's ruling, but has acompletely different set of reasons for doing doing so, the appellate court'sreasons are the ones that will matter (until and unless they are modified orabandoned in subsequent cases).andP;  An appellate court can decide to state theruling in the case more narrowly or more broadly than did the trial court.andO;If it criticizes what a trial court has said on an issue, or even says it isunnecessary to reach an issue which the trial court decided, the appellatecourt opinion will change the meaning that can be ascribed to the case.andM;We should hope the appellate opinion in the Lotus v. Paperback case willclarify and not obscure its meaning.andP;  But in the meantime, all we have is thetrial judge's opinion, and it is a fair question to ask what interpretationshould be given to it.andM;Interpreting TheandM;Lotus Opinion:andM;Holdings v. DictaandM;One of the first (and most frustrating) lessons law students must learn ishow to separate the true &quot;holding&quot; of a judicial opinion from all the otherstatements a judge might make in the course of an opinion (which lawyers calldicta after its Latin expression) about issues connected to the case.andP;  Onereason the Lotus v. Paperback opinion is difficult to interpret is that JudgeKeeeton wrote a 110-page opinion to explain his decision in favor of Lotus.andO;(Its length alone is an indication that this opinion has a higher thanaverage dicta-to-holding ratio.)andP;  More importantly, interpretation isdifficult because there are some sections of the opinion in which the judgeseems to take a very broad view of what Lotus' copyright protects about the1-2-3 interface, and other sections where he ssems to be deciding the case ona much narrower basis.andP;  One cannot really know until the issues are tested insubsequent litigation whether the broader or narrower interpretation is thecorrect one, and what, therefore, the true &quot;holding&quot; of the Lotus case is.andM;Let us consider a very clear example of dicta from the Lotus decision, afterwhich we will work our way into some more subtle problems of sorting thedicta from the holding in the case.andP;  One of the main reasons the judge in theLotus case decided against Paperback was the following: the commercialsuccess of other spreadsheet programs with user interfaces different from1-2-3 demonstrated that it was not necessary, as Paperback had contended, tohave the same menu structure as Lotus 1-2-3 in order to have a commerciallyviable spreadsheet program.andP;  The judge pointed to Excel's macro conversionfacility for Lotus commands as one alternative to copying the 1-2-3 menustructure; he pointed out the possibility of using a help screen to showwhich Paperback commands were equivalent to the Lotus 1-2-3 commands asanother alternative to copying Lotus' menu structure.andM;Yet after taking some trouble to explain all of this, the judge went on tosay: &quot;even if VP-Planner otherwise would have been a commercial failure, andeven if no other technical ways of achieving macro and menu compatibilityexisted, the desire to achieve 'compatibility' or 'standardization' cannotoverride the rights of authors to a limited monopoly in the expressionembodied in their intellectual work.&quot;andM;This last statement is dicta, plain and simple.andP;  The facts of the Paperbackcase, at least as perceived by this judge, did not present for resolution theissue of how copyright law should be applied if commercial failure was sureto result unless Paperback used the same command structure as Lotus and therewere no technical alternatives but copying the menu structure to achievecompatibility.andP;  The judge got carried away with discussing the issues, andmade some statements not necessary for the resolution of the case before him.andO;While no lawyer would be pleased at the prospect of arguing a case presentingthe dicta issue to that particular judge, lawyers know that one cannot reallypredict how a case presenting a different configuration of facts would beresolved.andM;The Narrow StatementsandM;Now we will move to an examination of statements from the Lotus opinion uponwhich broad and narrow interpretations of the Lotus decision might be based.andO;First, the narrow one: At several points in the Lotus decision, the judge, inexplaining why he found copyright infringement, stressed that Paperback hadcopied the whole of Lotus' menu structure.andP;  Paperback had used the samecommand terms as Lotus, had ordered and grouped them in the same way, andpresented them on menu screens in the same way as Lotus had.andP;  It isreasonable to infer from language of this sort that the holding of the casewas that copying the whole of another firm's menu command structure iscopyright infringement.andM;If the holding in the Lotus case is only that copying the whole menustructure is infringement, that would suggest that Paperback might only haveto arrange the commands differently from Lotus to avoid infringement.andP;  Adifferent arrangement would present a different menu structure, would it not?andO;In a similar software user interface case decided a few years ago in Georgia(Digital Communications Associates v. Softklone Distributing Corp.), afederal judge ruled that it was not an infringement for a competitor to havethe same set of commands as another copyrighted program, but only to orderthe commands in the same way when there were lots of other arrangements thatcould have been made of that set of commands.andP;  The Lotus opinion does not saywhether Judge Keeton agreed or disagreed with this aspect of the Softklonedecision.andP;  (Even if Judge Keeton disagreed, however, the Softklone case isstill the law in Georgia.)andM;If the holding in the Lotus case is this narrow one, the Lotus decision maynot have much relevance for how the Apple v. Microsoft case will be resolved.andO;The license between Microsoft and Apple--which the judge in that case hasalready ruled covers a considerable amount of what Microsoft is said to havetaken from Apple--is one important difference between the two cases.andP;  Thereare also more differences between the Apple and Microsoft interfaces thanbetween the Lotus and Paperback interfaces.andM;The judge's discussion of ways to achieve compatibility with Lotus 1-2-3other than by directly copying the whole menu structure is another other bitof evidence that the holding in the Lotus case is a narrow one.andP;  The judge'suse of Excel's macro conversion facility as an example of an alternativePaperback had besides copying Lotus' menu structure, suggests (although thejudge does not directly say so) that the judge does not think it wouldinfringe Lotus' copyright to adopt such an alternative.andP;  Similarly, by givingthe example of a help screen to display Paperback's equivalents to Lotus'commands, the judge suggests that this too would not infringe (although hedoes not specifically say so).andP;  Nor does the judge indicate how he would ruleif Paperback simply allowed users to input Lotus commands but did not displaythem on the screen, or allowed users to create their own menu structure.andP;  Butto the extent that the holding in the Lotus case is a narrow one, making onlythe copying of the whole of a menu structure an infringement, this conducttoo would seem to be noninfringing.andM;Lotus, however, might take quite a different view of the interpretation thatshould be given to Judge Keeton's opinion.andP;  Lotus might argue that even ifPaperback (or someone else) arranged the commands differerntly, convertedthem in some way, or accepted the Lotus commands without displaying them onthe screen, copyright infringement should still be found because thesecompetitive interfaces would still be based on and copied from Lotus'interface.andP;  They would still take a free ride on the intellectual work doneby Lotus and the value created by Lotus.andP;  Since it is possible to design adifferent interface for a spreadsheet program, Lotus would argue itscompetitors should be required to do so.andP;  Lotus could look to some broadstatements in Judge Keeton's opinion to support its arguments on thesepoints.andM;The Broad StatementsandM;Judge Keeton's opinion, for example, refers to Lotus' interface as its &quot;mostunique and valuable&quot; aspect, seeming to say this was why the interface mustbe protected by copyright law.andP;  He also indicates that Lotus' copyrightcovers its &quot;user interface,&quot; not just the &quot;screen displays&quot; that the Lotusprogram might generate.andP;  Judge Keeton emphasizes that &quot;nonliteral&quot; elementsof the Lotus interface can be protected by copyright law.andP;  (No, the judgedoes not clearly define what he means by &quot;nonliteral,&quot; or indicate whichnonliteral features of an interface are protectable and which are not,although he does say it is acceptable for others to use the &quot;\&quot; key as Lotusdoes.)andP;  He also cites an article written by an IBM lawyer to the effect thatuser interfaces need &quot;strong&quot; copyright protection.andM;But perhaps the broades statement from the judge is this: &quot;The bulk of thecreative work is in the conceptualization of a computer program and its userinterface, rather than its encoding, and .andP;  .  .  creating a suitable userinterface is a more difficult intellectual task, requiring greatercreativity, originality, and insight than converting the user interfacedesign into instructions to the machine.&quot;andP;  This and some similar statementsin Judge Keeton's opinion would seem to suggest that anything about the Lotus1-2-3 interface that Lotus thinks is valuable enough to sue about could bethe basis for a succesful copyright infringement lawsuit against itscompetitors.andM;(Here, it may be worth noting that the copyright statute makes clear thathowever brilliant a concept may be and however many alternative conceptsmight exist, concepts are not protected by copyright; nor are systems,procedures, processes, or methods of operation.)andM;Lotus, Apple, and plaintiffs in other software copyright lawsuits will lookto statements of this sort to persuade judges in other cases that the holdingin the Lotus case was a broad one, or even if dicta, the broad statements arenonetheless proper interpretations of the law.andM;The Rejection ofandM;Paperback'sandM;Public Policy ArgumentsandM;Another reason Judge Keeton's opinion in the Lotus case may have broadimplications for other user interface copyright lawsuits is because of itsstrong rejection of several public policy arguments made by Paperback.andO;Often, if one judge has rejected a public policy argument, judges in latercases will reject a similar argument because of its rejection in the earliercase, saving themselves the trouble of reconsidering what one judge haspresumably thought through quite carefully.andP;  We will now discuss JudgeKeeton's reaction to three of Paperback's public policy arguments: 1) thatthe Lotus interface is a language which is unprotectable by copyright law, 2)that the public interest in standardization overrides Lotus' private interestin protecting its command structure, and 3) that it would be inapproprate togrant broad copyright protection for user interfaces because of the harmfuleffects such a rule would have on progress in the software field.andM;Paperback argued that the Lotus command terms, because they were the methodby which users could communicate with the program and because they could beused to construct macros, were a kind of a language.andP;  Languages themselves,Paperback argued, cannot be protected by copyright law, although particularexpressions of them may be.andP;  The creator of Esperanto, for example, couldcopyright a dictionary defining the words in the language, or a bokexplaining how to use it.andP;  But a copyright in such books, Paperback argued,would not mean that others would infringe by speaking Esperanto or writingtheir own books in or about Esperanto.andP;  Languages are, in their nature, ashared resource of a community, and unprotectably by copyright law.andO;Paperback submitted a sworn statement from a computer scientist detailing howand why the Lotus commands should be considered a language.andP;  The judge'sresponse to this argument was to castigate Paperback's defense lawyer forengaging in &quot;word games.&quot;andP;  He was not persuaded that the Lotus commandsconstituted a language, but went on to say that Paperback had cited noprecedent to show that a language could not be protected by copyright law.andO;(This may have been a legal error [2].)andM;Paperback's standardization argument had two strands.andP;  The company firstargued that its interface, like Lotus' before it, built upon a common base ofinnovations from previous spreadsheet programs.andP;  Paperback pointed torespects in which the Lotus command structure was similar to the commandstructure of Visicalc which was the first commecial electronic spreadsheetprogram, and ways in which its interface different from Lotus'.andP;  From this,Paperback argued that it had copied only standard features of spreadsheetinterfaces, and argued that its addition of new interface elementsdemonstrated that Paperback had continued the pattern of incremental advancesthat had been characteristic of evolution of the software field.andP;  ButPaperback also argued that to the extent that Lotus' interface wasdistinctive from previous spreadsheet interfaces, Lotus' interface had becomea de facto standard, much like the QWERTY keyboard has become fortypewriters, and consequently, public policy considerations fovoringstandardization should override Lotus' private interest in the protection ofthe Lotus 1-2-3 interface.andM;Judge Keeton rejected both strands of the standardization arguement.andP;  He didnot see the same degree of similarity between the Visicalc and Lotusinterfaces as Paperback did--but more significantly, was not persuaded by theincremental improvement argument.andP;  Paperback, he said, was not just sellingwhatever incremental improvement on the spreadsheet program concept it haddeveloped; it was selling copies of Lotus' expression as well.andP;  That, thecourt ruled was impermissible as long as other interfaces could be createdfor spreadsheet programs.andM;The de facto standard argument was even more forcefully rejected by thejudge.andP;  He seemed, in fact, to be outraged at the very idea underlying theargument: &quot;The more innovative the expression of an idea is, the moreimportant is copyright protection for that expression.andP;  By arguing that Lotus1-2-3 was so innovative that it occupied the field and set a de factorindustry standard, and that therefore the defendants were free to copy theplaintiff's expression, defendants have flipped copyright on its head.andO;Copyright would be perverse if it only protected mundane increments whileleaving unprotected as part of the public domain those advancements that aremore strikingly innovative.&quot;andP;  The judge made no findings as to whether theLotus interface had, in fact, become a de facto standard because he perceivedno basis in copyright law for the standardization argument.andP;  Judge Keeton didnot even discuss possible interests of the user community in standardization.andO;(Because there is some case law permitting standardization map symbol systemsand permitting user interests in standardized computer program input formatsto be considered in the assessment of what copyright protects, Judge Keetonmay have committed legal error on this issue as well.)andM;The judge allowed Paperback considerable latitude to submit opinion evidenceabout the likely effects of Lotus case on progress in the software industry.andO;Dan Bricklin, the codeveloper of Visicalc, was one of a number of of computerscience and software industry people who submitted lengthy sworn statementsexpressing the opinion that copyright protection for user interface commandstructures would have negative cousequences for progress in the softwarefield.andP;  The judge was also given a copy of an article reporting the resultsof the survey by Samuelson and Glushko [7, 8] at CHI '89 on the userinterface field's view of the look and feel lawsuits.andP;  [7, 8] That surveyshowed that while people in the field thought copyright should protect sourceand object code, they overwhelmingly opposed copyright protection for lookand feel, commands, and most other aspects of user interfaces.andP;  The surveyalso showed that people in the field opposed the kind of &quot;strong&quot; copyrightprotection for user interfaces being sought in the Lotus and Apple casesbecause of the harmful consequences they thought such decisions would havefor the field.andP;  (Lotus, of course, also submitted sworn statements fromexperts predicting positive consequences from recognizing copyrightprotection for its interface.)andM;Judge Keeton's opinion discusses the Bricklin statement and twice cites theCHI '89 survey report, but he ultimately disregard all of the opinionevidence submitted in the case as irrelevant to resolution of the case beforehim.andP;  The judge thought that even if Paperback was right in asserting thatprogress in the software industry would be impaired by protecting Lotus'interface, its arguments were nonetheless misdirected.andP;  Public policyarguments of this sort should be made, said the judge, to the Congress; theyshould not be made to a judge who has a responsibility to follow the mandatesof Congress which in this case meant applying copyright law to computerprograms.andM;ConclusionandM;I am a lawyer.andP;  I interpret cases for a living.andP;  I have read Judge Keeton'sopinion carefully and I have worked very hard to figure out what it means.andP;  Iwould tell you what it means if I could understand it, but I cannot.andP;  Andneither can anyone else.andP;  So anyone who says he or she is sure the Lotusdecision is a very narrow one and only makes copying the whole of someoneelse's interface illegal is giving his opinion and making a prediction; butonly time and further litigation will tell if that person is right or wrong.andO;(Because I believe it should be a narrow opinion, I am tempted to tell you itis one, but I cannot honestly do that.)andP;  Similarly, anyone who is sure thatthe Lotus opinion means that Ashton Tate will wins its lawsuit against Fox,or that Apple will win its lawsuit against Microsoft is also offering aprediction which may or may not turn out to be true.andM;People who tell you they cannot tell exactly what Judge Keeton's opinionmeans (except for cases involving the copying the of the whole of another'sinterface) are being honest, but who wants to pay a lawyer $200 an hour to betold &quot;your guess is a good as mone?&quot;andP;  A cautious lawyer might well say to aclient who is about to design a user interface for a program that willcompete with other already in the marketplace: &quot;The only completely safething to do is to make your interface as different as possible from otherinterfaces in the marketplace, or if you decide to make it similar, beprepared to defend your decision and to document it, for it will be an uphillbattle once evidence is presented that it can be done differently.&quot;andM;I have always thought Lotus v. Paperback was a close case.andP;  I thought it wasclose because copyright law has long protected compilations (whether ofwords, facts, statistics, pictorial images, or some combination of thesethings).andP;  It is very difficult for a copyright lawyer to look at a set ofscreen displays like those that present Lotus' commands in a particulararrangement, and not see a protectable compilation of words.andP;  What made thePaperback case so strong for Lotus was that, notwithstanding all the talk inJudge Keeton's opinion about the &quot;nonliteral&quot; similarities in the twointerfaces, Paperback's interface was literally very similar to Lotus': Itused the same commands, ordered them in the same way, and displayed them invery much the same way.andP;  (as the terms are usually used in copyright cases,two works are &quot;literally similar&quot; when they are identical or nearly so, e.g.,andO;word for word copying.andP;  &quot;Nonliteral similarities&quot; have a more abstractcharacter, as when detailed sequences of the plot of drama are copied, butall the words of the dialogue are different.andP;  As best I can make it out,Judge Keeton used the term &quot;literal similarities&quot; to mean source of objectcode copying, and regarded all other similarities as &quot;nonliteral.)andP;  I couldhave written an opinion for Judge Keeton that would have concluded Paperbackinfringed Lotus' copyright.andP;  (I think I could have written an even betteropinion in Paperback's facor, but that is because I take the language,standardization, and functionality arguments Paperback made more seriouslythan judge Keeton did.)andM;One thing readers should realize is that Judge Keeton worked very hard onthis case (evidenced, in part, by the 110 page opinion).andP;  He tried very hardto do the right thing and to apply copyright law as best he could to thecomplex problems thrown at him by the lawyers.andP;  He knew everybody would belooking at what he did (and why) in applying copyright law to userinterfaces.andP;  While his opinion is, at times, somewhat idiosyncratic in itsanalysis of copyright law, Judge Keeton's opinion was consistent withsome--though not with all--user interface cases.andM;I have for some years argued that copyright law is far from an optimal formof intellectul property protection for computer programs because of thefunctional character of programs.andP;  [6] Copyright law is a very distinct bodyof rules and principles that has a long tradition of protecting written textsand pictorial works--where the greater the diversity of expression, the moreenriched is the culture.andP;  Over the years, the copyright distinction betweenidea and expression has been worked out reasonably well for these kinds ofworks.andP;  But computer programs are different.andP;  Programmers are functional inthe same way that machines, machine processes, and human-machine interfacesare.andP;  Copyright law has never before protected functional works of thosesorts.andP;  That is why there is so little precedent in copyright law to giveguidance on how to resolve cases like Lotus v. Paperback which involve aninterface between human users and a machine.andP;  Paperback raised afunctionality defense but Judge Keeton rejected it, saying that Lotus'interface wasn't functional (which would have made it unprotectable bycopyright law) because there was more than one way to build an interface fora program that performed spreadsheet functions.andM;If people in the software industry do not think that the outcome in the Lotusv. Paperback case was the right outcome, or are worried about the broaderimplications of what Judge Keeton said in his opinion, or want a fast ratherthan litigation's tediously slow method of resolution of the issues aboutwhat copyright law should protect about program interfaces, they might wantto think about supporting legislative initiatives.andP;  For now, all we can do ishope that the First Circuit Court of Appeals will clarify what interpretationshould be given to the Lotus case.andM;ReferencesandM;[1] Ferranti, M.andP;  Judge rules in Lotus.andP;  favor in copyright suit.andP;  PC Week 7,26 (July 2, 1990), 6.andM;[2] Lowry, E.andP;  Copyright protection for computer languages: Creativeincentive or technological threat?andP;  Emory Law J., To be published.andM;[3] Margolis, N.andP;  Users biggest losers in spreadsheet wars.andP;  Computerworld24, 29 (July 16, 1990), 8.andM;[4] The Paperback opinion draws a reasonable line, PC Week 7, 27 (July 16,1990), 34.andM;[5] Parker, R.andP;  Lotus' copyright protection is turning into a feeding frenzy.andO;Infoworld, 12, 28 (July 9, 1990), 42.andM;[6] Samuelson, P. CONTU revisited: The case against copyright protection forcomputer programs in machine-readable form.andP;  Duke Law J., (1984).andM;[7] Samuelson, P. and Glushko, R.andP;  Comparing the views of lawyers and userinterface designers on the software copyright look andamp; feel lawsuits.andO;Jurimetrics J. 30 (1989), 121.andM;[8] Samuelson, P. and Glushko, R.andP;  Survey on the look andamp; feel lawsuits,Commun.andP;  ACM 33 (May 1990), 483.andM;[9] Zachman, W.andP;  Lotus-Paperback precedent need not harm the industry.andP;  PCWeek 7, 27 (July 9, 1990), 10.andM;Pamela Samuelson is a professor of law at the University of Pittsburgh Schoolof Law.andO;</TEXT></DOC>