<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-252-013 </DOCNO><DOCID>11 199 937</DOCID><JOURNAL>IBM Journal of Research and Development  Jan-March 1991 v35 n1-2p238(6)* Full Text COPYRIGHT International Business Machines Corp. 1991.andM;</JOURNAL><TITLE>Visualization in a VLSI design automation system. (Very LargeScale Integration) (technical)</TITLE><AUTHOR>DeMaris, David L.andM;</AUTHOR><SUMMARY>Problems unique to the visualization of complex, partiallyautomated design tasks such as VLSI system design are reviewed,and approaches are described.andP;  The design domain used toillustrate the approaches is chip-level &quot;floor-planning,&quot; aniterative-refinement design methodology for VLSI layout, routing,and timing control.andP;  The general view structure and controlstructure are described.andP;  Other visualization topics addressed aredisplay of evolving data, sequencing of overlay data, aninterleaved temperature-color metaphor for view consistency andclarity, and dynamically generated iconic measurement tools.andO;(Reprinted by permission of the publisher.)andM;</SUMMARY><DESCRIPT>Topic:     VisualizationVery-Large-Scale IntegrationComputer-Aided DesignAutomationDesignIntegrated Circuits.andO;Feature:   illustrationchart.andO;Caption:   Interleaved spectrum. (chart)andM;</DESCRIPT><TEXT>Introduction: From CAD to full-lifecycle designandM;automation frameworksandM;Over the last decade, designers of various products have come to relyincreasingly on computer-aided design (CAD) tool for editing andvisualization.andP;  The initial design tools supported direct editing andstraightforward visualization of spatil design and text annotation in domainssuch as mechanical design and mask layout for integrated circuits.andO;Second-generation software began to support applications involvingsimulation, such as digital schematic entry coupled with behavioralsimulation.andP;  Typically, the focus of these tools was narrow, with separateprograms and interfaces used for each successive stage of design.andM;The current generation of CAD products supports complex, partially automateddesign tasks (such as computer system design) consisting of many processingsteps performed in sequence.andP;  In such applications, several trends haveemerged to increase the need for tool integration and visualization ofresults of what were previously considered separate design activities.andO;Designer productivity has been raised by automating a range of design tasks;but the information generated must still be reviewed to balance requirements,invoke and control constructive automation tools, and make manual changes andedits where necessary to improve designs or compensate for imperfectautomation.andP;  The amount of information generated per designer is generallygreater, so that the cross-referencing previously acceptable among differentdesign and analysis tools would be unmanageable today.andP;  Competitive pressureshave also forced designers (and CAD software developers) to take many morefactors into account to maximize performance and minimize both design andmanufacturing costs.andM;Current logic circuit technologies offer such high circut density, smalldevices, and narrow interconnection linewidths that system performance isincreasingly determined by the quality of the layout and routing.andP;  Since agreater portion of computer system delay is in wire interconnections, thereis increased emphasis on early prediction and rapid convergence of feasiblelayout and routing which obey timing constraints.andP;  System designers must uselogic synthesis and automatic placement and routing techniques for designproductivity, yet the use of these automation tools makes early system timingmore difficult when they are applied to an entire chip at once to achieve thebest possible automatic result.andP;  To better predict and control system timingand design feasibility, many chip-design groups are adopting a structuredchip-design methodology, in contrast to flat logic synthesis or complete&quot;bottom-up&quot; macrocell designs with no global physical or timing influence.andP;  Afloot-plan editor and a visualization environment are critical to theproductive use of a structured strategy.andP;  Abstract design analysis tools suchas floor-planning can provide feedback from early stages in the developmentcycle, permitting design changes before much manual work has been done andeliminating the need for many attempts to do the designs with traditional CADtools [1, 2].andM;Views and subviewsandM;Designers must manage simultaneous and often conflicting requirements, sothey must look at several dimensions or domains of data at the same time.andO;Design subsystems using general optimization techniques such as simulatedannealing attempt to balance multiple constraints and objectives [3].andP;  Whenall goals cannot be met, designers resort to visualization of results to makejudgments about what to change.andP;  To assist in this analysis, we employ manyviews of the data.andP;  Subviews within floor-planning (which is, in effect, anabstract physical view) include object attributes and geometry, networktopology, and measurement subviews such as routing congestion maps, timingproblems, and net &quot;global&quot; routes.andP;  Such displays may be composed in onewindow, or in multiple windows with less visual density.andM;Figures 1-3 are screen displays composed of subviews within a single window.andO;Typical subviews presented are the basic layout of circuit region outlines(the actual &quot;floor-plan&quot; of the chip), and the connections between circuits(referred to as nets).andP;  Circuit outlines are presented by default as aporosity attribute, which indicates whether those circuits have spacedesigned in for nets to pass over them.andP;  Other attributes displayed in thelayout subview include population numbers and connectivity (a summary of theconnections between circuits, represented as a band with width correspondingto the number of individual nets).andM;The attributes and subviews are controlled or &quot;scoped&quot; by activating them forall displayed design objects, for a selected group of objects, or only forthe currently selected object.andP;  If multiple floor-plan views in separatewindows are used, each window has independent scoping and controlinformation.andP;  When an object is modified, the view update command isbroadcast to all copies of the application.andP;  All copies use the same modeldata in memory, maintaining consistency.andP;  The actual display of objects iscontrolled by hierarchy-scoping commands.andP;  After an object has been selected,its components may be displayed (if subviews are activated) or hidden.andP;  Thishierarchy scoping is maintained independently for each window.andM;The floor-planner can also be used as a control environment to invoke moredetailed design tasks such as gate-level automatic and interactive placementand routing.andP;  The visual analysis provided by the floor-planner reveals thehigh-risk areas which should be explored first in the detailed design toolsor in other views.andP;  (Gate-level synthesis and path tuning, or morefundamental structural changes, are accessed through other views for problemsnot solvable in physical design.)andM;Adaptive presentation of incrementally refinedandM;designandM;In this new design environment, the design data evolve incrementally over thefull product lifecycle.andP;  Design is a flexible, iterative process usingconstructive automation actions, visualization, and analysis, with editingand parameter selection between steps.andP;  Software must take into account theincremental process and partially known state, adaptively showing the data inthe most well-defined representation available.andP;  Forcing designers to invokemore commands to see each increment would complicate an already difficulttask.andP;  Over time, we have reduced the number of required subviews designersmust select, unifying them and automatically presenting them as they aregenerated.andP;  This is an important distinction between a design automationenvironment and other CAD or scientific visualization tasks that presentcomplex, but complete and well-defined or measured data [4].andM;Figures 1-3 illustrate the adaptive refinement of net path presentation, withcues to indicate the state of each design object.andP;  Solid lines in the defaultoutline and porosity views indicate reusable circuit components; dashed linesrepresent regions where many small circuits should be placed, indicating thatdesigners have flexibility in the layout of that function.andM;Consistency and color mappingandM;Another challenge in complex design applications involves consistent visualpresentation of various subviews.andP;  The primary technique we employ is thesystematic use of a color-mapping metaphor to indicate the quality of somemeasured result.andP;  A &quot;temperature spectrum&quot; metaphor is used, with cool colors(blue-green) representing feasible designs or measured good results and hot(yellow-red) indicating problems or marginal results.andP;  This mapping isapplied uniformly in our application to diverse visualization elements: localwire demand, global wire availability, routing congestion, and nettiming-target goal completion.andP;  Because in some case two dimensions ofinformation must be displayed in the same space, we modify the color strategyto an &quot;interleaved hot-cool&quot; metaphor (Figure 4).andP;  Experiance has shown usthat a consistent purist use of a &quot;traffic light&quot; metaphor is confusing whenthe subviews are overlaid.andM;Interleaved spectrumandM;When the same scale was used for both subviews, we found that routes orportions of routes might be confused with cuts used to measure congestion.andO;We then settled on the interleaved scheme, so that one subview of aconcurrently displayed pair might use green-red, while the other usedblue-yellow.andP;  For example, in views of global routes to manage both routingcongestion and timing problems, congested edges use the green-red coding, andoverlaid routes for individual nets use blue-yellow coding for timingproblems.andP;  The complementary colors used are also easily distinguished [5].andM;Figure 3 illustrates the use of alternating color mapping for concurrentsubviews.andP;  Proposed connection routes which may fail timing constraints aredisplayed against the background of a routing congestion map.andM;When both dimensions of the design can be visualized effectively, trade-offscan be made and problems in one domain which impact another can beidentified.andP;  Often, a few timing problems arise because a local wirecongestion problem results in &quot;roundabout&quot; or indirect wiring paths.andP;  If chippopulation permits, more space can be allotted locally, allowing thetiming-sensitive paths to follow more direct routes.andP;  Designers may alsoinvoke the global router with different weighting factors on timing orrouting congestion [6].andM;Color mapping for program controlandM;The same color-mapping scheme is employed in cases where controls forautomated subsystems are interactively specified.andP;  Cool colors indicate thatprograms are free to modify some value or use some resource; hot colorsindicate that some value cannot be changed or is blocked for the program.andM;Figure 5 illustrates the use of this visual indicator to control and displaythe state of global routing setup parameters.andM;Dynamic icon generationandM;A technique used in the floor-planner which we believe to be novel is theconstruction of iconic measurement tools based on measured data.andP;  Thedesigner can use a customized &quot;ruler&quot; built for each slow net to make afloor-plan correction based on the maximum distance the connection can spanwhile meeting its performance target.andP;  This translates the abstractelectrical performance data into a form directly related to the effectiveactions which can be taken in the interactive floor-planning environment.andM;Figure 6 shows a ruler icon, displayed together with the route chosen forthat circuit connection.andM;Interactive checkingandM;The floor-planner is designed to support a range of design styles, includingfull custom, and to work in an exploratory fashion with early (possiblyincomplete) data; as a general philosophy, all constraints on layouts andlegality conditions are optional.andP;  The many interactive operations supportedallow a good deal of robustness, which is useful for getting good resultswhen developing new design approaches or dealing with inconsistent orincomplete data.andP;  Checks for illegalities can be turned on during interactivecommands, or they may simply be invoked after many edit operations as a&quot;debugger.&quot;andP;  In this case, floor-plan violation are highlighted visually forease in correcting overlap or local wiring (population) errors.andM;Figure 7 illustrates the use of crosshatched fill patterns to indicate designobjects which design constraints or overlap rules.andM;Data overload: detail hiding, sequencingandM;Perhaps the most challenging visualization problem to address is that of dataoverload.andP;  While we have touched on this regarding the use of multiple viewsto manage conflicting requirements, the need for greater detail within asingle analysis subview such as routing or timing poses special requirements.andM;In some cases we show abstract maps with optional detailed attributes, suchas exact routing supply and demand numbers.andP;  In this case, numerical valuesare shown only for problem regions.andP;  It is still possible to generate busyoverlaid displays in which individual paths cannot be distinguished, orinterfere with other important data in making adjustments.andM;The only alternative to simultaneous presentation is sequential presentation;we have employed a uniform approach based on data filters and queues.andP;  Afterselecting a set of interesting objects (such as slow paths or nets in acongested region), a design may iterate through the queue one at a time, drawall at once, or select any subset.andP;  When drawing the queue one at a time,each object may be overlaid on the previous object, or each subview may becleared after it has been displayed.andM;We have also animation on subview sequences such as timing problems orcongestion to give an overview leading to conclusions or further queries.andO;When presenting data sequences, we have developed heuristics to drawattention, so that users are aware that a new item is displayed even thoughthe actual &quot;data points&quot; may be the same as those for the item justpreviously displayed.andP;  For example, we randomize points within the legalrange of unassigned values when displaying net paths, so that a number ofsimilar global routes are distinguished.andP;  The randomization technique is alsoused to spread out the display points in simultaneous or overlaid displays.andM;Figures 1 and 3 illustrate the use of randomization in network displays tohelp distinguish individual data objects with similar or identical data.andM;Figure 8 shows a selection menu used for filtering network views.andM;Summary and future workandM;While the visualization aspects of the floor-plan system are still undergoingrefinement, it has already proven useful to designers.andP;  It has also been ofvalue to algorithm developers, who obtain much better feedback from users onproblems than was obtained with previous batch-oriented systems, in whichonly final detailed results, such as exact routes on plots of finisheddesigns, could be examined.andM;Future developments are expected to take the form of generalizing thetechniques and data structures described here and incorporating them into anobject-oriented application framework, helping to enforce consistency andreduce development time.andP;  Given that many previous object-oriented frameworksand view/control paradigms [7] originated on monochrome displays, thesystematic use of color at the framework level still needs definition andstandardization.andP;  Other features discussed here, such as stepping throughqueued subviews and dynamically built iconic measurement tools, should beprovided as reusable framework components.andM;David L. DeMaris IBM General Technology Division, Burlington facility, EssexJunction, Vermont 05452.andP;  Mr. DeMaris joined the IBM Burlington laboratory in1982 after receiving his B.S.E.E.andP;  from the University of Illinois.andP;  He hasworked on logic modeling, RISC microprocessors, VLSI design methodologies,and computer-aided design software.andP;  Mr. DeMaris' technical interests includecomputer architecture, design methodologies, design and programmingframeworks, and applications of discrete complex systems dynamics in patternrecognition and data comparison.andM;ReferencesandM;andlsqb;1andrsqb; Kevin McCullen, John Thorvaldson, David DeMaris, and Patrick Lampin, &quot;ASystem for Floorplanning with Hierarchial Placement and Wiring,&quot; Proceedingsof the 1990 European Design Automation Conference, March 1990, pp.andP;  262-265.andM;andlsqb;2andrsqb; Ravi Nair, C. Leonard Berman, Peter S. Hauge, and Ellen J. Yoffa,&quot;Generation of Performance Constraints for Layout,&quot; IEEE Trans.andO;Computer-Aided Design 8, No.andP;  8, 860-874 (August 1989).andM;andlsqb;3andrsqb; S. Kirkpatrick, C. D. Gelatt, Jr., and M. P. Vecchi, &quot;Optimization byStimulated Annealing,&quot; Science, May 1983.andM;andlsqb;4andrsqb; Bruce H. McCormick, Thomas a. DeFanti, and Maxine D. Brown,&quot;Visualization in Scientific Computing,&quot; Comput.andP;  Graph.andP;  21, No.andP;  6, 3(November 1987).andM;andlsqb;5andrsqb; Gerald M. Murch, &quot;Physiological Principles for the Effective Use ofColor,&quot; IEEE Comput.andP;  Graph.andP;  andamp; Appl.andP;  4, No.andP;  11, 49-53 (November 1984).andM;andlsqb;6andrsqb; W. K. Luk, Paola Sipala, Markku Tamminen, Donald Tang, Lin S. Woo, and C.andO;K. Wong, &quot;A Hierarchical Global Wiring Algorithm for Custom Chip Design,&quot;IEEE Trans.andP;  Computer-Aided Design CAD-6, No.andP;  4, 518-533 (July 1987).andM;andlsqb;7andrsqb; Glenn E. Krasner and Stephen T. Pope, &quot;A Cookbook for Using theModel-View-Controller User Interface Paradigm,&quot; J. Object-OrientedProgramming 1, No.andP;  3, 26-49 (August 1988).andO;</TEXT></DOC>