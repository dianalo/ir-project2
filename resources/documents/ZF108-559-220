<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-559-220  </DOCNO><DOCID>08 559 220.andM;</DOCID><JOURNAL>EXE  June 1990 v5 n1 p24(5)* Full Text COPYRIGHT Process Communications Ltd. (England) 1990.andM;</JOURNAL><TITLE>The authorised version. (the right way to program the latest EMSspecification version 4.0)</TITLE><AUTHOR>Clifford, D.A.andM;</AUTHOR><SUMMARY>An outline of the features available using the expanded memoryspecification (EMS) version 4.0 is provided for users ofmicrocomputers based on the 8086/8088 family of processors.andO;Clarification is provided on the operation of expanded memoryboards and associated software drivers.andP;  Fundamentals ofinstallation and programming are given in detail.andP;  Sections of theadditional memory can be mapped into the normal address space ofthe 8086/8088 processor up to 32Mbytes.andP;  Anyone interested indoing a great deal of EMS programming is advised to obtain thefull LIM EMS specification.andM;</SUMMARY><DESCRIPT>Product:   Intel 8088 (Microprocessor) (computer programs)Intel 8086 (Microprocessor) (computer programs).andO;Topic:     Programming InstructionExpanded AddressingSpecificationsCodes.andO;Feature:   illustrationcharttable.andO;Caption:   Organisation of expanded memory. (chart)Principle EMS functions. (table)Common error codes. (table)andM;</DESCRIPT><TEXT>The Authorised Version The 640 KB addressing limit is imposed on the PC/XTfamily by the 1 MB addressing limit of the 8086/8088 family of procesors, andthe memory organisation dictated by the location of display adapter memory.andO;When the original PC was designed (and supplied with only 64 KB of memory)such a memory organisation seemed perfectly adequate, since at the timeapplications were constrained by the 64 KB size of the transient program areaof CP/M-80.andP;  Since the introduction of the IBM PC, however, applications haveoutgrown the available memory space, often requiring the full 640 KB tofunction successfully.andP;  To make further memory available, Lotus, Intel ndMicrosoft agreed a specification for LIM 'expanded' memory.andP;  The operation ofexpanded memory boards and associated software drivers is frequentlymisunderstood.andP;  This article sets out to explain the fundamentals ofinstalling and programming expanded memory.andP;  The latest EMS specification,V4.0, is used as the basis of the description, but any important differencesbetween this and V3.0 are pointed out.andM;What is it?andM;Expanded memory allows the programmer to access up to 32 MB of additionalmemory, by mapping sections of the additional memory into the normal addressspace of the 8086/8088 processor.andP;  The choice of mapping area is dictated bythe fact that any DOS application may use memory up to the 640 KB limit, andthere must also be no conflict with display memory.andP;  The actual mapping maybe done in several ways, depending on whether an adapter board (there areseveral different types) or system memory (as available on 80286 processors)is used to provide expanded memory.andP;  The different methods of producingexpanded memory do affect programming methods, but conceptually all systemsprovide similar facilities.andP;  An area of up to 192 KB of memory above thedisplay area is allocated as a page frame, and is typically divided up intotwelve 16KB pages (Figure 1).andP;  Pages within the frame may be written to andread from directly by an application.andP;  The EMS system, however, maps thisarea into logical pages within the additional (potentially 32 MB) memory.andM;An historic note: the earlier versions of the EMS specification limited thesize of the page frame to 64 KB.andP;  V4.0 contains some vestigal throw-backs tothe earlier efforts: some of the functions only work on the first 64 KB ofthe frame.andM;Expanded memory is usually provided by an add-on memory board.andP;  Theprogrammer need not be aware of the exact construction of the board or themethods used for mapping.andP;  (Typically this is achieved by a set of mappingregisters on the board, addressed through an I/O port.andP;  These registers areset to map the addresses in the page frame into physical expanded memory.)andO;However, the method of implementation may limit the EMS features available tothe programmer.andP;  Most expanded memory boards offer a number of setup options,to cater for different systems.andP;  The base address of the page frame mayusually be changed, to avoid conflict with other memory-allocating cards,such as fancy display adapters and network/synchronous communicationsadapters.andP;  Sometimes you can also set the I/O port address used to access themapping registers.andP;  Up-market adapters allow the board's memory to be splitbetween conventional memory (to fill up the memory area between, say, 512 KBand the 640 KB limit) and expanded memory.andP;  Obviously, such options must beset up to suit the system in which the board is installed.andP;  Although thesettings chosen do not affect the applications which access expanded memory,they may be needed to set up the driver software.andM;80286 and 80386 machines can address extended memory directly.andP;  Extendedmemory can be used to emulate expanded memory by using EMS driver.andP;  However,certain advanced features of the EMS specification cannot be supported, andif an application wishes to use these features, it must first test for theiravailability.andM;The DriverandM;If a PC contains correctly configured EMS hardware and software, and theprogrammer adheres to correct EMS programming techniques, the EMS softwaredriver supplied by the adapter board/PC manufacturer will allowconfiguration-independent programming.andP;  The Lotus/Intel/Microsoft (LIM) EMSspecification defines the functions required to map and use expanded memory.andO;It turns out that this specification is extremely comprehensive, and mostapplications will use only a few of the LIM features.andP;  All the EMS functionsare accessed through software interrupt 67H, with the function code requiredin AH.andM;Most programs which utilise EMS will also run on plain vanilla 640 KBmachines.andP;  The EMS is used to enhance the functionality of the application,either by increasing the maximum amount of data that can be used, or byexecuting more code in memory, instead of overlaying it from disk.andP;  The firsttask of a program, therefore, is to determine the presence of EMS, find thebase address of the page frame for the current system and to ascertain theamount of EMS memory available.andM;To find out whether an expanded memory handler has been loaded, the programshould retrieve the contents of the interrupt vector 67H at 0000:019CH, usingthe MS-DOS function 35H.andP;  Because the structure of a DOS device driver isdefined, and starts with a header describing the driver, the driver namefield at offset 0AH in the driver's segment can be tested, and should containthe string 'EMMXXXXO'.andP;  If this string is found, the application may assumethat an EMS driver is loaded.andM;The Get Status command (Function Code 40H) determines whether EMS hardware isinstalled, and the software driver is loaded and working correctly.andP;  All theEMS function calls return a status in AH, with zero indicating success, and anegative number representing a function-dependent error.andP;  The code in Figure2 determines whether the EMS hardware and software are correctly installed.andO;To get the base address of the page frame, we use function code 41H, whichreturns the segment address of the page frame in BX (Figure 3).andM;The number of currently unallocated 16 KB pages of expanded memory can bedetermined by using function code 42H, as shown in Figure 4.andP;  The number ofpages available in expanded memory is returned in DX, and the numbercurrently unallocated in BX.andP;  Since DOS is a single user system, you mightexpect these numbers always to be identical, but this is not so.andP;  Anintegrated set of applications, for example, might have some pages allocatedto a spreadsheet, while others were in use by a word processor.andP;  The EMSsystem allows these sets of pages to be identified by handles, so that datashared between applications can be identified and used.andM;Grabbing EMSandM;Before an application can use expanded memory, it must allocate a number ofpages.andP;  Function 43H returns a handle which must be used in future operationsto identify the set of pages required (Figure 5).andP;  Note the similaritybetween this approach and standard file-handling mechanisms.andP;  As with files,the use of a handle isolates the programmer from the data structure thatconfirms mapping information.andP;  Function 43H returns various error codes, suchas attempting to allocate more pages than are currently available, whichshould be catered for.andP;  Figure 14 lists the most important.andM;So far, th eprogram has reserved a pool of logical pages in EMS memory.andO;These are not yet associated with a physical address within the page frame.andO;In order to use the expanded memory, the hardware and software must be toldwhich logical (EMS) pages are to be associated with which physical addresseswithin the page frame.andP;  The physical 16 KB pages within the page frame arenumbered sequentially from zero starting at the page frame base address, andthe logical EMS pages are also numbered from zero to the number of allocatedpages minus one.andP;  Figure 6 shows how the map/unmap handle pages function canbe used to set up (and remove) the link between physical and logical pages.andO;Pages are unmapped by setting the contents of BX to FFFFH, which frees up thephysical page specified in AL for mapping to other logical pages.andP;  Themapping scheme of logical pages will depend on the use to which EMS memory isto be put.andP;  A spreadsheet, for instance, treating EMS as additional datastorage, might use the pool of logical pages for dynamically storing celldata, keeping a list of empty and used pages in conventional memory.andP;  On theother hand, if the application is going to execute code in EMS memory, moreattention must be paid to the organisation of the mapping strategy.andM;Once it has mapped a set of logical pages into the physical page frame, theapplication may access this memory as if it were system memory.andP;  Figure 7shows an example of writing data into an offset within the logical pagemapped into the first physical page.andM;When an application has completed its use of EMS memory, it must deallocatethe pages it has used, otherwise they will become 'frozen'.andP;  If you havesloppy programming habits, and normally let MS-DOS free up the heap spacethat you allocate, then you should take heed of the following.andP;  Failure todeallocate EMS memory could mean that a reboot is necessary before anotherprogram can make use of EMS.andP;  In the case of an integrated suite of programs,which pass data to each other through EMS, 'old' data could be retrievedaccidentally.andP;  The deallocate function frees up all pages associated with ahandle.andP;  An example of its use is given in Figure 8.andM;We have now covered all the basic functions that you need in order to use EMSas data store.andP;  However, further facilities are needed if you want to writeinterrupt routines which access expanded memory, or if you want to write codewhich runs in expanded memory.andM;InterruptsandM;An interrupt routine which accesses expanded memory must take steps topreserve the pre-interrupt mapping between physical and logical pages.andP;  TheEMS handler provides functions to save and restore the page map.andP;  It isnecessary here to distinguish between the LIM V3.0 and V4.0 specifications.andO;In V3.0, the page frame was limited to 64 KB.andP;  Function codes 47H and 48Hsave and restore the current page map for the first 64 KB of page frame in aninternal area.andP;  These functions may be used where an EMS V3.0 handler is inoperation (see Get Version Number Function), or where the interrupt handleris able to restrict its own use of the page frame to a 64 KB area.andP;  Wherelarger page frames are used, you must use function code 4EH to save andrestore and the page map to an array within the application.andP;  Figure 9illustrates the use of V3.0-compatible functions.andP;  Figure 10 shows theequivalent sequence using the V4.0 function.andP;  Another point to note aboutfunction code 4EH is that it does not require the use of a handle, whichcould be advantageous in some situations.andP;  Function 4EH has a subfunctionwhich returns the byte length of the array required to store the mappinginformation - see the table in Figure 13 for details.andM;Code in EMSandM;It is, or course, possible to handle pages of code as if they were data,mapping the code page into a known page frame address, then calling orjumping to the required physical address.andP;  However, this is clearly very hardwork, and not really a feasible option for anyone except assembly languagehackers.andP;  There is an alternative.andP;  The LIM V4.0 specification provides twovery useful functions for executing code in EMS memory.andP;  These may beconsidered as, and may directly replace, far calls and jumps to code inconventional memory.andP;  As an example, the alter page map and call function(which emulates far calls) is described here in detail.andM;The alter page map and call function (Function code 56H) works in thefollowing way.andP;  The current page map is saved, the new logical pagescontaining the code are mapped into the physical page frame and control istransferred to the specified address.andP;  Before transferring control, returninformation is pushed on the stack by the EMS handler.andP;  When the calledroutine executes a far return, the original mapping context is restored andcontrol returns to the calling program.andM;The call is specified using a special data structure, given in Figure 11,which contains the call address, plus two sets of data describing the pagemapping required at the start of execution of the routine, and when it hasreturned.andP;  The mapping data takes the form of a pointer to a map table andthe table's length.andP;  Each entry in the map table is a pair of words: thelogical page number followed by the corresponding physical page number.andP;  Oncethis structure has been set up, the far call to a routine in conventionalmemory is replaced by an EMS call (see Figure 12).andP;  The 'alter page map andjump' function is similar, but, as you would expect, transfer is not returnedto the calling routine.andM;ConclusionandM;This article has attempted to give an outline of the features available usingthe LIM EMS specification.andP;  Using the summary of the principal functionsavailable given in Figure 13, and the most common error return codes listedin Figure 14, it should be possible to create simple EMS applications.andP;  Youshould know, however, that many more functions and options are available, andif you intend getting heavily into EMS programming, then you really shouldget access to the full LIM EMS specification.andM;D A Clifford is a Director of the Sussex-based Micro Logic Consultants Ltd,based in Sussex</TEXT></DOC>