<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-928-634  </DOCNO><DOCID>07 928 634.andM;</DOCID><JOURNAL>UNIX Review  Nov 1989 v7 n11 p70(5)* Full Text COPYRIGHT Miller Freeman Publications 1989.andM;</JOURNAL><TITLE>On trusting trust. (abridged lecture by Ken L. Thompson, creatorand co-developer of UNIX) (column)</TITLE><AUTHOR>Thompson, Ken L.andM;</AUTHOR><SUMMARY>Users should not trust code that they did not write, includingprograms from software publishers.andP;  No source-code verification orexamination will protect users from using untrusted code.andP;  Thebugs will become more difficult to find as the level of programgets lower.andP;  The press is to be criticized for its handling of'hackers,' the 414 gang, the Dalton gang and others (all accusedof gaining unauthorized access to computer systems).andP;  Companiesare now trying hard to get the government to update the criminalcode.andP;  In a few states, unauthorized access to computers isalready a crime.andP;  The press, television, and movies make heroes ofthe vandals by calling them whiz kids.andP;  The acts performed bythese kids will soon be punishable by prison sentences.andM;</SUMMARY><DESCRIPT>Topic:     Software ProtectionEncryptionComputer CrimesDebuggingLegislationAccess ControlsData SecurityProgram Errors.andO;Person:    Thompson, Ken L. (attitudes).andM;</DESCRIPT><TEXT>ON TRUSTING TRUSTandM;I thank the ACM for this award.andP;  I can't help but feel that I am receivingthis honor for timing and serendipity as much as for technical merit.andP;  UNIXswept into popularity with an industry-wide change from central mainframes toautonomous minis.andP;  I suspect that Daniel Bobrow [1] would be here instead ofme if he had not been able to afford a PDP-10 and had had to &quot;settle&quot; for aPDP-11.andP;  Moreover, the current state of UNIX is the result of the labors of alarge number of people.andM;There is an old adage, &quot;dance with the one that brought you&quot;, which meansthat I should talk about UNIX [2].andP;  I have not worked on mainstream UNIX inmany years, yet I continue to get undeserved credit for the work of others.andO;Therefore, I am not going to talk about UNIX, but I want to thank everyonewho has contributed to its development.andM;That brings me to Dennis Ritchie.andP;  Our collaboration has been a thing ofbeauty.andP;  In the ten years that we have worked together, I can recall only onecase of miscoordination of work.andP;  On that occasion, I discovered that we bothhad written the same 20-line assembly-language program.andP;  I compared thesources and was astounded to find that they matched character-for-character.andO;The result of our work together has been far greater than the work that weeach contributed.andM;I am a programmer.andP;  On my 1040 Federal Income Tax form, that is what I putdown as my occupation.andP;  As a programmer, I write programs.andP;  I would like topresent to you the cutest program I ever wrote.andP;  I will do this in threestages and try to bring it together at the end.andM;Stage I.andP;  In college, before video games, we would amuse ourselves by posingprogramming exercises.andP;  One of the favorites was to write the shortestself-reproducing program.andP;  Since this is an exercise divorced from reality,the usual vehicle was FORTRAN.andP;  Actually, FORTRAN was the language of choicefor the same reason that three-legged races are popular.andM;More precisely stated, the problem is to write a source program that, whencompiled and executed, will produce as output an exact copy of its source.andO;If you have never done this, I urge you to try it on your own.andP;  The discoveryof how to do it is a revelation that far surpasses any benefit obtained bybeing told how to do it.andP;  The part about &quot;shortest&quot; was just an incentive todemonstrate skill and determine a winner.andM;Figure 1a shows a self-reproducing program in the C programming language [3].andO;(The purist will note that the program is not precisely a self-reproducingprogram, but will produce a self-producing program).andP;  This entry is much toolarge to win a prize, but it demonstrates the technique and has two importantproperties that I need to complete my story: (1) this program can be easilywritten by another program, and (2) this program can contain an arbitraryamount of excess baggage that will be reproduced along with the mainalgorithm.andP;  In the example, even the comment is reproduced.andM;Stage II.andP;  The C compiler is written in C.andP;  What I am about to describe isone of many &quot;chicken and egg&quot; problems that arise when compilers are writtenin their own language.andP;  In this case, I will use a specific example from theC compiler.andM;C allows a string construct to specify an initialized character array.andP;  Theindividual characters in the string can be escaped to represent unprintablecharacters.andP;  For example,andM;&quot;Hello world/n&quot;andM;represents a string with the character \n representing the newline character.andM;Figure 2a is an idealization of the code in the C compiler that interpretsthe character escape sequence.andP;  This is an amazing piece of code.andP;  It &quot;knows&quot;in a completely portable way what character code is compiled for a newline inany character set.andP;  The fact of knowing then allows it to recompile itself,thus perpetuating the knowledge.andM;Suppose we wish to alter the C compiler to include the sequence \v torepresent the vertical tab character.andP;  The extension to Figure 2a is obviousand is presented in Figure 2b.andP;  We then recompile the C compiler, but we geta diagnostic.andP;  Obviously, since the binary version of the compiler does notknow about \v, the source is not legal C.andP;  We must &quot;train&quot; the compiler.andO;After it &quot;knows&quot; what \v means, then our new change will become legal C.andP;  Werefer to an ASCII chart to determine that a vertical tab is represented asdecimal 11.andP;  We alter our source to look like that in Figure 2c.andP;  Now the oldcompiler accepts the new source.andP;  We install the resulting binary as the newofficial C compiler and now can write the portable version the way we had itin Figure 2b.andM;This is a deep concept.andP;  It is as close to a &quot;learning&quot; program as I haveseen.andP;  You simply tell it once, then you can use this self-referencingdefinition.andM;Stage III.andP;  Again, in the C compiler, Figure 3a represents the high-levelcontrol of the C compiler where the routine compile is called to compile thenext line of source.andP;  Figure 3b shows a simple modification to the compilerthat will deliberately miscompile source whenever a particular pattern ismatched.andP;  If this were not deliberate, it would be called a compiler &quot;bug&quot;.andO;Since it is deliberate, it should be called a &quot;Trojan horse&quot; [4].andM;The actual bug I planted in the compiler would match code in the UNIX logincommand.andP;  The replacement code would miscompile login so that it would accepteither the intended encrypted password or a particular known password.andP;  Thus,if this code were installed in binary and the binary were used to compilelogin, I could log in to that system as any user.andM;Such blatant code would not go undetected for long.andP;  Even the most casualperusal of the source of the C compiler would raise suspicions.andM;The final step is represented in Figure 3c.andP;  This simply adds a second Trojanhorse to the one that already exists.andP;  The second pattern is aimed at the Ccompiler.andP;  The replacement code is a Stage-I, self-reproducing program thatinserts both Trojan horses into the compiler.andP;  This requires a learning phaseas in the Stage-II example.andP;  First we compile the modified source with thenormal C compiler to produce a bugged binary.andP;  We install this binary as theofficial C.andP;  We can now remove the bugs from the source of the compiler andthe new binary will reinsert the bugs whenever it is compiled.andP;  Of course,the login command will remain bugged with no trace in source anywhere.andM;Moral.andP;  The moral is obvious.andP;  You can't trust code that you did not totallycreate yourself.andP;  (This is especially true for code from companies thatemploy people like me).andP;  No amount of source-level verification or scrutinywill protect you from using untrusted code.andP;  In demonstrating the possibilityof this kind of attack, I picked on the C compiler.andP;  I could have picked onany program-handling program such as an assembler, a loader, or even hardwaremicrocode.andP;  As the level of program gets lower, these bugs will be harder andharder to detect.andP;  A well-installed microcode bug will be almost impossibleto detect.andM;After trying to convince you that I cannot be trusted, I wish to moralize.andP;  Iwould like to criticize the press in its handling of &quot;hackers&quot;, the 414 gang,the Dalton gang, and the like.andP;  [The two gangs mentioned were groups of youngcomputer users who in the early 1980s were accused of gaining unauthorizedaccess to someone else's computers.andP;  -- Ed.]  The acts performed by thesekids are vandalism at best and probably trespass and theft at worst.andP;  It isonly the inadequacy of the criminal code that saves the hackers from veryserious prosecution.andP;  The companies that are vulnerable to this activity (andmost large companies are very vulnerable) are pressing hard to update thecriminal code.andP;  Unauthorized access to computer systems is already a seriouscrime in a few states and is currently being addressed in many more statelegislatures, as well as in Congress.andM;There is an explosive situation brewing.andP;  On the one hand, the press,television, and movies make heroes of vandals by calling them whiz kids.andP;  Onthe other hand, the acts performed by these kids will soon be punishable byyears in prison.andM;I have watched kids testifying before Congress.andP;  It is clear that they arecompletely unaware of the seriousness of their acts.andP;  There is obviously acultural gap.andP;  The act of breaking into a computer system has to have thesame social stigma as breaking into a neighbor's house.andP;  It should not matterthat the neighbor's door is unlocked.andP;  The press must learn that misguideduse of a computer is no more amazing than drunk driving of an automobile.andM;ReferencesandM;[1h D.G.andP;  Bobrow, J.D.andP;  Burchfiel, D.L.andP;  Murphy, and R.S.andP;  Tomlinson, &quot;TENEX,a paged time-sharing system for the PDP-10&quot;, Communications of the ACM, Vol.andO;15, No.3, pp.andP;  135-143 (March 1972).andM;[2] D.M.andP;  Ritchie and K. Thompson, &quot;The UNIX time-sharing system&quot;,Communications of the ACM, Vol.andP;  17, pp.andP;  365-375 (July 1974).andM;[3] B.W.andP;  Kernighan and D.M.andP;  Ritchie, The C Programming Language,Prentice-Hall, Englewood Cliffs, NJ (1978).andM;[4] I first read of the possibility of such a Trojan horse in a US Air Forcecritique of the security of an early implementation of Multics.andP;  I did nothave the reference to the critique at the time of this lecture's originalpublication, but now do:andM;Paul A. Karger and Roger R. Schell, &quot;Multics Security EvaluationVulnerability Analysis&quot;, US Air Force, ESD-TR-74-193, Vol.andP;  2 (June 1974).andO;</TEXT></DOC>