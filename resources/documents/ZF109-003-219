<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-003-219  </DOCNO><DOCID>09 003 219.andM;</DOCID><JOURNAL>EXE  May 1990 v4 n11 p18(4)* Full Text COPYRIGHT Process Communications Ltd. (England) 1990.andM;</JOURNAL><TITLE>History of a useful illusion. (invention of Simula 67 and SimulaI)</TITLE><AUTHOR>Drake, Richard.andM;</AUTHOR><SUMMARY>Kristen Nygaard and Ole Dahl are Norwegian programmers creditedwith the invention of Simula I and Simula 67 computer languages.andO;Simula 67 was finished in 1967 and was ready to be delivered inMay 1968; it was a general purpose programming language laterdefined as the first object-oriented programming (OOP) language.andO;The concept of OOP was later 'Americanized' when Alan Kay, backedby the Xerox Palo Alto Research Center (PARC), set up the LearningResearch Group with the idea of creating a software system simpleenough for children to program.andP;  Kay's work included the Smalltalklanguage that could be uniformly object-oriented where all programentities would be instances of classes (or objects).andP;  Studies onthe way children used the system influenced the way the first userinterface of Smalltalk developed.andP;  In the 1970s object-orienteddialects of LISP began to appear.andP;  Subsequent developmentsappeared with Objective C from Stepstone Inc, the extension of Cinto C++ by Bjarne Stroustrup, Object-works for C++, and withApple's Object Pascal.andM;</SUMMARY><DESCRIPT>Topic:     Object-Oriented ProgrammingHistory of ComputingProgrammersSimulation TheoryProgramming LanguagesSIMULA (Computer program language).andO;Feature:   illustrationprogram.andO;Caption:   Vehicle subclassing example. (program)CLOS multi-methods. (program)Person:    Nygaard, Kristen (achievements and awards); Dahl, Ole(achievements and awards).andM;</DESCRIPT><TEXT>History of a Useful Illusion It could only have been created by a man whoknew what it felt like to be a CPU.andP;  Shortly after the war, the Norwegiangovernment, which was struggling to set up a nuclear power industry, needed adigital computer to perform some complex and repetitive computations.andP;  Ofcourse, there was no cash for such a machine, so instead the Norwegiansfilled a room with soldiers, including one Private Kristen Nygaard (soundslike 'knee-guard'), and kept them there for several weeks, simulating thecalculations of the inaffordable machine.andP;  This experience must have rankled,because many years later Kristen Nygaard, with his colleague, one Ole Dahl,turned the tables on the electronic CPU by designing two successive computerlanguages that allowed effective simulations to be programmed on it.andM;The first of these was Simula I, an extension of Algol 60, which introducedthe concept of an 'activity' or process description.andP;  By the middle of the1960s, Nygaard and Dahl felt they had identified a number of key pointsthrough their work with this language.andP;  In particular:andM;* The distinction between a piece of program text and an execution, or a'dynamic instance' of it.andM;* Data and operations belong together, and most useful program constructionscontain both.andM;* Processes often share a number of common properties, both data and actions,whose declarations should not have to be repeated.andM;* A garbage collection scheme is required for removing dynamically createdprocesses that are no longer needed.andM;The last idea was borrowed in part from LISP world - the first of a number ofways in which LISP was to influence the direction of OOP.andP;  These conceptspaved the way for an event that is widely recognised as the birth ofobject-oriented programming.andM;Born in ObscurityandM;In 1967, Nygaard and Dahl created Simula 67 (actually the final definitionwas, like most software babies, delivered late, in May 1968).andP;  Simula 67 wasa general purpose programming language, later to become famous as the firstobject-oriented programming language.andM;If this was the birth of OOP, its conception can probably be traced to awintry Norwegian day in December 1966, when the solution to the problem ofrepeated definitions of 'common properties' was finally drafted.andP;  By thistime, Nygaard and Dahl had renamed activities 'classes', and had begun toponder how common properties might be grouped together in a class from whichother 'subclasses' could be derived.andP;  After careful thought, they arrived atan open syntax for subclasses (contrasting with Pascal's closed syntax forvariant records) that would allow the extension of an existing class, withoutany need for modification of the original source code.andM;The problem used to illustrate subclassing was the simulation of a toll boothon a bridge with a queue of vehicles that may be either cars or trucks.andP;  Asketch of the solution, using the class Link as the basis for a linked listof vehicles, is shown in Figure 1.andP;  The advantage of this approach is thatif, later on, the program needs to be extended to cope with buses, none ofthe existing code for Vehicle need be changed.andP;  Thus it became natural toconstruct hierarchies of classes in Simula 67, a key feature ofobject-oriented programming to this day.andM;Subclassing led to further language changes, including relaxing compatibilityrules so that, for example, references to instances of Car or Truck could beassigned to variables declared as Vehicle, allowing general code to handle aqueue of vehicles without needing to know all the possible subclasses.andP;  Inaddition, where an action was required that was defined in more than oneclass, there was a need to resolve which version(s) should be used.andP;  Aconstruct was invented to combine procedures defined in a class and itssubclass, and the principle of dynamic or run-time binding of procedures wasestablished, to let general code specify the appropriate action (such astravel at average speed) without necessarily knowing exactly which class(es)would be involved at run-time.andM;Like any new baby, object-oriented programming needed a name.andP;  In Spring 1967the term 'object' was first coined, as a more neutral term than 'process' forthe instance of a class.andP;  Little did the creators guess that such a trivialchange would have such a dramatic effect on software marketing over twentyyears later, as desperate attempts to draft and trademark the latest fOOlishanachronism or OBJECTionable product name fill the waking hours ofcopywriters and lawyers, all to sell software products that are frequentlyinferior to Simula 67.andM;How has OOP gone from obscurity (ie not being invented in America ormass-produced in Japan) to become the software superstar of the 1990s?andP;  Well,if you can't be born in the USA, the next best thing is to be adopted there.andO;This is what happened to OOP in an all-American research lab in the 1970s...andM;A Secluded ChildhoodandM;Around 1970, a young jazz musician, and sometime student at the University ofUtah, was introduced both to Simula 67 and Ivan Sutherland's innovative'Sketchpad' program, which used both a bitmap display and a pointing device.andO;He argued that a combination of the inherently powerful concepts in Simulaand the user interface of Sketchpad should be used to create a 'reactiveengine', a software language and environment that would be far easier tolearn and use than other development systems, and could form the basis for ahand-held personal computer called the 'dynabook'.andM;Alan Kay didn't get everything right about the future of personal computers(he just missed some minor points, like the fact that a computer as primitiveas the Apple II could attract a reasonable market by 1980...).andP;  But in thedays of mainframes, batch programs and punched-card input, his vision wasrecognised and backed by the newly-formed Xerox Palo Alto Research Centre(PARC), where he set up the Learning Research Group, with the aim of creatinga software system easy enough to be used and 'programmed' by children.andM;Kay's vision included a language, Smalltalk, which would be uniformlyobject-oriented - that is, all program entities, including numbers andstrings, would be instances of classes, ie objects.andP;  In order to emphasisethe uniform computational model of the system, the term 'sending a message'was used to describe the calling of action belonging to an object.andP;  Thisbecame the only way anything in the system got done.andP;  For example, the syntax'3 + 4' was shorthand for sending the message '+' to object '3' withparameter '4'.andP;  The code within a class which implemented the message wascalled a 'method'.andM;Kay carried out studies of the way children learned to use the system.andP;  Thefeedback from these experiments influenced the way that the user interface ofSmalltalk developed.andP;  Kay used the term 'user illusion' to describe howobjects should be represented on the screen, and originated the metaphor ofoverlapping windows and pop-up menus.andP;  Larry Tesler (who joined Apple in 1981to help create the Lisa/Macintosh) introduced the complementary ideas ofmodeless operation, object/verb editing and powerful online browsingfacilities for existing source code.andP;  Dan Ingalls added a debugger which,even today, shames most of the competition.andP;  Other members of the team, whichincluded leading computer scientists like Adele Goldberg and Peter Deutsch,implemented integrated text editing and fast incremental compilation.andP;  By1980, they had created what was the most powerful programming languageenvironment of its time - a position Smalltalk arguably retains today.andM;In keeping with the conceptual simplicity and the interactive nature ofSmalltalk development, the language does not require the class or type ofvariables to be declared, as in Simula.andP;  All objects, except those belongingto 'primitive' classes such as Boolean or SmallInteger, are createddynamically as required.andP;  These are accessed through double-indirectedpointers, and garbage-collected by the environment when they are no longerreferenced.andP;  The programmer has no worries over memory management...andP;  but,there again, he has no control over it either, as inveterate C programmerslament.andP;  Rather confusingly to Smalltalk novices, classes themselves areobjects; instances are created by sending the message new to the class inquestion.andP;  Subclasses automatically inherit data fields ('instancevariables') and methods from their 'superclasses'.andP;  The environment supportsvarious incremental changes to classes, including adding or removing instancevariables, even when the classes have existing instances.andM;Since 1978, most Smalltalk implementations have used a virtual machine model,to maximise portability.andP;  The system is similar-to thePascal p-code approach.andO;Source code is compiled into intermediate 'byte-codes', and these areinterpreted at run-time.andP;  In the last few years, there have appearedimplementations which generate native machine code.andP;  Consequently theperformance of Smalltalk object code, although inferior to that produced byoptimising C compilers, has improved steadily.andP;  Run-time errors are painless.andO;A new window, called a notifier, appears to report the error - the mostcommon being: sending a message to an object that doesn't 'understand' it.andO;The debugger can be activated directly from the notifier.andP;  Very often thesource code can be debugged, and the process resumed, without losing resultsof the execution so far.andM;SocialisingandM;In the last decade, the happy picture of steady development, leading to theuniformity and productivity of Smalltalk, is spoilt.andP;  OOP experimented withnew things, mixed with all the wrong people and, like most teenagers, got ina real mess.andP;  But it also learnt a lot; in particular it learnt to relate toreal-world software developers, and how they build (and fail to build)commercial systems.andP;  Slowly OOP began to influence fundamentally the waysystems are put together, a trend that looks set to continue in the immediatefuture.andM;Even in the 1970s, object-oriented dialects of LISP had begun to emerge.andO;Flavors and LOOPS are the best known products from this period.andO;Subsequently, adding objects to any and all languages became high fashion,with more or less pleasing results.andP;  In my view, 'adding objects' has no realvalidity unless the resulting language supports at least three things:andM;* Encapsulation (data and functions/procedures/methods defined together) tocreate classes (object types in Object Pascal, structs or classes in C++).andM;* Inheritance of data and functions/methods from super (or base) classes bysub (or derived) classes (C++ terms in brackets, forget Object Pascal!).andM;* Dynamic or run-time binding, where the result of sending a message/invokinga function depends on the class of the object involved at run time (automaticin Smalltalk and most OOP languages-specified by virtual functions in C++).andM;Did anybody notice an exponential increase in the complexity of the jargon?andO;This was the first (inevitable) result of letting the unwashed masses gethold of a net, uniform idea like OOP in Smalltalk.andM;Objective C, from Stepstone Inc, was the first on the C-with-objectsbandwagon.andP;  It added a Smalltalk-like message sending syntax to C, but letthe language do its own thing with integers and characters.andP;  The mismatchbetween 'objects' and these more elementary data types proved aggravating,but not fatal.andP;  With a useful library of basic classes, Objective C was lateron adopted as the main development language for Steve Jobs' NextStepenvironment on the NeXT cube.andM;Meanwhile, Bjarne Stroustrup extended C into C++.andP;  Because he was careful tostay as close as possible to C, and because he worked for ATandamp;T Bell Labs (aslightly unfair advantage, some might say) C++ looks set to become thestandard for OOP, just as C became the standard for conventional programming.andO;Unfortunately, C++ is, at present, several times worse than Smalltalk forcreating really general purpose class libraries, although it is more memoryand processor efficient.andP;  It has no automatic garbage collection, no way ofcreating general purpose collection classes (because of its strong typing andlack of parameterised types), objects have no knowledge of their class atrun-time and classes are not themselves objects.andM;Even with an environment like Objectworks for C++, or a cheap and cheerfulone, such as supplied by Zortech on the PC, the lack of a rich class libraryfor C++ (caused partly by deficiencies in the language) means at present thatC++ programmers cannot get a feel for the full potential of OOP.andO;Parameterised types should make a difference here, and are promised byStroustrup some time soon...andM;In the same vein as ATandamp;T, Apple decided to add objects to Pascal (with alittle help from Niklaus Wirth, the inventor of the language) to createObject Pascal.andP;  Recently Microsoft and Borland claimed to have releasedversions of the same language.andP;  (Closer analysis by Paul Smith, in .EXEMagazine Sept-Oct '89, suggested that Microsoft implemented the correctlanguage badly, and Borland invented its own language, and implemented itquite well.)andP;  Apple, at least, under the guiding hand of Tesler (and now Kayand Ingalls too), provide a decent set of classes.andP;  MacApp (as the Macintoshclass library is known) supports the Macintosh user interface, and thus doesgive novices a reasonable amount of OOP for their money.andP;  Object Pascalsuffers from some of the same problems as C extensions; there is an uneasycohabitation of Pascal's data types alongside the new object types.andM;As far as pure OOP languages are concerned, there are three of reasonablecommercial significance.andP;  Smalltalk exists in two dialects - 80 and V - whichare identical, more or less, in their syntax, but differ in their classlibraries.andP;  Objectworks for Smalltalk-80 is the original system, produced and'ruggedised' by ParcPlace.andP;  This runs on almost any brand of workstation, notto mention the Macintosh and 386 class PCs.andP;  It remain the most complete OOPenvironment but suffers at present from supporting only its own'old-fashioned' windowing system (it was the first, after all).andP;  On the otherhand, its portability means that applications written in it can be portedbetween platforms in a matter of minutes.andP;  I can testify the truth of thisfrom first hand experience, having last year moved a large system back andforth between Macintoshes and Apollos for a UK clearing bank.andM;Smalltalk/V, from Digitalk, runs under MS-DOS, OS/2 PM and the Mac, andsupports the native windowing in the last two environments.andP;  Although it doesnot have all the richness of 80's development environment, it has enough togive a good flavour of life in the OOP fast lane at a competitive price.andP;  Itis also the proud owner of a native code compiler for OS/2 PM.andM;The two other OOPLs of note are Eiffel and CLOS, the Common LISP ObjectSystem.andP;  Eiffel is Bertrand Meyer's elegant language, designed with moderntechniques of software engineering in mind.andP;  It includes class assertions,post and pre-conditions and clean error-handling for messages.andP;  Both Eiffeland CLOS (and, incidentally, V2.0 of C++) support multiple inheritance, inwhich a subclass can inherit from more than one parent class.andP;  Proponents ofEiffel, in particular, claim that this facility represents a majorimprovement in the expressive power of an OOP language.andM;CLOS also introduces a more general and powerful mechanism for selecting themethod executed at run-time for a given message, called multi-methods.andP;  ACLOS generic function (message) with more than one parameter invokes a methodbased on the classes of all the parameters, not just the first (the firsttraditionally being the object to which the message is 'sent' in otherOOPLs).andP;  So the generic function install, for example, which installs a newsoftware product on an operating system, will invoke a method depending onthe class both of the first parameter (the product) and the second (theoperating system).andP;  See Figure 2 for a simple application of this; theexample is taken from Sonya Keene's excellent book Object-OrientedProgramming in Common Lisp (Addison-Wesley, 1989).andM;Because CLOS seamlessly integrates dynamically-bound generic functions withstandard LISP functions, I class it as a 'pure' OOP language, despite itpre-OOP origins.andM;As well as sincere attempts to graft OOP facilities onto conventionallanguages (Objective FORTRAN is now available for the NeXT cube!), lessscrupulous, or just plain unintelligent, claims to be object-oriented havebecome boringly commonplace recently.andP;  Back in the 1980s, tired marketeersflogged the 'relational database' buzz-phrase to the limits of credulityuntil the man who invented it, Ted Codd, began publishing vast numbers ofrules to define the term.andP;  The market-men then fell upon 'CASE' and 'OOP'with enthusiasm, realising that nobody seemed able to agree what eitherphrase described.andM;Object-orientation has suffered from a problem of definition since the 70s,because of the breadth of Alan Kay's vision for personal computing.andP;  Manydefinitions were based on Smalltalk-80, with the result that only thosesystems sharing selected user interface, design or language features withSmalltalk were object-oriented.andP;  Such an approach has dangers, but mostexperts agree that there are three essential mechanisms, as mentionedalready, for any OOP language, which are common to languages described inthis article:andM;1.andP;  Encapsulation (classes).andM;2.andP;  Inheritance (subclassing).andM;3.andP;  Polymorphism (dynamic binding).andM;OOP, so defined, is now 23, older and wiser because of the rough and tumbleof the past decade.andP;  Everyone agrees it's high time it settled down and beganto earn an honest living so that we can see what it really does have tooffer...andM;AdulthoodandM;Not surprisingly, given the amount of media and marketing copy given to OOP,it has its detractors and debunkers.andP;  How come something so good has beenaround for 23 years and still doesn't seem to have been used for any verymajor software system?andP;  In any case, the whole thing is an illusion - you canget just the same effect in good old C, Modula-2 or Ada.andM;I would agree on the last point - in fact, the phrase 'user illusion' couldlagitimately refer to any software.andP;  All programs are abstractions; the poorold silicon has no knowledge of the elaborately-named variables andprocedures that the programmer writes, all it sees is a third handtranslation which has been mauled by the compiler, linker etc.andP;  The questionis: what is a useful illusion?andP;  The main claim for OOP is that it is a veryuseful metaphor for writing software systems, and there are languages thatsupport the metaphor well.andM;As for whether OOP has been used to build large systems, I have to admit:some, but not many.andP;  However, all the signs are that this is changing.andM;OOP, in maturing, has three needs: standards for languages and classlibraries, the ability to 'live in' and work with existing hardware/softwareand, most significantly, a happy and stable marriage with the 'other side' ofsoftware technology, the database.andM;As Sam Goldwyn said, prediction is hard, especially when you're dealing withthe future.andP;  But three trends are already noticeable and can be expected toincrease in the 90s:andM;* De facto standardisation, as a few OOP languages are used a lot and theothers are marginalised.andP;  C++ looks certain to figure as will, I daresuggest, Smalltalk and perhaps CLOS and Eiffel.andP;  Meanwhile, standard classlibraries, such as those provided with Smalltalk, or NextStep, will becomeestablished, and will be usable from multiple languages (NeXT are pioneeringhere and the Object Management Group is also worth watching).andM;* Linked with this standardisation will be: support for all hardwareplatforms, 'callability' to and from conventional code and full support forlook and feel standards such as PM, Mac, Motif and Open Look.andP;  Developmentenvironments will increasingly allow multi-language coding and linking, basedon underlying object models.andM;* Closely impacting the above, object-oriented databases will graduallysupplant relational databases, initially in fields such as CAD and GIS(Geographical Information Systems).andP;  These will increasingly support asingle, uniform language for database definition, manipulation, querying andprogramming.andP;  Three main options identifiable today are: object extensions toSQL (eg Ingres 6.3), extended C++ (eg various US startups with large amountsof cash and sophisticated vapourware) and Smalltalk-like languages (egGemStone from Servio Logic and Vision from Insyte, which is already in useanalysing large quantities of financial data in Fortune 500 companies).andM;What's significant is that OOP languages already contain a lot of what isneeded in a database language.andP;  Married with database concepts such astransactions and data security, they happily become one.andP;  The result is oftencalled a 'persistent object system', because, from the programmer's point ofview, little changes, except for the convenient fact that the objects you aredealing with persist after the program has ended, and so can be shared withother programs.andM;A persistent object systems, built from standard OOP languages such as C++and Smalltalk, become widely available, OOP will have become a mature adultthat will surely transform the software world.andP;  The next ten years willdecide.andM;Postscript: sincere apologies to the 'parents' of OOP, Kristen Nygaard, OleDahl and their colleagues, for ignoring their significant work in applyingSimula 67 and, more recently, in developing Beta, an innovativemulti-paradigm language.andP;  I hope that the distinctive insights of the'Scandinavian school' can be translated into globally successful OOP productsin the 1990s, allowing the wider software community to benefit from theoldest and, arguably, the wisest body of experience available worldwide inbuilding industrial-strength systems using objects.andM;Richard Drake is Managing Director of Objective Computer Systems, aLondon-based consultancy specialising in object-oriented and databaseapplications, including GIS and financial systems.andP;  He was one of theorganisers of the third European Conference on Object Orientated Programming(ECOOP 89) last July.andO;</TEXT></DOC>