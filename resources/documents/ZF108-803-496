<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-803-496  </DOCNO><DOCID>08 803 496.andM;</DOCID><JOURNAL>Andrew Seybold's Outlook on Professional Computing  July 1990 v8n12 p12(3)* Full Text COPYRIGHT Andrew Seybold's Computer Insiders Inc.andO;1990.andM;</JOURNAL><TITLE>SAA - &quot;New World&quot; (part III). (third in a five-part series onIBM's Systems Application Architecture) (column)</TITLE><AUTHOR>Norman, James T.andM;</AUTHOR><SUMMARY>The Common Programming Interface (CPI) in IBM's SystemsApplication Architecture (SAA) defines the interface used byapplication programmers in the environment and is a step towardthe time when business professionals rather than data processingprofessionals will create the enterprise model.andP;  The two generalCPI categories are language definitions and application services.andO;SAA supports five third-generation languages: C, Cobol, FORTRAN,RPG and PL/I.andP;  A fourth-generation language based on Cross SystemProduct Version 3 and a new procedural language are also defined.andO;The services provided are intended to be consistent acrossplatforms and provide a common reaction to programming calls; thecommunications and database services are the two most important ofthe services currently defined.andP;  The AD/Cycle applicationdevelopment system shows the goal of consistency in SAAapplications; its design and use are discussed.andM;</SUMMARY><DESCRIPT>Topic:     SAAApplications ProgrammingProgram Development TechniquesApplications Programming InterfaceSoftware DesignCompatible SoftwareProgram Development ToolsProgramming Languages.andM;</DESCRIPT><TEXT>SAA--&quot;New World&quot;(Part III)andM;This is the third in a five-part series on Systems Application Architecture(SAA)[sup.1]; its components and its value.andM;In the initial article, I discussed the overall architecture of SystemApplication Architecture.andP;  In the second article, I spoke about the interfacewhich confronts the users, Common User Acess.andP;  This article focuses on theCommon Programming Interface, which defines the interface used by applicationprogrammers in an SAA environment.andM;Through time, programming has progressed from machine-level coding intoassembler languages and high-level languages.andP;  Today, the programmer has theavailability of tools such as generators and computer-assisted softwareengineering to develop applications.andP;  As we look out into the future,knowledge-based systems and enterprise models are techniques that hold clearpromise for improving the ability to take advantage of the hardwaretechnology costs while continuing to reduce the human costs associated withdeveloping solutions on computers.andP;  The Common Programming Interface is onestep along that broader road toward the day when the &quot;knowledge of businessprocess does not have to be transferred to data processing professionals toinitiate the application development process.andP;  Costs [can be] reducedsignificantly and error resulting from insufficient business processknowledge [can be] minimized.&quot;[sup.2]  This is the result of having businessprofessionals, not data processing professionals, create the enterprisemodel.andM;This element of the architecture is important because it is through the useof the common elements of the programming architecture that the applicationslayer or &quot;Red Layer&quot; activities are constructed.andP;  Many applicationprogrammers spend entire careers working with the items contained in theCommon Programming Interface.andP;  It consists of both languages and serviceswhich can be used to develop applications.andM;The Common Programming Interface (CPI) defines the interface used byapplication programmers in an SAA environment.andP;  It can be divided into twogeneral categories.andP;  The first category consists of the language definitionsand the second is the application services.andP;  These definitions providesolutions to customer requests for portability and consistency.andM;A major objective of the Common Programming Interface is to allow users todevelop applications with only minor changes to run in environments otherthan the one for which the code was initially developed.andP;  The advantages oflearning one set of language statements and one set of service requests fordevelopment on multiple platforms far exceed the costs of optimized systemsfor each environment.andP;  Most optimized systems of the past have been developedusing the assembler language of the processor at an increased developmentcosts.andP;  As the cost of technology drops, and the costs of manpower continuesto climb, the merit of higher level interfaces increases.andM;The trade press has recognized the value of portability but, to date, has notfocused on the value of having cross-system consistency.andM;Initially, IBM announced four operatiing environments for SAA: OS/2 EE forthe PS/2, MVS/CMS and VM/ESA for the System/370 mainframes, and OS/400 forthe AS/400 system.andP;  At the second major announcement of SAA in October, 1987,IBM introduced the concept of a Participating Environment.andP;  ParticipatingEnvironments use those elements of the SAA rules which make sense in theirrespective environments.andP;  The addition of Customer Information and ControlSystem (CICS) and the Information Management System (IMS) as systems whichcould support Programmable Work Stations (PWSs) as the user interface gaverise to the concept that migration from installed systems could beaccomplished through cooperative processing.andP;  (Cooperative processing will bediscussed in Part Five of this series.)andP;  Other examples of ParticipatingEnvironments include PC DOS, System/36 and System/38, and earlier releases ofMVS, VM, and OS/2.andM;As I said earlier, the Common Programming Interface (CPI) defines theinterface used by application programmers in an SAA environment.andP;  It consistsof two general categories: Language definitions and application services.andM;In the language area, five third-generation language have been listed as SAAlanguages.andP;  They are: C, Cobol, FORTRAN, RPG, and PL/I.andP;  Three are based onthe work of standards groups: The C language is based on American NationalStandard Programming Language-C(ANSI standard X3J11); COBOL is based on ANSIstandard X3.23-1989-1985, intermediate level; and FORTRAN is based on ANSIstandard X3.9-1978.andP;  RPG is based on RPG III, as implemented in theSystem/38, and PL/I is based on the PL/I compilers in TSO and VM.andP;  The intentis to build one set of language constructs which can be used acrossplatforms.andP;  One recent success of defining these languages as standard wasthat when the RS/6000 was introduced with its AIX operating system, C, COBOL,and FORTRAN were chosen as SAA compliant versions of the languages.andP;  Soprograms written in those languages can be compiled into the AIX OperatingSystem, and it will function as intended.andP;  Thus, we have the ability to makeone application function across not just four platforms, but now acrossseven.andM;Other language definitions include a fourth-generation language based onCross System Product Version 3.andP;  In this case, there is only the requirementto move the object code to the platform.andP;  No recompile is necessary to makethe code execute on different platforms as run-time modules arer used tocomplete the transparency of the system.andM;Also defined in a new procedural language.andP;  This combines the functions ofEXEC on VM, BAT files on PC/DOS, CLISTS and PROCS on the Systems/36 and 38,and Job Control Language (JCL) on the MVS system into a single proceduremanagement language.andP;  This is based on the REXX language developed originallyfor VM.andP;  Commands can be issued to a remote facility without regard to thetype of operating system installed.andM;A goal of the language specification is to simplify the requirement to learndifferences each time an additional type of processor is installed.andP;  Thisyields direct benefits to the user in the form of reduced training expensesand improved programmer productivity.andM;For the programmer, services are provided to assist with functions such ascommunications, presentation, and data handling.andP;  These services are built tobe consistent across platforms to provide a common reaction to programmingcalls.andM;Let's discuss two services, communications and database.andP;  Although there areothers difined today, such as presentation, query, and dialog, and more willbe defined in the future, I feel these to be the most important.andM;The communications interface provides a consistent application programmer'sinterface for writing applications that require the facilities ofprogram-to-program communication.andP;  This is obviously the base for cooperativeapplications where the completion of a single unit of work requires theservices of applications in two processors.andM;The communications interface makes use of the System Network Architecturelogical unit type 6.2 (LU 6.2) to provide the program with facilities thatstart and end conversations with a remote program; send and receive data;synchronize process between these programs, and notify the partner of errorsin the communication.andM;To make the job even easier, the set of facilities has been further dividedinto the starter set, which simply starts and stops conversations and sendsand receives data, and the advanced set, which adds the facilities tosynchronize and control a conversation along with the ability to modify thecharacteristics of the conversation.andP;  The starter set is specificallydesigned to be the absolute minimum number of calls that can supportcommunication.andP;  The calls chosen match the functions of a voice conversation.andO;There is an &quot;allocate&quot; (removing the receiver), an &quot;initialize conversation&quot;(dial the number of the called party), &quot;send&quot; (talk), &quot;receive&quot; (listen) and,finally, a &quot;deallocate&quot; (hang-up).andP;  The only additional function is an&quot;accept&quot; which enables receipt of calls from a remote program.andP;  Thus, thestarter set is very easy to learn, easy to use, and provides a productivebeginning on program-to-program communication for an application programmer.andM;This ease of use is also part of the complexity of the code to make theunderlying service work correctly.andP;  IBM, to date, has only shipped thecommunication interface in one of the platforms (VM).andP;  As the serviceroutines in the other environments complete development and pass rigoroustesting, they will be made available.andP;  The communication interface has a veryhigh development priority inside IBM.andM;Access to data bases is provided through Structured Query Language (SQL).andP;  Itallows the application programmer to define, retrieve, and manipulateinformation in a relational data base such as DB2 in MVS, SQL/DS in VM, orthe relational data managers of OS/400 and OS/2.andM;SQL is not a procedural language.andP;  The user specifies what he wants to do,and doesn't need to be concerned with how to do it.andP;  The syntax is simple yetpowerful.andP;  A single statement can perform the function of many lines ofconventional code.andM;SQL provides many built-in functions and arithmetic operations, thus freeingprogrammers from having to do immediate mathematical functions on the data.andO;SQL can be imbedded in traditional application programs, written in languagessuch as COBOL or FORTRAN, which can then be pre-compiled.andM;SQL is based on the relational data model, wherein various pieces ofinformation can be viewed in relationship to each other without predefiningthat relationship in the data structure.andP;  The decription of how data isstored or managed is not a part of the application.andP;  Therefore, storage andmanagement of data can be optimized to each environment without impacting theportability of the application or the application development process.andM;The specification for the SQL language has been developed with considerationfor the American National Standard Database Language--SQL, ANSI X3.135-1986.andM;As you can tell, consistency across operating system platforms was paramountin the thinking of the developers of the Common Programming Interface.andP;  Thedirection of that consistency is most visible in the system for applicationdevelopment called AD/Cycle.andP;  Here, not only is the code generationstructured and planned for, but also, the total life cycle of an applicationincluding requirements planning and maintenance is collected into a singlesystem surrounding a data base of data bases (called a repository) thatprovides a foundation for fully utilizing tools from IBM, and otherorganizations, such as the business partners of IBM, to help reduce thedevelopment cycle time.andM;The goal of the group that built the Common Programming Interface is to makeit easier to develop applications.andP;  AD/Cycle, along with the specificationsin SAA, are results of that goal.andP;  The prospect of building the foundation toenable knowledge based systems and enterprise modeling provides the valuewhich many customers have already started to gain.andM;Test Question:andM;What role do the standards organizations play in the Common ProgrammingInterface?andM;Answers to May Question: (Corrected)andM;What are the four layers of SAA?andM;Blue - User Interface - Common User AccessandM;Gree - Programmer Interface - Common Programming Interface</TEXT></DOC>