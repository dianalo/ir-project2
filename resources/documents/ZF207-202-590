<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-202-590  </DOCNO><DOCID>07 202 590.andM;</DOCID><JOURNAL>Dr. Dobb's Journal of Software Tools  May 1989 v14 n5 p50(12)* Full Text COPYRIGHT Mandamp;T Publishing Inc. 1989.andM;</JOURNAL><TITLE>TAWK: a simple interpreter in C++.andO;</TITLE><AUTHOR>Eckel, Bruce.andM;</AUTHOR><SUMMARY>A simple interpreter written in C++ called TAWK demonstrates howthe data-encapsulation features of this language can be usefulwhen reading and writing records.andP;  A user type-in program helpillustrate a simple application that uses the classes to searchthrough a database file for a last name.andP;  The name TAWK stands for'tiny awk' since it is sort of based on the 'awk' pattern-matchinglanguage in Unix.andP;  The program was written and tested on an MS-DOSsystem and compiles with Zortech C++ or the Glockenspiel-Advantagetranslater used with Microsoft C.andM;</SUMMARY><DESCRIPT>Topic:     C Programming LanguageProgramming InstructionType-In ProgramsInterpreters.andO;Feature:   illustrationtableprogram.andO;Caption:   The TAWK syntax. (table)(TAWK program listings). (program)andM;</DESCRIPT><TEXT>TAWK A Simple Interpreter in C++andM;Most microcomputer database management systems (DBMSs) read and write recordsin a &quot;comma-separated ASCII&quot; format.andP;  This is probably an artifact from thedays when Basic (which uses that format) was the only common tongue onmicrocomputers.andP;  Comma-separated ASCII files are useful not only because theyallow the records from one DBMS to be moved to another, but also because theycan be manipulated by using programming languages.andM;While Basic automatically reads and writes these records, other languagesmust be programmed to do so.andP;  In C++, this tedious task can be encapsulatedinto several classes; the user of the class doesn't need to worry about thedetails.andP;  In the first part of this article, two classes are created.andP;  Thefirst, class field, reads a single quoted and comma-separated field and makesan object from that field.andP;  The second, class csascii, opens acomma-separated ASCII file and reads records (as arrays of field objects) oneat a time, until the file ends.andP;  A simple appliction that uses the classes tosearch through a database file for a last name is presented.andM;Database files must often be manipulated or output in an organized way as a&quot;report.&quot;andP;  It becomes tedious and problematic to write and compile code foreach different report since nonprogrammers must often design reports.andP;  Acommon solution to a problem such as this is the creation of a &quot;scriptinglanguage&quot; specifically tailored to the task at hand.andP;  The second part of thisarticle is the creation of a simple language that outputs the records (tostandard output) in a comma-separated ASCII file according to a script in aseparate file.andM;The program is called TAWK for &quot;tiny awk,&quot; since the problem it solves isvaguely reminiscent of the &quot;awk&quot; pattern-matching language found on Unix(versions have also been created for DOS).andP;  It demonstrates one of thethornier problems in computer science: parsing and executing a programminglanguage.andP;  The data-encapsulation features of C++ prove most useful here, anda recursive-descent technique is used to read arbitrarily long fields andrecords.andM;The code was developed and tested on a DOS system.andP;  It compiles with ZortechC++ or the Glockenspiel/Advantage translator used with Microsoft C.andP;  Theprograms should also work on Unix, because all library calls are ANSI C andthe only class used that is not defined here is the streams class (which isincluded with every C++ package).andP;  The simple screen-manipulation commands(clear screen, reverse video) assume an ANSI terminal or a PC with ANSI.SYSloaded.andM;Object-Oriented TerminologyandM;When discussing object-oriented programming, it is helpful to review some ofthe terminology.andP;  Object-oriented programming means &quot;sending messages toobjects.&quot;andP;  In traditional languages, data is declared and functions actdirectly on the data.andP;  In object-oriented programming, objects are created,messages are sent to the objects, and the objects decide what to do with themessage (in other words, how to act on their internal data).andM;An object is an entity with internal state (data) and external operations,called member functions in C++.andP;  &quot;Sending a message&quot; means calling one ofthese member functions.andM;An important reason for organizing a program into distinct objects is theconcept of encapsulation.andP;  When data is encapsulated in an object, it ishidden away (private) and can only be accessed by way of a clearly definedinterface.andP;  Only class member functions and friend functions may modifyprivate data.andP;  Data encapsulation can clarify code by combining data in asingle package ith specific legal operations (member functions).andP;  Dataencapsulation is also useful in preventing bugs -- a working class doesn'tbreak simply because it is used in a new program.andM;Virtual FunctionsandM;Object-oriented purists will notice this program does not use late binding(by way of C++ virtual functions) and thus is not object-oriented int heSmalltalk sense.andP;  When a message is sent to an object in Smalltalk, theobject always decides what to do with the message (that is, the specificfunction to call) at run time, so the function address isn't bound to thefunction call until the call is actually made.andP;  Because most compilers bindfunction calls during compilation, run-time binding is often called latebinding.andM;C++ always performs binding at compile time, unless the programmerspecifically instructs the compiler to wait until run time by using thevirtual keyword.andP;  This feature allows subclasses (all inherited from the samebase class) to have identical function calls that are executed differently.andO;A collection of generic objects (all of the same base class) can bemaintained and all the &quot;legal&quot; messages for the base class may be sent to anyof the objects in that collection.andP;  The object figures out what to do withthe message according to what specific sublcass it is.andP;  This isobject-oriented programming in its true sense.andM;Most problems can benefit from the data-encapsulation features of C++.andP;  Itseems, however, that not every problem demands virtual functions.andP;  Theproject presented here is one of those cases.andP;  For an example of the use ofvirtual functions, see my article &quot;Building MicroCAD&quot; in theNovember/December 1988 issue of Micro Cornucopia (also available as part ofC++ source code library disk #1, available from Eisys Consulting for $15).andM;Reading C++ CodeandM;If you are a C programmer, here's a simple way to think about C++ while youare reading the code for this article: Objects look like structures, with afew bells and whistles.andP;  One bell is that you can hide some of the structuremembers--members are automatically hidden (private) unless you explicitlystate they are public.andP;  A whistle is the ability to include functions asmembers of the struct.andP;  Members of a class (a user-defined type) are accessedjust as you would access members of a struct--with a dot (or an arrow, if youhave a pointer to an object).andP;  One more whistle is that the programmer candefine the way the objects are initialized (by using the constructor) whenthey come into scope, and cleaned up (by using the destructor) when they goout of scope.andM;Example 1 shows a tiny class to introduce you to the basics of C++programming.andP;  class declarations are generally contained in header files withthe extension .hxx.andP;  Definitions are generally contained in files with theextension .cxx.andP;  The ATandamp;T Unix C++ chose the unfortunate extension of .C fordefinitions, and .h for declarations.andP;  This is fine on Unix, which iscase-sensitive, but causes problems while in DOS.andP;  Walter Bright's ZortechC++ compiler originally used .cpp.andP;  He later modified it to allow .cxx, whichis the style the Glockenspiel translator (previously marketed by Lifeboat asAdvantage C++) uses.andP;  I use the .cxx format because it works with bothproducts.andM;The Streams ClassandM;The streams class used here is an extremely useful class developed by BjarneStroustrup (the inventor of the language) to handle input/output.andP;  Itdefaults to standard input and standard output (the cin and cout objects,automatically defined when you include the stream .hxx header file), but canalso be used to read and write files.andP;  A buffer can even be made into astream object, and the same operations can be performed on that object.andM;The most complete written reference available for the streams class ischapter 8 of Stroustrup's The C++ Programming Language (Addison-Wesley,1986).andP;  This chapter is not exactly an exhhaustive example of streams.andP;  Oneof the beauties of C++ is that you always have access to a description (oftenadmittedly terse) of the operations available for that particular class--theheader file.andP;  By studying the header file, you can often get ideas for newways to use an object.andP;  Zortech C++ also has library source code available,which includes valuable comments on the use of certain functions (that's howI figured out many features).andM;Output in streams is accomplished with the operator you know from C as leftshift.andP;  C++ allows you to overload functions and operators to give themdifferent meanings depending on their arguments.andP;  When left shift is usedwith a stream object, it means &quot;put this stuff out to the stream.&quot;andP;  Example 2lists a short program to show the use of streams.andP;  Notice how streams allowsyou to string together a series of output statements.andM;Recursive DescentandM;A recursive descent algorithm is useful if you don't know how long orcomplicated a statement will be when you start looking at it.andP;  In programminglanguages, for example, recursive descent parsers are often used inexpression evaluation, because expressions can contain other expressions.andP;  Inthis project, the expressions aren't particularly complicated, but we don'tknow how long a string of text is going to be.andM;A central function is used when scanning an expression using recursivedescent.andP;  This function munches along and absorbs input until it runs into adelimiter that indicates a change in the type of input (white space, forexample, or a number).andP;  At this point, it might call another function to eatthe white space or to get a string of digits and turn it into a number.andO;Then, if the expression is finished, it will just return.andP;  If the expressionisn't finished (and here's the tricky part), it calls itself (that is, itrecurses).andP;  Every time it encounters a new expression within the one it'sevaluating, it recurses to evaluate the expression.andM;When solving more complex problems (such as a programming language), a set offunctions is used.andP;  Each function may call any of the others duringexpression evaluation.andM;At some point, the evaluation must bottom out.andP;  When this happens, thefunction performs some termination activities and then returns.andP;  As the stackunwinds from all the recursive calls, the tail end of each function callperforms some operation to store the information it was able to glean, andthen it returns.andP;  When the function finally completes, the expression hasbeen evaluated.andM;Recursive descent is used in three places in this project.andP;  The field class,which creates an object containing a single quote-delimited field, has arecursive function field::getfield() (shown in Listing Two, page 98) to readone character at a time, keeping track of the number of charactersencountered, until the end of the field.andP;  When the clos quotation mark isencountered, memory is allocated for exactly the right number of charactersand the function returns.andP;  AS it unwinds, characters are placed in theobject's data buffer.andP;  Using recursive descent means no restrictions areimposed on the field size (other than stack space).andM;The token class uses recursive descent in a more sophisticated way.andP;  When atoken object is created by handling it an input stream (by way of theconstructor function token::token(istream andamp; input)), it reads the inputstream until it has scanned a complete token.andP;  When the constructorcompletes, a new token has been created.andM;A token is a group of symbols that represent a single concept.andP;  A C++compiler uses a large number of token: [ means begin a scope, for means starta for loop, foo means a variable.andP;  TAWK has a much smaller number of tokens.andO;All tokens in TAWK are delimited by the &quot;@&quot; sign, which starts a new command.andO;When &quot;@&quot; is encountered, it is pushed back onto the input stream (for use inthe next token object) and the current token is completed.andP;  The centralrecursive-descent function for token is token::get_token(), shown in ListingSeven, page 100.andM;The class parse_array builds an array of tokens by recursively callingparse_array::buil_array() (shown in Listing Seven).andP;  This function makes anew token, then looks at the token to decide what to do next.andP;  The twoprograms (LOOKUP and TAWK) are built from several classes.andP;  Each of theseclasses will be examined.andM;The Class FieldandM;The declaration of the field class is shown in Listing One, page 98, and thedefinitions are in Listing Two.andP;  The field object doesn't control opening orclosing files.andP;  It is simply handed an istream from which it takes its input.andO;If it finds the end of input, it just makes an internal note (by setting itsend_of_file flag) and returns.andP;  It's up to the caller to check forend-of-file with the function field::eof().andM;The operatorandless;andless;() is overloaded so that a field object may be put to a streamoutput object.andP;  When this occurs, the data field is copied to the output.andM;The field constructor field::field (istream andamp; instream) initializes all thevariables to zero and sets the member istream input equal to instream.andP;  Thisallows field::getfield() to treat input as a global variable and to simplyget the next character.andP;  The last thing the constructor does is call therecursive-descent function field::getfield(), which recurses until it reachesthe end of the field.andP;  When the constructor finishes, the field is complete.andM;The function field::getfield() reads a character from the input stream.andP;  Ifit isn't an end-of-file character, it checks for terminators, which include acomma if not enclosed by quotation marks (determined by a special flaginfield) or a carriage return, which delimits the entire record.andP;  If noterminator is found, the function counts the current character and callsitself to get the next character.andP;  If a terminator is found, memory isallocated to hold the string (using the C++ dynamic-memory allocation keywordnew) and the string terminator \ 0 is inserted.andP;  As the function returns fromcalling itself, each character is inserted, from right to left, into thebuffer.andM;Memory is not always allocated for a field.andP;  The constructor for a fieldobject sets the data pointer to zero.andP;  If memory is never allocated, thedestructor will delete a null pointer, which is defined to have no effect.andM;The Class csasciiandM;The csascii (for comma-separated-AS-CII) class is shown in Listings Three(the declaration) and Four (the definition) (see page 98).andP;  The constructoropens the input file, counts the number of fields in a record, and closes thefile.andP;  It then creates an array of pointers to field objects, reopens thefile and reads in the first record.andP;  Every time csascii::next() is called, anew record is read until the end of the file.andM;The operator[]() is overloaded so the individual fields may be selected fromeach record.andP;  This function checks to ensure that the index is within bounds.andM;The method of opening files should be examined here.andP;  The line istreaminfile(new filebufandgt;open(filename, input); is a succinct way to create abuffer and open a file.andP;  The new filebuf creates a filebuf object (necessaryto open a file as an istream) on the free store and returns a pointer to thisobject.andP;  The pointer is used to call a member function, filebuf::open().andP;  Thepointer is also handed to the constructor of istream to create an objectcalled infile.andM;This is a clever piece of code, and nice for quick programming--I got it fromthe Glockenspiel/Advantage manual, so I suspect it's something John Carolancooked up.andP;  Unfortunately, it isn't robust unless you know that the fileexists.andP;  If the file doesn't exist on DOS machines, the system locks up.andM;A more robust way to open the files in this program is to replace theprevious code with the code in Example 3.andP;  Notice that in csascii::csascii(),the file is closed implicity by putting braces around the first clause in theconstructor where te fields are counted.andP;  When the istream object goes out ofscope, the file is closed.andP;  This is the only purpose for putting the bracesthere.andP;  Anytime you want to control the destruction of a local variable,simply put it in braces.andM;Text Field and csasciiandM;Listing Five, page 98, is a short program to show the use of class csascii.andO;The csascii object file is created by giving it the name of thecomma-separated ASCII file PPQUICK.ASC.andP;  (See Example 4 for a sample file).andO;Then the records are read one at a tile and field 0 is compared to the firstargument on the command line (presumably the last name of the persons in thedatabase).andP;  When a record is found, it is displayed on the screen (notice theuse of the ANSI screen-control codes).andP;  A flag called found is set toindicate at least one record is found.andP;  When no more matches occur, theprogram knows to exit (it is assumed the file has been sorted by the databasemanager).andM;The ANSI C library function strcmp() has been used here for compatibility.andO;To ignore uppercase or lowercase in the comparisons, Microsoft C providesstrcmpi() and Zortech provides strcmpl().andM;Notice how easy it is to use a class once it has been created.andP;  One of theadvantages of C++ is the ease of use of library functions.andP;  (That is, whenlibrary functions become available!)andM;TAWKandM;Table 1 provides the complete syntax for the TAWK language.andP;  You can see thateach TAWK command consists of an &quot;@&quot; sign and a single character (in the caseof @() and @andless;andgt;, the commands are @( and @andless; and the ) and andgt; are used by thefunction that reads the number, to find the end).andM;The execution of a tawkscript parallels the compilation or interpretation ofother programming languages.andP;  The tawkscript is parsed into arrays of tokenswhe the program starts up.andP;  An execution routine steps through the arrays andperforms actions based on the tokens to run the tawkscript.andM;Listing Six, page 100, is the declaration for class toekn and classparse_array.andP;  Listing Seven contains the definitions.andP;  Listing Eight, page102, is the main() function for TAWK.andP;  In Listing Eight the tawkscript isparsed into three different parse_arrays, one each foe the @preamble, @main,and @conclusion.andP;  These arrays are executed using the database file as input.andM;The Class tokenandM;Each token must be a particular type.andP;  The kind of information a tokencontains depends onwhat type it is.andP;  In TAWK, the possible token types are asfollows: a field number (for printing out a field or testing if a field isempty in an if statement), a string (simple text including nonprintablecharacters), parts of a consitional statement (if, else, and endif), or aphase change (which indicates a transition from @preamble to @main or @mainto @conclusion).andP;  Because a phase change is never executed but is simply usedto terminate the creation of a parse_array, it isn't a token in the samesense, but some form of communication was necessary and this seemed thecleanest.andM;The different types of tokens and phases are enumerated in tthe tokentype andphase declarations.andP;  The phase information is kept by the main program, buteach token contains a tokentype identifier.andP;  Because a token can never be afield number and a string at the same time, the data container in a token iscombined into an anonymous union (which is like a regular union only it hasno name).andP;  The union is used to save space.andM;A token also contains information about the level of the if statement.andO;Because if statements can be nested, each token that is an if, else, or endifmust have information about the nesting level.andP;  If the conditional evaluatesto false (that is, the field is empty), the interpreter must hunt throughtokens in the parse_array until it finds the else statement at the samelevel, and continue executing statements from there.andM;While token::get_token() is performing its recursive-descent scanning, itcalls several other functions, which are made private because they aren'tneeded by the user.andP;  token::get_next() gets a character and tests forend-of-file (which is an error condition, because an @end statement statementshould always terminate the tqwkfile).andP;  token::get_value() is used for the@() and @andless;andgt; statements.andP;  token::dumpline() is called for comments.andM;Listing Seven starts with a number of global variables that are declaredstatic.andP;  This means they cannot be accessed outside the file (this use of thestatic keyword is called file static).andP;  When the constructor is called, itestablishes the source of input characters (token-stream), sets the lenght ofthe string (which has been read so far) to zero, and begins the descent bycalling token::get_token().andM;The following are three possibilities in token::get_token():andM;1.andP;  The next character in the input stream is an @ and the length is zero.andO;This means you are at the beginning of a command and the next character willdetermine what the command is.andP;  In this case, a large switch statement isexecuted.andM;2.andP;  The next character is an @ and the length is not zero.andP;  This means youare in the middle of a string and a command is starting.andP;  In this case, the @is pushed back on the input stream (for use by the next token), space isallocated for the string, and the unwinding of the stack is started with areturn.andM;3.andP;  The next character is not an @.andP;  This means it must be plain text.andP;  Inthis case, token::get_token() calls itself to get more characters.andM;The Class parse_arrayandM;The class parse_array is a container class, because it is only used tocontain objects of another class (token).andP;  There is no way to know ho manytokens a parse_array will contain, so the recursive approach is used again.andO;The constructor initializes some variables and calls the recursive functionparse_array::build_array(), which keeps getting tokens and calling itselfuntil a phase change or the end of the input (an @end statement).andP;  At thispoint, it allocates space to hold all the tokens (which it has been countingduring the descent) and ascends, storing a token on each function return.andM;The individual tokens in a parse_array can be selected by using brackets ([])because the bracket operator has been overloaded inparse_array::operator[]().andP;  Because token has a stream function defined,tokens can be put directly to cout.andM;Executing a TAWKscriptandM;Listing Eight shows the main() function for TAWK.andP;  After the commandlinearguments are checked, the tawkfile is opened and three parse_arrays arecreated: one for the @preamble, one for @main, and one for the @conclusion.andO;The second command-line argument is used to create a csascii object.andM;At the beginning and end of the script execution, the preamble and conclusionparse_arrays are simply sent to standard output (cout).andP;  Because they canonly contain text, no other action is necessary.andM;The central loop executes the statements in the @main phase for each recordthe csascii object reads from the database file.andP;  After a record is read, thetype of each token in parse_array Amain is used in a switch statement tochoose the proper action.andP;  Strings are sent to cout and fieldnumbers send theselected field to cout.andM;In an if statement, if the selected field is empty in the current record, theparse_array index is incremented until the else token at the same level isfound.andP;  If the field is not empty, no action is taken (the followingstatements are executed).andP;  When an else is encountered, it means the ifevaluated to true, so the else clause is skipped over until the endif of thesame level is found.andM;Listing Nine, on page 102, is a make-file to make all the examples in thisproject.andM;Example TAWKscriptsandM;Listing Ten and Eleven show examples of tawkscripts.andP;  Listing Ten, page 102,reformats a file with six fields into one with five fields, combining thelast two fields.andP;  If both of the last two fields are not empty, a space isinserted between them.andM;Listing Eleven, page 102, shows the usefulness of the preamble andconclusion.andP;  It creates a tiny telephone list (which I carry in my wallet) onan HP LaserJet printer.andP;  The preamble and conclusion are used to send specialcontrol codes to the printer.andP;  The use of nested if-then-else statements isshown here: If field 3 exists, it is printed followed by a carriage returnand a test to see if field 4 exists, which is printed with a linefeed if itdoes (nothing happens if it isn't).andP;  If field 3 doesn't exist, field 4 istested and printed with a linefeed (otherwise only a linefeed is printed).andO;When everything is completed a reset is sent to the LaserJet.andM;If you want a further challenge, try adding a goto system to TAWK.andP;  You willneed to create a label command and a goto command.andP;  gotos can be executedfrom if-then-else statements.andM;ConclusionandM;The main() program for TAWK is actually quite small for what it does.andO;Because the details are hidden in the csascii and parse_array objects, youcan imagine creating a much more sophisticated program without losing controlof the complexity.andP;  This is typical of C++.andP;  Indeed, it was designed to allowone programmer to handle the same amount of code that previously requiredseveral programmers.andP;  The compiler supports the creation of large projects byhiding initialization and cleanup, and by enforcing the correct use ofuser-defined types.andO;</TEXT></DOC>