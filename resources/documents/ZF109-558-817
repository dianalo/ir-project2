<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-558-817  </DOCNO><DOCID>09 558 817.andM;</DOCID><JOURNAL>Dr. Dobb's Journal  Nov 1990 v15 n11 p149(8)* Full Text COPYRIGHT Mandamp;T Publishing 1990.andM;</JOURNAL><TITLE>DES revisited and the shaft. (Data Encryption Standard algorithm;C Programming)(column) (tutorial)</TITLE><AUTHOR>Stevens, Al.andM;</AUTHOR><SUMMARY>A C programming language implementation of the US National Bureauof Standards (NBS) Data Encryption Standard (DES) algorithm isdeveloped that conforms closely to the DES specification.andP;  The Cversion is a revision of a previously described program built fromthe NBS's FIBS PUB 46 document.andP;  The new version corrects problemswith the internal representation of data blocks.andP;  The code isvalidated through successful testing on three data examples.andP;  Thenew implementation also successfully executes a validation datafile from a public domain C implementation of the DES algorithmavailable on CompuServe.andP;  Details of the DES specification arediscussed.andP;  A simpler encryption/decryption algorithm is alsodescribed that resolves some problems in a previousimplementation.andM;</SUMMARY><DESCRIPT>Topic:     EncryptionStandardsAlgorithmsC Programming LanguageImplementationTutorialProgramming InstructionProgram Development Techniques.andO;Feature:   illustrationtableprogram.andO;Caption:   Data examples for DES testing. (table)Header file for Data Encryption Standard algorithms. (program)Functions and tables for DES encryption and decryption. (program)andM;</DESCRIPT><TEXT>DES Revisited and the ShaftandM;The indulgence to which I just subjected you is not as far-fetched as itseems.andP;  The Supreme Court ruling really happened.andP;  We columnists and productreviewers better watch our step.andP;  How far can this new attitude reach?andP;  If Idiscuss a compiler, editor, or debugger in this column and do not like it, myopinion becomes lawyer fodder.andP;  If the program lacks features, is my opinionthat the lack constitutes a deficiency factual or is it libel?andP;  Who will bethe first to test it?andM;How far do the implications of this decision reach?andP;  Is this opinionatedtirade of mine libelous to the Supreme Court itself?andP;  Wow!andP;  How'd you like tobe sued by a bunch of Supreme Court justices?andM;DES RevisitedandM;In September I published a C implementation of the Data Encryption Standard(DES) algorithm.andP;  I built it from the NAtional Bureau of Standards FIPS PUB46 document which describes the algorithm.andP;  I lamented the lack of avalidation suite of data that would allow me to determine if the algorithmwould comply with the specification.andP;  Without one I plodded ahead anyway.andO;The programs seemed to work.andP;  They did a dandy job of mangling a file beyondrecognition and putting it back in a usable format again.andM;Richard Feezel, a reader, sent me a message on CompuServe saying that he hadcompared the output from any programs wiht that of a hardware board thatimplemented DES, and the results were different.andP;  He spent a good bit of timelooking at the code and pointed out some likely problems.andP;  Richard did nothave the DES document, so he couldn't tell where the code was going astray orif the board and my programs were just different implementations.andP;  Later hetold me that he found public domain DES code and validation data onCompuServe.andP;  The DES hardware he was using passed the tests provided by thevalidation data.andM;That was good news.andP;  I really needed a validation data file.andP;  The DES code inthe download was a bonus that turned out to be a life saver.andP;  You willremember that the DES algorithm involves a lot of loops of permutations ofbit patterns.andP;  An implementor needs a sequence of data blocks that representthe interim steps that the algorithm takes.andP;  The input and output exampleswere helpful but only to tell if the program was working or failing.andP;  Nothingreally points you to the particular place in the procedure where hte firsfailue occurs.andP;  The DES algorithm goes into a loop where halves of a 64-bitdata block are permuted, swapped, and mangled with a value derived from thekey.andP;  The first error, no matter how small, is going to spread like amushroom.andM;The big help came from the program that the validation data file accompanied.andO;It is a public domain C program first implemented by James Gillogly and latermodified by Phil Karn.andP;  You can find it on CompuServe as file DES.ARC in DataLibrary 3 of the IBMPRO forum.andP;  It is no doubt available on other BBSs andonline services.andP;  The program, which was written some time ago, does not useANSI C conventions but the authors have included a version that compiles withTurbo C, warnings and all.andM;By following the progress of the Gillogly/Karn program and comparing itsresults to those of my program, I was able to corect the problems.andP;  Becauseof the data permutations in DES, I was sure that my implementation of thestructure of the algorithm was sound.andP;  It was encrypting and decrypting largefiles without losing any data.andP;  The problems had to do with the internalrepresentations of data blocks causing the programs to permute differentlythan they should.andP;  And so they were, most of them.andP;  I cleared up mostproblems by using a swapbyte function that changes the byte order of a longinteger from aabbccdd to ddccbbaa.andP;  The Gillogly/Karn program uses such afunction but only in the Turbo C version.andP;  Apparently the byte/wordarchitecture of the original machine does not order the bytes in the backwardview of 8- and 16-bit machines that has plagued me ever since I first saw aPDP-11.andM;There were a few other problems.andP;  I was not rotating the key schedule outputcorrectly.andP;  That was a bug that did not prevent the programs from encryptingand decrypting, but the encrypted data blocks were not compatible with theDES specification and probably not as secure.andM;David Dunthorn of Oak Ridge, Tennessee wrote that my observation about the8-bit value being preserved in the encrypted file means that my DES code wasnot working correctly.andP;  How true.andP;  The behavior I saw was a byproduct of theother problems and led me to a false conclusion.andP;  Mr. Dunthorn provided dataexamples which can serve to test a DES implementation.andP;  Example 1 providesthree of the examples he sent.andP;  The code in this month's column correctlyprocesses these examples as well as that in the downloaded validation dataand the other examples from Mr. Dunthorn.andM;Mr.andP;  Dunthorn continues:andM;The algorithm for DES is so interconnected that if a program does even a fewexamples correctly, it has a very high probability of being correct.andP;  A onebit change anywhere will yield an entirely different result, not somethingthat is just a little bit off.andP;  .  .  .  It is something of a challenge toget DES operating correctly even when working from the specification.andM;I'll say.andM;The DES specification says that the least significant bit of each byte of thekey may be for a parity bit or whatever you want it to be, and so thealgorithm ignores the least significant bit of the key.andP;  When my program'soutput did not match the output from the Gillogly/Karn program, I found thatthey were using the most significant bit for parity and I was not.andP;  The DESspecification is not concerned with the implementation problems associatedwith such things as files and key parity.andP;  The specification addresses howyou encrypt and decrypt 8-byte blocks of data with an 8-byte key.andP;  The paritycode in the Gillogly/Karn program is in an outer shell that manages the filesand key and calls the inner encryption and decryption code.andP;  The inneralgorithms comply with the DES specification.andP;  From this I realized thatdifferent complying DES programs that encrypt and decrypt data files will notalways be compatible.andP;  I added the odd parity logic to my program so that Icould encrypt and decrypt files interchangeably between my program and thedownloaded one to test the algorithm.andM;The documentation that came with the Gillogly/Karn program identified the DESCipher Block Chaining (CBC) mode, something that is not addressed in the NBS1977 FIPS PUB DES specification, although the program uses the CBC mode as adefault.andP;  That had me going for a while.andP;  In the CBC mode, the previousciphered block of 8 bytes is exclusive-orred with the current unencryptedblock before the program encrypts the current block.andP;  The other mode, whichbypasses the extra encryption, is the Electronic Code Book mode.andP;  That is themode supported by my programs.andP;  The Gillogly/Karn program implements the CBCmode outside of the DES code, so that is another area where implementationswill differ.andM;I mentioned in September that the DES algorithm has a shortcoming.andP;  Becauseit encrypts blocks of 8 bytes by mangling and scattering the bits all overthe block, an encrypted file must necessarily have a length that is amultiple of 8 bytes.andP;  The DES algorithm has no way to know the actual lengthof that last block.andP;  In some applications the precise end-of-file location iscritical to the use of the file.andP;  The Gillogly/Karn program records thelength of the last block in the last byte of the file.andP;  If the file is aneven multiple of 8 bytes, the algorithm adds a block with that information init.andP;  This approach solves the problem, but it is not a part of the DESspecification.andP;  As with the other external extensions, this solution producesa file format that would not be compatible with other implementations.andM;Probably the most significant difference between the two implementations isin their execution speed.andP;  The Gillogly/Karn program is faster.andP;  They do notimplement all the permutations by using tables the way I did.andP;  Rather, toimprove performance, they use certain characteristics of the table values tocode some of the permutations with shifts and masks.andP;  The cost for thoseperformance improvements is that the code is difficult to understand inplaces.andP;  Often I could not compare their interim results with mine becauseour approaches were different enough that there were no corresponding datapatterns to compare.andM;The &quot;C Programming&quot; column is as much about C code as it is about algorithms,so I did not attempt to incorporate any of the Gillogly/Karn performanceimprovements.andP;  If I were using DES in a small file environment, such as anelectronic mail application, I would probably use my programs because theywould be easier for me to understand and maintain.andP;  For applicationsinvolving large files I would adapt the Gillogly/Karn algorithm to gain itsperformance benefits.andP;  Or I would search out some of the assembly languageimplementations that are even faster.andM;I changed the structure of the programs to isolate the DES algorithms fromthe code that manages the key and the files.andP;  You will find the corrected andmodified DES programs here in Listing One, des.h (page 164), Listing Two,main.c (page 164), Listing Three, des.c (page 164), and Listing Four,tables.c (page 165).andP;  Compile and link everything into an executable programnamed &quot;des.exe.&quot;andP;  Instead of separate encrypt and decrypt programs, such aswe had in September, the des program handles both functions.andP;  You specify -eor -d as the first command line parameter to tell the program which operationto perform.andP;  The second parameter is the 8-byte key and the third and fourthparameters are the input and output filenames.andM;You can incorporate the DES functions into your own programs by includingdes.h and linking to des.c and tables.c.andP;  Call the initkey function with theaddress of your 8-byte key as an argument.andP;  Then call either the encrypt ordecrypt function once for each 8-byte block in the data you want to encryptor decrypt.andP;  Both functions accept a pointer to the 8-byte block where theinput to and output from the algorithm will go.andM;The CRYPTO ProgramandM;A reader named Dave called to say that crypto.c, my first example of a simpleencryption/decryption algorithm was not very good.andP;  It seems that heencrypted a file that had long strings of zero bytes.andP;  The crypto programencrypts and decrypts by simply exclusive-orring the 8-byte key with eachsuccessive 8-byte block of the data file.andP;  When the file has strings of zerobytes, the encrypted value is the key itself.andM;I designed crypto.c to encrypt ASCII electronic mail message text, whichnever has strings of zero-value bytes.andP;  I should have warned you about thatparticular behavior, however.andM;Another reader, Roberto Quijalvo of Plantation, Florida wrote to point outthat if your ASCII text file has strings of spaces and the key is also ASCIItext, the exclusive-or inserts the key into the text with a case change.andO;That one never bit me because my ASCII files go through a run-length encoder,which truncates trailing white space from lines and compresses other runs ofcharacters into escape sequences prior to encryption.andP;  That process was notfor encryption, though, but for compression minimize transmission time.andM;Mr.andP;  Quijalvo contributed some code +to internally mangle the key.andP;  He saysandM;A slight alteration in [the] code would make it more difficult to discoverthe key:andM;/* original code segment */ while (*cpl andamp;andamp; cpl [is less than] argv[1] +8)*cp2++*=*cp1++;andM;/* altered code segment */ while (*cpl andamp;andamp; cpl [is less than] argv[1] +8)*cp2++*= (*cp1 [is less than] 0X41 ? *cp1++: *cp1++ - 0X40);andM;By checking the key for a character greater than 0X40 ('@') and changing anyalpha character to a non-alpha character before using it, the key can besaved from experiencing such embarrassingly blatant exposure.andM;Francis Rocks of Berwyn, Pennsylvania reported the same problem and offered adifferent solution.andP;  Francis says,andM;A solution would be to eliminate hex 20 (blank) encoding with the followingcode replacing your second &quot;while&quot; construct:andM;while (*cp1 andamp;andamp; cp1 [is less than] argv[1] +8) { if (*cp2 ! = 0X20) { *cp2++ *= *cp1++; } else { *cp2++; *cp1++; } }andM;All three readers thought that crypto.c was less secure than it ought to be,which it is if you use it outside of a controlled data environment such asthe one I built the algorithm for.andM;These modifications are, of course, merely moves to beef up a simplealgorithm whose original intent was only to momentarily divert the merelycurious, which is the cause for encryption for most of us.andP;  In more hostilesurroundings if the invader knows that the text is encrypted, he or she mustdiscover the algorithm as well as the key.andP;  Because the exclusive-oralgorithm is a common one, the appearance of any repeated pattern, even themangled key, would tend to alert the spy to the possibility ofexclusive-orring the entire message with different permutations of thatpattern to see what would happen.andP;  Rocks's solution works only for thestrings of spaces.andP;  But if a file has repeated strings of other values, fixedpermutations of the key are going to be in there, and a codebreaker willexploit the patterns.andM;The crypto program was like a bicycle lock.andP;  It would deter the casualinterloper, but the serious thief has the tools and skills to get past it.andO;If you need to be that secure, you need something other than crypto.andM;Listing Five, page 166, and Listing Six, page 166, are encyrpto.c anddecrypto.c, two programs that eliminate the exposed key problems thatcrypto.c has with text files.andP;  I combined the run-length encoding algorithmof my text compresser and the encryption of the crypto.c program into thesetwo programs.andP;  Besides encrypting and decrypting, they compress runs ofduplicate characters into a simple escape sequence.andP;  The programs work onlywith ASCII text files.andM;The encrypto.c program translates any run of two or more duplicatedcharacters into 2 bytes.andP;  The first byte is the count of the run with themost significant bit set on.andP;  The second byte is the duplicated character.andO;Because the algorithm uses the most significant bit to identify a run-lengthcounter, it works only with 7-bit ASCII files and will terminate if it findsa most significant bit set in the input file.andP;  After encrypto.c compressesthe text, it encrypts it in blocks with lengths equal to that of the key'slength.andP;  The compression and encryption are done in one pass of the file.andM;The decrypto.c program reverses the compression/encryption process.andP;  Itdecrypts the characters and then decompresses them.andM;The crypto.c program in September used a fixed-length key of 8 bytes.andO;encrypto.c and decrypto.c take the key length that is entered andencrypt/decrypt blocks of that length.andM;I considered writing an identifying signature at the front of the encryptedfile so that the decrypto.c program could verify that it was being asked todecrypt a properly encrypted file.andP;  I rejected this idea because an outsiderwho intercepted the file might then know which program encrypted it.andP;  I thenconsidered encrypting the signature.andP;  I rejected that idea as well.andP;  Acodebreaker who already knew the algorithm would then have a known data valuefrom which to reverse-engineer the key.andM;While not immune to the attacks of a persistent codebreaker, the algorithmsin encrypto.c and decrypto.c are more secure than those of the simplercrypto.c program from September and far less complex than those of DES.andO;</TEXT></DOC>