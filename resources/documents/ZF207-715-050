<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-715-050  </DOCNO><DOCID>07 715 050.andM;</DOCID><JOURNAL>PC Magazine  Oct 31 1989 v8 n18 p337(4)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>The marriage of text and graphics, part 2. (Environments) (column)</TITLE><AUTHOR>Petzold, Charles.andM;</AUTHOR><SUMMARY>Vector fonts, which store each character as an outline defined bystraight lines and curves, offer better quality than bit-mappedraster fonts and can be easily manipulated because they areindependent of device resolution and point size.andP;  OS/2'sPresentation Manager interface supports vector fonts, but theseare too slow for displaying large amounts of text on the screen.andO;Another problem is that graphics programming interface (GPI)vector fonts look bad at common video display resolutions becausethey lack consistency and suffer from rounding errors.andP;  Graphicsprogrammers should limit the use of GPI vector fonts to shortstrings on the screen or on dot-matrix printers.andP;  Laser printerscan use either GPI vector fonts or the printer device fonts, butthe printer device fonts are preferred.andP;  Adobe Systems' PostScripttechnology solves many vector-font problems intelligently.andM;</SUMMARY><DESCRIPT>Topic:     Computer graphicsGraphics SystemsVector ScanFontsOperating EnvironmentsWYSIWYG.andM;</DESCRIPT><TEXT>Text display is the most important part of any graphics programming system.andO;In my last column, I discussed how the graphics environment of the OS/2Presentation Manager frees us from the typewriter tyranny of the fixed-pitchfont used in chamcter-mode environments and opens up the possibility ofdisplaying text as it was meant to be seen, in proportionally spaced fonts.andM;In the last issue,I also discussed the two types of fonts found in the .FONfont files shipped with OS/2 1.1.andP;  Raster fonts store each character as atiny bitmap, an array of bits that correspond to the dots or pixels that formthe character on the ouctsut device.andP;  Raster fonts must be designed forspecific point sizes and specific device resolutions, and manipulation of thefonts is extremely limited.andM;Vector fonts store each character as a series of straight lines and curvesthat defme the outline of the character.andP;  The GPI (Graphics ProgranimingInterface) algorithniically deten-nines the interior of the area and fillsit.andP;  Vector fonts are independent of point size and device resolution and canbe extensively manipulated.andM;The support of vector fonts in the Presentation Manageris a big step up fromMicrosoft Windows.andP;  Even if you wanted it to, Windows would have a lot oftrouble generating vector fonts, since its Graphics Device Interface (GDI)does not support some of the underlying graphics operations necessary torender them.andP;  (The only curves that GDI supports are ellipses.) Further,although GDI can fill areas defined by a series of straight lines, it cannotfill an area defined by straight lines and curves.andP;  The enhanced graphicscapabilities of the Presentation Manager GPI, on the other hand, make vectorfonts possible.andM;NOW FOR THE BAD NEWSandM;The problem is that it's not sufficient th GPI be able to render vectorfonts.andP;  As pres entry implemented, these fonts present tw major problems.andO;The first is perfor mance-the display of vector fonts is much slower than ofraster fonts.andP;  In a raster font, each character is represented by severalbytes of data.andP;  It's a simple maner for the GPI to copy these bytes to thescreen.andM;For a vector font, on the other hand, the GPI must fff st scale all thecoordinates that define the character, mathematically calculate the straightlines and curves that connect these coordinates, use a technique calledscan-line conversion to calculate the end coordinates of each hofizontal scanline that falls within the interior of the outline, and then draw theselines.andP;  That's just for one character, and this is a very slow process.andP;  Forthis reason, a Presentation Manager program must use raster fonts rather thanvector fonts for displaying any considerable arnount of text on the screen.andM;Figure I shows two Presentation Manager windows, each containing the firstparagraph of Mark Twain's The Adventures of Huckleberry Finn.andP;  The window onthe upper left uses the 10-point Times Roman GPI raster font.andP;  The one on thelower right uses a Times Roman GPI vector font scaled to about the same sizeas the raster font.andP;  On a 20-MHz 386 machine with a VGA, the text using theraster font was displayed almost instantaneously.andP;  The paragraph of textusing the vector font required 15 seconds to be displayed.andP;  You probablyhaven't seen text displayed so slowly since the days of 300-bpi modems!andM;These two windows also show very clearly the second major problem of GPIvector fonts.andP;  At common point sizes and conimon video display resolutions,GPI vecwr fonts look extremely ugly.andP;  Why is this so?andM;DUMB VECTORSandM;Font design is an art, and designing fonts for a low -resolufion rastermedium such as a video display requires lots of art, magic, and compromise.andM;Let's look at the raster font in Figure I first.andP;  (This is a rather poorTimes Roman font, which we can hope will ultimately be replaced in a laterrelease of OS/2.andP;  But, poor as it is, it can prove a point.) Do die strokeslook a hale thin to you? Perhaps they are.andP;  The designer of this particularfont (10-point Times Roman on a VGA) has chosen to make all the strokes 1pixel wide.andP;  Perhaps the strokes should be a little wider, maybe even 50percent wider.andP;  But that would require each stroke to be 1.5 pixels wide, andthat's clearly impossible.andP;  The only alternative would be 2-pixelwidestrokes, and this would make the font too dense.andP;  Nonetheless, there- is atleast some visual consistency in the raster font.andM;Now look at the vector font.andP;  It looks ugly because some of the strokes are 1pixel wide, some are 2 pixels wide, and some are 3 pixels wide.andP;  Extraneouspixels seem to appear on the curves of some letters.andP;  That's not consistency.andO;That's a total mess.andP;  What's going on here?andM;Remember that the definitions of the characters in a vector font are simply aseries of coordinates; there is no infoff nation that the GPI can use toscale the coordinates in an intelligent manner.andP;  (That's why the twouppercase M's in Mr.andP;  and Mark have different widths in their left verticalstroke.) What you see in Figure I are the rounding effors in coordinateplacement that result from generating from &quot;dumb vectors&quot; alone.andM;So, while it is very exciting to find support for vector fonts in the GPI, itis also very diswrbing w see that they aren't implemented very well.andM;As font size or resolution goes up, the vector fonts improve in appearance.andO;The rounding errors still exist, but they are much less visible.andP;  Figure 2shows two paragraphs of the same text printed on a 300-dpi PostScriptprinter.andP;  Both paragraphs were printed by a Presentation Manager programusing identical code, with one exception: for the rust paragraph, the programrequested the PostScript Times Roman device font.andP;  For the second paragraph,the program requested the generic Times Roman GPI vector font.andP;  The GPI fontis still not quite as nice as the PostScript font (there's a slight gaininessthat results from the rounding errors), but it's certainly acceptable.andM;To create one figure, I used an early version of a PostScript driver for thePresentation Manager that Microsoft is developing (it was acwally distributedin the final installment of the OS/2 Software Development Kit).andP;  ThePostScript driver generates PostScript code from GPI drawing commands.andP;  Thedriver was not quite bug-free, so I had to direct driver output to a file andmake a few changes to it before copying it to a PostScript printer.andM;It was interesting to look at the Ie that printed these two paragraphs.andP;  Thefile was over 400K long.andP;  About 2K of this file was required to print thefirst paragaph; the rest of the file was devoted W pinting the secondparagraph.andP;  That's a ratio of 200 to 1-muite a difference!andM;When you are displaying text from a Presentation Manager program to aPostScript printer using a built-in PostScript font, the amount of PostScriptcode passed to the printer is niinimal.andP;  The font is selected and scaledusing the PostScript fi ndfont, scalefont, and setfont commands.andP;  The textstrings are displayed using move to and show.andP;  But when using a GPI vectorfont, each character requires a series of move to,line to, and curvetocommands to define the outline of the character, followed by e of ill to fillthe interior.andP;  Not only is there a lot of data to be passed to the printer,but the printer itself requires much more processing time to display thetext.andM;Of course, you don't need a PostScript printer to print text using the GPIvector fonts.andP;  Any laser printer will do if you have a PM device driver forit.andP;  For non-PostScript printers, the device driver will probably have toconvert each character of the vector font into a bitmap and then convert thatinto a control sequence the printer can understand.andP;  Using the GPI vectorfonts will still be much slower than using the printer's built-in devicefonts, but die GPI brings PostScript-like capabilities to nonPostScriptprinters.andM;APPROXIMATING WYSIWIGandM;Pity the poor programmer who must make use of fonts in a PM program.andP;  Therules are fairly simple, but the implications are disturbing.andP;  Here are therules:andM;* For text on die video display, only the GPI raster fonts offer sufficientperfonnance and legibility.andP;  GPI vector fonts should be restricted to shorttext strings at 24 points or larger (for example, headlines in a desktoppublishing document).andM;* When printing on a dot matrix printer, the progam can use die printerdevice fonts and GPI raster fonts.andP;  As with the video display, GPI vectorfonts should be hmited to short text strings in the largff font sizes.andM;* When printing on a laser printer, die program can use the printer devicefonts and GPI vector fonts.andP;  The printer device fonts are prefeffed forfastest printing speed and best appearance.andM;Some programs that work with text (such as word processing and desktoppublishing applications) use the video display to show the user what thedocument will look like when printed.andP;  This is the whole idea behind WYSIWYG(what you see is what you get), and it is a very important goal in anygraphics system.andM;It's interesting to note how the defiffition of a VirySIWYG word processorhas changed over the years.andP;  At one time, any program that could show linebreaks onscreen coffectly when working with what would be printed indifferent fonts was called VirySrWYG.andP;  Next, Microsoft Word was considered&quot;real&quot; WYSIWYG because it displayed italics, boldface, underlining, andsubscripts on die screen.andP;  Certainly no one would claim today that Word is aWYSIWYG wordprocessor: it uses only one font in one size on the screen,regardless what it prints! There is no visual difference between a Courierfont and Times Roman font in a Word document displayed on the screen.andP;  (Wordnow has a &quot;preview mode&quot; that lets you see soTnething much closer to theprinted results, but you can't edit a document in preview mode.)andM;When Microsoft Windows was released, the WYSIWYG mantle passed to the Writeword processor, because it had access to all the Windows raster fonts.andO;(These are basically the same as the Presentation Manager raster fonts.) Butusers soon discovered that the screen display did not exactly show theappearance of pinted output.andP;  The video display can only approximate printerfonts.andP;  The program can calculate line breaks based on the amount of textthat the pinter can fit in one line, but it must use the Windows raster fontsto mimic the printer fonts.andP;  That's an approximation, and at times a verygross one.andM;Some people can accept this kind of discrepancy, contenting themselves withthe recognition that it is a natural limitation of CUtTent font and videodisplay technology.andP;  But it dfives me crazy.andP;  I want to see on the screenwhat I'll be printing on the printer, not in some noninteractive previewmode, but as a matter of course.andP;  True WYSIWYG-where the visual differencebetween the video display and the printed output is only a matter of deviceresolution-seems to me an obvious goal.andP;  Yet it is still not possible in thePresentation Manager if we observe the rules that I listed above.andM;In fact, achieving even the Windows Write type of WYSIWYG is more difficultin the Presentation Manager than in Windows.andP;  Windows incorporates a feature&quot;font mapping.&quot; Usually, a Windows program like Write obtains the names andsizes of all the fonts that can be used on a particular printer and liststhem for the user.andP;  When the user selects a font, the progra m can askWindows to use its font-mapping feaWre to select the screen font that mostclosely matches the printer font.andP;  Font mapping is absent from the GPI,however; the program must implement its own font-mapping algorithms.andM;A FANTASYandM;Let's engage in fantasy for a moment.andP;  Suppose the handling of vector fontsin the Presentation Manager were greatly improved.andP;  Suppose we have a systemin whichandM;* the display of vector fonts on the screen is as fast as the display ofraster fonts;andM;* the use of vector fonts on the printer is as fast as the use of theprinter's built-in device fonts;andM;* vector fonts are as attractive as video raster fonts or a pfinter's builandamp;infonts; andandM;* all the fonts you want to use are available as Presentation Manager fontfiles.andM;True WYSIWYG would then be a real ity.If a program ignored the printer'sbuiltin device fonts, all the fonts used on the screen and on the printerwould come from one source: the Presentation Manager vector font files.andO;Rather than spending your money on font cartridges or downloadable fonts foryour laser printer, you'd purchase vector font files for the PresentationManager.andP;  These could be used in any PM program on any output device.andM;This arrwigement would also solve another common font problem: the differencein character sets between screen fonts and built-in printer device fonts.andP;  AsI discussed here in connection with the PMASC program (August 1989), thePresentation Manager fonts support 16 differandM;.  ent ASCII and EBCDIC codepages.andP;  Although all printers used with PCssupport the ASCH character set, there is not much consistency in the use ofcharacter codes of 128 and higher.andP;  Using the Presentation Manager vectorfont files for both the screen and printer text would elim in ate thisproblem.andP;  Even symbol fonts, in which the character codes are mapped tovarious symbols instead of to alphanumeric characters, would be entirelyconsistent between the screen and the printer.andM;Isthis a fantasy, or is it widlin our grasp? And if it really is within ourgrasp, is it desirable?andM;A PAGE FROM POSTSCRIPTandM;Since PostScript almady uses vector fonts exclusively, it's well to considerhow Adobe has set about solving some of the problems involved in generatingtext from vector outlines.andP;  Taking a page from PostScript (so to speak,) mayhelp to improve the GPI.andM;One of the problems posed by GPI vector fonts is perfonnance, or speed.andO;Generating a character from a vector font outline requires extensivecalculations.andP;  As any PostScript-printer user knows, Adobe has not entirelysolved this problem.andP;  But PostScript implements a technique called &quot;fontcaching&quot; that helps considerably.andM;When PostScript needs to display text in a particular font, it uses its fontoutlines to generate bitmaps of the characters.andP;  These bitmaps are saved inmemory and are used subsequently to render the text on the printer page.andO;Often, when a program prints a document on a PostScript printer using two orthree fonts, the fist page takes a little time to print, because the printermust fist generate and save bitmaps that CO[Tespond to the characters in thefonts.andP;  But subsequent pages print much more quickly.andP;  This is theperformance benefit of font caching.andM;The GPI definitely needs font caching for its vector fonts.andP;  It's obviouslynot easy to implement in a multitasking environment where several programsmay be using a variety of different vector fonts, but it will helpperfonnance a lot.andM;Adobe has also solved the problem of rounding effors that occur whenconverting a vector outline into a bitmap.andP;  Adobe's fonts are acwally acombination of code and data that supplies &quot;hints&quot; required for accurate fontrenditions.andP;  Other font manufacwrers (such as Bitstream) have developedsimilar software technologies.andP;  There are products currently available forWindows and for laser printers such as the Hewlett-Packard LaserJet II thattake advantage of this technology to generate raster fonts froill vectoroutlines.andM;To make the GPI vector fonts truly useful, it will be necessary to bring suchtechnologies into the Presentation Manager.andP;  Does this mean that Microsoft orIBM must purchase an existing font-generation technology from Adobe orBitstream or must even develop its own? Not at all.andP;  Instead, thePresentation Manager must allow third-party manufacWrers to offer PM fontfiles that combine code and data to generate fonts from outlinesintelligently.andP;  All that the GPI need do is use the generated fonts withoutwonying about the acwal algorithms.andP;  This is an approach much in the spiritof object-oriented programming.andM;I want to see this vector font technology integrated in the PM in such a waythat it is entirely transparent to the user and doesn't generate raster fontfiles, as the solutions used with Windows cuffently do.andM;According to published reports in some of the trade magazines, Microsoft isalready considering something like this for a future update of OS/2.andO;(Microsoft has made no official announcement of its intentions.) It isconceivable that the GPI will someday be able to use third-party font filescontaining both code and data to generate fonts intelligently from vectoroutlines, much as PostScript does today.andP;  This would certainly be animportant improvement to the GPI and would move it to the foreftont ofgraphics programming systems while maintaining an open architecWre so thatthird-party manufacwrers can get involved.andM;THE ROLE OF THE PRINTERandM;While visiting fantasy land, I suggested that a program can obtain a trueWYSIWYG display only if it ignores printer device fonts and uses GPI vectorfonts for all screen and printer text.andP;  This assumes that these vector fontswill be properly implemented, of course.andM;Is this desirable? Probably not.andP;  Certainly it's very different from the waywe think of printers today.andP;  In recent years, we have seen large marketsevolve that offer a variety of font cartridges and downloadable fonts forHewleff-Packard laser printers, and downloadable fonts for PostScriptprinters.andP;  Adobe alone, for example, markets nearly 500 downloadable fontsfor PostScript printers.andM;There is a compromise.andP;  Suppose that for each font built into a laserprinter, for each font cartridge, and for each downloadable font, there werealso a GPI vector font file that could duplicate the printer fonts on thescreen.andM;This is not inconceivable.andP;  For example, Adobe currently supplies Windowsfont files that contain raster font definitions (in 10- , 12- , 14- , 18-,and 24- point sizes) that correspond to their downloadable PostScript vectorfonts.andP;  It seems reasonable that Adobe could one day supply GPI vector fontfiles that would allow you to use these fonts in any point size on thescreen.andM;This would give us the best of both worlds.andP;  Printers could be as fast asthey are now, but true WYSIWYG would be possible, because the GPI could usevector font files that render on screen what the printer device fonts printon the page.andM;What's important at this point is for font generation in the GPI to movebeyond &quot;dumb&quot; vectors to an intelligent combination of code and data that canrender fonts without rounding effors.andP;  Font caching must also be implementedto improve performance.andP;  Perhaps most importantly, the use of these fontsmust be transparent to the user.andP;  Printer drivers must transparently downloadprinter fonts to the printer, and video display drivers must transparentlygenerate screen fonts that duplicate these printer fonts.andM;I realize that this is a tall order.andP;  Yet I want GPI to be the best graphicssystem available on personal computers, and the adoption of an intelligentvector font technology is necessary to achieve this goal.andM;IMAGINING THE FUTUREandM;There are some who say that we are not yet ready for the accurate renditionof fonts on the video display.andP;  Current video displays are low-resolutiondevices.andP;  The VGA has only about 68 dots per inch, and even the IBM 8514/Ahas only 92 dpi.andP;  I would classify a 300-dpi laser printer as mediumresolution, and the 2,400 dpi common in professional typesetting as highresolution.andM;But we must be ready for the ftiWre.andP;  The normal rule is &quot;software followshardware.&quot; Advances in hardware occur before we have the software that takesadvantage of it.andP;  (We still do not have a version of OS/2 that takesadvantage of the 80386, for example.) I'd rather see software anticipatehardware.andP;  A good solid vector font technology built into the PM will beready for inevitable fuwre improvements in video display and printerresolution.andM;Perhaps raster fonts cannot be abandoned entirely just yet.andP;  Particularly forlow-resolution devices such as video displays, a raster font designed by ahuman being will always be more readable than a vector font.andP;  Font designerscan do certain things to trick the eye into thinking the characters aresmoother than they acWally are.andP;  Thus, the default system font used on thescreen should probably remain a handdesigned mster font.andM;But for a Presentation Manager progam that must prepare printed output,vector fonts are the way to go.andP;  Someday I want to hold a printed page to myvideo display and see two images of the swne document that differ only inresolution.andP;  Nothing short of this goal is acceptable.andO;</TEXT></DOC>