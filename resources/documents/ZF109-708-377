<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-708-377  </DOCNO><DOCID>09 708 377.andM;</DOCID><JOURNAL>P.C. Letter  Dec 16 1990 v6 n17 p3(2)* Full Text COPYRIGHT PCW Communications Inc. 1990.andM;</JOURNAL><TITLE>Windows OLE: Microsoft redefines the word &quot;object.&quot;andM;</TITLE><DESCRIPT>Company:   Microsoft Corp. (Product development).andO;Ticker:    MSFT.andO;Topic:     Data ManagementProduct DevelopmentObject-Oriented ProgrammingProgram Development TechniquesProgram Development ToolsSoftware PublishersGraphical User InterfaceEnhancements.andM;</DESCRIPT><TEXT>WINDOWS OLE: MICROSOFT REDEFINES THE WORD &quot;OBJECT&quot;andM;Microsoft has introduced yet another acronym into our lexicon: OLE, whichstands for Object Linking and Embedding.andP;  (In protest of the proliferation ofacronyms, I was considering whether I could encourage everybody to ignoreMicrosoft's acronym and use a different one: LEO, for linked and EmbeddedObjects.andP;  But it looks like OLE has already taken hold.)andP;  OLE is Microsoft'sinterim way for providing some of the benefits of Hewlett Packard's New Wave,without having to implement the system features that it took HP nearly fouryears to implement.andP;  In other words, OLE is a method for letting more thanone piece of software contribute data to a single document.andM;In HP's New Wave or other object-oriented systems, documents are all that theuser sees.andP;  the system is an agglomeration of different functions -- systemsutilities, application programs, system services -- integrated into a whole,any of which can act on any one document.andP;  In order to have that high orderof integration, though, every piece of the system has to work through somekind of centralized document (or object) manager, which is called the ObjectManagement Facility in New Wave.andM;With Windows as it is, that kind of centralized control is not possible (nordesirable in Microsoft's way of looking at things).andP;  So OLE doesn't bother;instead it is a method for application developers to put into their programssupport for certain predefined functions (mainly the ability to launch and belaunched by other applications).andP;  A program that supports OLE is capable bothof leaving a hole in any document it is displaying so that any otherapplication can display its own document inside that hole as well as of beingable to display its documents inside other applications' holes.andP;  Within thehole, the originating program is responsible for passing along theinformation the host program needs to image the entire document.andP;  The hostprogram uses the clipboard to get data updates from the originating programand uses Windows Dynamic Data Exchange (DDE) to notify the originatingprogram that it needs to start up and let the user work on its document.andO;When the user switches to another part of the document, the originatingprogram quits until it is called again.andP;  There is no persistent link betweenthe data in the host program and the originating program, unless the user&quot;Paste Links&quot; data from the originating document into the host document, butthat is a feature of DDE that has been in the field for some time and isalready supported by most Windows programs.andM;What is particularly fascinating is that, true to form for Microsoft, thisset of capabilities is not something the end-user elects to install, but thatthe software developer enables in their programs.andP;  A program's capabilitiesunder OLE are registered by the program in the WIN.INI (the file thatcontains Windows configuration information) when it is installed.andP;  so theuser doesn't have to install any extensions to Windows or do anything else toget the benefits of OLE, other than trying to figure out which programssupport the protocols.andM;Criticizing OLE is a little bit like saying you don't like apple pie: Hey,it's free and it's tasty.andP;  How could you not like it?andP;  But I have to admitthat it makes me nervous: the consistency of implementation of OLE isentirely dependent on the interaction between Microsoft and its softwaredevelopers.andP;  OLE has been developed by a special team inside Microsoft's ownapplications-development group with help from other key software companies,including Lotus (whose Notes program is one of the first programs to supportOLE).andP;  Support for the developers that want to implement OLE will come fromthe System group at Microsoft, unless you want to implement OLE in aMacintosh program, in which case you get support from a special group withinApplications.andP;  What makes me nervous is that, somehow, OLE is going to setthe foundation for the implementation of real-honest-to-goodness objects inthe file system of a future version of Windows, and yet the development andthe support are coming from different divisions of Microsoft and theconsistency of implementation will depend on a variety of developers who havenever before exhibited any inclination to be consistent.andP;  I keep wonderingwhether this sort of laissez-faire appoach to the development of a complex,integrated operating environment won't lead to some kind of mess in a fewyears.andM;And then there's the question of the Macintosh and cross-platformintegration.andP;  Microsoft is planning to implement OLE in its own Macintoshapplications, using Apple's own Apple Events as the transport mechanisminstead of DDE.andP;  OLE accomplishes something that apple doesn't seem tobelieve is a good thing to accomplish: unregulated direct communicationsbetween application programs.andP;  an apple Event is a direct communicationbetween programs, but Apple believes that any one such event should bedocumented and registered for all developers to see and understand andtherefore doesn't want to implement a system in which developers figure outtheir own ways of communicating, particularly for such an important stepforward as creating compound documents.andP;  Instead Apple has popularized thenotion, in its System 7.0, of Publish-and-Subscribe, which is a method ofusing the system to negotiate links between documents.andP;  Microsoft, on theother hand, believes in a kind of software developers' free market, where theinvisible hand of the software development community decides what is good orbadabout inter-document communications.andP;  so Apple is trying to predefine anyone legitimate interaction between programs; Microsoft is building up a kindof library of interactions: Paste Link provides for persistent links betweenspecific pieces of data in different documents; OLE provides for ways tointegrate different kinds of data into a single document.andP;  Indeed, it's nothard to imagine that Microsoft might eventually have something similar toApple's Publish-abd-Subscribe, that provides a way to make pieces of dataavailable from within a document to others users on a network.andP;  Quitefrankly, it's pretty hard to tell which approach is good or bad, sinceneither system has previously enabled the kind of functionality ofintegrating documents and we have no history to go by in judging the value ofeither approach.andM;Microsoft doesn't see this as a religious issue, since OLE, Paste Link, andPublish-and-Subscribe serve different functions and can technically co-exist.andO;It's not clear what Apple thinks, although one might presume that the companywould be reluctant to let Microsoft get anywhere near the hearts and minds ofits most loyal developers (the ones that do their original development workon the Macintosh and therefore tend to favor Apple's approaches overMicrosoft's in the design of their software).andP;  The real question, and the oneaddressed in the next story, is: &quot;What's the point of all this activity?&quot;andO;Are we trying to provide developers with new platform capabilities (as bothMicrosoft and Apple would suggest in their own ways) or is there a newopportunity for providing end-users with an entirely new kind of capability.andO;</TEXT></DOC>