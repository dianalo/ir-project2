<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-088-294 </DOCNO><DOCID>11 056 783</DOCID><JOURNAL>AI Expert  August 1991 v6 n8 p42(7)* Full Text COPYRIGHT Miller Freeman Publications 1991.andM;</JOURNAL><TITLE>An introduction to case-based reasoning. (artificialintelligence-based systems that use past experiences, or cases, tosolve problems)</TITLE><AUTHOR>Barletta, Ralph.andM;</AUTHOR><SUMMARY>Case-based reasoning is an artificial intelligence (AI)-basedtechnology that uses past experiences, or cases, to solve currentproblems, much like experts who solve new problems based on yearsof practical experience in specific fields.andP;  Rule-based expertsystems solve problems by taking input specifications, perhapsdeveloped from a question-and-answer dialog with the user, andchaining together the appropriate set of rules from the rule baseto arrive at a solution.andP;  Such systems cannot accommodate a newproblem within the same domain, however.andP;  Case-based systems solveproblems by taking input specifications and searching their casememory for an existing case that matches it; if no existing casematches the input, a case that is similar to it will be retrieved,although the retrieved case does not provide a complete solution.andO;Case adaptation is used to modify the retrieved case so that itmeets the input specification and provides a complete solution.andO;Case-based reasoning research is described.andM;</SUMMARY><DESCRIPT>Topic:     Knowledge-Based SystemsExpert SystemsSystem DesignNew TechniqueResearch and DevelopmentProblem SolvingArtificial Intelligence.andO;Feature:   illustrationchart.andO;Caption:   A case-based system searching its case memory. (chart)How a rule-based expert system solves problems. (chart)andM;</DESCRIPT><TEXT>When choosing a doctor, we tend to prefer practitioners who are older.andP;  Why?andO;Certainly a doctor fresh out of school has the latest information ondiagnoses and treatments.andP;  In fact, the young doctor probably has more bookknowledge on what is on the cutting edge than the more experiencedpractitioner.andP;  We feel more comfortable with older doctors because they haveseen and treated more patients who have had illnesses similar to our own.andP;  Inessence, we view the experiences of these doctors more in terms of how manycases they have handled than what procedures they know.andP;  Case-based reasoning(CBR) is a rapidly emerging AI technology that can use past experiences(cases) to solve current problems.andP;  The idea of reasoning from relevant pastcases is appealing because it corresponds to the process an expert uses tosolve &quot;new&quot; problems quickly and accurately.andM;Choosing a doctor illustrates the role of specific case experience in guidingexpert problem solving.andP;  The ability to retrieve and manipulate pastproblem-solving examples accurately is important for many domains: diagnosis,classification, prediction, planning, design, law, process control andmonitoring, advanced manufacturing, and configuration are good examples.andO;Despite the value of remembering past cases for problem solving, humans canforget what has worked in the past, or why, for that matter.andP;  This can leadto the &quot;reinventing the wheel&quot; syndrome so prevalent in government andindustry.andM;Computers do not forget.andP;  If we can get them to remember the right thing atthe right time, we can reap the benefits of the past successes and failuresof ourselves and others.andP;  This is the ultimate goal of the growing CBRresearch community.andM;THE CBR APPROACHandM;A rule-based expert system solves problems by taking an input specification(or developing one through a question-and-answer dialog with the user) andthen &quot;chaining&quot; together the appropriate set of rules from the rule base toarrive at a solution (Figure 1).andP;  Given the same exact problem situation, thesystem will go through exactly the same amount of work to come up with thesolution.andP;  (In other words, rule-based systems don't inherently learn.)andP;  Inaddition, given a problem that is outside the rule-based system's originalscope (for example, a new problem type within the same domain), the systemoften can't render any assistance.andP;  Finally, rule-based systems are verytime-consuming to build and maintain because rule extraction from experts islabor-intensive and rules are inherently dependent on other rules, making theaddition of new knowledge to the system a complex debugging task.andM;Case-based systems operate in a very different way (Figure 2).andP;  Given aninput specification, a case-based system will search its case memory for anexisting case that matches the input specification.andP;  If we're lucky (our luckincreases as we add new cases to the system), we will find a case thatexactly matches the input problem and goes directly to a solution, making itpossible to provide solutions to potentially complex problems quickly.andP;  If,on the other hand, we are not so lucky, we will retrieve a case that issimilar to our input situa'ion but not entirely appropriate to provide as acompleted solution.andM;The case-based system (or the human user) must then find and modify smallportions of the retrieved case that do not meet the input specifications.andO;This is called case adaptation.andP;  The result of case adaptation is a completedsolution, but it also generates a new case that can be automatically added tothe system's case memory for future use.andP;  (Learning is a basic part of a CBRsystem's architecture.)andP;  So, if the same problem is given at some futurepoint, the system will bypass the effort required the first time it solvedthe problem.andP;  In general, case-based systems are easier to build and maintainbecause the knowledge engineering task is reduced to the simpler problem ofdefining terms and collecting preclassified cases from the expert, and addingnew knowledge is as easy as adding a new case to the case memory.andM;ORIGINS OF CBRandM;Most people in the AI field consider Roger Schank's work in Dynamic Memory,published in 1982, to be the first work that described a memory-basedapproach to reasoning and gave an architecture for building that type ofreasoning system on a computer.andP;  His early ideas were expanded by some of hisstudents at Yale University, most notably Janet Kolodner of Georgia Tech,whose Cyrus system in 1983 was the first computer implementation of many ofthe themes expressed in Schank's work.andP;  Her early work in CBR was followed bysystems built by graduate students at Yale, Georgia Tech, and the Universityof Massachusetts.andP;  These systems demonstrated CBR in such varied domains aslaw, cooking, dispute and labor mediation, and medicine.andM;These CBR pioneers have been instrumental in defining the basic researchareas and problems now being explored by industry-research labs and graduatestudents at about a dozen schools around the country.andP;  As CBR research hasmatured, CBR industry applications are being built and fielded at Lockheed,GTE, DEC, Boeing, and Martin Marietta.andP;  Efforts to build commercial CBRshells are also underway at Cognitive Systems and Inference Corp., who haveannounced them as products or product add-ons in 1991.andM;The CBR research community has held annual workshops since 1987 to bringresearchers in the field together.andP;  Participation and interest has grown overthe past four years, and three of the workshops have published proceedingsthat are excellent reading for people interested in the field.andM;CBR RESEARCH ISSUESandM;Most CBR research falls into a few broad categories: case representation,indexing, storage and retrieval, adaptation, and learning and generalization.andM;Case representation.andP;  What is a case?andP;  How can the case be described to thecomputer?andP;  In its simplest form, a case is a list of features that lead to aparticular outcome.andP;  Some examples include the information on a personal-loanform and whether or not the loan was granted, and a patient history and theassociated diagnosis.andP;  In its most complex form, a case is a connected set ofsubcases that form the problem-solving task's structure; for example, thedesign of a circuit or an airplane.andP;  The designs of an airplane and a circuitare made up of subdesigns of the components that comprise the whole, each ofwhich could be considered a case unto itself.andM;Determining the appropriate case features is the main knowledge-engineeringtask in CBR systems, and this task mirrors a subset of what needs to be donein knowledge engineering a rule-based system.andP;  It involves defining theterminology of the domain and gathering representative examples (such ascases) of problem solving by the expert.andP;  The difference between rule-basedand case-based knowledge engineering is that automatic case-indexingtechniques drastically reduce the need to extract and structure specificrule-like knowledge from the expert--the most time-consuming part ofrule-based knowledge engineering.andM;Case indexing.andP;  A CBR system derives its power from its ability to retrieverelevant cases quickly and accurately from its memory.andP;  Figuring out when acase should be selected for retrieval in similar future situations is thegoal of the case-indexing process.andP;  Building a structure or process that willreturn the most appropriate case is the goal of the case memory and retrievalprocess.andP;  Case indexing processes usually fall into one of three kinds:nearest neighbor, inductive, and knowledge-guided, or a combination of thethree.andM;Nearest-neighbor approaches let the user retrieve cases based on a weightedsum of features in the input case that match cases in memory.andP;  In thesimplest approach to nearest-neighbor matching (in which all features haveequal weight), the system would prefer a case that matched on eight featuresto a case that matched on six.andP;  This approach is a good one to use if theretrieval goal is not well-defined or if few cases are available.andP;  Thebiggest problem with using this approach exclusively is that it can beimpossible to converge on a set of global-feature weights that willaccurately retrieve cases in all situations.andP;  Feature weights for mostproblem domains are context dependent; that is, a given feature may be moreor less important in determining the appropriate case to retrieve dependingon the values of the case's other features.andP;  In essence, each case shouldhave its own set of feature weights for determining the relevance of thatcase to a new problem.andM;Inductive approaches to indexing are a significant improvement overnearest-neighbor approaches in situations where the retrieval goal or caseoutcome is well-defined and there are enough examples of each type of goalwith which to perform inductive comparison.andP;  Using algorithms like ID3 andCART, the task is to determine inductively which features do the best job ofdiscriminating between the various case &quot;outcomes&quot; that need to be classified(for example, good loans versus bad loans) and to organize case memory withrespect to those induced features.andM;Inductive approaches have two advantages.andP;  First, they can automatically,objectively, and rigorously analyze the cases to determine the best featuresfor distinguishing them (providing the major system-building advanage overrule-based approaches).andP;  Second, the cases can be organized for retrievalinto a hierarchical structure that increases the retrieval time by only thelog of the number of cases rather than linearly.andP;  Retrieval time can be animportant factor when using libraries of cases numbering in the thousands.andO;To perform induction, however, the system needs a reasonable quantity ofcases to generate accurate discriminating features and it can take a lot ofupfront time to perform the inductive analysis, which is inductive indexing'sprimary drawback.andM;Knowledge-based indexing approaches try to apply existing knowledge to eachcase in the library to determine which features are important for retrievingeach case.andP;  This is the preferred approach to indexing cases if suchexplanatory knowledge is available and representable.andP;  The problem is that itis often difficult to codify enough explanatory information (usually in theform of a rule-based domain model) to perform complete knowledge-basedindexing on a wide range of possible case inputs.andP;  Hence, many systems useknowledge-based indexing in conjunction with other indexing techniques.andO;However, since some useful indexing knowledge is almost always available formost real-world domains, it is important for CBR systems to try to takeadvantage of it.andM;Case storage and retrieval.andP;  Once cases are represented and indexed, they canbe organized into an efficient structure for retrieval.andP;  Most case-memorystructures fall into a range between purely associative retrieval, where anyor allof the features of a case are indexed independently of the otherfeatures, and purely hierarchical retrieval, where case features are highlyorganized into a general-to-specific concept structure.andP;  Nearest-neighbormatching techniques are considered associative because they have noreal-memory organization.andP;  Discrimination nets are more of a cross betweenassociative and hierarchical because they have some structure to the net butgreater retrieval flexibility because they have a greater number of linksbetween potential indexing features.andP;  Decision trees are an example of purelyhierarchical memory organization.andM;The type of memory organization is related to the amount of knowledgeavailable to perform indexing and the retrieval needs of the system.andP;  Ifflexibility is required because one case library is being used for severalretrieval tasks, a more associative approach is often used.andP;  When theretrieval task is well-defined, a hierarchical approach is used because ofthe advantages in retrieval time the hierarchical approaches have overassociative approaches.andM;Case adaptation.andP;  The goal of case-retrieval is to return the most similarpast case that is relevant to the input situation.andP;  Case adaptation takes aretrieved case that meets most of the needs of the current situation andturns it into one that meets all of the situation's needs.andP;  Case adaptationcan also involve making minimal changes to the input requirements to meet aknown goal embodied in a stored case.andP;  It is difficult to define a singlegenerically applicable approach to perform case adaptation, becauseadaptation tends to be problem-specific.andP;  The adaptation needs and approachesfor one problem (design) may be different from the adaptation needs foranother (diagnosis).andM;Most existing CBR systems achieve case adaptation for the specific problemdomains they address by encoding adaptation knowledge in the form of a set ofadaptation rules or domain model.andP;  Adaptation rules are then applied to aretrieved case to transform it into a new case that meets all of the inputproblem's constraints.andP;  More recent applications have successfully usedpieces of existing cases in memory to perform adaptations.andP;  In problemdomains where it is difficult to codify enough rule-like knowledge to letbroad adaptation be done, using pieces of cases is the best, if not the only,alternative.andP;  And, even if cases can't be adapted by the computer, at leastthe system has provided the human &quot;adapter&quot; with a significant startingpoint.andM;Learning and generalization.andP;  Learning and generalization are important toCBR systems.andP;  Taking advantage of existing techniques for extracting usefulinformation from examples lets case-based systems avoid some of the mainproblems of rule-based approaches in gathering problem-solving orclassification knowledge and putting it to good use.andP;  Inductive andexplanation-based indexing techniques under development will let CBR systemsderive useful indexing features and structure them into an efficient memoryorganization.andP;  As cases accumulate, case generalization can be used to defineprototypical cases that embody the major features of a group of specificcases, and those prototypical cases can be stored with the specific cases,improving the accuracy of the system in the long run.andP;  In addition,inductive-case analysis research is being done to build domain theories inareas where even the experts don't understand how the underlying processes intheir domain work.andM;HOW DOES CBR COMPARE?andM;Let's compare CBR to other well-known and emerging techniques like rule-basedsystems, neural, networks, and pattern-recognition techniques.andM;Comparing, CBR to rules for classification tasks.andP;  CBR has several advantagesover rule-based approaches for classification.andP;  All the knowledge-engineeringtime spent manually extracting a complete and consistent set ofclassification rules from an expert is saved when using the CBR approach.andO;Instead, time is spent gathering representative cases from each of theclasses that need to be recognized and creating the appropriate set ofdescriptive features for doing the classification.andP;  Representing features ofthe domain and gathering representative cases for use in knowledgeengineering is also a part of building rule-based systems, so no appreciabletime is added to developing this aspect of the CBR system.andM;CBR saves time when structuring the acquired rules into a functioning system.andO;Even though expert-system shells work hard to provide tools to help structurerules, this effort can still be a difficult and time-consuming process,especially in complex classification domains.andP;  In Cognitive System's CBRshell, Re Mind, the inductive learning and indexing process automaticallybuilds the optimal decision structure for classification.andM;The difficulty in structuring rules into a working system also affects thelong-term costs of maintaining and updating the system.andP;  To add moreknowledge to a case-based system, all the user has to do is add more casesand let the inductive-indexing mechanism restructure the classification tree.andO;If for some reason a decision is made to change the set of categories thatneed to be recognized in an inductively oriented CBR system, the user merelyresets the classifications of the existing cases to the new classificationsand reruns the indexing mechanism.andP;  In a rule-based system, the developercould be faced with redoing the entire system from scratch.andM;CBR also beats rule-based approaches in explaining and justifying theclassifications made by the system.andP;  Since expert-system rules are adistillation of the information found in examples, a rule-based system canonly report to the user the chain of rules that led to the determination ofone class or another--the original examples are not used.andP;  A case-basedsystem can justify its classification not only by describing the generalrules that indicate one class over another (generated through indexingprocess) but also by showing the examples that support the index used.andP;  Incases where the classification cannot be made definitively, letting the userlook at real examples can help make a final categorization.andP;  A case-basedsystem also lets the user store useful classification information in casesthat cannot be used by the computer for either case indexing or rule firing(like pictures, sound, and free-form text) but can be used by a human.andM;Comparing CBR to neural nets and pattern recognition.andP;  Pattern-recognitiontechniques have been used to do classification tasks for years.andP;  The basicapproach involves taking a set of examples and counter-examples of the&quot;target concept&quot; (good and bad loans) and attempting to create a mathematicalfunction for determining an unseen input's class.andP;  Many kinds ofpattern-recognition algorithms exist, but the most popular are linear orquadratic discriminants (found in commercial software like SAS) and Bayes(probabilistic) classifiers.andM;Because the final outputs of linear and quadratic discriminant approaches aremathematical functions, they only work well when the features of the inputexamples are described with numbers.andP;  This restriction limits the usefulnessof pattern-recognition approaches in domains that have important nonnumericfeatures.andP;  Bayes classifiers have a well-known problem: they require completeprobability assessments for all of the dependent variables in the sample.andO;For most real-world domains, this is hard to accomplish.andM;Even if you can build an accurate discriminant function, it can only be usedto make a black or white decision about a new example's classification.andO;Supporting evidence of examples is unavailable, preventing the user frommaking further assessments based on direct comparison with past precedents.andO;Inadequacies in pattern-recognition approaches have been the prime motivatingfactor in the development of the symbolic machine learning and neural-networkapproaches of recent years.andM;Neural networks have demonstrated interesting capabilities that warrant theattention they are receiving.andP;  Neural networks can produce accurateclassification results comparable to symbolic inductive approaches--sometimesbetter, sometimes worse.andP;  They are also very good at handling &quot;noisy&quot;data--data that has errors in it.andP;  Finally, neural networks, once they aretrained, can classify new examples quickly, making them well-suited forreal-time applications.andM;Despite these advantages, neural nets have many disadvantages that make themdifficult or impractical to use on a broad spectrum of classificationproblems.andP;  Representationally, it can be impossible or awkward to define thefeatures of an example by a vector of either Boolean or numeric values.andP;  Manyproblems contain complex examples that are described by an internal structureof relationships rather than a flat list of features.andP;  Computationally,neural networks require two to three orders of magnitude more data and CPUtime to arrive at an accurate network configuration.andP;  For complex datasets,this can mean weeks of CPU time to train a single network.andM;The structure of a neural net has a huge impact on its ability to classifythings.andP;  The network builder has many degrees of freedom in defining how thenetwork is structured; he or she can alter the number of nodes, theconnectivity between nodes, and the number of layers of nodes in a network.andO;All this flexibility presents a problem: no defined methodology as yet existsfor designing the structure of a network to the needs of a given problemdomain; it is still very much an art form rather than a science.andP;  This forcesthe system developer to try different network structures to find an optimalsetup.andP;  Coupling this trial-and-error process with the high computation timerequired to train a single network only adds to the problem of developingclassifiers with neural nets.andM;Even if a satisfactory network structure is found, the examples represented,and the network trained, you won't be able to understand why a particularclassification is derived when a new example is presented.andP;  A good way tointerpret what the network has learned doesn't exist; al you have are thenodes, links, and weights.andP;  For most domains, people want to know what thebest classification is and the reasons why the example fit theclassification.andP;  Neural nets have no way of providing the user with thisvital information (although research is being done in this area).andM;The inductive-indexing capabilities in CBR systems provide several majoradvantages over neural nets and pattern-recognition techniques.andP;  Inductivesystems can represent and learn from a wider range of feature types thaneither neural nets or pattern recognition.andP;  The ability to use a richerfeature set for describing examples makes them at least as accurate or moreaccurate than other approaches.andP;  The number of examples and time required totrain an inductive system is less than that required for pattern recognitionand much less than neural networks.andP;  The output of the inductive system isreadable by a nontechnical person, eliminating the need for specializedtraining to interpret the results.andP;  Finally, case-based systems can be usedto perform more tasks than just classification; neural networks and patternrecognition cannot.andM;A recent study established an empirical benchmark of inductive learningagainst neural networks and pattern recognition techniques.andP;  Twoinductive-learning techniques were compared with two neural-networkapproaches and four pattern-recognition approaches on five datasets ofreal-world data.andM;Inductive techniques were slightly more accurate than neural nets and weremuch more accurate than pattern-recognition approaches.andP;  Induction andpattern recognition used about the same amount of processing time, and bothwere much faster than neural networks.andP;  The output of inductive systems wasmore readable than either neural networks or pattern-recognition techniques.andO;These research results support the ease of use and power of inductiveapproaches, in general, over other techniques.andM;Comparing CBR to rule-based systems on complex synthesis tasks.andP;  Rule-basedsystems have been used to solve complex, real-world problems in planning,scheduling, and design.andP;  They have been successful in these problem areas forthree reasons: the experts understood the application domains, the underlyingdomain behavior was representable, and the problem was tractable enough tosolve from scratch.andM;Rule-based approaches solve difficult problems like planning or scheduling bysynthesizing them from scratch.andP;  This is computationally expensive forreal-world problems, making it difficult to explore alternative plans orschedules because they take too long to create with a &quot;from-scratch&quot;approach.andP;  The problem is not that rule-firing in expert systems isinefficient, but that constructing complex plans from scratch involves a lotof search (rule firings), requiring the system to consider thousands ofalternatives while generating a single plan.andP;  That's why people try to avoidbuilding plans, designs, and schedules from scratch.andM;What is needed is a way to &quot;jump start&quot; the system with a workable plan thatis then modified by the rules to find the solution via CBR.andP;  CBR systemssolve complex problems like planning, scheduling, and design by finding asimilar, successful past plan, schedule, or design, and modifying it to meetall the current problem's needs.andP;  This assumes that the system has a decentset of cases from which to work.andP;  If you can't derive any value from pastplans or designs, CBR is nto a good idea.andP;  Fortunately, not many domains fitthis description.andP;  Even in design, where the emphasis is on innovation, workis done by working from what has been successful in the past.andM;Since most retrieved cases that the system could start with will not meet theexact needs of the current situation, automatic case adaptation is a keyissue in using CBR.andP;  Most CBR approaches rely on adaptation rules to doadaptation.andP;  This is one area where potential synergy could be realized bycombining CBR with rule-based systems, and some researchers are exploring thebest ways of combining the two approaches.andM;Case-based approaches work well in domains that are not well understood,because the system doesn't need to know why something worked in the past.andP;  Itneeds only to recognize a future situation in which the plan could be used.andO;Case-based systems can often finesse some of the difficult representationaland behavioral modeling needs of a domain that make using rule-basedapproaches impossible because the rules are not known.andP;  In fact, theinductive techniques inherent in case-based systems can, in time, facilitatethe process of &quot;understanding&quot; the domain by performing analysis that canshow previusly unknown relationships between the doman features.andM;Many complex problems exist that neither case-based nor rule-based systemscould fully address alone, such as economic or political analysis, buildingthe space shuttle, or handling the logistics of moving and maintaining troopsand supplies.andP;  But even on these problems, CBR can at least assist humanplanners in taking advantage of what has happened before.andM;REAL-WORLD APPLICATIONSandM;CBR systems are being deployed in a variety of areas in business andmanufacturing.andP;  An example CBR application that Cognitive Systems built andfielded using its CBR shell provides a good illustration of thesystem-building and performance differences between a case-based and arule-based system performing the same taks.andM;The Prism system.andP;  Large banks receive up to 2,000 telexes per day,describing more than 100 kinds of bank transactions that need to occur.andO;These telexes need to be read, classified, and routed (in real time) to theappropriate bank department.andP;  This clasification and routing process isnormally done by the bank staff.andM;Cognitive Systems was contracted to automate classification and routing.andO;Since most of Cognitive Systems' experience to that point was in developingrule-based systems, a rule-based telex classifier called Prism was developed.andO;The original system took about one year to build.andP;  Cognitive then went to asecond bank, who also contracted them to build a rule-based version of thetelx classifier for its message traffic.andP;  It took four months to build thesecond rule-based classifier.andP;  The rule-based system could process telexes intwo to seven seconds and achieved a general classifying accuracy on theentire telex range of 72%.andM;As an experiment, Cognitive decided to reimplement the second version of thetelex classifier using its newly developed CBR shell.andP;  The system'scase-based version was developed in about two weeks.andP;  It could processtelexes in 0.19-0.25 seconds (an order of magnitude faster) and achieved aclassifying accuracy of 77%.andP;  Upon receipt of these results, the customerdecided to replace the system's rule-based version with the case-basedsystem, because it was faster, more accurate, and easier to modify and updatethan the rule-based system.andM;The Clavier system.andP;  Lockheed and other aerospace companies use compositematerials (such as Graphite-Epoxy) to make parts for airplanes, satellites,and missiles.andP;  These composite parts must be cured in an autoclave, a largepressure- and temperature-adjustable convection oven, for four to eighthours.andP;  Since curing time is long and schedules are short, as many parts aspossible must be put into the autoclave in each run.andP;  Yet for all the partsto be cured properly at the end of the eight hours, they must all heat up atthe same rate.andP;  The heat-up characteristics of a given part are affected notonly by the thickness and composition of that part but where it is positionedin the oven (air current inside the autoclave create pockets of cooler andwarmer spots in the oven).andP;  The cost of the parts can run into the thousandsof dollars, so accuracy and consistency in configuring parts in the autoclaveis important.andP;  The main difficulty in automating this kind of task is thatthe knowledge used to configure parts in the oven is not well understood.andM;The only way to know if a given configuration will work is to run it.andO;Because this task was oriented toward trial and error, the human experts usedpictures of past successful configurations to help them load the autoclave.andO;This was a tailor-made application for CBR.andM;Lockheed built a case-based system called Clavier to configure compositeparts inside an autoclave for maximum performance and throughput.andP;  This taskwould have been difficult to perform from scratch using a rule-based approachbecause of the difficulty in representing and understanding the impact of allthe spatial issues in configuring an autoclave load.andP;  By using successfulpast cases, the system could circumvent representing the spatial informationat the detail level necessary to perform the configuration task from scratch.andO;All it needed to know was if a particular part were in a particular place inthe autoclave in a prior layout that was successfully cured.andP;  The spatialknowledge used by the human experts to configure loads was defined in eachcase.andP;  Clavier is currently in use at Lockheed's Sunnyvale Plant.andM;A NEW ROADandM;Your doctor of 20 years might not know all the tricks that the recent medicalschool graduate knows, but sometimes when you don't knows where that pain iscoming from, experience is everything.andP;  Like choosing a doctor withexperience, case-based reasoning is a very appealing technology because itcorresponds to the process expert uses to solve problems.andP;  In real-worldsituations, not only is CBR possible, it is often a better, faster, and moreaccurate way to find solutions.andM;SUGGESTED READINGandM;Schank, R., and C. Riesbeck.andP;  Inside Case-Based Reasoning.andP;  Hillsdale, N.J.:andO;Lawrence Erlbaum Assoc., 1989.andP;  Provides a good overview of work in thefield, covers some of the major techniques used to perform aspects of CBR,and provides LISP programming examples that can be tried by the reader.andM;CBR workshop proceedings.andP;  Menlo Park, Calif: Morgan Kaufman, 1988-1991.andO;Covers CBR research work of universities and industry AI labs.andM;Weiss, S.M., and I. Kapouleas.andP;  &quot;An Empirical Comparison of PatternRecognition, Neural Nets, and Machine Learning Classification Methods.&quot;andO;Proceedings of the 11th IJCAL, 1989.andP;  One of several good papers in theproceedings that covers the comparison of neural nets, pattern recognition,and symbolic induction.andM;Ralph Barietta is director of CBR at Cognitive Systems Inc., where he is incharge of technical development and support of Re Mind, Cognitive Systems'CBR shell.andP;  Prior to joining Cognitive Systems, he worked for four year asprincipal investigator of a machine-learning and CBR research project atLockheed's Al Center in Menlo Park, Calif.andO;</TEXT></DOC>