<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF107-805-316  </DOCNO><DOCID>07 805 316.andM;</DOCID><JOURNAL>PC Magazine  Nov 28 1989 v8 n20 p309(4)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>Providing program access to the real DOS environment. (Lab Notes)</TITLE><AUTHOR>Simon, Barry.andO;AttFile:   PCMAG\V08N20\FINDENV.EXE;2 Program:  FINDENV.EXE  Locate DOS environment.andO;PCMAG\V08N20\FINDENV.PAS;0 Program:  FINDENV.PAS  Locate DOS environment.andM;</AUTHOR><SUMMARY>Sophisticated programming techniques can give applicationscomplete control over the DOS environment as well as letting theuser customize its variables.andP;  The three main DOS environments arethe active environment, a block DOS keeps in memory that storesvital operating data; the program environment, a copy of theactive environment which DOS' COMMAND.COM passes to eachapplication when it loads; and the root environment of the DOSshell, set up when the system boots.andP;  A Turbo Pascal program, thatlets applications locate the active environment is presented.andP;  Itfinds the active copy of COMMAND.COM and uses this to locate theactive environment, computing the amount of space used and thatstill available in the block.andP;  The algorithm for FINDENV isdependent on the DOS version in use.andM;</SUMMARY><DESCRIPT>Topic:     Program Development TechniquesTutorialMSDOS.andO;Feature:   illustrationprogram.andO;Caption:   FINDENV.PAS (program)andM;</DESCRIPT><TEXT>Providing Program Access to the Real DOS Environment Most PC users havelearned how to use the PROMPT command to remove the humorous greeting theoffice wag stuck into their DOS environment, and nearly everyone with a harddisk has used the PATH command to tell DOS which subdirectories to search forexecutable programs and batch files.andM;Power users who have enough memory to make use of RAMdisk often copyCOMMAND.COM to it as part of their AUTOEXEC.BAT boot-up procedure, and use.andM;SET COMPSEC=d:\COMMAND.COMandM;to speed the processes of &quot;shelling out&quot; to DOS from application programs andreloading the transient portion of COMMAND.COM when needed.andP;  As discussed inRichard Hale Shaw's two-part PC Lab Notes of March 31 and April 14, 1987, youcan also use the SET command to insert strings into the environment from abatch file or from the DOS command line, so programs can access theseuser-defined strings.andM;Programmers, however, want to do more than simply customize the initial DOSenvironment variables.andP;  They'd like to give their programs control over theenvironment, letting them modify items such as the system path and prompt.andO;Unfortunately, programs do not have such access to the active environment.andO;But where there's a will there's a way, and the aim of this Lab Notes is toshow you how to do it.andP;  Let's start by examining the relation between threedistinct DOS &quot;environments.&quot;andM;THE THREE ENVIRONMENTSandM;DOS keeps a block in memory, the Master Environment Block, in which it storesthe the current path, prompt, comspec, and so forth.andP;  This memory area isalso affected by SET commands issued from the DOS prompt or through batchfiles.andP;  I will call this the real or active environment.andP;  If you follow therules, this area is not accessible to executing programs.andM;Before a program loads, COMMAND.COM passes a copy of the active environmentto it.andP;  I will call this copy the program environment.andP;  A program is giventhe address of this second environment block in a word at offset 2C of theprogram's PSP (program segment prefix).andP;  Legally, the program can access onlythis copy of the real environment.andP;  Any changes a program makes in itsprogram environment block are transitory, however; when the program exists,that block is freed up.andM;The third environment, which I'll call the root environment, is theenvironment of the initial DOS shell that is set up when the system boots.andO;For most people, the root environment is and remains identical to the activeenvironment.andP;  But if you shell out of a program or run DESQview or Carousel,or if you explicitly run a shell of COMMAND.COM then the root environmentwill be different from the active environment.andM;The distinction is important because it is the active environment, ratherthan the root, that gets passed (as a copy) to a program and is also used byDOS for the prompt and path.andP;  It is the active rather than the rootenvironment that you want your programs to be able tto find and access.andM;One traditional &quot;folk method&quot; of locating the environment uses the fact thatcertain interrupts point to the sector containing COMMAND.COM.andP;  By examiningthese interrupts you find COMMAND.COM, which in turn leads you to itsenvironment.andP;  Unfortunately, however, even if you ignore the possibility thatsome other program might have stolen the interrupt that you are examining,this method locates the root COMMAND.COM and hence the root environmentrather than the active environment that is your goal.andM;To illustrate the method I use instead, I've written a Turbo Pascal program,FINDENV.PAS, which is listed in Figure 1.andP;  This program locates the activeenvironment and computes both the amount of space being used and the amountof space that is still available in the block.andP;  The code shown here is from ashareware program called BATUTIL, which will be released shortly by my firm,CTRLALT Associates.andP;  This program makes extensive use of the real environmentto store information.andP;  Although its output is admittedly not very visuallystimulating, the information supplied by FINDENV.PAS will be of interest tothe many DOS programmers.andM;One interesting thing that you can do, once you've gained access to the realenvironment, is to create longer paths.andP;  The only reason for the current128-character limit (actually 123 since PATH= takes up 5 of the 128characters) is that it's the maximum number of characters DOS allows on itscommand line.andP;  If you can get a longer path into the environment, DOS doesn'tmind at all!andP;  As a test of this, I've been running with a path of 232characters for a number of months, and DOS has had no problem with it.andP;  Overthe course of running dozens of programs, I've seen only two that weretroubled by it: Flambeaux Software's Techhelp and an old obsolete version ofPhil Katz's PKXARC.andM;DOS VERSION VARIATIONSandM;With the introduction of DOS 3.1, it became possible to control the size ofthe root environment from a CONFIG.SYS command.andP;  Previous versions of DOS seta default environment size of 160 bytes.andP;  To set the size of the rootenvironment under DOS 3.1 and later, you use an argument such asandM;shell=C:\command.com /E:xxx /PandM;where xxx is a decimal number that represents the number of 16-byteparagraphs to be assigned to the environment (that is, the size of theenvironment is 16 times the number xxx).andM;With DOS 3.2 and later, xxx represents the actual number of bytes you wantfor the root environment.andM;You'd drink that when a program or user creates a secondary shell for DOS,DOS would make sure that the environment used by the shell was at least aslarge as the one you asked for in the root.andP;  Unfortunately, DOS is not quiteso well constructed.andP;  Instead, by default, it looks at how much of theenvironment is actually in use and rounds this up to a multiple of 16 bytes.andO;With DOS 3.2 and later, you can set a shall with the commandandM;command /e:xxxandM;and adjust the size of the environment.andP;  Alas, most application programs thatmake a shell to the operating system do not use this feature, so that activeenvironment in the shell is very small.andM;If an inherited environment turns out to be too small, there is a kludge youcan use to get around the problem.andP;  Before loading the program from which youwant to shell, issue several commands of the formandM;set a=aaaaaaaaaaaaaaaaaaaaaaaaaaaa set b=aaaaaaaaaaaaaaaaaaaaaaaaaaaaandM;Then, in the shell useandM;set a= set b=andM;The space created by the bytes taken up by the initial SET commands willstill be available after you remove the a and b variables, so you will end upwith more usable space in the active environment than you otherwise wouldhave.andM;LOCATING THE ACTIVE ENVIRONMENTandM;Two steps are necessary to locate the active environment.andP;  First, you mustfind the active copy of COMMAND.COM.andP;  Then you use it to find the activeenvirnment.andP;  The procedures for finding both COMMAND.COM and its environmentare not officially documented.andP;  This means, of course, that there is a riskthat they will not work when a new version of DOS is released.andP;  Indeed, thestructure changed from DOS 3.1 to 3.2 and again from 3.2 to 3.3.andP;  Since youcannot assume that things will remain unchanged, the programs you write willobviously need to check for this.andP;  As always, there are potential dangers inusing undocumented properties of the operating system.andM;Remember that the environment is really a memory block.andP;  Memory is brokeninto groups of paragraphs (a paragraph is 16 bytes), which are aligned atparagraph boundaries.andP;  These groups are called memory blocks.andP;  Each memoryblock contains a 16-byte header called the memory control block (MCB) forthat particular block.andP;  Only the first 5 bytes out of 16 are used, of whichthe first 4 have an ID of the letter M.andP;  Z is used for the 5th byte.andP;  (The Mand Z are the initials of Mark Zbikowski, one of the authors of DOS 2.0.)andO;These two bytes are critical.andP;  If you use DEBUG to change the M in the MCB ofone of your TSRs (as m, for example) and try to run a program, DOS willdecide your memory is corrupted and halt the system.andM;The 2nd and 3rd bytes of the MCB contain the segment of the owner of thememory block, that is, the PSP of the program that requested the block.andP;  Itis stored in the usual way words are stored in Intel architecture: thesegment 3GA4 would be stored as A4 in byte 2 and 3G in byte 3.andP;  (If yourcompiler understands words, it will normally do the translation for youautomatically.)andP;  If a program deallocates memory located in the middle of theMCB chain, DOS changes bytes 2 and 3 in the MCB to zeroes and will reuse thearea for small things like the inherited environment of a program.andM;Bytes 4 and 5 of the MCB contain the number of 16-byte paragraphs in thememory block.andP;  Neither the MCB of that block nor the next one are included inthe count, so the address of the next MCB is yyyy:0, where yyyy is the sum ofthe segment of the current MCB, the word at offset 5 of the MCB plus 1.andP;  DOSuses this method to trace through the chain of MCBs.andP;  It uses theundocumented DOS service 52h to find the first MCB.andP;  You call interrupt 21with AH=52; on return, ES:(BX-2) forms a pointer to the first MCB.andM;HOW FINDENV WORKSandM;To find the active DOS environment, I use the fact that offset 16h of the PSPpoints to the parent of the current process, with the pointer being to itselfif the parent program is COMMAND.COM.andP;  In essence, the procedure GetDOSPSP inthe source code of FINDENV.PAS locates the active COMMAND.COM by chasing thepointer back until it points to itself.andM;The source code supplied here is meant for illustrative purposes and soignores even the basics of defensive programming--a foolhardy omission for areal program.andP;  For production code, it would be a good idea to keep count ofhow many pointers you are accessing and to exit gracefully after, say, eightlevels (I've never seen more than three levels needed).andP;  This will protectagainst someone adjusting the pointers into a loop!andP;  If your program isactually writing to the environment, defensive programming also requires thatyou compare what you think is the active environment and the programenvironment passed to you.andP;  They should have identical strings.andP;  If theydon't, exit immediately: writing to the wrong place in memory can and willlead to dire consequences.andM;Having found the PSP of the active DOS, the FINDENV program can then locatethe active environment, but the algorithm for doing so isDOS-version-dependent!andP;  Part of the information involves offset 2C in the PSPof the active DOS.andP;  If the active DOS is the root, the word at 2C is 0 andthe active environment is the memory block after DOS.andM;But if the active DOS is not the root shell, then the situation is a littlemore complex.andP;  Keep in mind that COMMAND.COM is just a program, so that a DOSshell will have its own program environment placed by the loader of that copyof COMMAND.COM.andP;  For DOS 3.1 and earlier, this program environment is alsoused by the shell as the active DOS environment.andP;  For versions 3.2 and later,the shell instead places a memory block immediately following itself and doesnot use the program environment.andM;For DOS versions 3.2 and earlier, offset 2C points to the programenvironment.andP;  For versions 3.3 and later, offset 2C points to the activeenvironment.andP;  Notice that while the placing of the active environment waschanged with version 3.2, the address in 2C changed only in version 3.3.andO;This is the reason behind the strange algorithm embodied in the sample sourcecode: the block of the active environment is the next block in memory ifoffset 2C=0 or if the DOS version is 3.2; otherwise, the active environmentis pointed to by 2C.andP;  The block of the active environment is found in theprocedure Getenv.andM;Once the environment has been located, FINDENV uses the environment'sstructure to determine how much of it is being used.andP;  The strings are storedwith a single ASCII zero terminating each string and with a double ASCII zeroat the end of all strings.andP;  Thus a scan for a double 0 locates the end of theused part of the environment.andP;  An MCB calculation then finds the total lengthof the block and subtraction gives the amount free.andM;Admittedly , the DOS world is like the Wild West: there are lots of outlawsaround.andP;  Indeed, though our purpose is benign, our own attempt to extendprogram control over the active environment is in and of itself outlawbehavior.andP;  But despite this fact--perhaps even because it is verboten--it's achallenge that I'm sure many of my fellow programmers will want to take up.andM;Barry Simon is a professor of mathematics and theoretical physics at Caltechand vice president of the American Mathematical Society.andO;</TEXT></DOC>