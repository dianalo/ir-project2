<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-070-140 </DOCNO><DOCID>11 315 381</DOCID><JOURNAL>IBM System User  Sept 1991 v12 n9 p55(2).andM;</JOURNAL><TITLE>Overcoming object disorientation. (object-orientedsystems)(includes related article on IBM's plans forobject-oriented systems)</TITLE><AUTHOR>Lawrence, Andrew.andM;</AUTHOR><TEXT><ABSTRACT>Object-oriented (O-O) systems offer benefits in systemadministration, application development, software reliability andapplication flexibility, but the technology is still too young tomake use of all the features it promises.andP;  O-O systems combinedata and procedures in a single bundle of software known as anobject.andP;  Users manipulate objects by sending messages to interactwith the objects; messages respond to the object's behavior and donot directly deal with data or program logic.andP;  Objects are alsogrouped into templates according to behavior, and can be built upusing other objects.andP;  Examples of object-oriented products includeO-O databases, O-O programming, O-O interfaces, and O-O operatingsystems.andP;  IBM System 38 and AS/400 operating systems, and theApple Macintosh user interface and Hypercard are often cited asO-O systems.andP;  Benefits include shorter development times, improvedreliability, intuitive interfaces and interoperability.andO;Nonetheless, O-O systems still require standardization, inventorymanagement tools, and plug-and-play object libraries andcomponents.andM;</ABSTRACT></TEXT><DESCRIPT>Topic:     Object-Oriented LanguagesObject-Oriented Data BasesObject-Oriented ProgrammingTrendsSoftware DesignSystem SelectionFuture of ComputingProgram Development Techniques.andM;</DESCRIPT></DOC>