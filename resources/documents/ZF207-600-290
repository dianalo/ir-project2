<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-600-290  </DOCNO><DOCID>07 600 290.andM;</DOCID><JOURNAL>Lotus  Sept 1989 v5 n9 p84(3)* Full Text COPYRIGHT Lotus Publishing Corporation 1989.andM;</JOURNAL><TITLE>Write your formulas in Boolean shorthand. (Formulas SpecialReport) (technical)</TITLE><AUTHOR>Cranford, Richard.andM;</AUTHOR><SUMMARY>When writing formulas, the use of Boolean mathematical techniqueswill result in shorter formulas and memory savings.andP;  Boolean mathrelies on 0 and 1 for its arguments as well as its results.andP;  Touse Boolean technique, leave the expression andless; andgt; 0 out of the firstargument of (at)IF formulas.andP;  Boolean math can be used inconjunction with the logical operators AND and OR to determinewhether two or more values at a time are zero or nonzero.andP;  Variousexamples are presented for applying Boolean logic.andP;  Memory savingsis negligible when Boolean principles are used on only a fewformulas.andP;  Unless 100 or more copies of a formula are being made,they are best left in standard form.andM;</SUMMARY><DESCRIPT>Topic:     Boolean AlgebraProgramming InstructionFunctionsSpreadsheets.andO;Feature:   illustrationcartoon.andM;</DESCRIPT><TEXT>WRITE YOUR FORMULAS IN BOOLEAN SHORTHANDandM;Even if you're unabashedly math phobic, you can master the simple Booleanmath techniques described here.andP;  The payoff is worth it: You'll be able towrite shorter, more powerful formulas.andP;  These formulas will use less memorythan conventional formulas, and they'll evaluate more quickly.andP;  If you buildworksheets that contain hundreds of formulas, the time and memory savingsyou'll realize will be appreciable.andP;  And you can use these techniques withall versions of 1-2-3 and Symphony.andM;The Boolean BasicsandM;You use Boolean math every time you write an @IF formula.andP;  In this article,you'll learn to apply Boolean techniques to @IF formulas and to other typesof formulas as well.andP;  In Boolean math, the only possible results of anyexpression are 0 and 1.andP;  Furthermore, the only arguments used in a Booleanexpression are 0 and 1.andP;  Finally, Boolean math uses two operators you may notbe familiar with: AND and OR.andM;Consider the logical formula @IF (B6andless;500, 0.05, 0.1).andP;  It returns the value0.05 if the current value of cell B6 is less than 500.andP;  It returns .1 if cellB6 is greater than or equal to 500.andM;Your spreadsheet uses the following logic when it processes this formula: Ifthe value of the first argument (B6andless;500) is equal to 1, the formula returnsthe value of the second argument (0.05); otherwise, it returns the value ofthe third argument (0.1).andM;The value of the first argument is 1 when the expression that comprises it istrue--the value in cell B6 is less than 500.andP;  If the value in cell B6 isgreater than or equal to 500, the expression is not true.andP;  In this case, theexpression B6andless;500 returns 0.andM;To demonstrate this, load 1-2-3 or Symphony and enter 300 in cell B6 of anempty worksheet.andP;  In cell D6 enter the formula +B6andless;500.andP;  The formula returns1 because the value in cell B6 is less than 500.andP;  Change the number in cellB6 to 500, and the formula in cell D6 returns 0.andP;  Any cell formula orexpression within a cell formula that contains the mathematical operators =,andless;, andgt;, andless;=, andgt;=, or andless;andgt; is a Boolean expression and can therefore return only 0or 1.andM;Because of the way 1-2-3 and Symphony are designed, the first argument of an@IF formula is automatically a Boolean expression.andP;  This is true regardlessof whether you include mathematical operators in the argument.andP;  For example,with the value 500 still in cell B6, enter in cell D8 the formula @IF(B6, 30,90).andP;  At first glance, this seems to be an incomplete @IF statement.andP;  Thefirst argument does not contain a mathematical operator.andP;  Yet the formulaworks and returns the value 30 rather than ERR.andM;The reason is that 1-2-3 and Symphony interpret the first argument as &quot;ifcell B6 is not equal to zero.&quot;andP;  When this condition is met, the formulareturns 30.andP;  If cell B6 were equal to zero, the formula would return thethird argument, 90.andM;Applying Boolean TechniquesandM;You can exploit this feature of your spreadsheet to write shorter formulasand save memory.andP;  Simply leave the expression andless;andgt;0 out of the first argumentof @IF formulas.andP;  @IF(B6, 30, 90) is equivalent to @IF(B6andless;andgt;0, 30, 90).andP;  Beaware, though, that this shortened version of an @IF formula is notequivalent to the formula @IF(B6andgt;0, 30, 90).andP;  The first formula returns themiddle argument, 30, when cell B6 contains a negative value.andP;  The secondformula returns the last argument, 90, when cell B6 contains a negativevalue.andM;If you want an expression to evaluate to one of two nonzero values, you mustuse @IF.andP;  But if the possible results of an expression are to be some nonzerovalue or zero, you can do it without @IF.andP;  Since Boolean expressions returnonly 0 or 1, you can multiply a value by a Boolean expression to make thevalue evaluate to 0 under certain conditions.andM;For example, in the worksheet in figure 1, a 5% discount is applied to thetotal cost of an item when the quantity ordered is 50 or more.andM;One possible way that you can write the formula in cell E3 is: @IF(C3andgt;=50,D3*0.05, 0)andM;Here's the Boolean equivalent of that formula: +D3*0.05*(C3andgt;=50)andM;As you can see, it is shorter and more efficient.andM;Since the value in cell C3 is greater than or equal to 50, the second formulamultiplies the product of 75.02 times 0.05 by 1, giving 3.75 times 1, or3.75.andP;  If you copy this formula into range E4..E6 and look at the resultingformula in cell E5, you see that the formula multiplies the product of 25.11times 0.05 by 0.andP;  This is because cell C5 is not greater than or equal to 50.andO;The result is 1.26 times 0, or 0.andM;The second formula is not much shorter than the first.andP;  But if you apply thistechnique to a long formula or if you make several hundred copies of such aformula, the amount of memory you save is significant.andM;Working with Logical OperatorsandM;Boolean math also lets you determine whether two or more values at a time arezero or nonzero.andP;  You do this by combining Boolean techniques with thelogical operators AND and OR.andP;  In 1-2-3 and Symphony these operators arespelled with number signs: #ANd# and #OR#.andP;  The number signs are part of theoperator, so when you read a cell formula and you see #AND#, just say &quot;and,&quot;the way you'd say &quot;plus&quot; when you see the plus sign.andM;The most common use of #AND# and #OR# is in the first argument of @IFformulas.andP;  You use #AND# if you want the first argument to return 1 if all ofits expressions are true.andP;  You use #OR# if you want the first argument toreturn 1 if any of its expressions are true.andP;  For example, suppose you wantto modify the worksheet we looked at earlier so that the 5% discount is givenif the quantity ordered is 50 or more and if the customer has preferredstatus.andP;  The worksheet would look like figure 2.andM;The formula in cell E5 now reads: @IF(C5andless;=50#AND#E$1=&quot;Y&quot;, D5*0.05, 0)andM;If this formula is copied to range E6..E8, the results are the same as in theearlier worksheet.andP;  The discount applies only to the first two items.andP;  Thedifference here is that a customer must have preferred status to get thediscount when ordering 50 or more items.andP;  Since both conditions must be truefor there to be a connected the expressions C5andgt;=50 and E$1=&quot;Y&quot; by using theoperator #AND#.andP;  If the label in cell E1 is changed to N, there is no casewhere both conditions are true, so all the formulas in range E5..E8 return 0.andM;Now consider a scenario where any customer gets a discount when ordering 50or more of an item, and a preferred customer always gets a discount.andP;  Thatis, the discount applies if the customer is preferred or if the quantityordered is 50 or more.andP;  To reflect this, the formula in cell E5 is changedto: @IF(C5andgt;=50#OR#E$1=&quot;Y&quot;, D5*0.05, 0)andM;If the label in cell E1 is N, the discount formulas in column E again return3.75, 4.84, 0.00, and 0.00.andP;  In the first two cases, at least one of theexpressions in the @IF function's first argument is true--that is, thequantity ordered is 50 or more.andP;  In the last two cases, neither expression istrue, so the formula returns 0.andM;If the label in cell E1 is changed to Y, all of the discount formulas returnan amount other than 0 because in all cases at least one of the expressionsis true.andP;  Both are true in the first two cases, and the second expression,E$1=&quot;Y&quot;, is true in the last two cases.andM;Just as you can omit the mathematical operators when using @IF to evaluate anexpression, you can also omit them in expressions connected by #AND# and#OR#.andP;  The formula @IF(B6#AND#B9, 30, 90) returns 30 if cells B6 and B9 bothcontain or return values other than 0.andP;  If either of them evaluates to 0, theformula returns 90.andP;  On the other hand, @IF(B6 #OR#B9, 30, 90) returns 30 ifeither cell B6 or cell B9 evaluates to a number that is not zero.andP;  Theformula returns 90 only if cells B6 and B9 both evaluate to 0.andM;You can also connect expressions with #ANd# and #OR# without using the @IFfunction.andP;  For example, substitute in cell E5 the following:+D5*0.05*(C5andgt;=50#AND#E$1=&quot;Y&quot;)andM;The expression (C5andgt;=50#AND# E$1=&quot;Y&quot;) returns either 0 or 1.andP;  As a result,this formula multiplies the product of cell D5 times 0.05 by either 0 or 1.andM;Points to RememberandM;The amount of memory you save by using these techniques in a few formulas isnegligible.andP;  Unless you plan to make a hundred or more copies of a formula,you may be better off leaving in the characters andless;andgt;0 or using the @IF functionrather than a stand-alone Boolean expression.andM;Here's why: Someday, someon may need to analyze or modify a worksheet thatyou've created.andP;  The formulas @IF (B6, 30, 90) and @IF(B6andless;andgt;0, 30, 90) bothreturn 30 if the value in cell B6 is not equal to 0.andP;  But the second formulashows exactly what's being evaluated and is therefore more informative.andM;Similarly, +D3*0.05*(C3andgt;=50) multiplies the product of cell D3 and .05 byeither 1 or 0.andP;  The formula multiplies by 1 if cell C3 is greater than orequal to 50, and it multiplies by 0 if cell C3 is less than 50.andP;  But@IF(C3andgt;=50, D3*0.05, 0) expresses the operations in an order with which mostusers of 1-2-3 and Symphony are familiar.andP;  The sentence &quot;If cell C3 isgreater than or equal to 50, then return cell D3 times 0.05, otherwise return0&quot; seems more natural to most people than &quot;cell D3 times 0.05 times cell C3is greater than or equal to 50.&quot;andM;But computers and computer programs don't consider semantics when evaluatinga mathematical operation.andP;  So if you need to coax a few more iotas ofperformance out of your large worksheets, consider using these Booleantechniques.andP;  They're a natural for the machines, if not for the people whouse them.andO;</TEXT></DOC>