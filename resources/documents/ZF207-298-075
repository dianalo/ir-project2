<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-298-075  </DOCNO><DOCID>07 298 075.andM;</DOCID><JOURNAL>Dr. Dobb's Journal of Software Tools  Feb 1989 v14 n2 p108(4)* Full Text COPYRIGHT Mandamp;T Publishing Inc. 1989.andM;</JOURNAL><TITLE>Programming paradigms: tough choice. (NeXT's choice of Stepstone'sObjective C)</TITLE><AUTHOR>Swaine, Michael.andM;</AUTHOR><SUMMARY>The choice by NeXT developers of Stepstone's Objective C as a keyelement in their platform must have been a tough one.andP;  Steve Jobsand company sidestepped the pure object-oriented approachsignified by Smalltalk and Actor and chose the hybrid approach toobject-oriented programming.andP;  This kind of choice will mean muchmore as time goes on.andP;  NeXT chose Objective C, but C++, anotherC-based object-oriented system, is getting all the attention.andP;  Theapproach of extending C in an object-oriented direction seems atbest old-fashioned and at worst wrong-headed.andM;</SUMMARY><DESCRIPT>Product:   Objective-C (Compiler)C++ (Program development software) (usage)Next (Workstation) (usage).andO;Topic:     Program Development ToolsObject-Oriented LanguagesCritique.andM;</DESCRIPT><TEXT>PROGRAMMIN PARADIGMSandM;Tough ChoiceandM;In picking Stepstones's Objective C as a key element in the NeXT developmentplatform, Jobs and company made what had to be a tough choice.andP;  It's the kindof choice that will mean more as time goes on: It's what one writer calls awye.andM;By wyes, novelist John Barth means those choice points in people's lives,roads taken or not, that lead to someplace very different from the alternateroutes.andP;  The letter Y is used as a metaphor for significant choice points.andO;That's what this column is about: the wyes of object-oriented programming.andO;Some of these represent choices among products, some are just bullets onfeature lists, and none is as widely discussed as it should be, at least ifyou believe Chuck Duff of The Whitewater Group.andM;I talked with Duff and Digitalk's Jim Anderson, developers, respectively, ofActor and Smalltalk/V, and both exponents of a &quot;pure&quot; approach toobject-oriented programming.andP;  What follows is based on their experiences andperspectives out on their branches of the various OOP wyes.andP;  It is not anobjective, balanced view of the choices a programmer faces, but rather a lookat the choices two programmers made, and how they came to make them.andM;Pure vs Hybrid OOPandM;NeXt sidestepped the pure object-oriented approach exemplified by Smalltalkand Actor, and opted for a hybrid approach to object-oriented programming.andO;There are compelling reasons for taking the branch NeXT took, as there arecompelling reasons for following the purer path.andP;  (This use of the word&quot;pure&quot; is intended to be non-judgmental and relative.andP;  Imagine quotes aroundthe word wherever it appears.)andP;  But the paths do seem to be divergent, andthe choice of whether to build on a pure object-oriented model or to employobject-oriented extensions to a familiar language model will take the chooserto radically different places.andP;  &quot;Where Smalltalk and Actor came from is oneworld, and this is really an entirely different world,&quot; Duff says.andM;Although NeXT chose Objective C, it's another C-based object-orientedsystem--C++--that is getting the bulk of the attention just now.andP;  Andalthough Bjarne Stroustrup developed C++ from Simula, the same root fromwhich all object-oriented languages grew, it is a fundamentally differentapproach from the Smalltalk model (as is Objective C).andP;  Stroustrup isexplicit about his intentions in developing C++, and they include efficiencyand compatibility with C.andP;  C++ is an extension of C, and as such permitsprogramming style that is more procedural than object-oriented; it's thismixing of metaphors, more than any particular missing features, that seems todisturb the purists.andM;From the pure object-oriented programming branch, this approach of extendingC in an object-oriented direction looks at best quaint and at worstwrong-headed.andP;  Anderson expresses what seems like genuine puzzlement at theNeXT decision, and Duff clearly sees C++ as a sell-out of the paradigm,popular only because of ATandamp;T and its visibility in the public domain.andP;  &quot;Frommy point of view,&quot; Duff says, &quot;it really compromises a lot of the benefits ofobject-oriented programming.&quot;andM;Jim Anderson agrees.andP;  He sees one of the main benefits of object-orientedprogramming is that the solution is close to the problem.andP;  &quot;You don't losesight of your problem in the solution; in fact, you develop an increasedunderstanding in the ssytem you create.&quot;andP;  That benefit, he thinks, requiresan unadulterated paradigm.andP;  Of Digitalk's customer base, he says, &quot;We knowthat the non-professional programmer, the scientist, the doctor is a commoncustomer.andP;  Programming isn't his job; he needs results quickly, and(appreciates) the solution being close to the problem, which I thinkSmalltalk gives you.andP;  But we're also getting a lot of programmers, becausethey're getting bloody noses with C or even with C++.&quot;andM;Duff and Anderson, of course, have axes to grind: They are selling productsthat lie on the other arm of the wye.andP;  But unlike most programmers, Duff hasbeen down both branches.andP;  When he talks about C++, he's seeing it in thelight of Neon.andP;  As he tells the story:andM;&quot;My initial focus was on forth.andP;  (When) I was at Kriya Systems, I was theauthor of Typing Tutor for the Macintosh.andP;  Forth, as an extensible language,was not really working, in my view, because the extensibility was just toopowerful.andP;  I was intrigued by the Smalltalk books, and that seemed torepresent a situation in which you could channel the extensibility into amore pragmatic framework.andP;  If you extended the system (and I extended) thesystem, we could probably understand each other's extensions, because therewas this consistent technology for doing it.&quot;andM;His researches into object-oriented programming and his background in Forthled to Neon:  &quot;Neon was an object-oriented extension to Forth, but it was ahybrid language in that you still had Forth around and you could still blowyourself out of the water any time you wanted to and completely corrupt theobject metaphor.andP;  My focus in Neon was on making Smalltalk practical, becauseat that time there was no Smalltalk that was really useful on a personalcomputer; in fact I think Neon was the first object-oriented language thatwas commercially available for a personal computer.&quot;andM;Neon, however, failed to take the world by storm, and Duff himself had somesecond thoughts about the approach.andP;  After the Neon experience, he wasconvicted that a pure object-oriented model was better, if it could beachieved without compromising efficiency.andP;  In the hybrid approach, he saw toomany ways for the base language to collide with the object model.andP;  It wasappealing to envision a language in which even the basic syntacticalconstructs would be constructed according to the messaging paradigm.andP;  Thatappeal, and some frustration with Small-talk as it existed then, led Duff todevelop Actor.andM;Today, there are several pure object-oriented languages available on personalcomputers but surprisingly little direct comparison of these products withone another or with the hybrids.andP;  Although an advertisement for InteractiveSoftware Engineering's pure object-oriented programming language Eiffel doesa feature-list comparison with C++, you won't find many comparative reviews.andO;(That ad also adds insult to injury by quoting Stroustrup repeatedly onobject-oriented features that C++ lacks.)andP;  Duff thinks that the reason wedon't see much direct comparison of the hybrid vs the pure implementations isthat the two approaches are seen as incommensurable: &quot;Right now, it's justsort of parallel evolutionary paths.&quot;andM;&quot;C++ has an immense amount of support, but a lot of it is (from) Cprogrammers, to (whom) it's just a better C.andP;  They don't have anything tocompare it to.&quot;andP;  Some C vendors pitch C++ as precisely a better C, scarcelymentioning its object-oriented nature in their ads.andM;Duff wants to see the hard questions asked in print.andP;  &quot;Eventually what'sgoing to have to happen is that we're going to have to say, 'What is thistechnology about?andP;  What are the benefits that we're looking for?andP;  And whatlanguage features have to be there to provide those benefits?'andP;  We have tolook behind the scenes, and that's not happening right now.andP;  We're going tohave to take a hard look at what we want the technology to do for us, whatcompromises we're willing to make in the language to accomplish that.&quot;andM;Inheritance vsandM;Flat ProgrammingandM;The key to the object-oriented paradigm is inheritance.andP;  It's what deliversthe benefits, and it's the essence of the choice to OOP or not to OOP, Duffbelieves.andP;  Anderson sees reusability as its greatest benefit: It buys theprogrammer reusability by factoring out the general, the abstractions, andletting general solutions be specialized.andM;It was precisely the quest for reusability that initially turned Anderson onto object-oriented programming.andP;  If Duff found his path only after followinga Forth thread, Anderson's enlightenment came from watching the world'sbiggest software company fail and realizing that he knew where it had gonewrong.andM;Anderson was working for Computer Science Corp. when it got a contract withBasic 4 Corp.andP;  Basic 4 was selling a business minicomputer with a very goodBusiness Basic and getting a lot of similar jobs: to do an accounting systemfor a bakery, to do an accounting system for a trucking company, and so on.andO;Basic 4 had tried contracting the development out to individual consultantsbut wasn't happy with the result, when they hit upon the idea of contractingwith CSC to do a general accounting system that could be tweaked for theparticular applications.andM;CSC found itself unable to reuse the software in going from job to job.andP;  &quot;Itwas just too much of a mess to snip out the pieces, the common stuff thatcould be used for all.&quot;andP;  As it was becoming clear that the project was notworking out, Jim Anderson, working in another branch of CSC, was reading the1981 Byte issue on Smalltalk and making connections.andM;&quot;That was one of the things that I saw in Smalltalk: the reusability becauseof inheritance.andP;  Basic doesn't have much structure.andP;  What you need is to lookat the similarities and the differences.andP;  The similarities are theabstractions, and the general things that apply to all, and the differencesare the specializations in subclasses.andP;  Basic just doesn't give any help inthat area.&quot;andM;CSC's problem in creating a generalized accounting system ultimately ledAnderson and George Bosworth to start Digitalk and to develop a Smalltalkimplementation for the PC and now for the Mac.andP;  &quot;I haven't been able to goback and solve that problem, but I can certainly envision having multipleapplications in Smalltalk: abstract accounts receivable, then Trucker'saccounts receivable, and so on, all in there at once.&quot;andM;Duff points to the granularity of reusable code that inheritance provides.andO;&quot;You can isolate a smaller section of code that is more likely to be reusableas a unit than if it were five or ten times its size.andP;  As size increases, thelikelihood of reusability goes down, because the more functionality there is,the more likely it is that it'll be inconsistent with future uses.&quot;andM;In fact, Duff finds that the object-oriented style seems naturally to leadprogrammers to break functionality down into small pieces.andP;  That's a valuethat rings true for Duff, an old Forth coder.andP;  One of Chuck Moore's rules ofForth programming is that no Forth word should be longer than two or threelines.andP;  &quot;In a sense I've found the same thing to be true in Actor: that shortmethods and short classes and a larger number of smaller classes is usually abetter situation because it gives you that granularity where you can pick andchoose what you want to reuse.&quot;andM;But inheritance supplies a level of quality or reliability to the reusablecode that, Duff argues, would ot be there otherwise.andP;  &quot;If I develop a libraryand I give it to you and you need it to work a little bit differently, youstart to edit my code.andP;  There is a portion that we share, but it's no longercleanly delineated from what I initially wrote.andP;  This means that we now havetwo separate maintenance problems.andP;  I can no longer simply give you a bugfixfor you to blindly apply to your code, because you might have changed it.andO;That problem is made much less severe by inheritance, because we can agreethat you don't edit my code; you override pieces of it.andP;  Then I can give youupdates and it's not going to compromise your system.&quot;andM;Inheritance is also what makes object-oriented programming hard for manyprogrammers to adapt to.andP;  Novices seem to have less trouble, suggesting thatit's an unlearning, rather than a learning problem.andP;  At Carlton University inOttowa, they now use Smalltalk in the Introduction to Programming course inthe computer science department.andP;  They've progressed: A few years ago it wasbeing used only in a graduate AI course, and last year it was introduced in asecond-year data structures class.andP;  But there is, as Anderson puts it,&quot;definitely a weirdness factor.&quot;andM;&quot;One of my problems in learning Smalltalk,&quot; he confesses, &quot;was that I wantedto translate it into something familiar.andP;  I was constantly fighting theideas.andP;  Nonprogrammers don't have to make this kind of translation all thetime, so I think they accept it more quickly.&quot;andM;And the weirdness factor hits immediately, as you are approaching theproblem, conceptualizing, analyzing, not thinking about code yet.andP;  Andersonagain: &quot;I can remember programming in Pascal, approaching a problem, and thefirst thought would be: 'OK, what kind of record strcutures do I need todefine for this problem?' It's startling to go into Smalltalk and approach anew problem and the question is, 'OK, what kind of (preexisting) collectionsdo I use for this problem?'andP;  You don't start by defining something new but byreusing something that exists.&quot;andM;Multiple Inheritance vsandM;Single InheritanceandM;Multiple inheritance means the possibility of belonging to two differentclasses at once, neither of which is a subclass of the other.andP;  It's adeviation from a strict tree-structured arrangement of classes, such as theKinnean classification of organisms.andP;  In the real world, objects belong todifferent classes.andP;  Some object-oriented systems have multiple inheritance,most don't.andM;Neither The Whitewater Group's Actor nor Digitalk's Smalltalk supportsmultiple inheritance, but both companies are looking into the technique.andO;When a customer asks about multiple inheritance, the companies ask what thecustomer has in mind to do with it.andM;Duff says that the customers usually haven't thought about it very much.andO;&quot;It's a bullet on a features list,&quot; he says.andP;  &quot;The people who have thoughtabout it know it's fraught with pitfalls.&quot;andM;What are these pitfalls of multiple inheritance?andP;  Well, it's naive to thinkthat you can combine an A and a B to come up with meaningful AB.andP;  A and Btypically will have similar but not quite identical properties that collidewith each other.andP;  Consider the case of two multiply inherited classes withinstance variables having the same name.andP;  Each may want to preserve its owncopy of that instance variable, or they may want to share it.andP;  There areequally valid cases of each kind.andP;  When faced with these collisions, you haveto decide what to do about them; specifically, you have to establish acollisions-resolving philosophy.andP;  Do you just employ an arbitrary rule?andP;  Thatreally isn't good enough.andP;  Do you ask the programmer on a case-by-case basisto make the resolution?andP;  Do you develop a collision-resolving expert system?andO;It's not a simple matter.andM;&quot;It's things like this that have kept us from approaching multipleinheritance until just recently,&quot; Duff says.andP;  Anderson can think immediatelyof one instance in the design of his Smalltalk system when multipleinheritance would have come in handy.andP;  &quot;It's nice to have a lot of things(that are not descendants of the stream class) that act like streams.&quot;andP;  Hemanaged to get the effect of multiple inheritance without the structure, but&quot;if we had had multiple inheritance we would have used it there.&quot;andP;  But wouldthe costs in complexity that multiple inheritance brings with it havejustified the convenience that would have been gained in this case?andP;  Andersondoubts it.andM;Duff says you have to weigh these costs in designing a language.andP;  &quot;You haveto say, 'Is the productivity benefit there?andP;  Are they spending more time inthe multiple inheritance technology than they would have just getting aroundit with single inheritance?'&quot;  The White-dddwater Group regularly teachesprogrammers how to simulate multiple inheritance in a single inheritancesystem.andP;  In a single inheritance environment, you can achieve multipleinheritance by adding the classes that you want to inherit from as componentsor instance variables and then using those components of the object as sortof experts to fill in that domain of behavior.andP;  Then you just pass throughthe protocol of those objects to the outside by introducing methods in theclass.andP;  It works.andM;The approach suggests a broad design principle for object-orientedprogramming, and it applies particularly strongly to multiple inheritance.andO;Fuff says that his people have found that it's possible to overuseinheritance.andP;  &quot;In general, it's better to err in the direction ofencapsulating too much, in other words including something as an instancevariable instead of inheriting from it, because it's very likely that youmight inherit inappropriate behavior.&quot;andM;Inherit inappropriate behavior?andP;  Here's what he has in mind: &quot;You want tocreate something that holds a collection of other things, let's say a pictureclass that holds a collection of graphical objects.andP;  One way to do that is tomake it a descendant of one of the collection classes, like Array.andP;  A pictureis an array, only it's a special kind of array.andP;  The problem is, you may wanta picture that can have a dictionary instead of an array as its collection.andO;Also, there are many things that are appropriate for arrays that are notappropriate for pictures.andP;  You end up having to circumvent a lot ofinappropriate inherited behavior.&quot;andM;Multiple inheritance exacerbates the problem because with multipleinheritance you have not just one but many classes from which you need tofilter out inappropriate behavior, in addition to resolving the redundancies.andO;But Actor is likely to support multiple inheritance before long.andM;&quot;The direction that I'm heading,&quot; Duff explains, &quot;is decoupling inheritanceof protocol--or methods--from inheritance of representation--or instancevariables.andP;  One way to do that is to be able to group a piece of code into athing that's like a class, except that it doesn't specify any representation.andO;It's just a set of methods that, since they don't refer to instancevariables, can be generically inherited.andP;  You can then say, in addition tothe class that I inherit from, I also inherit these protocols that allow meto behave like an object of this virtual type--virtual (in that) you're notspecifying anything about its representation.andP;  It simplifies a lot of theseresolution problems.andP;  You don't have to worry about instance variables; youcan just deal at the level of what functionality I inherit.&quot;andM;And it's really not accurate for me to say that Digitalk doesn't supportmultiple inheritance; it's there in the company's Smalltalk products.andP;  It'sjust not visible.andP;  &quot;In ST/VB-286 and the Mac product,&quot; Anderson says, &quot;wehave actually implemented the mechanism for multiple inheritance, but wedon't have a (supporting) user interface.andP;  We don't know how to present it tothe user.&quot;andP;  The user interface is an area of active research at Digitalk, andAnderson feels that the company was really founded to make object-orientedprogramming accessible.andP;  Accessibility means a lucid user interface, hebelieves.andP;  If and when they figure out how to present the technique so thatit doesn't complicate the programmer's life too much, they will no doubtimplement multiple inheritance for real.andP;  If and when they do, the solutionis likely to involve context, a concept that Digitalk programmers arecurrently exploring avidly.andM;From the point of view of putting valuable functionality in the programmer'shands, it's good that Digitalk and The Whitewater Group are moving towardmultiple inheritance, because there are real benefits in having a multipleinheritance: The real world has multiple inheritance, and if you want tosimulate aspects of the real world, should you try to get along without thisnatural technique?andP;  On the other hand, the programmer has to decide if it isworth the hassle.andP;  It's really not a trivial choice for the language designeror for the programmer.andM;As Jim Anderson says, &quot;It's definitely a controversial topic.&quot;andO;</TEXT></DOC>