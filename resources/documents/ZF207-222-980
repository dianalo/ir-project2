<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-222-980  </DOCNO><DOCID>07 222 980.andM;</DOCID><JOURNAL>Data Based Advisor  May 1989 v7 n5 p108(2)* Full Text COPYRIGHT Data Based Solutions 1989.andM;</JOURNAL><TITLE>Simulating index access with a binary search.andO;</TITLE><AUTHOR>Mikun, Norbert K.andM;</AUTHOR><SUMMARY>Accessing information quickly with dBase isn't easy when files aretoo large.andP;  Searching sequentially through records takes time.andO;Additional indexes often take up too much disk space.andP;  Onesolution to the problem is to create a binary search algorithmapplied to the index instead of the database.andP;  The data is sortedin the search field.andP;  The algorithm used requires furtherprogramming to modify its disadvantages and enhance the program.andM;</SUMMARY><DESCRIPT>Product:   dBASE (Data base management system) (product enhancement).andO;Topic:     Computer IndustryAccess MethodsData Base Management SystemsInformation Storage and Retrieval.andM;</DESCRIPT><TEXT>Simulating Index Access with a Binary SearchandM;As a computer consultant specializing in large dBASE applications, I'm oftenfaced with the need to endow dBASE or its clones with capabilities beyondthose they possess.andP;  This article presents a way of accessing an extremelylarge database in an indexed mode, doing fast SEEK-like searches, withoutcreating or maintaining indexes.andM;dBASE provides three general means of finding a specific record in adatabase.andM;The first method, GO or GOTO, allows you to go directly to the desired recordif you know the record number.andM;The second method, LOCATE, lets you search sequentially through every recordfor a specific set of data.andP;  This method, because of its sequential nature,is very slow and may be totally impractical to use in large databases.andM;The third method, FIND or SEEK, lets you find any data item almost instantly,and in practically any size of database; but it requires the presence of anindex created specifically for the field(s) to be searched.andM;Sometimes the size and nature of an application may require the speed, powerand flexibility of indexed access, but won't allow for the maintenance of anadditional index file.andP;  I faced this situation recently, when a large look-uptable required a database with over 416,000 records spanning 13M of diskspace and a corresponding index file occupying just over 4M.andM;Clearly, the frequent access of the look-up table required an instant,index-like access method, ruling out any thoughts of sequential accessing;however, the large size of the index coupled with the fact that the tabledidn't need changing or updating--just look-ups--made it an ideal candidatefor a binary search technique.andM;The binary search algorithm I use is very simple; with various enhancementsand modifications, it is the underlying principle used in almost everyindexing scheme.andP;  (The algorithm is applied to the index instead of thedatabase.)andP;  The one major requirement is that to be searched, the databasemust be sorted on the search field.andM;Basically, the search key is compared to the search field at the midpoint ofthe sorted database, effectively splitting the database in two.andP;  If thedatabase is sorted in ascending order, then the following three results arepossible:andM;1.andP;  The search key value is equal to that of the field in the database, inwhich case the record sought has been found and the search is ended.andM;2.andP;  The search key value is less than that of the field in the database, inwhich case the record sought is somewhere in the first half of the database.andM;3.andP;  The search key value is greater than that of the field in the database,in which case the record sought is somewhere in the second half of thedatabase.andM;In the second and third cases the procedure is repeated; either the first orsecond half of the database is halved again and again until the record youwant is found--or until there's no more room left for halving the remainingdatabase segment (in which case the record doesn't exist).andM;This algorithm has certain advantages and disadvantages that require furtherprogramming to overcome.andM;The width of the search field in the database must be one more than themaximum possible length of the data (i.e.andP;  if the data can have a maximum ofseven bytes, then the field must be eight bytes long).andM;If more than one record satisfies the search condition, then the record foundisn't necessarily the first one in the sequence.andM;If no match is found, a &quot;soft seek&quot; is automatically done; that is, therecord pointer lands where the record should have been.andM;The requirement of maintaining a sorted database seems to preclude the use ofthis algorithm in those cases where new records must be added frequently,since this would require resorting the database.andP;  This problem can be solvedeasily.andP;  Rather than APPENDing the record, simply do a search for the key tobe added, then INSERT the new record.andM;The search is extremely fast.andP;  My application executed in compiledFoxBASE+2.0 on an AT clone, at 10 MHz with a 28 ms hard disk.andP;  Under theseconditions the access was almost instantaneous, with no perceptibledifference between it and an indexed FIND.andM;The code that follows is written as a user defined function in FoxBASE+ andconsists of two parts.andP;  The first part is the straight implementation of thealgorithm.andP;  The second part (between the lines) moves the record pointer onthe first record in those cases where the key found appears more than once inthe database.andP;  To accomplish this, we take advantage of the soft seek featureby creating an artificial key with an impossible-to-find value that wouldfall just before the actual value sought, thus forcing a soft seek.andP;  A LOCATEfor the actual key is then performed to land on the first valid record.andM;Modifications for using the routine with other dBASE dialects follow thecode.andP;  ** BSEARCH non-indexed binary search ********************************andM;*  A PROCEDURE/USER DEFINED FUNCTION TO DO BINARY SEARCHESandM;**  (like an indexed search, but without an index.)andM;**** By: Norbert K. Mikun, Microcomputer ConsultantandM;**     CYBER ENTERPRISES (213) 926-6021andM;*** * SFIELD = FILED SEARCHED IN THE DATABASE (database must be sorted *andM;*           on SFIELD and SFIELD must be 1 character wider than theandM;**          maximum possible key)andM;** KEY    = THE KEY TO SEARCH FOR, PASSED AS A PARAMETERandM;** VAR    = VARIABLE SET TO true/false DEPENDING ON RESULT OF SEARCHandM;*** * NOTE: This program is set up as a FoxBASE+ user defined function *andM;*       To adapt it to Clipper, dBASE III PLUS, dBASE IV, dBXL, andandM;**       Quicksilver, see the notes that follow the program listing.andM;*** * CLIPPER/dBASEIV/dBXL/FOXBASE+/QUICKSILVER SYNTAX: VAR=BSEARCH(KEY)*andM;*   (key must be left justified and blanks must be stripped away)andM;****                         RETURN VALUESandM;** found: VAR is TRUE; pointer moves to first matching recordandM;** not found: VAR is FALSE; pointer moves to where the matchingandM;**            record should have been.andM;**** dBASE III PLUS SYNTAX: DO BSEARCH WITH &quot;andless;keyandgt;&quot;andM;*** * RESULT: found: pointer is at first entry meeting search criteria *andM;*         not found:pointer is where the entry should have been.andM;* *********************************************************************PROCEDURE BSEARCH PARAMETERS XXX  andamp;andamp; Value to search for.andP;  PRIVATEL,HI,LO,MID,X,XXX1,L1,HI1,LO1 L=LEN(XXX)  andamp;andamp; Length of the search variable.andO;HI=RECCOUNT()+1  andamp;andamp; Initialize upper search boundary.andP;  LO=1  andamp;andamp; Initializelower search boundary.andP;  DO WHILE HI-LOandgt;1  andamp;andamp; Loop while there is room tosearch.andP;  MID=(HI+LO)/2 GO MID  andamp;andamp; Get search field at midpoint.andP;  DO CASE CASEXXXandgt;LEFT(SFIELD,L)  andamp;andamp; If variable is higher than midpoint LO=MID  andamp;andamp; movelow search boundary to midpoint.andP;  CASE XXXandgt;LEFT(SFIELD,L)  andamp;andamp; If variable islower than midpoint HI=MID  andamp;andamp; move high search boundary to midpoint,OTHERWISE  andamp;andamp; otherwise they are equal (we found ti) *=========================================================== * Code betweenlines necessary when length of search key is * less than the length of thefield X=CHR(ASC(RIGHT(XXX,1))-1)  andamp;andamp; Set last character of key toXXX1=LEFT(XXX,L-1)+X+CHR(254)  andamp;andamp; highest &quot;impossible&quot; value.andP;  L1=LEN(XXX1) andamp;andamp; Calculate new key length.andP;  HI1=RECCOUNT()+1  andamp;andamp; LO1=1  andamp;andamp; DO WHILEHI1-LO1andgt;1  andamp;andamp; MID=(HI+LO)/2 andamp;andamp; GO MID  andamp;andamp; Repeat binary search for new IFXXX1andgt;LEFT(SFIELD,L1) andamp;andamp; &quot;impossible&quot; value to find key LO1=MID  andamp;andamp; so thepointer will be just ELSE  andamp;andamp; ahead of first matching record HI1=MID  andamp;andamp;ENDIF  andamp;andamp; ENDDO LOCATE REST FOR XXX=LEFT(SFIELD,L) andamp;andamp; Locate first record.andP;  *andO;=========================================================== RETURN .T.andP;  andamp;andamp;andO;Return with TRUE (found) ENDCASE ENDDO  andamp;andamp; End of main loop (only reached ifnot found).andP;  RETURN .F.andP;  andamp;andamp; Return with FALSE (not found).andM;Modification notesandM;To adapt BSEARCH for dBASE III PLUS, remove the RETURN values .T.andP;  and .F.andO;from the code.andP;  To call the procedure, enter: DO BSEARCH WITH &quot;andless;searchkeyandgt;&quot;andM;To adapt BSEARCH for Clipper, dBASE IV, dBXL, and Quicksilver, change thePROCEDURE BSEARCH statement to FUNCTION BSEARCH.andP;  To call the function,enter: var = BSEARCH(&quot;andless;searchkeyandgt;&quot;)andM;Remember that you must put dBXL/Quicksilver UDFs in a UDF file, then use thecommand SET UDF TO andless;udffilenameandgt;.andM;Norbert K. Mikun is a microcomputer consultant to small businesses, leader ofthe dBASE SIG for North Orange Computer Club (NOCC), and a long-time &quot;DataBased Advisor&quot; reader,.andP;  His company, Cyber Enterprises, is located inCerritos, Calif.andP;  He can be contacted at (213) 926-6021.andO;</TEXT></DOC>