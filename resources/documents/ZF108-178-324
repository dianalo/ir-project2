<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-178-324  </DOCNO><DOCID>08 178 324.andM;</DOCID><JOURNAL>Data Based Advisor  Jan 1990 v8 n1 p18(5)* Full Text COPYRIGHT Data Based Solutions 1990.andM;</JOURNAL><TITLE>The new 2.0! (Advanced Revelation)(Revelation Expert) (tutorial)</TITLE><AUTHOR>Gunther, John.andM;</AUTHOR><SUMMARY>Advanced Revelation 2.0, now in beta testing, will include somesignificant changes in terminology, including using 'tables,''rows' and 'columns' instead of 'files,' 'records' and 'fields.'andO;Advanced Revelation 2.0 will implement ANSI Standard 1.0Structured Query Language (SQL).andP;  File drivers will let usersattach dBASE III, dBASE III Plus and various ASCII file variationsas Advanced Revelation tables.andP;  A new tutorial will be included.andO;Improvements are made in the RBASIC language.andP;  Tips are given onorganizing new Advanced Revelation applications.andP;  In addition, atype-in program is provided that gives Advanced Revelation users aFILESCOPY tool, allowing users to copy an entire table withoutentering a separate statement for each one.andM;</SUMMARY><DESCRIPT>Product:   Advanced Revelation 2.0 (Data base management system) (design andconstruction).andO;Topic:     Type-In ProgramsBeta TestingData Base Management SystemsEnhancementsProduct DevelopmentTutorial.andO;Feature:   illustrationprogram.andO;Caption:   Useful utilities. (program)andM;</DESCRIPT><TEXT>The New 2.0!andM;Before continuing with last month's topic, let me go over some newinformation about version 2.0 of Advanced Revelation.andP;  The following isgleaned from the beta documentation.andP;  My copy of the beta disks themselvesdidn't arrive in time to test drive the software for this column.andM;TerminologyandM;With the introduction of AREV SQL, Revelation Technologies decided to makesome major--but appropriate--changes in their terminology.andP;  AREV &quot;files,&quot;&quot;records,&quot; and &quot;fields&quot; will now be referred to by their more academicdatabase management system (DBMS) terms &quot;tables,&quot; &quot;rows,&quot; and &quot;columns,&quot;respectively.andP;  This leaves the term &quot;file&quot; referring only to the actualoperating system files comprising a table (e.g., REV00001.LK and REV00001.OVfrom last month's examples).andM;The &quot;Base Filing System&quot; (BFS), which defines a table's native format (thestructure of the files comprising the table), is now known as &quot;table type.&quot;andO;The &quot;media name,&quot; a unique identifier for each volume that's rarely dealtwith explicitly, is now the &quot;volume identifier.&quot;andP;  The &quot;media map&quot; is now the&quot;volume directory.&quot;andP;  &quot;Field number&quot; or &quot;FMC,&quot; the physical sequence number ofa particular column in a row, is now called &quot;position.&quot;andP;  Finally, genericreferences to &quot;DOS&quot; are replaced by references to &quot;the operating system,&quot;since AREV is and will be available for a number of operating systems.andM;SQLandM;AREV now implements ANSI Standard 1.0 Structured Query Language (SQL).andP;  SQLcoexists with the traditional AREV table manipulation commands.andP;  Its useisn't required, but you should consider adopting it, because it'smathematically more rigorous and universal than proprietary techniques (andnot merely a plot to make you feel stupid).andM;One method of using SQL is to build the statement in the SQL window (whereassistance is available), then execute it by pressing the Save (F9) key.andP;  Youcan also execute SQL statements directly from TCL by entering the command&quot;SQL&quot; followed by the desired SQL statement.andM;Version 2.0 uses the following SQL statements:andM;* Data definition--Create table, create view, drop table, drop view, anddeclare.andM;* Data manipulation--Insert, delete, update, select, fetch, and alter table.andM;* Data control--Begin transaction, commit, rollback, set transaction, open,and close.andM;Extensions to the standard are provided to accommodate AREV volumes,multivalued columns, row keys, concurrent transactions, and table definitionalterations.andM;Unfortunately, ANSI 1.0 with its strong IBM influence isn't easy to use.andO;While you can do all SQL operations, the syntax required for many isconvoluted.andP;  Common, but proprietary, extensions provide a number of extraoperators, making it much easier to get to higher level SQL operations.andO;These include table operations intersect, difference, divide, and join, aswell as implicit creation of tables during a table assignment.andP;  Since itadheres to the ANSI 1.0 standard, AREV doesn't provide these conveniencesyet, and inevitably this will cause more resistance to the use of SQL.andP;  ANSI2.0 is under development and will improve the state of SQL generally.andM;Version 2.0 also includes a SQL compiler, which lets SQL statements beexecuted from within RBASIC programs, like TCL statements can be executedwith the PERFORM or EXECUTE statement.andP;  One advantage to embedding SQL isthat you can use RBASIC variables in lieu of any literal (constant) values inthe SQL statement.andP;  You can also return query results into RBASIC variables.andM;SQL uses the period character in its syntax, while common AREV practice usesperiods in table, column, and key names.andP;  Although provisions allowing thisare built into AREV's SQL, from now on periods shouldn't be used in AREVnames.andP;  For safety, use only the underscore character as a delimiter withinnames.andP;  You don't have to, but if you don't, you'll be sorry someday.andP;  Forconvenience, I use ANSI.SYS or a keyboard redefinition program to swap theunderscore and the &quot;back quote&quot; (the one under the tilde) on my keyboard.andO;This lets me use an unshifted key to type the frequently used underscore.andM;Environmental bondsandM;As promised, environmental bonds (file drivers) are provided to let youattach dBASE III, dBASE III PLUS, and numerous ASCII file variations as AREVtables.andP;  Once attached, applications deal with these tables transparently.andO;The Lotus 1-2-3 bond, which the company has mentioned frequently, isn'tincluded yet.andM;One significant change in the dBASE bond since the pre-release version isthat it now supports both AREV and dBASE (NDX) indexing.andM;Expanded memoryandM;The expanded memory support introduced in version 1.15 is unchanged.andP;  Usingexpanded memory, you can vastly increase the string space (work area)available to AREV, thereby greatly reducing the amount of disk accessrequired.andP;  A couple of implementation aspects are still clumsy or inflexible,but it's a substantial start.andM;Sophisticated 386 installations that extend RAM into the 640K to 1,024Kaddress region and EGA/VGA systems will require a reboot with a differentconfiguration to benefit from expanded memory capability.andP;  This isn'tmandatory though.andM;TutorialandM;The new tutorial includes 15 self-contained, self-running lessons.andP;  Users canbegin anywhere in the sequence.andM;Transaction processingandM;Transaction processing is critical to today's large, vital applications.andO;This scheme bundles several table updates into one unit; none is updatedunless all are updated.andP;  If the process is interrupted, the partial changesare reversed, keeping all tables synchronized.andP;  The schemes for implementingtransaction processing usually involve a lot of extra processing.andP;  Sinceperformance degradation is acknowledged in the new documentation, we'll haveto see how much impact the AREV method has.andM;Data validationandM;Until now, data conversions between internal and external formats wereimplemented separately in the various tools (WINDOW, RLIST, and user-writtenRBASIC programs).andP;  Now a new method is available that enforces conversionsautomatically as each row is read from or written to the table.andP;  Thiseliminates the need to code each conversion in each context manually.andO;Indexing has been implemented this way in AREV since version 1.0.andM;RBASIC LanguageandM;Revelation's made a number of improvements to the RBASIC language.andP;  Multilinecomments are now allowed, easing code commenting and the inclusion andexclusion of code sections during development.andP;  In addition, RBASICstatements are case insensitive, using upper and lower case for clarity.andM;Table I/O error handling has been greatly improved, with more extensive errorreporting and trapping within the program instead of an automatic systemabort.andP;  Filing system programs (BFS and MFS) now adhere to new and strictererror reporting procedures.andP;  In addition, the I/O statements withoutTHEN/ELSE clauses in their syntax now have them as recommended options:CLEARFILE, DELETE, MATWRITE, UNLOCK, WRITE, and WRITEV.andM;All row handling statements (READ, READO, MATREAD, WRITE, MATWRITE, DELETE,LOCK, and UNLOCK) can now specify the table for accessing, using either thetraditional RBASIC file variable or the table implied by specifying apreviously initialized cursor variable.andP;  The beta documentation doesn'texplain the reasons for this new method for table name specifying, exceptthat for domain level validation to be in effect (see above), READ, READO,and WRITE statements must use the cursor variable option.andP;  Incidentally,READO is a previously undocumented command that efficiently lets you read arow directly from any I/O buffers maintained in the filing system, ratherthan getting the most current version from the disk.andP;  It's rarely used andneedn't concern most programmers.andM;Wrap-up to 2.0andM;There are lots of other small changes, but I won't use up precious space heredescribing them.andP;  As I get to test drive version 2.0, I'll report further.andM;Onto organizing new applicationsandM;Okay, back to last month's topic.andP;  I finished by saying that tables specificto a new application should all be created on a volume dedicated to thatapplication.andP;  This lets these tables move easily about later when thedevelopment phase is complete.andM;As usual, there's more.andP;  First there's the matter of accounts and users.andP;  Theaccount or user name logging you on to AREV references a host of parametersthat define the way AREV looks and works.andP;  In addition, the account specifieswhich tables in each volume are accessible to you when attaching that volume.andO;For example, suppose a volume contains PRODUCTS and CUSTOMERS tablesbelonging to the SALES account, and PRODUCTS and MATERIALS tables belongingto the RESEARCH account.andP;  If you log on to the SALES account, you'll onlyhave access to SALES' two tables.andP;  If you log on to RESEARCH, you can onlyaccess its two tables.andP;  The volume contains four tables, but each accountonly sees two.andM;Another implication of accounts involves system tables.andP;  There are twoclasses of these: global tables of which there's only one copy, accessed byall accounts, and account-specific ones that duplicate for each account.andO;Examples of the former are COMMANDS (containing system menus) and SYS.MENUS(containing system menus).andP;  The latter are more numerous and includeTEMPLATES (containing the account's windows), MENUS (containing the account'smenus), and VOC (containing all TCL commands and cataloged RBASIC programsaccessible to the account).andM;The SYSPROG account in AREV is considered the administrator's account.andP;  So,many administrative functions are hard-coded to work differently, or not atall, when run from any other account.andM;The problemandM;What's this mean to a developer?andP;  If you're developing a new application fromthe SYSPROG account, which is the simplest option, you encounter a number ofpitfalls.andP;  First, you might inadvertently use a window, menu, RBASIC program,etc.andP;  that's accessible to your SYSPROG account, but not intended fordistribution with your application.andP;  Second, when it's time to copy the itemsmeant for the application from the TEMPLATES, MENUS, VOC, etc.andP;  files onto adistribution disk, you could easily copy extra, unintended records, or failto copy the necessary ones.andP;  Finally, you might inadvertently access afunction in your application that won't work when the application is run froma non-SYSPROG account.andM;The solutionandM;The solution is to create a new account specifically for your application,ensuring that all tables for that account (both system and application) arecreated on a volume dedicated to that account.andP;  Let's try it.andP;  In thisexample, we're going to create a new account, NEWACCT, on a new AREV volumeNEWVOL, in a new DOS subdirectory, NEWDIR, in the main \AREV subdirectory.andM;First, I have to discuss a detail concerning AREV's process of creating a newaccount (the MAKEACCOUNT command).andP;  If, like me, you have a set of utilitiesand enhancements to include with every application you develop, you can easethe process of including them by using my program, MAKEACCT SUPPLEMENT.andP;  Inmy example I'll assume this set of utilities will be small, containing toolsfor finishing our new account set-up process.andP;  Included are two objectprograms, $FILESCOPY and $GETVAL, in a file called OUR TOOLS, and theirassociated VOC table entries, FILESCOPY and GETVAL (see Listing 1).andM;Our MAKEACCT SUPPLEMENT program gets its information from the MAKEACCOUNTSUPPLEMENT row in the SYSTEM table.andP;  Each column in this row consists of atable name, followed by one or more row names, all separated with spaces.andO;For each column, the table will be created in NEWACCT and the specified rowswill be copied from the SYSPROG table of the same name.andP;  In our example, therow will have two columns:andM;OUR TOOLS $FILESCOPY $GETVAL VOC FILESCOPY GETVALandM;You may want to copy a variety of items from the SYSPROG accountautomatically into your new account.andP;  All it takes is the right entries inthe MAKEACCOUNT SUPPLEMENT row.andP;  If you develop a standard set of theseenhancements, you'll only make modifications once.andP;  You'll also need an emptytable named NULL.andP;  The commands for editing the record and making the NULLtable are:andM;EDIT SYSTEM MAKEACCOUNT SUPPLEMENT MAKEFILE NULLandM;Having made those entries, let's continue our example.andP;  Here's the firstgroup of TCL commands:andM;1 PC md newdir 2 SETVOLUME newvol rtp57 newdir 3 MAKEACCOUNT newacct 4MAKEACCT SUPPLEMENTandM;Line 1 creates \AREV\NEWDIR using DOS, line 2 a VOC entry for the NEWVOLvolume, line 3 the NEWACCT account and its files and records, and line 4 (seeListing 1 for the program) copies the OUR TOOLS and VOC rows specified inthose tables in NEWACCT.andM;Now escape from TCL and use the menus (Management-Logto) to get to the Logtowindow.andP;  Enter NEWACCT as the account name, and you'll be logged out ofSYSPROG and into the newly created NEWACCT.andM;Our next task is to move all those newly created NEWACCT tables from thedefault REVBOOT volume (in the \AREV directory) to the NEWVOL volume (in the\AREV\NEWDIR directory).andP;  We want them physically separated.andP;  For this we usethe FILESCOPY program (see Listing 1 again for the code), which, withforesight, we moved into NEWACCT, where we can now use it:andM;5 SELECT files if account.andP;  volume = 'NEWACCT' and --- [is greater than]QFILE = &quot; 6 FILESCOPY files to: newacct (z)andM;Line 5 creates a select list of all NEWACCT's tables, and line 6 moves thatset of tables from the REVBOOT volume to the NEWVOL volume.andP;  The only tablesstill in the REVBOOT volume is NEWACCT's VOC table, which can cause problemsif moved.andP;  The last step is:andM;7 EDIT VOC NEWACCTandM;This line creates a log-in-entry, executed when NEWACCT logs in (analogous toDOS' AUTOEXEC.BAT).andP;  Using the editor, make the following two entries in therow:andM;TCL ATTACH NEWVOLandM;You could have other log-in functions as well, but the ATTACH is essential.andO;Finish up by executing the log-in verb:andM;8 NEWACCTandM;For this application, log in as NEWACCT (AREV NEWACCT from DOS) and specifythe NEWVOL volume whenever you create a new table.andP;  Because you're notworking from the SYSPROG account, you can't rely on one of the SYSPROG-onlyfunctions.andP;  If something's missing from your regular stable of tools, you'llfind out quickly, because the only programs, windows, menus, etc.andP;  accessiblefrom NEWCATT are those you put there.andP;  When transferring your application,it's all in one volume, except for the VOC table.andM;John Gunther owns a broad spectrum consulting firm with particular strengthsin networking, applications development, and third-party support.andP;  He invitescomments and can be contacted through Data Based Advisor.andM;Listing 1--Useful UtilitiesandM;FILESCOPY is a tool AREV left out.andP;  It lets you copy entire tables, just likeFILECOPY, but without entering a separate statement for each one.andP;  The syntaxis exactly like FILECOPY, except that instead of one source table and onetarget table name, you enter at least two source table names and optionally alist of target tables.andP;  You can supply the source tables from an activesselect list.andP;  If so, the source table list in the FILESCOPY command mustconsist of the single word FILES.andP;  Option letters are the same as forFILECOPY (see the TCL section of the Technical Reference manual).andM;!FILESCOPY - Copy multiple files.andP;  *FILESCOPY must be cataloged as type VERB2(i.e.andP;  *column 1 of VOC entry must be 'VERB2').andP;  *FILESCOPY must specify atleast two source files.andP;  DECLARE SUBROUTINE MSG, RTP 49 DECLARE FUNCTIONGETVAL *Capture option letters from command line OPTIONS=' (' :GETVAL (0,125):')' *Capture target file list with *optional target volume and/oraccount TOFILES=@SENTENCE [INDEX (@SENTENCE,' TO:' ,1)+4,' (']TOFILES=TRIM(TOFILES) CONVERT ' ' TO @FM IN TOFILES *TOVOLUME is new targetvolume, if any TOVOLUME=TOFILESandless;1andgt; RTP 49 (TOVOLUME, 1, S1, STAT) IF STATTHEN TOVOLUME:=&quot; TOFILES=DELETE (TOFILES, 1, 0, 0) END ELSE TOVOLUME=&quot;*TOACCT is new target account, if any TOACCT=TOFILESandless;1andgt; EXECUTE 'SETFILEREVBOOT SYSPROG SYSTEM **' IF XLATE ('**', TOACCT, '1', 'X')='ACCOUNT' THENTOACCT:=&quot; TOFILES=DELETE (TOFILES, 1, 0, 0) END ELSE TOACCT=&quot; FLG=1 TOFILE=1*Set up andamp; execute each required FILECOPY LOOP *The first source file is thefirst word after *FILESCOPY in the command line.andP;  Remaining source *files arestored in the system-created select *list.andP;  IF FLG THEN FROMFILE=GETVAL (0,59) FLG=0 *If it is FILES, then ignore it and use *select list.andP;  IFFROMFILE='FILES' THEN READNEXT FROMFILE ELSE FLG=1 END END ELSE *Get nextsource file from select list READNEXT FROMFILE ELSE FLG=1 END UNTIL FLG *If atarget file is specified, use it.andP;  *If none, file will be copied to same name*in new account and/or volume.andP;  IF TOFILE THEN TOFILE-TOFILESandless;1andgt;TOFILES=DELETE (TOFILES, 1, 0, 0) END EXECUTE 'FILECOPY ':FROMFILE:' ---[isgreater than] TO:':TOVOLUME:TOACCT:TOFILE:OPTIONS REPEATandM;The function GETVAL used in FILESCOPY use object code features that can't berepresented in source code.andP;  As a result, it must be entered directly inhexadecimal.andP;  To ease this task I give you MAKEOBJ.andP;  To enter GETVAL, runMAKEOBJ, enter OUR TOOLSGETVAL in response to the first prompt, and enter:andM;000300020014001300000EAE8E97DEA29B8andM;in response to the second prompt.andP;  The $GETVAL object row will be created andcataloged.andM;!MAKEOBJ - Create and catalog an object program directly DECLARE SUBROUTINEMSG CLEAR MSG ('Enter table and row name of program --- [is greater than] to|to be created (space --- [is greater than] separated)', 'R', TABLE,&quot;)TABLE=TRIM (TABLE) ID=FIELD (TABLE,&quot;, 2) TABLE=FIELD (TABLE,&quot;, 1) IF ID[1, 1]EQ '$' THEN ID[1, 1]=&quot; MSG ('Enter hex codes (2 chars per byte, --- [isgreater than] no separators)', 'R', OBJ,&quot;) IF OBJ [is greater than]&quot; THENOBJ=ICONV (OBJ, HEX') IF STATUS () = 0 THEN OPEN TABLE TO F .PROG THEN WRITEOBJ TO F.PROG, ID WRITE OBJ TO F.PROG, '$':ID EXECUTE 'MAKEVOC ':TABLE:&quot;:ID:'(O)' DELETE F.PROG, ID END ELSE MSG ('W351', &quot;, &quot;, TABLE) END ELSE MSG ('Thehex string was not --- [is greater than]valid', &quot;, &quot;, &quot;) END ELSE MSG ('Noobject code was --- [is greater than]entered', &quot;, &quot;, &quot;)andM;MAKEACCT SUPPLEMENT makes files in a new account and copies records intothem.andP;  It looks at SYSTEM MAKEACCOUNT SUPPLEMENT for its parameters.andM;!MAKEACCT SUPPLEMENT - Copies specified records --- [is greater than]intofiles of a new account *Warning - no error checking in this program DECLARESUBROUTINE MSG CLEAR MSG ('Enter target account', 'R', ACCT,&quot;) MSG ('Entertarget volume', 'R', VOL,&quot;) EXECUTE 'ATTACH REVMEDIA' OPEN 'SYSTEM' TOF.SYSTEM THEN READ R.SUPP FROM F.SYTEM, 'MAKEACCOUNT SUPPLEMENT' THEN LOOPUNTIL R.SUPP=&quot; LIST=R.SUPPandless;1andgt; TABLE=LIST [1,&quot;] IF XLATE ('REVMEDIA', TABLE:'*': ACCT, 1, 'X')=&quot; THEN EXECUTE --- [is greater than] 'FILECOPY NULL TO:--- [is greater than] REVBOOT ':ACCT:' ':TABLE EXECUTE 'SETFILE REVBOOT':ACCT:' ':TABLE:' **' EXECUTE 'RECORDCOPY ':LIST:' TO: (**' R.SUPP=DELETE(R.SUPP, 1, 0, 0) REPEAT END EXECUTE [SETFILE REVBOOT ':ACCT:' VOC **'EXECUTE 'RECORDCOPY VOC ':VOL:' TO: (**' END</TEXT></DOC>