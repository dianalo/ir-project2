<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-761-840  </DOCNO><DOCID>08 761 840.andM;</DOCID><JOURNAL>Computer Language  August 1990 v7 n8 p45(12)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>A mini-browser for Pascal and C++. (tutorial)</TITLE><AUTHOR>Entsminger, Gary.andM;</AUTHOR><SUMMARY>Turbo Debugger can be used to inspect object hierarchies after aprogram is compiled, but object hierarchies in source code cannotbe inspected easily when designing a project.andP;  A browser thatreconstructs object hierarchies, allows selective type searches bykeying on the base class, automatically generates implementationcode from interface code, builds a comment database that can beused to develop documentation, establishes itself as aterminate-and-stay-resident program and generates code would solvethis problem.andP;  Object-oriented programming techniques allow such abrowser to be developed.andP;  The browser reusable object uses thefour primary properties of object-oriented programming:encapsulation, inheritance, polymorphism and dynamic style.andP;  Thesimilarities and differences of code fragments presented in bothC++ and Turbo Pascal 5.5 are shown in the examples provided.andM;</SUMMARY><DESCRIPT>Topic:     PASCALC Programming LanguageObject-Oriented ProgrammingProgram Development TechniquesTutorialProgram Development ToolsComparison.andO;Feature:   illustrationprogram.andO;Caption:   Program clbrowse. (program)Simplified linked list type. (program)In Turbo Pascal. (program)andM;</DESCRIPT><TEXT>Use this Sinalltalk-syle browser class to enhance and customize-yourobject-oriented development environment Gary Entsminger Although you can useTurbO Debugger to inspect object hierarchies after you've compiled a program,you can't easily inspect object hierarchies in source code when you'redesigning a project.andP;  Lookup tools like grep are awkward at best, forcing youto do most of the work.andM;Imagine a project consisting of 25-30 files containing 90-100 objects, manyderived from or coMposed of other objects.andP;  How do you make the connectionsthat let you use sophisticated object-oriented techniques?andM;One solution is a browser that includes objects to:andM;* Reconstruct object hierarchies, even if the objects ore spread across manyfilesandM;* Allow selective type (class or object) searches by keying on the base classandM;* Automatically generate implementatiOn definition) code from interface(description) codeandM;* Construct a comments database that can be used later to developdocumentationandM;* Establish the browser as a terminate-and-stay-resident programandM;* Generate code.andM;Whew! This is a tall order, but thanks to object-oriented programmingtechniques we can develop something as complex as a browser an object at atime without becoming overwhelmed.andM;Object-oriented programming is a new way to write programs and think aboutdesigning them - it's both a method and a philosophy.andP;  In this article we'lldesign and build a mini-browser you can use to create a more sophisticatedbrowser.andP;  The browser is a reusable object that uses the four main propertiesof object-oriented programming.andP;  encapsulation, inheritance, polymorphism,and dynamic style.andM;Although the object we're creating solves a specific problem, it's also atemplate for more complex tools.andM;Code fragments are given in both C++ and Turbo Pascal 5.5 to show some oftheir similarities and differences.andP;  Turbo Pascal 5.5 embodies many of thefeatures of C++ within a different syntax and naming convention.andP;  A TurboPascal object is a C++ class, a Turbo Pascal method is a C++ member function,new objects and classes can be created with the operator new, and so on.andP;  Ingeneral, C++ gives programmers better control over data access (via thekeywords private, public, and protected) and is a more robust object-orientedlanguage than Turbo Pascal 5.5.andP;  The examples in this article are adaptedfrom The Tao of Oiyects.(1)andM;Dynamic StyleandM;Object-oriented languages support a dynamic programming style.andP;  C and Pascalprogrammers have been able to program dynamically for a long time usingpointers.andM;Since a pointer can point to anything (an object or class, for example), aprogram can build a list of objects  made up of data and methods) whose typesand number are unknown to the program at compile time.andP;  This design allowsthe program tO add new types at run time and send messages to these typeswithout knowing exactly how the type will carry out the message.andM;A message is roughly analogous to a function call, with one key distinction:messages are general; function calls are specific.andP;  A program can sendmessages to many objects at run time (by sending one message or calling onefunction).andP;  This is known as polymorphism, and we can use it to designcomplex, flexible programs.andP;  We seldom know all the tools  types or objects)we'll need or how a program will have to be modified when we begin a complexproject.andP;  Object-oriented languages allow us to write programs that adapt tonew situations.andM;Generally we deal with complex objects (or types) by classifying them intosimpler (or more specific) types.andP;  Garment is a complex type; shirts, pants,hats, and shoes are specific types of garments.andP;  In short, types have commoncharacteristics (or data).andM;Complex objects can also have behaviors (or methods) that are conceptuallysimilar.andP;  For example, we wash garments (although we wash pants differentlyfrom the way we wash shoes or hats).andP;  And we wear garments (but we wear a hatdifferently from the way we wear shoes).andP;  &quot;Wash&quot; is a concept that garmentshave in common.andP;  But how we wash depends on the specific type of garment.andM;An object-oriented language lets us send a message (wash the shirt, wash theshoes) without knowing how the washing will be carried out.andP;  If we design ourprogram to use polymorphism, we can extend it without changing its design.andO;We can add gloves to the collection of garments and wash them when we washeverything else.andM;One way to visualize a complex object such as a program or module is as ahierarchy or family tree of objects.andP;  Each object in the list can be simpleoust data, for example) or complex (data and methods).andP;  Complex objects areeither base or derived.andP;  Base objects are at the top of the tree; derivedobjects are on branches.andM;A tree contains a program (a big object), and each node of the tree containsa program module (a smaller object).andP;  The modules can be trees themselves adinfinitum.andP;  An object has its own internal data and an interface throughwhich we request actions and information.andM;We send a message (to run a program, for example) to an object, which carriesout a task based on the message.andP;  We can write the code for these objectsourselves or use someone else's library.andP;  A program consisting of objects andthe messages we send to them is modifiable and extensible.andM;A BrowserList is a specific kind of Any TypeList, which in turn is a specifictype of List, which is abstract.andP;  DisplayStr, BackTrack, and Editor arespecific kinds of AnyType, which is a specific kind of Node, which isabstract.andP;  By using virtual methods, we can allow any object in the hierarchyto be modified long after we've put the big object (program) to use.andP;  Forexample, Editor can be reimplemented a number of ways without requiring theprogram to change.andP;  The program can just continue sending messages to Editorvia abstract data types in the hierarchy.andP;  DisplayStr can be reimplemented todisplay a prettier hierarchy (one in graphics mode) if you prefer.andM;The ability to create abstract data types is very powerful.andP;  Abstract datatypes tend to localize changes in a system.andP;  In a non-object-oriented system,a change in one module often requires a change in another.andP;  More changesrequire more time and tend to propagate bugs.andP;  Changes in an object-orientedsystem can be localized in an abstract data type since the data and functionsare contained in one package.andP;  This means you can change parts of a workingsystem without worrying about breaking other parts.andM;Inheritance and polymorphism allow you to create a base type that establishesa common interface to a group of types (created by inheritance from the basetype).andP;  If your system understands and uses the interface to the base(without knowing anything about the derived types), it can be easilyextended.andP;  To add a new type to an existing system, simply derive it from thebase type.andP;  The system only uses the base interface, so it immediately knowswhat to do with your new type (a new type of container can be opened andclosed just like any other container).andP;  Inheritance is fundamental toobject-oriented programming and has distinct advantages.andM;An abstract data type is a nice, neat package.andP;  It has automaticinitialization and cleanup (via constructors and destructors) and you caneasily create any number of variables, even at run time.andP;  All these featuresmake libraries of abstract data types very easy to reuse in new applications.andO;With inheritance, however, you can extend an existing abstract data type evenif you don't have access to its source code.andM;As we move down through the mini-browser's hierarchy, we move away from thesimple and abstract toward more complex and specific types.andP;  Base is thesimplest and most abstract type in the hierarchy.andP;  Of course, the mostcomplex type still must be created.andM;A BrowserList is more complex than an AnyTypeList, which in turn is morecomplex than a List.andP;  By deriving (or inheriting) complex types from simplerones, we significantly increase our programming power.andP;  Although we usuallythink of a program as a static implementation of a solution, object-orientedprogramming lets us extend our point of view.andP;  A program consisting ofobjects is a dynamic solution.andM;This mini-browser module has the first feature of a grown-up browser-itreconstructs an object hierarchy from either Pascal or C++ source code.andM;Reconstruction can be decomposed into several smaller problems:andM;* Getting a key object from a userandM;* Searching a specified project's files for keywords that will reconstruct ahierarchy for that key objectandM;* Displaying the results and lettin users edit the files containing objectsin the hierarchy.andM;In simplest form (this version of the mini-browser module), users specifyobjects they want to know about.andP;  The mini-browser reads a project file (tolearn the files it will use to build a hierarchy).andP;  It then reconstructseither a C++ or TurboandM;Pascal hierarchy, depending on the language specified at run time.andP;  Themethods Init_files and Init_Types handle file and hierarchy typeinitialization,andM;To keep the mini-browser as simple as possible, the code in Listing 1initializes a default project file, cltest, depending on whether the userrequested C++ or Turbo Pascal syntax.andP;  You can easily improve theseinitialization methods (and the hierarchy object) by displaying a directoryof project files or autodetecting a current project.andP;  A few lines of codewill do it without disturbing the flow of the minibrowser.andM;The mini-browser (through the Hierarchy object) searches the files specifiedin the project file, first for base types-objects or classes (through thebase method) - and then for derived types (through the derived method).andP;  Ifit finds a derived type, it determines its ancestor (through the ancestormethod) and recursively backtracks to its ancestor, adding the object name toa list.andP;  The mini-browser searches forward again for base and derived types.andO;If it finds a base type, the search is over, and it sends a message toBackTrack to display the constructed hierarchy.andP;  Depending on whether youwant to display or edit, the mini-browser sends a message to the appropriateobjectDisplayStr or Editor.andM;Each part of the mini-browser is implemented as an object, so you can easilymodify and extend the big object (the mini-browser module) without changingits overall design by reimplementing selective objects.andP;  For example, theEditor object in Listing 1 only obtains file, line, and position information.andO;To extend this module, add a method that passes this information to youreditor of choice.andP;  One line of code (and an editor library) will do it.andM;You can also make the minibrowser smarter by having it autodetect C++ andTurbo Pascal syntax or by storing key types in a separate file the browsercalls at run time.andM;Also, the mini-browser could allow more flexible syntax.andP;  This version of thebrowser consists of 1 1 objects:andM;* Base; - abstractandM;* Node;-abstractandM;* List; - abstractandM;* AnyTybe; - abstractandM;* AnyTypeList; - abstractandM;* BackTrack;-reconstructs hierarchyandM;* DisplayStr;-displays an objectandM;* Editor; - sets up for editor; gets file, line, and position informationandM;* TextFile; - sets up a text fileandM;* Hierarchy;-search mechanismsandM;* BrowserList;-module list.andM;Base, Node, and List are abstract; they're designed to handle general casesand contain no data.andP;  Base represents the first node in the program tree andonly guarantees a destructor for the tree; in TurboandM;Pascal:andM;Base = objectandM;destructor done; virtual;andM;end;andM;or in C++:andM;class BaseandM;{public:andM;virtual ~ Base();andM;};Node contains no data.andP;  It merely guarantees that each node will contain apointer to the next node; in Turbo Pascal:andM;NodePtr = ANodeandM;Node =objectandM;Next :NodePtr;andM;end;andM;or in C++:andM;class NodeandM;{Node *Next;andM;};Likewise, List contains no data, just pointers to other nodes and the methodsfor linking the list.andP;  In Turbo Pascal, a simplified linked list (sufficientfor this project) might look something like Listing 2.andP;  Use it as the basisfor a more elaborate list-processing object by adding methods as needed.andM;AnyType is also abstract, consisting of a generalized method, Action, formanipulating any type (Listing 3).andP;  Note the significant differences betweenthe Turbo Pascal and C++ in Listing 3.andP;  Turbo Pascal explicitly uses thekeywords constructor and destructor C++ repeats the class name (AnyType inthis case) to indicate a constructor and repeats the class name preceded by a~ to indicate a destructor.andP;  Also note that AnyType.Action is defined inlinein C++: virtual void Action(){};.andP;  C++ offers this shortcut, which is veryuseful for saving the overhead of calling a function when it's definedelsewhere (using AnyType :: Action, for example).andM;AnyTypeList is also abstract, consisting of a generalized method, GetNodes,for retrieving objects or types (Listing 4).andP;  Any specific type or object,such as DisplayStr acts by reimplementing the virtual Action method (Listing5).andP;  By sending one message (GetNodes), we can access any object pointed toby the Browser list without knowing the object's contents.andP;  Each object knowswhat to do when it gets the message.andM;The Turbo Pascal 5.5 code in Listing 1 maintains the module (mini-browser) inone dynamic list that can grow as needed.andP;  You don't have to set up thisabstract action machinery or keep the entire program in a single linked list,but doing so is a good starting point.andM;Since the mini-browser keeps every object in a single linked list, we simplysend messages to objects on the list when we want them to act.andP;  Themini-browser does this by traversing the list, so we need to provide somemechanism for the mini-browser to decide when it has located a correctobject.andM;This mechanism should be determined at the earliest level of abstraction.andP;  Ifwe know in advance the kinds of objects we'll want to put in a list later, wecan declare abstract versions of them and hide a few of the details fromderived objects.andP;  We anticipate future objects by declaring abstract Actionmethods that don't do anythingandM;(Listing 6).andM;If we don't know the kinds of types we'll be adding to the list, we canassign one field of the object as an ID byte.andP;  We can then ask the object toidentify itself by requesting an object's data type ID (Listing 7).andM;At first glance, the ID byte method may look wasteful and inefficient.andP;  Itdid to me, so I created and traversed a mixed list of 1,000 distinct objects.andO;The 1,000 objects that included the ID byte used a little extra memory, butthe code to traverse the list was .5K smaller and ran at exactly the samespeed.andP;  Enough said.andM;Wrap-upandM;The mini-browser sets up the mechanisms for a grown-up implementation.andP;  Toextend the mini-browser, add new objects.andP;  If the extended browser becomestoo large to keep in a single list, add new lists.andM;The potential for programmers to create more complex programs has beensignificantly increased with the development of object-oriented programmingtechniques.andP;  It's much easier to get a prototype up and running quickly inC++ or Turbo Pascal 5.5 than in more conventional structured languages.andO;Perhaps more importantly, it's easier to extend and maintain large programs.andM;By conceptualizing a program as a hierarchy (or family tree) of objects andthinking of the general (or abstract) case while solving particular problems,programmers can significantly increase productivity.andP;  Hierarchies created byusing inheritance to derive new types are conceptually simple andexceptionally flexible.andP;  Programs designed to use polymorphism and dynamictechniques are exceptionally powerful and extensible.andP;  Let's hear it forsimple, flexible, powerful, and extensible !andP;  ReferenceandM;1.andP;  Eckel, Bruce, and Gary Entsminger.andP;  The Tao of Objects (manuscript).andM;Gary Entsminger is a writer, programmer, and consultant specializing increative solutions.andP;  He can be reached at the Rocky Mountain BiologicalLaboratory, Crested Butte, Colo.andP;  81224, or on CompuServe as 71141,3006.andO;Besides the numerous syntactical differences (brackets, equal signs,seimi-colon position, declaration orders, and so on) between C ++ and TurboPascal, a few key differences can be emphasized:andM;* Naming conventions-C++ uses the keyword class and Pascal uses the keywordobject for type.andP;  Whether you choose to think in C+ + or Pascal, the bottomline in object-oriented programming is the ability to create new types thatthe compiler treats as built-in.andM;* Data access-By default, C+ + data and member functions (methods) areprivate and must be explicity declared as public to be derived by newclasses.andP;  Since Turbo Pascal objects are always public, no data-accessdistinction is necessary.andM;For simplicity and consistency, the mini-browser's types are all public,following Turbo Pascal convention.andP;  C++ programmers will want to use C++data-access flexibility in large projects, probably by making most dataprivate rather than public.andM;* Constructors and destructors-In C++, constructors and destructors share theclass name.andP;  In Pascal, constructors are declared by.andP;  explicitly us ing thekeywords constructor and destructorandM;* Advanced features - C++ has more robust features such as inline functions,multiple inheritance, and operator overloading.andO;</TEXT></DOC>