<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-462-076  </DOCNO><DOCID>08 462 076.andM;</DOCID><JOURNAL>PC Week  May 22 1990 v7 n20 p50(1)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1990.andM;</JOURNAL><TITLE>Software's future lies in cooperative-processing systems. (trendsin software development)(Applied Intelligence) (column)</TITLE><AUTHOR>Martin, James.andM;</AUTHOR><SUMMARY>Major trends affecting software development today include thegrowth of end-use computing, graphical user interfaces, theintroduction of integrated computer aided software engineering(I-CASE) tools, and integrated computing environments such asIBM's SAA and DEC's Network Application Support.andP;  These tools andenvironments allow the construction of enterprise-wide cooperativeprocessing systems that distribute data across multiple platforms.andO;Increasingly powerful hardware demands the use of powerfuloperating systems such as OS/2 and Unix, and query languages alloweasy access to large databases.andP;  COBOL applications in the 1990swill be generated automatically via CASE tools which create sourcecode from user-entered specifications.andP;  Ongoing CASE developmentwill be the most significant software trend, as products haveevolved from graphical editors to complete front ends.andM;</SUMMARY><DESCRIPT>Topic:     Program Development TechniquesProgram Development ToolsTrendsDistributed ProcessingClient/Server Architecture.andO;Feature:   illustrationchart.andO;Caption:   The building blocks of enterprisewide cooperative-processingsystems. (chart)andM;</DESCRIPT><TEXT>This is the second in a series of articles on key industry trends affectingcomputer hardware, software, database environments and communicationsenvironments.andM;Trends in computer software are changing rapidly, posing challenges for manyorganizations.andP;  Some of the trends are the growth of end-user computing; thetransition to graphical user interfaces; the introduction of powerfuldevelopment tools, such as integrated computer-aided software engineering(I-CASE) tools; and the growing commitment to integrated computingenvironments, such as IBM's Systems Application Architecture (SAA) andDigital Equipment Corp.'s Network Application Support (NAS).andM;These architectures and tools will increasingly be used to buildenterprisewide cooperative-processing systems that distribute data andprocesses across multiple hardware platforms (see chart).andP;  At the same time,the widespread adoption of software standards will provide consistentoperation of graphical user interfaces, programming interfaces, communicationinterfaces and repository standards.andM;Software StrategiesandM;By the end of the 1980s, many large organizations had adopted a strategy forsoftware use within the firm.andP;  Off-the-shelf PC applications were commonlyused by office workers and other end users, query languages anddecision-support systems were used by business analysts, fourth-generationlanguages were used for the creation of departmental applications and somecorporate systems, and COBOL was still pervasive as the de facto language ofinformation systems.andP;  But the language infrastructure will crumble in the1990s.andM;While end users will continue to require the functionality of off-the-shelfproducts, they will demand that the functionality of several products beintegrated and user interfaces be standardized.andP;  Much of this integrationwill be achieved through the use of multitasking operating systems such asOS/2 and graphical user interfaces such as Windows 3.0 and PresentationManager.andM;While both Windows 3.0 and Presentation Manager offer many of the sameinterface and multitasking features, the underlying operating systems differradically.andM;The Windows 3.0 interface operates within the DOS environment.andP;  As such,applications are limited to single tasks and restricted to a base memory of640K bytes.andP;  A restricted form of multitasking is available by switchingbanks of 640K bytes from extended memory to base memory.andM;However, this solution cannot be used as a platform for the development oflarge, complex applications.andP;  Already, the basic kernel software of I-CASEtools can barely operate within the base memory of 640K bytes.andP;  If thehigh-speed loop of these products exceeds 640K bytes, the bank-switchingfunctions provided by DOS extenders and products such as Windows 3.0 will notprovide a solution.andP;  Because of the fundamental limitations of DOS, high-endCASE tools are likely to migrate rapidly to OS/2.andM;As the hardware computing resources increase in functionality, DOS andWindows 3.0 will not be able to fully exploit the capabilities of thehardware; OS/2 and Presentation Manager, which support both multitasking anddirect addressing of large memory applications, will.andM;The use of query languages and decision-support languages will enable usersto more easily access and analyze large databases.andP;  Except for sophisticatedmathematical analyses, much of the data access and manipulation will beperformed using graphical and forms-based user interfaces.andM;It's not like the early 1980s, when a user had to understand both thephysical data structure and a precise language syntax for performing a query;newer facilities allow the user to concentrate on the semantic meaning of therequest.andP;  In addition, the use of artificial intelligence and naturallanguage techniques will assist the user.andP;  These more powerful -- yet easierto use -- query and decision-support systems will become the basis forcommonplace executive information systems.andM;Fourth-generation languages will continue to evolve in several significantways.andP;  First, the languages will become more portable -- moving to smallercomputing platforms.andP;  They will also improve in power, performance andintegrated capabilities.andM;COBOL will continue to retain its place in the IS organization, but will takeon a new image.andP;  Rather than users coding applications by hand, COBOLapplications will be generated automatically via CASE tools.andP;  Current CASEproducts let the user enter specifications using graphical metaphors andsymbols.andP;  The specifications are checked for accuracy and completeness, thenused as input to source-code generators.andP;  While these techniques are in theirinfancy today, they will become the standard means by which applications aredeveloped and maintained in the future.andM;More important than the elimination of hand coding and the development ofCOBOL applications, CASE products will also assist in the maintenance ofexisting COBOL systems.andP;  Reverse-engineering and re-engineering of existingapplications through the use of CASE products will continue to preservesoftware investments.andM;Perhaps the most significant trend in computer software will be the ongoingdevelopment in the field of CASE.andP;  CASE products have evolved from simplegraphical editors with data dictionaries to robust front-end tools thatenfranchise systems-development methodologies.andM;Several CASE products are now capable of supporting the entiresystems-development life cycle, from business planning through testing andenhancement of the application.andP;  Users will be assisted with expert-systemrules that ensure methodologies are being followed.andP;  Once the application hasbeen defined and specified, the user will select an appropriate languageversion, and the application will be automatically generated.andM;CASE products that provide much of this functionality are already in themarket.andP;  The products will continue to improve by adding facilities thatmathematically or logically validate the systems design, incorporate AI andexpert systems techniques, and generate multiple language versions from asingular set of specifications.andM;Client/Server ApplicationsandM;CASE software products will also evolve to support the development ofclient/server-based applications.andP;  In a client/server application, theapplication, data and computing resources may be distributed throughout anetwork.andP;  Developing applications that are optimally tuned for networkdistribution is today a complex task, inhibiting the growth of theclient/server architecture.andM;A current obstacle in the CASE market is the lack of standardization amongvendors, particularly in the repository.andP;  It is not currently feasible to mixand match facilities from several vendors into an integrated CASEenvironment.andP;  The repository becomes the focal point for linking diagrammingfacilities, design analyzers, code generators, documentation generators andproject-management aids.andM;Without a common repository for storing specifications, users are unable toselect a preferred tool to support a specific function or phase of thesystems-development life cycle.andP;  As a result, single-vendor I-CASE productscurrently offer the only solution for complete life-cycle coverage.andM;Next week's focus will be the major trends now occurring in database-accesssoftware.andM;----------The concepts embodied in this article are described in the High-ProductivityTechnology volume in The James Martin Report Series.andP;  For more information onthis volume, call (617) 639-1958.andP;  For information on seminars, contact (inthe United States and Canada) Technology Transfer Institute, 741 10th St.,andO;Santa Monica, Calif.andP;  90402 (213) 394-8305.andP;  In Europe, contact Savant, 2 NewSt., Carnforth, Lancs., LA5 9BX United Kingdom (0524) 734 505.andO;</TEXT></DOC>