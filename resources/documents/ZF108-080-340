<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-080-340  </DOCNO><DOCID>08 080 340.andM;</DOCID><JOURNAL>UNIX Review  Jan 1990 v8 n1 p50(7)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Interview: Joel Birnbaum. (interview)</TITLE><AUTHOR>Chandler, David.andM;</AUTHOR><SUMMARY>Joel Birnbaum, VP and General Manager of Hewlett Packard Co'sInformation Architecture Group, discusses the future of computingduring the 1990s.andP;  Birnbaum offers the concept of 'domestication'of computers, the term he uses to indicate the idea of makingcomputers accessible to the general public.andP;  Another conceptBirnbaum discusses is that of pervasive technology.andP;  A pervasivetechnology is one that is made conspicuous by its absence, forexample, the lack of a telephone in a motel room.andP;  Pervasivetechnologies have four stages of development: laboratorycuriosity, instrument used for a narrow class of applications byexperts, commonplace object used by a relatively small segment ofthe population, pervasive product usable by almost everyone.andP;  Twothings are needed to move from stage three to stage four: generalaccessibility and a supporting infrastructure.andP;  For a supportinginfrastructure to develop, people must be convinced of thebenefits of a technology and a set of international standards mustbe developed for the technology.andP;  Birnbaum also discusses thechanges that must be made to Unix before it will be able to serveas the software core for a pervasive computer technology.andM;</SUMMARY><DESCRIPT>Company:   Hewlett-Packard Co. (officials and employees).andO;Topic:     InterviewFuture of Computing.andO;Feature:   illustrationportrait.andO;Caption:   Joel Birnbaum. (portrait)Person:    Birnbaum, Joel S. (interviews).andM;</DESCRIPT><TEXT>Interview JOEL BIRNBAUMandM;When we caught up with Joel Birnbaum at Hewlett-Packard's offices inCupertino, CA, he had just returned the previous evening from Washington, DC,where he had been officially accepted into the National Academy ofEngineering.andP;  One of the industry's more prestigious honors, such membershiphas been previously bestowed on only six others at his company in the entirehalf-century history of Hewlett-Packard--and that number includes bothHewlett and Packard.andM;Birnbaum, though, has made a habit of keeping good company.andP;  He was a varsitybaseball player and fraternity president during his undergraduate days atCornell, and went on to receive his master's and doctorate degrees inexperimental nuclear physics at Yale.andP;  He was quite well acquainted withcomputing by that time, having worked as a systems prgrammer for IBM duringgraduate school and using computer analysis in researching his thesis topic,&quot;Heavy Ion Nucleon Transfer Reactions at High Energy&quot;.andM;He maintained his contacts with Yale after graduation, and joined IBM's T.J.andO;Watson Research Laboratory in Yorktown Heights, NY.andP;  There he headed a jointproject with his alma mater and the Atomic Energy Commission to develop anon-line data acquisition and control system for the Emperor Tandem Van deGraaff accelerator.andP;  In 1967 he was promoted to manager of experimentalsystems, and in that capacity he worked on developing a timeshareddata-acquisition system and a multitasking operating system for real-timecontrol.andM;Birnbaum remained with IBM throughout the 1970s, eventually becoming thedirector of computer science at the Yorktown Heights Lab.andP;  Among thetechnologies developed there were the first RISC computer (the 801), therelational database product Query-by-Example, and a voice store-and-forwardmail system.andM;In late 1980, Birnbaum joined HP to head to newly established ComputerResearch Center in Palo Alto, CA.andP;  It was there that the Spectrum program wasinitiated, a project that led to the consolidation of all HP computerproducts into what is now known as the Precision Architecture line.andP;  Over thecourse of the decade, Birnbaum advanced to become corporate vice president ofHP Laboratories, general manager of the Information Technology Group, andfinally vice president and general manager of the Information ArchitectureGroup.andP;  He also manages to keep himself busy outside HP by serving on theResearch Roundtable of the National Academy of Sciences, and on theEngineering Councils of Carnegie Mellon, Cornell, Stanford, USC, and theBeckman Institute of the University of Illinois.andM;REVIEW: After you came to HP in the early 1980s, you made several publicstatements about the directions you saw computer technology taking.andP;  What wasthe setting for the presentation of your thoughts, and what were some of thethings you said at that time?andM;BIRNBAUM: In 1983, Columbia University dedicated a new computer-sciencebuilding, and had a symposium with people who talked about futures andpresented ideas about computers in society.andP;  The proceedings of thatsymposium wound up being published as a book because there were so manyrequests for some of the papers.andP;  Herb Simon was one of the speakers, as wereArno Penzias, Bob Spinrad, and myself.andM;The talk I gave there marked the first time outside HP that I had raised theidea of the &quot;domestication&quot; of computers, which was actually something I'vebeen working on for probably the last 15 years (the last nine here at HP andthe previous six at IBM).andP;  I think that much of what we at HP have beenworking on--particularly in our research division, and now increasingly inour product lines (notably those lines that relate to open systems whichinvolve UNIX and the interconnect software that surrounds it)--has been basedon that vision of making computers accessible to ordinary people.andM;REVIEW: Given your experience at IBM in the '60s and '70s, what were yourthoughts about technology as you came to HP in 1980?andP;  Which technologiesunder development at that time did you think would lead to the products wehave today?andM;BIRNBAUM: One of the main emphases at IBM Research, specifically at Yorktown,was on computer architecture and, particularly, on reducing its complexity,focusing on those components responsible for functions the computer performedmost frequently.andP;  This produces a better match between the storage hierarchyand the processor.andP;  The speed with which you can deliver information to theprocessor has fallen far behind the processor's ability to executeinstructions.andP;  VLSI technology is one important reason for this; a second isthe difficulty of building a machine that's pipelined and which has acompiler sophisticated enough to take advantage of the storage hierarchy.andM;We spent a lot of time at HP Labs thinking about VLSI machines, and took alot of performance measurements.andP;  I expected--and it looks like this hashappened --that old notions of what computers were used for would fall by thewayside, and that a one-time substantial advance in serial architecture couldtake place.andP;  This advance led to the RISC-versus-CISC controversy, but Ithink the fight is over.andP;  RISC isn't a new type of computer design; it's justa technique for designing systems that has been made possible by ourincreasing ability to accurately measure what is actually happening insidethe computer.andM;A paper I wrote, projecting the RISC-CISC controversy would lead to arevolution in terms of how much processing power could fit on a chip, waspublished in an issue of Science in 1981.andP;  The paper stated that the timewould come when microprocessor performance would start to rival theperformance of a mainframe--at the throughput level.andP;  This hasn't happenedyet.andP;  Popular RISC microprocessors today are very good for workstations, PCs,and small multi-user systems, but they don't have the backup capabilities atthe system level to deliver and manage information that 1000-user systems do.andO;That's going to change soon, however.andP;  It's taking longer than I thought itwould.andM;Most important are the questions of what people will use their computers for,and how they will use them.andP;  Expanding the capabilities and accessibility ofcomputers so that they become a pervasive technology requires great advancesin performance.andP;  One small advance in performance is building a betterserialized architecture--that's what RISC technology is all about.andP;  The realperformance breakthroughs must be achieved through concurrency, by buildingmachines that execute in parallel.andP;  We already build machines that areparallel in a small sense, and we're learning enough about how to buildspecialized parallel machines that, if they can be connected as servers thathandle networking software transparently, will lead to really bigimprovements.andP;  One main area in which I've spent a lot of my own researchtime--and IBM's and HP's resources--is improvements in system-levelperformance.andM;Another thing I thought was going to happen--but it's been much slower incoming--is that an infrastructure connecting heterogeneous computers woulddevelop and perform like, say, the telephone system.andP;  I expect computers tobecome ubiquitous information appliances connected to this infrastructure.andM;Another area in which real progress is being made is in user interfaces thatwill be created to hide the complexity of the systems behind them in aneffective fashion.andP;  Now, I'm not talking about whether you use Macs, ortouchscreens, or speech or video.andP;  I'm talking about a software technologycapable of representing abstractions of functions and capabilities in theform of mental models that would be easy for users to understand, and whichare independent of particular machinery.andM;An example is that electric starter in a car, which presents a mental modelcalled &quot;on&quot;, that spares people from worrying about ignition sequences andchokes.andP;  Advances like this produce changes in society.andP;  In particular, theignition switch in automobiles changed the demography of developed nations byenabling anyone--even someone without technical training--to become a driver.andO;The specific technology was not the only thing that brought about thechange--an infrastructure was needed as well.andM;I think this is the main theme I've been harping on for a long time: makingcomputers accessible to everybody.andP;  This goal has led me to focus on certaintechnologies, as we have been forced into a world that is more regulated andmore standards-driven.andP;  I voted for the UNIX system many years ago (HPstarted considering UNIX seriously in 1981, and committed to it publicly in1983) not because I think UNIX is so wonderful as an operating system, orthat it is as good as proprietary systems at certain things.andP;  It's certainlynot because it's easy to use.andP;  But we think it has the best chance to becomethe kernel of an operating system that everybody can rally around.andP;  Thereason this is so important to us has to do with the way we think the worldis going to evolve, and the business we hope to build as a result.andM;I think that there are reasons to believe that computers will becomeomnipresent in all facets of society--although I'm not particularly good atpredicting the time-frames of such things.andP;  I think I've always been toooptimistic throughout my career, because I've spent most of my life as aresearch guy; I think about what I'd like to see happen.andM;REVIEW: As we begin a new decade, what key computing technologies do youanticipate will come to the fore during the next ten years?andM;BIRNBAUM: The story, in my mind, starts with people's perceptions ofcomputers.andP;  I used to keep a file of things that were written aboutcomputers--entertainment, advertisements, even comic strips--that alwaysportrayed computers as things people hated.andP;  It was always a paradox to methat my colleagues and I thought the computer was a wonderful thing--not onlyan exotic electronic toy for us, but something we thought could unlock manyhuman capabilities, and free people from both hazardous activities androutine drudgery.andM;This anti-technology slant of the media, and of society in general, got methinking about why people fe}el so bad about computers, and what it wouldreally take for computers to become &quot;pervasive&quot;.andP;  I started using that wordto refer to technology that's more noticeable by its absence than by itspresence.andP;  In our society, a telephone is a pervasive technology: if you wentto a hotel and there was no telephone in your room, you'd be very surprised.andO;But if there was no personal computer, you wouldn't be surprised at all; infact, you'd be astonished if there was one--or even if there was a port toplug your own PC into.andM;Another trait of pervasiveness--such as that of telephones, TVs, cars, evenindoor plumbing--is that pervasive technologies are often regulated orstandardized by a government or consortium of governments, which allows themto transcend political boundaries.andP;  You can use a telephone to call anywherein the world.andP;  But there was a time when all the national telephone systemshad different signaling codes and wiring schemes.andP;  There are stilldifferences in trunk lines and other system components, but at nationalboundaries, the nations of the world have agreed that it's worth giving uptheir individual proprietary interests to help create the infrastructure thatlets you call from the US to Moscow or Beijing.andP;  That kind of advance hasn'tbeen achieved in the computing arena yet.andM;So I got to thinking about how a technology like the telephone has becomepervasive in developed nations.andP;  My colleague John Doyle created a simplemodel.andP;  Pervasive technologies see four progressive stages of development: alaboratory curiosity (of a scientist or engineer); an instrument used tosolve a very narrow class of problems used by experts who don't worry about&quot;usability&quot; or &quot;infrastructure&quot;; an object that is manufacturable and becomescommonplace, but still is used by a relatively small fraction of thepopulation; and, finally, a product that becomes pervasive and can be used bymost everyone.andM;So the operational question is, &quot;Once you've reached the third stage, whatdoes it take to get to the fourth?&quot;andP;  It was in considering this that I usedthe phrase &quot;the domestication of computers&quot;, because I think there are manyparallels between the use of computers and the taming of wild animals--andthe selective breeding of the animals, once they have been tamed, to makethem more effective at doing a job.andM;REVIEW: So, what do you need to achieve pervasiveness?andM;BIRNBAUM: You need two things.andP;  One is general accessibility, which is what Imean by &quot;taming&quot;.andP;  A circus lion that's handled by a lion tamer is not agenerally accessible animal, for the same reason that computers are not tamedtoday.andP;  The lion tamer is no more a common character in our society than theprogrammer programming in so-called high-level languages.andP;  The first task isto somehow create an interface that hides the complexity of the technology.andO;If you look at technologies that are already pervasive, you find that thecritical step in going from the third stage to the fourth stage is gettingthe technology to hide its own complexity.andP;  The complexity is stillthere--there's a great deal of it behind your telephone--but the technologyhas evolved to the point where the average user doing the average thing withit doesn't have to be concerned about it.andM;A lot of people think computers have reached the fourth stage because we usescreen icons and mouse buttons.andP;  But ask them to use these tools to integratetwo databases, or connect a local spreadsheet to someone else's printer in aforeign country, and they find out very quickly that, in fact, they stillneed to know an enormous amount about the sequence of operations in order toeffect their completion.andP;  There isn't yet a single, general mental model foroperating a computer.andM;The success of the Mac, and of Apple's technology on the whole, stems fromthe fact that the implementation is sufficiently congenial to convert peoplewho previously weren't computer users.andP;  One thing you can always beabsolutely sure of is that in the fourth stage of a developing technology,almost all the users are beginners.andP;  As a vendor, the better you hide thetechnology, the more successful the product will be.andM;REVIEW: You said that two things were required for a technology to achievepervasiveness.andP;  One is general accessibility.andP;  What's the second?andM;BIRNAUM: A lot of technologies have made it to the third stage but never tothe fourth: dirigibles, for instance, or quadraphonic sound, ortrolleys--there's an enormous list, actually.andP;  So what does it take, besidesthe user interface, for a technology to become ubiquitous?andP;  The secondrequirement is an infrastructure that supports the technology.andP;  Take cars,for example: you need not only a network of roads--but also gas stations,standard traffic signals...the list goes on.andP;  A key point is that you needpeople to think that the value the technology brings is sufficient to warrantinvestment in a huge infrastructure.andP;  And then it means that a set ofinternationally regulated standards must become durable enough so that peoplecan invent products on either side of the interface.andM;An example I often give is the electrical power system.andP;  If you think of theplug as the interface, that's been pretty much the same for most of thiscentury.andP;  What's behind it has changed wildly: nuclear power, solar power,different forms of grid-switching systems that are now computer-controlled.andO;There's been a huge amount of invention in the infrastructure, but also ahuge amount of invention in what sorts of things can be powered byelectricity.andP;  The designers of the original infrastructure had no notion of acompact disk player or a microwave oven.andP;  But because there is a uniforminterface, people are free to invent any appliances they want, so long asthey follow the rules of the interface; and the people providing electricalpower are free to do that in whatever way is best, so long as they follow therules of the interface.andM;So you need an infrastructure for computers if they are to becomepervasive--in fact, what you need is an information infrastructure.andP;  And youalso need people to agree on a set of durable, consistent interfaces--somehardware, some software--so that people have confidence that new applicationsand new computers on the &quot;inside&quot; of the interface will develop; and as theydevelop new ways of interconnecting to provide services to the other side,the whole system will develop into something that endures.andP;  This hasn'thappened yet because, for one thing, you still need a plethora of networksand network protocols to do simple things.andP;  Also, it is a hard technicalproblem.andM;REVIEW: You referred earlier to UNIX's role in this infrastructure.andP;  Couldyou elaborate on that?andM;BIRNBAUM: A common software core will be required by such an infrastructure.andO;UNIX is still woefully inadequate to play that role; it's missing many of thecritical services that will be required.andP;  It doesn't yet provide faulttolerance, its network-level error recovery is less ambitious than what MVSand VMS provide today, its real-time services are primitive, and it has alimited developer interface.andP;  It now does better what it was originallydesigned to do, but in order for it to be the micro-kernel to which all thevalue can be added by database, user-interface, or network-managementdevelopers, UNIX is going to have to grow.andP;  It will have to have capabilitiesadded to it in a more layered fashion than was done previously, so thatvendors can build on it.andM;The Open Software Foundation was chartered to develop UNIX in this direction.andO;One of the reasons a number of companies were unhappy with ATandamp;T andSun--beyond all the sociopolitical and competitive things--was that the UNIXbase has grown in an unplanned, non-strategic, for too monolithic way topermit the gradual accretion of facilities that will be needed in the serversand clients of a global network that provides computing as a pervasivetechnology.andM;REVIEW: Is it your sense that the computing industry at large will come tohold this view you describe?andM;BIRNBAUM: I guess a lot of this really depends on whether you believe therewill be an &quot;information utility&quot;, and that things you plug into it willreally get to the level of being &quot;information appliances&quot;.andP;  I see no reasonwhy it shouldn't happen.andP;  And when it happens, people won't think of acomputer as a computer any longer.andP;  If you think of consumer appliancestoday, they have names like &quot;vacuum cleaner&quot;, &quot;refrigerator&quot;, &quot;ice maker&quot;,&quot;toaster&quot;...they are named for what they do.andP;  Computers need to be thought ofin terms of functionality, and for this to happen, you have to have aninterface and an infrastructure.andM;Now, there are some tricky problems in bringing this about.andP;  One, of course,is the huge investment in standards that's needed.andP;  The other thing is thatI've glibly talked about adding enormous complexity to the system, makingmany computers do what one computer does today, and using multiple operatingsystems created by different vendors in different physical locations as if itwere easy.andP;  Of course, it is not easy--in fact, it's a very complicatedtechnical challenge that won't be solved unless companies are reallyconvinced that the payoff is great enough for them to spend a large fractionof their Randamp;D dollars over the next decade on creating this informationinfrastructure.andP;  Otherwise, the computer business could end up being like thedirigible: it won't reach the fourth stage.andP;  This problem is not going to besolved easily; progress will come incrementally.andM;REVIEW: What's will be the most important technology during the next tenyears?andM;BIRNBAUM: I don't think I can name just one.andP;  But I'll give you a hedginganswer.andP;  I think the thing that we as a computer industry are worst at issystem design.andP;  We're good at designing separate parts, and we're bad atmaking the tradeoffs with the totality.andP;  Every engineer learns early in hisor her education about tradeoffs, and optimizes for a particular set offeatures in a final product.andP;  The most important technology that needs tochange is our ability to make those individual tradeoffs.andM;Also, parallelism is tremendously important, because it could potentiallyincrease performance by orders of magnitude.andP;  Programming is also a keytechnology.andP;  Seventy percent of our computer business staff at HP areprogrammers; it will be 80 percent soon, and then 90 percent.andP;  The hardwareportion has gone down in size, and we're getting more efficient at buildingmachines.andM;But as I've said repeatedly, on the larger scale at which this discussion hastaken place, the two most important things are the user interface and theinfrastructure.andP;  My dream for computers is that they become domesticated andused as tools for communication and computation for the benefit of allpeople.andO;</TEXT></DOC>