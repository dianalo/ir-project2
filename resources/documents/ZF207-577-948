<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-577-948  </DOCNO><DOCID>07 577 948.andM;</DOCID><JOURNAL>Hewlett-Packard Journal  August 1989 v40 n4 p23(9)* Full Text COPYRIGHT Hewlett Packard 1989.andM;</JOURNAL><TITLE>The NewWave Office. (the user interface's tools and methods)</TITLE><AUTHOR>Lam, Beatrice; Hanson, Scott A.; Day, Anthony J.andM;</AUTHOR><SUMMARY>The NewWave Office is the user interface for Hewlett-Packard's(HP) window-oriented operating environment.andP;  The mouse-driveninterface is based on the concept of an office, providing icons torepresent utilizable objects in the office as well as otherfacilities, such as diagnostic tools.andP;  NewWave Office's windowincludes such functional objects as file drawers, a wastebasket,printer interfaces, agents for moving data, and user-created filefolders, consisting of data and applications.andP;  Facilities areavailable for creating, installing, interfacing, moving, andopening and using objects.andP;  Each of these is described.andP;  TheNewWave Office works with the NewWaves Object Management Facilityto provide a consistent supporting architecture for all NewWaveapplications.andM;</SUMMARY><DESCRIPT>Company:   Hewlett-Packard Co. (products).andO;Ticker:    HWP.andO;Product:   NewWave (Graphical user interface) (product specifications).andO;Topic:     User InterfaceWindowingOperating EnvironmentsSpecificationsSystem Design.andO;Feature:   illustrationchart.andO;Caption:   The architecture of the NewWave Office. (chart)andM;</DESCRIPT><TEXT>The NewWave OfficeandM;THE NEWWAVE OFFICE IS THE FOCAL POINT for the user's interaction with theNewWave environment, and it is the first NewWave object the user sees whenthe NewWave environment is initialized.andP;  It remains active throughout theentire session until the user terminates the NewWave environment.andP;  Itincorporates many special features to reinforce the office concept in theminds of users.andP;  These features include iconic representation of tools foundin a real office, such as a file drawer, a wastepaper basket, a printer, andso on (see fig.andP;  1).andP;  The diagnostic tool shown in Fig.andP;  1 is not a typicaltool found in an office, but is a tool that enables NewWave applicationdevelopers to interface to the NewWave object management facility (OMF).andM;It is easy to work with these tools using a mouse to manipulate the iconsthat represent the tools.andP;  The tools are NewWave objects, as explained in thearticle on page 9.andP;  The user can either open the tool and move other NewWaveobjects directly into the opened tool window, or drop other objects on theicon representing the tool.andP;  Incoming objects are handled by each toolaccording to the function of the tool.andP;  The file drawer and the wastebasketaccept the incoming object and display its representation in their windows.andO;The printer, on the other hand, asks the object to print itself on theselected printer device.andP;  The diagnostic tool accepts an incoming object intoits window and displays the OMF information pertaining to that object.andP;  Inaddition to viewing objects as icons, the user has the option to switch intothe list view.andP;  In the list view, the title, type, and modified date aredisplayed, and the objects are sorted by one of these parameters (see Fig.andO;2).andM;This article describes the main features of the NewWave Office and shows howthese features interact with the other NewWave components shown in Fig.andP;  3.andM;NewWave WindowsandM;The window that represents the NewWave Office is designed to remain as abackground window while NewWave objects are open as pop-up windows over it.andO;Activating an object window brings it to the top, overlapping other windowson the display (see Fig.andP;  4).andP;  Since the office tools are always available,the user can easily manipulate an object from its window onto a tool at anytime (e.g., moving a document to the wastebasket from a folder's window).andO;Another distinct feature of the Office window is its maximized window.andP;  Whenthe NewWave Office window is maximized, all object windows remain in the samepositions while the Office window occupies the full screen in the background.andO;When an object window is maximized, the object is brought to full screen andall other windows fall behind.andP;  The Office window can also be minimized; thishides all object windows and turns the whole NewWave Office into an icon.andM;To achieve these special display features, the NewWave Office uses functionsfrom the library HPNWLIB.EXE.andP;  These functions are:andM;* NW_CreateWindow.andP;  This function creates an object's main window and bindsthe object window as a child to the NewWave Office window.andM;* NW_Minimize and NW_Maximize.andP;  These functions perform the window maximizeand minimize operations described above.andM;* NW_Restore.andP;  This function returns a window from a maximized or minimizedstate to its original size.andM;The default windows for the file drawer, the wastebasket, and folders arepositioned in the NewWave Office window as shown in Fig.andP;  4.andP;  The firstwindow is positioned about halfway down the screen and partway in from theleft, and the rest are staggered down and to the right of the other defaultwindows.andP;  By using a defined parameter to the NW_CreateWindow function,NewWave applications can create default windows for themselves.andM;Container ObjectsandM;The NewWave Office is used as a temporary work space to store objects theuser is currently working on.andP;  The file drawer and folders provide theNewWave user with a convenient hierarchical filing and retrieval system tomanage information.andP;  The wastebasket is used for discarding objects the userno longer needs, and a user-defined maximum number of objects can be set totrigger automatic emptying of the wastebasket when it opens.andP;  These fourobjects are called container objects because they are capable of containingother objects (e.g., the file drawer contains folders and folders containdocuments, and so on).andP;  These objects display and manage their child objectsin identical ways.andP;  The menu for each of these object types is customized tothe particular needs of that object.andP;  For instance, the wastebasket's Editmenu has the Delete command, whereas all other object types use the ThrowAway command.andM;The NewWave Office, the file drawer, the wastebasket, and folders share thesame executable code.andP;  Every invocation of the same code is an instance, afeature provided by the Microsoft [R] Windows environment.andP;  For efficiency,only a single copy of the code is in memory, even though there are multipleinstances running.andP;  The code is made up of multiple code segments, and onlythose segments in use are kept in memory.andP;  As other segments are needed, theyare read in from disc.andP;  Each instance has its own data segment, whichincludes global variables, the stack, and a local heap.andM;When the first instance of the NewWave Office starts up, it computes certainenvironment variables and stores the results into some global variables.andO;Also, several text fonts, paintbrushes, cursors, and other items are createdand stored.andP;  Each succeeding instance needs to use these same items, and socopies them to its own data segment at start-up time instead of recomputingand recreating them itself.andM;When the user runs another instance from the NewWave Office, such as the filedrawer or folder, that object must open up to the same state it was in whenlast closed.andP;  This includes the object's window size and position, whether itwas in iconic view or list view, where th window was scrolled to, and more.andO;To do this, most of the needed information is kept in a data file associatedwith the object.andP;  The information is read from the data file and placed inthe appropriate global variables for use when creating and displaying theinstance's window.andM;The container must also determine the list of children contained within it(e.g., the list of folders in the file drawer).andP;  This information is alsokept in the data file and is read in and placed in data structures inglobally allocated memory.andP;  The children information, which is kept in thedata file, is not always up to date.andP;  While the container was closed, newchildren may have been added, titles may have changed, children may have beenopened or closed, and so on.andP;  The first situation might have occurred as aresult of the OMF_AddChildTo function (discussed on page 30), and the lattertwo would have occurred because the container is shared with other objects.andO;To ensure that the data in the data file is correct when the child object isopened, the latest list of children that belong to the container, andinformation about them, are obtained from the OMF.andP;  The information given bythe OMF always overrides the data file, and when a container is opened acheck is made with the OMF before finalizing the data structure.andP;  The OMFfunction OMF_EnumChildren is used to enumerate a container's children and toobtain the information to update its data structure.andP;  During enumeration, theOMF sends the container ENUM_OBJECT messages for each child belonging to it.andO;In processing the message, if the child is not in the data file, it is addedto the data structure.andP;  For new child objects, the information obtained fromthe OMF includes the object's title, its icon handle, * its active state, andthe date and time when the object was last opened.andP;  All of this informationis added to the data structure.andM;To optimize enumeration, an object property called PROP_FASTPROPS allowsretrieval of numerous pieces of information about an object in only onereading.andP;  PROP_FASTPROPS includes the last-modified date, the last writername, tool display information (PROP_SYSTEM described below), and theobject's title string.andM;The NewWave Office must also enumerate all of the tools.andP;  This isaccomplished through the OMF function OMF_EnumGlobalObjects.andP;  As with thedata objects, the tools that are visible in the NewWave Office are added intothe data structure using the information in PROP_FASTPROPS.andP;  Using the ManageTools dialog box, which is available from the Settings menu item, the usercan select which tools to display in the NewWave Office window and which areto be hidden.andP;  This status is stored in the object's PROP_SYSTEM property: 0means never display it (e.g., the OMF clipboard), 1 means don't display itnow, and 2 means display it.andP;  If the tool is never to be displayed and is inthe data file, it is removed from the data structure.andP;  There is no need towaste space storing information on an object that is not displayed.andM;The data structure that holds all this information is composed of two parts.andO;The first part is an array of structures, one for each child in thecontainer.andP;  This child array holds the OMF object name for each child, itslocation in the container, a flags word that indicates whether the object isselected or opened and other status, the pixel width of its title on thescreen, the handle to the object's icon, the date and time of its lastchange, and indexes to its title and class strings.andP;  The second part of thedata structure is the string lists.andP;  They hold the title and class stringsfor each object.andP;  The strings are stored end-to-end and each is preceded by alength word and terminated by a NULL byte.andP;  This minimizes the overheadneeded per string.andP;  These strings can be accessed quickly because eachchild's structure in the child array contains offsets into these string listsfor its title and class strings.andP;  One optimization performed is not to storeduplicate strings in the class string list.andP;  If a newly added object's classstring is already in the list, the object's child array structure referencesthe one already in the list.andP;  This works out well because a container willusually contain many similar objects, that is, objects of the same class.andM;Office FunctionsandM;The NewWave Office not only provides the central user interface for objectmanagement, but also works in conjunction with the OMF to provide essentialarchitectural components for the interaction with NewWave applications.andP;  Theclose cooperation between the NewWave Office and the OMF is achieved with theuse of various OMF function calls, and the interaction with NewWave objectsis done using predefined OMF methods.andP;  A few examples of these specialinteractions will be given in the following sections.andM;The Create ProcessandM;The user will frequently want to create a new object, which may be in theform of a new document, a new spreadsheet, a new pie chart, a new data basequery result table, or some other typical office object.andP;  There were tworequirements for the user interface that displays the object types availableto be created.andM;* The interface had to allow the user to invoke object creation facilitiesfrom the NewWave Office window and from tools such as the file drawer, fromcontainers such as folders, and from compound data objects such as a compounddocument.andM;* The interface had to show the user only those objects that can be createdin the domain in which the user is working.andP;  For example, when the createprocess is invoked inside a compound document object, a folder object cannotbe created.andM;The OMF maintains a list of all types of objects in the user's NewWaveenvironment.andP;  This list represents a set of empty template objects and classinformation such as which methods a class of objects supports.andP;  Objecttemplates are objects that are frequently used (e.g., form letters, expensereports, distribution lists, etc.).andP;  To manage these template objects fromwithin the NewWave Office and other objects, and to provide the featuresmentioned above, a tool called the creator was developed.andP;  The creator is aglobal NewWave object of type tool.andP;  Its object creation facilities are madeavailable to the user by selection of the Create a New...andP;  command in theObjects menu.andM;The creator has the only reference to all the template data objects installedin a NewWave environment.andP;  The creator's global OMF reference name is knownthroughout the system and any application can establish communication with itby simply specifying that reference name.andP;  Developing the creator as adistinct NewWave object provides all of the benefits of objects in theNewWave environment.andP;  Its protocol is defined and established so that otherobjects can communicate with it.andP;  The process of creating a new object issimply a matter of copying the template object and ensuring that the parentobject, from which the user created the new object, establishes an OMFreference to it.andM;CREATE_A_NEW Message.andP;  Communication with the creator to create a new objectis accomplished with the CREATE_A_NEW message.andP;  All container type NewWaveobjects are required to provide the menu item Create a New..., which is usedto set into motion the process of creating a new object (see Fig.andP;  5).andP;  Whenthe user selects Create a New...andP;  the object invokes the creator using theOMF_GetOMFObject call and sends it a CREATE_A_NEW message.andP;  It thenterminates conversation with the creator by calling OMF_FreeOMFObject.andO;Sometime after terminating conversation with the creator the object mayreceive an OMF_NEW_OBJECt message containing the newly created object.andP;  Ifthe user cancels dialog with the creator, this message may never be received.andO;To prevent problems with reentrancy while waiting for the new object, thecreator disables the caller's window.andP;  This prevents the user from doinganything else in that window until business with the creator is finished.andM;The CREATE_A_NEW message may be accompanied by a memory handle to some globalshared memory containing a list of methods the calling object requires itschildren to support.andP;  When the creator receives the CREATE_A_NEW message, itdisplays to the user a dialog box containing the icons and titles of alltemplate objects that support the list of methods sent (see Fig.andP;  6).andP;  If amethods list is not sent, it is assumed that all template objects aresuitable and they are all displayed.andP;  The user is then able to choose anobject to create and give it a title.andM;When the user has chosen an object to create, given it a title, and hit theOK button, the creator calls an OMF routine to make a copy of the templateobject.andP;  The creator has a temporary reference to this new object.andP;  It usesthis temporary reference to write the user-supplied title to the new object'sPROP_TITLE property.andP;  It also writes other properties of the new object suchas PROP_CREATED, which is the time and date of creation, and PROP_CREATOR,which is the user's logon name.andP;  The creator then sends the calling object(the parent) an OMF_NEW_OBJECT message that has a reference to the new objectas a parameter.andP;  The calling object is expected to absorb the new object intoits data structure and establish its own permanent OMF reference name to it.andO;When control returns to the creator from this message, the creator deletesits reference to the new object, severing any further connection with it.andO;If, for some reason, the calling object does not establish a permanentreference to the new object, the OMF detects that the new object has noreferences to it from any object and destroys it.andM;Installing Objects.andP;  Since the creator is used to create new objects in theNewWave Office, it is also part of the process of installing new applicationsinto the NewWave environment.andP;  To install an object (i.e., an application)into the NewWave environment the user must provide the following files:andM;* An appropriate .EXE program fileandM;* Default data filesandM;* A help fileandM;* An icon file in standard MS Windows formatandM;* Any other necessary files, such as configuration informationandM;* An installation file.andM;The installation file, which normally has the extension .IN$, is a commandfile that specifies everything the system needs to know about the objectbeing installed.andP;  Entries include the class name, which defines the type ofobject, paths to the files on the installation disc, instructions definingwhere those files should be placed in the system, methods supported by theobject, and other installation data.andP;  The installation file format is veryflexible--for example, it is possible to install compound objects and provideupdates for installed applications with or without altering existing objectsof that class.andP;  It is also possible to install global tool objects such asthe wastebasket, the printer, and the creator itself.andP;  Tools cannot becreated by the user; therefore, they can only be added to the system byinstallation.andM;The installation process is designed to execute with minimal participation onthe part of the user.andP;  It is possible for a user to install a completeNewWave environment merely by inserting the NewWave disc and running theNewWave install utility.andP;  The install utility creates a file calledHPIN-STAL.IN$ in the NewWave system directory on the hard disc.andP;  This filecontains a list of paths to one or more .IN$ files on the installation disc.andO;After copying some system files onto the NewWave system directory, theinstall utility starts up the NewWave environment by running the OMF.andM;The OMF is the first process to run at the start of a NewWave session.andP;  Afterperforming some housekeeping chores, the OMF starts the NewWave Office.andO;During its initialization phase, the NewWave Office looks for theHPINSTAL.IN$ file.andP;  If it finds one, it invokes the creator, passing thepaths of the .IN$ files to it one at a time.andP;  The creator calls certain OMFroutines to install the application and establish a reference to each newtemplate object as it is built.andP;  At the end of this process, the creator,having successfully added these new children to its list, is terminated andthe NewWave Office opens and presents its interface to the user for the startof the NewWave session.andM;MS-DOS[R] Objects.andP;  A major benefit of the NewWave environment is its abilityto make objects from the data files of standard MS-DOS applications that werenot written to run under the NewWave environment.andP;  This capability is knownas encapsulation of MS-DOS applications (see article on page 57).andP;  Once anMS-DOS application is encapsulated, the user can create NewWave objects thatrepresent data files pertaining to that application.andP;  These objects are knownas MS-DOS objects.andP;  They can be displayed in the NewWave Office window thesame as other objects such as the file drawer or folders.andP;  They appear asicons and can be manipulated by the user in the same way as true NewWaveobjects.andP;  When the user opens one of these objects, a shell is run, whichthen runs the appropriate MS-DOS application and associates it with theappropriate encapsulated data files.andM;Encapsulated MS-DOS applications are installed in much the same manner asregular NewWave objects.andP;  Besides the information provided in a typicalNewWave installation file, an MS-DOS installation file contains informationsuch as keystroke sequences used by an MS-DOS application to load theencapsulated data files.andM;MS-DOS objects that support the calling object's required methods appear inthe creator's dialog box along with regular NewWave objects.andP;  If the userchooses to create an MS-DOS object, the MS-DOS filename associated with thenew object must be provided.andP;  The MS-DOS object is then created and specialobject properties are written to the object's data files.andP;  When the userfirst opens this MS-DOS object, the MS-DOS application shell reads theseproperties to find out what data files to load with the application.andM;MastersandM;Once the decision was made to make the creator a NewWave object with thecapability of managing other NewWave objects, a very useful feature quicklypresented itself.andP;  This is the ability of the user to create template objectsfrom existing NewWave objects.andP;  These user-created templates, or masters, caneasily be sent to the creator which displays them and allows the user tocreate a new master in addition to new empty template objects.andP;  For example,the user can create a master from a form letter or spreadsheet using existingtemplates of the letter or spreadsheet.andM;Adding Masters.andP;  The Save As Master...andP;  command, which is used to save mastertemplates, is currently implemented in the NewWave Office, the file drawer,and in folder objects.andP;  To save a master, the user selects an object icon inone of these window's objects and then chooses the Save As Master...andP;  commandfrom the menu.andP;  The container object then makes a copy of the selectedobject, invokes the creator, as described above, and sends it an OMF_INSERTmessage with a reference to the copied object as a parameter.andP;  When thecreator acknowledges the OMF_INSERT message, the container deletes itsreference to the copied object.andP;  The original selected object is unaffectedby this transaction.andP;  Objects saved as masters can be as complex as the userwishes.andM;Upon receiving the OMF_INSERT message, the creator verifies that the insertedobject is an installed data object.andP;  It does this by comparing the object'sclass name with the class name of each of its empty template children.andP;  Ifthe inserted object does not match any of the creator's children an error issignaled to the user.andP;  This can occur, for example, if the user tries to saveas a master an object that was received through the mail, but is notcurrently installed anywhere on the system.andM;When the master is accepted by the creator, an OMF reference name isestablished for it and it is placed in the creator's data structure.andO;Whenever the user chooses the Create a New...andP;  command and selects a templateobject icon in the creator's dialog box, all masters associated with thattemplate object are displayed in a Microsoft Windows listbox within thecreator's dialog box.andP;  The user can then choose to create an empty templateor a customized master.andM;Managing the Masters.andP;  With the user given the ability to install templateobjects and save customized masters numbering in the thousands, it becameapparent that the user must be provided with a way to manage all of theseobjects.andP;  For example, the user should be provided with a means to put themost frequently created template objects at the front of the creator'sdisplay.andP;  This would eliminate the need to scroll the window to find theobjects.andP;  In addition, having saved customized masters as templates, the usermight decide to remove these masters from the creator's display.andP;  To solvethese problems, a menu choice called Manage Masters was added to the NewWaveOffice window.andP;  When this menu item is selected, the NewWave Office invokesthe creator and sends it a MANAGE_MASTERS message.andP;  The creator then displaysthe appropriate dialog box and waits for the user to decide what to do withthe template and masters displayed.andP;  This dialog box allows the user toselect a template object and change its position within the display.andP;  It alsoallows the user to select customized masters in the listbox and press aDelete button which causes the creator to remove its OMF reference to thatobject.andM;Opening an ObjectandM;When the user opens an object, the NewWave Office must first find out whetherthat object class supports the open method by calling the OMF functionOMF_GetMethod.andP;  If the method is supported, then the object is activatedthrough an OMF call and the OPEN message is sent.andP;  Once the object isactivated, other messages can also be sent.andP;  The telescoping effect is oneexample of the cooperation between the NewWave Office and the object.andP;  Thetelescoping effect is the drawing of a series of rectangle corners tosimulate the enlargement of an object from a small icon to a full window.andO;While processing the OPEN message, the object decides where its window shouldbe opened, and sends back that coordinate through the OMF functionOMF_Opening.andP;  When the NewWave Office receives the information from the OMF,it uses the position of the object's icon in its window as the origin, andperforms the telescoping effect using the OMF's library function callNW_Telescope-Effect.andM;After the telescoping effect is performed, the object's iconic representationin the Office window is grayed out to indicate to the user that the icon istemporarily inactive, and that all interaction with that object should bedirected to its opened window.andM;Attributes Dialog BoxandM;The attributes dialog box displays the generic properties of the objectselected (see Fig.7).andP;  It provides the user with more details about theobject than are provided by the iconic view or the list view.andP;  The contentsof the attributes box may be useful while the user is working within anobject as well.andP;  The attributes dialog box is available to New Waveapplications through the functions NW_ChangeAttributes in HPNWLIB.EXE.andM;If the object's properties are changed while the dialog box is displayed, theinformation will be updated in the dialog box.andP;  This is achieved through theOMF message PROP_CHANGE.andP;  If an object has requested that property changeinformation be sent to it by setting FLAG_PROP-NOTIFICATION with theOMF_ObjecFlag call, it will receive the PROP_CHANGE message from OMF whenthis happens.andP;  To notify the attributes box, the object must then pass thePROP_CHANGE information to a library function, which extracts the useful datafrom the message and updates the property in the attributes dialog box.andM;Moving ObjectsandM;Objects in the NewWave Office are easily manipulated with the mouse.andP;  Theuser can move the mouse to the icon representing the object, and hold themouse button down to select the object.andP;  By holding the button and moving themouse at the same time, the user initiates the dragging of the object.andP;  Asthe mouse is being moved, the cursor changes to the shape of a rectangularframe with an arrow in the middle.andP;  The original icon representing the objectis now grayed, giving the user direct feedback that the object is now in atransient state.andP;  Once the user decides where the object should be placed bylifting the mouse button, a whole series of operations and messages will beinvoked to decide on the final placement of the object.andM;Depending on the position where the mouse button goes up, the object can beplaced according to various placement algorithms.andP;  The final destination maybe an empty are in the same window, an area already occupied by an icon, or adifferent window.andP;  Moving to an empty area in the same window simply involvesupdating the data structure with the new x,y coordinates and drawing theobject in the new position.andP;  Two other cases--moving on top of an icon, orcontainment as it is sometimes called, and moving to a different window--aremore involved operations.andM;Containment Move.andP;  When the object destination coincides with an existingicon, the containment move operation is initiated.andP;  Without waking up theicon object, iquiries are sent to the OMF to find out if the icon object hasthe appropriate method to accept a new child.andP;  The method can be eitherADD_CHILD or OMF_INSERT.andP;  The ADD_CHILD method allows the insertion of a newobject without activating the object itself, and the OMF_INSERT methodinvolves activating the receiving object and sending it the message.andM;If ADD_CHILD is supported, then the child can be added by OMF using thefunction OMF_AddChildTo.andP;  The file drawer, the wastebasket, and folders areexamples of objects that support the ADD_CHILD method.andP;  When this method ispresent, the OMF can examine the propety PROP_ADDCHILD to determine if thenew child can be added.andP;  This property is a structure consisting of thereference name and the number of objects that can still be added.andP;  After thenew child is added, the structure is updated by the OMF with the appropriatevalues and is ready for the next OMF_AddChildto call.andM;When the container object is opened again, it will discover all the newchildren added to it while it was inactive.andP;  As described earlier, duringinitialization the object enumerates all of its children through theOMF_EnumChildren call, and the child objects that were added while it wassleeping will then be discovered and added to the object's data file.andP;  If newchildren arrive while the object is opened, the ADD_CHILD message will besent to the parent directly, and the updating of PROP_ADDCHILD will bemaintained by the object itself.andM;If the ADD_CHILD method is not supported the containter object is activated,and an OMF_INSERT message is sent instead.andP;  For example, when an object ismoved to the printer icon, the process involves waking up the printer andsending it the OMF_INSERT message.andM;The result of either the OMF_AddChildTo call or the OMF_INSERT message isinterpeted by the sender in the same manner.andP;  If the return value is TRUE,then the container has successfully accepted the new child, and the sendercan now delete its OMF reference to the object and erase it from the screen.andO;If the result is FALSE, then the object is not deleted from the sender'slist, and its icon will be repainted again in its position before the move.andO;The return of FALSE does not necessarily indicate a refusal to accept thechild.andP;  In some cases, the container may accept the object being inserted,and return FALSE to the OMF_INSERT message to restore the object back to thesender.andP;  The printer, after adding the object as its child, uses this methodto return the object to its original position.andM;Moving to an Opened Window.andP;  When the object is moved outside of its ownwindow, checks are made to ensure that the destination window is a NewWaveobject.andP;  To check whether the destination window will accept the object beingmoved, the HAS_METHOD message is sent to determine if the OMF_INSERT methodis supported.andP;  If the return is an OMF value METHOD_present or NO_METHOD,then the destination is indeed a NewWave object.andP;  Other values may indicatethat the destination is either a non-NewWave window (e.g., a MicrosoftWindows program) or the child window of a NewWave object.andP;  The MicrosoftWindows function GetParent is used to find the handle of the parent if oneexists.andP;  This handle is again used in the HAS_METHOD inquiry, and the searchcontinues until the GetParent call returns a NULL handle indicating thatthere is no parent.andM;Once a window handle is found that supports the OMF_INSERT method, the objectis then sent to the destination window with the screen coordinates of thedestination point included in the message.andP;  When processing the insert, thereceiver of the OMF message decides whether the object should be accepted andthen returns a TRUE value if it is accepted and FALSE otherwise.andP;  Thereceiver may also decide that the destination point is occupied by anotherobject, and in that case, will pass the received object to the container asdescribed in the above section.andM;Moving Multiple Objects.andP;  Multiple objects can be selected by holding downthe Shift key while selecting.andP;  Dragging any one of the selected objectschanges the mouse cursor to a multiple-box frame with an arrow in the middle.andO;The original icons representing the moved objects are grayed to indicate thatthese objects are now in a transient state.andP;  When the cursor has reached thedestination, lifting the mouse button brings the objects to the new location.andO;These objects are now positioned as a group at the destination location andstaggered down and to the right from each other.andM;Once again, the OMF_INSERT message is used when moving a group of objectsfrom one window to a different window.andP;  Each object from the group is sent tothe receiver window using the OMF_INSERT message.andP;  The sender is responsiblefor setting the x,y coordinates in the data structure that accompanies themessage for the very first object of the group.andP;  The receiver calculates thecoordinate position for each succeeding object and writes these values intothe insert data structure.andP;  These coordinate values are used to position eachobject in the group.andM;In all of the cases described above, the sender of the OMF message knows verylittle about the receiver and vice versa.andP;  These two NewWave objectsdetermine whether certain messages should be sent to each other by consultingwith the OMF first.andP;  If the method in question is supported, then a messageis sent to the receiver with the relevant data stored as predefinedparameters or data structures.andP;  Once the message is received, the receivercan interpret the data or part of it according to its own establishedprotocol.andP;  For example, the receiver of an OMF_INSERT message could be afolder in the list view, and in that case the x,y coordinates in anOMF_INSERT message are ignored with no ill effects.andP;  The sender, on the otherhand, is only interested in the return value from the message to determinewhether the message was successfully received.andP;  The NewWave object modelgives applications a high degree of flexibility to integrate with differentobject types without the need to understand the particular requirements ofthese data types.andM;ConclusionsandM;A few examples have been chosen to illustrate the use of the object model inthe implementation of the NewWave Office.andP;  By sharing the common code among aset of tools such as the file drawer, the wastebasket, and container objectssuch as folders, the user is presented with a consistent and familiar userinterface.andP;  The reusability of some NewWave Office functions in NewWaveapplications, such as the creator and the attributes dialog box, furtherenhances the integration of the entire NewWave environment.andP;  The NewWaveOffice not only plays a central role as the first NewWave tool the userencounters, but is also a close collaborator with the OMF to supply essentialarchitectural support to all NewWave applications.andM;AcknowledgmentsandM;The NewWave Office project was first conceived in the Office ProductivityDivision in Pinewood, England.andP;  Paul Fletcher, the project engineer from OPD,laid the foundation for many of the ideas that bbecame the final product, andprovided our team with the first prototype of a working Office.andP;  We wouldlike to thank Paul for all his efforts and his continual support, and toremind him that his &quot;mojo&quot; is still very much alive and working.andM;(*1) A handle is a pointer into a table of pointers.andP;  The pointers in thetable point to data or code segments scattered throughout memory that areallocated to the object that owns the handle.andP;  Thus, the object's icon handlepoints to the location in the table (handle table) that points to the memorylocation where the object's icon is stored.andO;</TEXT></DOC>