<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF110-444-842  </DOCNO><DOCID>10 444 842.andM;</DOCID><JOURNAL>EXE  Dec 1990 v5 n7 p43(5)* Full Text COPYRIGHT Process Communications Ltd. (England) 1990.andM;</JOURNAL><TITLE>'I am not Spock...' (digital signal processing)</TITLE><AUTHOR>Moseley, Jon.andM;</AUTHOR><SUMMARY>Engineers looking to develop fast real time systems shouldconsider digital signal processor- (DSP) based controllers.andP;  DSPis thought of as mainly a communications or military technologybut DSP-based controllers can be used effectively as a coprocessoror on its own in any type of system doing mainly repetitivenumerical work.andP;  Control systems and DSP are both true real timesystems and both are a standard algorithm operating on a stream ofdata.andP;  Several different types of DSP devices are available butall have certain features in common.andP;  All run very quickly andguarantee one instruction per cycle.andP;  DSP devices are alsodeterministic and wholly predictable.andP;  They have internal directmemory access (DMA), multiple internal buses and all of theminclude fast, single-cycle hardware multipliers.andP;  DSP devices aredesigned to apply a single operation or algorithm to a regular orstructured data set.andM;</SUMMARY><DESCRIPT>Topic:     Digital Signal ProcessingReal-Time SystemsControl SystemsControllersEngineering.andO;Feature:   illustrationcharttableprogram.andO;Caption:   Key points of the TMS 320C14 DSP based controller. (chart)Some current control systems based on DSP devices. (table)PID control loop implemented on TMS320C10. (program)andM;</DESCRIPT><TEXT>'I am not Spock...' Increasingly, it's a digital world.andP;  The bits are ontheir triumphal march, with computers andtheir binary tyranny everywhere.andO;The world of control is no exception; most modern systems are computercontrolled by anything from a humble PLC to a huge central mainframe, whilevirtually all loop controllers (PID types etc) are now microprocessor based.andM;However, there are problems.andP;  When micro-controllers were first introducedthey were quickly embraced for implementing digital control systems, anddevices like the 8051, theZ80 and the 6301 are now ubiquitous.andP;  Wonderful asthese chips are (the'51 and I have been just good friends' for years now)they aren't really suited to real time control applications.andM;For a start, conventional micro-controllers arejust too damn slow.andP;  It is notuncommon formicro-controllers to have a clock rate of just a few MHz.andP;  Foranything but the very simplest control algorithm (eg a counter or an on/offloop) this will be a major constraint-limiting thesystem to slowly changingenvironments.andP;  An analogue controller built using a couple of op-amps caneasily have time constants of under a microsecond - an 8051 will requie morethan 50 [micros] to implement even the simplest PID loop.andP;  This will restrictit to controlling systems with maximum frequencies of about 2 kHz - that'sfine for a central heating system, but notreally adequate for an enginemanagement system.andM;As a corollary to this, the response speeds andlatencies of these processorsare not always adequate for a real time controller, where the ideal is aninstant reaction to a problem.andP;  That may never be achievable - butit isclearly true that the faster the response thebetter!andM;These processors have some arithmetic and architectural deficiencies whenused as controllers too.andP;  The most popular chips are all8-bit devices (the8051 and its cousins alone claim 40% of the total embedded systems market) -and these can suffer from severe quantisation effects.andP;  A resolution ofonepart in 256 isn't even precise enough to represent 1[degree], and mostapplications need more than that.andP;  Using a limited dynamic range alsointroduces truncation and rounding effects - which will manifest themselvesas steps or regions of deadband in the response of a control loop.andP;  for mostreal applications, 16 bits internal working is de rigueur, even if this willonly be used to 8, 0 or 12 bits externally.andP;  There can also be problemes withoverflow - most ALUs warn when there has been an error, but few includehardware (eg saturation registers) to deal with the problem explicitly.andM;These characteristics have tended to restrict theuse of standard, cheap,micro-controllers to the very simplest - slowest - applications.andP;  The needfor digital control has subsequently led to the development of higherperformance processors - the 68000 is very widely used in embedded systems,Intel offers the 8096.andP;  But for many applications thesame objections apply -these chips are still too slow or too inflexible to cope with the demands ofthe real time world.andP;  So we move on to the current step in the 'Bit race' -the RISC controller.andM;The RISC Red HerringandM;Increasingly, engineers looking to develop fast real time systems areinvestigating the useof RISC processors.andP;  Devices like the Intel 80960 andthe AMD 29000 are being expressly marketed on their suitability to life an inembedded application.andP;  These products offer the very latest developments inprocessor design to allow them to run extremely fast.andP;  The central theme ofthese processors is the basis RISC idea - have a basic core of instructionswhich are hardwired andrun very quickly.andP;  however, as well as this, many ofthese processors employ allmanner of clever design tweaks to make them runeven faster.andP;  For example, the80960CA (Intel's flagship micro-controller)supports three different pipelines, register scoreboarding, resourcescoreboarding anda plethora of cache memeories for program, data andregisters.andP;  This is not a simple chip.andM;However, for all the complexity, speed and power of these processors, theystill aren't well suited to the rigours of a real time system.andP;  The single,crucial problem is that they are unpredictable-the performance of a RISCprocessor depends on finding data from its cache memory and on instructionsmoothly rippling through the pipeline.andP;  On average it mya execute oneinstruction per cycle - but it may not.andP;  RISC processors arenon-deterministic and, at best, only statistically predictable.andP;  That issomething to beware of in a real time system, where a late response can bemore dangerous than no response.andM;But RISC processors semm wrongly suited to life as a real time controllerjust from philosophical grounds.andP;  The minimalist reduced instruction setphilosophy derives from research done by IBM and Stanford University on theefficiency of instruction sets in conventional minicomputers.andP;  Theseprocessors have been designed for typical programming tasks; word-processors,compilers, operating systems, accounts packages andthe like.andP;  These tend tobe large programs, with a huge number of subroutines andhighly complexstructures.andP;  They operate on vast realms of data with little regularity orstructure - any and all of which may be accessed at a moment's notice,suggesting theneed for a dedicated pager or memory management unit.andP;  Andwhile they have to run 'as fast as possible', there are rarely anydemandingconstraints on exactly when an instruction has to be completed.andM;None of this is the case with a real time controller.andP;  These have tocooperate tovery tight deadlines and guarantee a response within a stricttime window.andP;  Rather than large discursive programs, control algorithms tendto be tightly coded and single-minded in their intensity.andP;  Nor do theyoperate on huge swathes of data - instead they concentrate on a narrowlyfocused set of inputs, operate on them in a tightly structured way andspewout a well organised set of responses, exactly when and where they arerequired.andM;This is a long-winded way of suggesting that RISC processors have beendesigned forthe office micro or scientific workstation andaren't necessarilywell-suited to steering a robot arm.andP;  Using standard RISC processors to forcespeed into a real time system, rather than thinking about its real needs,seems a short-sightedly machismo approach ('I've got more MIPS than you').andP;  Areal time control system has its constraints anddemands - perhaps it's morerewarding to look for a technique that directly (and efficiently) addressesthem.andM;Similar problems (the need for a fast guaranteed response in a guaranteedtime, with relatively simple algorithms and data structures) were encounteredby engineers working in the digital communications industry about 10 yearsago.andP;  Lacking the luxuries of fast modern processors, but still needingspeed, these engineers were forced to develop their own architectures.andP;  Thuswas born the digital signal processor.andM;The SolutionandM;At first glance, control systems and signal processors may seem verydifferent Control systems deal with the real world (servos, motors, sensorsetc) while signal processors deal with waves, pulses and information.andP;  Infact, the two systems are amazingly similar.andP;  Both are real time systems,andboth hehave in a similar way: a standard algorithm operating on a streamof data.andP;  Given this similarity, it isn't too surprising that digital signalprocessors turn out to be very well suited to the role of controllers, andcanform the basis of very elegant and efficient implementations of a real timesystems.andM;Incidentally, DSP seems to suffer from an applling image problem.andP;  The nameisn't impressive - it sounds like some thing fringe political party and ithas an unenviable reputation forbeing totally incomprehensible.andP;  However,DSPis essentially a very familiar occupation - it's merely the iea oftreating signals from the real (analogue) world as digital information, andoperating on those numbers to get a result.andP;  Simple eh?andP;  The idea of using acomputer to handle 'real-world' tasks, control processes or analyse dataseems so commonplace that it hardly deserves to even have special acronym!andM;For those of us who like 'arguments from elegance', there's another reason tolook favourably at DSP based controllers.andP;  While it seemed philosophicallywrong to use RISC processors intended for open workstations in an embeddedreal time system, there is something aesthetically right about replacing ananalogue controller, made with analogue signal processors (amplifiers,filters) with a digital controller made of digital signal processors.andM;There are a number of different DSP devices available, but the major playersin the industry are Texas Instruments.andP;  Motorola, Analog Devices and ATandamp;T.andO;They all offer a range of parts intended for different markets anddifferentappliations.andP;  (The inset boxbriefly describes some of the more popular ones).andO;However, they all have some features in common:andM;* They run very, very, very quickly.andP;  Even thealmost obsolete TMS320C10 has a25 MHzclock and instruction cycle times of 25 ns are not uncommon.andP;  The verylatest parts run even faster...andM;* All of them guarantee one instruction per cycle.andM;* They are deterministic and wholly predictable.andM;* They have multiple internal buses and internal DMAs.andM;* All of them include a fast (single-cycle) hardware multiplier.andP;  Most alsohave at least one dedicated multiply accumulator, which means that theoperation A = B *C + D will execute in a single cycle.andP;  (The i860 uses asimilar architecture.)andM;* They are designed to apply a single algorithm or operation to a set of datawhich is in some way regular or structured.andP;  For example, in a controller theregularity is that a new input sample is expected every microsecond.andP;  In asignal analysis system, theregularity is that there will always be 1024samples at a time.andM;As an example, consider a PID (proportional - integral - derivative) loop -the commonest control structure.andP;  This can be implemented either as aconventional (analogue) system or as a discrete (sampled) signal system.andO;Figure 2 then gives the code for the discrete form, written for the TMS320C10processor.andP;  This was the first really popular DSP device, introduced by TexasInstruments about 10 years ago.andP;  Despite itsage, it will run this algorithmin approximately 2.2j microseconds - slightly less than an Intel 8096 wouldtake to do a single multiply.andP;  Despite its speed, this is emphatically not anexpensive, luxury device - acatalogue by my desk lists the one-off price as10 pounds, and I've seen a US ad quoting $4 in volume.andM;Of particular interest to readers of .EXE is software development.andP;  DSPprocessors have traditionally had a reputation for being complicated, hard touse and difficult to program.andP;  In the past this might have been deserved; theearliest devices (in particular theTMS320C10 series) had very eccentricarchitectures (that's being kind) which didn't support pointers or loops.andP;  Asa result,andM;it was much easier to use a macro and copy a piece of code out long hand('straight line coding') which was confusing to write or debug, and usedmemory like it was going out of fashion.andP;  An example (in pseudo code) isgiven in Figure 3.andP;  In addition, the structure of the assembly language andchoice of mnemonics for this processor were beautifully cryptic (see Figure2).andM;DevelopmentandM;That is no longer true.andP;  Modern DSP chips all support very powerful pointerstructures and addressing modes, and most of them have hardware support forloop operations (ie zero-overhead DO loops).andP;  It is no accident that thearchitecture of the Motorola parts is very reminiscent of their siblings, the68K series - indeed if you're familiar with 68000 code you'd be able to usethe 56000 DSP part almost immediately.andP;  The ATandamp;T processors use assembly codethat will be instantly recognisable and usable by anyone who knows (not toosurprisingly, since the same firm invented both!).andP;  Unfortunately, in theinterests of compatibility, Texas has had to retain its weird mnemonics - Isuppose that's the disadvantage of being first.andP;  If it's any compensation, itis by far the largest company in the DSP market (63% share) and has a hugerange of products.andM;But who cares about the assembly language?andP;  Have you ever even seen theassembly language of an 80960 or a SPARC processor?andP;  Nowadays, the onlypeople who write assembly code for fast processors are the marketingengineers tweaking benchmarks to get the best possible figures to publish inthe datasheets.andP;  Instead, everyone users compilers for all but the most timecritical sections of a program - and DSP devices are no exception.andP;  There aresome very good compilers and software support systems available for theseprocessors.andP;  Often these come from the manufacturers of the silicon, but anincreasing number of third party suppliers are involved too.andP;  For example,Intermetrics wrote the (excellent) optimisting compiler for the Motorola96000.andM;In fact (perhaps as a rection to this reputation?) there are some extremelyimpressive tools available to help developers use DSP systems.andP;  These includesoftware simulators and emulators, graphical development tools andcode-generator packages.andP;  Packages like Hypersignal or Comdisco's SPW, whichlet you work from a block diagram of the system and generate code toimplement it, have a power and sophistication that rivals some of the bestmainstream 4GLs.andM;Because so much more computational power is available, a DSP-based systemgives engineers the opportunities to use better algorithms than would bepossible with a conventional processor.andP;  As an example consider an adaptivecontroller.andM;A problem with a conventional PID design (whether implemented with ananalogue or digital controller) is that its parameters are fixed.andP;  If theprocess changes in any way after initial installation, then the controllerwill no longer be performing to its best ability and, clearly, the system'sclosed loop performance is bound to deteriorate.andP;  Many processes exhibitbehaviour that changes with time; consider the build-up of scale in a heatexchanger, the deterioration in burner condition in a furnace or thevariation between different batches of raw materials.andM;One answer to the above problems is to use a controller that can adapt tochanging situations and automatically adjust itself to cope.andP;  Essentially, itlooks at the behaviour of the system and tries to analyse how it is changing,to ensure that the controller is always running at its optimum performance.andO;This could be done in a heuristic (rule-based) way, perhaps using an expertsystem, but an alternative is to use mathematical techniques to 'Solve' thesystem and find the new control parameters (in much the same way that linearregression allows us to find the function relating points on a graph - butvarying with time and in N dimensions!).andP;  Unfortunately, this requires astupidly large amount of processing power, which has traditionally limitedthem to controlling very slow systems.andP;  For example, a typical adaptivecontrol system running on a 386/387 combination might have a maximum samplingrate of perhaps 100Hz; limiting it to system frequencies of well below 10Hz.andO;Analogue Devices supply an application note for their AD2100 processor whichdescribes a similar system ('Stochastic Gradient Adaptive Filter') runningwith a sampling rate of 8 kHz - 80 times faster.andM;ConclusionandM;Like an actor who has performed a famous role and has become type-cast ('I amnot Spock - I am a serious actor'), DSP has become pigeoholed as acommunication or military technology.andP;  This is unfortunate; any system that'sprimarily doing repetitive numerical work - such as a digital controller -should consider using a DSP device to good effect; either on its own or as acoprocessor.andP;  If you're considering a design that requires several processorsto do a lot of number crunching, then it's a virtual certainty that aDSP-based solution will be more appropriate, more efficient and probablycheaper too!andM;Jon Moseley was a hardware engineer until he sold his soul and tradedsoldering iron for a typewriter.andP;  Hobbies include sinking jet-skis.andO;</TEXT></DOC>