<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-330-336  </DOCNO><DOCID>08 330 336.andM;</DOCID><JOURNAL>Communications of the ACM  April 1990 v33 n4 p399(3)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Computer security in the business world. (Computing Perspectives)</TITLE><AUTHOR>Wilkes, Maurice V.andM;</AUTHOR><SUMMARY>Recent virus attacks and 'worm' invasions in computer networkshave raised business users' awareness of computer security issues.andO;UNIX encrypts password files but does not safeguard the encrypteddata; some penetrators have written programs that break theencryption algorithm.andP;  Users tend to be careless with passwords,and many systems have inherently insecure file transfer features.andO;The ideal security model for time-sharing systems creates an'enclave' with strict security enforced on its perimeter and alesser degree within.andP;  Remote log-in should be strictly controlledor disallowed.andP;  User authentication methods include 'call back,'in which a remote user logs in briefly and registers a request forthe computer to call him back, and 'challenge response devices,'which implement an encryption algorithm in a hand-held box.andM;</SUMMARY><DESCRIPT>Topic:     MicrocomputersData SecurityComputer crimes.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>COMPUTER SECURITY IN THE BUSINESS WORLDandM;Until very recently, most business managers regarded computer security aslittle more than another charge on their budgets.andP;  If pressed, these managerswould probably say that they saw computer penetration as a new way ofperpetrating fraud and that pre-existing methods for keeping fraud undercontrol were applicable.andP;  The military, on the other hand, have always takenfor granted the overriding importance of security.andP;  They are particularlyconcerned about preventing leakage of information, and have tended to seecomputer security largely in terms of the control of access to classifieddocuments.andM;Recent events, particularly the invasion of networks by worms and viruses,have led to everyone, both military and civilian being caught in the grip ofa new fear, namely that of data being corrupted and systems disrupted.andP;  Theattack is no longer carried out by unaided human means.andP;  The would-beperpetrator writes a program to do his dirty work for him.andP;  He, himself, mustidentify the weaknesses in the defense, but the program will then probe themremorselessly and at high speed, missing very little.andM;The simultaneous sharing of computers by many users first brought securityproblems to the fore.andP;  Professor Corbato of MIT, as well as other designersof early experimental time-sharing systems in universities, recognized theproblem and sought to solve it by requiring users to type passwords andproviding codes for file protection.andP;  The challenge to break in improvedirresistible to the students, and it soon became apparent that improvementswere needed both in the design of systems and in their implementation.andM;Roger Needham, at Cambridge University, originated the device of keepingpasswords in encrypted form rather than in clear form, using for this purposean encryption algorithm for which no reverse algorithm existed.andP;  It wasdiscovered that many security loop holes were the result of optimizationsintroduced into the implementation.andP;  Such optimizations are essential if thesystem is to run at acceptable speed but, if they are not thought out withsufficient care, they are liable to breed security bugs.andP;  A notorious exampleis the delaying of the clearing of discarded blocks on the disk until newinformation comes to be written.andP;  It is quite possible to do this in a safeway, but there are hidden snags and many an implementor has fallen foul ofthem.andM;UNX encrypts the passwords, but does not take very good care of the filecontaining the encrypted form.andP;  As a result penetrators have had some successin writing programs to break the encryption.andP;  Other systems do better thanUNIX in safeguarding the encrypted passwords; nevertheless it is likely thatin future secure systems a separate computer will be provided for handlingpassword transactions and hiding the encrypted versions.andP;  A very smallcomputer would serve this purpose.andM;As a result of this early history, security came to be seen as an aspect ofthe design of a time-sharing system.andP;  Beginning around 1980, efforts were seton foot to improve the security of leading proprietary time-sharing systems.andO;These efforts, which were started well ahead of market demand, have achievedmuch success largely by the patient identification and removal ofimplementation bugs but also by the provision of better access controlalgorithms and audit trails.andP;  The security provided is now good enough formost business purposes, provided that the systems are used in a securemanner.andP;  Unfortunately, this cannot always be guaranteed.andP;  Users are apt tobe careless about password discipline, and sometimes keep openly in theirfiles copies of passwords that other users have entrusted to them.andP;  A furthermajor source of insecurity is that many systems offer inherently insecurefeatures, connected in particular with remote file transfer, that are anoverhang from more trusting days.andP;  It is possible to disable these features,but system managers are reluctant to do so since users have grown accustomedto them and find them useful.andM;It is something suggested that it should be possible to give a formal proofthat a system is secure.andP;  In principle, it is certainly possible to provethat a system meets its specification.andP;  However, insecurity results from itsdoing things that are not in the specification, for example, saltinginformation away in hidden files.andP;  Proving that it does not do such things isequivalent to proving a negative, something that is notoriously difficult.andO;Even if the technology of proving that programs meet their specificationswere more advanced than it actually is, some major element of humaninspection and certification would be necessary.andM;Much thought has been given to methods for making an inspector's task morestraight forward and anyone who has worked in the area is apt to have his ownpet ideas.andP;  The underlying idea is to restrict the amount of information towhich the running program has access at a given time.andP;  This involves makingfrequent changes in the domain of protection and, if everything is done insoftware, this is likely to lead to an intolerably low level of performance.andO;Thus, hardware aids have been suggested.andP;  An early system was to providerings of protection arranged so that as the process moved from the inner ringto outer rings, it secured access to an increasing amount of information.andO;Unfortunately, system programmers discovered that the hierarchical model ofprotection on which rings were based did not fit their requirements at allclosely.andP;  Rings are in practice no improvement--or very littleimprovement--on having a simple system of two modes, one privileged and oneunprivileged.andM;Much hope was later based on the use of capabilities, or tickets, the merepossession of which gives the right to make use of some resource.andP;  Theattraction of capabilities is that they do not imply any form of hierarchy asfar as protection is concerned.andP;  Some experimental systems were demonstratedin which the capabilities were implemented in software, although it shouldhave been clear from the beginning that such systems could not, forperformance reasons, be of more than theoretical interest.andP;  When capabilitiescame to be implemented in hardware, it was found that their management led togreat software complexity, a result which was as disappointing as it wasunexpected.andP;  The final conclusion must be that although the capability modelmakes it possible to show how some very desirable things could be done--forexample, how to set up defense against Trojan horses--it is of no use to ussince efficient implementation is not possible.andM;Some loss of performance would have been inevitable with hardwarecapabilities.andP;  Few people would have cared enough about security to acceptthis performance loss.andP;  What has now happened is that the industry has movedtowards concentration on a small number of standard designs for processors,with a strong emphasis on performance.andP;  It is clear that a solution tosecurity problems must be found within that context.andM;With proprietary operating systems, each under the control of its respectivevendor, security once attained can be maintained.andP;  In particular, it is notin danger of being compromised by local modifications to the system.andP;  Thecoming of UNIX has changed all that.andP;  UNIX is vendor-independent and existsin many variants, some of them official and some of them the result of localenterprise.andP;  Bringing all the versions and implementations up to a highsecurity standard, and maintaining them, would be an impossible task.andP;  Nodoubt secure versions of UNIX will become available, but they will have tomake their way in a fiercely competitive market in which security is only oneconsideration and it is unrealistic to expect that they will become dominant.andM;In conventional time-sharing systems, barriers are placed round each user,both to prevent him from interfering with the system and also to prevent himfrom interfering with other users.andP;  The assumption is made that each user isas suspicious of other users as he is of outsiders.andP;  In the modern world ofnetworking and work stations this may not be the best model.andP;  For example, adepartmental time-sharing system caters for a limited group of users who arein some way colleagues.andP;  There is no reason why these users should takeliberties with each other other's resources or pry into each other's privatefiles and indeed no serious harm is done if they do.andP;  This points to a newattitude to security.andP;  It is better to think in terms of secure enclaves onthe perimeter of which strict security is enforced.andP;  Within the enclave thereis a lower degree of security or perhaps none at all.andP;  This model of securityis applicable to distributed systems, in particular to groups of workstations with file servers.andP;  These can be surrounded by a security barrierwithin which there is a relaxed attitude to security.andP;  Indeed it is hard tosee any other way in which a group of work stations could be made secure,since there is no central operating system.andM;The first step in establishing a secure enclave is to control remote login.andO;Ideally, it should not be allowed at all.andP;  A distant user wishing to beconnected to a computer inside the enclave, whether via a computer network orvia the public telephone system, should make a request using some externalchannel.andP;  For example, he might make a telephone call or send a request viaan insecure computer on the net.andP;  If his request is agreed to, then theconnection is set up by a person working from inside the secure enclave.andO;More commonly, but less securely, the distant user is allowed to log inbriefly in order to register a request that he should be called back.andP;  Theproblem is essentially one of user authentication.andP;  The merit of the callback procedure is it establishes the location from which the distant user isworking.andP;  Call back will become less necessary if and when the telephonesystem automatically provides this information.andM;Another approach to authentication is by means of a &quot;challenge responsedevice,&quot; which is a handheld box in which an encryption algorithm isimplemented.andP;  This device enables the user to answer challenges put to him bythe distant computer.andP;  The weakness of any authentication system depending onpasswords and encryption keys lies in the difficulty of managing them and ofensuring their integrity over a period of time.andM;The use of computer programs to penetrate computer systems raises someinteresting thoughts, to say nothing of concern.andP;  It means the slightest slipin the implementation of access controls can have the most seriousconsequences.andP;  The point is not a new one.andP;  Harry Hinsley, the officialhistorian of British Intelligence in World War II, remarked recently in myhearing that the enemy signals that Bletchley Park had such success inreading were encrypted by machines, and that machines were used for breakingthe encryption.andP;  No comparable success in the routine reading of 'oldfashioned' manually operated book codes was ever achieved.andM;It is natural to ask whether computers could be programmed to verify thatwhoever is attempting to login is a human being and not a computer.andP;  In otherwords, can a computer be programmed to determine whether it is in contactwith a human being or with another computer.andP;  If it could, then a powerfuldefense against worms and such like would be available.andP;  The question is adual of the one on which Turing based the famous Turing test: can a humanbeing determine whether he is communicating with a computer or with anotherhuman being?andM;Maurice V. Wilkes received the ACM Turing Award in 1967 and is the author ofMemoirs of a Computer Pioneer, MIT Press, 1985.andO;</TEXT></DOC>