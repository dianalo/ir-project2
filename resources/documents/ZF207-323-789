<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-323-789  </DOCNO><DOCID>07 323 789.andM;</DOCID><JOURNAL>PC Week  Feb 13 1989 v6 n6 p36(1)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>Modify your methods to take advantage of I-CASE tools. (integratedcomputer aided software engineering)</TITLE><AUTHOR>Martin, James.andM;</AUTHOR><SUMMARY>Corporations can stay ahead of the competition by usinginformation and automation resources to their optimal advantage.andO;Computer-aided software engineering (CASE) and integrated CASE(I-CASE) tools are useful to achieve productivity in the designand development of applications.andP;  Proper management of thesoftware development process includes several elements.andO;Production tools should be coupled with the code generator forhigh productivity.andP;  Programs need to be quickly executable inorder for designers to analyze processes and adjust the designwhen necessary.andP;  Large production staffs have low developmentproductivity in many instances.andP;  When using CASE tools the size ofprogrammer teams should be kept to a minimum.andP;  The same I-CASEtool set should be used at all system development locations sothat each team uses common data models, designs and programcomponents.andM;</SUMMARY><DESCRIPT>Topic:     Computer-aided software engineeringIntegrated softwareProgramming ManagementProductivityProgram Development Tools.andO;Feature:   illustrationchart.andO;Caption:   Integrated CASE tools promote use of productive small developmentteams. (chart)andM;</DESCRIPT><TEXT>In this, the last of a series of columns on I-CASE technology, we discuss theimprovement in productivity that can be realized with the use of CASE tools.andM;To achieve high productivity in building computer applications, it'snecessary not only to select the best CASE and I-CASE (integratedcomputer-aided software engineering) tools, but also to adapt yourorganization and methods to take full advantage of these tools.andM;The simplest CASE tools are little more than diagramming aids.andP;  They simplifythe drawing of diagrams and enable them to be kept tidy and modified quickly.andM;Code generators enable implementors to produce a working program quickly.andO;However, if the generator is not linked to a dictionary, data model or designtools, the programs generated may be incompatible fragments, ill-designed andnot linked together.andM;To achieve high productivity, the tools for design need to be tightly coupledto the code generator.andP;  The tools should employ a data model and shouldenable the design to be represented in a powerful, visual, easy-to-modifyform from which code is generated directly.andM;The programs should be quickly executable so that the designer can observewhat they do, adjust or add to the design, rerun the programs, enhance thedesign and so on, until a comprehensive system is created.andM;The principle of ''what you see is what you get'' should apply to thecombination of visual design tool and code generator.andP;  The need for manualcoding of procedures should be removed to the maximum extent.andM;The generator may initially be used to produce structured code that relatesto the design screens.andP;  This code may be used for prototyping and debugging.andO;Because structured code does not give optimal machine performance, forheavy-duty applications the code may be fed into an optimizer, which createscode with optimal machine performance.andP;  This code will never be touched bymaintenance programmers; all maintenance is performed at the specificationlevel.andM;The integrated designer-generator tool should aid in rapid construction andmodification of prototypes.andP;  It should generate test data and provide testingtools.andP;  It should generate database code and job-control code, so that theprogram can be executed quickly when design changes are made.andM;Productivity in system development is strongly affected by the number ofpeople in the development team.andP;  Large teams tend to give low developmentproductivity, because the number of interactions between team membersincreases rapidly as team size increases.andM;One objective when using CASE tools is to avoid having large teams ofprogrammers.andP;  As shown in the figure, conventional technology often requireslarge development teams and long development cycles.andP;  In contrast, manyprojects or subprojects developed with I-CASE tools can be completed by oneperson.andP;  The brilliant, fast or hard working individual then has theopportunity to excel.andP;  Management should encourage the most capableimplementors to learn the full power of an I-CASE tool set in order tomaximize productivity.andM;Big projects should be subdivided into small projects, each of which can becompleted relatively quickly by one, two or, at most, three implementors.andO;The CASE tool should make it possible to define with computer precision theinterfaces between the components generated by separate teams.andM;At the start of a large project, an entity-relationship diagram should becreated for the data that will be used, the data elements should be definedand the data correctly normalized.andP;  The same data model should be used forall subprojects.andP;  The flow of data and control among subprojects should bedefined with the CASE tool.andM;Today's programmers constantly reinvent the wheel.andP;  They struggle to createsomething that has been created endless times before.andP;  Major productivitygains will result from employing reusable designs, data models or code.andO;Reusable components should be catalogued in a CASE encyclopedia so that theycan be selected when needed and modified as required.andM;A large enterprise should employ the same I-CASE tool set at all locationswhere systems are built so that common data models, designs and programcomponents can be used.andP;  Telecommunications access to mainframe encyclopediasaids in the sharing of applications, document design, accounting proceduresand so on.andM;In systems developed by traditional manual techniques, maintenance is a majorproblem.andP;  Systems are often difficult and time-consuming to change.andP;  Afterbeing modified many times, they often become fragile; even minor changesresult in bugs and breakdowns.andM;A goal of I-CASE tool sets is to produce systems that are quick and easy tochange.andP;  Maintenance isn't done by digging around in spaghetti code but bymodification of the design specifications, followed by regeneration of code.andM;Traditional maintenance is often made more difficult by inadequatedocumentation.andP;  When maintenance programmers make changes, they often neglectto make corresponding changes to the documentation.andP;  With I-CASE tools, thecontent of the encyclopedia is the documentation.andP;  Paper documentation can begenerated from the encyclopedia when required.andP;  When changes are made to thedesign, the encyclopedia is automatically updated.andM;The use of I-CASE tools avoids the spaghettilike mess of the past andpromotes cleanly structured engineering with relatively fast and easytechniques for  maintenance.andM;Although in some corporations the main thrust with CASE tools is to increasethe productivity of application building, in others the goal is to improvethe quality of systems and achieve coordination across a complex enterprise.andM;The most impressive system is not created with a single design andimplementation.andP;  It evolves, being improved in many steps at different timesand places.andM;The future will bring impressive software and corporate computer systems, andthese will also be grown over many years with many people and organizationsadding to them.andM;It's difficult or impossible to grow software that's a mess.andP;  To achievelong-term evolution of software, we need structured models of data andstructured models of processes.andM;Designs too complex for one person to know all the details of must berepresented in an orderly fashion in an encyclopedia so that many people inmany places can add to the design.andP;  The design needs standards and reusablecomponents and an architecture that facilitates the incremental addition ofnew functions.andM;For executives to control the behavior of computers that automatically placeorders, select suppliers, make trades and so on, the behavior of thesesystems should be expressible in rules and diagrams that the executivesunderstand.andM;When It Works, It Really WorksandM;Some corporations have impressive computer systems designed to give them acompetitive advantage: Take American Airlines with its on-line terminals intravel agents' offices, or Benetton with its worldwide information systemthat makes the world activities ''transparent'' to the decision makers nearRome.andM;Systems like these demonstrate how a corporation can pull ahead of itscompetition by using information and automation better.andP;  Efficientcorporations will evolve computing systems that are worldwide and exceedinglycomplex, but nevertheless enable procedures to be adapted quickly to changingneeds.andM;To do this requires engineering-style methodologies carried out withautomated tools.andP;  It requires encyclopedia-based I-CASE tools.andP;  Simplesoftware engineering is not enough -- to build a computerized corporation weneed information engineering.andM;----------The James Martin Productivity Series, an information service updatedquarterly, is available through High Productivity Software Inc., ofMarblehead, Mass.andP;  (800) 242-1240.andP;  For information on seminars, contact (inthe United States and Canada) Technology Transfer Institute, 741 10th St.,andO;Santa Monica, Calif.andP;  90402 (213) 394-8305.andP;  In Europe, contact Savant, 2 NewSt., Carnforth, Lancs., LA5 9BX United Kingdom (0524) 734 505.andO;</TEXT></DOC>