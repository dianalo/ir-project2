<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-345-658  </DOCNO><DOCID>08 345 658.andM;</DOCID><JOURNAL>PC Week  April 16 1990 v7 n15 p60(1)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1990.andM;</JOURNAL><TITLE>Reverse-engineering gives old systems new lease on life. (usingrapid software development methodologies to reverse-engineerexisting systems)(Applied Intelligence) (column)</TITLE><AUTHOR>Martin, James.andM;</AUTHOR><SUMMARY>New programming methodologies and computer aided softwareengineering (CASE) tools can be applied to reverse-engineering ofexisting applications as well as to development of new ones.andO;Developers can rebuild an old system from restructured designinformation stored in the CASE repository.andP;  Backlogs of poorlystructured, difficult-to-maintain code plague many organizations,but new tool sets are available that facilitate rebuildingsoftware.andP;  Restructuring involves conversion of unstructured codeinto fully structured code.andP;  Reverse-engineering enters the newspecifications into an integrated CASE tool for re-design, whilere-engineering involves modifying the system design itself.andO;Organizations deciding whether or not to convert an old systemshould ask whether it works adequately and whether maintenancecosts are high.andM;</SUMMARY><DESCRIPT>Topic:     Reverse EngineeringProgram Development TechniquesProgramming ManagementManagement of EDPSoftware Maintenance.andO;Feature:   illustrationchart.andO;Caption:   How to reverse-engineer existing systems. (chart)andM;</DESCRIPT><TEXT>Powerful new concepts and techniques are becoming available to migrate thebillions of lines of existing code into more easily expandable, maintainablesystems.andM;In most enterprises, computing systems have large quantities of old code,most built by hand in an unstructured fashion.andP;  The data usually has not beenmodeled, with little or no interest in achieving data compatibility betweendifferent systems.andM;These systems typically were designed before today's principles of gooddatabase design were understood.andP;  The data isn't normalized and is unrelatedto the data-administration process.andP;  As caretakers of these systems know alltoo well, these systems are fragile and expensive to maintain.andM;Traditional maintenance of programs is an unsatisfactory and expensiveprocess.andP;  It has been compared with the attempt to repair a wooden boat atsea: New planks can be replaced only by using existing planks for support.andO;The process must be done in small steps or the boat will sink.andP;  And sooner orlater, the boat must be brought to a shipyard and rebuilt.andM;Using computer-aided software engineering (CASE) tools, old systems can berebuilt from restructured design information stored in the CASE repository.andO;They can't all be rebuilt quickly, because this would involve too much work.andO;The best that can be hoped for is a steady, one-at-a-time migration of theold systems into the cleanly engineered form.andM;In corporations that have successfully implemented development methodologiesbased on integrated CASE (I-CASE) tools, these are two development worlds.andO;The I-CASE world has the ability to evolve systems, continually improvingtheir design and regenerating code.andP;  The systems are cleanly engineered, easyto change and have stable data models.andM;Alas, there is also an underworld of poorly structured old systems lackingdata models.andP;  In many corporations, more programmers spend their timemaintaining poor-quality code than those who work in the I-CASE world.andM;The problem is rather like the slum-clearance problem in a city.andP;  Despite acity's new center, elegant architecture and efficient street plan, existingslums and old, crumbling buildings still need to be maintained.andP;  Plannershope for a steady migration from the slums and their replacement withwell-designed, new facilities.andM;Many corporations have attempted a major conversion of a file system to adatabase system and have failed.andP;  Usually, the reason is that the projectconsumes much more work than anticipated because so much has to bereprogrammed.andM;Often, the attempt to convert is killed by the people controllinginformation-systems (IS) finances.andP;  The conversion process itself creates nonew applications.andP;  Management perceives a great deal of effort and expensewith nothing to show for it.andP;  There is a long and serious applicationbacklog.andM;In one organization after another, including some of the most prestigiousdata-processing organizations, the attempt to make a major conversion hasfailed.andP;  Yet the cost of maintenance in the non-I-CASE world escalates daily.andM;One of America's best telephone switches ran into so manysoftware-maintenance difficulties that its maintenance costs exceeded $1million per day.andP;  The switch would never have been built if that figure hadbeen forecast.andM;A recent study by the U.S.andP;  Air Force estimated that unless maintenanceproductivity is improved by the year 2000, 25 percent of the U.S.andP;  draft-agepopulation will be required to maintain the Air Force's software!andM;Fortunately, new tool sets to facilitate the complex process of rebuildingsystems are available.andP;  The goal is to reverse-engineer old systems into acleanly structured form, using tools that automate the tedious parts of thisprocess.andP;  The programs are captured and represented in a CASE format so theycan then be modified as required using CASE tools.andP;  Data definitions arecaptured and converted into stable data models stored in the CASE repository.andM;The figure shows a reverse-engineering step.andP;  The code of the old system isrestructured with an automated tool and entered into an I-CASE tool so it canbe analyzed and redesigned, and become part of the I-CASE evolutionary lifecycle.andM;In connection with this reverse-engineering step, three terms are used:andM;Restructuring: conversion (with an automated tool) of unstructured code intofully structured code.andM;Reverse-engineering: conversion of unstructured code into high-level designspecifications and (automatic) entry of these specifications into an I-CASEtool where they can be improved or redesigned.andM;Re-engineering: modification of the design of a system, adding functionalitywhere required, and (automated) production of code for the improved system.andM;If reverse-engineering is done as shown in the figure, old systems can berebuilt as evolutionary systems.andP;  Eventually, the messy underworld shoulddisappear.andM;There are basically three approaches to the IS reverse-engineering andre-engineering problem:andM;-- Do Not Convert.andP;  Allow applications to continue their existenceunconverted but, when necessary, build a bridge to new systems using datamodels and process models stored in a CASE repository.andM;-- Restructure.andP;  Quickly restructure the messy applications (preferably withautomated tools), but don't rebuild them with CASE tools.andP;  The slum areas areimproved, but not rebuilt to be part of the new planning.andP;  Often it'snecessary to build a bridge to the new systems built with CASE tools.andM;-- Rebuild.andP;  Reverse-engineer the old applications to conform to the datamodels and process models stored in the CASE repository.andP;  This is comparableto redesigning and rebuilding areas of the city.andM;In large IS installations, a mix of these approaches will probably be used.andM;To Convert or NotandM;Two questions should be considered before deciding to convert an old system.andO;First, does it work?andP;  If it works well, there's a strong argument for leavingit alone.andP;  If it works inadequately, it should be rebuilt using integratedCASE technology.andP;  Second, does it incur high maintenance costs?andP;  If theapplication is fragile and expensive to maintain, then it's a candidate forrestructuring or rebuilding with automated tools.andM;It may be appropriate to automatically restructure an old system and modifyit by programming rather than rebuild it with reverse-engineering and I-CASEtools.andP;  If an application system works adequately and needs littlemaintenance, then its conversion should probably be postponed.andP;  Spend theeffort on something else; there are so many other applications needed, suchas a bridge between it and the new environment.andM;In planning data resources, it may be unwise to assume that old systems willbe converted easily to the new, automated form.andP;  A realistic appraisal isneeded of the costs and difficulties of conversion.andP;  The dismal history ofuncompleted conversions should be weighed.andM;In their initial enthusiasm for new development methodologies, systemdesigners often assume that the old systems will be converted and discovertoo late that they won't.andP;  It's safer to assume that many old systems willsurvive and plan a bridge that links them to the new world.andM;Next week I will examine the challenge facing vendors in building tools thatsupport reverse-engineering.andM;----------The concepts embodied in reverse-engineering are described in the CASE volumein The James Martin Report Series.andP;  For more information on this volume, call(800) 242-1240.andP;  For information on seminars, contact (in the United Statesand Canada) Technology Transfer Institute, 741 10th St., Santa Monica, Calif.andO;90402 (213) 394-8305.andP;  In Europe, contact Savant, 2 New St., Carnforth,Lancs., LA5 9BX United Kingdom (0524) 734 505.andO;</TEXT></DOC>