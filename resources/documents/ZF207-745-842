<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-745-842  </DOCNO><DOCID>07 745 842.andM;</DOCID><JOURNAL>Communications of the ACM  Oct 1989 v32 n10 p1164(10)* Full Text COPYRIGHT Assn. for Computing Machinery, Inc. 1989.andM;</JOURNAL><TITLE>The case against user interface consistency.andO;</TITLE><AUTHOR>Grudin, Jonathan.andM;</AUTHOR><SUMMARY>User interface consistency should not be of primary concern todesigners.andP;  Instead, users and their work environment should serveas the focus for better interface design.andP;  The main problems withthe issue of consistency are the lack of a clear definition of theconcept, the difficulty in agreeing on what constitutes 'good'consistency and the lack of a way to determine when other designconcerns should take precedence over consistency.andP;  Closeexamination of several interface design problems such as functionkey layout, keyboard arrangement, default menu selection andcommand name abbreviations lead to the conclusions that ease oflearning can conflict with ease of use, consistency can be at oddswith both ease of learning and ease of use and the most availabletype of consistency is often inappropriate and harmful.andM;</SUMMARY><DESCRIPT>Topic:     User InterfaceDesignStandardization.andO;Feature:   illustrationchart.andO;Caption:   Function key design decisions. (chart)Attempts to optimize the typewriter keyboard. (chart)Menu default patterns vary with aspects of the task. (chart)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Designers striving for user interface consistency can resemble Supreme Courtjustices trying to define pornography.andP;  each of us feels we know it when wesee it, but people often disagree and a precise definition remains elusive.andO;A close examination suggests that consistency is an unreliable guide and thatdesigners would often do better to focus on users' work environments.andP;  Manywriters have presented the case for user interface consistency.andP;  BenShneiderman's [48] first &quot;Golden Rule of Dialogue Design&quot; reads: &quot;Strive forconsistency.andP;  This principle is the most frequently violated one, and yet theeasiest one to repair and avoid (violating).&quot; Rubinstein and Hersh [46]conclude their book, The Human Factor: Designing Computer Systems for People,with the directive, &quot;Build consistent human interfaces.&quot; Such methodologicalencouragement has been buttressed with empirical work presented in support ofuser interface consistency.andP;  Polson [43] summarizes several experiments bystating, &quot;Experimental results .andP;  .  .  show that consistency (leads) tolarge positive transfer effects, that is, reductions in training time rangingfrom 100% to 300%.&quot; Smith and Mosier [49] conclude the introduction to theircompendium, Guidelines for Designing User Interface Software, in which over60 guidelines contain &quot;consistent&quot; in the title, by stating, &quot;the commonapplication of design rules by all designers working on a system shouldresult in a more consistent user interface design.andP;  And the single objectiveon which experts agree is design consistency.&quot;andM;Several steps must be taken before such advice is useful.andP;  First, consistencymust be defined.andP;  Second, one must be able to identify good consistency,since foolish or undesirable consistency is possible.andP;  More subtly, one needsa procedure for discriminating among conflicting approaches to achievingconsistency.andP;  Finally, a method must be found to determine when other designconsiderations overshadow consistency in importance.andM;There hasbeen little progress in these matters.andP;  In 1981, Reisner [45] wrote,&quot;What is (not) clear, however, is precisely what we mean by consistency and,more importantly, how to identify its absence.&quot; In 1988, a two-day workshopof 15 experts was unable to produce a definition of consistency [35].andO;Acknowledging the difficulty of defining the term, one prominent interfacedesigner said, &quot;I know consistency when I see it.&quot; One researcher hassuggested that perceived consistency might be a better goal [26].andM;This article argues for a shift in perspective, suggesting that when userinterface consistency becomes our primary concern, our attention is directedaway from its proper focus: users and their work.andP;  Focusing on consistencymay encourage the false hope that good design can be found in properties ofthe interface.andP;  There is an easily overlooked conflict between the search forformal properties of interfaces and the call for &quot;usercentered&quot; design andtask analysis.andP;  The thesis that interface consistency is an important goalsupports the search for interface properties that can be measured andmanipulated in isolation and suggests that identifying these properties maylead to successful design.andM;Such a position holds out the attractive possibility of automating the designand evaluation of some aspects of interfaces [e.g.andP;  , 10, 28, 41, 42, 53].andO;This article presents the antithetical view: interface consistency is alargely unworkable concept; the more closely one looks, the less substanceone finds.andP;  In the examples that follow, the dimensions on which one mightargue for consistency shift or disappear when examined closely.andM;Rejecting consistency as a primary user interface goal does not argue forrandomness in user interface design.andP;  The studies that appear to supportparticular applications of consistency [e.g.andP;  , 5, 16, 43] are not wrong, buttheir proper interpretation may be more contextually bound, less general thanis explicitly recognized.andP;  Shifting the focus from general interfaceproperties to the users' tasks and work context, to physical constraints, andto psychology does not mean defocusing.andP;  Attacking the maxim &quot;strive forconsistency&quot; may seem a step backward, but it may be a necessary first stepin finding a better path forward.andP;  By placing the case for interfaceconsistency in its proper context-alongside the case against interfaceconsistency-we can develop a new synthesis.andM;An Illustrative Example from Everyday LifeandM;Consider the household interface design problem of deciding where to shelveimplements, specifically knives: butter knives, table knives, steak knives.andO;All may be kept in the same drawer.andP;  Consistent, easy to learn, easy toremember: there is one place to go for knives.andP;  This arrangement makes iteasy for guests to be more help than hindrance when they assist in cleaningup.andM;But it isn't quite so simple.andP;  To begin with, there are the carving knives,too large for the drawer, stuck in a wood block.andP;  At least it is close by, inplain view; a good strategy for handling exceptions, perhaps.andP;  But then,there is the real silverware packed away in a drawer in a cabinet holdingcrystal, china, and other finery for special occasions.andP;  The silver knivesare not in the kitchen, are not visible, but are not too far distant.andP;  Butwhat about the putty knife, stowed in a workbench drawer in the garage, orthe Swiss army knife, packed away with the camping gear in the basement?andM;By distributing the knives, we have introduced inconsistency and increasedthe time needed to learn where to find them.andP;  Why is it the best solution? Wehave made the knives easier to use by placing them according to how they areused, according to the tasks in which they are involved.andP;  User tasks oractivity patterns totally dominate such design decisions.andP;  A formalexamination of the properties of household objects would reveal that theknives all have very much in common, yet we distribute them in such a waythat they are grouped more closely with objects such as forks, tent pegs, anda jar of putty than with other knives.andP;  The organizing element is the contextof use.andP;  A shift in that context, in work organization, may lead to a designchange.andP;  I recently lost my corkscrew, leaving me to rely on the corkscrew inthe Swiss army knife, which I moved to the kitchen (though to a drawer ofassorted implements, not the silverware drawer).andM;Interface objects, too, must be designed and placed in accordance with users'tasks.andP;  Once this is fully appreciated, the concept of &quot;interfaceconsistency&quot; becomes surprisingly insignificant in many design situations.andO;But designers who have only a sketchy or partial understanding of users'tasks will find it difficult to appreciate the dominant role tasks shouldplay in interface design.andP;  In the absence of task analysis, the designer haslittle to go on and it becomes convenient to focus on properties of theinterface-which in the absence of something better is likely to help morethan hurt.andP;  But it is a mistake to believe that this is the appropriatefocus.'andM;Several interface features are presented in the following section thatimprove upon alternative &quot;consistent&quot; designs.andP;  Most of the design choicescannot easily be described in terms of consistency but can be understoodthrough careful analysis of the users' work.andM;Three Types of &quot;Consistency&quot;andM;User interface consistency is used in three interrelated senses: the internalconsistency of a design with itself; the external consistency of a designwith other interface designs familiar to a user; and an external analogic ormetaphoric correspondence of a design to features in the world beyond thecomputer domain.andP;  Although none of these is a reliable guide to userinterface design, each has somewhat different properties.andP;  Each designexample covered in subsequent sections will apply more 'to one or another useof &quot;consistency.&quot;andM;Internal consistency of an interface design.andP;  The designer or design team maynot know the context in which people will use their product, but they usuallycontrol a range of features affecting the dialogue of users with theirparticular application or system.andP;  Thus, internal design consistency receivesthe most conscious attention of designers.andP;  Consistency might be sought inphysical and graphic layout, command naming and use, selection techniques,dialogue forms, etc.andP;  For each domain, different dimensions of consistencyare possible.andP;  The graphic properties of a set of interface objects may beconsistent in color, size, shape, or less easily defined style.andP;  Carroll [5]notes more complex dimensions in the design of command namesets: &quot;Movebackward&quot; would be consistent with &quot;Move forward,&quot; but &quot;Go backward,&quot;&quot;Backward,&quot; or &quot;Reverse&quot; would be inconsistent (in Carroll's terms&quot;incongruent,&quot; &quot;hierarchically inconsistent,&quot; and both, respectively).andP;  Greenand Payne [16] regularized EMACS commands along a single set of organizingprinciples and produced dramatically better performance in a learning task.andO;Other internally consistent designs would result from using one abbreviationalgorithm, one approach to setting menu defaults, one functional mapping ofmouse button assignments, and so forth.andP;  Initial learning in particular, butalso ease of use and perceived quality are reported to benefit from internalconsistency [5].andM;External consistency of interface features with features of other interfacesfamiliar to the users.andP;  A design can be internally consistent, yet conflictwith other interfaces.andP;  This can happen for any of several reasons: the otherinterface may itself be internally inconsistent, the other interface may beinternally consistent but incorporate different choices (e.g., differentnames for objects), or the other interface may only cover some of the samefunctionality and thus differs in the distinctions that it needs to make.andO;External consistency may be achieved at the expense of internal consistency,as when a designer borrows a highly salient feature from a familiar systemfor use in an otherwise different interface.andP;  Alternatively, internalconsistency may be achieved at the expense of external consistency; such&quot;local optimization&quot; of the interface often occurs when an applicationdesigner has limited knowledge of what the enduser is familiar with and whatapplication set the product being designed will appear with.andP;  When anapplication will appear without modification in different environments, fullexternal consistency may not generally be possible.andP;  &quot;Transfer of training&quot;is then a key concern.andM;Correspondence of interface features to familiar features of the world beyondcomputing.andP;  A user interface design may use metaphor or analogy to objects,attributes, or relations in the world outside of computer interfaces.andP;  Withanalogic consistency, there is some common structure, but the elements mayhave quite different meanings; for example, the arrangement of arrows oncursor control keys may match the arrangement of compass point arrows on amap, This is quite different from the more precise external consistency ofthe cursor key arrangement on one keyboard with the cursor key arrangement ona different keyboard, where the elements have the same meaning.' Analogiesare weaker correspondences, but because the real-world domains are part ofeveryone's experience, they may be significant aids to initial learning andrecall-as well as possible pitfalls for the designer.andP;  Carroll [6] points outthat if technology is to provide an advantage, the correspondence to the realworld must break down at some point.andM;These distinctions among types of consistency may be less salient to usersthan to the designer.andP;  At a given moment, a user may be dealing with variousapplications and systems (as well as the world).andP;  Where the designers see twoapplications with internally consistent but externally inconsistentinterfaces, a user may see one internally inconsistent system.andP;  However, thedistinction may be important to the interface designer, who may be able toinfluence the internal consistency of the application being worked on whilehaving no knowledge of or control over the applications it will be used with.andO;And there can be performance consequences-the cost of one-time retraining ona new interface can be high, but if each interface is internally consistentthe disturbance may be transitory, whereas users may never adjust to aninternally inconsistent interface (or when two incompatible interfaces areused intermittently).andM;Ease of Learning can Conflict with Ease of UseandM;Much of the empirical work on consistency has focused on learning, whetherinitial learning or transfer of training to a new situation.andP;  Learning isprerequisite to usage, of course, and in the case of infrequent or casualuse, a user may always be in a state best described as learning.andP;  It seemsreasonable that a consistent interface will be easy to learn.andP;  An internallyconsistent design can often be characterized with a small number of names andrelations.andP;  An externally consistent interface may allow the use ofpreviously learned associations or be invoked by reference to a guidinganalogy that will also aid in subsequent recall.andM;However, ease of learning can conflict with subsequent ease of use.andP;  Whenthis happens, priorities must be established carefully.andP;  If learning isn'tpossible, use will not happen.andP;  However, people buy systems and applicationsnot to learn them, but to use them.andP;  We generally build user interfaces, notlearner interfaces.andP;  If a consistent interface supports learning but impedesskilled performance, and if its major use is by skilled users, thenconsistency is working against good design.andM;The keyboard examples that follow are of particular interest because theyhave been extensively studied and because their designs have evolved overtime.andP;  Subsequent examples will demonstrate that similar designconsiderations apply to software interfaces.andM;Design exercise #1: Function key layoutandM;Figure la presents a design problem confronted by the InternationalOrganization for Standardization as this is written: Given the six possiblepositions illustrated, where should the four arithmetic operations be placedon anumeric keypad that is to support data entry and calculator functions?andM;It was proposed that the assignment be across the top row, in the sequence +,-, X, - [24].andP;  The rationale was that this is consistent with the order inwhich we learn and remember these operations.andP;  When I gave 24 interfaceprofessionals this task, a plurality (8) produced this solution.andM;The proposed design is easy to learn and recall, but it is difficult to use.andO;For data entry and calculator use, the keys struck most frequently are Enter,+, and 0.andP;  Thus, placing the + key in the upper left corner maximizes handmovement.andP;  Placing it directly above the Enter key minimizes finger movementand error.andP;  This is in fact a common arrangement on commercial keyboards.andM;Thus, the best design violates consistency-it is not consistent with theorder in which we learn and spontaneously recall the operations, and it seemsaesthetically inferior to spread the operations across multiple rows andcolumns as well.andP;  Developing the appropriate design required analysis of theusers' task and an understanding of human motor control.andM;Figure lb shows three cursor key configurations used to move the user'sscreen position left, right, up, and down.andP;  Setting aside factors introducedby the size and shape of the keyboard and the locations of other keys, whichis the best design?andM;The set of 24 interface experts unanimously chose the star (ii) as the designthat they thought novices would rate most highly and about half of them alsochose the star as the best design.andP;  The star has an obvious aesthetic appealand it is consistent by analogy with directional indicators that appear oncompasses, maps, and so forth.andP;  But studies have shown that the inverted T(iii) is the most usable configuration [29] and its use is spreading throughthe industry.andP;  Users require access to opposed pairs of directional keys(e.g., to compensate for overshoot), and with (ii), with the index finger onthe cursor left key and the ring finger on cursor right, the middle fingercan cover both the cursor up and cursor down keys most efficiently.andP;  Thisperformance advantage may have first been discovered by the designers offast-action computer games, who often map the directional movements to the i,j, k, and I keys, which form the inverted T pattern.andM;The appropriate design is based on an understanding of the cursormanipulation task and of the user-in this case, the physical characteristicsof the hand.andP;  In both function key examples, designs consistent with externalexperience were tried, but ultimately were found to work against performanceefficiency.'andM;Design exercise #2: The typewriter keyboardandM;Consider the typewriter keyboard layout as a pure design problem, settingaside the retraining problems that a new design would entail.andP;  The earliestkeyboards were alphabetic [3] and with the advent of calculators andcomputers alphabetic keyboards have again been proposed (see [36]).andP;  Therationale for alphabetic keyboards is a consistency argument-we are familiarwith the alphabet, so key assignments consistent with alphabetic letter orderare easier to learn and perhaps recall (but see [38]).andP;  Nicolson and Gardner[34] show that in some situations complete novices do better with analphabetic keyboard.andM;It is not necessary to review the history of keyboard optimization efforts todiscern in Figure 2 the key point: Apart from alphabetic keyboards,consistency has played no role.andP;  Typing performance is governed by severalfactors, including the balance of workload across hands and fingers, theaverage length of finger trajectories, and whether letter pairs frequentlytyped in succession are typed by the same finger, by two fingers of the samehand, or by fingers on different hands (the latter is fastest because we cancarry out such motor actions in parallel).andP;  These factors are functions ofthe frequency of individual letters in the language being typed and thedistance between keys often typed in succession by the same finger or hand,which in turn is a function of the two- and three-letter combinations(digraphs and trigraphs) in the language.andP;  Designers have given slightly morework to the stronger right hand and to the stronger forefingers and middlefingers, and concentrated typing activity on the middle row of the keyboardto minimize vertical finger and hand movements.andP;  Keyboard designers have alsoproposed &quot;split&quot; keyboards better adapted to our hands, arms, and shoulders[32, 39].andM;Thus, keyboard design requires knowledge of human physiology and motorcontrol, as well as properties of the language to be typed.andP;  The evolution ofdesigns has reflected the changing view of which factors are germane and howthey should be balanced.andP;  It is a complex constraint satisfaction process-aslow, empirical process that may never be demonstrably complete.andP;  Theresulting layouts are difficult to memorize; they are not consistent withexperience and letters are not grouped according to simple rules.andP;  Whether analphabetic arrangement is optimal for children learning to use amicrocomputer [34] or leads to problems [38], even raising the issueemphasizes that the design process must center on a detailed understanding ofthe users' experience.andM;Summary: Consistency that supports ease of learning can conflict with ease ofuseandM;In the three keyboard examples, designs consistent with user experience inother domains were marketed and provided easy learning and recall.andO;Performance considerations then led to user-centered, task-centeredapproaches and new designs, with no role for the concept of consistency.andO;Thus, the empirical studies of the benefits of consistency, which havelargely measured ease of learning, recall, and transfer to new situations,must be treated cautiously.andP;  Learning and recall can be important, but usingan interface to carry out a task can be very different from remembering whatthe interface is.andP;  Furthermore, as the next section illustrates, interfaceconsistency sometimes works against both novice and skilled users.andM;Consistency can Work Against Both Learning and UseandM;Design exercise #3: Default menu selectionsandM;With many designs, when a menu appears, one item is highlighted, the defaultselection.andP;  Which item should it be? Commercially available systems haveexperimented with a number of approaches: the first item on the menu, theitem that users most frequently access, or the item that this particular usermost recently accessed.andM;The examples shown in Figure 3 and described below demonstrate that any suchinternally consistent design is sub-optimal.andP;  Menus are employed for avariety of tasks and optimal menu defaults vary with those tasks.andM;Consider the following scenario: A user wishes to italicize certain words ina document.andP;  After the first such word is found and selected, the edit menuis accessed-in the system illustrated, by using a mouse button to pop up themenu.andP;  It appears with the default selection of &quot;Props&quot; (for properties).andO;The user overrides the default to select Fonts, then Italics from thesecondlevel menu, and On from the third (as shown in Figure 3, la).andP;  When theuser then finds the next word to be italicized and brings up the menu, itautomatically comes up as shown in l b)-with Fonts, Italics, and On alreadydefaulted.andP;  This is the &quot;last item accessed&quot; rule.andM;Now the user wants to copy a paragraph using the Copy and Paste operations.andO;Copy will place a copy of the text in the clipboard and Paste will then moveit from the clipboard to the cursor location.andP;  The user brings up the menu ofcommands and overrides the default to select and execute Copy (Figure 3, 2a).andO;Then the user moves the cursor to the destination and brings up the menuagain.andP;  This time it automatically defaults to Paste! (Figure 3, 2b.) Thisviolates the &quot;last item accessed&quot; rule but is what the user virtually alwayswants.andP;  After pasting, the user again brings up the menu, which now defaultsto Copy (Figure 3, 2c).andP;  This toggling allows a user to make multiple copiesrapidly-clicking the button six times produces three copies, withoutrequiring close attention.andM;The rule &quot;consistently default to the item the user is most likely to selectnext&quot; would cover the cases examined so far.andP;  However, the next exampleillustrates that even this is not optimal.andP;  Now the user wishes torightjustify the text.andP;  The user accesses the Properties menu, selects Flushright, and brings up the menu to apply the change.andP;  It comes up defaulted toApply, which would apply the change only to the current paragraph, The userwishes to right-justify the whole document, so overrides the default andselects Global apply.andP;  This can be an irreversible operation, so aconfirmation step is required: a second-level menu with Confirm and Cancelchoices appears, defaulted to Cancel.andP;  This forces the user to take the stepof confirming that this action is desired (Figure 3, 3a).andP;  If the user thenwishes to make another global change, the entire sequence must be steppedthrough again (Figure 3, 3b).andP;  Apply and Cancel will still be defaulted, eventhough Global apply and Confirm were chosen the previous time and even thoughConfirm is what the user will select the overwhelming majority of times thismenu is accessed.andP;  The point of a confirmation step is to force the user todo it every time.andP;  Thus, the rule of &quot;default to the item the user is mostlikely to select next&quot; is violated when the most likely choice is apotentially irreversible operation.andM;No rule, consistently applied, produces good menu defaults.andP;  Enforcing ablanket consistency will damage the interface.andP;  In fact, subtle shifts in thesituation can change the optimal interface behavior.andP;  If the application werechanged by introducing an Undo operation, so Global apply was reversible,there would be no need to default repeatedly to the less dangerous Applyoperation.andP;  Then, after one Global apply was executed, the menu default couldbe Global apply, the most likely next choice.andM;Menu defaulting is typical of where one might hope to enforce interfaceconsistency through examination of formal properties of the interface.andP;  But,as with knife placement, the &quot;inconsistent&quot; interface choices describedearlier are so naturally molded to the users' tasks that users may not evennotice the inconsistency.&quot; No tool to produce or check for interfaceconsistency could handle this interface design appropriately unless itcontained a detailed knowledge of the users and their tasks, as well ashigh-level knowledge of the correspondence between those tasks and thefunctions applicable to specific interface objects (e.g., the difficulty ofundoing particular operations).andM;Establishing Appropriate Dimensions for ConsistencyandM;Design exercise #4: Abbreviating command or operation namesandM;Assume we wish to construct abbreviations for 20 command names.andP;  Whatabbreviation strategy would be best? Truncation? Vowel deletion?andO;Single-letter abbreviations?andM;You may have anticipated the answer: It depends on how the abbreviations willbe used.andP;  Truncation is the best abbreviation strategy if users will betyping familiar commands in a typical command-driven interface [50].andP;  In thissituation, the users know the command they want to enter and must reproducethe abbreviation.andP;  Truncation is a simple rule to recall and apply, generallyleading to short abbreviations.andP;  However, if the abbreviations are beingcreated to put on key caps, for example, then vowel deletion may be moreappropriate.&quot; In this case, the users will see the abbreviation and use it toreconstruct the full name of the operation, and longer abbreviations may beOK.andP;  Finally, if the command is one that users will type thousands of timesor if a menu will be visible to remind the users of the options, as in manyelectronic mail programs, then a single-letter abbreviation strategy may bebest.andP;  When commands are overlearned or otherwise cued, minimizing the numberof keystrokes may be the highest priority.andP;  (The role of task and experiencein abbreviation are further discussed in [1,19].)andM;This picture is more complicated when an abbreviation serves multiplepurposes.andP;  For example, a user might try to recall an abbreviated file namein order to type it or see the same abbreviated name in an index and try torecall what it stands for.andP;  A command might be overlearned for some users butnot for other users.andP;  Allowing users to customize the interface may bepossible, though it can be very risky [20].andP;  The availability ofcustomization does not eliminate the need for good design defaults.andM;A Snare: A Form of Consistency that is Always Available but OftenInappropriate Design exercise #5: Printing a folder or directoly Consider thesituation depicted in Figure 4.andP;  A folder containing several documents hasbeen selected.andP;  A menu of operations has been accessed and the Printoperation selected.andP;  The design question is: What should be printed when theoperation is executed?andM;In informal studies, most people said that they would expect all of thedocuments in the folder to be printed, However, system architects have arguedthat issuing the Print command in this situation should cause a list of thedocuments within the folder to be printed.andP;  In one project, the implementersargued successfully for this design on the basis of consistency with theinternal system architecture.andP;  A folder in this system was a list of pointersto documents.andP;  Printing a document produced a hardcopy of the contents of thedocument, and it was argued that printing a folder should similarly produce ahardcopy of its contents, namely a list of the documents contained in thefolder.andP;  The developers argued that consistency was of paramount importance,in this case consistency based on the underlying software architecture.andP;  7andM;Clearly, the wrong dimension for consistency was chosen.andP;  But it is not clearhow to describe the optimal design as being &quot;consistent&quot;-printing documents,whether document or folder is selected.andP;  Of course, it is &quot;consistent withwhat users want,&quot; since most users wish to print documents more often thanlists of documents.andP;  Once again we are focused on understanding the users'tasks.andM;Summary: The most available consistency is often harmful This example isparticularly important because the mapping of the system architecture ontothe user interface is a common source of interface design flaw (see e.g.,andO;[2,17]).andP;  Other examples of mapping the system design onto the user interfacedesign include grouping menu items based on implementation considerations,assigning functions to function keys on similar grounds, and evenconsistently displaying information in screen regions based on data type.andO;Recommending consistency as a design guide leaves designers free to look forconsistency where they will, and they are often much more familiar with thesystem architecture side of the interface than they are with the &quot;humanarchitecture&quot;-that is, users' tasks and psychology.andM;The advocate for the user must realize that the job often requires arguingfor inconsistency-inconsistency of the user interface with the underlyingsoftware architecture .andP;  If on other occasions the advocate endorsesconsistency as a general rule, the engineer will understandably be confusedor frustrated.andP;  A quest for a formally expressible consistency within theinterface may almost inevitably take one in the wrong directiontoward theunderlying system architecture, which we know how to express formally, andaway from the human psychological and task architecture, which are notunderstood nearly as well.andM;DISCUSSIONandM;The abbreviation and menu defaulting examples demonstrate that internaldesign consistency is an unreliable measure of good interface design.andO;Choosing appropriate abbreviations requires knowledge of their ultimate use,and may require a careful tradeoff analysis.andP;  Choosing the appropriate menudefault requires detailed knowledge of the higher-level tasks represented andalso depends on system characteristics such as the availability of an &quot;undo&quot;operation.andP;  Small changes in the environment may challenge an existing,consistently-applied principle.andP;  For example, the Macintosh conventions ofpull-down menus at the top of the display and a strict correlation of mousepointer movement with mouse movement are particularly suited to singleapplications and the original small display screen.andP;  With larger screens andmulti-tasking environments, these conventions may force users to makefrequent, large movements-Hypercard tear-off menus are a sign that skilleduser performance issues will break down this consistent design feature.andM;The keyboard examples demonstrate the unreliability of designing by analogyto real-world structures.andP;  In each case designers first adopted consistencywith a natural external domain but abandoned these designs when the users'tasks were better understood, Analogy to a familiar domain facilitatedimmediate learning but had negative consequences for subsequent performance.andO;Initial learning, the focus of most laboratory research and usabilitytesting, is an important and in some cases the primary issue.andP;  But skilledperformance may be of greater concern; also, as we move to more interactivesystems, certain aspects of learning become less relevant; in the case ofmenu defaults, novices as well as experts may operate smoothly andefficiently without consciously learning the design criteria.andM;A special case of designing by analogy is that of designing the userinterface to correspond to the underlying system architecture, as in theprint folder example.andP;  The system architecture is external to the userinterface and will not be familiar to many users, but is typically veryfamiliar to the designers.andP;  Although it may work against the user, mappingthe system architecture onto the user interface is very seductive, appealingto the designer's sense of consistency and simplicity.andP;  Some have even arguedthat one should, in fact, teach the user veridical models or how it works[26, 27, 44].andP;  But as our designs adapt to the ways that computer communitiesactually use systems, it is more likely that the user interface and systemdesign will diverge, reducing the appropriateness of burdening the user withboth descriptions.andM;The external consistency of a given interface with those of other computerapplications and systems is an increasingly important issue as computer usespreads through the population and into different application areas.andO;Interoperability and backwards-compatibility requirements reflect aspects ofthe users' experience and environment that should be reflected in aninterface design, but designers who lack the necessary information about theinstalled customer base or the marketing strategy will optimize interfacedesigns locally for their own product at the expense of a more globalefficiency [18, 21].andP;  These complexities and the resulting tradeoffs presentfurther difficulties for formal approaches to generating or monitoring forconsistency.andM;TOWARD A SYNTHESISandM;The first step toward integrating the case against user interface consistencywith the intuitive feeling and experimental evidence that some kinds ofconsistency are beneficial and that inconsistency can be harmful is torecognize that a &quot;fully consistent system&quot; [25] is not achievable.andP;  Interfacedesign is an engineering problem that forces tradeoffs among many factors,often including many possible forms and dimensions of consistency.andP;  Next, weneed to recognize the primacy of the users' work contexts in dealing withthese tradeoffs, cognizant that in some circumstances, the highest prioritymay not be characterized as consistency at all.andP;  The importance of centeringthe interface design on users and their tasks is acknowledged [e.g.,15, 37],but often the focus is on individual users carrying out simple, cognitivetasks.andP;  Hutchins, Hollan and Norman [23] go quite far in shifting the focusby stressing the importance of the &quot;task domain&quot; and of making the&quot;mechanisms of the system match the thoughts and goals of the user&quot;; othershave gone further into the work context to obtain an understanding of thephysical, social, and even historical structures in which users' tasks arecarried out [e.g., 4, 9, 51, 52].andP;  This article describes a pattern in thehistory of interface design that this focus explainsthe evolution away fromconsistent designs in areas where user tasks are understood.andM;In a concise review of the work on consistency, Kellogg [25] developedMoran's [30] taxonomy of user interface levels into a framework forconsistency.andP;  Of six interface levels on which consistency might besought-device, spatial layout, lexical, syntactic, semantic, and task-thework reviewed dealt with the middle four.andP;  Payne and Green [40] used asimilar taxonomy in outlining a formal model to represent &quot;task languages.&quot;andO;Both Kellogg's &quot;task level&quot; and Payne and Green's &quot;task language&quot; are definedin terms of simple operations or system functions, such as entering a number.andO;&quot;Task&quot; is thus very narrowly defined; Green and Payne call them&quot;simple-tasks,&quot; and Kellogg describes her focus as &quot;the structure of tasksdefined by the system (e.g., whether similar tasks are decomposed intoanalogous subtasks)&quot; and &quot;the mapping of the user's understanding of the taskdomain to system procedures (e.g., whether tasks with analogous semanticprocedures on the system are in fact perceived as similar tasks by theusers).&quot;andM;In this article, the term &quot;tasks&quot; encompasses users' actual work in a muchbroader sense: the different tasks of data entry and numerical calculationmay employ the same function of entering a number; further, data entry donefrequently is a different task than data entry carried out infrequently.andO;Since computer applications and interfaces rarely represent the physical,temporal, or social contexts of users' work, Kellogg's framework did not haveto address these factors.andP;  But these contexts do, or should, implicitlyinfluence our design choices at lower levels, whether or not they areexplicitly recognized in the design.andM;Given this hierarchy of user interface elements and the recognition thathighest level (task) considerations can warrant overriding consistency atlower levels, one might propose that concerns at any one level override thoseof lower levels.andP;  For example, we saw that semantic aspects of users' taskscould justify overriding a syntactic approach to menu defaulting.andP;  Alongthese lines.andP;  Kellogg [25] suggested that a possible strategy is &quot;to optimizelow-level interactions for each environment, but to hold the underlyingconceptual model of the system constant.&quot;andM;However, this conflicts with intuitive and empirical evidence thatinconsistency in low-level interactions can be very frustrating-keyboardsthat differ in the position of a few keys (e.g., escape and control keys),programs that differ in the names of important commands (e.g., &quot;quit&quot; and&quot;exit&quot;), and so forth.andP;  Performance decrements in keypad use have beenmeasured when the conceptual model was held constant and the low-levelinteractions were allowed to vary [8].andP;  More generally, transfer of trainingexperiments show that the learning or unlearning of low-level productions canbe central [43).andP;  In an experiment that varied both physical surfacesimilarity and the absence or presence of an underlying conceptual model ofan interface, Schumacher and Gentner [47] found that both surface similarityand the conceptual model had significant effects on transfer of training.andM;Thus, there may be no simple approach to determining the relativesignificance of consistency along various dimensions and levels.andP;  We knowthat detailed knowledge of the users' task context can identify or eliminatesome dimensions on which a design should be consistent.andP;  Perhaps thesignificance of consistency on a dimension or level is related to thefrequency with which users operate on the level or vary their activity alongthe dimension.andP;  In addition, we are helped by thinking of consistency as onegoal, often in conflict with other goals that are at times more important.andM;Where task knowledge is unavailable or does not constrain the design, someform of consistency may be the best resort, suggesting a role for formalapproaches to generating or evaluating consistency [e.g., 10, 28, 41, 42,53], but formal systems must provide enough flexibility to permit thedimensions of consistency to be changed or overridden as task knowledgeincreases, and the temptation to map the system design onto the userinterface design must be resisted.andP;  The studies that identify dimensions onwhich unmotivated inconsistency can be costly lend support to design toolsthat bring such inconsistency to the attention of the designer [e.g., 22, 31,33] and to design tools that provide for the representation of arguments forparticular design decisions, including conflicting arguments [e.g., 7,11]When a user interface is designed for a system built for a wide range ofapplications and users, such as the Macintosh interface, it is more difficultto get a meaningful understanding of the users' tasks.andP;  In this situation, itmay make sense to adhere consistently to some interface choices to provideusers with the benefits of easier learning and transfer.andP;  But this analysissuggests that as these systems are pushed into specific application areaswith dedicated users, maintaining that consistency will lead to increasingperformance costs.andP;  Only careful attention to the users and their tasks willindicate where those costs outweigh the benefits.andM;The examples in this article were drawn from a limited number ofdomains-keyboards, menus, command names, file structures-but this mayprimarily reflect our greater familiarity with these domains.andP;  In theseareas, designs often went through a sub-optimal consistent phase before ourunderstanding of the relevant users' tasks grew and the consistent design wasabandoned in favor of a better one.andP;  Revisiting the example from theintroduction, if a Martian were arranging our household implements, with noidea of the tasks for which each would be used, placing all of the knivestogether would be a good idea.andP;  Once the Martian came to understand how weused different knives, it could come up with a better arrangement.andO;Similarly, as we come to understand users' work environments better, weshould find designs evolving away from consistent interfaces in many areas ofinterface design.andP;  The way to stay at the forefront of this evolution is toknow your users and their tasks a little better than anyone else.andM;Acknowledgments: Many colleagues at the MCC Human Interface Laboratory, andearlier at Wang Laboratories and the MRC Applied Psychology Unit, havepuzzled over these issues with me.andP;  In particular, I am indebted to PhilBarnard, Susan F.andP;  Ehrlich, and Steven Poltrock, as well as to discussionswith Dedre Gentner, Don Gentner, Catherine Marshall, and Don Norman.andP;  KenichiAkagi provided information on aspects of keyboard layout, and with Will Hill,Jim Hollan, Jim Miller, Tom Erickson, Larry Parsons, and Jack Carroll,commented usefully on an earlier draft.andP;  Editorial guidance by Henry Ledgardand two anonymous reviewers led to marked improvements.andP;  This paper would nothave been written without the impetus provided by Jon Meads, Jakob Nielsen,and the participants in the Workshop on Coordinating User Interfaces forConsistency at CHI'88; discussions with Wendy Kellogg were particularlyhelpful.andO;</TEXT></DOC>