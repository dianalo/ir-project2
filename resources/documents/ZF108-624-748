<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-624-748  </DOCNO><DOCID>08 624 748.andM;</DOCID><JOURNAL>Dr. Dobb's Journal  July 1990 v15 n7 p54(8)* Full Text COPYRIGHT Mandamp;T Publishing 1990.andM;</JOURNAL><TITLE>Information models, views, and controllers: the key to reusabilityin Smalltalk-80 lines within MVC. (Model-View-Controllerarchitecture for the Objectworks for Smalltalk-80) (tutorial)</TITLE><AUTHOR>Goldberg, Adele.andM;</AUTHOR><SUMMARY>The 'Model-View-Controller' (MVC) architecture for ParcPlaceSystems' Objectworks for Smalltalk-80 (OFS-80) object-orientedprogram development software facilitates the design andimplementation of interactive graphical user interfaces throughthe use of reusable software objects representing presentation andinteraction processes.andP;  Reusable software components are animportant tool for improving programming productivity.andP;  The MVCparadigm separates the implementation of the domain-specific modelfrom the programming of the user interface, the latter consistingof presentation (view) and interaction (controller) components.andO;The MVC programming process consists of 'design and implementationof the information model components' of the application, thenselection of reusable user interface components, graphicalrepresentations and interaction styles from a component library.andM;</SUMMARY><DESCRIPT>Company:   ParcPlace Systems Inc. (products).andO;Product:   Objectworks for Smalltalk-80 (Program development software)(design and construction).andO;Topic:     Object-Oriented ProgrammingObject-Oriented LanguagesGraphical User InterfaceProgramming InstructionFunctionsSystem DesignSoftware BorrowingSystem Development.andO;Feature:   illustrationcharttableprogram.andO;Caption:   Five possible views of a counter. (chart)Classes for reusable components. (table)Model for maintaining a numeric counter, associated views andcontrollers. (program)andM;</DESCRIPT><TEXT>We have all experienced the benefits of reuse in every aspect of life.andP;  Forexample, when traffic control signs are reused throughout a city, a state,and even internationally, our ability to navigate streets and highways ishelped.andP;  Reuse of text editors and picture editors across applications on thesame or different hardware systems improves our ability to use thoseapplications.andP;  The value of a graphing or diagramming technique increaseswith the number of ways it can be reused on different data, thereby improvingour ability to quickly analyze new kinds of data.andP;  Reuse benefits the user aswell as the application developer.andM;In the context of software applications, to reuse a software componentgenerally means keeping it the same, while changing the context or style inwhich it is used.andP;  Text, for example, might stay the same, while the fontsand document layout containing that text might vary; data might stay thesame, but it might be presented differently in terms of graphs, pie charts,tables, or animations; or the ways of presenting information might stay thesame, while the techniques for making selections and issuing commands mightbe different.andM;One major area of software development that can benefit from reusablesoftware is the design and implementation of applications having graphicaluser interfaces.andP;  As a consequence of the widespread availability ofbit-mapped displays, the attention of many programmers shifted from emphasison implementing models of data, transactions, and/or business functions, tocreating appealing user interfaces.andP;  Requirements for adhering to the manyuser interface standards have not decreased the importance of seekinginnovative ways to present information on the display screen and to supportusers in accessing and manipulating that information.andM;Because reusability of user components is a key element in improving theproductivity of software developers, an important question to answer is whichsoftware components should be targeted for reuse? This article answers thereuse question through a review of the implementation architecture called&quot;Model-View-Controller&quot; (MVC) that is available to application developersusing the Objectworks for Smalltalk-80 program development system developedby ParcPlace Systems.andP;  The intent of the article is to demonstrate theadvantages of this architecture in developing graphical interactiveapplications.andM;MVCandM;The Model-View-Controller architecture for the Objectworks for Smalltalk-80system was designed specifically to help programmers create graphical userinterfaces through the reuse of software components that represent thepresentation and interaction aspects of an application.andP;  The use ofobject-oriented software was essential in motivating the design for MVC andwas the basis for its implementation.andM;One way to improve productivity in software development is to reuse userinterface designs across different applications.andP;  Another entails leveragingspecial support for multiple ways of viewing and interacting with aninformation model in accordance with diverse user preferences.andP;  For example,some users might want to view their data as tables of numbers, while othersmight prefer graphs, descriptive text, or animations.andP;  These alternativesmight be mapped onto a set of software components that can be attachedinterchangeably to a common information model.andP;  The information model is thenshared among the projects requiring the different graphical interfaces.andP;  Thedevelopment effort and cost involved in implementing the information model isincurred just once.andP;  Many different information models can be presented withsimilar user interfaces.andM;Recognizing and exploiting these opportunities for reuse led to the design oftwo kinds of elements in Objectworks for Smalltalk-80 - a library ofpresentation and interaction components, and a set of tools supporting amethodology for linking presentation and interaction components to underlyinginformation models.andP;  These kinds of elements provide the basic buildingblocks for the MVC architecture.andM;Model&quot; refers to a representation of the application domain as an informationmodel, while  view&quot; is a specification of how aspects of a model arepresented to the user.andP;  The  controller&quot; is the specification of how the usercan communicate or interact with the application in order to request changesin the view or in the underlying model.andP;  Consider, for example, a real-timeclock that is to appear on the display screen.andP;  The information model is anobject representing DateAndTime, which is implemented in terms of thecomputer hardware's built-in clock.andP;  Suppose DateAndTime can report thecurrent time of day and the name of the current day of the current month.andP;  onthe screen, DateAndtime might appear as a digital watch in which the day andmonth are printed on one text line and the hours:minutes:seconds appear,constantly updated, on a second text line.andP;  This text-oriented presentationis the &quot;view&quot; of the model DateAndTime.andM;Another view might be of an analog clock, with a second hand moving around,ticking off seconds.andP;  Perhaps the user has direct access to resetting thetime information.andP;  in the textual view, the user could select tile text ofhours:minutes:seconds with a pointing device such as a mouse and then use atext editor to modify the visible information.andP;  This in turn would modify theunderlying DateAndTime model, and the change would be reported back to theview that is an analog clock for immediate update.andP;  The user's ability totext edit is handled by a &quot;controller.&quot;andM;The design of the MVC roles in Smalltalk-80 came about as a result of atwo-stage factoring.andP;  First, the design and implementation of thedomain-specific aspects (the model) is separated from work on the userinterface.andP;  Second, the user interface is divided into presentation andinteraction aspects.andM;The ideal scenario for the construction of application software under the MVCparadigm begins by focusing on the design and implementation of theinformation model components of an application.andP;  (Even here, there aresubstantial opportunities for reuse from previous projects.) Once theunderlying model is completed, the developers reach into a library ofreusable user interface components and select (and tailor) various graphicalpresentations and styles of user interaction appropriate for the targetusers' preferences.andP;  In this way, it is possible to create severalimplementations quickly, varying the presentation and interaction stylesaccording to user needs.andP;  In our experience, it is common for the underlyingmodel and presentation style to stay fixed across a broad set of end users,whereas interaction style (such as typing commands versus command keys, orthe selection of icons) varies considerably.andP;  By separating the notion ofpresentation from interaction, this disparity can be accommodated.andM;Reuse Through MVCandM;The ability to reuse software components depends, of course, on the abilityof the software system or language to describe and maintain identifiablemodules.andP;  The current wisdom in the software industry is that such a moduleis a packaging of behavior (procedures) and properties that both describe themodule and comprise the data required to implement the behavior.andP;  The moduleis referred to as an object; a system that supports the description,implementation, and testing of objects is said to be object oriented.andP;  Such asystem must also provide tools for factoring and re-factoring modules interms of abstract and concrete specifications of behaviors to be representedby modules of various scopes and complexities.andP;  The software developerimplements an application by creating objects that combine, refine (orspecialize), and/or establish information dependencies among existing (thatis, reusable) and newly synthesized object types.andP;  The MVC approach suggestsfactoring a system into three kinds of objects.andP;  Model objects share ageneric ability to inform views and controllers of changes in their state.andO;View objects understand how to draw graphical representations of a Modelwithin an identified area of the display screen and how to update thoserepresentations according to information solicited from the Model.andO;Controller objects support a variety of default-and developer-defined ways ofhandling user events, scheduling access to Views supporting user interactionvia input devices, and sending editing commands to Views or Models Each ofthese three kinds of objects is de fined in terms of a hierarchy ofdescriptions.andM;Reusing the Expertise of OtherandM;The technical history of MVC is tied to the idea that programmers are nottypically trained as graphic artists nor as human-factor engineers.andP;  But theknowledge of such experts could be captured, in the form of presentationtechniques and interaction frameworks, and made available in a library ofreusable software components.andP;  The factoring of MVC draws attention toparticular kinds of components that should be made available for reuse inorder to take advantage of the knowledge of these experts.andM;Two programming techniques are needed to support such reuse: Composition andrefinement.andP;  Composition entails combining existing elements to createsomething new.andP;  Objectworks for Smalltalk-80 supports two kinds ofcomposition: Composition via delegation, stating that a newly created objecthas properties that refer to (instances of) existing classes (an action thatrequires manipulation of these properties is delegated to the appropriateobject); and composition via dependency, stating that an instance of oneclass depends on the change in behavior of (instances of) another class.andM;Additionally, two kinds of refinement are supported: Refinement viainheritance (subclassing), stating that a newly created object acquires theproperties, protocol, and implementation of the protocol, of an existingclass; and refinement via parametrization, stating that a new object is aninstance of an existing class of objects by filling in details about theproperties that distinguish this instance from other instances of the class.andM;Through composition, you can reuse existing models (that correspond togeneric objects), existing views, and controllers that define a look and feelfor the user interface and existing tools, for example, a text editor ordocument outline browser.andM;Through refinement, you can reuse existing application-building frameworksthat encompass sets of views and controllers, as well as parametrisizablemodels.andP;  You can also reuse existing parameterizable, tailorable completeapplications.andM;Through composition and refinement, object-oriented MVC design allows thesoftware analyst/designer to focus on creating components that areimmediately reusable and that provide for future incorporation of new views,controllers, and/or models.andM;A Model for CountingandM;The Smalltalk-80 code in Listing One (page 106) consists of a simple modelfor maintaining a numeric counter, associated views, and controllers.andP;  Thismodel is called  Counter.&quot; Using a variety of viewing objects, the currentvalue of the counter is presented on the display screen in five differentways.andP;  Two viewing classes are offered in the example: CounterView andBarView.andP;  The same controller is used for all of these views.andP;  It specifiesthat the user selects a menu item, either &quot;Increment&quot; or &quot;Decrement,&quot; inorder to change the numeric value by an increment or decrement of one.andO;Presentation of a menu that appears when the user presses a mouse button ishandled by the controller, an instance of class CounterController.andM;The five examples are shown in Figure 2 [omitted], and the initializationmessages to classes Counterview and BarView are given in the comment of thecode for the classes.andM;Note that in the Objectworks for Smalltalk-80 system, the library of reusablecomponents includes the classes shown in Table 1 [omitted], in addition toclasses Model, View and Coutroller.andM;The algorithm for displaying a view is the response to the messagedisplayView as defined in classes CounterView, and BarView.andP;  Note that inListing One, double quote marks surround comments that are dispersedthroughout the code.andP;  Formatting is done to aid readability.andM;By initializing each view with the messages shown in Figure [omitted] 2 withthe same model of a counter (that is, where aModel: = Counter new), all theviews present the same numeric values and each view updates whenever thecounter value is changed.andM;Advantages of the MVC ApproachandM;Three primary advantages derive from adopting the MVC approach and using itto factor graphical interactive applications.andP;  The advantages are: MultipleViewing, Development Productivity, and Quality.andP;  Let's look at each briefly.andM;Multiple Viewing.andP;  Factoring the underlying model from its graphicalpresentation and interaction allows the programmer to couple the model toseveral alternative interfaces.andP;  Objectworks for Smalltalk-80 providesspecial support for objects to exchange information about changes.andP;  Wheneveran object changes, it broadcasts a message that it has changed and whataspect (property) has changed.andP;  By combining this support for dependencyrelationships with the factoring of views and controllers from the underlyingmodel, several views of the same model can be interacted with simultaneouslyon the same display.andM;Development Productivity.andP;  As noted earlier, it is often possible to createnew views and controllers as refinements of existing ones, while retainingthe underlying information models.andP;  It is also often necessary for theprogrammer only to implement specific kinds of models that fit into existinguser interface designs.andP;  Therefore, taking advantage of the reusability ofexisting MVC components and frameworks can reduce significantly the amount ofprogramming necessary for completing an application development project.andM;The programmer must be aware of the contents of the available libraries ofreusable components and have tools for locating and experimenting with thosecomponents.andP;  objectworks for Smalltalk-80, for example, provides the systemsource code browser with MVC components carefully organized into categories.andO;Each of the program development tools provided with the product are createdusing the MVC approach.andP;  The programmer can inspect the implementation ofthese tools using the ParcPlace debugger and special MVC inspector.andM;MVC factoring also facilitates the programmer's ability to respond to newtechnology for special physical needs or interaction media.andP;  For example,this factoring makes it a simpler task to utilize voice output instead ofprinted text on a display screen.andP;  Only the presentation aspects of anMVC-style application would change, not the underlying model.andM;Quality.andP;  Reusing existing components allows those components to become moremature and, therefore, more robust as they are tested in new situations.andO;Reusing existing designs supports the acquisition of the expertise that mightnot otherwise be available.andP;  And improved productivity allows for moreexperimentation and testing.andM;The FutureandM;MVC was first explored and tested in earlier versions of the Objectworks forSmalltalk-80 system.andP;  It was designed to enable reuse of classes representingviews and controllers, with models that were otherwise nongraphical.andP;  Thecurrent implementation was designed with assumptions about the sophisticationof the programmer who is able to reuse components from an extensive library.andO;The desire for uniformity of software architecture encouraged the applicationof the MVC design concepts to text and picture editors, creating considerableexperimentation and discussion about the idea of splitting techniques ofselection, scrolling, and zooming from these underlying graphical entities.andO;The original MVC was not designed to deal specifically with underlying modelsthat are themselves graphical in nature.andP;  We were primarily trying to supportvisualization of simulations written in Smalltalk-80, itself designed as alanguage that supports general-simulation descriptions.andP;  Over years of use,we have discovered simplifications and new abstractions that make theseperformance and implementation issues easier to understand.andP;  New improvementswill appear in subsequent releases of objectworks for Smalltalk-80.andM;Source Code AvailabilityandM;As a service to our readers, all source code is available on a single diskand online.andP;  To order the disk, send $14.95 (Calif.andP;  residents add sales tax)to Dr. Dobb's journal, 501 Galveston Drive, Redwood City, CA 94063, or call800-356-2002 (inside Calif.) or 800-533-4372 (outside Calif.).andP;  Specify issuenumber and disk format.andP;  Code is also available through the DDJ Forum onCompuServe (type GO DDJ).andO;</TEXT></DOC>