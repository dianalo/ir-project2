<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> DOE2-46-0519 </DOCNO><TEXT>In this paper, we study recipes as examples of process programs. By doingso, we intend to learn about cooking as a process and recipes as specificationswritten in programming languages. We are looking for some insights intothe principles which should be incorporated into computer programminglanguages, especially languages for the expression of computer softwareprocesses. We are also interested in studying how process descriptionsare currently effectively communicated between humans in the specificproblem domain of cooking recipes. Our work is based upon close studyof a modest number of recipes. From this study, we infer the featuresthat a language supporting the expression of recipe programs must have.We suggest that a language that is basically algorithmic can suffice,but only if it also support concurrency, real time constructs, and datatype specification that is more complex than what is available in conventionallanguages. Such a language should probably also support rule-based functionevaluation. This language therefore incorporates a mixture of differentprogramming language paradigms (eg. algorithmic, real-time, and rule-based).This suggests that it is necessary to create languages which effectivelymix paradigms if we are to cleanly and satisfactorily support the programmingof human processes. In that such a language would draw upon innate humancapabilities, it would probably also have much wider applicability. 6refs.</TEXT></DOC>