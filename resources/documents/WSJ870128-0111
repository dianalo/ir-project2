<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> WSJ870128-0111 </DOCNO><HL> ---Defects Have Killed Sailors,Maimed Sick, Hurt Firms;The Shuttle-Bus Solution---Is 'Star Wars' Too Vulnerable?---By Bob DavisStaff Reporter of The Wall Street Journal</HL><DD> 01/28/87</DD><SO> WALL STREET JOURNAL (J)</SO><IN> COMPUTERS (EDP)NUCLEAR POWER, FUEL (NUK)AEROSPACE (ARO) </IN><TEXT>   Verdon Kidd, an East Texas bus driver, was making progress against his skin cancer last spring when his computerized radiation-therapy machine went haywire and killed him.    Federal and state regulators say a defect in the machine's software caused the machine to burn Mr. Kidd with radiation 80 times more potent than the prescribed dose. Atomic Energy of Canada Ltd., the manufacturer, acknowledges that its equipment may have been partly to blame but says that it can't possibly catch every bug.    &quot;There are too many combinations of features to guarantee that the {radiation} beam won't come on too intensely,&quot; says Walter Downs, a quality-assurance manager at the Ottawa-based company. The machine is being redesigned so that it shuts down almost instantly when it delivers too high a dose.    The tiniest software bug can fell the mightiest machine -- often with disastrous consequences. During the past five years, software defects have killed sailors, maimed patients, wounded corporations and threatened to cause the government-securities market to collapse. Such problems are likely to grow as industry and the military increasingly rely on software to run systems of phenomenal complexity, including President Reagan's proposed &quot;Star Wars&quot; anti-missile defense system.    &quot;We have to be very careful what we trust to computers,&quot; cautions Peter Neumann, a computer scientist at SRI International Inc., a Menlo Park, Calif., think tank. &quot;The vast majority of systems are deeply flawed from the viewpoint of reliability, safety, security and privacy.&quot; Adds Edward Lieblein, formerly the Pentagon's top software expert: &quot;Software problems have reached crisis proportions.&quot;    Software bugs breed as quickly as cockroaches and are as difficult to stamp out. A computerized banking system, for instance, may consist of millions of lines of computer code, written by hundreds of people who each work on small segments of the program. Software experts say they can't ever know with certainty whether all the segments will work in harmony; an error as tiny as a misplaced semicolon can cause a system to malfunction.    &quot;Imagine writing a large book, but instead of three authors you have 300 and they're all writing a few paragraphs -- try putting that together and getting it to make sense,&quot; says John Musa, a software expert at American Telephone andamp; Telegraph Co.'s Bell Laboratories.    Complex accounting, medical and military systems are especially vulnerable.    In California last summer, a software bug caused the state to pay bondholders $4 million in interest that wasn't due. The state treasurer quickly discovered the error, though, and stopped payment on the checks.    The number of computerized medical products recalled annually by the Food and Drug Administration has doubled since 1982. The products recalled include a programmable pacemaker that malfunctioned when a patient walked by a store's antitheft device and an infusion pump that delivered insulin only at maximum doses. FDA Commissioner Frank Young says that the agency plans to inspect software-driven medical instruments more closely, but it will be difficult for the agency to catch bugs that manufacturers can't find through laborious testing.    In military use, design errors can have deadly results, as was demonstrated during Britain's conflict with Argentina over the Falkland Islands.    British aerospace engineers had equipped the frigate Sheffield with a computerized air-defense system for detecting radar signals from Soviet-bloc missiles. But the Sheffield was unexpectedly dispatched to the Falklands and faced French-made Exocet missiles fired by Argentinian pilots.    A British Ministry of Defense spokesman says that the Exocet transmits radar beams on the same frequencies as the Sheffield's communications system. That wouldn't normally be a problem, but on May 4, 1982, when the Sheffield was sending a telex to London, its air-defense system couldn't pick up the telltale signal of an incoming Exocet. Twenty sailors died as the missile ripped a hole in the Sheffield, sinking the ship. &quot;It was incredibly bad luck,&quot; the spokesman says.    The U.S. Defense Department faces a daunting task making its weapons software bug-free, partly because of the sheer size of the job. The Pentagon estimates that it will spend $30 billion in 1990 on weapons software, about three times the 1985 total. But it figures that demand for software is growing so rapidly that by 1990 the industry will be short one million programmers and analysts to do the work.    Military projects are plagued by what Rear Adm. Harry Quast, who oversees the Navy's weapons software, calls &quot;requirements creep.&quot; That is military lingo for the Pentagon practice of trying to soup up weapons by requiring contractors to rewrite software to make the weapons more powerful.    The Navy says that it has so far launched four nuclear submarines without Tomahawk cruise missiles because Raytheon Co. couldn't deliver the missile software on time. Part of the reason for the delay, the Navy admits, is that it changed its mind on how the missile software should function and both Raytheon and the Navy underestimated how long the modifications would take.    Requirements creep also hinders Aegis-class ships, which use sophisticated computers to track and destroy enemy missiles. Over the years, the ships have added sonar to detect submarines along with Harpoon missiles to attack ships, forcing contractors to rewrite their software.    David Cox, a former manager at the RCA Corp. unit that writes and services Aegis software, says that the various systems don't fully communicate now. As a result, he says, the commanding officer may not have all the sonar and Harpoon data he needs. &quot;He can't get the whole picture&quot; of a battle, Mr. Cox says. The Navy says it considers its sonar communications adequate but plans to upgrade the Harpoon software.    The Pentagon's software problems bode poorly for President Reagan's Strategic Defense Initiative, which envisions building the world's most complex software system to detect and destroy thousands of Soviet nuclear missiles. &quot;Star Wars&quot; proponents suggest building the system in small, manageable chunks, but critics say that coordinating the parts and testing the system would be a nightmare.    &quot;Any software system that is large and has to work perfectly the first time has two strikes against it,&quot; says John Shore, a former naval software researcher. &quot;But in addition, Star Wars would face a determined adversary -- that's strike three.&quot;    Defense-software snags have even played a role in a corporate takeover. Less than three years ago, Sanders Associates Inc. was a highflying defense electronics company. But its earnings and stock price plummeted after it fell behind in developing Air Force test-equipment software. Unlike many Pentagon software projects, this was a fixed-price contract, so Sanders, based in Nashua, N.H., couldn't recover its unexpected expenses.    Last summer, Loral Corp., emboldened by Sanders's stock-price decline, undertook a hostile bid for Sanders. Sanders fended that off but agreed to be swallowed by Lockheed Corp. Michael Lauer, an analyst at Oppenheimer andamp; Co. who closely followed Sanders, attributes the takeover to Sanders's software and other engineering problems. Mistakes in software development have become so expensive, he says, that contractors &quot;overly dependent on one or two programs are vulnerable&quot; to corporate raiders.    Sometimes fixing a small bug can lead to greater problems. Two years before the first launch of the space shuttle, a programmer changed the timing on some shuttle software by one-30th of a second. Unknown to the National Aeronautics and Space Administration, that minuscule change introduced a 1-in-67 chance that the shuttle's five on-board computers wouldn't work in sync. Twenty minutes before launch in April 1981, the bug appeared, the computers couldn't communicate and NASA scrubbed the flight.    NASA says that thousands of hours of testing hadn't uncovered the bug. &quot;It's as hard to predict software failure as it is to predict what your poker hand will be in the next deal,&quot; says John Garman, a leading NASA software expert.    Bank of New York discovered how high the stakes can be in late 1985. A computer error blocked the bank from delivering huge amounts of government securities to customers and accepting payment. As a result, the bank was forced to borrow $23.6 billion overnight from the Federal Reserve Bank of New York to cover the shortfall and pay $5 million interest on the loan.    Though the bank resolved its software problem within two days, E. Gerald Corrigan, the president of the New York Fed, says that the government-securities market showed signs of unraveling even in that short period of time. There was &quot;a backup in the willingness and ability of some other market participants to transfer securities among themselves,&quot; he told Congress.    Correcting software failures is exacting work. Hewlett-Packard Co. has delayed marketing a new, super-fast computer, the Series 930, for six months because software snags cut down the computer's speed. Now the Palo Alto, Calif., computer maker is combing through hundreds of thousands of lines of computer code to reduce the time that parts of the program take to run basic functions. &quot;We underestimated the difficulty,&quot; says Jay Richards, a Hewlett-Packard software manager. He adds that the computer should be ready by the summer.    The Pentagon has tried to reduce its software problems by requiring contractors to use a single new computer language, called Ada. Previously, weapons contractors used as many as 80 different languages. But critics such as David Parnas, a weapons-software expert at Queen's University in Kingston, Ontario, says that Ada frustrates software programmers because it is so difficult to understand. Software written in Ada, he adds, runs so slowly that it isn't suitable for weapons, which must respond instantly to threats. The Pentagon responds that the speed of Ada programs matches the speed of other computer languages.    Software flaws go beyond technology. &quot;Most software problems are management problems,&quot; says Will Smith, formerly the chief technical officer at ITT Corp. &quot;When you run into technical problems, that's when you expose weaknesses in management.&quot;    ITT, for instance, tried to build its most powerful telephone switch by having four subsidiaries in different European countries build parts of the software system. Mr. Smith, who headed the project for several years, says that none of the European engineers who were developing the system reported to him. Instead, they reported to their national companies, with which Mr. Smith had to negotiate to make changes in the switch. He blames this cumbersome procedure for the fact that ITT was over budget and years late in delivering the product. ITT confirms that its management structure delayed the telephone-switch development.    Taking a cue from ITT's problem, ATandamp;T houses its advanced telephone-switch software designers in a few buildings in Naperville, Ill. &quot;There are shuttle buses going back and forth,&quot; says Karl Martersteck, a research and development manager. &quot;We want knowledge of the design shared between programmers.&quot; </TEXT></DOC>