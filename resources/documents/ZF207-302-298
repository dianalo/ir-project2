<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-302-298  </DOCNO><DOCID>07 302 298.andM;</DOCID><JOURNAL>Dr. Dobb's Journal of Software Tools  June 1989 v14 n6 p75(3)* Full Text COPYRIGHT Mandamp;T Publishing Inc. 1989.andM;</JOURNAL><TITLE>Maintaining system security. (computer systems security)(technical)</TITLE><AUTHOR>Moir, Dale.andM;</AUTHOR><SUMMARY>Security risks due to vulnerabilities in the user environment andthose in networks can be handled with similar approaches.andP;  In theuser file system, chief concerns are protecting users fromthemselves and each other.andP;  To prevent malicious tampering, allfiles and directories, especially those containing executablefiles, should be write protected.andP;  A search program may beimplemented to detect possible 'Trojan horse' programsmasquerading as system commands.andP;  On networks, similar threats maycome from remote sites.andP;  The network configuration should be aslimited as communication needs allow.andP;  Recursive algorithms may beused to automate security checks by flagging vulnerable orsuspicious files.andM;</SUMMARY><DESCRIPT>Topic:     Data SecuritySecurity SoftwareSystem IntegrityMemory ProtectionNetworksAlgorithms.andO;Feature:   illustrationprogram.andO;Caption:   (A recursive algorithm). (program)(Sample code). (program)(an approach to network checking). (program)andM;</DESCRIPT><TEXT>Maintaining System SecurityandM;Maintaining computer security, whether it be &quot;open&quot; systems like the Unixsystem or &quot;closed&quot; systems like those carrying government approved securityratings, involves a wide range of complex issues.andP;  Among the more pressingsecurity issues are vulnerabilities in the user file system and threats tonetwork security.andP;  Although, these areas are not necessarily related, similarapproaches can be applied to each.andM;Vulnerabilities to User File SystemsandM;Computer system administrators are responsible for maintaining security,sanity, and day-to-day functionality.andP;  To some extent, users are capable ofinterfering with most or all of these goals and there are several possiblesecurity risks that can be caused by naive or inattentive users.andP;  Becausethreats to computer security can come from the outside in the form of hackersor computer intruders or from the inside in the form of malicious ordisgruntled employees, there exists a need to protect users from each otherand from themselves.andP;  With this in mind, I'll look first at thevulnerabilities that can occur in the user file system or the area whereusers store their programs and data, the &quot;home directory.&quot;andM;File permissions determine whether a file is readable, writable, orexecutable and are an important component of information access control inany system.andP;  Consider the case where a malicious user wants to dupe a naiveuser into executing some command.andP;  Perhaps the simplest way to achieve thisis by placing that command in an executable file owned by the naive user.andO;This can be accomplished if the naive user has an executable file that iswritable by users other than himself.andP;  The malicious user need only place themalicious commands in the writable executable file and wait for the user torun the contaminated program.andM;Consider the following &quot;malicious command:&quot; cd$HOME rm-rfandM;The first command, derived from Unix, changes the current directory to be theuser's home directory.andP;  The second command recursively removes all files anddirectories located beneath the current directory.andP;  Thus, if a malicious userwere able to cause an unsuspecting user to execute these commands, then theunsuspecting user would unknowingly remove all his files and directories.andP;  Ofcourse, there are more subtle methods of attack available to the malicioususer but this one is quite effective.andM;The vulnerability in this case stems from the fact that one user is &quot;givingaway&quot; his execution privilege to another in the form of a writable executablefile.andP;  The point is that all executable files imply an executionprivilege--some user will be invoking that process at some time or another.andO;As such, all executable files should be write protected, just like the systemexecutable files.andP;  Assuming that you have access to a list of a user's homedirectories, it is a good idea to look for vulnerable user files; a recursivealgorithm like that in Example 1 shows a way of keeping tabs on vulnerablefiles.andM;Many people seem to believe that a write-protected file is always safe, evenif it resides in a writable directory.andP;  A writable directory, however, allowsother users to move (or rename) write-protected files.andP;  Once done, a file ofthe same name can be created in the same writable directory.andP;  As an example,consider the case where a user's start-up file, such as .profile in Unix, iswrite protected, but the user's home directory is writable.andP;  A malicious userwould be able to rename the start-up file and create a new file called&quot;.profile.&quot;andP;  This new start-up file could contain the malicious shellcommands shown earlier.andP;  When the naive user logs in, the malicious start-upfile will be executed by the log-in shell.andP;  Even a write-protected file isvulnerable if the directory it resides in is not write protected, too.andM;Files and directories should always be write protected, especially executablefiles and directories containing executable files.andP;  A file that is notexecutable but is writable might also present a problem.andP;  On systems whereusers are billed for disk utilization, for example, it would be costeffective for malicious users to append their data files to other users'writable files or place them in other users' directories.andP;  To address themore general issue of write protection, you might expand the program inExample 1 to that in Example 2.andM;The methods of attack described so far are often termed &quot;Trojan horse&quot;attacks.andP;  There are general search techniques that might be used to searchfor them.andP;  The code example in Example 3 seeks to eliminate the risk of aTrojan horse attack.andP;  You might also include in your examination of users'home directories a search for possible existing Trojan horses.andP;  To do so, youneed to know what a Trojan horse might look like.andM;First, you know that to be useful, a Trojan horse program must be executed.andO;Because users' commands are usually limited to the set of commands providedby the system, a successful Trojan horse might seek to masquerade as a systemcommand.andP;  The simplest method of achieving this is to create an executablefile with the same name as a commonly used system command.andP;  This type ofTrojan horse can be placed in any writable directory anywhere in the filesystem.andM;An effective method of searching for existing Trojan horses consists of twosteps.andP;  First, define a list of &quot;likely&quot; Trojan horse names derived fromcommonly used system commands.andP;  Then, search the entire file system for fileshaving these names.andP;  The program might look like that in Example 3.andM;The actual implementation might be improved by including a mechanism fordefining a list of files &quot;authorized&quot; to have a given name and ignoring thosefiles in the search.andP;  By searching the entire file system, user and systemareas are checked for the existence of potential security risks.andM;Network SecurityandM;In the previous section, I described some tools that help to protect usersfrom themselves and from other users.andP;  In this section, I'll focus more onoutside threats to network security.andM;A network connection should be treated as a doorway to the world.andP;  Thesecurity considerations center on two basic issues: 1.andP;  What should bepermitted to enter the system via the network?andP;  2.andP;  What should be permittedto leave the system via the network?andM;One way to impose security on a networked system is by controlling thecapabilities of the network software.andP;  This feature, if available, is usuallyprovided through some sort of configuration mechanism.andP;  By imposing controlover the network configuration you can impose some level of control networksecurity.andM;A brief description of some common network threats will help determine whattype of network configuration is appropriate.andP;  Information entering yoursystem may pose a variety of threats.andP;  If a remote user or site can arrangefor an executable file to be placed on your system, then the threat of aTrojan horse or a virus attack exists.andP;  If a remote user or site can directlyexecute commands, then the threat of a direct attack on users or resourcesexists.andP;  Similarly, information leaving your system may divulge informationuseful to an intruder for planning other types of attacks.andP;  In general, yournetwork configuration should be as limited as possible while still allowing areasonable level of communication.andM;Having defined an acceptable network configuration, the next step is toautomate the process of verifying the configuration.andP;  By way of example I'lldescribe the capabilities of a common network utility and show how such averification program might be written.andP;  The example I'll use is derived fromUnix where the most common network connection is called uucp (Unix to Unixcopy).andM;The uucp facility is controlled by a series of configuration files thatdetermine the capabilities of each remote system.andP;  The available capabilitiesinclude remote file copy in, local file copy out, and remote commandexecution.andP;  The configuration files determine what parts of the local filesystem can be accessed by a remote machine and what commands are availablefor remote execution.andP;  Thus, for the uucp facility the configuration filesdetermine the network capabilities.andP;  The verification tool will examine theconfiguration files relative to the predefined level of network securitydesired.andM;Let's assume that some remote clients are not completely trusted and areasonably controlled network environment is called for.andP;  In this case, youmight elect to limit the access of all remote machines to one singledirectory.andP;  Thus, any information entering or leaving your system must becopied into or out of a single location.andP;  Similarly, you might elect to limitthe remotely executable commands to those that are designed specifically forremote execution.andP;  In reality, this configuration is quite reasonable--userscan send and receive files, and commands designed for remote execution aremade accessible.andM;The next step is to create a software tool that checks the networkconfiguration files, and ensures that the network policy decisions arereflected in the actual configuration.andP;  Using the policy described earlieryou can construct an example of such a program.andP;  Let's further assume that adirectory named public has been reserved for the remote machine access point,and that the commands available for remote execution are called rmail andlpr.andP;  A simple checking program would look like that in Example 4.andM;For those of you familiar with uucp, this example may seem trivial.andP;  And intruth, a robust uucp checking program would perform many more checks thanthose shown here.andP;  Nevertheless, this program is effective and theexplanatory text for uucp is neatly avoided.andP;  The reason the approach inExample 4 is effective is because it automates the task of maintainingsecurity.andP;  Any time you can incorporate your security policy into anadministrative tool, you have succeeded in achieving several goals.andP;  First ofall, you acquire a means by which your administrator can audit the currentstate of the system against the criteria suggested by your security policy.andO;Given such a tool, the administrative overhead of maintaining security isgreatly reduced.andP;  Second, your security policy is no longer just a virtualset of guidelines.andP;  By incorporating the policy into your software tools, thepolicy itself has a physical representation.andP;  Given this, it becomes muchmore likely that the policy will be adhered to.andP;  By externalizing thesecurity policy, the effort required to train a new administrator is alsoreduced.andM;ConclusionandM;Whether your concern is based on user vulnerability or attacks from remotelyconnected network sites the solution is the same.andP;  A good security policy ismade much more effective, simpler, and easier to enforce when the tasks areautomated.andP;  After all, policy without practice is no policy at all.andO;</TEXT></DOC>