<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-487-948  </DOCNO><DOCID>08 487 948.andM;</DOCID><JOURNAL>Communications of the ACM  March 1990 v33 n3 p296(15)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>The art of navigating through hypertext. (includes relatedarticles on moving through nodes and on interaction histories)(technical)</TITLE><AUTHOR>Nielsen, Jakob.andM;</AUTHOR><SUMMARY>An analysis of the user-friendliness of hypertext user interfacesshows navigation problems to be the major drawback.andP;  Users reportthey often get lost or confused about their location in ahypertext system.andP;  A prototype of hypertext design shows hownavigational difficulties can be overcome.andP;  Users can be aided bygraphic variation in the presentation to reduce homogeneity in thetext presentation.andP;  Overview diagrams with only a few layers helpusers locate themselves at a broad or narrow level.andP;  A featurethat enables users to back out of the system by retracing theirsteps is one of the most useful.andP;  Some designs provide forlevel-by-level, step-by-step backtracking while others use ahistory feature that takes the user back through each node onlyonce.andP;  Timestamps and footprints of the interaction history alsoprovide information on context.andM;</SUMMARY><DESCRIPT>Topic:     HypertextUser InterfaceSoftware DesignUser-FriendlinessNavigationAnalysisTechnology.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>through HYPERTEXTandM;Hypertext (3), (19), (25) is becoming a popular approach to many computerapplications, especially those dealing with the on-line presentation of largeamounts of loosely structured information such as on-line documentation orcomputer-aided learning.andP;  There are still many issues concerning hypertextthat remain to be resolved, however, many of which are in the user interfacearea.andP;  One the user interface area.andP;  One of the major usability problems withhypertext is the user's risk of disorientation while navigating theinformation space.andP;  For example, our studies [23] showed that 56 percent ofthe readers of a document written in one of the most popular commercialhypertext systems agreed fully or partly with the statement I was oftenconfused about 'where I was.'andM;To investigate a number of user interface options in hypertext systems wedesigned a prototype system in the form of a hypertext report on events atthe 1987 hypertext workshop.andP;  This system was implemented on an AppleMacintosh with HyperCard as the programming system.andP;  (To get a feel for ourhypertext system, the reader is encouraged to review Figures 1 to 10 whichcontain screen dumps of a session with the system and thus constitute a kindof printed demonstration or guided tour.)andP;  Hypertext is a very dynamic formof human-computer interaction and can only be fully appreciated in aninteractive environment.andP;  However, even these figures give a much betterunderstanding of the system than a traditional textual description couldgive.andM;USABILITY TESTINGandM;A main motivation for the work reported in this article was to study theusability of various hypertext interface design ideas.andP;  We will illustratehow many of the ideas turned out to be less usable and had to be changedduring a process of iterative interface design.andP;  It is extremely importantfor the development of usable computer products to conduct empiricalusability testing [10] since real users will always interpret some aspects ofan interface design in other ways than intended by the designer.andM;The development method used during this iterative design was the &quot;discountusability engineering&quot; method [21] which aims at getting rapid feedback aboutvarious design ideas such that more iterations can be tested.andP;  Because ofthis focus, the method does not provide quantitative test results which canbe reported to &quot;prove&quot; statistically that the redesigns are better than theoriginal designs.andP;  When two users or so have been observed having problemswith an aspect of the interface and when that problem can be explained on thebasis of established usability principles, then it is best to fix the problemat once and continue the test with the new design.andM;The reason for wanting to proceed with testing the new design is that it mayhave usability problems of its own so that the most usable end result isachieved by running the design through the iterative loop as many times aspossible.andP;  If it is not possible to understand the reason for a problem onthe basis of general usability principles, then a more detailed test may, ofcourse, be called for, e.g.andP;  the video tapes Egan et al.andP;  [4], [5] made ofreaders looking at individual paragraphs in order to discover why the readersunderstood a certain concept better when they read about it in a SuperBookhypertext than when they read a printed book.andM;Except for the unresolved issue of randomness depicted in Figure 7, we wereable to explain all the observed usability problems in our iterative designon the basis of well-known usability principles.andP;  We will refer to theseprinciples when we discuss each of the problems based on our qualitativeusability testing.andM;NAVIGATION FACILITIESandM;This hypertext system has two navigational dimensions: A linear dimensionused to move back and forth among the text pages within a given node, and anon-linear dimension used for hypertext jumps.andP;  To reinforce users'understanding of these two dimensions, two different animation techniques areused when shifting from one screen to another.andP;  Unfortunately, animation isthe one aspect of our user interface which is impossible to show well in aset of printed figures, so it is not included in the figures in this article.andM;Movement between pages within a node is seen as a linear left/rightdimension, corresponding to the orientation of the scroll bars at the bottomof the screen and to the way printed books are read in Western society.andP;  Achange to a new page along this dimension is visualized by an animated rightor left wipe, using built-in visual effects from HyperCard which look quitelike the turning of a page.andM;Hypertext jumps are seen as being orthogonal to the left/right page turningand are visualized as an in/out dimension using an animated iris which opensfor anchored jumps and closes for return jumps.andP;  The opening iris gives usersthe impression of diving deeper into the hyperspace when they take ahypertext jump, and the closing iris for return jumps gives the inversefeeling of pulling back again.andM;We should note that both navigational dimensions are bi-directional,left/right or in/out, and that this bi-directionality is emphasized by thechoice of user interface animation techniques.andM;The Homogeneity ProblemandM;To help users navigate the hyperspace we must help them understand andrecognize their present location.andP;  This is partly done by facilities forutilizing the interaction history as will be discussed here.andP;  Recognizinglocations is also facilitated by the dramatically varying graphical designsused for different elements of the system such as e.g.andP;  the front cover(Figure 1), the main text (Figure 4), and the literature references (Figure7).andP;  There is no risk that users will confuse these different parts of theinformation space.andM;In an earlier version of the system we also relied on more subtle differencesin graphics design such as varying background patterns for different kinds ofinformation.andP;  This kind of design difference can be seen by comparing Figures2 and 3, but the differences were more subtle in other parts of the earliersystem where we also used different background patterns for screen designswhich were mainly taken up with running text.andP;  During user testing of thisearlier version it turned out that nobody actually noticed these subtledesign differences, so they were removed in the current version of thesystem.andP;  One reason users do not notice different background patterns may bethat they are used to the indiscriminate assignment of colors to variousscreen elements which is allowed as the primary interface customization inmany current systems.andP;  Therefore, they do not associate screen colors withsemantic importance.andM;The differences in graphical design are intended to reduce the homogeneityproblem in on-line text, which basically is that on-line text always looksthe same.andP;  Text on a computer screen is nicely formatted, normally using asingle typefont.andP;  Furthermore, it is always displayed on the same screen, soon-line text is extremely homogeneous, which again makes it harder for usersto recognize information and get a sense of location.andP;  On-line text does nothave the variety which traditional text has, due to variations in typefont,book size, color, etc., or even the basic differences in physical looksbetween, say a real book, a newspaper, and a note written on a naplin in thecafeteria during a lunch break.andP;  In this system we have used different fontsto a small extent (see Figure 12) but mostly we have relied on the graphicalscreen design to introduce a heterogeneous feel.andP;  In hypertexts containingmore nodes it might not always be possible to rely on distinct graphicaldesign only, so certain subtle forms of variation might still be needed.andM;One might argue that homogeneity could be desirable because it emphasizes thebook metaphor and because readers can assimilate information faster when theyencounter a familiar format.andP;  Of course, this is true to some extent but wewould actually want to avoid the book metaphor in our future hypertextdesigns because it seems to limit the conceptual models of the searchpotential of hypertext and non-linear navigation of the information space.andO;Furthermore, the available empirical evidence suggests that users behave verydifferently when reading hypertexts than when reading printed texts [22] andthat this is even more true for experienced hypertext users who leave theirbook havits behind [14].andP;  Therefore, it is unnecessary to keep the bookmetaphor except for walk-up-and-use situations where immediate transfer ofpast skills is needed.andP;  Of course, homogeneity should be retained to theextent that the same information should be presented in the same way toensure consistent interfaces.andP;  For example, we used the same graphicallanguage to encode the overview diagrams both at the global level (Figure 2)and at the local level (Figure 3).andM;Overview DiagramsandM;Overview diagrams have been used as navigational aids in several earlierhypertext systems.andP;  In this system we use two levels of overview diagrams toprovide users with both a coarse-grained sense of location in the globalinformation space and a more fine-grained sense of location in the localneighborhood of the current node.andP;  This approach works well in the currentsystem which is fairly small, since its information space is divided intoonly 95 screens containing a text which took just 9 pages in the printedversion [18].andM;For larger hypertext structures, it is an open question whether two levels ofoverview diagrams will be sufficient.andP;  One approach could be to use even morelevels according to the principle that there should be &quot;one, two, or enough&quot;of any feature in a computer system.andP;  But in big hypertexts, using &quot;enough&quot;levels of diagrams will introduce navigation problems in itself as users moveamong the diagrams.andP;  Alternative designs might be to use fisheye views [8] orto show only the top and bottom-level diagrams and let users interpolatebetween them.andM;The overview diagrams in this system have been generated manually, eventhough some hypertext systems such as NoteCards [11] providecomputer-generated diagrams.andP;  One reason for this decision was to speed upthe implementation of the prototype interface, and another reason was thedesire to have two levels of overview diagrams.andP;  It is not clear how onecould automatically generate multi-level diagrams and how one should identifythe important links to be included in the global diagram, even though someresearch has been done on nested hypertext structures and inheritancemechanisms [6].andP;  One would probably not want all hypertext links from thelocal diagrams to propagate to the global diagrams, so some mechanism forusing weights or relevance measures might be considered to prune the edges ofthe graph on the higher levels.andM;It is likely that big hypertexts will be the most useful ones and it istherefore important to address the issues of overview in large informationspaces.andP;  We are currently working on methods for assigning relevance to linksbased on an information retrieval measure of similarity [7] between the twolinked nodes as well as an estimate of the user's current interests.andO;However, it is yet too early to judge the usability of such methods for realwork.andP;  If such metrics can be tuned to correspond to users' actual intentionsit would be possible to filter out links with ratings below some cutoffpoint.andP;  We are also experimenting with graphical methods to differentiatebetween anchors based on their estimated relevance to the user.andP;  Our limitedexperience indicates that users like this feature since it provides aprospective view on the links.andP;  A primitive example of such graphicaldifferentiation in the current system is shown in Figure 4 where one of thebuttons has been made prominent.andP;  The differentiation in Figure 4 wasstatically specified by the author, however, rather than being dynamicallytailored for the individual reader as we are trying to do in our currentexperiments.andM;Our system is a single-user system which only keeps an individual interactionhistory, but one might speculate whether collective interaction historiescould also be useful.andP;  For example, having the system keep statistics on howmultiple users have moved through the hypertext might provide a means forautomatically generating useful overview diagrams.andP;  If many users have beenobserved to have navigated between two specific nodes, it is likely thatthere should be a line between those nodes on one of the higher levels ofoverview diagram.andP;  And if almost no users have traversed certain links thenthey would be candidates for pruning.andP;  In this way the hypertext structurewould constantly evolve towards a &quot;survival of the fittest&quot; nodes and links.andO;Furthermore, it might be possible to use various clustering algorithms andmulti-dimensional scaling techniques [28] to lay out the diagramsautomatically.andM;BacktrackingandM;Earlier studies of the usability of videotex systems [17] showed that thebacktrack facility was one of the most important navigation facilities,especially for novice users.andP;  Users frequently relied on backtrack to savethem when they were in any kind of situation which they could not handle.andO;Because of this result, a return arrow is always available in this system totake users back to the locations in the hypertext where they have jumpedfrom.andM;The system has an unlimited backtrack capability within any one session,meaning that sufficiently many repeated clicks on the return arrow will takeone back to the first screen (Figure 1).andP;  Since the first screen has a kindof landmark stature in the navigation space, the system also provides adirect hypertext jump to it from the pages of the main text.andM;The backtrack facility in this system is strictly path-following, meaningthat nodes are revisited in exactly the reverse order in which the useroriginally visited them.andP;  This is implemented quite simply as a stack, andevery time a node is visited, it is pushed onto the stack.andP;  The history listin the system (Figure 10) works in much the same way, except that nodes whichare revisited as the result of a backtrack action are placed once more on thehistory list but removed from the stack.andP;  The history list, therefore,includes all the nodes the user has visited in the sequential order of thetime of those visits.andP;  Even though hypertext is non-sequential, each userlinearizes the information in time as part of the process of moving throughit.andM;Because of the principle of following the user's path through the informationspace exactly, the same node may occur several times in the backtrack stackor on the history list.andP;  An alternative would be to do like HyperCard'sbuilt-in &quot;Recent&quot; history list (shown in Figure 11) and have each node occuronly once.andP;  We have chosen the path-following principle to enable users torely on their memory of their own navigation behavior when interpreting thehistory list or the result of backtracking.andP;  An out-of-context history listlike Figure 11 is considerably harder to interpret than a path-following onesince it removes information about the transitions between nodes: Users oftenremember information of the nature &quot;after I was at A, I went to B.&quot;andM;In an earlier version of our hypertext system, we had the facility forreader-added annotations shown in Figure 12 which used structure-orientedbacktrack.andP;  The idea was that the system could utilize its knowledge aboutthe structure of the hypertext to provide a direct backtrack jump to thelocation which the user was likely to want to return to, instead of forcingthe user to backtrack one step at a time through a number of intermediatescreens.andP;  It turned out in user testing, however, that users were not able tounderstand this new kind of backtrack which was inconsistent with the generalbacktrack in the rest of the system, so we removed it from later versions ofthe system.andP;  It would probably have been possible for users to learn thestructure-oriented backtrack if it had been used in more parts of the systeminstead of just in one isolated part, and it would also have helped if it hadbeen better explained.andP;  On the other hand, we do not want to increase thecomplexity of the user interface to the extent where users have to spend toomuch time reading instructions instead of reading the main text.andM;The importance of consistency in backtrack options can also be seen fromHardman's study of the Glasgow Online hypertext system [12], where half thesubjects went back to the front screen and retraced long routes.andP;  In many ofits screens Glasgow Online does have a backtrack facility but it isinconsistently labeled and not always present, so subjects felt morecomfortable using the landmark facility for the front screen.andP;  From this weconclude that backtrack facilities need to be simple and consistent, so thatusers can always rely on them as a lifeline to get out of trouble.andM;INTERACTION HISTORYandM;This system relies heavily on the user's individual interaction history toprovide a sense of context.andP;  The backtrack and history list facilitiesdiscussed previously are examples of interaction techniques that are definedrelative to the actual user's previous personal use of the system.andM;TimestampsandM;All user movements between screens are timestamped.andP;  When a user returns to alocation in the hypertext, the system displays the time which has passedsince that user's previous visit to that location.andP;  When users visit alocation where they have never been before, the system informs them aboutthis fact instead of showing the timestamp.andP;  This time information can helpusers recognize the location since it relates it to their personal experienceof how they used the system.andP;  One will view information in different waysdepending on whether one has never seen it before or one has seen it a shortor a long time ago.andM;In addition to the timestamps, the system can also display the totalaccumulated time a user has spent on each location in the hypertext.andP;  Historyinformation like time stamps and accumulated time are automatically part ofthe use of traditional books, even though they are obviously much lessprecise.andP;  It is immediately apparent when looking at a traditional book if ithas never been opened and it is also obvious if it is an old, wellwornvolume.andP;  The books you use very often may be on the verge of falling apart.andO;Including a similar kind of information in on-line text is yet another way offighting the homogeneity problem discussed previously.andM;FootprintsandM;The system uses checkmarks to serve as footprints on the overview diagrams,indicating where the user has been.andP;  It also checkmarks hypertext anchorsleading to previously visited nodes in a way similar to the &quot;breadcrumb&quot;facility in the HyperGate system [2].andM;The first versions of the system did not have a footprinting facility, butusers complained that they would often feel compelled to take hypertext linksto places where they had recently been, just to make sure that they did notmiss important information.andP;  In the example in the figures, we jumped fromFigure 4 to Figure 5, but the screen in Figure 5 includes a hypertext link toFigure 4 in the form of a reference to &quot;Frank Halasz.&quot;andP;  This kind of doublereference is quite common in hypertext, since there is a good chance that ifA is relevant to B, then B is relevant to A.andP;  However, users sometimes do notknow which of the references in B would refer to A, even if they just camefrom A, so they may happen to activate a jump leading back to A instead of ajump leading them onwards.andP;  Checkmarking the anchor leading back alleviatesthis problem.andM;One problem with putting footprints on the maps and other hypertext anchorsis that almost all parts of the structure will get marked eventually, if theuser uses the system extensively.andP;  Perhaps a notation similar to that of theexperimental Color EMACS text editor [15] could be used where changes to thefile are shown in a contrasting color that &quot;decays&quot; over time to graduallymatch the color of the original text.andP;  In a similar way, footprints in ahypertext might erode gradually so that only current footprints weredisplayed prominently while older footprints were displayed in ever lightershades of gray or not at all.andM;Another checkmark issue is whether the system should use one notation for thecheckmarks placed at anchors which the user has actually activated, andanother for checkmarks placed at anchors which are linked to destinationsalready seen by the user but have not been explicitly activated by that user.andO;Our system uses a single notation to simplify both the implementation and thenumber of interface conventions which the user needs to learn.andM;CONTEXT-IN-THE-LARGEandM;VS.andP;  CONTEXT-IN-THE-SMALLandM;Most of the issues discussed under navigation and interaction history have todo with providing the user with a sense of context and location in the entirehypertext structure.andP;  We will call this kind of context forcontext-in-the-large but Figure 9 shows that there can also be problems withcontext-in-the-small in reading a hypertext.andP;  When the computer display is assmall as in our system, users can only see a very small part of theinformation at any one time.andP;  This means that they can very easily lose trackof how the text they are currently reading is related to the immediatelypreceding or following text, since that text will often not be visible.andP;  Inreading the text in Figure 9, we understand that we are seeing some kind ofenumeration of items, but we have no idea of the author's intention with thelist or what kind of list it is.andM;The previous designs of this hypertext system did not include the dynamicoverview diagrams on each screen and thus had room for about twice as muchtext on each screen.andP;  This still did not solve the context-in-the-smallproblem, but it was much better.andP;  In the current design we have added lots offacilities to help with the context-in-the-large problem, such as theoverview diagrams and timestamping and icons for the history list and directaccess to the front cover.andP;  It is likely that this redesign represents a poortrade-off given the constraints of the small screen: The loss ofcontext-in-the-small could well damage overall usability more than the addedcontext-in-the-large improves it.andP;  We did the redesign anyway, since wewanted to experiment with these new features which will probably show theirusefulness on the larger displays which will be much more common in the nearfuture.andM;Figure 9 also shows another case of the problems with context-in-the-small.andO;It was necessary to move the entire description of the third list element toa new page to avoid having a figure and the text explaining it split overdifferent pages, which would have had an even worse impact on readability.andO;The result, however, is to distribute the issues discussed over severalpages, which means that the reader cannot get an overview of these issues andhow they are related.andP;  In another part of this hypertext system shown inFigure 8, we have tried to solve a similar problem by having a list of issuesrepresented as anchors for hypertext pop-ups each containing the full textfor one issue.andM;Finally, the scroll bars at the bottom of the pages of the main text addressa contextual problem on a level somewhat in between the in-the-small and thein-the-large levels since they provide readers with a sense of relativelocation within the individual hypertext node and an indication of the sizeof that node as illustrated in Figure 6.andP;  In general, we should remember thatusers need context not just in-the-large but also in-the-small when readinghypertexts, and that different mechanisms are usually required to provide thetwo kinds of context.andM;IMPLEMENTATION ISSUESandM;The hypertext system described in this article was implemented in HyperCardusing the HyperTalk [1] programming language.andP;  Our emphasis in designing andimplementing the system was on rapidly demonstrating our ideas for hypertextuser interface features and not on producing a generally useful system.andP;  As amatter of fact, the system can only display the one hypertext document it wasbuilt to support.andM;HyperTalk is an object-oriented [27] programming language, but not with fullgenerality.andP;  For example, HyperTalk does not allow the programmer to definesubclasses of objects such as buttons, and this led to problems in the codeimplementing the automatic checkmarking of anchors leading to previouslyvisited nodes.andP;  We wanted to look only at buttons which were hypertextanchors, and not at the buttons in the scroll bars, for example.andP;  We had todo this by inspecting the message handler associated with each button atruntime to see whether its text contained the word &quot;jump&quot; which was aprocedure call used only in the code for hypertext jumps.andP;  Furthermore, sinceHyperTalk does not have instance variables for button objects, we had noclean way to get a reference to the node which the button linked to.andP;  Again,we had to go and inspect the button code to grab the destination address fromthe parameter list for the call of the &quot;jump&quot; procedure.andM;Many other &quot;dirty&quot; programming techniques were used in the implementation ofthis hypertext system [20], but the end result was that we were able to get aworking system in a very short time.andP;  It should be remembered that the goalof the project was to get a running system for user interface experiments andnot to study the programming techniques which one would have to use for acommercial hypertext product.andM;For the development of this prototype hypertext system, first 12 hours werespent writing the actual text which forms the information base used by thesystem.andP;  Then 17 hours were spent on software development to establishfeatures for moving through the information space, and finally 11 hours werespent reorganizing the basic text into objects fitted to the software andadding hypertext links.andP;  After this original implementation, an additional 3hours were spent on adding scroll bars to the interface.andP;  This feature wasadded quickly and shows that it was possible to modify the prototypeaccording to user feedback.andM;For the third version of the prototype, major modifications were needed whichtook about 25 hours to implement.andP;  The modifications included introduction ofoverview diagrams and timestamps as discussed earlier.andP;  After these changes,further maintenance of the system seems to be fairly difficult because of thedistributed nature of its code and other user interface elements.andM;In addition to these three major version of the system, several subversionswere released as part of the iterative design based on user tests.andP;  Each ofthese minor changes required only between 15 and 30 minutes to implement.andM;HyperCard proved to be very effective for our prototyping of graphicalhypertext user interfaces.andP;  One reason for this was because the author wasalready an experienced HyperTalk programmer before starting this project.andO;However, learning to implement user interfaces in HyperCard is very fast,compared with most other graphical and/or object-oriented programmingsystems, partly because it is very concrete in its use of traditional screenpainting tools as the graphical programming language of the system.andP;  Manyparts of an interface can be prototyped simply by painting them on thescreen, and even the parts which are under dynamic program control behave inmuch the same way as one would directly operate the screen duringnon-programming use of HyperCard.andM;CONCLUSIONSandM;The hypertext principle can be useful for many things.andP;  In fact, this veryarticle has some characteristics which would have made it suitable forpresentation via a hypertext system, since it relies to a large extent on anon-linear discussion through the figures and captions and since it has manyinternal cross-references between the figure captions and the main text.andM;Hypertext, on the other hand, also has serious usability problems which mustbe solved before hypertext systems can see truly widespread use.andP;  Thisarticle has presented some approaches to solving the navigation problem andthe context-in-the-large problem but we also need bigger screens or othermethods for solving the context-in-the-small problem.andM;Acknowledgements.andP;  Many people have made constructive comments on earlierversions of this hypertext system.andP;  Specific changes to the interface havebeen made as the result of comments from Uffe Lyngbaek, Cathy Marshall, andBen Shneiderman, but they are of course not responsible for the way I havechosen to address their criticisms.andP;  Helpful comments on earlier versions ofthis article have been given by Peter Brown, James D. Foley, Christian Gram,Lynda Hardman, Uffe Lyngbaek, Kurt Normark, John Schnizlein, Ben Shneiderman,and Patricia Wright as well as by anonymous Communications referees.andM;REFERENCESandM;[1.] Apple Computer.andP;  HyperCard[R] Script Language Guide: The HyperTalk[TM]Language.andP;  Addison-Wesley, Reading, Mass., 1988.andM;[2.] Bernstein, M.andP;  The bookmark and the compass: Orientation tools forhypertext users.andP;  ACM SIGOIS Bulletin 9, 4 (Oct.andP;  1988), 34-45.andM;[3.] Conklin, J. Hypertext: An introduction and survey.andP;  IEEE Computer 20, 9(Sept.andP;  1987), 17-41.andM;[4.] Egan, D.E., Remde, J.R., Landauer, T.K., Lochbaum, C.C., and Gomez, L.M.andO;Acquiring information in books and SuperBooks.andP;  In Proceedings of the AnnualMeeting of the American Educational Research Assoc.andP;  (San Francisco, March27-30, 1989).andM;[5.] Egan, D.E., Remde, J.R., Gomez, L.M., Landauer, T.K., Eberhardt, J., andLochbaum, C.C.andP;  Formative design-evaluation of &quot;SuperBook.&quot;andP;  ACM Trans.andO;Information Systems 7, 1 (Jan.andP;  1989), 30-57.andM;[6.] Feiner, S. Seeing the forest for the trees: Hierarchical display ofhypertext structures.andP;  In Proceedings of the ACM Conference on OfficeInformation Systems (Palo Alto, Calif., March 23-25, 1988), pp.andP;  205-212.andM;[7.] Frisse, M.E.andP;  Searching for information in a hypertext medical handbook.andO;Commun.andP;  ACM 31, 7 (July 1988) 880-886.andM;[8.] Furnas, G.W.andP;  Generalized fisheye views.andP;  In Proceedings of the ACMCHI'86 Conference on Human Factors in Computing Systems (Boston, Mass., April13-17, 1986), pp.andP;  16-23.andM;[9.] Gibson, J.J.andP;  The theory of affordances.andP;  In R.E.andP;  Shaw and J.andO;Bransford, eds., Perceiving, Acting, and Knowing, Erlbaum Assoc., Hillsdale,N.J., 1977.andM;[10.] Gould, J.D.andP;  How to design usable systems.andP;  In M. Helander, ed.,andO;Handbook of Human-Computer Interaction, Elsevier Science Pubs., Amsterdam,The Netherlands, 1988, 757-789.andM;[11.] Halasz, F.G., Moran, T.P., and Trigg, R.H.andP;  NoteCards in a nutshell.andO;In Proceedings of the ACM CHI+GI '87 Conference on Human Factors in ComputingSystems and Graphics Interface (Toronto, Canada, April 5-9, 1987), pp.andO;45-52.andM;[12.] Hardman, L.andP;  Evaluating the usability of the Glasgow Online hypertext.andO;Hypermedia 1, 1 (1989), 34-63.andM;[13.] Hewett, T.T.andP;  The drexel Disk: An electronic 'guidebook'.andP;  In D. Diaperand R. Winder, eds., People and Computers III, Cambridge Univ.andP;  Press,Cambridge, UK, 1987, 115-129.andM;[14.] Joseph, B., Steinberg, E.R., and Jones, A.R.andP;  User perceptions andexpectations of an information retrieval system.andP;  Behaviour and InformationTechnology 8, 2 (March-April 1989), 77-88.andM;[15.] Lippman, A., Bender, W., Solomon, G., and Saito, M. Color wordprocessing, IEEE Computer Graphics and Applications 5, 6 (June 1985), 41-46.andM;[16.] Monk, A.andP;  The personal browser: A tool for directed navigation inhypertext systems.andP;  Interacting with Computers 1, 2 (Aug.andP;  1989), 190-196.andM;[17.] Nielsen, J.andP;  Using scenarios to develop user friendly videotex systems.andO;In Proceedings of the NordDATA '87 Joint Scandinavian Computer Conference(Trondheim, Norway, June 15-18, 1987), pp.andP;  133-138.andM;[18.] Nielsen, J.andP;  Trip report: Hypertext '87.andP;  ACM SIGCHI Bulletin 19, 4(April 1988), 27-35.andM;[19.] Nielsen, J.andP;  Hypertext and Hypermedia, Academic Press, San Diego,Calif., 1990.andM;[20.] Nielsen, J.andP;  Prototyping user interfaces using an object-orientedhypertext programming system.andP;  In Proceedings of the NordDATA '89 JointScandinavian Computer Conference (Copenhagen, Denmark, June 19-22, 1989), pp.andO;485-490.andM;[21.] Nielsen, J.andP;  Usability engineering at a discount.andP;  In Proceedings ofthe Third International Conference on Human-Computer Interaction, HCIInternational '89 (Boston, Mass., Sept. 18-22, 1989).andM;[22.] Nielsen, J.andP;  The matters that really matter for hypertext usability.andO;In Proceedings of the ACM Hypertext '89 Conference (Pittsburgh, Penn., Nov.andO;5-8, 1989), pp.andP;  239-248.andM;[23.] Nielsen, J. and Lyngbaek, U.andP;  Two field studies of hypermediausability.andP;  In Proceedings of the Hypertext II Conference (York, UK, June29-30, 1989).andM;[24.] Norman, D.A.andP;  The Psychology of Everyday Things, Basic Books, N.Y.,andO;N.Y., 1988.andM;[25.] Smith, J.B., and Weiss, S.F.andP;  An overview of hypertext (introduction tospecial issue on hypertext).andP;  Commun.andP;  ACM 31, 7 (July 1988), 816-819.andM;[26.] Smith, R.B.andP;  Experiences with the Alternate Reality Kit: An example ofthe tension between literalism and magic.andP;  In Proceedings of the ACM CHI+GI'87 Conference on Human Factors in Computing Systems and Graphics Interface(Toronto, Canada, April 5-9, 1987), pp.andP;  61-67.andM;[27.] Stefik, M., and Bobrow, D.G.andP;  Object-oriented programming: Themes andvariations.andP;  The AI Magazine 6, 4 (Winter 1986), 40-62.andM;[28.] Valdez, F., Chignell, M., and Glenn, B.andP;  Browsing models for hypermediadatabases.andP;  In Proceedings of the Human Factors Society 32nd Annual Meeting(1988), pp.andP;  318-322.andM;[29.] Yankelovich, N., Smith, K.E., Garrett, N., and Meyrowitz, N.andP;  Issues indesigning a hypermedia document system: The Intermedia case study.andP;  In S.andO;Ambron, and K. Hooper, eds., Interactive Multimedia: Visions of Multimediafor Developers, Educators, andamp; Information Providers, Microsoft Press, Redmond,Wash., 1988, 33-85.andM;ABOUTH THE AUTHOR:andM;JAKOB NIELSEN is assistant professor of user interface design at theTechnical University of Denmark.andP;  His research interests include usabilityengineering and hypertext.andP;  Author's Present Address: Jakob Nielsen,Technical University of Denmark, Department of Computer Science, Building344, DK-2800 Lyngby, Copenhagen, Denmark.andP;  datJN@NEUVM1.bitnetandM;Permission to copy without fee all or part of this material is grantedprovided that the copies are not made or distributed for direct commercialadvantage, the ACM copyright notice and the title of the publication and itsdate appear, and notice is given that copying is by permission of theAssociation for Computing Machinery.andP;  To copy otherwise, or to republish,requires a fee and/or specific permission.andO;</TEXT></DOC>