<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-175-402  </DOCNO><DOCID>07 175 402.andM;</DOCID><JOURNAL>AI Expert  April 1989 v4 n4 p30(6)* Full Text COPYRIGHT Miller-Freeman 1989.andM;</JOURNAL><TITLE>Extracting words from natural language text. (artificialintelligence) (technical)</TITLE><AUTHOR>Madron, Thomas W.andM;</AUTHOR><SUMMARY>Programmers who use text as data must deal with lexical analysis.andO;Programming a computer to handle natural language text depends on:recognizing a 'word' as a part of a body of text, separating rootwords from endings, and using dictionaries in natural languageprocessing.andP;  Relevant procedures, subroutines and functions aredemonstrated using programs written in Turbo BASIC.andM;</SUMMARY><DESCRIPT>Product:   Turbo BASIC (compiler).andO;Topic:     Conversational LanguageNatural Language InterfacesLanguage AnalysisProgrammingArtificial Intelligence.andO;Feature:   illustrationprogram.andO;Caption:   Word recognition algorithm. (program)Word recognition: procedure word. (program)This version of 'root' will evaluate S headings. (program)andM;</DESCRIPT><TEXT>EXTRACTING WORDS from Natural Language TEXTandM;When we program a computer to handle natural language text, we must considerrecognizing a &quot;word&quot; as part of a body of text, separating root words fromendings, and using dictionaries in natural language processing.andP;  Theprocedures, subroutines, and functions that implement methods for handlingthese three areas of concern are demonstrated by several programs written inTurbo BASIC.andM;In a natural language, character sequences are combined into words, one ormore words are combined into sentences, and one or more sentences convey themeaning of the text.andP;  When we are concerned primarily with words, we focus onlexical issues; with sentences, syntactic relationships; and the meaning oftext to the reader, semantics.andM;AI's increasing popularity has brought a greater need for understandinglexical, syntactic, and semantic issues, particularly in natural languageprocessing.andP;  Far more mundane programming endeavors than AI also require acomprehension of some of these ideas.andP;  Any programming question that requiresan identification of words demands the programmer understand lexicalanalysis.andP;  Witness the varied ways in which the multi-tude of word processorson the market handle issues like hyphenation, word counts, spell checking,and similar problems.andM;RECOGNIZING A WORDandM;Any programmer who uses text as data will have to come to terms with lexicalanalysis and some physical representation of the text.andP;  Even defining a word,however, can be problematic.andP;  R. Simmons suggests &quot;it is often sufficient todefine a word as a string of characters bounded by blanks and recorded in asymbol list.&quot;andP;  F.N.andP;  Teskey says a &quot;word is a finite sequence of lettersdelimited by spaces or punctuation marks.&quot;andP;  As Teskey points out, however,these simple definitions are at once too restrictive and too general.andP;  Theyare too restrictive because words with embedded special characters may beimproperly treated; for example, &quot;CO-OP&quot; and &quot;TCP/IP.&quot;andP;  These definitions aretoo general in that related words--those that have the same root, forexample--will be viewed as distinct from one another.andP;  This problem concernsthe identification of suffixes and prefixes and will be discussed later.andO;Some programmers illustrate recurring dependence on a much too simpledefinition of what constitutes a physical word.andM;Even words within a program may not be handled consistently.andP;  WordStar, forexample, would treat &quot;TCP/IP&quot; as a single word for word wrapping at the endof a line.andP;  When deleting a word with Control-T or checking spelling,however, that same string of characters is treated as two words (&quot;TCP&quot; and&quot;IP&quot;).andP;  In this case Teskey suggests using &quot;concordable&quot; characters, whichliterally occur in an index or concordance.andP;  They are the characters that canform valid words.andP;  In English the basic concordable characters are A-Z, a-z,and 0-9.andP;  Some characters, however, are sometimes concordable and sometimesnot.andP;  These are termed &quot;optionally concordable,&quot; such as hyphens (-), periods(.), and slashes (/).andP;  All other special characters are nonconcordable.andM;With the understanding of concordable, optionally concordable, andnonconcordable characters, we can define a word as &quot;a finite sequence ofconcordable and optionally concordable characters delimited by either anonconcordable character or an optionally concordable character adjacent to anonconcordable or optionally concordable one.&quot;andP;  An example of two adjacentoptionally concordable characters is &quot;--&quot;, often represented as a long dash(--).andP;  A common combination of an optionally concordable character followedby a nonconcordable character is a period followed by a quotation mark.andP;  Withthis definition the text string co-op 1988.andP;  198.8 TCP/IP WORD.BAS consistsof five words: &quot;co-op,&quot; &quot;1988,&quot; &quot;198.8,&quot; &quot;TCP/IP,&quot; and &quot;WORD.BAS.&quot;andM;The definition of a word presented so far does not address an importantsyntactic problem: using a phrase as if it were a single word.andP;  The terms&quot;ice&quot; and &quot;ice cream&quot; can both be used as nouns, for example, but &quot;ice cream&quot;would be treated as two words.andP;  For our purposes, phrases are regarded as asyntactic rather than a lexical problem.andP;  In this sense the bestnonconcordable delimiter of a word remains the space (or blank).andP;  Similarly,we are attempting to devise a program for recognizing physical words in afile of text and will assume that related words, such as &quot;admire,&quot;&quot;admirable,&quot; and &quot;admiring&quot; are separate, discrete words.andM;THE WORD RECOGNIZERandM;An appropriate algorithm for recognizing a word is found in Listing 1.andP;  Thisalgorithm begins by delimiting a character string with blanks or spaces.andP;  Itthen strips off all nonconcordable characters on the left and right sides ofthe string, which is then tested for any remaining embedded nonconcordablecharacters.andP;  My use of the dash (usually indicated in a typed manuscript bytwo adjacent hyphens), for example, would, until this last test, relate twodistinct words in the word string: &quot;words-those.&quot;andP;  Yet these are two distinctwords, &quot;words&quot; and &quot;those.&quot;andP;  A single optionally concordable characterembedded within the word string would not divide the string into two words:the word string would be retained as a single word.andM;The optionally concordable hyphen (-) is particularly difficult because thehyphen is used for many lexical and typographic purposes; for example, tocreate compound words such as &quot;up-to-date&quot; and &quot;on-the-job,&quot; althoughcompound adverbs ending in &quot;ly&quot; are never hyphenated.andP;  A compound adjectiveis hyphenated when it comes before the word it modifies; it is not hyphenatedwhen it follows the main word.andP;  Many prefixes still require hyphenation.andO;Compound words used as nouns are frequently not hyphenated.andP;  Compare anexample in The English Handbook of Grammar, Style, and Composition: Problemsolving (noun) was his talent.andP;  He had a problem-solving (adjective) talent.andM;The word recognizer would treat the compound noun as two words, but thecompound adjective as one word.andM;Hyphens are also used typographically for clarity, abbreviation, or splittinga word from one line to the next.andP;  An example for clarity might be, &quot;theChicago-London flight.&quot;andP;  In a series of hyphenated words with a commonending, hyphens are carried over to eliminate repeating the ending: &quot;Do youwant a two-, three-, or five-column page?&quot;andP;  When entering text as data, it isprobably best not to use hyphenation to break words at the end of aline--simply leave a short line.andP;  If a scanner is used to input printed text,it may be impossible to eliminate end-of-line hyphens.andP;  If so, it may benecessary to check with a dictionary whether the string is a compound word orhas been hyphenated for typographical purposes.andP;  This program does notdiscuss all hyphenation problems, although it does illustrate using adictionary.andP;  Hyphenation is an instance of the sometimes fuzzy line ofdemarcation between lexical and syntactic issues.andM;The word recognition algorithm given earlier is implemented in a Turbo BASICprocedure called WORD, found in Listing 2.andP;  I chose BASIC as the language toillustrate the algorithm because most programmers understand BASIC, and thecurrent crop of BASICs on the market is inexpensive and easily acquired.andO;Moreover, BASIC's string handling capabilities still make it a usefulteaching and prototyping tool.andP;  WORD closely follows the description of thelogic flow described in Listing 1.andM;ROOTS AND ENDINGSandM;The ability to evaluate root words and word endings or suffixe cansubstantially expand the capabilities of natural language processing.andP;  Threeprocedures will illustrate some of the issues involved: Root,SearchForSuffix, and EvaluateS.andP;  They may be contained in the main programTESTWORD.BAS in files called ROOT.PRO, SRCHSUFX.PRO, and EVALS.PRO.andP;  Theversion of Root given here is not production code and is designed to searchfor and evaluate only words ending in &quot;s.&quot;andP;  &quot;S&quot; endings were selected forillustration because they are among the most frequently encountered endingsin English.andM;A word with an &quot;s&quot; ending, of course, may imply a plural form of the rootword.andP;  The more expansive version of Root will correctly evaluate all theendings found in the the line function FNND located in TESTWORD.BAS (Listing3).andP;  The &quot;select case&quot; structure was used in Root to imply it could beexpanded to account for all the endings in FNND.andP;  With a single case, an &quot;if&quot;structure would have worked as well and would have been equally clear.andO;(Additional code explaining this can be found on the AI EXPERT Bulletin Boardservice and the CompuServe forum.)andM;Root serves as a calling program for SearchForSuffix and EvaluateS.andO;SearchForSuffix is straightforward and will be described later.andP;  Central toevaluating &quot;s&quot; endings, however, is the procedure EvaluateS.andP;  The logic forEvaluateS may be seen in Figure 1.andP;  In English, nouns are normally changedfrom singular to plural by adding an &quot;s.&quot;andP;  The general rules for adding &quot;s&quot;are:andM;* if a word ending in &quot;y&quot; is preceded by a consonant, &quot;y&quot; changes to &quot;i&quot; and&quot;es&quot; is added (lady/ladies);andM;* if a word ending in &quot;y&quot; is preceded by a vowel, no change is made and theplural is formed by adding &quot;s&quot; (valley/valleys);andM;* if the last sound in the word is &quot;s,&quot; &quot;z,&quot; &quot;ch,&quot; &quot;sh,&quot; or &quot;x,&quot; an &quot;es&quot; isadded sothe word can be easily pronounced (class/classes);andM;* if the &quot;ch&quot; is pronounced &quot;k,&quot; only &quot;s&quot; is added (stomach/stomachs);andM;* if, in one syllable words, the word ends in &quot;fe&quot; or &quot;f,&quot; the &quot;fe&quot; or &quot;f&quot; iscut off and &quot;ves&quot; is added (wife/wives), with some exceptions (roof/roofs).andM;As with other elements of the language, however, there are many exceptions.andO;Some a human must simply memorize and a computer must handle with adictionary.andP;  Some nouns, for example, have irregular plural forms such as&quot;goose&quot; and &quot;geese.&quot;andP;  Nouns ending in &quot;o&quot; may have only an &quot;s&quot; added(piano/pianos), while others require an &quot;es&quot; (potato/potatoes).andP;  Finally,some non-English words that have entered the English language retain theirforeign plural forms, although some people prefer to Anglicize the pluralforms (radius/radii/radiuses).andP;  Many of these rules of English have beencodified in EvaluateS and are implemented with the logic given in Figure 1.andO;The approach given here generally follows that suggested by Terry Winograd.andM;EVALUATING AN &quot;S&quot; ENDINGandM;Before entering EvaluateS, SearchForSuffix is called to do two BASIC things:identify a possible ending or suffix and save up to five charactersimmediately to the left of the &quot;s.&quot;andP;  The first character to the left of &quot;s&quot;is saved in the string variable Character 1$; the fifth character to the leftof &quot;s&quot; is saved in the string variable Character5$.andP;  Root then callsEvaluateS to apply the rules of English.andP;  If Character1$ is not an &quot;e,&quot;EvaluateS returns immediately.andP;  If Character1$ is an &quot;e,&quot; however,Character2$ is tested and branches are made to one of the following five&quot;cases&quot;:andM;* if 2nd is &quot;i,&quot; cut off &quot;ie,&quot; add &quot;y,&quot; then exitandM;* if 2nd is &quot;h&quot; and 3rd is &quot;t,&quot; exit, else if 3rd is not &quot;t,&quot; then cut off&quot;e&quot; and exitandM;* if 2nd is &quot;x,&quot; cut off &quot;e&quot; and exitandM;* if 2nd is &quot;s&quot; or &quot;x,&quot; cut off &quot;e&quot; and exitandM;* if 2nd is &quot;v,&quot; then check the dictionary (leave[s], for example); if notfound, cut off &quot;ve&quot; and add &quot;fe.&quot;andM;An integer variable, ReturnCode%, is provided as an indicator of what shouldhappen on exit from EvaluateS.andP;  If ReturnCode% = 1 (the default), then theresulting root word calculated by EvaluateS should be immediately checked inthe dictionary on exit from EvaluateS.andP;  As it is currently implemented, theonly appropriate value of ReturnCode% on exit from EvaluateS is &quot;1.&quot;andP;  Theprocedure clearly handles most of the rules described, but it may also avoidsome detail, leaving the dictionary to determine the final correct form ofthe root word.andM;DICTIONARY PROCESSINGandM;The procedures necessary for dictionary processing are available from the AIEXPERT Bulletin Board service and CompuServe forum: Procedure  Filename dict dict.pro LoadDict  loaddict.pro AddWordToDict  addword.pro AddToDict addict.pro QSORT  qsort.pro InsertionSort  inssort.pro BinarySearch binsrch.proandM;Dictionary processing as developed for the test program is ad hoc and shouldby no means be considered particularly elegant.andP;  But by using a dictionary,it is possible to take care of the many exceptions to the general rules ofEnglish, expand contrived words into the phrases they represent, and provideadditional information for later syntactic or semantic analysis.andP;  Thedictionary for this discussion consists of a record with two fields for eachroot word.andP;  The first field is the root word; the second may be an expansionof compound words or could be used to handle any exceptions to English rules.andM;Two of the compound words, &quot;s/he&quot; and &quot;and/or&quot; are expanded since the slashmeans &quot;or.&quot;andP;  &quot;S/he&quot; is my nonsexist abbreviation for &quot;she or he.&quot;andP;  If suchcompounds are expanded, we may add a word here and there to word counts orword lists; this approach may not be uniformly appropriate.andM;MAIN PROGRAM/SUBPROGRAMSandM;Several utility subprograms are used to support both the main program(TESTWORD.BAS) and several of the procedures already described.andP;  Like thedictionary procedures, both TESTWORD.BAS and the utility subprograms may beobtained from the AI EXPERT Bulletin Board service and CompuServe forum.andP;  Theutility subprograms are: Subprogram  Filename fnGetResponse$  getresp.fncFNFindFile findfile.fnc ScreenOutput  scrnout.pro Header  header .pro WTINPwtinp.pro LSPACE  Ispace.pro RSPACE  rspace.proandM;The BASIC code is reasonably well documented and the purpose of theseroutines will be apparent.andP;  The procedures found in Listing 2 can, of course,be used without the test program and its related subprograms, but it willlikely be helpful to download the all the associated routines.andM;LEXICAL CONCLUSIONSandM;This approach to word recognition is reasonably successful in producing a setof distinct words found in a text file.andP;  Notwithstanding the problem ofhyphens and other optionally concordable characters, it seems to do a goodjob in distinguishing physical words.andP;  To enlarge the capacity to do lexicalanalysis, however, additional routines are needed, namely those dealing withsuffixes and prefixes beyond &quot;s&quot; endings.andP;  The issue of word endings is amplyillustrated by the routines given, and the table embedded in the linefunction FNND implies that a large number of endings can be identified in amanner analogous to that used in the procedure EvaluateS.andP;  Finally, at leastone dictionary is essential to any extensive text processing, and theprocedures outlined here may provide some of the basis for developing a moreextensive dictionary system.andP;  Dictionary use is analogous to humanmemorization, and can be used to solve problems associated with naturallanguage processing.andM;Additional documentation on TESTWORD.BAS, dictionary procedures, and theutility subprograms is contained in an executable com file called README.COMfound on the AI EXPERT Bulletin Board service and CompuServe forum.andP;  ExecuteREADME for this information.andP;  Both sample text and dictionary are available.andO;The package provides a self-contained demonstration of the procedures foundin Listing 2.andO;</TEXT></DOC>