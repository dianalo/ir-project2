<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-007-200  </DOCNO><DOCID>08 007 200.andM;</DOCID><JOURNAL>MacUser  Feb 1990 v6 n2 p255(5)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1990.andM;</JOURNAL><TITLE>Get with the program. (programming the Macintosh)(includes relatedarticles on the C programming language and the code for a simpleprogram)</TITLE><AUTHOR>Hogan, Thom; Matthies, Kurt W.G.andM;</AUTHOR><SUMMARY>Apple Macintosh users are becoming more interested in learning howto program the Mac, for several reasons.andP;  Users are becoming moresophisticated and demanding more from their systems.andP;  Exposure toHyperCard has given users a taste of computer programming andApple has said that a scripting language may be part of the newoperating system.andP;  Apple documentation, though informative, is notinstructive.andP;  Future articles will cover various programmingissues.andP;  Each month's project will be a complete application.andO;Newcomers to programming will need to be familiar with programmingconcepts and terminology.andP;  Experienced programmers will have tobecome familiar with the C language.andM;</SUMMARY><DESCRIPT>Product:   Apple Macintosh (Microcomputer) (programming).andO;Topic:     TutorialProgramming Instruction.andO;Feature:   illustrationchart.andO;Caption:   The programming cycle, the software-development cycle. (chart)andM;</DESCRIPT><TEXT>Get with the ProgramandM;Starting next month, you'll see something quite unusual within the confinesof these covers: programming code.andP;  That's right--this column will teach youhow to make the Mac do what you want it to.andM;&quot;Why programming?&quot; you ask.andP;  Well, we see several key trends that makefamiliarity with programming the Mac helpful, if not downright necessary:andM;* Mac users are becoming more sophisticated and are demanding more from theirmachines.andM;* Apple has already indicated that a scripting language may soon become partof the operating system.andM;* Exposure to HyperCard has given Mac users a taste of programming, butthey've often had to resort to XCMDs to accomplish meaningful work.andM;* The way programs are built dictates the way they are used--if you'refamiliar with the programming restrictions of the Macintosh, you won't besurprised by the actions of the applications that have been written for it.andM;* More corporate Mac purchasing means more custom applications and more needto tie the Mac into existing database and data-entry applications being runon other machines.andM;More to the point: One thing has proven consistent during the Mac's six-yearhistory (in fact, even during its gestation, when we first started workingwith it).andP;  Eventually, all Mac users express an interest in learning how theMac does what it does.andM;Unfortunately, Apple's documentation (notably the Inside Macintosh series),although informative, is not very instructive, nor does Apple always take thetime to explain concepts and interactions.andP;  Thus, curious Mac users sense awall between them and the User Interface Toolbox that's built into the MacROM.andP;  We're here to tear down that wall.andM;No Degree NecessaryandM;We need to warn you about a few things before we get started.andP;  Although youwon't need a B.S.andP;  in Computer Science to follow our columns, programming isnot something you just jump into without some previous background orexposure.andP;  Teaching a novice computer user to program is like trying to teachan alien how to play guitar; before that alien can even begin to fiddle withthe instrument, you need to explain a few basic concepts, such as what musicis, what a note is, how groups of notes are organized, and what a pitch is.andM;Similarly, before you start programming, you need to know a bit about the Macenvironment.andP;  Since you're reading MacUser, we assume that you know what amenu, dialog box, button, and window are.andP;  (Consider yourself fortunate; whenwe started programming microcomputers, these concepts were just beinginvented.)andP;  One of the nicest advantages of programming the Mac rather thanother machines is that these useful interface devices are well defined andsupported by the operating system -- in other words, we don't have toreinvent them every time we want to use them.andP;  Two good sources of detailedinformation on the Macintosh user interface and the proper usage of thesewonderful inventions (as defined by Apple) are Programmer's Introduction tothe Macintosh Family (1988) and Human Interface Guidelines: The Apple DesktopInterface (1987), both of which are published by Addison-Wesley (Reading,Massachusetts).andM;You also need to know something about how Apple divided the Mac's residentsoftware into Toolbox routines.andP;  Many of these routines apply to theinterface goodies, while others apply to operating-system routines such asfile handling.andP;  The five-volume Inside Macintosh, also from Addison-Wesley,is the definitive source for Mac-specific information.andP;  If you plan to do anyMacintosh programming, you'll need a copy of this basic reference to look upspecific function-call syntax and data structures.andM;Of course, we'd be doing you a disservice if we didn't also mention Thom'sbook The Programmer's Apple Mac Sourcebook (Redmond, Washington: MicrosoftPress, 1989).andP;  It summarizes virtually all the information in InsideMacintosh and the other Apple-logo books -- Thom calls it &quot;the poor man'sCDROM&quot; because it was designed to act as a low-cost desk reference.andM;A utility Kurt finds extremely useful is the Inside Mac DA, which containsmost of the Toolbox calls and data structures of Inside Macintosh.andP;  You canpurchase it directly from its author by sending $20 to Bernard Gallet, 660Miller Ave., Cupertino, CA 95014 (or you can download a demo-only versionfrom CompuServe's MAUG forum).andP;  If you want to go the commercial route, youcan get a similar DA from Addison-Wesley.andM;Learning the LanguageandM;You also need to become familiar with the syntax and semantics of the Cprogramming language.andP;  We'll be supplying you with working code, but you'llneed to understand the language to get maximum benefit from this column.andO;We're expecting you to do your homework by learning about such fundamentalsof the C language as variable declarations, assignments, functiondefinitions, and function calls, But don't worry if you don't have anyexperience with the language -- we'll meet you halfway.andP;  With his years ofclassroom experience in teaching C, Kurt is aware of some of the commonpitfalls lurking out there for you new C programmers.andP;  We'll help you alongwith the more advanced features of the language, such as data structures,pointers, and dynamic-memory allocation.andM;We also know that the best way to learn a language is by example.andP;  Everymonth's complete source code will be posted on CompuServe's MAUG forum.andP;  Ifyou don't have access to CompuServe, disks will be available directly fromMacUser for a nominal charge.andM;Now, let's get back to your first homework assignment: Kurt's favoriteC-language reference is Kernighan and Ritchie's The C Programming Language(Englewood Cliffs, New Jersey: Prentice-Hall, 1988), which addresses theneeds of novice and experienced programmers alike.andP;  Unfortunately, Kernighanand Ritchie's examples are based in a UNIX environment, so there aren't anyMacintosh-specific details.andP;  Never fear, an upcoming column will guide youthrough the famous &quot;hello world&quot; program in their first chapter -- just studythe types, operators, and expressions.andM;Kelley and Pohl's A Book on C (Redwood City, California: Benjamin/Cummings;second edition, 1990) is used in a lot of community colleges as anintroductory text, and you might find it useful if you're just starting out.andO;It contains a decent discussion of the fundamental concepts of structuredprogramming, such as data typing, assignments, loops, conditionals, andfunctions.andP;  We also recommend Macintosh Programming Primer by Dave Mark andCartwright Reed (Reading, Massachusetts: Addison-Wesley, 1989) for itsexcellent use of THINK C examples.andM;This column's charter is to help casual programmers explore the wealth ofsystem software that's in every Macintosh.andP;  Seeing your first program runningon the Macintosh's desk-top is a most satisfying experience, especially ifyou've previously had the pleasure of programming with a command-line,text-oriented system.andP;  We know that the main hurdle to overcome in writingyour first Macintosh application is the volume of code it takes just to putup your first window.andM;Here's where we can help.andP;  Each project we present will be a complete workingapplication.andP;  Over the next couple of months, we'll present a genericapplication that will form the basis for all future programming projects(until we get to object-oriented techniques, where the rules all change).andM;Later on, we'll return to this generic application to explore the filesystem, demonstrate the graphics capabilities of the machine, learn how theMacintosh handles text, and give a host of other useful examples of using theToolbox.andM;The Programming ProcessandM;All of which brings us to the actual act of programming the Mac: We'll startwith an oversimplification (don't worry about the details at this point --many of these will be explained in expanded form in future columns -- we'reafter the big picture here).andP;  Programming usually starts as an idea for acomputer-based tool, which you then break into smaller, logically orientedpieces.andP;  Until you've figured out what it is you're trying to accomplish,don't even go near a computer.andP;  The first steps often take the form of notes,diagrams, and samples of screens or printouts.andP;  The more you refine yourideas before you sit down at the computer, the more likely you'll be toproduce a useful program.andM;Case in point: We spent two man-years designing and sketching out our ideasbefore we started the programming that eventually became Tycho, atable-editing program.andP;  We spent much of that time looking at examples oftables and extrapolating the basic concepts that our program had tounderstand.andM;Our planning resulted in several paper designs for specific pieces of Tycho.andO;In particular, we spent a great deal of time designing the underlyingdatabase that the program uses.andP;  We wouldn't even have realized that a tableeditor needed an underlying database if we hadn't done the preplanning.andP;  Hadwe just jumped in and started programming, we'd probably have spent a lot oftime arriving at the need for a database by trial and error -- not the way todesign software.andM;Once you fully understand the product you're trying to create, you can takeyour ideas and paper design and begin typing source code, a set ofcomputer-specific instructions, into an editor of some sort.andP;  All a computerever does is process a sequence of instructions in a tightly controlledfashion.andP;  The tricks to successful programming, therefore, are to make sureyou've identified the right process to encode, to think of every potentialexception to that process that your program might encounter, and to keep thesequence of execution in the correct order.andM;A good computer language helps you with these tasks.andP;  We intend to useSymantec's THINK C almost exclusively in this column (though we'll alsoexplore some other tools you might use with it, such as ResEdit andPrototyper).andP;  Not only is THINK C a strucutred language (meaning that itimposes a particular structure on the source code, making it more difficultto write illogical sequences), but version 4 is object-oriented as well.andO;Essentially, good object-oriented programming (OOP for short) deals with dataand interface components in a very structured manner.andP;  We'll be discussingthis topic at length in future columns, so stay tuned if this is an area thatintrigues you.andM;THINK C includes an adequate editor (for typing in and organizing your sourcecode), a compiler, a linker, and a debugger (in versions 3 and 4) forexamining your program in detail as it executes within the computer.andP;  First,you use the editor (and its associated project library) to enter your &quot;firstpass&quot; source code.andP;  Next, you use the complier to parse through thesource-code instructions you've entered to create machine code (usuallycalled object code) that the computer can understand directly.andP;  A compilercan flag any obvious syntax or typing errors, but it can't spot flaws in thedesign of the code -- what the program actually does.andM;That's up to you, in the often agonizing, largely manual process ofdebugging.andP;  On some machines (including the Mac), the object code must belinked into a file that the operating system can understand and execute (seeFigure 1).andP;  (We'll show you in the next column how to do this step by stepwith THINK C -- for now, we're interested in describing the general steps youtake.)andM;Finally, you've got a &quot;runnable&quot; application.andP;  Of course, if you didn't do agood job of designing it or if you included illogical or nonsensicalinstructions, it won't run too well, if at all.andP;  That's where the debuggercomes in.andP;  It's rare that a first pass at a program even comes close toworking (although you'll have an advantage here, since we'll providesource-code listings that are known to work).andP;  In real life, therefore, youoften find yourself returning to step 2 (entering/modifying source code) oreven to step 1 (isolating and designing key modules of the program on paper).andO;And so it goes.andP;  You edit, compile, link, and run your program; find theerrors; and go back through the sequence again (see Figure 2).andM;Cynics (such as Thom) believe that programs are never complete.andP;  There'salways another bug (read: programmer or design error) to fix and anotherfeature to add.andP;  Optimists (such as Kurt) believe that it's possible tocomplete a programming project in a final, bug-free form.andP;  So don't besurprised if we vacillate between these two philosophies in future columns.andM;Before Next MonthandM;To summarize, if you're interested in programming the Mac and want to followthis series of columns, you need to get yourself ready:andM;* If you're a newcomer to programming, you need exposure to the concepts andterminology of programming -- we'll explain advanced concepts, but you'dbetter know what a bit and byte, assignment, loop, and conditional expressionare.andM;* Even if you're a programmer, you'll need some familiarity with the Clanguage -- we've mentioned several good books that will help you here.andO;Start reading them now.andM;* You should have some idea of why you want to program the Mac.andP;  Are you justcurious about what it takes?andP;  Do you have specific needs that aren't met byexisting programs?andP;  Are you looking for shortcuts?andP;  Or do you want to be thenext Andy Hertzfeld?andP;  If you understand what you want to know aboutprogramming, you'll get more use out of our columns.andM;So, get ready to start up those editors and come prepared next session withyour thinking caps in place and turned on.andP;  You're about to tackle your firstMacintosh program.andO;</TEXT></DOC>