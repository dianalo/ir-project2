<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-843-282  </DOCNO><DOCID>08 843 282.andO;</DOCID><JOURNAL>IEEE Software  Sept 1990 v7 n5 p52(13).andM;</JOURNAL><TITLE>Formal verification of a pipelined microprocessor. (technical)</TITLE><AUTHOR>Srivas, Mandayam; Bickford, Mark.andM;</AUTHOR><TEXT><ABSTRACT>Using a functional language is an effective way to make the designand development of hardware and software mathematically rigorous.andO;State-changing constructs, such as the assignment command andpointers, are not found in a purely functional language; thiseliminates unpredictable side effects during function applicationso the functions behave exactly like mathematical functions.andO;Incremental and interactive program development are supportednaturally by functional languages.andP;  Functional languages can beused to model program-interpreting machines, such asmicroprocessors, and verify the behavior of the machines.andP;  Clio, afunctional-language-verification system, proves the correctness ofa large-scale, realistic microprocessor design architecture.andM;</ABSTRACT></TEXT><DESCRIPT>Topic:     Functional LanguagesMicroprocessorsVerifierSoftware Engineering.andO;Feature:   illustrationcharttable.andO;Caption:   A simple user's session with Clio to prove the definition ofCommutes. (chart)A lazy-evaluation example. (chart)Effects of instructions. (table)andM;</DESCRIPT></DOC>