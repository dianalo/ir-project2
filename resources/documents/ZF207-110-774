<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-110-774  </DOCNO><DOCID>07 110 774.andM;</DOCID><JOURNAL>Computer Language  March 1989 v6 n3 p91(6)* Full Text COPYRIGHT Miller-Freeman 1989.andM;</JOURNAL><TITLE>Data dictionaries: the CASE connection. (computer-aided softwareengineering)</TITLE><AUTHOR>Rapaport, Matthew.andM;</AUTHOR><SUMMARY>Information repository dictionary (or directory) systems (IRDSs)are a relatively new form of data dictionary that includes notonly conventional data fields but such elements as: source code,memory-based data structures, system specifications, graphicalanalysis and design representations, intersystem protocols,security information, and screen and report layouts.andP;  IRDSs areoften integral parts of computer-aided software engineering (CASE)tools, though they provide different storage functions foranalysis CASE code-generating CASE.andP;  The dictionary may be active,affecting real-time format and access to data, or passive.andP;  TheFederal Information Processing Standard (FIPS) IRDS standard isexpected shortly to be an ANSI standard and includes element,record, file, module, program, system, user and document entities.andO;Index Technology's Excelerator is the most popular PC-based IRDS.andM;</SUMMARY><DESCRIPT>Company:   Index Technology Corp. (products).andO;Product:   Excelerator (CASE software) (design and construction).andO;Topic:     Data DictionariesSoftware DesignComputer-Aided Software EngineeringStandardsNew Technique.andO;Feature:   illustrationtable.andO;Caption:   Excelerator entities. (table)Excelerator information. (table)andM;</DESCRIPT><TEXT>Data dictionaries: The CASE connection Data dictionaries have traditionallyfunctioned as repositories of metadata: data describing the keys, attributeorder, formats, and rules applied to individual records and attributes in adatabase.andP;  In the last few years, a new kind of data dictionary has emerged.andO;The new dictionaries, also known as Information Repository Dictionary (orDirectory) Systems (IRDSs) still act as information storehouses for datafields.andP;  In addition, they describe many other aspects of the total system ofwhich the database proper is only one part.andP;  These additional elements mightinclude:andM;* Corporate standardsandM;* System specifications -- structured English descriptions of modules,minispecifications, or pseudocodeandM;* Source codeandM;* Memory-based data structuresandM;* Cross-references between data elements and program modulesandM;* Security informationandM;* Graphical system analysis and design representationsandM;* Project histories and accounting information or audit dataandM;* Screen and report layoutsandM;* Intersystem protocolsandM;* Operations documentation.andM;IRDSs are integral parts of many modern CASE tools.andP;  They operate in bothupper and lower CASE systems.andP;  Upper CASE applications mainly addressanalysis issues.andP;  IRDSs serve as instruments for documentation andcross-referencing between system specifications and data-flow diagrams,design charts, modification histories, and security requirements.andM;Lower CASE products comprise tools for generating code and data structuresfrom elements in the dictionary.andP;  In this context, the dictionary serves as asource of data for version-control systems or act as such systems themselves.andM;IRDSs may operate in connection with active applications and data.andP;  Theygenerate statistical reports on data growth and usage, monitor system accessattempts, and behave in other ways like conventional data dictionaries.andP;  Inaddition, they support source-code generators, produce data definitions orgeneric code in a variety of source languages, activate compilers andlinkers, or provide operations documentation.andP;  IRDSs are databases, but arenot limited to supporting DBMS-based applications software.andM;DBMS data dictionaries support only the relatively simple data structures ofbusiness databases.andP;  By contrasts, IRDSs must support not only thesestructures but a variety of others, including graphic representations andtext fields of widely varying length.andP;  Ideally, the IRDS should not own theDBMS data dictionary but connect to various data dictionaries, which in turncontrol the corporate database.andP;  Connection implies the ability to update theDBMS dta dictionary as well as retrieve metadata included in IRDS processes.andM;When applied to dictionaries, the terms &quot;active&quot; and &quot;passive&quot; have two newmeanings.andP;  &quot;Active&quot; still refers to a dictionary's on-going, real-timeinfluence over format and access to data.andP;  A traditional active dictionarytracks data usage and reports on usage patterns in a variety of ways.andP;  In anIRDS, the dictionary is active when it directly supports software developmentand maintenance activities.andM;Traditionally, production software uses the dictionary as a gateway to data.andO;With IRDSs, the dictionary links system developers and source-code versions,code generators, data structures, screen layouts, standards, protocols, andspecifications.andP;  An active IRDS also audits itself and reports on actionsconcerning the dictionary's records or entities.andP;  These reports include dataon the possible connections between new records and their sources.andP;  Forexample, automatic version control would serve both development andoperations functions at the same time.andM;Standards organizations in the U.S.andP;  and abroad are working toward universalIRDS specifications.andP;  At the same time, microcomputer and mainframe softwarevendors are developing their own dictionary systems.andP;  Some of these productssupport specific DBMS packages, such as On-line Software International'sCasepac for IBM's DB2.andM;Other products intended for general software development and maintenancesupport are invariably marketed as components of CASE software.andP;  The FederalInformation Processing Standard (FIPS) IRDS standard is in the final stagesof acceptance by the American National Standards Institute (ANSI).andP;  Thestandard contains a skeleton system designed for extension by third parties.andO;If implemented, the standard will foster the development of active IRDSsystems by providing an extendible core.andP;  Presumably, extensions will takeless time (and money) to produce because a common nucleus is alreadyestablished.andM;The FIPS IRDS standard is based on P. Chen's entity-relationship model.andP;  TheFIPS entities include element, record, file, module, program, system, user,and document.andP;  Each contains a relevant subset of attributes such asaccess-name, added-by, data-class (domain), and code-list-location.andM;Related entities are passed as arguments to relationship functions.andM;Examples include:andM;* CONTAINS(System,Program)andM;* CALLS(Program,Program)andM;* CALLS(Program,Module)andM;* PROCESSES(Program,File)andM;* RUNS(User,System).andM;The minimal model provides no conditional expressions within relationships orrecursive entity and attribute descriptions that would allow the FIPS systemto describe itself as a part of an overall system.andP;  Examples of theseextensions include entity types called Entity-Type, Attribute-Type,Relation-Type, and the relationship CONTAINS (Relationship-type,Attribute-Type).andP;  Vendors producing products based on the FIPS prototype havethe option to add these metatypes.andM;The FIPS IRDS is a minimal system around which tools and interfaces can bebuilt.andP;  However, the most popular microcomputer-based IRDS, Index TechnologyCorp.'s Excelerator, is a complex package designed as a self-contained CASEtool.andP;  Excelerator supports diagrammatic system analysis and design,specification collection, data elements, and their collective assemblies.andO;Excelerator's XL Dictionary coordinates each of its separate tools.andM;Like the FIPS IRDS, Excelerator's dictionary is based on theentity-relationship model.andP;  It contains 32 entities grouped into fivecategories.andP;  Seven relation classes connect categories in predefined ways.andO;Excelerator provides for user-defined entities.andM;The XL Dictionary is a self-contained system with entities and relationshipssufficient to support a large-scale software development effort.andP;  It supportsa rich variety of output facilities and interconnects internal dataappropriately.andP;  For example, data elements listed in the dictionary connectwith data on flow diagrams and in turn relate to process boxes inhierarchical design charts.andP;  Reports include associations between dataelements or redefined element collections and all associated data flow orprocesses.andP;  Processes, elements, and diagrams associate with thespecifications they implement.andM;An entity-specific entry screen describes every data instance.andP;  Each entitytype spans a specific data structure containing the necessary information toidentify a specific object of the current project and associate it with otherspecific objects of the same class.andP;  Records, for example, consist ofelements, but collections of records are treated as elements in other recordsas well.andP;  The element description screen has 15 fields, including theelement's name, definition, picture, edit rules, default report header,domain, whether it is base or derived, and its default value.andM;The record screen has only six fields.andP;  Two fields focus on elements or otherrecords that include the current record and its role as a key to otherconnected records.andM;Excelerator provides seven relationship classes.andP;  Classes contain specificrelationships that associate one entity type with another.andP;  The two largestand most commonly used relationship classes are CONTAINS and EXPLODES-TO.andO;For example, entities use the relationship CONTAINS in 18 differentcombination pairs.andP;  Using entities from Table 1, FUNction CONTAINED-INSTructure Chart is a legal relationship between two distinct entities or itsinverse, STructure Chart CONTAINS FUNction.andP;  The inverse of ELEmentCONTAINED-IN RECord is RECord CONTAINS ELEment.andP;  Two relationships, EntityLiSt CONTAINS ANY and USEr IS RESPONSIBLE FOR ANY allow arbitrary entities,external to the system to associate with the whole project.andM;The class EXPLODES-TO and its inverse EXPLODES-FROM contains 16 pairs ofrelationships.andP;  This group connects one entity to a group of a higher- orlower-level entity.andP;  Examples include PROcess EXPLODES-TO-STructure Chart andRECord EXPLODES-FROM DAta Store.andP;  Any relationship link works in bothdirections.andP;  The presence of inverse relationships facilitates initial accessto sub or super-levels starting from either end of the chain.andM;Five other relationship types follow:andM;* GOES-TO and COMES-FROM are used for screen chains.andM;* RUNS and RUNS-BY connect data-entry screens to underlying processes.andM;* REPORTS-ON and REPORTED-BY connect reports to one of two possible datasources.andM;* RESPONSIBLE-FOR and RESPONSIBILITY-OF connect users or developers to partsof the system for which they are responsibile.andM;* HAS-ACCESS-KEY and ACCESS-KEY-OF associate elements of a data store and thestore as a group to its primary key.andM;Excelerator contains facilities for auditing dictionary use and preserves thehistory of evolving diagrams, data elements, record structures, functions,and modules.andP;  Early versions of the product were entirely passive withrespect to objects outside the system.andP;  Recent releases include a C libraryinterface system.andP;  This collection of routines embeds in C source code andproduces a bridge between the code and the Excelerator dictionary.andP;  It would,for example, allow C-based source-code generators to gather data definitionsand module calling hierarchies directly from the excelerator dictionary.andM;Excelerator links with IBM's DB2 relational database.andP;  This channel allows adeveloper to generate relation-defining SQL directly from the XL Dictionary.andO;Implemented as a utility adjunct, the channel consists of seven entity typesusing the user-defined type facility: Column, Table, View, Index, Tablespace,Storage-group, and Database.andP;  A set of reporting tools generatescross-reference and content reports directly from the Excelerator and DB2dictionaries.andM;The production of a fully active IRDS system constitutes a major softwareundertaking comparable to writing a large-scale, general-purpose DBMS.andP;  Whenthe IRDS operates in conjunction with external, third-party DBMSs and theirdictionaries, the venture becomes much more difficult.andP;  Even the smallestelement of most dictionary systems includes and exhaustive number ofattributes.andP;  In addition, the dictionary requires system-specificrequirements such as IMS segment names or relationships to systems outsidethe IRDS.andM;All parts of these complex data structures must integrate with systemsconnecting different elements of the IRDS and external DBMSs.andP;  As a result,contemporary CASE tools and IRDSs have achieved only a few IRDS potentials.andO;The best internally coordinated systems have few connections to the outsideworld, while many of the tools designed to automate programming itself havedictionary facilities limited to a narrow range of tasks and languages.andM;In-house development of passive dictionaries has received little attention.andO;A major software undertaking in itself, the passive dictionary deliverslittle in return without a high degree of continuing support.andP;  New tools suchas text-based systems and hypertext make it much easier to generate theactual dictionary system.andM;Using products like Persoft Corp.'s Ize, Madison, Wis., or Seaside Software'sAskSAM, Perry, Fla., programmers can generate an elaborate though passiveIRDS much faster than producing it from a more traditional DBMS.andP;  Even DBMSsystems that support large text fields and external connections to graphicssystems cannot compare to text-based and hypertext systems.andP;  The passiveIRDSs only support system development in contrived ways.andP;  However, they dosupport user, system, and project documentation as well as maintenanceefforts.andM;Ize records link to external software, source code, data definition, and coredata.andP;  The facility's biggest shortcomings are the limit of one external linkper Ize text and the system overhead required to make the connection.andP;  InExcelerator, the nondictionary components of the entire CASE tool are closelyassociated with the dictionary.andP;  Performance is therefore acceptable becausethe entire system operates under one high-level umbrella.andP;  On the other hand,products like AskSAM and Ize cost 1/20 the price of Excelerator and deliversignificant IRDS benefits.andM;These pseudoIRDSs really provide the possibility of maintaining gooddocumentation on a whole system.andP;  The macros and hypertext scripts used inmanipulating the IRDS are relatively easy to maintain.andP;  Such systems boostthe project librarian's productivity like wordprocessing systems boost theproductivity of corporate secretaries.andP;  Because these IRDS are passive, somehuman resource must update the IRDS's contents.andP;  The same minimal staff mostcorporations devote to producing preliminary user documentation can maintaingood user and system documentation.andP;  An operations staff greatly benefitsfrom the system's presence.andP;  New operators could be trained more quickly andsystem problems resolved faster.andM;In the 1970s and early 1980s, the computer industry hailed the DBMS as theresource to unify corporate data, development, and software maintenanceefforts.andP;  To date, DBMSs have failed for three reasons.andM;First, the DBMS data dictionary cannot support analytic and operations phasesof software development.andP;  It supports the design phase only when applicationdesign builds on an existing data foundation.andP;  Second, even active DBMSdictionaries don't support non-data-related aspects of process developmentand maintenance.andM;Finally, no DBMS system has succeeded in encompassing all corporate data.andO;Typical corporations run applications built on a number of DBMS foundations.andO;DBMSs improved data control and access within the scope of surroundingapplications.andP;  The traditional problems caused by data redundancy and lack ofstandardization still plague communication between systems.andM;IRDSs take the place of the DBMS as the new champion of data and applicationintegration in all phases of the development cycle.andP;  Current products supportonly fragments of the scope envisioned by IRDS developers.andP;  Productsdifferentiate between phases of development they best support, externallanguages, and DBMS products they will communicate with.andM;For IRDS systems to fulfill their promise, they must encompass all importantDBMS and language platforms currently in use.andP;  IRDSs must read from and writeto any dictionary facilities, produce meaningful reports, and cross-referencebetween a variety of languages and other tools already installed at aparticular corporation.andM;Even when a sufficiently versatile IRDS appears, its population andmaintenance will not be a trivial undertaking.andP;  AI-based products thatreverse-engineer existing software and partially populate the IRDS willundoubtedly require control and monitoring.andP;  Many corporations lack thepolitical will to commit ongoing resources to yet another level of datacontrol.andP;  Without commitment, IRDSs will only partially reach their entirepotential.andO;</TEXT></DOC>