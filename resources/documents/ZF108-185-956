<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-185-956  </DOCNO><DOCID>08 185 956.andM;</DOCID><JOURNAL>Datamation  Feb 15 1990 v36 n4 p22(7)* Full Text COPYRIGHT Cahners Publishing Co. 1990.andM;</JOURNAL><TITLE>The software revolution. (the automation of software development)(includes a related article on automated software development inEurope and Japan)</TITLE><AUTHOR>Moad, Jeff.andM;</AUTHOR><SUMMARY>Software developers squeezed between demands for more innovativeapplications and the need to maintain the growing number ofexisting applications are looking for new ways to automate thesoftware design process.andP;  Among the tools developed to accomplishthis are fourth-generation languages and prototyping, structuredprogramming and object-oriented techniques, graphics-based designand analysis tools, new data-oriented techniques, and integratedcomputer-aided software engineering (CASE).andP;  Input Inc estimatesthat $6 billion of the $94 billion spent by US companies onsoftware in 1989 was for applications development tools, and theamount is increasing at 19 percent annually.andP;  Software managershope to apply the new techniques to streamline and automate thesoftware development life cycle, increasing both quality andproductivity.andP;  Automated software development at several firms isdescribed.andM;</SUMMARY><DESCRIPT>Topic:     Program Development ToolsProgram Development TechniquesAutomationComputer-Aided Software EngineeringMISProgramming ManagementApplications ProgrammingCompaniesSoftware Design.andO;Feature:   illustrationphotographgraph.andO;Caption:   Increases in software productivity: 1950-2000. (graph)andM;</DESCRIPT><TEXT>THE SOFTWARE REVOLUTIONandM;Although they may not realize it, most software development managers probablyknow just how Robert Fulton must have felt.andM;The world remembers Fulton as the 19th century inventor who created the firstsuccessful steamboat and played a starring role in the Industrial Revolution.andO;What the world doesn't remember is that, after first launching the Clermontin 1807, Fulton probably had a devil of a time getting people to climb aboardhis hissing, smoke-belching vehicle of progress and leave their horse drawnwagons at home.andM;Software development managers today can relate to what Fulton must have gonethrough because many of them are attempting to engineer a revolution of theirown.andP;  Trapped between growing demands for more innovative applications andthe need to maintain swelling catalogs of aging existing systems, softwaredevelopment managers are searching as never before for a break with the past.andO;From the Department of Defense to Wall Street to Silicon Valley, managers aresaying it's time for software engineering to grow up.andP;  They want to transformthe process of making software from what, for the last 45 years, has beenessentially a manual, craftwork-like process held together with rigid,bureaucratic controls into a more automated, rigorous and predictableengineering discipline.andM;To that end, software managers and their companies over the last decade haveopened their checkbooks and their organizations to a long list of newsoftware development tools and techniques: fourth-generation languages andprototyping; structured programming and object-oriented techniques;graphics-based design and analysis tools; new data-oriented methodologies;and, finally, integrated computer-aided software engineering (CASE).andM;Altogether, Input Inc. estimates that $6 billion of the $94 billion that U.S.andO;companies spent on software last year went to buy applications developmenttools.andP;  The Mountain View, Calif., market research firm figures that spendingon tools is growing at a 19% annual clip, making it one of the hottestsegments of the computer industry.andM;No Muss, No FussandM;Each of those new tools and techniques is supposed to play a role intransforming software development, recasting its corporate role frombottleneck to business enabler and change agent.andP;  The idea is to streamlinethe overburdened traditional software development and maintenance life cycleby emphasizing user-developer interaction in the analysis and design phase ofthe process.andP;  That is done through the use of a variety of prototypingtechniques and new graphics-based tools, which enforce methodologies andproduce diagrams that model how the business works, what the applicationdoes, what kind of data it uses and how the processes and data interact.andO;Developers then use those diagrams to create reusable storehouses--orrepositories--of a businesses' data types and processes that can be used byautomated code generators to produce programs capable of executing even themost complex of transactions.andM;By streamlining and automating the life cycle, managers hope to improve bothproductivity and quality.andP;  Generators eliminate the need to create COBOL codeby hand and ensure standard, structured programs that are easier to maintain.andO;In fact, once the central repository is created, programs could be developedand maintained strictly at the analysis/design and specification levels.andO;And, since users are active participants, the design and specifications wouldmore accurately reflect the needs of the business.andP;  No more writing COBOLcode by hand.andP;  A no muss, no fuss software factory.andM;In a few leading edge companies, things seems to be working just that way.andO;At DuPont, the use of an iterative development approach, coupled with heavyuser involvement and CASE tools, has produced more than 400 new programs withno failures and helped reduce maintenance by 70 to 90%.andP;  &quot;We can deliver it[an application] as fast as they [users] can take it,&quot; says softwaredevelopment manager Scott Schultz.andM;Other software managers say they've successfully created what amounts toautomated software factories around isolated applications or in individualbusiness units.andP;  Trans World Airlines Inc., for example, completely rewroteits Information Management System (IMS)-based frequent flier programapplication in DB2.andP;  The project took 15 months using a data drivenmethodology and integrated CASE tools.andP;  Users can now add new functions tothe application in four to eight hours that used to take up to eight weeks.andO;In isolated cases, other users have reported fivefold productivity gains innew product development.andM;For all the spending on new development tools and despite the growing list ofsuccess stories, however, experts say the average software manager has onlyjust begun the job of transforming the development process.andP;  Although mostmanagers are acutely aware of the need to revamp the traditional softwarelife cycle and seem intrigued by the idea of automating much of the process,action at most companies has been tentative, and progress so far has beenevolutionary rather than revolutionary.andM;&quot;My sense is that we are still in the very early stages of a major learningcurve,&quot; says John C. Henderson, associate professor at the Center forInformation Systems Research, part of the Massachusetts Institute ofTechnology's Sloan School of Management.andP;  Henderson recently conducted asurvey of advanced development tools and their impact on productivity.andM;Indeed, according to Software Productivity Research Inc., softwareproductivity today is lower than it was in 1950.andP;  By applying a variation ofIBM's function point productivity metric, the Cambridge, Mass., consultingfirm has estimated that IS software productivity on average increased by 100%in the 1950s and 1960s, improved by 50% in the 1970s and by only 33% in the1980s.andP;  SPR predicts that IS software productivity will improve by only 50%in the 1990s.andP;  SPR president Capers Jones blames much of the slow improvementrate on lack of management attention to the standardization necessary forsoftware reuse and the need for improved communication among programmers.andM;Carnegie Mellon University's Software Engineering Institute has beenevaluating software development shops since the beginning of 1987.andP;  SEIreported last year that at least 74% of surveyed organizations were at whatit calls the &quot;initial&quot; phase of evolution.andM;&quot;At the initial level, an organization can be characterized as having an adhoc, or possibly chaotic process,&quot; states the SEI's first &quot;State of SoftwareEngineering Practice&quot; report.andP;  Such organizations operate without formalproject plans and cost estimates or have inadequate management mechanisms toensure that procedures are followed.andP;  In addition, they are not usingintegrated tools, nor have they applied the tools they have in a uniformfashion.andP;  &quot;When projects do succeed, it is generally due to the heroicefforts of a dedicated team rather than [to] the capability of theorganization,&quot; the report says.andM;If most software development organizations are failing to improveproductivity fast enough, it's not because their companies aren't aware thatsomething is amiss.andP;  IS executives say rising maintenance and developmentexpenses have drawn the attention of top executives, particularly in an eraof consolidation and downsizing.andP;  And IS' frequent inability to predictproject delivery dates or nail down user requirements is especially glaringat a time when new systems are considered key strategic factors with thepotential to determine a business' success or failure.andM;&quot;I never have a review with our chairman these days but that we don't discussthe productivity issue with regard to software people,&quot; says Jim Sutter,information systems vice president at Rockwell International Corp.andP;  &quot;Thereare people [in upper management] who are unhappy that they don't see moreprogress.andP;  They're just pounding away on us.&quot;andM;The reason Sutter and many others like him are subjected to that pounding isthat there is a lot at stake.andP;  &quot;What we're talking about is IS playing a rolein changing and improving the way business is operated,&quot; says Paul Hessinger,vice president of the Buffalo, N.Y.-based Computer Task Group Inc. &quot;Companiesin which IS is not able to play that role will simply not be competitive inthe future.&quot;andM;If the issue of software productivity has risen to near the top of the CEO'sworry list, and IS is spending more than ever on tools to modernize thesoftware engineering process, why aren't productivity and quality improvingfaster?andP;  IS executives say there are many reasons why software factory pilotprojects--even many successful ones--have failed to transform corporatewidesoftware development processes.andP;  Among them:andM;* Many of the tools needed to automate the process are immature or not yetavailable.andM;* Managers say many programmers simply aren't interested in changing the waythey develop software.andP;  Programmers are resisting the notion of giving up thefun of coding to spend time working with users on designing and analyzingapplications.andM;* Many organizations have neglected to develop fundamentally good softwaremanagement practices without which automation of the process is usuallyineffective or impossible.andM;* Upper management often tends to view new tools as a quick fix.andP;  When theyfind out that the tools lead initially to lower productivity and that theproblem calls for sustained attention, top managers often lose interest.andM;* Many IS managers are simply not convinced that all phases of theprocess--particularly design and analysis--can be effectively automated.andM;Experts say management and organizational road-blocks must be dealt withfirst.andP;  &quot;Most people are looking for answers rather than looking at theproblem first,&quot; says Watts Humphrey, director of the SEI at Carnegie Mellon.andO;&quot;They're looking for something they can buy that's the answer.andP;  But, forthree-quarters of the organizations we've seen, they haven't instituted thekinds of rudimentary management practices they need before tooling up.&quot;andM;Humphrey is talking about fundamentals like having standard projectmanagement methods in place that help determine software size, resource needsand schedules.andP;  He's talking about effective training and software qualityassurance.andM;One reason most development organizations don't have such basic managementmethods in place yet, says Humphrey, is that they simply haven't had thatmuch experience with the kinds of large, strategic software projects they nowface.andP;  Also, many IS organizations are so busy meeting deadlines and puttingout fires that they don't have much time to think about policies and thedevelopment process.andM;Software development organizations also need an explicit standard developmentmethodology that leads developers step by step through the developmentprocess, says Humphrey.andP;  That is particularly important for companiesattempting to automate software development, since many of the new toolsimply a particular methodology such as Information Engineering.andM;Many development shops actually went through the exercise of agreeing on amethodology in the late 1970s and early 1980s.andP;  But, experts say, a lot ofthem have since failed to enforce its use.andP;  &quot;Every organization has asoftware development methodology.andP;  Many just don't know what it is,&quot; saysHumphrey.andM;Hidden MethodologiesandM;That was the case at ATandamp;T a couple of years ago when an IS group supportingdevelopment of a new calling card service started looking into automating thesoftware development process.andP;  The idea was to improve quality while meetinga tight deadline.andP;  According to product service manager Earl Hoskins, whohelped spearhead the project, the group first started looking for a formalmethodology, only to discover that ATandamp;T already had one.andP;  &quot;It's just thatnobody had been using it,&quot; says Hoskins.andM;The group eventually adopted the methodology, selected some CASE tools thatsupported it and, on schedule, last month completed the system, which willsupport 40 million ATandamp;T customers when the company's new calling card isrolled out later this year.andP;  Hoskins figures that, by automating much of theanalysis and design phases, the calling card system group achieved a 97%improvement in quality, as measured by the number of user change requests.andO;&quot;Ultimately, this is a way to bring science to the discipline of softwareengineering,&quot; says Hoskins.andP;  &quot;It is within the capacity of the technology wehave now.&quot;andM;But it wasn't all smooth sailing for the ATandamp;T group.andP;  In fact, it had toovercome a litany of problems and challenges typical of many software processautomation projects.andP;  The 200-programmer group had to fill in the blanks ofmissing management policies, and it faced programmer resistance to the newtools and techniques.andP;  Ultimately, it was forced to pioneer a neworganizational approach to development.andM;According to Hoskins, the system development group started out as what hecalls &quot;part of a typical MIS organization,&quot; centralized and separate from thecalling card services group it was supporting.andP;  Eventually, however, as thedevelopment group began to focus on using front-end design and analysis toolsrather than on hand-coding, says Hoskins, &quot;we began to form alliances withthe services manager in order to define what functions were needed.andO;Eventually, we became part of the marketing group and moved away from MIS.&quot;andO;Fortunately, Hoskins adds, that migration was consistent with ATandamp;T's currentfocus on decentralization.andM;But, experts say, management is often unwilling to accept these kinds oforganizational changes, which often result from the extensive business anddata modeling necessary to automate the software development process.andP;  At SanFrancisco-based Chevron Corp., for example, after turning to automatedanalysis, design and modeling tools to complete what had been a troublesomenew human resources application called EPIC, a development team uncoveredseveral functional groups that were essentially duplicating their efforts.andO;&quot;It was clear to many of us that a reorganization was in order, but it didnot come about,&quot; says Dave Plotkin, a data analyst on the project.andP;  In theend, Phase 1 of the project was successfully completed to the satisfaction ofChevron management.andP;  But the company decided not to mandate that theautomated development process used for EPIC be applied to HR applicationsthroughout the company.andM;One reason for the decision, says Plotkin, may be that the development teamwas not forceful enough in its attempts to convince management of thestrategic importance of automated software development.andP;  &quot;We didn't say,'Fellows, it's the eleventh hour.'andP;  We should have said, 'You're in troubleif you don't do this, because Texaco is going to.'&quot;andM;Effective transformation of the software development process across anorganization requires sustained management attention.andP;  Even where teamsachieve initial success with automated tools, executives say, it can takeyears to bring about organizationwide change.andP;  At TWA, for example, whereproductivity and quality gains on the frequent flyer system have beendramatic, director of data resource management Cloene Goldsborough says:  &quot;Weare probably 18 months into a three-to-five-year effort.andP;  Productivity gainsof five or 10 times are probably doable, but there are no easy answers.andO;You've got to pay the price in terms of training and support.&quot;andM;Too often, say developers, management is seduced into believing that newautomated products such as CASE tools are the answer.andP;  Sweeping announcementssuch as IBM's on AD/Cycle promote that impression.andP;  &quot;They read all thearticles, and they tend to believe the claims,&quot; says Goldsborough.andO;&quot;Sometimes you have to bring them back down to reality.&quot;andM;In decentralized organizations, sometimes the only way to winorganizationwide support for automating software development is forindividual business units to prove on an application-by-application basisthat the new tools and methodologies work.andP;  &quot;We had to put on our flackjackets when we came to work every morning,&quot; says ATandamp;T's Hoskins of his groupwhen it first decided to use automated analysis and design tools on the newcalling card application.andP;  &quot;Developers in MIS and other organizations said itwouldn't work.andP;  But we kept plugging away.&quot;andP;  Now that the project hasproduced positive results, he says, &quot;A lot of people who were our biggestcritics are saying they knew all along that it would work.&quot;andP;  Now there are anumber of spin-off projects.andM;The Elusiveness of SuccessandM;Managers say cultivating such grass roots support is usually an uphillbattle, particularly because many programmers resist the changeover to thenew tools.andP;  &quot;Make no mistake.andP;  This is a major cultural change we are askingorganizations and individual programmers to go through,&quot; says GeoffreyBarnes, director of New York City professional services company Cap-GeminiAmerica.andM;In the end, many managers say they've had to go through their developmentorganizations and identify which programmers seem willing and able to adaptto the new tools and approaches and which aren't or can't.andP;  Those in thelatter category are assigned to maintain existing systems in olderenvironments such as IBM's IMS.andP;  Or, in some companies, they're being forcedout.andM;Of course, not everyone is taking such a hard-line approach.andP;  But fewmanagers say their attempts to transform the software development processhave been free from programmer resistance.andP;  On the Chevron EPIC project, forexample, many users and programmers resisted following rules that had beenimposed for populating the system's data dictionary.andP;  &quot;After a while, thedata dictionary was out of control.andP;  People were creating personal items, andthere was no audit trail,&quot; recalls Plotkin.andP;  In the end, Chevron forced allchanges in the dictionary to be funneled through the data administrator, aprocess that created a bottleneck.andM;But the payoff from automation, in addition to faster code generation, can bea closer relationship between developers and users and a better useunderstanding of what kinds of data and processes are available for newapplications or functions.andP;  The problem is managers are asking programmers,who historically have been judged and valued by the amount of code they couldproduce, to spend most of their time analyzing and designing applications andworking with users.andP;  Experts believe automating software development will notsignificantly cut into demand for development professionals.andP;  Still, manyprogrammers seem to see the tools and techniques as a threat to thecreativity they enjoy and to the control they exercise in their jobs.andM;Smart companies attempting to engineer a transformation in softwareengineering are starting with extensive training and change managementeducation for programmers and managers.andP;  Such efforts can be expensive andeat up lots of time.andP;  Bell operating company Pacific Bell Co., for example,has been trying to settle on a standard methodology and set of automateddevelopment tools for the last five years.andP;  The effort, which recentlychanged direction with the arrival of a new IS chief, Jack Hancock, could endup costing $ 100 million before it's all over, with much of those funds goingto training and education, according to PacBell CASE tools technical directorRon Murray.andM;The Resistance FactorandM;Some companies have concluded that the problem goes beyond normal resistanceto change.andP;  &quot;Some people just have different approaches to things,&quot; saysJames Bradley, IS vice president for Aetna Life andamp; Casualty's PersonalFinancial Security Division.andP;  For the last three years, the division has beenattempting to come up with a standard software development methodology andset of automated tools.andM;&quot;What we've been trying to do is make software development more of a science,but what we found out is that people are scientists and some people areartists.andP;  Many of our most creative applications come from the artists, so wedon't want to lose that,&quot; says Bradley.andP;  As a result, Aetna has placed on theback burner its plan to come up with a single software developmentmethodology and tool set and will try to adopt a number of approaches to suitthe different programmer personalities.andM;Bradley isn't the only one who thinks developer resistance to automation maybe justified.andP;  According to James R. Johnson, data center director ofHallmark Cards Inc. in Kansas City, Mo., programmers have been resistantbecause automation has been forced on them and because they aren't sure manyof the tools will do any good.andM;&quot;I've never felt that people in systems development resist anything that'sgood for them,&quot; says Johnson, author of a 1989 book called The SoftwareFactory.andP;  &quot;They're resisting because another group--database or some otherorganization--is telling them how good this is for them.andP;  Then they've got tosit down at a tube and enter things that are history to them&quot; such asdiagrams and data types.andP;  Johnson sees automated tools such as codegenerators and other so-called back-end lower CASE tools as the way of thefuture.andP;  When they have matured to the satisfaction of programmers, he says,resistance will stop.andM;But Johnson questions whether automating the upper CASE front-end analysisand design tools will ever lead to major productivity gains.andP;  &quot;The inherentproblem is that users don't know what their needs are today or they don'tknow what the future is.andP;  So the solution of using a PC drawing package isn'tgoing to solve the problem,&quot; says Johnson.andM;When it comes to upper CASE tools, Johnson says, the emperor  has no clothes.andO;&quot;Right now, very few [IS] people can go on record as saying that thehigh-level data analysis and design tools don't work.andP;  Who wants to be thebringer of bad news?&quot;andM;With the possible exception of a few comprehensive toolsets such as TexasInstruments Inc.'s Information Engineering Facility (IEF), most automatedenvironments still do not adequately link front-end analysis and design toolswith back-end data dictionaries and code generators.andP;  And even those that dostill have some maturing to do, users say.andM;But even users of IEF have had to deal with some shortcoming.andP;  Developmentmanagers at Columbus, Ohio-based Huntington National Bank say that, althoughthey have managed to create an automated development environment using IEF ona new customer information system, they had to do so with a product that wasstill maturing even as development was proceeding.andP;  &quot;When we got involvedwith the project in early 1988, we understood what it $(IEF$) could do.andP;  Butwe did not understand well enough what it could not do,&quot; says systems andprogramming vice president John Voss.andP;  For example, IEF lacked adequatesubsetting capabilities needed by the bank to break down individual datafields into their components, Voss says.andP;  IEF has matured considerably sincethe bank got involved with it, says Voss, but it has a ways to go.andM;The recent study of CASE tools by the MIT Center for Information SystemsResearch found that most commercial tools today are fairly good at automatingthe individual aspects of the software development process, such asdiagramming designs or generating COBOL code.andP;  But, says MIT's Henderson, thevast majority of tools are weak at coordinating the multiple activities andorganizations involved in the process and at enforcing development standards.andO;&quot;There's an emerging recognition among manufacturers that they need to workon that,&quot; says Henderson.andM;Some seem to think that inferenced-based technology--or expertsystems--offers a promising way to bring the enforcement standards tosoftware development.andP;  Palo Alto-based Aion Corp. has said it will provideinference-based application development tools that will integrate with IBM'sAD/Cycle CASE environment.andM;But neither the bulk of AD/Cycle nor the related Aion tools are availableyet.andP;  Nor is an entirely new generation of products that, users say, will becritical to automating the software life cycle and to improving productivity:tools for reverse engineering and reengineering existing applications.andP;  Withbillions of dollars invested in aging, often badly structured applications,users say they need an automated way to rehabilitate old code, extend itsfunctionality and bring it into a CASE environment, where it can be moreeasily maintained.andM;The Main ProblemandM;Automating just the development of new applications solves only a small partof the problem, according to Pat Seymour, a staff manager with PacBell's whois in charge of what the company calls &quot;systems renewal.&quot;andP;  &quot;We can no longertolerate the time and expense of reengineering applications by hand,&quot; Seymoursays.andP;  She has calculated it would take the company between five and sevenyears and cost as much as $50 million to reengineer just its payrollapplications.andM;Several vendors are currently working on products that would not onlyrestructure existing COBOL applications but also allow developers to addfunctionality with automated tools.andP;  Language Technology Inc. of Salem,Mass., for example, is building a product--code-named Chrysalis--which wouldallow programmers to automatically generate design diagrams on a PS/2 fromexisting code and make changes from high-level specifications.andP;  But Chrysalishas been in development for a couple of years and is only now in alpha test.andO;LTI president Eric Bush won't say when Chrysalis will become a product, buthe does acknowledge that &quot;it's taking longer than we hoped.&quot;andM;Bush also acknowledges that, even once Chrysalis is completed, manyprogrammers simply won't be ready to restructure and rebuild applicationsfrom high-level specifications rather than by digging into the codethemselves.andP;  So LTE engineers have gone back and made some design changes.andM;&quot;It could have been revolutionary.andP;  But we think we've learned enough fromthe time we've been selling restructuring of the need to have evolutionaryapproaches,&quot; says Bush.andP;  &quot;The concept of Chrysalis is very radical.andP;  It's tostop thinking of software as third-generation languages and start thinking ofit as design diagrams.andP;  But we know the world won't move that fast.andP;  So we'vespent a lot of time and engineering resources in trying to make theconnection to the past very continuous.andP;  In particular, one will be able tosee lots of views of portions of programs,&quot; including source code, says Bush.andM;Although several key tools simply aren't ready yet, many experts, such asnoted industry consultant James Martin, are encourating users not to wait forthe perfect integrated product but to start getting experience with newautomated tools and supporting methodologies now.andP;  Companies that don't couldbe left behind, they warn.andM;But many IS managers, wary of the costs involved in transforming softwaredevelopment--both in dollars and in cultural upheaval--prefer to wait andfocus on other ways to improve the existing process.andP;  Rather thanwholeheartedly embracing automated design and code generation tools, SanFrancisco-based drug distributor McKesson Corp., for example, is placing apriority on rigorous project management and the creation of a standardlibrary of reuseable software modules.andP;  According to IS vice president DougMorgan, what little experimentation McKesson has done with automated designtools on a Tandem Computers Inc.-based order-processing system has convincedhim he will have to overcome major cultural changes and resistance to makeautomation work.andM;&quot;The changes are major and kind of scary,&quot; says Morgan.andP;  &quot;You'd better hopethe payoff is a big one to justify all of that.&quot;andP;  So far, he is notconvinced.andM;Others say they are wary because they've been through this before, investingin new technology that was supposed to transform software development only tobe disappointed.andP;  &quot;The reason so many are cautious is that we've had so manydead ends,&quot; says Rockwell's Sutter.andP;  &quot;The issue is, Does it really do what itpurports to do, or is it another one of these things, like some 4GLS, that wereally wished we hadn't trained somebody in because only two guys in thewhole company know how to work in that environment?&quot;andM;While most companies are at some stage of grappling with that question, a fewhaven't had the luxury of being cautious.andP;  For a few, sudden urgent businessconditions have meant they've had to cut through cultural and organizationalresistance to get results.andP;  A year and a half ago, for example,Brussels-based agricultural and chemicals maker Cerestar SA put all of its ISmarbles into the automated code generation basket when a divestiture left itwithout any major systems capability.andP;  Cerestar, a $1.2 billion companyoperating in nine European countries, was sold by U.S.andP;  parent CPC ProductsCorp. in October of 1987.andP;  CPC retained all IS capability, so Cerestar wasforced to start all over from scratch.andM;Starting OverandM;Cerestar picked a then-new code generator tied to Cullinet Software Inc.'sIDMS database running on VAX 6000 systems.andP;  Both Cullinet and its product arenow owned by Computer Associates International Inc. Called AD/Generator byComputer Associates, the product allowed Cerestar to rebuild its base set ofapplications--about 1,200--in just over a year with 11 programmers and threedatabase experts.andP;  According to Cerestar European MIS director Herman Dircx,the approach has not only allowed the company to build applications fast andwith good quality but it has also helped Cerestar build an information modelof its business throughout Europe.andP;  That will be crucially important as atrans-European economy develops after 1992, says Dircx.andM;Cerestar's experience may be encouraging to those who want to be reassuredthat automated software development techniques and tools can pay off in a bigway.andP;  But, of course, very few IS shops have the advantage of starting overwith a clean slate.andP;  For most companies, reality is lots of installedapplications, an entrenched way of developing new software and managementthat may not be willing to pay the price of upheaval and certainty in orderto get a new automated software development process.andP;  Given that reality, therevolutionary transformation of software development at most companies won'thappen quickly, many believe.andM;&quot;Just look back to structured programming,&quot; says PacBell's Murray.andP;  &quot;Thatcame in the early 1970s, and it's only now that it's a way of life.andP;  Thereality is that we're probably talking about another 20 years before we takethe next step.&quot;andM;That may seem like a long time.andP;  But then the industrial revolution did nothappen overnight, either.andO;</TEXT></DOC>