<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-715-887  </DOCNO><DOCID>09 715 887.andM;</DOCID><JOURNAL>Patricia Seybold's Office Computing Report  Oct 1990 v13 n10p1(14)* Full Text COPYRIGHT Patricia Seybold's Office Computing Group1990.andM;</JOURNAL><TITLE>Object-oriented data management: foundation for adaptable systems.andO;(object-oriented data base management technology is new andsomewhat risky but important for rapidly implementing andrewriting flexible applications; related articles discuss thecontroversy over the Sun Microsystems benchmarking of data basemanagement systems and list features defining an objectbase)</TITLE><AUTHOR>Rymer, John R.andM;</AUTHOR><SUMMARY>The need to customize information to meet the requirements ofusers and to adjust to changes in those requirements are thenon-technical imperatives impelling new office systemarchitectures.andP;  New approaches to the way data are collected,organized and managed are needed to meet changing marketrequirements.andP;  Two new approaches to software are programsdesigned to support workgroups and techniques used to make thelarge amounts of information in computer systems available to arange of users.andP;  Objectbase management systems allow functions andcharacteristics to be defined once, tested for correctness andstored in a shared resource for reuse.andP;  Oracle, Sybase, Ingres,Informix and other relational DBMS vendors are moving towardobject support in their products, but other vendors are adopting acompletely new database technology.andP;  The benefits of theobject-oriented approach are discussed.andM;</SUMMARY><DESCRIPT>Topic:     Object-Oriented Data BasesData Base Management SystemsTrendsData Base DesignApplications ProgrammingComparisonRelational DBMS.andO;Feature:   illustrationchart.andO;Caption:   Putting semantics in the DBMS. (chart)Comparison of the relational and object DBMS approaches toprogramming. (chart)Object architecture. (chart)andM;</DESCRIPT><TEXT>Object-Oriented Data ManagementandM;WE ARE SO consumed by what we can do with technology that we often lose sightof why we do it.andP;  There are two nontechnical imperatives driving us toward anew systems architecture for the office.andP;  The first is the need to tailorinformation to suit the individual needs of our customers, whoever they maybe.andM;For a tractor manufacturer, for example, tailoring information to suitcustomer needs might mean empowering a product designer to quickly generate alighter, more fuel-efficient thresher design in response to rising fuelprices.andP;  In other words, even manufactured products such as tractors have aunique and vital information component--in this case, design documents.andO;Meeting the need for customized information requires new approaches to theway data are collected, organized, and managed.andM;The second competitive imperative is adjusting to change.andP;  Users needapplications that analyze, view, and present information that can be changedto respond to new customer demands and new profit opportunities.andP;  Look at thecorporate takeover craze of the 1980s.andP;  Suddenly, money management firmsneeded applications to analyze new kinds of deals, such as leveraged buyouts(LBOs).andP;  Then, during the last two years, the need to analyze LBOsdisappeared, replaced by still newer financing needs, such as calculating outthe value of a failed savings and loan's assets.andM;The message is this: The data may change and the applications needs maychange, and you must change to remain in your markets.andP;  Being able to quicklyrespond to ever-changing market requirements also requires new approaches tothe way data are collected, organized, and managed.andM;Workgroups and ObjectsandM;These imperatives are driving two new approaches to software.andP;  First,organizations are building software to support workgroups.andP;  The thinking isthat smaller entrepreneurial units will be better able to respond to shiftsin customer demands than will a large organization.andP;  A key challenge inworkgroup software is capturing the policies and procedures that govern anygroup's work, as well as the work of corporate employees as awhole--automating the flow of information.andM;An insurance carrier, for instance, needs to have proposed policies routed tothe right authorities for review and in the right order.andP;  The sales groupthat negotiated the deal wants to see it go through these channels quickly.andO;Think of how streamlined the process would be if the document itself knewwhere to go next.andP;  And the process will really flow if the relevantcollateral information is accessible from within the policy itself.andP;  Odesta'sDocument Management System (see Vol.andP;  13, No.andP;  8) and ATandamp;T's Rhapsody (seeVol.andP;  13, No.andP;  6) are two products that specifically address this problem.andM;The second software trend: finding ways of making tons of information usefulto a range of users, each with very different needs.andP;  Users need to viewinformation from diverse sources.andP;  And they need that information to beunderstandable.andP;  Application environments, such as Metaphor's DataInterpretation System and, potentially, Hewlett-Packard's NewWave (see Vol.andO;13, No.andP;  6), provide relief by putting information into context for users.andM;Objects, which represent the real things we work with--contracts, warehousesfull of products, retail shelves, etc.--are very important to the success ofMetaphor, NewWave, ODMS, Rhapsody, and similar products.andP;  Building computermodels of procedures virtually requires modeling data as objects.andP;  And ifusers find the real things they use on their jobs in their systems, they'llbe able to use those systems more effectively to sort through data.andP;  Thetractor designer wants to work with his design drawings organized as hethinks about them--as a series of interrelated parts.andP;  The investment analystwants his formulae applied to a basket of stocks--organized according to hisown classification scheme.andM;Many of the applications and environments that use objects today do so byreconstituting information--adding meaning to data stored in data managementsystems that are not designed to manage objects.andP;  They manage raw data,usually simple data such as strings of letters or numbers.andP;  An object, bycontrast, is &quot;educated data.&quot;andP;  Objects are self-defining modules that includeraw data, as well as the characteristics that define that data and thefunctions the data can perform.andP;  A document object, for example, couldinclude alphanumeric data plus typestyle and page formatting plus a printerdriver.andP;  (See Illustration 1.)andM;The Rise of ObjectbasesandM;The same nontechnical imperatives that prpmpted new approaches toapplications by Metaphor et al.andP;  (outlined above) are driving development ofnew database technologies.andP;  We call these technologies objectbase managementsystems (OBMSs).andM;We use the term objectbase because these systems manage not only raw data,but also its characteristics and its functions as units.andP;  Conventional DBMSand file systems, by contrast, store only raw data, giving applicationsresponsibility for deciding what that data will be--Is that a paragraph or afootnote?--and what it will do--print the document or stick it in E-mail?andO;(See Illustration 1.)andM;The data-only approach to data management systems means that in a document,for instance, each application using the document must replicate the samedefinitions of formatting characteristics and printing functions again andagain.andP;  The object-oriented approach allows functions and characteristics tobe defined once, tested for correctness, and stored in a shared resource foruse over and over again.andM;We use the term management systems because these systems manage concurrentaccess to objects by multiple users, ensure the integrity of storedinformation, provide backup and restore features, and manage the completionof transactions--all of the features we expect of a DBMS.andM;Two groups are bringing to market the object-oriented approach to datamanagement.andP;  Oracle Sybase, Ingres, Informix, and other vendors of RDBMSs aremoving to support objects by enhancing their products.andP;  They advocate anevolutionary approach that builds on today's investments to implementobjectbase management systems.andM;A second group of vendors advocates moving to a totally new databasearchitecture.andP;  These vendors offer bridges to the relational world, but theirapproach is revolutionary as opposed to evolutionary.andP;  The proponents of thisapproach include Itasca, Object Databases (formerly Graphael), Object Design,Objectivity, Ontologic, Servio, and Versant Object Technology.andM;FIVE QUESTIONS.andP;  CAD/CAM vendors and users are moving fairly rapidly toobjectbase technology because they need to.andP;  Hierarchical, network, andrelational DBMSs have neither been able to effectively store the extremelylarge units of data used in CAD/CAM nor manage the complexes of interrelateddata used in CAD/CAM.andM;Commercial users--users of document-related applications, order processing,inventory management, customer support, financial management, personnelmanagement, etc.--are moving more slowly to adopt the technology, however.andO;They are dogged by five big questions:andM;* How do objectbases improve my applications?andM;* Can RDBMSs be extended to store objects?andM;* Is an objectbase a better choice than an extended RDBMS?andM;* What are the pitfalls of both approaches?andM;* What are my migration strategy options?andM;This report answers these five questions.andM;Benefits of the Object-OrientedandM;ApproachandM;The term object-orientation has come to mean many things.andP;  But foremost, itis a means to an end, and only one of a number of possible means, at that.andO;It is tempting to view the object-oriented approach as the only way toachieve certain system development benefits.andP;  That's nonsense.andP;  Each of thethree benefits discussed below can be achieved through other approaches.andO;Many believe, however, that the object approach offers simplicity ofdevelopment and robustness of function that other approaches haven't yetshown themselves capable of duplicating.andM;The object-oriented approach to systems comes from programming.andO;Object-oriented languages give programmers the words to describeobjects--data defined in terms of their characteristics, functions, andsimilarity to other objects.andM;Objects know what they are and what they do.andP;  They interact with otherobjects through strong interfaces that exhibit what they do, hiding thedetails of their construction.andP;  This allows programmers to define objectsthat are independent of one another and of particular applications.andO;Instances of objects can be used over and over again in all sorts ofapplications.andP;  Building programs using the object-oriented approach is partcreation, part assembly of existing parts.andM;The creation of new objects is eased by a language feature calledinheritance.andP;  Inheritance allows new objects to be created by adding featuresto or subtracting features from existing object definitions.andM;The foundation of inheritance is a system for classifying objects accordingto their similarities or differences.andP;  In object-oriented programming,programmers define similar objects as belonging to the same class and beingof the same type.andP;  A class called Document, for example, could be defined asa container for text or graphics that has a heading and a footer and that canbe printed.andP;  If we needed to create a new kind of document, called ContractDocument, that is like a Document but must be distributed for approval, wecould create a subclass that has all the characteristics of Document with theadditional approval-routing program required for Contract Documents.andM;MARRYING OBJECTS AND DBMS.andP;  Programming languages don't provide a way to saveclasses and objects after the application process that uses them is killedoff.andP;  Objects that outlive the processes that use them are called persistentobjects.andP;  programmers need data management facilities to save objects forreuse in other programs.andP;  The ideal data management facility for storingobjects is one that supports the same features--definition ofapplication-independent objects as packets of data, characteristics,functions, and inheritance--as languages do.andM;But there's a larger significance to the object-oriented foundation ofobjectbases.andP;  The object-oriented approach to building systems helpsorganizations achieve two goals: reusable software components and extensibleapplications.andP;  Both of these goals support the two business imperativesdriving commercial systems--tailoring information to customers and livingwith change.andP;  There's nothing magical about the object-oriented approach; itmerely provides a foundation that seems to work well.andM;Benefits of OBMSandM;The objectbase management system (OBMS) provides three major benefits tobuilders and users of commercial applications:andM;* Management of an unrestricted variety of information typesandM;* The ability to model complex relationshipsandM;* The capacity to changeandM;VARIETY OF INFORMATION.andP;  Information comes in many forms, some simple andsome complicated.andP;  Simple forms include character strings and numbers.andO;Complex forms are information with encoding to describe its format orpresentation or function or relationship to other information.andP;  Objectorientation is about defining both forms of information.andP;  And objectabasespromise to eliminate today's restrictions on the kinds of information thatcan be stored in data management systems.andM;DBMSs have a hard time managing documents and similarly complex objects.andO;First, complicated information tends to be larger than the conventionalrecord sizes DBMSs use to store information.andP;  A record is an inflexible unitof storage, which, until recently, was typically small.andP;  Objectbases useflexible units of storage that are limited in size only by system memory.andM;Second, record-oriented databases don't know much about what they store.andO;Typically, a database knows about character strings, numbers, dates, money,and a few other kinds of information.andP;  All other kinds of information aredumped into blobs (binary large objects), which are randomly sized pieces ofstorage.andP;  This is how most DBMSs would store a document.andP;  Blobs don't allowthe database to help applications or users work with information.andP;  Let's say,for instance, that a user needed only one part of a document.andP;  A blob can'tdeliver up the parts--only the whole document.andM;MODELING COMPLEXITY.andP;  Object orientation is also about defining informationin context.andP;  An information's context includes the functions that it canperform, its characteristics, and its relationship to other information.andO;Objects are a very effective way to describe interrelated sets of informationthat form a single whole.andP;  Our document, for example, may be described ascontaining a chart, an excerpt from a spreadsheet, and text, each of which isa separate, self-defining unit.andP;  Each of these three entities is part of awhole and is related in specific ways--space, content, etc.--to the others.andM;Why is this approach useful?andP;  Think back to the insurance policy example.andO;Our goal is to make the collateral information forthe policy--the rationalefor its structure and terms--available for review from within the policyitself.andP;  Using the object approach, we could include in the definition ofeach section of the policy a link to the collateral material.andP;  The reviewerwould, thus, be able to move easily from a given point in the policy to therelevant collateral material.andM;This is an extremely useful benefit in situations such as insurance orcontracts, where changes to one piece of information must be reflected inrelated information.andP;  If the insurance policy includes an estimate of costsbased on an underlying spreadsheet, and if that spreadsheet is updated withnew information, the resulting new estimate must ripple through to update thepolicy.andP;  In an objectbase, updates of related or dependent objects arestraightforward.andM;The relationship described by the insurance application is a simplerelationship--a pointer from one object to another.andP;  Objects can describemore complicated relationships as well.andP;  T. Rowe Price, a money managementfirm in Baltimore, used objects to describe an analysis routine called atime-series regression.andP;  T. Rowe Price built its system using Vision, anintegrated OBMS and environment from Innovative Systems Techniques (Insyte)of Newton, Massachusetts.andM;In a time-series regression, the prices of two securities on different datesare compared to determine how changes in the prices of one stock influencethe price of the other.andP;  The relationship between the two stocks isdetermined by six different calculations.andP;  T. Rowe Price has captured thiscomplicated operation in objects.andP;  One object represents the time-seriescalculations for the first stock; a second object does the time series forthe second stock.andP;  The two are then compared by a third object, yielding theresult.andP;  The relationships remain the same in the objectbase; analysts justplug in different stocks, prices, and dates.andM;Could you build such an application using calculated fields in an RDBMS?andO;Yes.andP;  However, the application would require many joins of relational tablesto execute.andP;  And it would be difficult to modify.andM;EVOLVING TO ACCOMMODATE NEW NEEDS.andP;  The ability to change the way objects aredefined and used is implicit in the object-oriented approach to datamanagement.andP;  The object-oriented approach to systems is fundamentally aboutdefining data in its context--and changing the definitions as needed.andP;  Thisbenefit is realized in three ways.andM;First, because objects hide the details of their construction, they can bechanged without compromising their ability to interact with other objects.andO;As long as an object does what its interface says it can do--print a DigitalCDA format document, for instance--other objects can continue to work with itdespite any internal changes in the way the object performs its functions.andM;Second, new kinds of information can be added to data management systems.andO;Adding photographs of employees to a personnel database, for instance, iseased by the object-oriented approach.andP;  Images are just another data typethat can be added to the database.andM;Third, as we saw above, the object approach allows reuse of existing objectsand the creation of new objects from the specification of existing objects.andO;Inheritance is exciting because it supports reuse with change of existingsoftware components.andP;  The T. Rowe Price time-series regression objects are anexample of objects that are reused again and again in applications.andP;  If T.andO;Rowe Price inzvents a variation on this time-series analysis, it can use theexisting objects as the basis for new objects describing the new analysisroutine.andM;Extending the RDBMSandM;There are two basic ways to provide the benefits of object orientation indata management.andP;  The first is to extend RDBMSs.andP;  The second is startingfresh with a new database architecture--the objectbase management systemsdescribed earlier.andM;With billions of dollars invested in RDBMSs, the big question is: Canrelational be extended to support objects?andM;The answer is yes, but only in limited ways at the moment.andP;  The RDBMS usershave found ways to store odd data types--using blobs--and to store rulesabout the data they manage.andM;In the relational approach, all data are stored and managed intwo-dimensional tables.andP;  RDBMSs are based on a rigid link between the waydata is modeled for use by applications (in tables) and the way it is stored(in tables).andP;  Applications give data meaning.andP;  Most importantly, applicationsdetermine how data are related.andP;  Despite the term relational, RDBMSs don'tstore relationships.andP;  Rather, applications use an RDBMS feature called a jointo relate or compare data elements from different relational tables.andM;The relational approach is at odds with the object approach because itseparates data from the relationships, characteristics, and functions thatdefine how those data are used.andP;  However, the mathematical model thatunderlies RDBMS technology itself does not appear to close the door onsupporting object-oriented data management.andP;  The thousands of organizationsthat have poured billions into relational technology can take comfort in thefact that their investments are not dead-ends.andM;TODAY'S LIMITATIONS.andP;  Indeed, the major limitations of today's RDBMSs indelivering object-oriented data management functions appear to be the tuningand systems-architecture choices vendors made in implementing theirdatabases.andP;  Today's RDBMSs manage simple kinds of data, such as strings andnumbers and dates.andP;  This approach is in line with the kinds of applicationsRDBMSs support in most organizations.andP;  The applications work with financialdata, inventory data, and so on.andM;On the systems-architecture question, today's RDBMSs are evolving from aminicomputer orientation to a client-server architecture.andP;  However, RDBMSclients are pretty dumb.andP;  An application on an RDBMS client asks for data,and the server sends the data across the network a piece at a time.andP;  Thenetwork transfer time becomes a tremendous bottleneck.andM;In addition, applications depend on the server to service queries byperforming joins, to manage buffers, to ensure concurrency control, and justabout every other task in data management.andM;Rick Cattell, a Sun Microsystems database researcher, concluded that thisarchitecture will always be horribly slow on engineering applications thatperform operations on big objects and big lattices of related objects.andP;  Thoseapplications virtually require clients that fetch the objects they need froma server and perform application chores in large local memory pools.andM;EXTENSION PRIORITIES.andP;  Even though teh system-architecture question is socrucial to performance in certain applications, as Cattell has demonstrated,fixing it is low on the priority lists of the major RDBMS vendors.andP;  (Thisfact alone is the biggest compettiive advantage the objectbase vendors havein their battle with the RDBMS vendors.)andM;Highest on the relational vendors' lists are supportingadditional--preferably user-require--kinds of information and rules thatdefine how information is used.andM;Additional Information Types.andP;  Blobs are the easiest way to add support fornew kinds of information to RDBMSs, but not the only way.andP;  Blobs are veryuseful in extending the kinds of applications RDBMSs are used for today, andall of the RDBMS vendors use them.andM;For example, a bank can add images of customer signatures to its customerdatabase.andP;  When a teller needs to check a signature, the image can bedelivered to his or her screen by the database.andP;  However, the blob approachhas inherent limitations.andP;  First, users can't query the contents of a blob.andO;In applications that just have to store and deliver whole images, such assignatures, this isn't a problem.andP;  However, in a handwriting analysisapplication, blobs wouldn't work.andP;  In that case, the user needs a databasethat knows the structure--dimensions, slants of letters, etc.--of thesignature itself.andM;The second limitation of blobs is that they can be manipulated only byapplications that understand the way they've been implemented.andP;  This factlimits the ability of an organization to change its applicationsindependently of its data.andM;Because of these limitations, blobs are only the first step in supporting awider range of information types in RDBMSs.andP;  The longer-term solution is toextend the relational model to storemore complicated kinds of data.andP;  Ratherthan a table being a collection of flat rows, the table could store arrays,sequences, unions, compound objects--whatever.andM;Of the major independent RDBMS vendors, only Ingres has stepped up to thischallenge.andP;  Ingres 6.3 has an &quot;object management&quot; option that allows users todefine information types, functions, and operators.andP;  Uses can define columnsin a table to contain information such as spatial coordinates, fractions,complex numbers, variations on the year (fiscal, etc.), manufacturingtolerances, and so forth.andM;Defining Complexity.andP;  &quot;Stored procedures,&quot; or the ability to store rulesabout how data can be used in a data dictionary, is an extremely usefulfeature of RDBMSs.andP;  All of the RDBMs vendor acknowledge that fact and aremoving to adopt or enhance the basic concept in their products.andP;  Storedprocedures are a way to associate a function with a table--a roughcorrespondence to the ability to associate functions with classes of objects.andM;Stored procedures today are mainly used to ensure that data stored in thedatabase are properly used.andP;  a bank could, for instance, insert a rule thatprevents the updating of an account balance in withdrawals over a certainamount.andM;Expanding this concept to encompass more kinds of functions and morefunctions per table is one goal of the RDBMs vendors.andP;  Ingres 6.3's KnowledgeManagement option provides the basis for such an expansion by allowing usersto store more information about data in the DBMS's data dictionary.andM;WAITING FOR THE MILLENIUM?andP;  On the surface, it appears that the RDBMS vendorshave the situation well in hand.andP;  They understand what's neeed, and they aremoving to implement support for objects.andP;  They've got the market presence.andO;They've got proven data management technology.andP;  Why should users considerusing anything but RDBMSs to move into object-oriented data management?andM;Because it isn't that simple.andP;  Carrying forward the relational model willtake lots of time and work.andP;  There are nagging questions about how SQL can beenhanced to support both objects and existing relational structures.andP;  Andwhen will RDBMSs support object-oriented development?andP;  Today, for instance,Ingres 6.3's Object Management feature requires developers to work inthird-generation languages such as Cobol to define objects.andP;  There is no useof inheritance, and it's not clear yet how inheritance can be supported inthe RDBMS.andM;Oracle, the leader in terms of installed RDBMS systems, believes its userswon't be ready for objects for three to five years.andP;  Oracle is talking aboutwhat needs to be done and is showing a prototype of an object-orientedversion of SQL.andP;  But Oracle isn't discussing product plans.andP;  (Interestinglyenough, Oracle is validating the controversial argument advanced by the OBMScrowd that the relational model is a subset of a larger object-oriented modelfor data management.)andM;The reason is that none of these vendors yet has a compelling reason to moveinto object-oriented systems in a big way.andP;  They are primarily concernedabout improving the productivity of their existing technology bases andapplications.andP;  Ingres's goal with Version 6.3's object management andknowledge management features is to dramatically reduce the amount of codeneeded to do a query and to improve maintenance.andP;  Ingres estimates thatqueries that once took 70 to 80 lines can be reduced to 5 to 10 lines inVersion 6.3 by reducing joins.andM;The RDBMS vendors might be right: Their users might need five years to learnhow to apply objects to their systems.andP;  The new vendors of objectbasemanagement systems, however, are betting that many users will need to movefaster than the relational vendors can.andM;The Objectbase ApproachandM;As noted earlier, an objectbase management system stores objects as opposedto raw data.andP;  To help focus industry discussion, a group of researcherspublished in 1988 the Object-Oriented Database Manifesto, which defines whatcharacteristics an objectbase should have.andM;The manifesto's definition has stood the test of time--vendors, by and large,implement the features it outlines.andP;  Compared to RDBMSs, however, OBMSs aredifferent in five fundamental ways:andM;* The format in which they manage dataandM;* The way in which developers create applications using the objectbaseandM;* The standards available to usersandM;* The client-server architecture they useandM;* The applications they're tuned forandM;SCHEMA DISTINCTION.andP;  Every database technology has a schema, or format, forstoring data.andP;  In tne RDBMS, the schema is a two-dimensional table.andP;  In anobjectbase, the schema is a hierarchy (or hirarchies) of classes andsubclasses defining objects under management.andM;In relational terms, a class can be thought of as a table, messages (ormethods) as columns, and instances of classes as rows.andP;  The key differencebetween the RDBMS and the objectbase is in the ways a developer can relatetables.andP;  In an ODBMS, interrelationships, including inheritancerelationships, are stored in the DBMS.andP;  In addition, relationships amongindividual rows in a table can be stored in the DBMS.andP;  Thus, therelationships constructed using joins in an RDBMS are implicit in theobjectbase.andM;UNIFIED DEVELOPMENT ENVIRONMENT.andP;  When database were invented, the developersused the same language to write applications programs and manipulate thedatabase.andP;  Sometime during the 1960s, programming languages and databaseswere broken apart.andP;  The spread of RDBMSs, with SQL as the standard datamanipulation language and a variety of 3GLs and 4GLs as he applicationprogramming languages, confirmed the trend.andM;Object-oriented databases want to reunite the applications anddata-manipulation languages, providing a single language to writeapplications, manipulate the database schema, and perform databaseoperations, such as queries.andM;The benefit of the reunion of databases and language is the ability to createricher application designs in a simplified development environment.andO;Objectbase proponents talk about the &quot;impedance mismatch&quot; that occurs whenboth a general-purpose and a database-specific language must be used tocreate applications.andP;  First, SQL's programming paradigm is different frommost of the languages used to develop applications, increasing the risk ofconceptual breakdowns in applications.andP;  Second, at the interface between thetwo languages, information is invariably lost.andM;The object-oriented paradigm, which balances data and functions in a unifiedcontext, virtually demands a unified programming environment.andP;  (SeeIllustration 2.)andM;STANDARDS.andP;  The key contribution of the RDBMS is SQL--the firstindustry-standard data manipulation language.andP;  No one will settle for lessthan this from the objectbase vendors.andP;  Unfortunately, for all the talk of aunified programming environment in the objectbase world, there are fewmeaningful standards.andM;Actually, there are two major standards in the objectbase world, each ofwhich is inadequate.andP;  The first of these standards is the C++ languages, astandard under the direction of ATandamp;T's Unix Software Operation with theguidance of an ANSI standards committee.andP;  The second is SQL--well, sort of.andM;C++.andP;  Object Design, Objectivity, Ontologic, and Versant Object Technologyhave all built OBMSs based on the C++ object model and sporting C++interfaces.andP;  Does this mean users can run C++ programs interchangeablyagainst any of these OBMSs?andM;No.andP;  All endors of DBMS with a C++ interface must solve a fundamentalproblem: C++ doesn't know what a database is--it does not provide a way toidentify persistent objects, nor does it provide language with which toformulate queries.andP;  All of the vendors solve this problem in different andincompatible ways.andM;Ontologic, Versant, and Objectivity provide with their OBMSs a base class forpersistent objects.andP;  All persistent objects inherit the characteristic ofbeing persistent from that class.andP;  Although the method is the same, theimplementations are not the same.andM;Object Design takes a different approach.andP;  Object Store allows developers tospecify persistent objects using variations on standard C++ commands.andP;  ObjectStore's proprietary preprocessor then allocates the objects properly.andO;(Object Store also provides a base class that doesn't require itspreprocessor.)andM;Until there is a standard for binding languages to databases, each willrequire standard C++ programs to be recompiled.andP;  There's some hope that theObject Management Group will lead an effort to establish standard languagebindings--particularly C++ language bindings--but as of now, there's nostandard.andM;Barring an unforeseen consensus breakthrough, this same standards breadkdownwill occur as more of the objectbase vendors implement interfaces to theSmallTalk language.andM;Object SQL.andP;  Ultimately, everyone wants to see a standard approach to objectSQL emerge as a way to query objectbases.andP;  Users with an investment in RDBMSswill insist on an SQL interface.andP;  They're unwilling to part with theirinvestments of time and money in the standard.andP;  Some of the objectbasevendors provide partial SQL interfaces as their query facilities.andM;For example, Versant allows users to retrieve objects unsing a &quot;Select&quot;command based on SQL  So does Ontologic.andP;  The difference is that Versant'sSelect retrieves objects from a set of objects conforming to the same typedefinition (image, document, etc.).andP;  Ontologic's Select can retrieve objectsacross types.andP;  Ontologic can also use a &quot;Select From Where&quot; to retrieveobjects based on their values.andP;  Versant hasn't implemented &quot;Select FromWhere&quot; yet.andM;A lot of vendors are working to extend SQL.andP;  Ontologic and Hewlett-Packardhave object-oriented versions of SQL, as does Ingres.andP;  Oracle is maintaininga low profile, quietly showing an object-oriented version of SQL.andP;  WhenOracle decides to weigh in, however, many, many users will pay very closeattention to what it does.andP;  Data General has published a specification for anobject-oriented programming language that uses SQL's syntax to create classesand perform other objectbase operations.andP;  DG's Object SQL, however, is not anobject-oriented extension of SQL, but a whole new language.andM;In the short run, it's probably more important for the industry to settle ona standard way of binding SQL to network servers than it is to settle on astandalone language.andP;  This would be an important interoperability facilitythat would allow objectbases to extract data from RDBMSs across a network.andO;The SQL Access Group, an industry consortium, is trying to come up with astandard approach to issuing SQL statements to remote DBMSs, but the pictureis still unsettled.andM;CLIENT-SERVER: A NEW VIEW.andP;  the objectbase view of clients and servers isquite different from the RDBMS view.andP;  Objectbase clients do a lot: Theymanage their own caches of objects for their own applications.andP;  Servers, onthe other hand, are responsible generally for issuing unique identifiers tonew objects and managing concurrent access to objects.andP;  As participants inapplications, their role is minimal.andM;This architecture takes advantage of powerful workstations equipped with lotsof memory.andP;  Indeed, it requires lots of memory.andP;  Most of the objectbase vendors recommend a minimum of 6 to 8MB of memory, but the real number iscloser to 16MB.andM;The reason vendors put so much function in the client is the nature of theapplications they will support with objects.andP;  Objects are well suited toapplications involving interrelated data, such as a compound document.andP;  Acompound document can be very large.andP;  Shipping it across a network every timean application needs to do something with it is impractical.andP;  Better totransfer it to the client once, and let the client hold onto it locally.andO;Obviously, these kinds of applications are very different from the typicalapplications running against RDBMSs.andM;A NEW BREED OF APPLICATIONS.andP;  Objectbases are tuned for &quot;concurrentengineering&quot; applications, not typical transaction processing applications.andM;For example, in a computer-aided design (CAD) setting, the components of acircuit board--with their interconnections--can be stored in an objectbase.andO;Engineers can then run a routine against the components that follows all ofthe interconnections and figures out how to reduce wire lengths.andM;The commercial analog of concurrent engineering is groupware.andP;  In both cases,the users are highly skilled professionals whose primary job is analysis ofinformation in a particular domain.andP;  Often, these users work together ingroups.andP;  They share certain data and analysis routines, but their need forconcurrency control is low.andP;  They need to check out objects and use themlocally for as long as they like.andP;  If they change shared information, theymay want to save both their changes and the original, creating differentversions of the information.andM;Take the T. Rowe Price time-series regression object.andP;  It maps out thecalculations involved in the analysis, together with their relationships toone another.andP;  Analysis just plug in new data to run analyses.andP;  The object islike a machine that analysts can check out of a central location to use andthen return.andP;  If an analyst wants to run only the second half of thetime-series regression on two companies, he or she can do so by creating aspecification of the object.andM;To support these kinds of applications, teh objectbase vendors add somefeatures that are unfamiliar in the relational world: versioning andcheck-out/Check-in transactions.andM;Versioning is an alternative to conventional concurrency control.andP;  Ratherthan post the last changes to a single representation of an object,objectbases can create new version and time-stamp them.andM;Check-out/check-in transactions are an alternative to locking data for aslong as they are being used in a transaction.andP;  In a groupware seting, adifferent model for transactions may be appropriate.andP;  One user could checkout an object from a shared pool of objects and use it on his or herworkstation for a week at a time.andP;  The other users in the group may or maynot want to lock the object during that week.andP;  Check-out/check-in gives themthe option of not locking an object while it is being used.andP;  This allowsseveral users to work with the same objects, saving their changes in separateversions.andM;SIZING UP THE SEVEN.andP;  The vendors pushing this new approach to databases outinto the market are small, largely driven by venture capital, and fairly newand untested.andP;  There are five general distinctions to explore when sizingthem up.andM;* StrategyandM;* Language interfaces and object modelandM;* Storage architectureandM;* Distributed databasesandM;* ToolsandM;Strategy.andP;  Ontologic, Versant Object Technology, and Servio are each seekingto become the general purpose objectbase, used in applications from CAD toorder entry to large-scale data integration applications such ascomputer-integrated manufacturing (CIM).andM;Object Design, Objectivity, and Itasca are focused on CAD.andP;  Objectivityrecently inked a partnership with Digital Equipment Corporation aimed atapplying its technology to publishing, insurance, and office applicationsduring the next two years.andM;Object Databases is also targeting CAD, but, in addition, it wants totransform the transaction-oriented applications market with objectbasetechnology.andM;Language Interfaces and Object Models.andP;  Object models are closely related tolanguage interfaces among these vendors.andP;  This makes supporting multiplelanguages clumsy or worse.andP;  All of the objectbase vendors except Servio andObject Databases have object models based on C++.andP;  Each has  the goal ofproviding multiple language support.andP;  However, additional languages willessentially be mapped to C++, a process that should exact a price inperformance and complexity for the developer.andM;Servio is farther along in dealing with multiple languages.andP;  The object modelof Gemstone, Servio's objectbase, is derived from SmallTalk.andP;  Servio justadded a C++ interface, mapping C++ to its underlying SmallTalk model.andP;  It'stoo early to know if this will be satisfactory to C++ developers.andM;Object Databases and Ontologic have language-independent object models.andO;Object Databases has the Property-Driven Model used in its G-Base front end.andO;G-Based implements the model in Lisp, but Object Databases is moving to C++and possibly SmallTalk in the near future.andP;  Ontologic's object model isindependent of the C++ interface Ontos implements.andM;Storage Architecture.andP;  The two basic architectures employed by the OBMSvendors are the virtual memory approach and the &quot;get-put,&quot; or indexed,approach.andM;Virtual memory allows objects stored in a database--on disk--to appear as ifthey are in real memory.andP;  When an application references an obj}ct that isn'tactually in memory, the objectbase, working with the operating system, mapsthe object from disk into memory.andP;  Virtual memory can be screamingly fast intraversing relationships between objects in memory.andP;  It can break down whenit has to get objects that aren't in memory.andP;  If an application needs newobjects, the virtual memory system has to fetch the objects and map them intomemory.andP;  If the objects used by an application grow, the virtual memorysystem may need to reallocate memory to accommodate them.andM;Thus, virtual memory is best suited to applications involving small groups ofusers working with well-defined collections of objects.andM;One other concern about virtual memory: It can be difficult to port.andP;  Virtualmemory depends on operating system calls to execute disk I/O.andP;  Differentoperating systems handle these calls differently.andM;The &quot;get-put&quot; approach indexes in memory references to objects, and usesthese references to retrieve objects requested by applications from disk.andO;Get-put is generally slower because the objectbase must check to see if anobject is in memory before satisfying a request for an object.andP;  However,vendors using get-put architectures all have special implicit references toobjects that mimic virtual memory.andP;  And they all use caches to raiseperformance.andP;  Still, the get-put approach is best suited to applicationsrequiring concurrent use of a shared pool of objects by large numbers ofusers.andM;Of the objectbase vendors, only Object Design is taking a competitive standon a virtual memory architecture.andP;  Ultimately, both approaches are useful--itall depends on the application.andP;  Vendors that hope to perform well inapplications not suited to virtual memory will have to support a get-putmodel.andM;Distributed Databases.andP;  In a distributed database, users can retrieve objectsfrom remote systems as if they were stored locally.andP;  All of the OBMS vendorseither implement distributed architectures today or plan to in the futurereleases.andP;  These architectures have in common a two-phase commit protocol toen-sure that all parts of a transaction take place or none of them does.andM;The vendors with the best-developed distributed strategies are Objectivity,Versant, and Itasca.andP;  Objectivity is the only one of these vendors that hasbuilt its distributed database atop a widely used distributed architecture.andO;Objectivity/DB uses the remote procedure call of Sun's Open NetworkComputing.andP;  However, its modular architecture can accommodate the OSF'sDistributed Computing Environment as well.andM;Distributed database is a future concern in this field.andP;  Initial users areseeking proof that objectbases will support their applications better thanother data management schemes.andP;  They don't appear immediatley interested indistributed facilities.andM;Tools.andP;  One of the reasons users will move slowly to implement distributeddatabases is that none of the objectbase vendors yet provides effective toolsfor managing distributed systems.andP;  (Nobody does.)andP;  Application developmenttools are emerging as a key differentiator for OBMS vendors.andP;  At this point,Ontologic has most aggressively pursued third parties as well as developedits own tools.andP;  Object Design has a very good graphical Schema Designer thatgenerates C++ code.andM;All of the vendors are making tools a priority for 1991.andM;How to Get ThereandM;We have drawn three conclusions about object-oriented data management at thisstage of development.andM;First, object orientation appears to be a good model for building softwarethat makes information  tailorable and that can adapt to change.andO;Object-oriented data management is needed to support wide use of theobject-oriented approach to systems.andM;Second, the technology is in a formative stage.andP;  Users adopting it now--evenrelational extensions--must accept considerable risk.andP;  Vendors haven't solvedall the problems yet, as we've seen above.andM;Third, Oracle is probably right in asserting that this technology will beadopted slowly over the next five years.andP;  We see this in the fact that mostusers of so-called office, or commercial, applications don't understand howobject-oriented data management can help them build better applications.andM;However, we do not agree with Oracle that users should sit and wait forrelational vendors to deliver on promises.andP;  It's often said that objectorientation is a way of thinking as much as it is a set of technologies.andO;This is true.andP;  Many users today are experimenting with object-orientedprogramming languages, seeking to prove that they are better thanconventional languages.andP;  We have no doubt as to the outcome.andM;Having proved the usefulness of object-oriented programming on discreteapplications, organizations should begin to determine how the concept can beapplied across their businesses.andP;  (Programmers creating objects to builddiscrete applications will eventually find they need a place to store themfor later reuse.)andP;  It is only when confronting this set of decisions  thatobject-oriented data management becomes really relevant.andM;We see an effective migration strategy as proceeding from decisions in threebroad areas:andM;* Need for the applicationandM;* Modeling your businessandM;* Putting an appropriate organization in placeandM;HIGH-PAYOFF APPLICATIONS.andP;  The first step is determining whether an extendedRDBMS an meet your application's need.andP;  Extended RDBMS is appropriate if yourgoal is to add stable data to existing applications.andP;  Stable data--such asphotographic images of houses in a real-estate listing system or signaturesin a banking system--don't change.andP;  Photos may be added, deleted, or sized,but users don't need to manipulate the images themselves.andM;If your applications involve complicated data that users manipulate--such ascompound documents--extended relational won't be as effective.andM;Ask an OBMS vendor to describe the applications benefits of objectbases, andthe answer will invariably be drawn from CAD.andP;  But what about the commercialarena?andP;  Two good general tests are the concurrency requirement of anapplication and the need to retain the logic of a particular task.andP;  (SeeIllustration 3.)andM;However, beyond general rules, we see three kinds of high-payoff applicationsfor objectbases in commercial applications: data integration, common views ofdiverse databases, and applications with lots of rules and constraints.andM;Data Integration.andP;  An objectbase can be used to integrate data from diversesources.andP;  This is the use to which T. Rowe Price and other Insyte customersput Insyte's Vision.andM;In this set of applications, data are extracted from a number ofsources--RDBMSs, files, data feeds, etc.--modeled as object classes and madeavailable to applications as obhects.andP;  This model is powerful because itcreates a single, stable base of information from a great deal of diversity.andO;Upon this base of information can be built a variety of applications.andM;To support this model, an objectbase must be able to accept information froma variety of sources.andP;  Insyte incorporates extract routines for the majorfinancial data services in Vision.andP;  The objectbase vendors haven't yetincorporated a wide range of sophisticated extract and import tools.andM;Unity from Diversity.andP;  Objectbases may also help organizations overcome theboundaries between different organizations and their databases.andP;  Aninternational corporation typically has, for example, a number oforder-processing systems--specific to subsidiaries, countries, or whatever.andO;any order can potentially involve any one of these separate systems.andP;  Justgetting the order decomposed and routed to the proper order system canrequire lots of manual labor.andM;An OBMS can be deployed as a large virtual database and gateway, modeling thedifferent systems with their interrelationships and constraints.andP;  Theindividual order-processing systems themselves needn't change.andP;  If the OBMSalso has gateway objects to the different systems, it can give users accessto combinations of them.andM;Capturing Constraints.andP;  In the above example, capturing the proceduresassociated with each order-entry system is absolutely vital.andP;  Objectbases areparticularly adept at capturing the procedures, policies, rules, andconstraints that govern the use of a resource or a collection of resources.andO;Applications that must factor in lots of rules are good candidates, then, forobjectbases.andM;BUILDING A MODEL.andP;  Having identified an application with a high payoff, thenext step is to model the application using objects.andP;  There aren't many toolsor techniques to help with this task.andP;  Ptech from Associative DesignTechnology is highly regarded.andP;  And many organizations with experience inentity-relationship data-modeling techniques say they can carry over portionsof their models when moving to objects.andM;Critical to the success of this process is working with a vendor that cancontribute experience in the application domain as well as object-analysisand -modeling expertise.andP;  Application expertise is an important criterion inselecting an objectbase vendor.andM;A good example of a vendor that has put technology and knowledge together inan effective package is Insyte.andP;  Insyte sells an environment called Visionthat includes an objectbase management system.andP;  Insyte doesn't sell itsobjectbase separately from its environment and its application services.andP;  Thesecret to this little company's success is what it knows aboutmoney-management applications--and its tuning of its database to serve thisapplication domain.andM;ORGANIZING FOR OBJECTS.andP;  Object orientation provides a means for achievingimportant goals in building software.andP;  Objects provide a way to writereusable software components, for example.andP;  Reusability, in turn, can speeddevelopment of new applications and modification of old ones.andM;But it's not automatic.andP;  You have to organize to achieve reusability.andO;Indeed, users with deep experience with objects report that they require neworganizational responses.andM;Organic Software Life Cycle.andP;  Objects tend to be developed as prototypes andare then tested before being released to production.andP;  From that point,however, objects should change to meet new needs--constantly, if necessary.andM;This approach is at odds with traditional centralized methods of developingapplications.andP;  The traditional software life cycle assumes that anapplication is designed, built, and then used over a period of time.andP;  Ifchanges are required, they have to be scheduled.andP;  Ideally, the two can bereconciled.andP;  The rigor of the traditional approach to testing anddocumentation can strengthen the quality of software components produced withthe object approach.andP;  (See Illustration 5.)andM;Class Librarians.andP;  And who manages objects created for use by peoplethroughout large organizations?andP;  A new professional called a class librarian.andO;This is a highly skilled position that requires knowledge of object-orientedanalysis and design, object-oriented programming, and testing techniques, aswell as of databases.andP;  The class librarian must be able to certify thatobjects offered for use by the organization at large work.andM;Development Organizations.andP;  Most organizations that have worked withobject-oriented programming languages have experimented with single-userprograms.andP;  Few user organizations have much experience yet with thedevelopment of large applications using the object-oriented approach.andO;Objects virtually demand that large projects be broken down into modules.andO;But how large projects are divided up and then managed as the individualpieces move along is something few have any experience with.andM;Experienced users say they quickly discovered that, to gain the technology'sfull benefit, they need to change the way they think about software.andP;  In thecase of T. Rowe Price, the realization was that its business could be modeledin four high-level classes of objects: companies, securities, accounts, andholdings (a holding is something an account owns).andP;  Lists, time series,strings, numbers, dates, etc.andP;  are lower-level classes.andP;  Objects such as thetime-series regression object are the tools analysis use to analyze data.andO;The company's focus is not on spreadsheets, but on specific, tailorabletools.andM;It took T. Rowe Price three years to complete this system.andP;  While buildingit, T. Rowe Price realized incremental gains in building discreteapplications.andP;  But, with the object-oriented infrastructure in place, T. RowePrice expects to see analysts creating more and more sophisticatedroutines--routinely.andM;ConclusionandM;We believe applications needs are driving us toward object-oriented datamanagement.andP;  We also acknowledge that extended relational and objectbasetechnology is raw.andP;  Organizations that are averse to risk should steer clearof object-oriented data management for the next two years.andM;To organizations with a compeling need and an enterprising spirit, we say:Get going.andP;  You can make small investments now, assess them, move on to thenext phase, reassess, and so on.andP;  We strongly recommend selecting vendorsthat are willing to partner with you to solve issues specific to yourbusiness.andM;There is so much to learn about this new way of designing and buildingsoftware.andP;  Those who make the commitment early will be rewarded with reallyuseful systems sooner, rather than later.andO;</TEXT></DOC>