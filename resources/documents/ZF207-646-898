<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-646-898  </DOCNO><DOCID>07 646 898.andM;</DOCID><JOURNAL>Communications of the ACM  Sept 1989 v32 n9 p1079(6)* Full Text COPYRIGHT Assn. for Computing Machinery, Inc. 1989.andM;</JOURNAL><TITLE>DEBL: a knowledge-based language for specifying and debuggingdistributed programs.andO;</TITLE><AUTHOR>Cheng, Wan-Hong S.; Wallentine, Virgil E.andM;</AUTHOR><SUMMARY>The demand for more computation power has increased the importanceof distributed computation, but the asynchronous autonomy propertyof individual processes makes it difficult to write and debugdistributed programs.andP;  A physical global clock is not available inmany distributed systems because different computer systems areconnected only by communication channels.andP;  The semantics ofdistributed programs can be separated into two parts:inter-process communication (IPC), and individual processsemantics.andP;  The Distributed Event-Based Language (DEBL) isdesigned to automate the debugging procedure and distributivelyexecute it at each local computer system, as well as isolateexecution errors to process levels.andP;  An overview of DEBL ispresented along with a detailed description of Temporal EventLogic (TEL), a formal temporal logic system.andM;</SUMMARY><DESCRIPT>Topic:     Distributed ProcessingProgramming LanguagesDebuggingKnowledge-Based Systems.andO;Feature:   illustrationcharttable.andO;Caption:   Structure of a distributed knowledge-based debugging system.andO;(chart)Appendix: a BNF definition of DEBL. (table)Definition of Event R1C. (table)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>DEBL: A Knowledge-Based Language for Specifying and Debugging DistributedPrograms Distributed computation has become increasingly important owing tothe demand for more computation power.andP;  However, distributed programs aredifficult to write and debug because of the asynchronous autonomy property ofindividual processes.andP;  Different computer systems are connected only bycommunication channels; therefore, a physical global clock is not availablein many distributed systems [7].andP;  It happens that the events that occur inthe program can be only partially ordered.andP;  Most of the existing concurrentprogram specification languages or systems focus on central or interactiveexecution control [1, 6, 8].andP;  The former approach is very time-consuming andinefficient.andP;  The latter approach tends to alter the execution course of adistributed program since artificial time distortion may be introduced intothe program execution.andM;The semantics of a distributed program can be separated into two parts:inter-pricess communication (IPC) and individual process semantics.andP;  The IPCis regarded as a more difficult but little understood area since each processby itself is just a sequential program.andM;The IPC aspect of distributed programs is our focus.andP;  Our goal is to have thedebugging procedure automatically and distributively executed at each localcomputer system, and have execution error(s) isolated to process levels.andO;Each potential faulty process can then be examined and tested independentlyand concurrently.andP;  A specification language, Distributed Event-Based Language(DEBL), that allows individual process behavior to be described in terms oflocal IPC events is designed for this purpose.andP;  A knowledge-base construct isalso integrated into it.andP;  DEBL is based on a formal temporal logic system,Temporal Event Logic (TEL), to ensure rigorous deduction.andP;  That is, thespecification expression of DEBL will be transformed into a correspondinglogic formula of TEL.andP;  Interpreting the specificaiton expression isequivalent to evaluating the corresponding logic formula.andP;  DEBL provides astructured and user-oriented description tool and TEL supplies a formal base.andO;Together, they can be the inference engines of a knowledge-based system whereDEBL serves as the front-end processor of TEL.andM;DEBL provides an event hierarchy to conform to a programmer's logicalconcepts.andP;  Processes are specified in terms of individual's IPC activities.andO;Temporal logic is used for expressing time-related properties.andP;  The knowledgebased has the same structure used by the user-defined process to provide auniform view of the system structure.andP;  Instead of interactively controllingthe program execution, our approach is a retrospective one.andP;  That is, weexamine the consistency between the process specification and the trace ofexecution.andP;  No further coordination between computer systems is required.andO;The results are forwarded to a control agent to determine possible faultyprocesses.andP;  Figure 1 illustrates the system structure of our distributedknowledge-based debugging system.andM;This article gives an overview of DEBL.andP;  The detailed description of TEL,transformation rules from DEBL to TEL, and a complete description of adistributed knowledge-based debugging system can be found in [3].andP;  The basicconcepts, syntactic structures, and informal semantics of DEBL will bedescribed in this article.andP;  We will also briefly discuss TEL.andM;OVERVIEW OF DEBLandM;The basic event unit of DEBL is the primitive event.andP;  Specifically, itrepresents an interprocess communication activity.andP;  A primitive event takeszero time to complete.andP;  Two interprocess communication mechanisms areidentified in DEBL, synchronous and asynchronous IPC.andP;  For instance, aprimitive event such as (S, R, msg, SR) expresses that S is the sendingprocess and R is the receiving process.andP;  The data being transmitted is of msgtype.andP;  SR indicates that this is a synchronous communication.andP;  If we have an(S, R, msg, R) instead, then it will be an asynchronous communication and isa receiving action performed by R.andP;  On the other hand, if we have an (S, R,msg, S), it will be a sending action performed by S.andM;Conceptually, each process is an event stream and a distributed program is agraph of these event streams.andP;  The nodes in this graph are IPC events and thearcs depict the relation of sending and receiving IPC messages.andP;  The graphmay consist of several independent, connected subgraphs.andP;  For example, acomputer network is divided into isolated subnetworks when communicationlines break down.andP;  For a totally isolated process, i.e., one that does nothave any interprocess communication with other processes, its descriptionwill not exist, or will be NULL, in our system.andP;  During program execution,interprocess communication messages will be recorded.andP;  After that, thesetraces of IPC messages are used for matching against specification.andP;  A BackusNormal Form (BNF) definition of DEBL is provided in the appendix.andM;Process and Event SpecificationandM;Each process is described in terms of its possible interaction (or events)with other processes.andP;  Specifically, a process is a tree or event sequences.andO;the ordering among these events are; (sequence) and $ (selection).andO;Repetition is designated with $.andP;  Events may be aggregate events or primitiveevents.andP;  EOP, ANY, and NULL are three special events.andP;  NULL is a null eventand ANY can be substitued with any of the primitive events except NULL.andP;  Thisis useful when users elect to examine only certain important aspects of theprogram like the detection of a unique inter-process communication pattern.andO;For example, the third and fifth IPC messages should be directed to processesp1 and p2 such as in (ANY: ANY: call-p1; ANY; call-p2; * ANY).andP;  In this case,intermediate events are of no importance.andP;  EOP indicates the event ofend-of-the-process.andP;  This is a special event which is generated by the localhost system when a process has reached the end of its normal execution.andP;  Anexclusion operator (-) is used to exclude specific primitive events from evendescription.andP;  For example, *(-(E1, E2)) expressed sequences of all possiblecombinations of primitive events without involving E1 or E2.andM;Aggregate events are constructed from primitive events and previously definedaggregate events.andP;  A process's behavior is described in three respects:pattern, which contains the process's possible evet sequences, property,which has their associated properties, and clue, which relates processdescriptions with the knowledge base.andP;  Interaction between processes isimplicitly specified in each process.andP;  In order to adapt to an individualuser's perception, DEBL supports a hierarchy of logical levels of events.andO;High-level intuition can be reflected in the form of aggregate events.andP;  Inthis regard, a process is an aggregate event which in turn may consist ofmore aggregate events.andP;  The process's event pattern and properties need tohold throughout its existence.andP;  This structure can be refined to a desireddegree.andM;For example, in a full-duplex computer protocol program, a communicationprocess will be talking with its host, counter-sender, and counter-receiverprocesses.andP;  It may be specified in DEBL as *(from_host * from_sender *to_receiver).andP;  Each aggregate event in the specification can be furtherspecified in finer detail.andP;  With this information, the debugging system canisolate violation(s) of specifications on different logical levels, dependingon user's current perception.andP;  If from_sender is further defined as (re_from;CRC_check; seq_check; (to_host * NULL)), the focus of debugging can benarrowed down even more.andP;  If there is an error in the event from_sender, theprogrammer can look into the corresponding implementation of that event.andP;  Byrepresenting debugging information in an environmental that is meaningful toprogrammers, this hierarchy can help programmers understand and locateprogramming error(s).andM;Syntactic Structure and Informal SemanticsandM;Each of the aggregate events has four entries: name, pattern, property, andclue.andP;  Name is a unique identification.andP;  Pattern represents the possibleordering of the events used in the current definition.andP;  There are sequence,selection, and testing (if-then-else) operators to control the eventordering.andP;  The testing part may involve inquiry of previous action andcurrent state.andP;  Usually properties or relations can be established amongdifferent aggregate events by forming another higher-level aggregate eventcomprised of those particular event definitions and referencing themaccordingly.andM;Properly is an entry to certify certain properties that need to hold in thecurrent aggregate event.andP;  An interval, which is a sequence of primitiveevents, may be specified by an aggregate event definition.andP;  The intervalassociated with the aggregate event starts when an instance of the eventbegins, and the interval ends when that instance of the event concludes.andP;  Theclue entry is the bridge between user's program and the knowledge base.andP;  Bycombining a user's program with the events provided in the knowledge base,clue becomes the means for the users to access the knowledge base.andP;  Bothproperly and clue entries can be used as either a validity checker or anerror identifier.andP;  The validity checker will check for the satisfaction ofthe formula, and the error identifier can be used to signal the existence ofa particular error.andP;  If [omega.sub.1] expresses something that must hold(e.g., a liveness properly that the process eventually terminates) and[omega.sub.2] expresses a particular type of possible error (e.g., a safetyproperty indicating which processes are not deadlocked), we can then form anexpression like [omega.sub.1] [and] [is approx.] [omega.sub.2].andP;  If[omega.sub.1] is not satisfied, we know the property was violated.andP;  If [isapprox.] [omega.sub.2] is not satisfied, then we know the error did occur.andM;Conceptually, every object we are dealing with in DEBL is an interval.andP;  Aprocess is an interval, a trace is an interval, and an aggregate event isalso an interval.andP;  We describe an aggregate event, or the interval itrepresents, in three respects.andP;  The pattern entry specifies the possibleevent patterns of an aggregate event.andP;  It despicts a coarse picture of anaggregate event.andP;  The property entry then refines this coarse picture withadditional qualification, i.e., the necessary properties of the interval,which are temporal formulas.andP;  Finally, the clue entry adds more restrictionto further qualify the aggregate event by asserting properties of theknowledge base.andM;TELandM;Temporal Event System (TEL) is a predicate temporal logic system that employsa linear time, event-based model and is based on the interval concept.andP;  Timeis modeled as a series of discrete events.andP;  TEL is a modified version ofSystem DX [5, 10] which is a linear time, state-based temporal logic system,with the interval concept carried over from Tempura [9], an interval temporallogic system.andM;Interval temporal logic has been widely discussed and applied tp variousareas (e.g., [9, 11]), and it is a natural scheme for our system as well.andP;  Wemix temporal logic with DEBL to enhance the expressive power of DEBL toexpress certain important temporal properties like eventually and infinetelyfrequent which are impossible to express in other languages like EDL [2],ECSP [1] or TSL [L].andP;  In DEBL, aggregate events are interpreted with respectto intervals.andP;  Each instance of an aggregate event forms an interval or &quot;timezone.&quot;andP;  All the properties and temporal specifications are checked againstevents within this interval.andP;  Nested time intervals are a natural implicationof DEBL's aggregate event structure.andM;Several internal temporal operators are used such as *(next), *(eventually),*(repeat match), and *(always).andP;  These operators are necessary for expressingtime-related properties and for having greater expressive power.andP;  Precisedefinitions of these temporal operators are given in [3].andP;  Only an intuitiveappeal of these temporal operators is explained here.andP;  * is used to specifythe property that should be true after the first p-event of an interval.andP;  *andO;is used to state that a subinterval of the current interval satisfies theproperty specified by it.andP;  * can be used to express that the propertyspecified will be true repeatedly in all the subintervals of one possiblepermutation of the current interval.andP;  * is used to specify the property thatwill be true in all possible subintervals of the current interval.andM;AN EXAMPLE: READER/WRITER PROBLEMandM;In this example, we have assumed a reliable, order-preserving communicationlink between processes.andP;  This can always be accomplished through providing&quot;lower layers&quot; of software to carry out the task.andP;  Within this example,delimiters such as () and [] are used interchangeably, when there is noambiguity, in the definition of aggregate events.andM;Description of the ExampleandM;We have two readers R1 and R2, two writers W1 and W2, one common buffer B,and one controller C. Each is a process that may run on different processors.andO;In this example, synchonous communication is assumed as the IPC mechanism.andM;R1, R2, W1, and W2 are all to access the common buffer B.andP;  To ensure aconsistent state of data in B, coordination between potential users isnecessary.andP;  To achive this goal, R1, R2, W1, and W2 must check with thecontroller C before accessing B. C enforces its policy of coordination byaccepting the messages from the desired process.andP;  The policy is as follows:writers are mutually exclusive of each other, and likewise for the reader andwriter.andP;  However, R1 and R2 are allowed to access B together.andM;Ports (entries) of the processes are start-read, end-read, start-write,end-write, read, and write.andP;  The basis data unit exchanged between processesis msg.andP;  In process C, an aggregate event Conds together with other aredefined to alleviate complexity and to provide a more intuitive andhierarchical description.andM;The logical expression at the clue entry in event Conds represents certainconditions that need to be validated.andP;   These conditions depend mainly on thecharacteristics of individual events.andM;Events of the ExampleandM;In this example, 12 primitive events are defined, all of which aresynchronous message exchanges.andP;  For example, E11 means process R1 sends amessage to port start-write of process C synchronously and E7 means thatprocess W1 sends a message to port write of process B with the same scheme.andM;Primitive Events Definition E11: (R1, C.start-read, msg, SR) E12: (R1,C.end-read, msg, SR) E21: (R2, C.start-read, msg, SR) E22: (R2, C.end-read,msg, SR) E31: (W1, C.start-write, msg, SR) E32: (W1, C.end-write, msg, SR)E41: (W2, C.start-write, msg, SR) E42: (W2, C.end-write, msg.andP;  Sr) E5: (R1,B.read, msg.andP;  SR) E6: (R2, B.read, msg, SR) E7: (W1, B.write, msg, SR) E8:(W2, B.write, msg, SR)andM;Processes Definition R1: *[E11; *E5; E12] R2: *[E21; *E6; E22] W1: *[E31;*E7; E32] W2: *[E41; *E8; E42] B: *[E5 | E6 | E7 | E8] C: *[W1C | W2C |*Conds] where events R1C, W1C, Conds are defined in Figures 2, 3, and 4respectively,  R2C and W2C have definitions similar to R1C and W1C.andP;  mutex,which appears in the event Conds, is provided by the knowledge base and isused for automating properties checking when faul detection and localizationprocedure is carried out.andP;  Its purpose in this case is to verify that theevents of interest are mutually exclusive during the lifetime of a currentevent instance.andP;  In Conds, countg is a function that returns the number oftimes of a specific event which has occurred.andM;COMPARISON TO OTHER WORKandM;The aggregate event construct in DEBL is motivated by EDL [2] and has asimilar structure.andP;  Using externally observable events to model programbehaviors approach has been used in many systems (such as CCS), but ourprimitive event format is based on [1].andP;  In [8], interval temporal logic wasapplied to debugging concurrent software.andP;  However, its query language islimited in expressive power and lacks the knowledge-base construct.andP;  Gupta[4] advocates localizing erro(s) to process(es) level for practical reasonsthat we think are valid in large-scale software systems.andM;The contribution of DEBL is that it can provide a uniform, rigorous, andprogramming-language-independent environment for distributed programspecification and debugging.andP;  Debugging is carried out distributively.andO;Programs can be specified by programmers using DEBL or readily availableknowledge-base events.andP;  This knowledge base is integrated into DEBL to assistprogrammers developing program specification or help in debugging systems tolocate programming error(s).andP;  Its structure is the same for specifying userhsprograms.andP;  This supports a consistent view of both DEBL and knowledge-basestructures which should make knowledge bases more available to users.andP;  Therigorous deduction power of DEBL will help automate processing the tracedata.andP;  We believe DEBL can be a descriptive tool to provide a practical butstill rigorous environment for developing distributed programs.andM;REFERENCESandM;1.andP;  Baiardi, F., de Francesco N., and Vaglini, G. Development of a debuggerfor a concurrent language.andP;  IEEE Trans.andP;  Softw.andP;  Eng., SE-12, 4 (Apr.andP;  1986),547-553.andM;2.andP;  Bates, P.C., and Wileden, J.C.andP;  High-level debugging of distributedsystems: The behavioral abstraction approach.andP;  J. Syst.andP;  Soft.andP;  3, ElsevierScience Publishing Co., 1984, 255-264.andM;3.andP;  Cheng, W.S.andP;  A knowledge-based system for debugging distributed programs,Ph.andP;  D. dissertation, Department of Computing and Information Sciences,Kansas State University, 1988.andM;4.andP;  Gupta, N.K., and Serviora, R.E.andP;  An expert sysstem approach to real timesystem debugging.andP;  In IEEE Proceedings of the 1st Conference on A.I.andO;Applications (Denver, Colo., Dec. 5-7, 1984), 336-343.andM;5.andP;  Hailpern, B.T.andP;  Verifying concurrent processes using temporal logic.andO;Lecture Notes in Computer Science, 129, Springer-Verlag, 1982.andM;6.andP;  Helmbold, D., and Luckham, D. TSL: Task sequencing language.andP;  InProceedings of the ADA International Conference (Paris, France, 1985).andM;7.andP;  Lamport, L. Time, clocks, and the ordering of events in a distributedsysstem.andP;  commun.andP;  ACM 21, 7 (July 1978), 558-565.andM;8.andP;  LeDoux, C.H.andP;  A knowledge-based system for debugging concurrent software,Ph.andP;  D. dissertation.andP;  University of California, Los Angeles, March 1986.andM;9.andP;  Moszkowski, B.C.andP;  Executing Temporal Logic Programs.andP;  CambridgeUniversity Press, 1986.andM;10.andP;  Pnueli, A.andP;  The temporal semantics of concurrent programs, Semantics ofConcurrent Computation.andP;  G. Kahn, Ed., Lecture Notes in Computer Science 70,Springer-Verlag, 1979.andM;11.andP;  Schwartz, R.L., and Melliar-Smith, P.M.andP;  An Interval Logic forHigh-Level Temporal Reasoning.andP;  In Proceedings of the 2nd Annual ACMSymposium on Principles of Distributed Computing (Montreal, Canada, August17-19, 1983), pp.andP;  173-186.andM;CR Categories and Subject Descriptors: D.2.5 [Software Engineering]: Testingand Debugging--debugging aids, tracing; D.3.3 [Programming Languages];Language Constructs--concurrent programming structures; D.4.7 [OperatingSystems]: Organization and Design--distributed systems; I.2.4 [ArtificialIntelligence]: Knowledge Representation Formalism and Methods--prediatelogic, representation languagesandM;General Terms: Design, LanguagesandM;Additional Key Words and Phrases: Hierarchical structure, logicandM;WAN-HONG S. CHENG is a member of the technical staff at ATandamp;T BellLaboratories.andP;  He has been involved in network design and development.andP;  Hiscurrent research interests include data communications, computer networking,and distributed systems.andP;  Author's Present Address: ATandamp;T Bell Laboratories,RM 1E-424; Crawfords Corner Road, Holmdel, NJ 07733.andM;VIRVIL E. WALLENTINE is a professor and department head of the Department ofComputing and Information Sciences at Kansas State University.andP;  His researchinterests include operating systems, distributed systems, computer networks,and concurrent programming languages.andP;  Authors' Present Address: Departmentof Computing and Information Sciences, Kansas State University, Manhattan, KS66506.andO;</TEXT></DOC>