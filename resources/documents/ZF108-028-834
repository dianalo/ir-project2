<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-028-834  </DOCNO><DOCID>08 028 834.andM;</DOCID><JOURNAL>PC Week  Jan 8 1990 v6 n1 p38(1)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1990.andM;</JOURNAL><TITLE>There won't be time to reinvent the wheel in the 1990s. (softwareof the future)(Cast in Code) (column)</TITLE><AUTHOR>Coffee, Peter.andM;</AUTHOR><SUMMARY>As the foundation of society in the 1990s changes from competitionto cooperation, new software will be needed to support new ways ofworking.andP;  The problem will not be to improve or automate existingtechniques; it will be to invent new tools to build and maintain acomplex world.andP;  The problems of today, such as acid rain, cannotbe solved separately or competitively.andP;  A new model is needed forsoftware that can help bridge the gaps between different views andinterests.andP;  Hypertext is one model that enables people to takefull advantage of earlier work.andP;  Similar changes will affectsoftware development.andP;  Computer-aided software engineering (CASE)tools will need similarity algorithms and hypertext links tosearch code libraries for modules that can be refined to meet newneeds.andM;</SUMMARY><DESCRIPT>Topic:     OutlookSoftwareFuture of ComputingNew TechniqueUser NeedsSocial Issues.andM;</DESCRIPT><TEXT>Don't look now, but we've left our analogies behind.andP;  In the '90s, we'll needsoftware support for things that we have never done before.andP;  We won't beautomating existing techniques; we'll be inventing new tools to build andmaintain a more complicated world.andP;  We'll be making our first attempts insoftware, because there's no other way that these things can be done.andM;We won't be doing this merely out of boredom.andP;  We'll do it because it's goingto be essential.andP;  The foundation of our economy is going to change fromcompetition for comparative advantage to cooperation in the development ofnew knowledge.andP;  We'll need new tools to support new ways of work.andM;You can't forecast this kind of change by looking in the rearview mirror.andO;There's more to life than future upgrades of OS/2, 1-2-3 and Clipper.andP;  Weneed to look to the '90s for something more than Release 6.0 of the answersfrom the '80s.andM;Look at the differences between the problems (and the solutions) of the pastvs.andP;  those of the future.andP;  Centuries ago, the central problem was simple:people vs.andP;  nature.andP;  Solutions, for the most part, couldn't be shared.andP;  Ifyou found a spot with good hunting for one, or even for two, you couldn'ttell all your friends.andP;  Success was for individuals and families; the prizewas survival, decided by chance.andM;Decades ago, the problem had changed to become one of people vs.andP;  the limitsof technology.andP;  When people found solutions, they could share them throughsystems of patents and trademarks.andP;  Of course, you also had the choice oflooking for an entirely different approach.andP;  If you wasted your time, it wasno skin off anyone's nose but yours.andP;  Success was for companies or nations;the prize was commercial success, decided by competition.andM;The problems we face today, however, can no longer be solved separately orcompetitively, because they can't be solved one piece at a time.andP;  The acidrain problem can't be fixed in Canada unless the United States gets its acttogether.andP;  Cocaine in Los Angeles can't be eliminated unless we find otherwork for the farmers of South America.andP;  To borrow Ted Nelson's phrase,&quot;Everything is deeply intertwingled.&quot;andM;To deal with problems of this kind, we need to move beyond a model ofsoftware as the knowledge worker's version of the frontiersman's rifle.andP;  Weneed bridges that can cross the gaps between different views and interests.andM;On the FrontierandM;There are no paper-based models for the things we need -- nothing like theVictorian ledgers that presaged the spreadsheet, the Roman payroll recordsthat presaged the database, the stone tablets that presaged word processing.andM;We'll be looking at early versions of one such tool in next week's SoftwareReview, a comparison of hypertext products for the Apple Macintosh.andO;Hypertext has gotten confused, I fear, with hypermedia, which merely gives usnew ways to say the things we already know.andM;The software model of hypertext, combined with the enabling hardware ofnetworks, has a more ambitious goal.andP;  This combination will let peopledevelop new ideas in a way that takes full advantage of earlier work.andM;Today, if you read something that sparks a new idea, all you can find in thefootnotes is some hint of where that author began.andP;  You can't find out whatanyone else has done with the thoughts you're reading.andP;  With networkedhypertexts, however, you'll click your mouse on a paragraph and immediatelysee who else has used it as a reference in other, more recent works.andM;This change will affect software developers as well.andP;  If object techniquesproduce a wave of semantically complete, highly reusable objects, CASE toolswill need hypertext links and similarity algorithms to comb through thelibraries of code, suggesting modules that might be refined (throughinheritance and specialization) to meet new needs.andM;The alternative is continued reinvention of the wheel and continuedinterference between incompatible solutions.andP;  In the '90s, I don't thinkwe'll have that kind of time to waste.andO;</TEXT></DOC>