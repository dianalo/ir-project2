<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-311-878  </DOCNO><DOCID>08 311 878.andM;</DOCID><JOURNAL>Computer Language  April 1990 v7 n4 p34(5)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>Smalltalk as a programming environment. (contains a relatedarticle on Smalltalk objects)</TITLE><AUTHOR>Suydam, Bill.andM;</AUTHOR><SUMMARY>Smalltalk, the granddaddy of object-oriented programminglanguages, is as current a development environment as the latest Cwindowing routines and as helpful as any add-on source-leveldebugger.andP;  It is ideal for generating applications, although ittakes some adjustment to shift from procedural to object-orientedprogramming.andP;  Smalltalk's environment is a system of interactingobjects that are instances or embodiments of classes.andP;  The useraccesses these classes and objects and their definitions.andP;  Theyare the source code for the system, and the starting point inprogram development.andP;  Procedures for using Smalltalk in programdevelopment are discussed.andM;</SUMMARY><DESCRIPT>Product:   Smalltalk (Computer program language) (usage).andO;Topic:     Program Development TechniquesObject-Oriented ProgrammingTutorial.andM;</DESCRIPT><TEXT>Smalltalk as a Programming Environment Although it is the granddaddy ofobject-oriented programming languages, Smalltalk provides a developmentenvironment that is as up-to-date as the latest library of C windowingroutines and as complete and helpful as any add-on source-level debugger.andO;Once you've made the shift in thinking from procedural to object-orientedprogramming, the Smalltalk environment is ideal for generating applications.andO;Of course, using Smalltalk may be bewildering at first, but the change isworth the effort.andM;My experience is with Digitalk Inc.'s Smalltalk/V and Smalltalk/V286.andO;SMalltalk/V286 requires an 80286 or more powerful machine with 1MB or more ofRAM.andP;  The package uses extended memory, and, as a practical matter, Irecommend at least 2MB (preferably 4MB) of RAM for serious applicationdevelopment.andP;  A macintosh version of Digitalk Smalltalk is available, as wellas Smalltalk/V PM for the OS/2 Presentation Manager.andM;Unlike the others, Smalltalk/V PM generates fully compiled code.andP;  It presentsan excelelnt entree for developers wishing to produce applications for thecomplex OS/2 Presentation Manager environment.andM;Developing in SmalltalkandM;Typically, programmers working in Smalltalk do not proceed by loading a texteditor and writing code.andP;  Although Smalltalk permits this method of coding aswould any other language, such a procedure wastes Smalltalk's resources.andP;  TheSmalltalk environment is composed of interacting objects that are instancesor embodiments of classes.andM;The user has access to these classes and objects and their definitions.andP;  Theyare the source code on which the system is based and the starting point forall future development.andP;  Therefore, programming in Smalltalk typicallyproceeds by expanding the environment, not by generating a separate body ofsource code that uses a fixed number of language functions.andM;Smalltalk does have a set of language primitives on which the environment isbuilt, but the relationship between the language and the environment iscloser in Smalltalk than in most languages.andP;  With Smalltalk/V286, you testthe code by running it directly from within the development environmentrather than compiling it separately (as in most languages), then running thecompiled object code under the control of the operating system.andM;Programming toolsandM;The borrower and inspector are essential to the Smalltalk environment.andP;  Theclass Inspector has subclasses DictionaryInspector and Debugger.andP;  Typicalbrowser classes are ClassBrowser and ClassHierarchyBrowser.andP;  The latter hasthe subclass ApplicationBrowser (an additional subclass not included with thebasic Smalltalk/V system).andP;  Browsers and inspectors let users browsecollections of related objects or inspect the instance variables of specificobjects with the option of adding, changing, or removing objects or instancevariable values.andP;  For example, ClassHierachyBrowser, perhaps the most basicand widely used software development tool within the Smalltalk system, letsusers browse the entire Smalltalk class hierarchy.andP;  UsingClassHierarchyBrowser, the user can view a hierarchical list of all theclasses in the system in one list pane of the window.andP;  Using that pane andits associated menu, users can add or remove classes and subclasses.andP;  Listpanes allow simultaneous selection and highlighting of one item in the listthey display.andP;  When a class is selected in the ClassHierarchyBrowser listpane, a text pane of the window displays that class's definition, whichincludes lists of the class and instance variables to which objects of theclass have access.andP;  Thus, in the text pane, instance variables can be addedto or removed from a class by altering the class definition.andP;  When the textmaking up the class definition is saved, the new class definition iscompiled.andM;Yet another ClassHierarchyBrowser pane simultaneously lists all the methodsassociated with the selected class.andP;  (Methods are the instructions, similarto procedures, that objects of a given class understand and that determinetheir behavior.)andP;  The methods pane menu lets users add and remove methods.andO;When a method is selected, its definition replaces the class definition inthe text pane.andP;  This definition can also be altered and saved.andP;  Additionaloptions on the list pane menus permit filing class and method definitions todisk or printing them.andP;  Users can also locate other classes that either sendor implement the same method selector.andM;You will likely add your own browser types as you add new classes of objectsto the system.andP;  For example, a class Phonebook would probably merit buildinga PhonebookBrowser, though in the meantime you would probably do yourdebugging and inspecting using the existing classes of inspectors.andP;  Anyobjects understands a message of the form Phonebook inspect, which opens aninspector on the class Phonebook.andP;  If a phone book has been created with themessage PhoneBook := Phonebook nes, the message PhoneBook inspect opens aninspector on that instance of Phonebook.andP;  The inspector simply display theproperties of the class, such as its superclass, its subclasses, and thenames of its instance variables.andM;Inspectors that have been built for specific classes, however, reveal moreabout that class's objects.andP;  A DictionaryInspector, for example, contains alist pane showing the dictionary's keys and a text pane displaying thecontent or value stored at the selected key.andP;  The user can add, remove, orinspect keys in the list pane and use the text pane to view or change theircorresponding values.andM;Debugging is easierandM;The Smalltalk/V286 debugger pops us to show the user a list of the Smalltalkstatements leading up to a certain event: a coding error detected at runtime, a breakpoint set by the programmer, or an interrupt generated by theControl-Break key combination.andP;  When the user selects a statement in thedebugger window, the corresponding source code for the method used in thatstatement is displayed in a text pane.andM;The user can thus view and alter either the source code, the contents of anyobject's instance variables, or the local variables of the selected method,all of which are accessible through panes in the debugger window.andP;  A user whohas set a breakpoint can resume execution after viewing or changing thecontents of variables.andP;  If the debugger window was opened as the result of acoding error, the offending set of messages can be restarted.andP;  Breakpointsare also set and removed using the debugger window.andP;  What's more, the usercan single-step through source code using the debugger window.andM;The debugger alone makes SmallTalk/V286 a superior development environmentfor the average language compiler, but the the language's design and the wayits environment is derived ultimately account for Smalltalk's superiority.andO;The fact that the language is built on a simple paradigm--sending a messageto an object--imparts a beautiful simplicity to its underlying operation.andO;New objects are created by sending messages to existing objects.andP;  Coding inSmalltalk therefore consists of building objects and defining their behavior.andO;Some system changes are accomplished simply by refining the behavior ofexisting objects, while others require building new classes or related setsof classes and defining their behavior.andM;Software reuseandM;You never need to start from scratch since you can always reuse existingclasses and objects and their methods.andP;  If you define a phone book, forexample, you will likely do most of your work using subclasses of the classCollection, which includes classes Array, Set, Bag, and Dictionary.andO;Depending on the level of sophistication you want the completed phone book tohave, you might define it as a subclass of Dictionary and add new methods tostore and retrieve names and phone numbers.andP;  Or you might construct a newclass that combines bags, arrays, and dictionaries to support multiple phonelists searchable by first and last names.andP;  You might create a companion classPhonebookBrowser that uses the existing pane classes to open a window formanipulating phone book objects.andM;Conceptually, then, you look for properties in the new objects you want tocreate that can be derived from existing classes.andP;  You then combine existingclasses in creating new objects and may refine existing classes by extendingtheir abilities through new methods.andP;  You might add a new method to the classDate, for example, so it returns a string representing a date in a specificformat, say 900421 for April 21, 1990.andP;  You can subsequently convert any dateto a string of the desired format by sending it a message telling it toexecute the appropriate method.andM;Remembering objectsandM;Objects and their properties are easier to remember than the functions andprocedures of a conventional language.andP;  Furthermore, the object-messageformat permits a natural grouping of related messages that is easier tograsp.andP;  Objects sent the message printOn: Transcript, for example, willrespond appropriately.andP;  An array will print itself on the system Transcript,just as a string will.andP;  Each uses the printOn: method implemented for it, butboth understand the message printOn: are spared from remembering functionnames like printString and printArray.andP;  Perhaps more important, a certainuseful abstraction is gained by defining a set of messages to which manyclasses of objects will respond.andM;These properties of the Smalltalk language embody many modern precepts ofsoftware engineering beautifully.andP;  The terms &quot;information hiding&quot; and&quot;encapsulation&quot; refer to the ability to control access to an object's dataand hide the implementation of a procedure or method understood by an objectwhile still making that procedure or method available to the user for viewingor manipulating the data.andP;  Thus, we can define a Phonebook class thatresponds to messages like storePhoneNumberFor: 'BillSuydam' andretrievePhoneNumberFor: 'Bill Suydam' and change the correspondingimplementation at any time without the user's being aware of thosechanges--whether that user is a person or another object in the system.andP;  Sucha methodology corresponds to the real world, where anyone can pick up a phonebook and locate a person's phone number by following a prescribed set ofprocedures without worrying about which telephone company printed the phonebook or how it was compiled.andM;Even more important within the context of software development is the factthat a user within a system may be another object.andP;  If your Datebook objectautomatically lists the phone number of any person listed within the datebook, it can access the phone book directly using a prescribed set of methodselectors whether or not you have changed the actual phone bookimplementation in the weeks or months since the datebook was constructed.andO;This ability to prescribe software behavior by defining classes of objectsand their method selectors is essential for developing large softwaresystems.andM;The potential for abstraction in a system of objects derived from classesalso fits well with modern software engineering techniques.andP;  One way to speedsoftware development is to permit the construction of generic code that canbe used to create software objects intended for a specific task.andP;  A databasegenerator is one likely application realm.andP;  Object-oriented programming isideally suited to such a software development methodology since classesprovide the generic structure for objects, which are the final usableimplementation.andP;  Thus, you can easily construct and use a dictionary bysending the appropriate messages to the class Dictionary.andM;An object-oriented programming system's power is enhanced by the ability touse the system within an environment composed of objects that can beinspected and changed from within the environment itself.andP;  This is notprogramming in the conventional sense.andM;Applications to objectsandM;By now you should be more aware of some of the objects within theSmalltalk/V286 system that make it a useful programming environment, but youmay still be somewhat mystified about the coding process.andP;  In conceptualizinga new application to be developed in Smalltalk, you begin by envisioning theclasses or entities that would be necessary for running or, more accurately,accomplishing the application.andP;  Each class requires a set of methods toaccomplish its designated tasks.andP;  The number of classes and methods willdepend greatly on the complexity of the application.andP;  A simplerimplementation will probably require fewer objects than a more complex one.andM;One distinction that will trouble beginners is when an entity to be modeledrequires its own class and when it can be adequately modeled by making it aninstance variable of another class.andP;  Sometimes the best way to model anentity is to make it a separate class and create a corresponding instancevariable in another class.andM;Let's assume we are going to create a phone book application and have thoughtabout the classes we'll need.andP;  We would open an ApplicationBrowser window onthe new application Phonebook.andP;  This can be done by either making selectionsfrom the main system menu or evaluating an appropriate message in any textpane, such as the System Transcript.andP;  The next step is to create the classPhoneBook.andP;  If PhoneBook is a subclass of Dictionary, it automaticallyinherits all the methods and instance variables of Dictionary.andP;  Inheritancesaves you from having to recreate vast amounts of low-level code.andM;By popping up the ApplicationBrowser menu, we elect to add a subclass to theapplication.andP;  When prompted, we answer that the superclass is Dictionary andrespond with the new class name, PhoneBook.andP;  In the same way, we would createthe class PhonebookBrowser, then use the methods list window to create thenew method openOn:.andP;  Methods open and openOn: are traditionally used toinitialize windows.andP;  Which one is used depends on whether the objectreceiving the message will need another object supplied as an argument.andM;When we select new method from the methods menu, a code template appears inthe source-code text pane.andP;  We would define the message syntax by overwritingthe template with the words openOn: aPhonebook.andP;  This shows us that whenusing the method openOn: with an object of class PhonebookBrowser, we wouldsupply the name of the phone book to be examined as an argument.andP;  Now we canwrite the code to implement openOn:.andP;  We would use instances of class Pane todefine the window, supplying the panes with objects such as collections ofnames and phone numbers derived from the phone book's instance variables.andM;Once we save our code by selecting save from the text-pane menu, we are freeto create more classes or methods.andP;  If we get stumped along the way, we canalways open another instance of ClassHierarchyBrowser to examine, say, themethods available to String or Dictionary.andP;  Whenever appropriate, we cansimply copy sections of code from one place to another.andM;Once our PhonebookBrowser is working, we might decide the application isimportant enough to be callable from the main system menu.andP;  In that case, wewould open a browser on the ScreenDispatcher class and modify the system menuto permit a PhoneBookBrowser to be opened.andM;One of the nicest aspects of object-oriented programming in Smalltalk is thatwe can implement the browser early on, before we have even finished codingthe Phonebook class itself.andP;  We can supply dummy instance variables andincomplete methods just to debug a prototype of the PhoneBookBrowser, thentake care of implementing the Phonebook methods that supply the objects thebrowser expects to receive when it sends a given message to the phone book.andM;The trickiest part of developing an application in Smalltalk/V286 ismastering the currently existing windowing model.andP;  An improperly orincompletely coded open or openOn: method will frustrate beginners who havenot yet figured out what the different aspects of the model are supposed todo.andP;  This problem usually arises when you adapt an openOn: method from anexisting application.andP;  Once you've begun to modify the window structure, itno longer works as it did in the old application.andP;  Until the conversion iscomplete, it will not function as it is supposed to in the new applicationeither.andM;To alleviate this problem, Digitalk will supply a set of windowing classes inupgrades to replace the current application model used for its system'swindows.andM;Bill Suydam is a Smalltalk programmer who writes frequently on softwareengineering topics.andO;</TEXT></DOC>