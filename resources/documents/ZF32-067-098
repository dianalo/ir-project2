<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-067-098 </DOCNO><DOCID>11 276 217</DOCID><JOURNAL>Communications of the ACM  Sept 1991 v34 n9 p58(2)* Full Text COPYRIGHT Association for Computing Machinery 1991.andM;</JOURNAL><TITLE>CLIM: the Common Lisp Interface Manager. (constructing portableuser interfaces) (Special Section - LISP) (technical)</TITLE><AUTHOR>McKay, Scott.andM;</AUTHOR><SUMMARY>The Common Lisp Interface Manager (CLIM) provides a system forcreating portable user interfaces that link the objects andoperations of an application to the objects of the user interface.andO;CLIM offers such standard facilities as text, graphics, eventmanagement, a geometry model, affine transformations and windowmanagement through the services of X Windows or Microsoft Windows.andO;CLIM's output recording facility supports scrolling transcriptwindows with visual representations of the applications's objects.andO;The interface manager also includes such features as menu, graph,automated table and dialog formatting, which are each layered ontop of output recording.andP;  CLIM features a presentation facilitywhich remembers the output done to a stream, the underlyingapplication object and the presentation type that is associatedwith the output.andP;  Programmers define presentation types usingpresent and accept methods, which describe the appearance ofobjects within the user interface and how application objects areinput.andM;</SUMMARY><DESCRIPT>Product:   Microsoft Windows 3.0 (Graphical user interface) (Computerprograms).andO;Topic:     LISPUser Interface Management SystemsSoftware DesignGraphical user interfaceX windows (Standard)Programming languages.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>The essence of an application is a set of objects and a set of operations onthose objects.andP;  The essence of the behavior of an application's userinterface is similar to Lisp's read-eval-print loop: the user specifies whathe or she wants to do (perhaps via a menu or a dialog or a directmanipulation), the application performs the operation, and then the result ofthat operation is displayed.andP;  The common Lisp Interface Manager (CLIM) is asystem for constructing portable user interfaces in a way that directlyconnects the objects and operations of an application to the objects of itsuser interface.andM;Using CLIM, programmers describe the user interface of an application in ahigh-level language that is independent of any particular window substrate.andO;The language is declarative in nature, in that the programmer indicates hisor her intent and CLIM hides the exact detailes of how the tasks areperformed.andP;  CLIM relieves the programmer from having to program at the levelof handling events, such as mouse motion and button presses (although it ispossible to handle such events directly if necessary).andP;  Lisp uniquelyprovides the ability to create such a high-level language.andP;  Macros andlexical closures are used to implement CLIM's facilities without imposingundue constraints upon the structure of the application code.andM;CLIM provides a number of basic facilities: a geometry model, affinetransformations, text (including multiple fonts), graphics (including asophisticated color inking model), an extended I/O stream model that includesevent management, support for a pointing device (such as a mouse), and windowmanagement.andP;  Rather than directly implementing all of these facilities, CLIMinstead uses the services provided by the native window system, such as XWindows or MicroSoft Windows.andM;Applications written using CLIM are usually structured to include one or morescrolling transcript windows that display a visual representation of theapplication's objects.andP;  CLIM supports transcript windows via an outputrecording facility that automatically remembers all of the output performedupon a stream in a device-independent fashion, thus relieving the applicationprogrammer from the need to perform this task.andP;  Other facilities such asautomated table, graph, menu, and dialog formatting are layered on top ofoutput recording.andP;  CLIM also provides application-building facilities such asa command processor, context-sensitive help and documentation, layout ofapplication frames, and access to the gadgets provided by toolkits such asMotif and OpenLook.andM;A unique and important part of CLIM is the presentation facility (not to beconfused with the Presentation Manager), which remembers not only the outputdone to a stream but also the underlying application object it represents andthe presentation type associated with the Output.andP;  Presentation types are anextension of the Common Lisp Object System (CLOS) that provide parameterizedtypes and a number of generic functions to support interaction with users,such as methods for reading input from or presenting output to the user.andO;Since presentation types are an extension of CLOS classes, one presentationtype may be defined as a subtype of one or more other types in the usual way,sharing the basic characteristics of its supertype(s), while specializingother aspects of its behavior.andP;  A programmer creates a presentation byinvoking the present operator, which takes an application object and apresentation type, produces some output on a specified stream, and associatesthe displayed representation with the object and the presentation type.andM;When building an application in CLIM, the programmer defines presentationtypes for the application objects participating in the user interface bydefining present and accept methods that describe the appearance of theapplication objects in the user interface, and how the application objectsare input.andP;  The programmer also defines commands for the applicationoperations that are accessible from the user interface.andP;  A command isspecified in terms of the presentation types of each of its operands, plus asmall body of code requesting the application to perform the correspondingoperation.andP;  What is not specified in a command is the way in which a userenters the command; commands can be entered via menus, dialogs, commandlines, or direct manipulations.andM;When an application asks CLIM for input of a particular type (using theaccept operator), all presentations in any transcript window whose type isequal to or a subtype of the requested type are eligible as input.andP;  No otherpresentations are eligible.andP;  CLIM highlights eligible objects when the userpoints at them with the mouse.andP;  This context-based selectivity andhighlighting provides feedback to assist the user in determining what userinterface entities are selectable at any point in time.andP;  The coupling ofpresent and accept via presentation types means that all output done by anapplication is available later as input.andM;Another means CLIM provides to make presentations eligible as input is thetranslator.andP;  Translators &quot;coerce&quot; objects having one presentation type intoobjects of another presentation type.andP;  A translator can be thought of as amethod that specializes in the presentation type of one presentation and agesture (such as clicking the left-hand mouse button), and returns an objectof another presentation type, the translated object, as its result.andP;  Sincethe object representing the invocation of command has a presentation type(the command type), translators can be used to provide a mapping fromdisplayed application objects and gestures to commands.andM;As an example, consider a simple electrical computer-aided design (CAD)application.andP;  The basic object type is device, which has subtypes transistorand resistor; these three types have corresponding presentation types.andP;  Thepresentation types for transistors and resistors define present methods thatdraw each device.andP;  There are operations in the application for moving devicesand changing their properties.andP;  The move-device operator applies to alldevices, thus there is a Move Device command on all objects whosepresentation type is device.andP;  The set-resistance operator applies only toresistors, so there is a Set Resistance command only on resistor objects.andO;There is a translator that translates from objects of type device to the MoveDevice command when then user clicks the left button of the mouse on adevice.andP;  If the user waves the mouse over any device while the CADapplication is waiting for a command, CLIM will indicate that the device iseligible as input by highlighting it.andP;  Furthermore, if the programmerincluded a documentation pane in the application, CLIM will displaydocumentation that indicates clicking the left mouse button will perform theMove Device command.andP;  There might also be a menu bar in the application witha Set Resistance button in it; if the user selects that command from the menubar, the only eligible presentations will be resistors, and only they will behighlighted as the user waves the mouse over the application's display pane.andM;There are several advantages to be gained from using presentation typesinstead of the usual event- and gadget-based style of constructing userinterfaces.andP;  First, whereas the event-drven style of interface tends to bewritten in an imperative style, CLIM allows the programmer to use adeclarative style that often better expresses the programmer's intent.andO;Second, because the presentation type system brings the application objectsout to the user interface, the code implementing the user interface can bewritten in a style consistent with the rest of the application, rather thanin a style imposed by the conventions of a particular window substrate.andO;Also, since the presentation type system is based on the inheritancemechanisms already found in CLOS, programmers have a familiar framework fordeclaring the relationships among the application objects and operations.andO;Finally (and possibly most profoundly), since the objects and commands in theuser interface are built directly on the objects and operations in theapplication, user interface consistency becomes a byproduct of theapplication's structure rather than an artifact of graphic design.andP;  Suchconsistency provides a user interface that can be more easily understood bythe end-user of the application since the user interface directly reflectsthe state of the application.andM;SCOTT MCKAY is a consulting member of the technical staff of Symbolics, Inc.andO;His current research interest include advanced software development tools andenvironments, next-generation user interface tools, visual programminglanguages.andP;  Author's Present Address: Symbolics, Inc., 8 New EnglandExecutive Park, Burlington, MA 01803, swm@ riverside.scrc.symbolics.com.andO;</TEXT></DOC>