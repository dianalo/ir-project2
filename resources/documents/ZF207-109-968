<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-109-968  </DOCNO><DOCID>07 109 968.andM;</DOCID><JOURNAL>Datamation  Feb 15 1989 v35 n4 p29(12)* Full Text COPYRIGHT Cahners Publishing Co. 1989.andM;</JOURNAL><TITLE>The virus cure. (software viruses)(includes related article onpreventing re- infection)</TITLE><AUTHOR>McAfee, John.andM;</AUTHOR><SUMMARY>Computer viruses are an increasing and little-understood problembut assistance is available in the form of prevention anddetection programs as well as safe user practices for individualsand groups.andP;  More than 300 major virus attacks affecting over50,000 computers occurred in the first eight months of 1988.andP;  Morethan 30 identified viral strains fall into three generalcategories: boot infectors, system infectors and genericapplication infectors.andP;  They are transmitted via LANs, bulletinboards, and remote links.andP;  Microcomputers are most often infectedby exchange of infected data or programs.andP;  Prevention anddetection programs work by taking advantage of these commoncharacteristics: a viruses can only infect programs, not otherdata; it must change the system, thus leaving a trail; and it mustattach itself to the host program in such a way that it isexecuted.andP;  Prevention software is not a perfect solution but someprograms offer a statistical margin of safety.andP;  Detection programsthat isolate early symptoms are more reliable.andP;  Programs toisolate and eliminate virus from seriously infected systems arealso available.andP;  Several preventive measures in user anduser-group behavior are suggested.andM;</SUMMARY><DESCRIPT>Topic:     Data SecurityData ManagementComputer VirusesUser Behavior.andO;Feature:   illustrationtablecartoon.andO;Caption:   Data on six most common viruses includes damage, precautions,recovery. (table)andM;</DESCRIPT><TEXT>THE VIRUS CUREandM;In the summer of 1977, Thomas J. Ryan wrote and published a book that becamean instant cult classic for computer hackers and technophiles.andP;  TheAdolescence of P-1 chronicled the fictional development of the world's firstvirus--a program that moved from computer to computer, taking control of theoperating systems of 7,000 computers.andM;When this book first appeared, it was regarded as good science fiction.andP;  Amere 11 years later, a Cornell graduate student turned the experience intoreality when he developed a program that ran amok: it jumped into the world'slargest computer network and began taking control of the connected machines.andO;The program was designed to both hide itself (fortunately the design had abug) and defend itself against removal.andP;  It could also adapt to at least tworadically different computer architectures.andP;  It spread like wildfire.andP;  Thenumber of systems infected?andP;  6,200.andM;Although Ryan did not apply the name &quot;virus&quot; to the subject of his book(Xerox developers in Rochester, N.Y., had been doing virus research for fiveyears, but this use of the word was largely unknown to the general public),he anticipated the current state of affairs with accuracy.andM;Viruses have become a cold, harsh reality for a growing number of businesses,government agencies, and universities.andP;  The first seven months of 1988produced over 300 mjaor virus attacks, involving over 50,000 computers.andP;  Mostwere of unknown origin.andP;  Many involved substantial time and resources forremoval, clean up, and restoration.andP;  Each was a surprise to the infectedorganizations.andM;The sudden appearance of the virus threat has caused vast amounts ofmisinformation and confusion to be generated.andP;  Standard terminology is inshort supply.andP;  Prevention measures are incomplete and often conflicting.andO;Recovery procedures are mostly seat-of-the-pants affairs.andP;  People areconfused about what viruses are and how they spread, and snake-oil salesmenabound.andM;The confusion is not improved by conflicting opinions about the future ofviruses.andP;  Some contend that it's a passing fancy that will take care ofitself.andP;  Others feel we have seen only the tip of the iceberg.andM;Much of the confusion stems from limited and incomplete information.andP;  Manypeople have never seen a virus in action and are speculating about theeffects and potential damage.andP;  Others have seen perhaps one or two examplesof viruses, and extrapolate to the larger world of viruses from these smallexperiences.andP;  Even companies that fall prey to widespread infection,experiencing firsthand the devastating effects of viruses, often areunwilling to share their experiences with the public, or to provide guidenceand counsel to other companies hit with similar infections.andP;  Less than 10% ofthe 300-plus organizations attacked by viruses this year were willing topublicly discuss their infections.andM;There is a general, and possibly warranted, feeling that a publicized virusinfection will carry a social or commercial stigma that will harm a firm'simage and marketing goals.andP;  Questions of lax security, disgruntled employees,damage to the organization, and impact on the company's products inevitablyarise.andP;  The more a company's product use software as integrated components,the more this feeling prevails.andP;  Earlier this year, one large aerospacemanufacturer threatened to sue a virus consultant who inadvertently slippednews of an infection to the press.andM;In spite of this clock-and-dagger environment, researchers have been able toidentify over 30 different strains of viruses with widely diverse propagationmechanisms and destructive effects (see &quot;The Six Most Common ComputerViruses&quot;).andP;  Each of the strains has multiple varieties--a result of hackers'laziness: it is easier to modify someone else's virus than to build one's ownfrom scratch.andP;  One Macintosh virus--nVIR--has over two dozen differentvarieties.andP;  As a result, hundreds of essentially different viruses arethreading their way from system to system around the world.andM;What Are Computer Viruses?andM;Computer viruses are segments of self-replicating code that attach themselvesto application programs or other executable system components.andP;  They attachthemselves in a manner that allows them to gain control during some phase ofthe host's execution.andP;  Viruses can attach not only to boot sectors, operatingsystem modules, and device drivers, but any application, such as a wordprocessor, spreadsheet, or database system, is vulnerable.andM;Most viruses leave no external signs of their presence after infection.andP;  Theyinfect the host in a manner that leaves the host functions unchanged.andP;  Aninfected program may operate normally for months, or even years, withoutgiving any signs of the infection.andP;  During this time the virus quietlyreplicates onto other programs within the system, and onto floppies insertedinto the computer.andM;After an indeterminate replication period, the virus activates.andP;  Thisinvolves some type of overt system disturbance.andP;  It may be as innocuous asthe display of a message or some unusual graphics, or it may involve partialor total destruction of stored data.andP;  The particular manifestation is basedon an internal algorithm, which may be determined by the length of time thevirus has been in the system, or by the number of programs or floppydiskettes already infected by the virus.andP;  Some viruses activate based on thenumber of times the infected host program has been executed.andP;  Others activateon a given day and time, such as noon on any Friday the 13th.andP;  Regardless ofthe algorithm used, activation usually means bad news.andM;Viruses can be grouped into three categories: boot infectors, systeminfectors, and generic application infectors.andM;Boot infectors attach themselves to the boot sectors of floppies and harddisks.andP;  They gain control of the system when it is initially booted andremain in control at all times.andP;  they monitor all system activity by trappingsoftware interupts, and watch for the insertion of new floppies into thedrives.andP;  When a diskette is inserted and accessed for the first time, thevirus transfers itself to sector 0 of the floppy, then it infects the nextsystem booted from the floppy.andP;  Booting from an infected floppy is the onlyway this group of viruses can infect a new machine.andM;System infectors attach themselves to at least one operating system module orsystem device driver.andP;  They can infect command interpreters, system I/Oroutines, or special-purpose drivers for attached hardware.andP;  They gaincontrol after system boot--during operating system initialization--and stayactive in the system at all times.andP;  They watch for the insertion of systemdiskettes into one of the floppy drives.andP;  When this occurs, the virusreplicates onto the system files.andM;Generic application infectors are able to infect any application program.andO;They gain control when an infected application is executed, and they scan thesystem looking for additional hosts on hard disks and floppies.andP;  When found,they attach to the new hosts.andP;  After the virus scans and infects, itgenerally passes control back to the application program.andP;  Genericapplication infectors are the most widespread of all viruses.andM;Viruses have been transmitted across local area networks, through access tobulletin boards, and through a number of remote computer-to-computercommunication links.andP;  In the personal computer arena, however, theoverwhelming majority of infections occur because of program or data sharingthrough infected diskettes.andM;Boot infector viruses, for example, can infect in no other way.andP;  They requirethat a diskette be the transfer medium from machine to machine.andP;  Systeminfectors also prefer diskette transfer, and they wait for system diskettesto be inserted into an infected machine to continue the replication process.andM;Diskette sharing and transfer are widespread practices among personalcomputer users.andP;  Even in large corporate environments we frequently find PCusers sharing machines and resources.andP;  A machine with the only high-qualitylaser printer in the department, for example, may frequently be borrowed byother users in the department.andP;  These users will typically bring their wndiskettes with files to be printed.andP;  If a diskette happens to be infected,then the machine with the laser printer becomes infected, and thereafter,every user will take away an infected diskette.andP;  The virus thus spreadsrapidly throughout the department.andM;What mechanisms do viruses use to attach themselves to other programs?andO;Viruses infect in one of two ways: they attach to an existing piece of code,or they entirely replace a piece of code.andP;  Certain boot-sector viruses usethe latter approach.andP;  They replace the entire boot sector with a copy ofthemselves.andP;  In effect, they become the new system boot program.andP;  Mostviruses, however, choose to attach themselves to an existing program.andP;  Thisapproach alleviates the problem of the virus having to duplicate thefunctions of the program it replaces.andM;How Viruses Are SpreadandM;A virus attaches to a program either by binding itself externally to theprogram or by implanting itself inside the program.andP;  If it attachesexternally, then the program size usually changes, and the virus risksdetection from a visual inspection of directory listings or other externalobservations of the program.andP;  If the virus chooses to insert itself withinits host, then it must find hosts with enough internal free space to hold thevirus.andP;  Most programs do not have sufficient free space.andP;  Thus the virus hasa more limited number of receptive hosts and will spread more slowly.andM;Evidence suggests that virus designers have weighed the above considerationsand opted for external attachment.andP;  These viruses attach by replacing theinitial instructions of the host program with new instructions that branch tothe main body of virus code.andP;  This code is usually tacked on to the end ofthe host application.andP;  After execution of the virus, the original programinstructions are restored and control is passed to the host.andM;There are ways to limit exposure to virus infection.andP;  Risk reduction can bedivided into two areas: antiviral tools and safe user practices.andM;Many virus infections can be easily prevented with the appropriate tools.andP;  Anumber of software products are available that provide varying degrees ofprotection, and should be considered as valid tools in antiviral efforts.andM;Antiviral ProgramsandM;Each class of virus uses a different mechanism for infection, and eachindividual strain uses its own unique methods for activating and corruptingthe system's data.andP;  A cursory review of a number of disassembled viruseswould lead one to believe that no technique could possibly catch all existingviruses, let alone new ones not yet sampled.andP;  This assumption, however, wouldbe wrong.andP;  The situation is neither as hopeless nor as complex as it firstappears.andM;To understand how viruses can be effectively neutralized, we must firstappreciate some fundamental limitations of viruses--their weak points.andP;  Also,we need to extract features that are common to all viruses and turn theseuniversal features to advantage.andP;  This may seem rather daunting, but in factit has already been accomplished, and the results have been embodiedsuccessfully in a number of antiviral products.andM;The first and most important limitation that all viruses posses is that theirhost targets must be executable segments of the computer system.andP;  That meansthey can only infect other programs, whether boot segment programs, operatingsystem elements, or application.andP;  They cannot effectively infect data files,spreadsheets, tabular information, or any raw data elements within thesystem.andP;  This may seem like small comfort, but in fact, as will shortly bedemonstrated, it is a limitation that can be used to great advantage in thewar against viruses.andM;The second limitation is that any infection, no matter how sophisticated,must change the infected segment of the system in some fashion.andP;  The viruseither entirely replaces a segment of the system or it modifies the existingsegment.andP;  If it attaches to an existing program, then it changes thebeginning, the end, or some part of the middle of the program.andP;  If it hidesin vacant areas of the disk, then those areas suddently become no longervacant, and are modified.andP;  If the virus stores the original boot sector insome unobtrusive place, then the move itself changes the system.andP;  The rule isthis: any infection leaves some residual trace.andM;The third weakness is that if the virus is to live and multiply, then itsprogram code must be run, or executed, at some point.andP;  That is, the virusmust place itself in a position to get control of the computer at least oncesafter the initial infection--otherwise the virus will never be able toreplicate or activate.andM;This implies that the virus connot just attach itself to programs at random.andO;It must know something about the general structure of host programs andattach itself so that it executes whenever the host program is executed.andO;This need to position itself (or at least parts of itself) in specific areasof the host program is a limitation that can also be used to advantage byantiviral systems.andM;In sum, viruses must infect specific types of data (programs), they mustposition themselves (at least partially) in limited and specific areas of theprograms, and the act of infection invariably causes some change in thesystem.andP;  These points may not sound like much to go on, but when they areviewed in the context of the average computing environment, a great deal canbe made of them.andM;A description of how the various types of antiviral systems take advantage,each in their own way, of one or more of the above weaknesses, will explainhow these three points can be leveraged.andM;Three Types of Antiviral ProgramsandM;There are almost as many approaches to developing antiviral software as thereare types of viruses.andP;  On analysis, however, the antiviral programs fallnaturally into three different categories:andM;* Infection prevention products.andP;  These products stop generic viralreplication processes and they prevent viruses from initially infecting thesystem.andP;  They are usually not specific to individual viruses, but protectagainst all classes of viruses.andM;* Infection detection products.andP;  These products detect an infection soonafter the infection has occurred.andP;  They generally identify the specific areaof the system that has become infected.andP;  Like infection prevention products,they identify generic infections rather than individual viruses.andM;* Infection identification products.andP;  These products identify specific viralstrains on systems that are already infected, and usually remove thevirus--returning the system to its state prior to infection.andM;Infection prevention programs remain resident in a computer's memory at alltimes.andP;  They monitor all system activity, watching for characteristic signsof viral replication.andP;  These programs filter the file accesses (reads andwrites) attempted by other programs.andP;  They monitor the programs that loadinto and out of memory.andP;  They check all requests for operating systemservices.andP;  They keep watch over system tables and system control structures.andO;Virtually evey aspect of the system's activities is monitored and checked asit occurs.andM;These antiviral programs all wait for the same event: an indication that avirus is attempting to infiltrate the system, which nearly always isindicated by an attempted access to one of the executable programs in thecomputer--the boot segment, the operating system, or an application program.andO;When such an access is attempted, the program freezes the system (before thevirus can complete replication) and flashes a warning message to the systemuser.andP;  The virus can then be harmlessly removed.andM;How, though, does the antiviral program distinguish between a virus trying toaccess a program and any other harmless function trying to do the same thing?andO;How is the virus's access different from that of a word processor or adatabase program?andP;  The answer is that in the normal course of events a wordprocessor would never attempt to access or write to another program.andP;  Neitherwould a database system, nor a spreadsheet program, nor a graphics package.andO;In fact, normal modifications of, or accesses to, executable segments of acomputer are extremely rare.andP;  Such accesses would take place only if theprogram in question were being replaced by a newer version, or was beinginitially loaded into the computer.andM;At least this is the theory.andP;  In practice, however, there are a number ofnormal computer system functions that can cause these types of antiviralprograms to believe that a virus is present.andP;  When this occurs, a false alarmis sounded.andP;  One measure of the quality of such programs is the frequency offalse alarms.andP;  Well-designed, sophisticated programs will present few.andO;Poorly designed programs may cause so many that the program becomes useless.andM;Prevention programs can also be fooled by the viruses themselves.andP;  Someviruses use infection mechanisms that are specifically designed to avoid thiskind of detection.andP;  Such viruses use access techniques that are difficult tomonitor or prevent.andP;  These techniques involve writing directly to thehardware that controls the storage devices, or using I/O calls that bypassthe antiviral checking function.andP;  These viruses are more difficult andtime-consuming to implement but they can be, and are being, created.andM;A final weakness of prevention programs is that they cannot keep boot segmentinfections from occurring.andP;  This is because boot segment infections occur asthe system is powered up or rebooted.andP;  At that point, the infectionprevention program has not yet been loaded, and is therefore powerless.andP;  Thisis fundamental architectural drawback of this class of protection device, andtechnical advances are not likely to overcome this limitation.andM;Infection Detection ProgramsandM;In spite of the above three problem areas, infection prevention programs canprovide a statistical margin of safety for the average computer user.andP;  It maybe better to catch and prevent, say, 80% of all infections than not to catchany at all.andM;Infection detection programs work on the principle that virus infections canbe detected after they occur by locating the infection traces.andP;  These tracesare the modifications or changes in the system made by the viruses during theinfection process.andP;  These programs are generally more reliable than infectionprevention programs, and they are effective against all classes of viruses.andM;Infection detection programs work in one of two ways: through vaccination orthrough a snapshot technique.andM;Vaccination works by modifying the programs in the computer to include aself-test mechanism within each program.andP;  The test mechanism uses a checksumor other mathematical or algorithmic technique to determine if the sequenceof instructions within the program has been altered.andP;  This self-test executeseach time the program runs, and it checks the program to see if any changeshave been made since the last time the program was executed.andP;  If the programis in any way different, a virus infection is assumed, and a warning to theuser is displayed.andM;Vaccination has a number of major drawbacks.andP;  The most important is that manycritical programs in the computer, including the boot segment, aredifficult--often impossible--to effectively vaccinate.andP;  Remember that bootsegment viruses generally replace the boot segment in its entirely.andO;Consequently, the vaccinated boot sector never gets a chance to execute afterthe infection, and therefore can never alert the user.andP;  Even if it could beexecuted, the self-test would not identify problems, since the virus onlymoved the boot segment and did not otherwise change it.andM;The second problem with vaccination is that no matter how effective theself-test algorithm may be, a virus that infects a vaccinated programinvariably gains control before the self-test mechanism executes.andP;  From thisvantage point, the virus can still replicate, posssibly activate, and even(with sophisticated viruses) disable the self-test mechanism before it canexecute.andM;Despite these drawbacks, the vaccination from of viral detection products canstill provide a degree of protection.andP;  As with infection prevention products,it is better to partially protect than not to protect at all.andM;Perhaps the most effective form of protection available today is provided byinfection detection products that use an efficient snapshot techniques.andO;Snapshot programs work by logging all critical information in the system atthe time of initial installation.andP;  Thereafter, a check routine isperiodically run to compare the current state of the system with the originalsnapshot.andP;  If traces of infection are detected, the affected area of thecomputer is identified and the user is notified.andM;Snapshot programs have the advantage that all parts of the system can bechecked, cross-checked, and compared at the same time.andP;  Because of this, bootsector infections, operating system viruses, and generic viruses can all bedetected.andP;  A second advantage is that the snapshot file and the compareprogram can be kept off-line, that is, outside of the computer; inviolable.andM;Snapshot techniques have been very successful in identifying virus infectionssoon after they occur.andP;  One possible drawback with some of these programs,however, is that the verification techniques (checksums or other mathalgorithms) can take a considerable time to check an entire system.andP;  Somenewer products do employ innovative techniques to speed up this process.andP;  Afew products, for example, use a technique called &quot;branch address maps&quot; tocheck executable programs for traces of infection.andP;  Such products are able toverify entire computer systems with hundreds of programs, including the bootsegment and all operating system files, in a matter of seconds.andM;The check routines used by snapshot programs can be run at any time to see ifa virus has invaded the computer.andP;  Most program however, also provide anautomatic check function.andP;  This function is executed periodically, forexample, each time the computer is turned on or rebooted.andP;  If an infection isidentified, these snapshot programs will zero in on the specific program orarea of the system that has been invaded.andP;  Removal is usually astraightforward process for most viruses if identified early enough, and theprocess is normally documented in the product's manual.andM;These products are, to date, the most effective in providing protectionagainst infections.andP;  They do have one drawback, however.andP;  There is a smallrisk that the virus will activate before the detection program can be run tocheck for it.andP;  For example, you may get infected the morning of Friday the13th by a virus that activates on Friday the 13th.andP;  In this case, the checkprogram would not be executed until the next time you reboot or power thecomputer on--probably the following day.andP;  In the interim, the virus wouldhave activated and wreaked its havoc.andP;  The probability of such occurrences,however, is low.andM;Infection Identification ProgramsandM;What if your system is already infected, and the virus has spread to everyconceivable part of the computer?andP;  What if it has even begun to activate,destroying a good part of your data and infecting all 200 of your floppydisks?andP;  It's a little too late for prevention, and detection is all tooobvious.andM;When this happens, the third category of antiviral products comes into play.andO;These products seek out specific strains of viruses in every corner of yoursystem.andP;  When they find them, they deactivate them or completely remove them.andM;These products work by looking for specific characteristics of individualviral strains.andP;  They may scan the system for a particular segment of viruscode, or look for virus labels or copyright flags.andP;  They may look forspecific system interrupt modifications that are unique to the virus, or forspecific file names or key data in fixed disk addresses.andP;  When any of theseflags are found, the virus is tracked down and eradicated.andM;On the surface, such programs appear to be panaceas.andP;  They all have oneextremely limiting factor, however--their designers need a working sample ofthe virus they are attacking before they can come up with an antidote.andP;  Thismeans that a virus must first be identified, isolated, captured, anddisassembled (a process that may take months) before the designer can getdown to work.andP;  Next, the design has to be implemented, and then the finishedproduct must be packaged and marketed.andP;  The complete cycle may take one ortwo years from the time the virus is first placed into circulation.andM;Thus, infection identification products will always be behind the power curveof the antiviral war.andP;  But a program that performs the task of cleaning outthe virus from thousands of infected disks is many times faster, cheaper, andmore effective than any manual method of recovery from infection, and can beinvaluable to large organizations.andM;Safe User PracticesandM;The implementation of appropriate practices for computer users within anorganization is equally as important as the use of antiviral programs.andP;  A fewsimple procedures can greatly reduce the exposure to virus infections (fortips on recovery once infected, see &quot;The Recovery Period: PreventingReinfection Is Key&quot;).andM;1.andP;  First and foremost, never boot from any floppy other than the originalwrite-protected diskette from the original distribution package!andP;  Most of theboot sector infector viruses can infect your system only if you boot from aninfected floppy diskette.andP;  Booting from borrowed, unknown, or multiplediskettes greatly increases the opportunity for infection.andM;2.andP;  One and only one boot diskette should be assigned to each and everyfloppy-based PC (systems without a fixed disk), and that diskette should beclearly labeled as the boot diskette for that system.andM;3.andP;  If you have a system with a fixed disk, never boot from a floppy drive.andO;The only exceptions to this involve recovering from a viral infection.andM;4.andP;  Treat public domain and shareware software with caution.andP;  If possible,limit use of such programs to systems without fixed disks.andP;  If you do usethem on fixed disks, allocate separate subdirectories for the public domainprograms.andP;  This will reduce the chances of exposure since some viruses limittheir replication activities to the current subdirectory.andM;5.andP;  Create meaningful volume labels on all fixed and floppy disks at formattime.andP;  Develop a habit of checking volume labels each time a Dir command isexecuted.andP;  Keep a lookout for changes in the volume labels.andM;6.andP;  Watch for changes in the pattern of your system's activities.andP;  Do programloads take longer than normal?andP;  Do disk accesses seem excessive for simpletasks?andP;  Do unusual error messages occur with regularity?andP;  Do access lights onany of the system devices turn on when there should be no activity on thatdevice?andP;  Do you have less system memory available than usual?andP;  Do programs orfiles disappear mysteriously?andP;  Do you suddenly notice a reduction inavaailable disk space?andP;  Any of these signs can be indicative of viralinfections.andM;7.andP;  If you are in a corporate or multisystem environment, minimize theexchange of executable code between systems wherever feasible.andP;  When usingresources on someone else's PC (a laser printer, for example), transfer thenecessary data on a diskette that contains no executable code.andP;  Also, do notuse diskettes that are bootable or that contain system files.andM;8.andP;  If operating in a network environment, do not place public domain orshareware programs in a common file server directory that could be accessibleto any other PC on the network.andM;9.andP;  If operating in a network environment, do not use the file server node asa workstation.andP;  Allow no one other than the system administrator to use thefile server node.andM;10.andP;  If using 3270 emulators connected to mainframe systems, keep all 3270emulation software together in a separate subdirectory and do not include anyexecutable code in the subdirectory that is not part of the emulator suite.andO;If possible, limit such terminals to 3270 emulation only, and remove allother software from the disk.andP;  3270 emulators are the major gateways throughwhich viruses jump from PCs to mainframes.andO;</TEXT></DOC>