<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-096-492  </DOCNO><DOCID>07 096 492.andM;</DOCID><JOURNAL>Dr. Dobb's Journal of Software Tools  March 1989 v14 n3 p42(5)* Full Text COPYRIGHT Mandamp;T Publishing Inc. 1989.andM;</JOURNAL><TITLE>Network windowing using the X Window System. (includes relatedarticle PEX 3-D graphics for X)</TITLE><AUTHOR>Gettys, Jim.andM;</AUTHOR><SUMMARY>The X Window system is a machine independent, multitaskingwindowing, and graphics system meant to operate across differentnetworks.andP;  Due to these characteristics, X supportshigh-performance graphics and window-management facilities toprovide a series of over-lapping, resizable windows.andP;  The X Windowsystem was originally designed at the Massachusetts Institute ofTechnology to furnish a generic, network windowing environment fordifferent bit-mapped workstations.andP;  The system includes the Xlibgraphics subroutine library, the X network protocol, an X toolkit,and some window managers.andP;  The system is written in C and providesa network transparent client-server architecture that spares theuser from coding communications services between connected clientsand servers.andP;  Eventually, extensions will be added to support 3-Dgraphics, imaging, and live video.andM;</SUMMARY><DESCRIPT>Topic:     X Windows (Standard)NetworksWindowingSoftware MigrationCompatibilityC Programming Language.andM;</DESCRIPT><TEXT>Network Windowing Using the X Window SystemandM;The X Window system is a device independent, multitasking windowing, andgraphics system designed to operate across heterogeneous networks.andP;  As such,X supports high-performance graphics and window-management mechanisms toprovide a hierarchy of overlapping, resizable windows.andP;  The X system is basedupon a client/server architecture whereby the client (that is, theapplication program) requests that the server (the program that controls theuser-interface at the workstation) be responsible for drawing text, windows,and other objects.andP;  Through this client/server architecture, applications canrun on any machine in the network and can be accessed by any workstation orPC running on an X server.andM;The X Window system was originally designed at the Massachusetts Institute ofTechnology (MIT) to provide a generic, network windowing environment fordissimilar bit-mapped workstations.andP;  The system makes it possible for MIT tonetwork its collection of incompatible computers, which have accumulated atthe institute over the years.andP;  X, which is now a de facto standard and ispublicly available, provides efficient workgroup computing, connecting thedissimilar computing environments that exist in many situations.andM;The X Window system includes the Xlib graphics subroutine library, the Xnetwork protocol (which handles transmission between client applications andserver processes running on remote workstations), an X toolkit (whichprogrammers use to build graphical-user interfaces), and several windowmanagers.andP;  The window-manager program is distinct from the base window-systemserver and provides part of the user interface for manipulating existingapplications on the screen.andP;  The application itself, however, in combinationwith an X toolkit, actually specifies the bulk of the window interface anddefines the application's &quot;look and feel.&quot;andP;  X contains mechanisms forimplementing many interface styles and, unlike some interfaces (such as theMacintosh), does not mandate a single style.andP;  Because X is supported byvirtually every major workstation vendor and more than 24 organizations, anyapplication residing on a multi-vendor network and adhering to the de facto Xstandard for windowing on high-performance bit-mapped workstations can beaccessed by all X-based workstations.andP;  X defines an open-systems architecture-- one that is independent of devices, networks and operating systems -- thataccommodates a range of workstations.andP;  X servers have been implemented onworkstations and PCs from Digital Equipment Corp., Apollo Computer, SunMicrosystems, and Apple Computer, as well as MS-DOS and OS/2-based PCs.andM;Network TransparencyandM;The X Window system, written in C, provides a network transparentclient/server architecture that spares you from coding communicationsservices between connected clients and servers.andP;  Clients establishconnections with any number of servers.andP;  These servers handle graphics andwindowing functions (called X server processes) and receive requests fromclients in the form of Xlib graphics library calls.andP;  Fast asynchronouscommunication between clients and servers is performed by the X NetworkProtocol.andM;X applications and toolkits usually interface to the Xlib subroutine libraryon the host.andP;  Xlib in turn converts the parameters passed to the proceduralinterface into the X network protocol format, and translates messages fromthe server into return values for the application.andP;  Xlib also provides a setof utility routines needed by most applications.andM;In addition to Xlib, applications can interface to a variety of programminglibraries as needed.andP;  These include the X Toolkit (used to buildgraphical-user interfaces), industry-standard libraries (such as GKS andPHIGS) that can be layered on top of Xlib, and extension libraries thatprovide programming interfaces to X server extensions such as 3-D graphics,Display PostScript, and imaging.andM;Common X ApplicationsandM;X applications allow you in effect, to reach out across a network via aconsistent and intuitive graphical-user interface to access remoteapplications and high-performance resources anywhere on the network.andP;  Thisnetwork transparency lets you intermix operating systems in workgroups andaccess applications regardless of the system those applications run on.andP;  Forexample, you can display in separate windows on a PC applications running ona VAX/VMS system, a Unix workstation from Digital, Sun Microsystems,Hewlett-Packard, and IBM computers.andP;  Through X, you can access multipleapplications and display and control them within hierarchical-style windowson this workstation.andP;  Applications can be running either on the workstationor on remote hosts.andP;  The X Windows system's network transparency makes remoteapplications appear as if they were running on your workstation.andM;Although an X application can be accessed by any bit-mapped graphicsworkstation on the network, the program actually executes on the whateveravailable computer is best suited to process the program.andP;  For example, a PCthat lacks the performance and memorty to run a weahter prediction programcan access a Cray supercomputer running the program while you interact withthe application through a window on the PC.andP;  Again, X masks the differencesin operating systems.andM;Applications can be designed with mouse-driven front ends that allow you toscan and navigate through multiple databases scattered throughout a network.andO;A stockbroker, for instance, can review and compare multiple documentspresented on his screen at the same time, each containing stock informationfrom various news wires.andP;  The broker can &quot;cut and paste&quot; information of thesame data formats from these windows into another window, and electronicallymail the contents of the window immediately to a client with whom he istalking on the phone.andP;  The client, after reviewing the information from adesk-top terminal, can place an order to purchase stock while the brokerfills in an order form in another window and sends it to the client forconfirmation.andP;  The stock information can be coming from news wires running onone system that knows nothing about the mail system, and nothing about theorder form application and its host.andM;Software PortabilityandM;In addition to providing an architecture for distributed applications, X alsosimplifies the porting of software.andP;  This should be musci to your ears if youtraditionally have had to customize an application to match each hardware andsoftware environment that you want your application to run on.andP;  Through X,one common application interface reaches all platforms because X isindependent of machine architecture, operating system, and resolution anddisplay characteristics.andP;  Application programs written to support X can oftenrun on another vendor's system simply through recompilation.andM;The portability of X has been amply demonstrated by the X Testing Consortium,a group of vendors jointly developing tests to help firms validate their Ximplementations.andP;  To date, the test software runs on all the computerarchitectures of contributing companies with virtually no changes.andO;Developers have had prerelease test software (containing more than 200programs) up and running in one day.andM;Because X is device independent, you do not need to rewrite, recompile, orrelink an application for each new hardware display.andP;  Applications can bewritten to be independent of monochrome and color displays or displays withvarying resolution and other characteristics.andP;  Furthermore, every graphicsfunction defined by the system will work on virtually every supporteddisplay.andP;  If graphics functions were not made to work on all displays,&quot;inquire&quot; operations (like the GKS-graphics-standard inquire) could be usedto determine the set of implemented functions for a particular display atrun-time.andP;  (However, using GKS inquire operations would require run-timeanalysis for every application, adding overhead and producing inconsistentuser interfaces.)andM;X ExtensionsandM;Vendors implementing their own versions of X can extend the system over time.andO;The most recent version of X, Version 11, provides hooks to extend X tosupport functions such as the Display PostScript imaging model, PEX 3-Dgraphics (see accompanying box), and standard compound-document interchanges.andO;X11 also adds a graphics state for improved performance and defines precisesemantics for output routines.andP;  The X11 tape, publicly available for anominal fee from MIT, includes a sample X server, the Xlib library of Xroutines, the X Toolkit, several window managers, and other contributedsoftware.andM;Unlike other windowing systems, X has a basic philosophy of providing onlylow-level mechanisms and defers policy decisions to developers.andP;  X willcreate a window, but the application must tell it whether the window shouldhave a particular border or color.andP;  X gives low-level &quot;raw&quot; functionality inorder to provide a simple, clean system on which to build.andP;  If policydecisions were made at a low level, the system would not grow so easily orallow for future advances in user-interface technology.andM;X User Interface ToolkitsandM;As previously stated, X provides the mechanisms to move, resize, andmanipulate windows but does not dictate the actual appearance of the windows.andO;These are defined by various developers.andP;  One such toolkit is thepublic-domain Xtk toolkit included with the MIT distribution tape.andP;  Anotheris Digital's DECwindows X User Interface (XUI), which is a collection ofuser-interface components called &quot;widgets,&quot; which are analogous to objects.andO;These widgets include scroll bars, pop-up menus, window borders, and dialogboxes.andP;  Digital's widget library is built on top of the lower-level&quot;intrinsics&quot; found in the X Toolkit.andP;  Intrinsics are the basic set of rulesgoverning widgets: how the widgets are created and destroyed, how theyreceive input events, how they are stored in a resource file to be initiatedat runtime, and other characteristics.andP;  You can build interfaces on theirapplications that maintain a high degree of portability and consistency withthe X standard using Digital's XUI.andM;To build graphical-user interfaces, you design any number of custom widgetsfrom the X Toolkit, or use sample widgets from the X Toolkit as well aswidgets provided or sold separately by vendors.andP;  Because all widgets sit ontop of the same foundation (the intrinsics), an application and its widgetscan be ported from one X-based computer to another.andP;  Each computer provides aportable foundation, yet each application is customized and differentiated byits own &quot;look and feel.&quot;andP;  Consistent graphical-user interfaces enableapplications to have similar looks and feels, function similarly, and operateintuitively through mouse-driven graphical icons and pull-down menus.andP;  Thissimplifies the learning process for users.andM;From the three-level stack of programming interfaces--widgets, intrinsics,and Xlib--an application calls on any one interface, or any combination ofinterfaces as required by the program.andP;  If you are developing a spreadsheet,for instance, your program might call on intrinsics to customize a widgetthat displays cells in a spreadsheet, and access Xlib routines to drawgraphics on the screen.andP;  Although it is possible for applications to directlyaccess the server via the X protocol, you should use the higher-level Xlibgraphics routines to manage communication.andM;The X protocol defines data structures used to transmit requests betweenclients and servers.andP;  X transmission is asynchronous.andP;  This enables requeststo be sent without waiting for the completion of previous requests.andO;Pipelining techniques in both the server and Xlib speed the processing ofrequests.andP;  Any requests depending on the completion of other requests areblocked, pending execution of those other requests.andP;  Errors are alsogenerated asynchronously, and clients must be prepared to receive errormessages at arbitrary times.andM;In general, the X protocol also describes connections between clients andservers, windows (which allow interaction between you and the application),events (which notify the application of mouse and keyboard actions andprovide a way to control communication between multiple applications), andgraphics routines (which allow an application to draw information on adisplay).andP;  These are described later.andM;ConnectionsandM;Because X is network and operating system independent, applications can runon any machine in the network.andP;  The X protocol defines data structures usedto transmit requests between clients and servers.andP;  Applications do notgenerate protocol requests themselves.andP;  Instead, applications call Xlib andother layered libraries.andP;  X uses asynchronous stream-based interprocesscommunication instead of the traditional procedure call or kernel-callinterface.andP;  This asynchronous communication improves network speed byenabling requests to be sent without needing to wait for the completion ofprevious requests.andP;  Nearly any form of reliable data transport may be used.andO;Current implantations include TCP/IP and DECnet.andM;Pipelining techniques in the server and Xlib help accelerate processing ofrequests.andP;  Some X requests, however, have return values (state queries, forexample) that depend on the completion of previous requests.andP;  The X protocolwill block any further requests until the server has generated a reply andsent it back to the client.andP;  Errors are generated asynchronously so clientsmust be prepared to receive error replies at arbitrary times after theoffending requests.andM;A connection (that is, the communication path between the server and clientprogram) can exist between processes on the same machine or on differentmachines.andP;  A client program usually has one connection to a server over whichrequests and events are sent.andP;  When processes are on the same machine, the Xprotocol is often sent using shared memory or other local transportfacilities of the system, rather than TCP or DECnet.andM;To interact with you, a client must first open a connection with an X Serverusing a common transport mechanism.andP;  (DECwindows, for example, usesDECnet/OSI or TCP/IP).andP;  The client passes version and authorization protocolinformation in a packet to the server along with a code that indicates thebyte order used by the client.andP;  If the byte order differs from the server'smachine architecture, the server will use the byte order code to swap thebytes of incoming requests.andP;  A swapping takes place, for example, between aserver running on a Macintosh and a client application running on a VAXprocessor.andM;If a request to open a connection is successful, a reply is sent back to theclient.andP;  This reply contains information about the server and the associateddisplay hardware including display resolution, physical dimensions,color-handling abilities, and a vendor identification string.andM;WindowsandM;Once a connection is made, you can interact with multiple applications thatare displayed within windows employing a window manager, which is simplyanother client program, that helps you manipulate windows on the screen.andO;From the programmer's perspective, windows are hierarchical and can becreated inside other windows to any depth necessary for an application.andM;Each screen has a root window that displays a background color or pattern andserves as the root of the window tree for that display.andP;  Windows can bedisplayed fully on the screen, partially, or completely hidden.andP;  To display awindow, the client sends the server a Map-Window request.andP;  Graphics output toa window is clipped to the boundaries of the window.andP;  A window, therefore,becomes a virtual graphics terminal for an application, allowing multipleapplications to share a screen and not overwrite another application'soutput.andM;Each window has a height and width and Z position that indicates its positionwithin a stack of other windows.andP;  In addition, windows carry other attributesthat identify their location on the screen, their mapped state, and theirrelationship to parent and sibling windows.andP;  The border pixel attribute isused to draw a border around a window.andP;  Through a background pixel and pixmapattribute, an application can specify either a single pixel value or acomplete pixmap (a rectangular array of pixels in main memory) as the windowbackground.andP;  Through this attribute, a server can redraw a window'sbackground color itself without sending a request to an application.andM;An application that creates a window can specify bit and window &quot;gravity&quot; tothe server to indicate which pixels should be retained when a window isresized, or how children windows should be positioned when the parent windowis resized.andP;  For example, a text application might specify&quot;NorthWest-Gravity&quot; to indicate that the upper-left information should bepreserved when the window is reduced to size.andM;Many Xlib routines are used primarily by a window manager or toolkit ratherthan by applications.andP;  Typical routines include changing the parent of awindow, grabbing the pointing device or keyboard, altering event dispatchingand processing, changing the keyboard encoding, determining the residentcolor maps, and modifying the list of hosts that have access to the server.andM;All pixels in X have uninterpreted color values, although the application canallocate and define a color map to gain control of the mapping between pixelvalues and colors displayed on screen.andP;  X encourages sharing of color mapsbetween applications.andP;  Pixel values can be allocated as read only, and sharedin a color map (optionally by name), or as read/write and exclusive in acolor map.andP;  Applications that use low-level X routines are expected to querythe hardware capabilities at connection set-up time and adjust their usageaccordingly.andM;X graphics routines can be directed to a window or to an arbitrary pixmap.andO;Pixmaps and windows are referred to as &quot;drawables&quot; and all X drawingoperations are passed drawable as a parameter.andP;  Instead of passing allparameters that describe a drawing operation to the server on each graphicsrequest, the server keeps state in a data structure called a graphics context(GC).andP;  The GC is passed as an argument to each graphics call and includesinformation about the foreground and background colors, line widths andstyles, polygon fill rule, stipple patterns, text fonts, and aclient-supplied clipping region.andP;  Applications can create more than one GC toalternate quickly between states on sequential output calls.andM;EventsandM;X applications are event driven with events being sent to an application froma number of sources, including the X server and X toolkit, as well as otherapplications.andP;  Events are generated by the X server when you type on thekeyboard or move the mouse or other pointing device.andP;  Some event types aregenerated as side effects of client requests.andP;  Each event includes a timestamp, a bitmask indicating the up/down state of all modifier keys and mousebuttons just before the event, the window the mouse is in, and details aboutthe change the event describes.andM;An application is notified when the pointing device or cursor enters orleaves a window.andP;  A single window is globally designated as the &quot;inputfocus.&quot;andP;  This window receives all keyboard input specified by the event untilthe input focus is set to a different window.andP;  An event is generated when awindow gains or loses input focus.andP;  In X, applications are expected toregenerate, on request, any information displayed in windows.andP;  When a windowchanges size or becomes visible, the server may need to tell the applicationwhich parts of the window to redraw.andP;  This triggers an event.andP;  Some Ximplementations may invoke backing store and save orders to reducerepainting, but applications must still be able to repaint a window onrequest.andM;Graphics PerformanceandM;Graphics operations in X are designed to be simple and fast.andP;  They arerelatively low level compared to PostScript, PHIGS, or GKS, but are stillwell-suited to create high-performance, visually sophisticated applications.andO;Tasks requiring a higher-level, graphics-oriented interface can use layeredgraphics libraries or intermix calls to the layered libraries with basic Xgraphics functions.andM;The Xlib contains about 300 routines that either map directly to X Protocolrequests or provide utility functions to the client.andP;  Xlib routines allow aclient application to create, destroy, manipulate, and configure windows.andO;There are also routines for lines, polygons, arcs, text, block pixeltransfers, stipple and tile filling, and color-map manipulation.andP;  Routinessuch as PolyLine and PolyRectangle perform multiple operations based on alist of points.andM;Operating on an array of objects is more efficient than making multiplegraphics calls due to the X requests overhead.andP;  The protocol to draw one ormore rectangles is PolyRectangle, which takes a drawable (a pixmap orwindow), a graphics context, and a list of rectangles as parameters.andM;For example, X shows that graphics performance over an Ethernet network isexcellent, and usually functions at the speed of the display device (oftenhigher when the application is running remotely rather than locally!).andO;Although the semantics of server operations are tightly connected to the Xprotocol, a fair degree of freedom exists in the actual design andimplementation of the server itself.andP;  The quality of the serverimplementation is one way vendors can add value to their competing Xofferings.andM;The MIT sample server (on the MIT distribution tape) consists of a section ofhighly portable code, and a section of device-dependent code.andP;  The sampleserver was designed to make device-independent code as large as possible,thus simplifying implementation at the expense of performance.andO;Reimplementing the server to be entirely device dependent may provide thebest performance, but would require a major effort to support each newworkstation product.andM;ConclusionandM;Over time, extensions to support 3-D graphics, imaging, and even live videowill be added to both the X architecture and to development tools with thegoal of providing added functionality, but not at the expense ofcompatibility.andP;  With this in mind, software developers should consider thefollowing criteria when evaluating a specific implementation of X: qualityand robustness of code, performance between clients running X applicationsand remote workstations running X servers, the vendor's X developmentenvironment, and the level of difficulty required to integrate a softwaredeveloper's own extensions and software into the X environment.andO;</TEXT></DOC>