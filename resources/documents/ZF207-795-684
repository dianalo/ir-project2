<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-795-684  </DOCNO><DOCID>07 795 684.andM;</DOCID><JOURNAL>AI Expert  Oct 1989 v4 n10 p40(7)* Full Text COPYRIGHT Miller-Freeman 1989.andM;</JOURNAL><TITLE>AWKWARD: toward database reasoning. (UNIX awk utility)(includesrelated article on how AWK works)</TITLE><AUTHOR>Lirov, Yuval; Ravikumar, Swaminathan.andM;</AUTHOR><SUMMARY>A system that combines expert-system and database-applicationtechnology maximizes productivity and enhances information use.andO;Queries using the UNIX 'awk' programming tool that extractcircuit-pack troubleshooting knowledge are described.andP;  Awk is aquery language that can both create and chain rules and develop anintelligent user interface to an existing database.andP;  Itsadvantages include the fact that it is a general-purposeprogramming tool originally designed for data retrieval,transformation, validation and reduction and is easily accessible.andO;Integrating knowledge-base systems with database-managementsystems (DBMSs) can involve adding functionality to the DBMS tosupport knowledge-based systems or extending expert systems withDBMS technology.andP;  Sample awk scripts that match facts and rulesvia a database are presented.andM;</SUMMARY><DESCRIPT>Topic:     Program Development TechniquesKnowledge-Based SystemsData Base DesignPerformance Improvement.andO;Feature:   illustrationprogram.andO;Caption:   Translation script. (program)Inference engine by queries. (program)Constructing advice table from failure-replacement version.andO;(program)andM;</DESCRIPT><TEXT>AWKWARDandM;Combining expert system and database applications technology results inenhanced information use, maximizing productivity and quality.andP;  (1)  Acombined system can process large fact and knowledge bases.andP;  Denver Worksuses a factory test-repair history database equipped with deductivecapabilities as a troubleshooting expert-system prototype.andP;  The system isalso used as a knowledge-engineering guidance device, focusing its effortsexclusively on the acquisition of trouble-shooting knowledge aboutmanufacturing.andP;  Error recovery, persistency, concurrency, and freedom fromknowledge-size limitations are the main benefits of deductive databases.andP;  Todevelop such intelligent databases, we have written several awk (2) queriesto extract circuit-pack troubleshooting knowledge from the history databaseand an awk-based forward chainer to emulate troubleshooting reasoning.andP;  Ourtechnique's simplicity is enhanced by awk's standard availability.andM;Traditionally, database and expert-system technologies are merged byproviding an interface between the expert system and the database-managementsystem.andP;  Such interfaces allow query and update of external databases.andO;Further, a translation program is often constructed, converting theproduction rules to sequences of database operations that can emulate humanreasoning.andP;  (3)  A different way of integrating databases and expert systemsis the use of a database to alleviate the knowledge-acquisition bottleneck.andO;This technique belongs to the bottom-up class, where raw data is used toobtain a qualitative description of a phenomenon; the database supplies theinformation needed to construct the rules.andP;  A classic example of such amerger is Quinlan's ID3 algorithm.andP;  (4) Both ways of integrating databasesand expert systems allow for independent development and building ofreasoning capabilities on top of existing databases.andM;In this article we combine the two approaches of database and expert-systemsintegration.andP;  We use the same query language to achieve both tasks: rulecreation and rule chaining (reasoning).andP;  In particular, we use awk queries todevelop an intelligent user interface to an existing database.andP;  The databasecontains data about the observed faults and test-and-replace activities ofseveral troubleshooters working on an electronic circuit-pack manufacturingline.andP;  The intelligent user interface provides guidance to novicetroubleshooters by consulting the database and directing the process ofreplacing faulty components.andM;Our choice of awk is motivated by several considerations.andP;  First, awk is ageneral-purpose programming tool.andP;  Using it to create rules is appropriatesince awk was originally designed for data retrieval, transformation,reduction, and validation.andP;  Second, awk is a standard part of UNIX System Vv. 3.1 and it also runs under MS-DOS, making it a standard, easily accessibletool.andP;  And finally, an awk program is a sequence of pattern-actionstatements.andP;  The pattern part of a statement is a multicondition declaration,matched by a line in the database.andP;  The action part is a multioperationprocedure describing the action to be performed when the pattern part ismatched.andP;  Thus, an awk program can be regarded as a rule-based program.andM;Awk, however, is not an expert-system shell.andP;  It does not have working memoryor conflict resolution strategies to emulate human reasoning.andP;  In thefollowing sections we will describe our method of emulating human reasoningin awk using the circuit-pack troubleshooting database.andM;CIRCUIT-PACK EXPERT SYSTEMSandM;Using expert-system technology for electronic circuit-pack troubleshooting isjustified primarily by economic reasons.andP;  Even a novice troubleshooter,equipped with such a system, is expected to halve the time needed to diagnosea circuit, reduce work in process, and minimize the number of test-replacecycles.andP;  (5)andM;Early troubleshooting expert systems represented the knowledge of experiencedanalysts as rules.andP;  A rule has two sides: the left-hand side describes aparticular situation characterized by current observations, and theright-hand side describes the next measurement or replacement.andP;  Therules-collection process (knowledge acquisition) is the most difficult partof constructing such expert systems.andP;  The analysts often fail to explaintheir actions, the completeness and consistency of the knowledge base isdifficult to verify, and the expert system requires continuous upgrading toreflect the increments in the troubleshooting knowledge.andP;  A betteralternative is acquiring troubleshooting knowledge from a variety of sources.andM;STAREX [6] is an expert system that has about 90% of its rules constructedartificially from sources other than human experts.andP;  STAREX featuresautomatic knowledge-base derivation from the circuit-pack schematic,component-replacement and measuement costs, and component-failureprobabilities.andP;  While the schematic is available from the circuit-pack designfiles, the component failure rates are more difficult to acquire.andM;Besides being the necessary data for the automatic rule derivation,component-failure distribution information can also be used as a completenessverification tool of a shallow knowledge base.andP;  In fact, this data can beused to supplement the missing rules.andP;  In the extreme situation, thetroubleshooting knowledge base, consisting of only the replacement rulesaccording to the component rates, can still be a useful repair tool, [7]although without understanding the circuit-pack functionality.andP;  We willdescribe our approach to derive such troubleshooting knowledge baseautomatically; but first, a description of the expert system shell that willbe used to encode that knowledge is necessary.andM;AWKWARD EXPERT-SYSTEM SHELLandM;Possible strategies for integrating database-management and knowledge-basesystems can be classified as enhancement and coupling of independent systems.andO;System enhancements include either adding functionality to databasemanagement systems (DBMSs) to support knowledge-based inference or extendingexpert systems with database-management technology.andP;  Independent systemscoupling can be performed under either tight or loose protocols.andM;A loose coupling implies that all the required data is retrieved from theDBMS before the inference phase.andP;  Under a loose protocol, an expertsystem-shell operates the knowledge base and DBMS separately.andP;  The knowledgebases are unshared between user and transient.andP;  (When an expert system goesaway, it takes the rule base with it.)andP;  Databases, however, are both sharedand persistent (not transient by their design).andP;  Loose coupling has two maindeficiencies: an inability to reason consistently using dynamic, time-varyingdata, and an inability to partition the database before the reasoning toquery efficiently.andP;  Loose coupling's deficiency in handling time-varying dataresults in inefficient polling queries by the expert system.andP;  The inabilityto partition the database results either in the need to retrieve all the dataor develop a separate module that guesses what to retrieve.andM;In tight coupling, an expert system interacts with the database during theinference by constructing queries and interpreting the data at runtime.andO;Under the tight coupling protocol, the rules ordering dynamic ornonpartitionable data are stored in the database.andP;  The prevalent technique isto turn DBMS commands into rules by creating an illusion that these commandsare always running.andP;  the DBMS then triggers the reasoning asynchronously whena change in data occurs.andP;  Using this mechanism, rules residing in thedatabase can be evaluated either early or late with respect to the query,enabling forward or backward chaining respectively.andP;  Tight-coupling schemesare deficient in certain reasoning techniques such as explanation, deferredactivation, nonmonotonic reasoning, rule partitioning, and other moreadvanced expert-system facilities.andM;What is really needed is the ability to emulate expert-system reasoningentirely in the database's terms.andP;  In this section we'll describe a systemthat falls into the system enhancements category: we extend an existingdatabase with several features to support inferencing at the reasoning levelof a human troubleshooter.andP;  Our awk-based expert-system shell consists of twomodules: the translation module and the inference engine.andM;The translator is responsible for translating the knowledge (represented inthe rule form) to the tabulated format.andP;  For clarity's sake we'll assume therules have a simple syntax: andless;ruleandgt; ::= IF andless;conditionandgt; THEN (actionandgt;andless;conditionandgt; ::= andless;variableandgt; IS andless;valueandgt; andless;variableandgt; ::= andless;locationandgt; andless;facultandgt;andless;locationandgt; ::= andless;componentandgt; andless;pinandgt; andless;valueandgt; ::= high | low | integer andless;actionandgt;::= andless;operationandgt; IS andless;operandandgt; andless;operationandgt; ::= measure | replace andless;operandandgt; ::=andless;locationandgt; andless;componentandgt; andless;componentandgt; ::= andless;icandgt; andless;pinandgt; andless;pinandgt; ::= integer andless;icandgt; ::=integerandM;The translation removes the keywords, IF, THEN, and IS from the rules andpopulates the condition and action tables.andP;  The condition table's format isvariable : value : rule identifier and the action table's is operation :operand : rule identifier where : is the field separation.andP;  The awktranslation script (Listing 1) maps the following sample rule base: 01 IFIC1-10 IS -5v 02 THEN measure with voltmeter IS IC2-25 03 IF IC2-25 IS +5v 04THEN replace IS IC6 to the following condition and action tables: Conditiontable 01 IC1-10:-5v:rule0 02 IC2-25:+5v:rule1 Action table 01 measure withvoltmeter:IC2-25:rule0 02 replace:IC6:rule1andM;Inference engines emulate human reasoning by chaining the knowledge-baserules and interacting with the user when additional information is required.andO;Two kinds of rule chaining are used in most expert-system shells: forward andbackward chaining.andP;  In backward-chaining systems, the right-hand side of arule is considered a goal that requires verification that the left-hand sideis satisfied.andP;  This requirement is considered a new goal, and another rule,having its right-hand side matching the new goal, is found.andP;  The processcontinues until a goal corresponding to a verified fact is obtained.andP;  Theinitial goal is proved by backward chaining (from conclusion back to facts).andO;PROLOG is an example of a backward-chaining system.andM;in contrast to the backward-chaining systems, forward-chaining ones startfrom the facts and match the conclusions of the satisfied rules with theconditions of the new rules until a satisfactory conclusion is obtained.andO;OPS5 [8] is an example of a forward-chaining system.andM;It is possible to emulate forward-chaining systems using a backward-chainingsystem and vice versa.andP;  Therefore, we restrict ourelves in this article to ademonstration of a forward-chaining inference engine emulating humanreasoning on a database.andP;  A forward-chainer cycles through the followingthree stages:andM;* Matches rules to the facts in the working memoryandM;* Resolves conflict of rules to find the &quot;most important&quot; ruleandM;* Fires the rule and updates the working memory.andM;Rules are stored so they can be accessed and matched to the current state ofthe working memory using two approaches.andP;  One approach is to read all therules into an array and manipulate that array in internal memory.andP;  While thisapproach is time-efficient, its memory requirements are quite demanding.andP;  Forexample, any contemporary PROLOG system will crash if required to handle morethan 600,000 clauses.andP;  [3]andM;To alleviate this problem, our inference engine emulates working memory inASCII files.andP;  Listing 2 depicts the inference engine awk script.andP;  The entireinference engine is described in BEGIN (lines one to 25), where lines two toseven correspond to initialization and lines nine to 25 to inference.andP;  Notethe two functions in lines 27 to 34 and 36 to 43 used to query the action andcondition tables shown previously.andP;  Examine this sample interaction with theuser: $nawk -- f rtrans.awk rules.data $nawk -- f fchain1.awk Enter initialcondition: IC1-10 --5v measure with voltmeter IC2-25: +5v measure signalK1-out: good visually inspect C20: bad replace C20: $andM;AWKWARD IMPLEMENTATIONandM;The AWKWARD system comprises four scripts that successively fetch andtransform the accumulated data until the required troubleshooting advice isconstructed.andP;  The initial database contains records describing the eventsthat take place in the circuit-pack manufacturing.andP;  Each event has a uniquetag and value, and are of types passed test, failed test, response, and soon.andP;  The record always contains the serial number of the pack and time whenthe event took place.andP;  For test failure, the record also contains the teststep whee the failure was observed.andP;  For repair, the record contains thereplaced component description.andM;Our goal is to build a system that, when queried with a test step, willprovide trouble shooting advice describing the most likely cause for failure.andO;At a later query with the same test step parameter and serial number, thesystem will provide the next most likely cause for failure.andM;Shop-floor data is collected as ASCII files, each containing records aboutdifferent pack codes.andP;  Here is a sample data file: 01 BT 12-18-88 16:05:38 02TS DAISY1 03 BC TN754 V12 04 SN 8DC379700 05 BR P 06 LC DO2 07 OC SHIPPEDFROM POS.andP;  101, 16:05:38 SUN.andP;  DEC. 18 08 TO 1 09 ET 12-18-88 16:05:38 10 BT12-18-88 17:12:27 11 TS FR1 12 BC TN742 V10 13 SN 6D4316300 14 BR P 15 LC B0416 OC SHIPPED FROM POS.andP;  216, 17:12:27 SUN.andP;  DEC. 18 17 TO 1 18 ET 12-18-8817:12:27andM;The two records starting from line one and line 10 correspond to twodifferent pack codes as indicated by their BC field (line three and line 12).andO;First script traverses all the records and classifies them into separatefiles based on the pack code of each record: 01 BEGIN { 02 RS = &quot;&quot;; 03 FS =&quot;bn&quot;; 04} 05 06 $1 ~/andless;BC/ { 07 filename = 2; #field two is pack code 08 for(i = 1; i andless;= NF; 1++) 09 printf(&quot;%s\n&quot;, $i)andgt;andgt;filename #append data tofilename 10 close(filename); #cannot have too many open files 11}andM;The script's output is a set of records files belonging to a unique pack code(note the BC field): 01 BT 01-03-89 09:47:41 02 TS DAISY2 03 BC TN742 V17 04SN 8DC379800 05 BR P 06 LC C11 07 OC SHIPPED FROM POS.andP;  201, 9:47:41 TUE.andO;JAN. 3 08 TO 1 09 ET 01-03-89 09:47:41 10 11 BT 01-03-89 13:08:35 12 TS FR113 BC TN742 V16 14 SN 7D7320600 15 BR P 16 LC C12 17 OC SHIPPED FROM POS.andO;216, 13:08:34 TUE.andP;  JAN. 3 18 TO 1 19 ET 01-03-89 13:08:35 20andM;The second script has two purposes: to remove unwanted fields from eachrecord and collapse each multiline record into a single line so the UNIX sortutility can be used.andP;  The second script (on the AI EXPERT Bulletin BoardSystem and CompuServe Forum) collects the serial number, modificatioin time,test step, action taken, and replaced part from each multiline record in thefiles created by the first script as a line.andP;  The lines are sorted by theserial number and modification time, producing this script output: 014DB198010 88-12-02 200 02 4DB198010 88-12-06 default REPLACED IC17.4 034DC137807 88-10-02 200 04 4DC137807 88-10-04 default REPLACED C22.7 055D3334309 88-12-10 47 06 5D3334309 88-12-13 default REPLACED IC16.7 075D3388705 88-10-15 51 08 5D3388705 88-10-27 default REPLACED C32andM;The third script (on the AI EXPERT Bulletin Board System and CompuServeForum) operates on the second script's output to create a failure step,replacement relation.andP;  The script has no pattern to match and hence theaction is performed on every line.andP;  The data is output in a different order:test step followed by replacement information and serial number.andP;  The outputis sorted by the serial number.andP;  For the script to output the replaced partand fix the failing test step on a particular serial number, there should bea line in the input file for that serial number failing the same test step.andO;The time of failure should be before the replacement time (note line sevenand line eight of the first script's output).andP;  The third script's output is:01 200 REPLACED C22.7 4DC148913 02 200 REPLACED IC17.4 4DC137811 03 200REPLACED IC17.3 4DC148510 04 200 REPLACED IC17.3 5D6362208 05 47 REPLACED IC17D6311409 06 47 REPLACED IC1 8D9069509 07 47 REPLACED IC10 7D5383800 08 47REPLACED IC11 6DC374112 09 47 REPLACED IC11 8DC375604 10 47 REPLACED IC118DC379805andM;The third script's output is the history of replacements for the same teststep collected across different serial numbers.andP;  The fourth script (Listing3) produces the following advice table; the output is reverse-sorted, listingthe replacement with the highest frequency first:andM;Finally, the fifth script (Listing 4) constructs the rule base from theadvice table, queries the user, matches the rule, and displays the advice.andO;Each cycle matches the current data with one or more of the rules in the rulearray.andP;  The appropriate rules fire, thereby generating new data that the nextcycle uses.andM;STRENGTHS AND WEAKNESSESandM;Rules are stored in the relational database.andP;  The match-resolve-fire cycle offorward chaining is enabled by the appropriate queries.andP;  The data, matchingthe left-hand side of the patterns in the queries, enable the firing--newdata is created, matching the new patterns.andP;  This process continues until nopattern matches any available data.andP;  The awk-based expert-system shell iswritten in as few as 60 lines.andM;The main benefit of our approach is the ability to process unlimited numbersof rules and data.andP;  Further, when the reasoning process is interrupted, itcan continue from the interrupted place since all the interim data is writtenon disk.andP;  This method's weakness is its slow performance.andP;  More research isneeded to devise smart techniques to improve the time performance ofreasoning on databases.andM;ReferencesandM;[1] Schur, S. &quot;Intelligent Databases,&quot; Database Programming andamp; Design, June1988, pp.andP;  46-53.andM;[2] Aho, A., B. W. Kernighan, and P. J. Weinberger.andP;  The Awk ProgrammingLanguage.andP;  Reading, Mass.: Addison-Wesley, 1988.andM;[3] Tzvieli, A. &quot;On the Coupling of a Production System Shell and a DBMS.&quot;andO;In Beeri, C., J. W. Schmidt, and A. Dayal, eds.andP;  Proceedings of the ThirdInternational Conference on Data and Knowledge Based Systems, Jerusalem,Israel, 1988.andM;[4] Quinlan, J. R. &quot;Semi-Autonomous Acquisition of Pattern-Based Knowledge.&quot;andO;In Donald Michie, ed.andP;  Introductory Readings in Expert Systems.andP;  Reading,Mass: Gordon and Breach, 1982.andM;[5] Lirov, Y. &quot;A Survey of Artificial Intelligence Techniques in Circuit PackDiagnostics.&quot;andP;  In Computers and Mathematics with Applications 18, pp.andO;381-398.andM;[6] Lirov, Y. &quot;STAREX--Simultaneous Test and Replace Circuit PackTroubleshooting Expert Systems Prototyping and Implementation.&quot; Forthcomingin Engineering Applications of Artificial Intelligence.andM;[7] Yau, C., &quot;ILIAD - I Learn I Aid Diagnosis.&quot;andP;  Proceedings of the IEEE TestConference, 1986.andM;[8] Forgy, C. L. OPS5 User's Manual, Technical Report CMU-CS-81-135, Dept.andO;of Computer Science, Carnegie-Mellon University, Pittsburgh, Pa., 1981.andM;[9] Levy, Leon S. Taming The Tiger.andP;  Berlin, W. Germany: Springer-Verlag,1987.andM;Yuval Lirov and Swaminathan Ravikumar are knowledge engineers at ATandamp;T BellLaboratories, Holmdel, N.J.andM;AwkandM;Awk is an interpretive programming language with primary applications such asinformation retrieval, report writing, and data manipulation.andP;  Awk is oftenused as a special purpose information processing language, with easilyaccessible capabilities for nonprogrammers.andM;Awk (named for its developers, Aho, Weinberger, and Kernighan) hascharacteristics that make it a convenient problem-solving tool.andP;  Thesecharacteristics include ability to process files, refer to input records andtheir fields, and match patterns on these items.andP;  Typically, an input recordis one line of an input file, and fields are delimited by whitespace.andM;Awk's pattern expressions are similar to other UNIX commands, and the controlstructures are similar to other high-level algorithmic languages, especiallyC. (Awk programs use many of the common idioms of C programs.)andP;  And likeinterpretive languages, awk doesn't use declarations.andM;An awk program is often thought of as a sequence of pattern statements, inwhich each action is preceded by a guard pattern.andP;  If the pattern is matched,then the action is taken.andP;  Thus the program: /AWK/ { print NR } when runagainst a file will produce a list of the line numbers of all the lines inwhich the sequence of letters AWK appears.andP;  In this case, /AWK/ is thepattern specification.andP;  Awk comprehends three types of patterns:andM;* Regular expression patterns--regular expressions are expressions in apattern specification language.andM;* Arithmetic patterns--tests using arithmetic predicatesandM;* Range patterns--pairs of patterns denoting a starting and ending record.andM;Generally, awk programs operate on records in files.andP;  Unless otherwisespecified, a record is a single line in a file.andP;  Fields within a record arestrings of nonwhitespace characters separated by whitespace characters, suchas blanks or tabs.andP;  (Both record and field delimiters can be specified by theuser.)andP;  $i refers to the i-th field of a record when i is one or more; $0refers to the whole input record.andM;Metaprogramming is a program development method in which the problem to besolved is expressed in some domain-specific, problem-oriented notation.andO;Using the techniques of program translation, the problem description convertsthrough a sequence of one or more transformations to a program in a languagefor which a processor exists.andP;  Due to its built-in ability to parse stringsand apply pattern-directed transformations, awk is a superb metaprogrammingtool.andP;  [9]andM;Originally designed and implemented in 1977 as a programming tool in the UNIXsystem, awk was significantly enhanced in 1985.andP;  UNIX and MS-DOSimplementaitons are available.andO;</TEXT></DOC>