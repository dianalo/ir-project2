<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-559-222  </DOCNO><DOCID>08 559 222.andM;</DOCID><JOURNAL>EXE  June 1990 v5 n1 p34(6)* Full Text COPYRIGHT Process Communications Ltd. (England) 1990.andM;</JOURNAL><TITLE>Let's talk Smalltalk. (interview with Adele Goldberg, Smalltalkpioneer - includes related article on ParcPlace Systems)(interview)</TITLE><AUTHOR>Smith, Paul.andM;</AUTHOR><SUMMARY>Adele Goldberg, CEO of ParcPlace Systems in Mountain View, CA,discusses her doctoral dissertation in the field of artificialintelligence, her involvement as co-author of the programminglanguage Smalltalk-80, participation in the development ofSmalltalk during her 14 year stay at the Palo Alto ResearchCenter, and management of the System Concepts Laboratory.andO;ParcPlace, in an effort to gain products for the market, seesinvention as a requirement to realize market potential.andP;  The firmexpends considerable effort to create a quality training programfor products and methodologies.andP;  One of the most importantconsiderations is to make programmers more productive by givingthem access to information quickly, and giving them a way to sharesoftware results.andP;  User interface makes it possible to query astructured source of information about code and makes it possibleto copy code from one program to another.andM;</SUMMARY><DESCRIPT>Company:   ParcPlace Systems Inc. (officials and employees).andO;Product:   Smalltalk-80 (Computer program language) (design andconstruction).andO;Topic:     InterviewProgrammersChief Executive OfficersWomen.andO;Feature:   illustrationportrait.andO;Caption:   Adele Goldberg. (portrait)Person:    Goldberg, Adele (interviews).andM;</DESCRIPT><TEXT>Let's talk Smalltalk What was your background before joining Xerox?andM;I received a bachelor's degree in mathematics from the University ofMichigan, and then attended graduate school in Information Sciences at theUniversity of Chicago.andP;  After completing a master's degree, and qualifyingfor the doctoral program, I moved to California to work at StanfordUniversity.andP;  As a full-time research associate at the Institute forMathematical Studies in the Social Sciences (IMSSS), I prepared my doctoraldissertation for acceptance by the University of Chicago.andP;  My degree studieswere in artificial intelligence, notably the incorporation of mechanicaltheorem provers into a system I had designed for teaching proof constructionas part of a course on symbolic logic.andP;  My particular long term interestswere (and still are) in the use of computers to augment both formal andinformal learning.andP;  All of my work at Stanford University was related to thisarea.andP;  Before graduating, I also spent a school term teaching AI at thePontificia Universidade do Catolica, Rio de Janeiro, Brazil.andM;After obtaining my doctoral degree, I joined Xerox PARC in 1973.andP;  My earlyactivities were focused on the learnability of programming in general andprogramming using interactive co-ordinated development tools.andP;  Projectsassociated with these interests dealt with the introduction of educationaltechnology into school settings, as well as the design of specific tools anduser interfaces.andM;How did you become involved in the project that led to the development ofSmalltalk?andM;I joined the Smalltalk project shortly after it started.andP;  My interests in theuse of computer technology for learning naturally led me to consideraccessibility issues, that is, tools taught in the classroom have to beaccessible wherever and whenever the person thinks of the tools, so that theperson can benefit from their use.andP;  My work at Stanford University wascarried out on a time-shared system, a nationwide network to schoolsthroughout the United States.andP;  Such systems tend to institutionaliselearning; tools that the students rely upon are only available within theconfines of the school.andP;  I met Alan Kay just before leaving for Brazil andimmediately resonated with his ideas for the Dynabook.andP;  All of the peopleinvolved in the XeroxSmalltalk project were, at one time or another, invitedinto the project by Alan himself.andM;What was your role in the development of Smalltalk?andM;My personal role changed dramatically over the years.andP;  I started out as anindividual contributor, focused on determining the design factors thatcontributed to learnability.andP;  This included devising pedagogical techniques,setting up special resource centres both within and outside schools, andteaching.andP;  I typically taught students in the 10-13 year range, because atthis age notions of categorisation can be understood, and classificationskills can be learnt.andP;  Object-oriented technology is a study of behaviour,how to organise or classify behaviour, and how to assign those behaviours togroups of objects.andP;  Programming involved the description of the behavioursand their implementation in a computer system.andM;Over time, I took on more managerial roles.andP;  In 1980, I officially became theGroup Manager, and subsequently Manager of a research laboratory.andP;  It was inthis period that we designed, implemented, and published details of theSmalltalk-80 system.andP;  By 1984 we started researching what I then called'interpersonal computing' - asking questions about how people working inremote sites could be casually linked together through the use of video.andP;  Wealso worked on the use of video to capture the rationale that leads toparticular designs.andP;  In addition, my responsibilities included working withvarious Xerox business units on the transfer of technology.andP;  Much of thiswork eventually led us to the formation of ParcPlace Systems.andM;During my entire tenure at Xerox, I was also very involved in volunteer workwith the ACM (Association for Computing Machinery, a society for computerprofessionals).andP;  I served on the Special Interest Board, was Editor-in-Chieffor ACM Computing Surveys, and national Secretary.andP;  From 1984-1986, I was thenational President.andP;  In this capacity, I helped form the ACM Press, apartnership with Addison-Wesley, and edited the first book in the Historyseries.andM;How did Smalltalk come about, and how did it develop?andM;As I said, Smalltalk started out as the Dynabook vision.andP;  It included sharingof information among otherwise independent dynamic books.andP;  Initially, thedetails of how sharing would take place were not particularly clear.andP;  We weremore definite about the need to create a system structure in which peoplewould find applications that were immediately usable, and be able to learnhow to specify their own applications/uses.andP;  The earliest versions ofSmalltalk were highly influenced by the tales of success from MIT with theLogo Project.andP;  We started out with a notion of a single language, learnableby children as well as adults, although I found that this spectrum was betterunderstood as a series of tightly related languages.andM;The Smalltalk system evolved gradually over the years, with an interestingresearch cycle.andP;  There were several iterations of the language as well as thelibraries and tools.andP;  Each iteration attempted to make sure that usefulapplications could be built in an understandable way, often simply byrefining existing software.andP;  Wherever we discovered that it was difficult tocreate an application, but that the natural description of the applicationseemed easy to compose, then we felt that revision of the Smalltalk systemwas required.andP;  It was a motto of Alan Kay's that 'Easy things should be easyto do; hard things should be feasible'.andP;  Translated, we understood the notionthat the amount of effort to solve a problem should be directly proportionalto the difficulty level of the problem.andP;  I still think we have a great dealto learn about how to make sure that our efforts are commensurate with ourgoals.andM;The Dynabook vision was not so concrete that it needed to change, but ratherits embodiment changed - both because of new ideas about usage, and how tolearn, as well as new technologies such as hardware systems and local-areanetworks.andM;How would you characterise the different components of a 'spectrum of tightlyrelated languages?andM;My comments about the spectrum of tightly related languages were given in thecontext of my understanding the importance of a common foundation.andP;  Eachparticular language experience is then an extension of this foundation.andP;  Thelearning of multiple languages does not create a conflict, because offundamental differences in the notion of how information is represented orhow communication takes place.andM;My favourite example is the English language.andP;  When you speak with a threeyear old child, you hold a conversation in English, although an English withsomewhat limited vocabulary and sentence constructs compared with the Englishyou might speak with an adult.andP;  Among adults, various English languages arespoken, depending perhaps on vocation.andP;  Doctors, lawyers, computerscientists, mechanical engineers, are groups that speak different languages,although each is usually recognisable as English.andM;The idea of an object-oriented language is that objects are described interms of the behaviour that they can carry out.andP;  These behaviours are givennames, and the names become a part of the language for invoking desiredbehaviours.andP;  A collection of interacting objects is, in fact, a collection ofobjects that know the correct names for requesting information or action fromone another.andP;  Any such collection is recognised in terms of a similar formatfor creating objects and communicating, while differentiated in terms of thevocabulary.andP;  Learning how to interact with one collection contributes tolearning about another collection.andP;  One collection might be functionally moreextensive or sophisticated than another.andP;  It could be possible to add newobjects to a collection.andP;  These new objects might already exist in a library,available for selection, or they might be created anew.andP;  The ability toincorporate new objects depends on knowing or learning the vocabulary of thecollection.andP;  The interaction with each collection could be handled withdifferent techniques, forming an additional communication layer.andP;  Forexample, a layer could simply be a template or from to fill out.andP;  Or a layercould be a graphical construction tool.andP;  Or a layer could be text orientedcommands.andM;The work you and your team undertook at Xerox was directed towards realisingthe Dynabook vision.andP;  Was that visions realised?andP;  Is it still valid?andM;The full vision was, of course, not realised during my tenure at Xerox.andP;  Nordid I think we expected it to be.andP;  We expected to lay a foundation that couldevolve over time by many participatns developing and using the system.andP;  Thehardware technology vision was that of an unobtrusive physical container,with easy links to information.andP;  The so-called book computers that are juststarting to appear on the market attempt to realise this aspect of thevision, but whether they actually do it is not yet clear.andP;  And, of course,the key will be the contents - the software- of these devices.andP;  Do they haveimmediately usable software?andP;  Is it possible to refine the software'sexisting functionality?andP;  Is it possible to add new functionality?andM;What work continues in Xerox, ParcPlace and elsewhere, to develop and extendthe Dynabook vision?andM;There are clearly many companies doing the hardware work and user interfacework to add alternative ways in which to give and receive information.andP;  Inthe UK, for example, the Active Book Company comes to mind.andP;  At ParcPlace,our goal is to create a robust system foundation for the professionalprogrammer and then to grow that foundation to service database programmers,script writers and decision analysers.andM;How does ParcPlace Systems' work relate to that done at Xerox?andM;ParcPlace Systems acquired worldwide exclusive ownership of the Smalltalk-80technology from Xerox.andP;  This included all systems code created within thePalo Alto Research Center, all trademarks and copyrights.andP;  The company wascreated to establish a leadership position in object-oriented technology, todeliver full services associated with the technology, includingobject-oriented languages, tools and methodologies.andM;Does ParcPlace do any research work?andM;ParcPlace is run as a product-oriented business, not a research organisation.andO;However, object-oriented technology is an emerging technology, and muchinvention is required to realise its potential.andP;  Considerable effort has goneinto creating a quality training program for products and methodologies.andO;Much of this involved research in understanding the way in which thetechnology could best be introduced into organisations, and ways in which toprescribe repeatable steps for object-oriented analysis and design.andP;  We havecreated true binary portability across multiple hardware/operating systemplatforms.andP;  A file containing an application created on one platform can bemoved to another platform and executed without further intervention by aprogrammer.andP;  This is a significant contribution to development productivity.andO;We also invested effort in understanding how to create an object-orientedfront-end to relational database systems such that the representation ofinformation in the database (as rows and columns in a table) is transparentto the object-oriented developer.andP;  Also, as part of a special project for ahardware vendor, we created a patentable information navigation interface.andM;Sphere of InfluenceandM;Many software products contain user interface features that can be tracedback to the PARC project.andP;  What do you feel are the most importantcontributions, from user' points of view, your project made to the look andfeel of today's software?andM;First, we made it clear that programmer productivity gains can be obtainedsimply by making it possible to access information quickly and to view thatinformation on a single screen (multiple windows as applied to programdevelopment, combined with the ability to extend the screen space by allowingthe windows to overlap).andP;  Second, we demonstrated that programming byrefinement is feasible, and is an exciting opportunity in which to provide aflexible way to share software results.andP;  Our user interface achieved this intwo ways: (1) by allowing you to query a structured source of informationabout code (browser technology), and (2) by letting you copy/cut and pastecode from one program to another.andP;  Of course, the design of the programminglanguage itself also encouraged this approach to programming.andP;  Third, wedemonstrated an understandable mapping from the information modelled in thesoftware system to a visual presentation on a graphical display screen.andP;  Thismapping was extended by a direct relationship between the commands formodifying the model or the graphical display and the display of thesecommands as menus.andP;  By allowing menus to be context-sensitive (that is, tocontain only legally executable commands), it was possible to use the menusas reminders of currently accessible functionality.andM;You notice that I answer your question from the perspective of the user asprogrammer, since that was indeed our focus.andP;  However, end-users, who do notimmediately think of their activities as programming, benefited as well.andO;Clearly, the idea of easily customisable software was derived from theproject's results, as were the use of direct manipulation as the basis forthe user interface design (cut/copy/paste and graphical menus).andM;What other contributions did your project make to programmer's workingenvironments?andM;The project took on the task of synthesising the ideas of object-orientedlanguage properties (found in the Norwegian language Simula) with the notionsof graphical interaction, as demonstrated a number of projects during the1960s.andP;  The result was an exploratory development system, which aimed to easedevelopment where complete requirement specifications were not available.andO;The most significant tool for programmers that we produced was the browser.andO;This application provided a context in which source code could be developed,stored, retrieved and understood through various explanation and crossreferencing techniques.andM;Smalltalk and COBOLandM;Do you see Smalltalk setting down into the 'mainstream' of softwaredevelopment, or just a step on the way towards still greater things?andM;I see the Smalltalk language and associated environment as a majoropportunity for bringing the power of new technology to the MIS/COBOLcommunity, I imagine that this might surprise you.andP;  Ed Yourdon stated in hismagazine, The American Programmer, that Smalltalk was one of the nine keyevents of the 1980s and that it would be the BASIC of the 1990s.andP;  However,BASIC did not have the objective of mapping the programmer's understanding ofthe real world problem directly to the computer description language, whereasCOBOL did (simply stated, records in COBOL clearly match records to bemanipulated in the real world).andP;  Smalltalk is a simulation language, with afocus on specifying the interfaces to communications, files, databases,graphics and so on; it is a way to extend 4GL activities found in the MIScommunity to new decision analysis applications.andM;Is the language design still evolving?andP;  If so, who is the guardian of it?andM;Some small aspects of the language design are still evolving, although theactivities in this area have slowed down considerably, while people get togrips with using the language as it is.andP;  Early on there was standards group,formed under the IEEE Computer Society.andP;  This group still exists, but is notvery active right now.andM;Smalltalk has a reputation for consuming significant machine resources.andP;  Isthis issue being addressed, or will the ever-increasing power of personalcomputers make it irrelevant?andM;Regardless of changes in hardware, it is important for software engineers towork an improving performance and space utilisation.andP;  As hardware improves,it tends to improve all software uniformly; the comparative differencebetween language systems remain.andP;  For Smalltalk, we have always been (andcontinue to be) interested in utilisation of machine resources.andP;  WhenParcPlace started, we set out to create a new implementation machinery thatwould provide portability across processors, operating systems and windowingsystems.andP;  Our approach has been a two-stage compilation, using dynamic codegeneration at the second stage in order to execute machine code at run-time.andO;We continue to examine approaches to compiler optimisation.andP;  We have alsoworked on new techniques for managing the allocation and deallocation ofobjects, trying to improve both speed and main memory consumption.andP;  Given theamount of functionality we provide in the base Smalltalk system (ObjectWorksfor Smalltalk-80), the size of our development run-time image (1.5 MB) isrelatively small.andP;  We have also added new technology for stripping thedevelopment system down to a run-time application version.andP;  All of this hashappened in the last two years, as an outcome of the efforts we took to bringSmalltalk to commercial status.andM;The C++ factorandM;How would you contrast the evolution of Smalltalk with that of C++?andM;Smalltalk had the benefit of a blank sheet-there was absolutely norequirement for compatibility with anything C++, on the other hand, wasspecifically designed as the next step for C programmers.andP;  Anything we did inthe early Smalltalk systems could be (and frequently was) thrown away; wewere purposely isolated from anyone becoming reliant on our results so thatwe could experiment freely.andP;  On the other hand, we designed the Smalltalksystem in synch with groups designing hardware, and constantly tried toinfluence, as well as take advantage of, the hardware technology.andP;  TheSmalltalk project was a personal 'book' computer project, and the languageeffort was combined with the environment (user interface and tool) effort.andO;The C++ development was done in the context of the UNIX/C world and was, tomy understanding, a language project.andM;C++ is nearly independent of its environment, and makes no assumptions aboutthe programmers' tools.andP;  Smalltalk seems inseparable from its environment.andO;How does this contribute to the relative strengths and weaknesses of each?andM;Languages like Smalltalk presume the existence of objects, whereas C++ onlypresumes text in files.andP;  Programs in Smalltalk are collections of interactingobjects.andP;  Having this representation of programs allows you to think of thetools as objects that interact with the programs in interesting ways.andP;  Whenprograms are text, then tools are text processors/text analysers.andP;  The textorientation implies a presentation format, a straightforward way to printprograms on display screens or hard copy.andP;  But the presentation of Smalltalkis a bigger challenge.andP;  It is difficult to know where SMalltalk processesbegin and end; it is even difficult to establish what is and what is notincluded in a particular application.andP;  This is, of course, the reason for theperceived inseparability of Smalltalk from its environment.andP;  You can drawlines, but then these lines create barriers to change.andP;  It is a hallmark of agood Smalltalk system that everything is accessible to exploration throughrefinement or change.andP;  So, traditionally, lines don't get drawn.andP;  There is notechnical reason for not drawing the lines, it is a matter of philosophy.andM;C++, Eiffel and Smalltalk all take different approaches to the application ofOOP techniques.andP;  Do you see these approaches converging?andP;  Is convergencedesirable?andM;In some regards, all three languages attempt to support the same keyobject-oriented properties: encapsulation inheritance and polymorphism.andP;  Thelanguages differ in the mechanisms they employ in providing these properties.andO;More significantly, these languages solve different problems.andP;  We are allgood, of course, in making any language serve any purpose.andP;  But what I amtalking about is th eoriginal design goal of a language.andP;  Smalltalk wasdesigned to make the individual programmer more efficient (and able to handlemore complex application problems), whereas the other languages were designedto make efficient programs.andP;  In the C tradition, and because of th eneed tosupport compatibility with C, the C++ design incorporated th emoststraightforward solutions possible, to make sure that translators could bebuilt using existing technology.andM;Smalltalk comes from a generally free-for-all research background thatattempted to seek out hard problems, in the spirit of making life ultimatelybetter for the programmers, although perhaps tougher for the languageimplementors.andP;  And, of course, Smalltalk accomplished this by insisting thateverything is an object, including classes.andP;  C++ has a more sparingapplication of objects; in fact, the language does not presume the existenceof any objects.andP;  Effel is closer to Smalltalk in this regard.andP;  The languageshave major distinctions in terms of built-in protection mechanisms.andP;  Both C++and Eiffel are strongly typed.andP;  If Smalltalk coverged in this direction, itsimply would not be Smalltalk any more.andP;  Smalltalk and Eiffel take care ofthe allocation and deallocation of objects, whereas C++ does not.andP;  There ismuch talk in th eC++ community of adding automatic storage management to C++systems.andP;  I do not know whether this derivative language would still beconsidered C++.andM;Polymorphism, the binding of names to functions, is handled differently inSmalltalk than in C++ and Eiffel.andP;  C++ and Eiffel have an approach up to'bounded polymorphism'.andP;  Static function resolution (ie determining atcompile time which object handles a message) is possible in both languages.andO;And it is not possible to override such declarations.andP;  Smalltalk is moredynamic.andP;  Again, converging on this point changes the languages.andP;  It ispossible (and it has been done) to add parallel type declaration toSmalltalk, where such an additional mechanism is important.andM;Looking aheadandM;You have spoken of a multi-layered object-oriented system, based on a singlecommon foundation, which users can access at a level appropriate to theirneeds.andP;  Do you think that organisations such as Apple and Microsoft aremoving towards such a system?andM;Since I am not privy to all of Apple's and Microsoft's plans, I cannot speakwith much certainty.andP;  However, I cannot speak with much certainty.andP;  However,from what these organisations have announced, I do not see a willingness tostart over and create the common foundation that permits the extensibilitythat I describe.andP;  Both companies have a long history of code/systems tomaintain.andP;  My general idea comes from thinking about a less hybrid approach.andO;Perhaps the layering of foundations, implied by more hybrid systems andcombination of basically incompatible languages, will suffice, allthough Ifind that there is a great deal of burden in maintaining so much history.andP;  Asis true in the real world of multiple natural languages, intermediariesacting as interpreters and diplomats are needed to deal with the somewhatartificial barriers.andP;  I would imagine that companies that can control so muchof the world's system software might try to avoid the implied problems.andM;Paul G Smith is a freelance software development consultant and technicalwriter specialising in graphics, communications and the application ofobject-oriented techniques.andP;  He can be contacted on CIX as 'pgsmith', and onAppleLink as UK0310.andO;</TEXT></DOC>