<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-216-514  </DOCNO><DOCID>08 216 514.andM;</DOCID><JOURNAL>P.C. Letter  Feb 18 1990 v6 n3 p1(4)* Full Text COPYRIGHT PCW Communications Inc. 1990.andM;</JOURNAL><TITLE>Interoperability has come a long way, baby: cooperatingapplications. (microcomputer software compatibility)andM;</TITLE><DESCRIPT>Topic:     Compatible SoftwareMicrocomputersIndustry AnalysisHistory of ComputingInteroperabilityCooperationSoftware Design.andM;</DESCRIPT><TEXT>The interoperability landscape is littered with idealists.andP;  The very firstattempt to create interoperability in the personal computer industry datesback to 1981 when Software Arts (one of the more idealistic commercialventures to have ever graced the business world) released into the publicdomain a specification for exchanging tabular text data between programs in astandard format called DIF (Data Interchange Format).andP;  Quite a few developersbegan to use DIF as an export format, particularly for moving spreadsheetdata into database files and back again.andM;But Software Arts ran  into the PC-and- 1-2-3 buzz-saw before it could reallybegin to develop the idea of data interchange between programs from differentdevelopers.andP;  And DIF was eventually hidden under a blizzard of file formatsfor single-vendor applications &quot;families&quot;.andP;  (Remember when the rage was forapplications software companies to release a family of applications that allworked together and shared data: Visi, Perfect, Super, Star were appended asprefixes or suffixes to programs that had been written by differentdevelopers using different tools on different instruction sets.andP;  And, ofcourse, all of these programs ignored the file formats of competitiveprograms that were far more important to customers.andP;  My, how naive we werethen!)andM;Idealism took a short vacation in the 1984-1985 time frame, while softwarecompanies beat each other silly to grab a piece of the then-explodingPC-compatible marketplace.andP;  But it came back into style in 1986 or so whenseveral second-tier software companies began to see an opportunity in ridingon file formats and interfaces developed by the first PC software companies.andO;The charge was lead most visibly by yet another long-time idealist, GordonEubanks, as his company began to pitch a product that used the file formatsand look-and-feel of its main competitive target, Pfs File.andP;  Eubanks waspitching for an expanded notion of interoperability that not only includedthe notion of allowing customers to interchange data easily betweendissimilar software or software from different vendors, but also of allowingcustomers to trade up without losing the value of their training by followingstandard interface conventions.andM;In the interim, the subject of interoperability was complicated enormously bytwo radical developments: Apple finally established the Macintosh as thefirst successful alternative to DOS as a software platform and customersfinally started hooking computers together on local networks.andP;  These twodevelopments introduced new axes on the interoperability matrix: softwaredevelopers now had to worry about more than one platform and what that meantfor data interchange and user interface design, and being able to connectcomputers on networks meant that programs could actually start working witheach other through the network.andP;  As well, the more recent arrival ofmultitasking features in the client operating system means that programs canalso work together, even if the computer isn't attached to a network.andM;Despite this vastly more complicated scenario, the notion of gettingapplications software to cooperate for the greater good of the computer useris still strong in the industry.andP;  Currently, the leading proponent ofcooperation is Yogen Dalal, VP of Research andamp; Development for Claris Corp.andO;Dalal could be called the Don Quixote of the PC software industry, since hehas been giving speeches in an attempt to persuade developers to adoptsupport of common file formats and application programming interfaces.andP;  Andhe bas committed his company to actually following words with deeds, asevidenced by Claris's support of the Dataviz system for exchanging formattedtext files (called Xtend by Claris and baked into every new application thecompany is introducing) and by its licensing of Dave Winer's Userland IPCmechanism as a way to get an early start developing ways to hook programstogether.andM;The fact is that everybody wants to be interoperable.andP;  Interoperability islike motherhood, apple pie and the American Way.andP;  Unfortunately, everyinterested party wants something a little different out of interoperability,which makes talking about it almost as difficult as talking about networkingand connectivity.andP;  Indeed, in reflecting on this problem of how to organizeinteroperability, I ended up with the following worksheet.andP;  The problem isthat for each issue in interoperability - file formats, user interface,program cooperation, user programming, code sharing, cross-platformcooperation - each constituent has a different interest level.andP;  And each spoton that matrix between constituent and issue has to be defined for eachrelevant platform.andP;  So you actually need a separate matrix for each specificplatform: PC-DOS, Windows, Macintosh, Presentation Manager, Next, SunOS, etc.andO;I've filled in a sample matrix for the Macintosh, which is a good examplebecause it is a smaller market than DOS and considered an alternative insteadof &quot;the standard&quot;.andM;FILE FORMAT: It is overly simple to say that, wherever data is, you want tobe able to get at it, and that may be the only thing about interoperabilitythat everyone agrees with.andP;  Sure, software developers have mixed feelingsabout supporting competitive file formats.andP;  (Have you ever seen a Lotusspreadsheet that reads an Excel file easily?) But the best developers havealready left that kind of pettiness behind in an attempt to provide betterservice to their customers.andP;  And, given that we're measuring the Macintoshmatrix here, Apple has demonstrated that it really does care about helpingeverybody exchange data with its efforts to fill in all the connectivityboles in the Macintosh system.andP;  Most particularly, the now-standardSuperdrive floppy that can read Macintosh, DOS, and IIGS disks is one of themost amazing gifts to the Macintosh user Apple has ever made.andP;  The same couldnot be said of IBM or other vendors, if we were measuring any other platform.andM;USER INTERFACE: This is the second most agreeable issue in the area ofinteroperability.andP;  Fundamentally, everybody wants programs to use the sameconventions for the same or similar tasks.andP;  This helps reduce training andupgrade costs and makes life simpler for everyone involved.andP;  There are manyconflicts in this area, simply because there are never enough conventions forany possible activity defined in advance, so that newer kinds of activitytend to be defined on an ad-hoc basis.andP;  For instance, on the Macintosh,command-W has recently been defined as the standard speed key for closing awindow.andP;  But many programs have defined that speed key differently for years.andO;So they are either faced with the choice of inconveniencing their users tobecome more interoperable or keeping the status quo to maintaincompatibility.andP;  (Many developers are giving their users soft-menu options tolet them decide, thereby ducking the issue entirely.) On the Macintosh (aswell as on Next and Sun Open Look), the hardware vendor has taken virtuallycomplete responsibility for this issue by aggressively evangelizing userinterface standards.andP;  On DOS and even on Windows and Presentation Manager, noone is really certain just who is responsible.andP;  And that leads to a situationsuch as with Lotus, where the applications developer is trying to create auser-interface superset as a competitive advantage, almost in directopposition to the fundamental idea of a standard interface.andM;PROGRAM COOPERATION: This is the most current interoperability issue, simplybecause multitasking systems and protocols for inter-program cooperation arejust now being implemented or developed for all platforms.andP;  And we all knowthat we're going to have to live with the results for decades to come.andO;Unfortunately, program cooperation is so complex that I've split it intothree separate issues so that it doesn't have to have its own matrix:automated cooperation, programmable cooperation, and portability (see belowfor the last two).andP;  By automated cooperation, I'm referring to the ability ofany program, off the shelf, to be able to cooperate with any other programwithout any intervention from the end-user, buyer, or consultant.andP;  In otherwords, the cooperation needs to be designed into the system and the program.andO;Personally, I believe that this is the most important issue ininteroperability because it is the most universal.andP;  Program cooperationdoesn't require the user to delve into macros and doesn't require unusualcooperation between developers or between software and hardware companies.andO;Rather than try to define all the possible ways that automated programcooperation can be implemented, I've broken out reviews of Microsoft's andApple's approaches below.andM;PROGRAMMABILITY: The interoperability issue here is whether users and otherconstituents can figure out how to make programs cooperate with each other,even if the developers didn't expect them to cooperate that way.andP;  This issuebas different meaning for each type of constituent, but only in degree.andO;Powers users (the kind who have learned to write 1-2-3 macros, Dbaseprograms, or Hypertalk scripts) want to be able to modify their environmentsenough to make it do things that aren't obvious.andP;  Buyers want to be able toset up standard routines that can be distributed to and used by all of theirusers and that save the buyers time and money.andP;  Consultants want to be ableto quickly and easily develop applications that define their value and makeit clear to their clients why they are paying for their service.andP;  The commonthread is that all of these constituencies aren't focused on the technicalissues as much as on the specific talents or skills they have.andP;  The keyfactors aren't how robust the development tools are or bow portable the codeis (as it is with commercial developers), but how little time is takes tolearn the language and compile run-times (if necessary at all).andM;PORTABILITY: The issue is, if a developer is going to make programs formultiple platforms, how to reduce the amount of time spent writing programsto execute similar tasks.andP;  Ideally, from the developers point of view, theycould write a program once and then flip a switch and have the program run onany other platform without any extra work.andP;  This doesn't work, of course,since the people who use programs want them to support the specific featuresof the machine they've spent so much time learning how to use.andP;  (Actually, ina truly ideal world, from the developers point of view, there is only onebinary version of a program needed to run on any machine, but that's what webad for about two years with DOS.andP;  Would anybody still call that ideal?)andO;Portability really doesn't interest users, consultants, or buyers, except tothe degree that they develop and compile their own code.andP;  And hardwarevendors are especially uninterested in portability, since they don't wantdevelopers easily moving their best applications to other, competitiveenvironments.andP;  But most multi-platform developers are developing common codelibraries where core routines are developed and maintained on a singleplatform and then ported to and merged with platform-specific routines tocreate the final program.andM;PLATFORM COOPERATION: I've rarely seen any two people agree on this issue.andO;By platform cooperation, I'm referring to how programs cooperate acrossplatforms in all of the five other areas.andP;  For instance, in regard to userinterface, the assumed truth among multi-platform developers is that havingan identical user interface on the same programs on different platforms isgood.andP;  The benefit is that users can switch among platforms easily withoutretraining and that buyers can spread their training and support investmentacross platforms.andP;  Personally, I find this attitude one of the more speciousin the industry.andP;  First, users use only one machine at a time (except fornerds like industry analysts and product managers) and don't really care howyou're supposed to interact with other machines.andP;  Even worse, most activeusers are at least somewhat religious about their reasons for having adopteda particular platform and don't want to be told that every other platformoffers exactly the same benefits.andP;  Second, what's the point of havingcompetition if everything looks and feels the same? People still seemsurprised that Apple actually doesn't want Microsoft to use the sameconventions in Windows as it uses in the Macintosh, as though the company wasout to somehow damage the user, the industry, and everything else that wasgood and true.andP;  But Apple bas become a  5+ billion company specifically bybeing different.andP;  How could it possibly want its interface to be the same?andM;In terms of the specific issues of platform cooperation, each constituencytends to follow the same kind of thinking.andP;  In general, users tend to beindifferent to the issue, except the degree that they want their programs tocooperate with other programs on other platforms through the network (whichso far is mainly a theoretical issue and therefore not very compelling).andO;Buyers and consultants are very interested in platform cooperation, at leastto the degree that they have to deal with a mixed-platform environment.andP;  Andhardware vendors, in general, are actively uninterested in platformcooperation since it tends to minimize and mask the advantages of theirsystem.andP;  Software developers, for all the public beefing, are actually onlymildly interested in platform cooperation since the smart ones recognize thatthey make serious money and get unusual sales growth when they ignoreplatform cooperation and focus on the issues most specific to a particularplatform.andO;</TEXT></DOC>