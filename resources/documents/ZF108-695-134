<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-695-134  </DOCNO><DOCID>08 695 134.andM;</DOCID><JOURNAL>IBM Systems Journal  June 1990 v29 n2 p274(13)* Full Text COPYRIGHT International Business Machines Corp. 1990.andM;</JOURNAL><TITLE>Knowledge-based systems in the AD/Cycle environment. (IBM'sApplication Development/Cycle program development software)</TITLE><AUTHOR>Hembry, D.M.andM;</AUTHOR><SUMMARY>Knowledge-based systems technology is a branch of artificialintelligence that deals with the processing of knowledge, asdistinct from other branches of artificial intelligence that dealwith topics such as robotics, vision systems, and speechrecognition.andP;  This paper describes how, over the last decade,knowledge-based systems have evolved into a viable technology forbuilding commercial data processing applications, and howincreasing attention has been paid to incorporating theseapplications into commercial data processing environments.andP;  Alogical conclusion of this direction is the capability to buildknowledge-based applications that are full Systems ApplicationArchitecture (SAA) applications.andP;  As this conclusion isapproached, a requirement emerges that the knowledge-baseddevelopment process be integrated with the application developmentenvironment provided by the other SAA language and servicecomponents.andP;  The integrated environment must provide high customerproductivity in the development of applications that useknowledge-based technology, and must support a spectrum ofdevelopment scenarios, ranging from the most basic to thoseinvolving complex applications and large development teams.andP;  Thispaper explores how knowledge-based products can address theserequirements by integrating their development facilities withAD/Cycle.andP;  (Reprinted by permission of the publisher.)andM;</SUMMARY><DESCRIPT>Company:   International Business Machines Corp. (products).andO;Product:   AD/Cycle (CASE software) (usage).andO;Topic:     Integrated SystemsKnowledge-Based SystemsSAAData ProcessingApplications Programming.andO;Feature:   illustrationchart.andO;Caption:   A knowledge-based development environment (chart)Knowledge-based environment with Repository Manager and LibraryServices. (chart)Other Repository Manager and Library Services object use. (chart)andM;</DESCRIPT><TEXT>Knowledge-based systems in the AD/Cycle environment Knowledge-based systemstechnology is a branch of artificial intelligence that deals with theprocessing of knowledge, as distinct from other branches of artificialintelligence that deal with topics such as robotics, vision systems, andspeech recognition.andP;  This paper describes how, over the last decade,knowledge-based systems have evolved into a viable technology for buildingcommercial data processing applications, and how increasing attention hasbeen paid to incorporating these applications into commercial data processingenvironments.andP;  A logical conclusion of this direction is the capability tobuild knowledge-based applications that are full Systems ApplicationArchitecture[TM] (SAA[TM]) applications.andP;  As this conclusion is approached, arequirement emerges that the knowledge-based development process beintegrated with the application development environment provided by the otherSAA language and service components.andP;  The integrated environment must providehigh customer productivity in the development of applications that useknowledge-based technology, and must support a spectrum of developmentscenarios, ranging from the most basic to those involving complexapplications and large development teams.andP;  This paper explores howknowledge-based products can address these requirements by integrating theirdevelopment facilities with AD/Cycle[TM].andM;IBM's AD/Cycle[TM] is directed at improving productivity in the developmentof Systems Application Architecture[TM] (SAA[TM]) applications and themanagement and control of complex application development projects.andM;This paper describes the movement of knowledge-based applications into themainstream of commercial data processing.andP;  It discusses the logicalconclusion of this trend as knowledge-based applications become fullyconformant to SAA.andP;  The trend and SAA conformity result in requirements foradvanced knowledge-based development facilities that can be addressed by theintegration of those facilities with a spectrum of AD/Cycle environments.andM;The term knowledge-based systems [1,2] distinguishes artificial intelligencesoftware products that deal with knowledge about some problem domain fromthose that deal with other areas of artificial intelligence, such asrobotics, vision systems, and speech recognition.andP;  Knowledge-based systemsare tools for building applications that draw logical inferences from theirstored knowledge of the problem domain.andP;  From its early days, knowledge-basedtechnology was recognized as being suitable for building applications thatcapture the knowledge of a human expert and deliver that expertise through acomputer dialog in a manner that emulates the expert.andP;  These are expertsystems.andP;  Some well-known early examples dealt with medical diagnosis [3] andgeological prospecting.andP;  [4]  Today, expert systems are being constructed fora wide range of application types and industries.andM;Increasingly, knowledge-based systems are also being embedded in conventionalapplications that apparently provide no clue to the inferencing componenthidden within them.andP;  Many problems are more amenable to the knowledge-basedinferencing style of programming than to the conventional (high-levellanguage) procedural style.andP;  An example of this is a module that deals withtax regulations, where the multitude of individual regulations are easier toencode (and subsequently maintaine) as knowledge-based rules than asprocedural code.andP;  Such an infencing module that makes tax decisions might beembedded within a COBOL application programmed for a payroll.andP;  Embeddingknowledge-based systems in conventional applications has enormously increasedtheir potential in commercial data processing, and it has generated newdemands to mold knowledge-based systems into a technology that can easily beutilized in that environment.andM;An overview of knowledge-based technologyandM;Most knowledge-based systems are rule-based systems.andP;  The term rule-basedsystems describes a programming paradigm in which discrete pieces ofknowledge are expressed in terms of an expression that states: WHEN somecondition is true, THEN some conclusion can be drawn or some actionperformed.andP;  These rules are utilized under control of an inference enginewhich traces inference chains through these rules, either by starting withsome known facts and exercising the rules in a left to right manner until allpossible conclusions have been drawn (termed data-driven inferencing), or bystarting with a goal (a fact to be determined) and exercising the rules fromright to left until a set of known facts are identified that allow that factto be concluded (termed goal-driven inferencing).andP;  Other, more complex formsexist, such as opportunistic reasoning, but these are less prevalent.andM;Initially the reason for all the excitement about rule-driven inferencing maynot be obvious.andP;  The secret lies in that the rules provided to theknowledge-based application are distinct and, in a sense, are independententities.andP;  The rules can be created individually, generally without regardfor the sequence in which they will be chained to accomplish a giveninferencing task.andP;  New rules may be added to represent new pieces ofknowledge without worrying about their positioning relative to existingrules.andP;  This situation has been compared to building a spreadsheet [5] inwhich cells are defined by the builder as formulae dependent on other cells.andO;The builder is aware of the logical dependencies between the cells beingdefined, but there is complete freedom to physically place the cells anywhereon the spread-sheet and to define them in any convenient order.andP;  The builderdoes not have to be concerned with execution order of the cell formulae sincethe spread-sheet software automatically sequences the execution.andP;  Therule-driven inferencing paradigm shares this characteristic and is frequentlyreferred to as declarative programming to highlight its sequence-insensitivenature, compared with procedural (or algorithmic) programming where all thepaths through the program are completely defined by the programmer.andM;Early knowledge-based products held the facts with which they inferenced assimple data elements.andP;  More recently, systems have introduced frames as amore flexible and powerful way to represent the factual knowledge about aproblem domain.andP;  [6]  Frames typically represent entities in the problemdomain.andP;  A single frame contains a number of slots which represent theattributes of the entity and which are referenced by the rules.andP;  A slot ismade up of some number of facets that identify the attributes of that slot,one of which is its actual value.andP;  Other facets may identify the defaultvalues, constraints, certainty factors, etc., that apply to the slot.andP;  Thelist of facets is not fixed, although certain facets are generally present.andM;Facets may also contain a reference to a procedural routine that isautomatically invoked under certain conditions such as update, deletion, orreference.andP;  These routines, often called demons, can be used for suchpurposes as maintaining referential integrity between frames.andP;  Slots may alsoreference a procedural routine, called a method, that may be invoked bysending messages between frames.andM;Frames support inheritance.andP;  A hierarchy of class and subclass frames may bedefined so that slots and facets, both data and procedures, are inherited bychild frames from parent frames unless overridden by that slot or facet atthe child frame level.andP;  Parent frames are essentially abstract data typesthat function as place holders for the default slots and facets of frameinstances at the lower levels.andP;  Inheritance links may be defined atdefinition time and at execution time.andM;The frame structure provides a knowledge-based application with a very highdegree of flexibility in the data that can be stored to describe entities,the meta-data stored to describe the data, and the relationships that can berepresented between the entities.andM;The rules and the frame definitions in a particular knowledge-basedapplication are generally referred to collectively as the knowledge base.andO;This is the knowledge about a problem domain that, together with specifiedgoals or a set of starting facts, is operated on by the inferencing engine ofthe knowledge-based system.andM;Knowledge-based applications in commercialandM;data processingandM;Early commercial knowledge-based systems.andP;  Early knowledge-based tools werepredominantly built in LISP and ran on specialized LISP workstations.andO;Application development was carried out by an artificial intelligence (AI)professional with an in-depth knowledge of the tool and AI techniques.andP;  LISPskills were typically required, since the LISP of the knowledge-based toolimplementation frequently showed through to the application.andP;  After theinitial years of technological advance, the most successful of these toolsreached a very high level of sophistication in terms of their support ofleading-edge AI techniques.andM;However, the tools were notably lacking in their capability to integrate intothe hardware, operating systems, languages, database, and transaction processing systems typically found in commercial data processingorganizations.andP;  In addition, most tools lacked those qualities loosely called&quot;industrial strength&quot; qualities, such as sharability, usability (particularlyby large development teams), data integrity, and recoverability, and a skillrequirement that did not restrict their use to a small number of extremelyhighly trained AI professionals.andM;The result was that commercial applications at this time were mainlyrestricted to pilot studies and a small number of specialized applicationswhere the financial leverage was strong enough to justify the specializedhardware and the high skills needed for implementation.andP;  The poor capabilityto integrate into commercial environments was typically circumvented bybuilding expert systems for problem domains that were self contained, andthat did not demand tight connection to existing commercial systems.andM;The movement toward knowledge-basedandM;integrationandM;By the mid-1980s, the limited acceptance of knowledge-based technology in thecommercial arena was sufficiently noticeable to prompt questions in the mediaas to whether the early promise of the field had been exaggerated.andP;  At almostthe same time, the crisis was recognized by the knowledge-based systemdevelopers, and there was a collective effort to move the technology out ofthe advanced technology world into the more prosaic, but much wider,commercial environment.andP;  Several key vendors announced their intention toprovide versions of their products to run on commercial mainframes.andP;  Severalnew products were introduced that were designed from the beginning to beintegrated with commercial data processing.andP;  In addition, numbers of smallbut high-function expert system shells for personal computers (PCs) madetheir appearance.andP;  The effects of this change in direction are presentlybeing felt strongly and are probably still gathering momentum.andM;The trend to ever-increasing integration can be seen in IBM's knowledge-basedproducts.andM;Expert System Environment (ESE) _7,8] initially provided a self-containedenvironment for non-data processing professionals to build and consult expertsystems through a terminal interface.andP;  The expected environments for suchprofessional users were time sharing option (TSO) and conversational monitorsystem (CMSe, and accordingly these were the environments in which ESEoperated.andP;  ESE allowed the invocation of external routines written inhigh-level languages, and thereby allowed access to DATA-BASE 2[TM] ~DB2[TM])or Information Management System (IMS) databases.andP;  From its inception, ESEprovided a good degree of integration into commercial mainframe environments.andM;Nevertheless, there soon emerged a strong user requirement to extend accessto ESE knowledge bases from terminals to other applications, includingapplications running under the Information Management System (IMS) orCustomer Information Control System (CICS) transaction management systems.andO;Thus, a recent release of ESE includes an application program interface (API)which provides this access.andP;  [9]  In addition, Expert System ConsultationEnvironment/PC (ESCE is the consultation-time component of ESE) addressesanother requirement, to widen the range of supported environments by allowingthe delivery of ESE applications on a PC running PC/DOS.andM;Knowledge Tool[TM] [V2,.sup.10] on the other hand, instead of being designedwith its own terminal interface (like ESE), was structured from the beginningto integrate efficiently into a high-level commercial language, ProgrammingLanguage/One (PL/I).andP;  By providing a language than can be used in conjunctionwith PL/I, Knowledge Tool V2 has enabled users to mix data-driven inferencingwith the full procedural programming power of the PL/I language in anyapplication on a System/370 or Application System/400[R] (AS/400[TM])platform.andP;  A Knowledge Tool V2 application can use any SAA Common ProgrammingInterface (CPI) services that are available to PL/I, such as Structured QueryLanguage (SQL), as well as other interfaces such as CICS command languagestatements, Graphical Data Display Manager (GDDM[TM]), Interactive SystemProductivity Facility (ISPF), and IMS calls.andP;  Through the interlanguagecommunication capabilities of PL/I, Knowledge Tool V2 can call and be calledby application modules written in C, COBOL, FORTRAN, Pascal, and assemblerlanguage.andP;  KnowledgeTool V2 applications will run under TSO, VM/CMS, IMS,CICS, NetView[TM], and Operating System/400[400] (OS/400[TM]).andM;The marriage of a data driven inferencing capability and a powerfulcommercial high-level language in Knowledge Tool V2 broke new ground inintegrating knowledge-based technology into the business data processingenvironment.andP;  Nevertheless, there are requirements to make this functionavailable on the Operating System/2[TM] (OS/2[R]) platform, as well as toenhance the knowledge-based function provided by Knowledge Tool V2, forexample, to include goal-driven inferencing and a closer integration of ruleswith frames.andM;In December 1989, IBM released IBM Prolog for 370, [11] a replacement for theexisting IBM VM Programming in Logic (VM/Prolog).andP;  This new Prolog version,which supports the Edinburgh Syntax as well as the IBM Prolog syntax withpowerful new extensions and very high performance, will execute under theVirtual Machine/System Product (VM/SP) or Virtual Machine/ExtendedArchitecture (VM/XA[TM]) operating systems.andP;  It may call and be called fromother application modules written in C/370, Restructured Extended ExecutorLanguage (REXX), VS Cobol II, VS Fortran, OS PL/I, or Assembler.andP;  In additionit provides an interface to Structured Query Language/Data System(SQL/DS[TM]) for relational database function, and GDDM and ISPF to managescreen displays.andM;This new version of Prolog, through these interfaces and with theavailability of a run-time environment, brings to the Prolog language a newcapability for integration into commercial data processing.andP;  Remaining knownrequirements to extend this capability include the support of Prolog on otherSAA platforms and further connectivity with SAA CPI components.andM;Finally, to bring this brief chronology to the present day, The IntegratedReasoning Shell, [12] which IBM has identified as the first release of a newstrategic knowledge-based product line, provides forward, backward, andopportunistic reasoning integrated with frames.andP;  It delivers this function onMVS, VM, CICS, IMS, and OS/2 platforms of SSA.andP;  [13]  Requirements associatedwith the delivery of applications built with The Integrated Reasoning Shellthat remain to be addressed include the support of the OS/400 platform,enhanced connectivity to the SAA CPI high-level language and servicecomponents, and enhancements to the knowledge-based function of the system(for example, by providing procedural attachments to frames).andM;Knowledge-based applications for SAA.andP;  The ongoing direction of integratingof knowledge-based technology into commercial data processing will result intools that build applications that conform fully to the Systems ApplicationArchitecture (SAA).andP;  [14,16]  The SAA architecture requires that suchapplications have the following characteristics:andM;* The application is deliverable, with equivalent results, on each of thedefined SAA platforms, namely TSO, VM/CMS, IMS, and CICS on System/370, OS/2,and OS/400.andM;* The application's end-user screen interfaces conform to the SAA Common UserAccess (CUA) standards.andM;* Where necessary, the application should use the defined SAA CPI servicecomponents, such as the SAA database (Structured Query Language), the SAAPresentation Manager[TM], the SAA Dialog Manager, the SAA query manager, andthe SAA communications manager.andM;* The knowledge-based function within an application must be connectable to,or in other words can invoke and be invoked from, the SAA CPI languagecomponents such as C, COBOL, PL/I, Report Program Generator (RPG), etc., andthe SAA CPI generator component implemented by Cross System Product (CSP).andM;* It is desirable that the knowledge-based system itself should define an SAACPI component for defining the rules and frames and other parts of theknowledge base, and for access to the inferencing services of the knowledgebase.andM;The intent and the net result of these SAA architectural requirements is thata knowledge-based application will finally have the same ability to integrateinto a commercial SAA data processing environment as an application builtusing any of the other SAA components.andM;Knowledge-based application development forandM;SAAandM;Knowledge-based technology's evolving capability to deliver applications incommercial data processing environments has greatly increased its potentialin the commercial world, and the future conformance of knowledge-basedapplications with the SAA architecture is intended to maximize thispotential.andP;  To realize the potential, IBM's knowledge basel architecture willevolve to integrate knowledge base development facilities with the facilitiesof AD/Cycle.andP;  The following sections of this paper describe the expecteddirection of this evolution.andM;In practice, knowledge-based development facilities will address a spectrumof commercial development environments as shown in Figure 1.andM;At the simple end of this spectrum is the traditional knowledge-baseddevelopment shell that is oriented towards the individual applicationdeveloper (or knowledge engineer) or a small development team, and is focusedon the life-cycle phases of building and testing the knowledge-basedapplication.andP;  Typically, this simple environment iwll be used for prototypingor to develop small, stand-alone expert systems.andP;  It roughly corresponds inscope to the development environment provided today by ESE.andP;  At this end ofthe spectrum, only a few other application development products might be usedby a developer in conjunction with the knowledge-based product.andM;Such a basic development environment for knowledge-based applications isshown in cooperative form in Figure 2.andP;  This development environment can berecognized as a derivative of the OS/2 development environment provided byThe Integrated Reasoning Shell.andP;  It utilizes the graphic capabilities of thePersonal System/2[R] (PS/2[R]) programmable workstation (PWS) to provide ahighly responsive, highly usable object-oriented editor for the definitionand interrelationship of rules, frames, procedural routines, and otherobjects [16] of the knowledge-based application.andM;Testing of the application is performed with a debug facility that visualizesinformation about rule inference chains, frames, and other knowledge baseobjects.andP;  Changes to the knowledge base definition are possible directly fromthe debug environment, and incremental compilation techniques are used toprovide a fast iteration around the edit/debug/edit cycle.andP;  If a high-levellanguage debugger is installed, then the two debuggers will work in acomplementary fashion to present an integrated end-user interface thatsupports the debugging of both the inferencing and procedural parts of anapplication in a single debug session.andM;At this end of the spectrum, the knowledge-based development process ismanually controlled through dialogs that are based on the object-actionprinciple and are consistent with AD/Cycle user interface standards.andP;  Theknowledge-based objects that are defined may be stored in private fileseither on the PWS or on a host.andM;This knowledge-based development environment builds applications to satisfyall the requirements for SAA applications that were described in the sectionon knowledge-based applications for SAA.andP;  The development environment runseither on a stand-alone PS/2 platform to build applications for delivery onOS/2, or on a cooperative programmable workstation plus host configuration(System/370 or AS/400) as shown in Figure 2, to allow the building ofapplications targeted for a host environment.andP;  In the latter case, theapplication is uploaded to the target environment for the processes ofcompilation and debugging, with the programmable workstation being used forthe control and viewing of this process.andM;At the other end of the spectrum, shown in Figure 1, is the customer withcomplex development projects that consist of mixed knowledge-based andhigh-level language or generator components, with large development teams andthe need to integrate the knowledge-based development process with a range ofother AD/Cycle tools.andM;For such complex application development environments, the knowledge-baseddevelopment facilities work in conjunction with the other facilities ofAD/Cycle.andP;  The specific additional items of integration with AD/Cycle follow:andM;* The AD information model of AD/Cycle is extended to include knowledge-basedobjects (rules, frames, etc.).andM;* The knowledge-based system development environment stores knowledge-basedobjects under the control of the Repository Manager[TM] and Library Services.andM;* The knowledge-based system development executes under the control ofAD/Cycle's work management facilities.andM;* Access to and the complementary use of other AD tools in the AD/Cycleenvironment is enabled.andM;The following sections describe how these items of integration with AD/Cycleenhance the knowledge-based development environment in the areas ofmanagement and control of complex development projects involving largedevelopment teams, and productivity in the development of knowledge-basedapplications.andM;Management and control of the knowledge-basedandM;development processandM;Library control of knowledge-based objects.andP;  A knowledge base is comprised ofa variety of objects.andP;  Object classes may include rules, frames, demons, andother constructs, or collections of these.andP;  Each object instance is definedindividually, using edit facilities oriented toward each type of object.andM;A hypothetical set of objects making up a knowledge-based application isshown in Figure 3.andP;  In many cases, the relationships between these objectsare one-to-many or many-to-many.andP;  for example, multiple rules and more thanone knowledge base may be sensitive to the definition of a particular frame,or more than one knowledge base may use a particular rule.andP;  In practice, thismeans that separate development teams developing different knowledge baseswithin a complex application may be sensitive to the same objects.andM;In large application development projects, the knowledge-based developmentfacilities obtain library control over the objects by storing them under thecontrol of the Repository Manager and Library Services.andP;  This control isavailable during development and during the subsequent production andmaintenance phases of the application's life cycle.andP;  Figure 4 shows theknowledge-based development environment using the Repository Manager andLibrary Services for object storage.andP;  The Library Services provide functionsthat are familiar in high-level language development library systems.andO;Changes to shared objects by multiple developers are serialized by lockingthe objects.andP;  Multiple versions of each object (for example, development,test, and production) are recognized and managed.andP;  A version of an object fordevelopment or test is obtained from a higher version of that object andsubsequently promoted back to a higher level in a controlled manner.andP;  LibraryServices provide a build facility, that ensures that consistent objects areutilized in building an executable knowledge base, and recognizes theexistence of multiple releases of the application over its lifetime, wheresome objects are common to the different releases and some objects aredistinct.andM;The Library Services support applications consisting of both high-levellanguage components (for example a COBOL main program), and the knowledgebase and its constituent objects.andP;  Applications may be either fully hostresident or cooperative, involving both host-resident and PS/2-residentelements.andM;Automated control of the knowledge-based development process.andP;  Figure 4 alsoshows the knowledge-based development environment with the superimposition ofthe AD/Cycle work management facilities over the dialogs.andP;  [17]andM;A management-related requirement for large development projects is forautomated control over the actual process of development.andP;  In AD/Cycle, thisrequirement will be addressed by an AD/Cycle tool that provides facilitiessuch as those available today in the Application Development Project Support(ADPS) for System/370.andP;  [18]  This AD tool uses a process model and currentstatus information for the project to guide the user thorugh the applicationdevelopment process.andP;  Knowledge-based development facilities will beinvocable from the process management AD tool, and will return status andcompletion information at their termination.andM;Productivity of the knowledge-basedandM;development processandM;Higher productivity in application development depends on addressing fourareas: reuse, reduced complexity, automation of manual tasks, and eliminationof redundant work.andM;Knowledge-based object reuse.andP;  In a knowledge-based environment, code reuseimplies the reuse of the objects--rules, frames, procedural functions, orgroups of these objects.andP;  This is enabled through the storage of theknowledge-based objects under the control of the Repository Manager withextensive cross reference information.andM;Frames for reuse will be located in the Repository Manager by searching forframes containing particular named frame slots (i.e., data items) ofinterest, by searching for frames containing certain keywords in their textdescriptions, or by other methods.andP;  Essentially the task is to be able tofind a frame that is pertinent to the domain of the application beingdesigned.andP;  Once a candidate frame is located, it and its parent and relatedframes are displayed graphically by the frame editor, and the user ispermitted to browse the frame graph and select portions to be pasted into theframe graph which holds the frame objects of the new application.andP;  Usingstandard knowledge-based system edit facilities, the user can manually createnew links between the reused frames and any other frames in the application.andO;The process is shown in Figure 4.andM;Just as candidate frames can be located and reused, so candidate rules orgroups of rules that reference a frame or particular slots within a frame canbe found via frame-to-rule cross reference information in the RepositoryManager.andP;  Such rules encode knowledge about the entities represented by theframes and are also candidates for reuse.andP;  The rules may be displayed by therule editor, evaluated for reuse by the developer, and if suitable copiedinto the new application.andM;Automatic generation of knowledge-based objects.andP;  If reusable frames do notexist, the facilities will be provided to assist the developer in generatingnew frame definitions.andM;The knowledge-based development environment shown in Figure 4 is furtherextended in Figure 5 to show the automatic building of frame objects fromenterprise model and database descriptor information in the RepositoryManager.andM;Typically, frame classes in a knowledge-based application represent classesof entities that exist in the real world and the logic that the applicationswill use for reasoning.andP;  The entitiy classes, their attributes, and therelationships between them may already be described as an enterprise model,placed in the Repository Manager by enterprise analysis tools.andP;  Figure 3shows the relationships between the knowledge-based objects and some otherRepository Manager data that describe enterprise model entities andattributes (and also database descriptors, which are referred to below).andO;Skeleton class frame definitions for a knowledge-based application can beconstructed automatically from these enterprise model entities by mapping theentity-relationship model to a frame model with slots and links.andP;  Someenterprise analysis tools already organize their identified entities intohierarchic structures, with common properties abstrcted into parent classesfor inheritance by subclasses.andP;  Such structures will map to the inheritancestructure of the frame system.andM;Enterprise model information of interest may be located by searching theRepository Manager for entity or entity attribute names (data items) ofinterest, or for user-supplied keywords in a text description of the entity.andO;The enterprise model entities and their relationships are displayedgraphically, and the user browses the graph and locates a subject ofinterest.andP;  Those entities, with their attributes and relationships, aretransformed into a collection of skeleton class frames.andP;  On return to theknowledge-based frame editor, the skeleton frames are pasted into the newapplication's frame graph where they can be further edited and linked toother frames.andM;Once new frames are constructed in this way they are automatically placedunder control of the Repository Manager, and are related to the otherknowledge base objects and the enterprise model from which they were derived.andO;Generating frames from the enterprise model in this manner provides the twinbenefits of productivity (by elimination of the manual definition task) andaccuracy (automatic generation will be more accurate than manual entry).andM;Another scenario for frame definition occurs when the intent is to build (orsource) frame instances at run time from data in a database.andP;  In this case,it is necessary to provide a frame class definition to match some view of thedatabase, and to generate a sourcing object containing the SQL statements toperform the database access.andP;  The specification of a sourcing object willrequire that the table (or view) name, column names(s) and their mapping toframe slots, and seach arguments are provided.andP;  Without Repository Servicesthese specifications would be entered manually.andP;  The Repository Manager,however, may contain database descriptions, placed there either by a databasedesign AD tool or manually by the database administrator, which allow askeleton frame definition and its associated sourcing objects to beconstructed.andP;  These frame and sourcing objects are stored and linked in theRepository Manager to related knowledge-based objects and also to thedatabase descriptions from which they are derived.andP;  Like the generation offrames from enterprise model data, this automatic frame generation fromdatabase descriptions provides the twin benefits of productivity andaccuracy.andM;Access to other D tools.andP;  As described in the previous section,knowledge-base application development productivity will benefit from thepresence of enterprise modeling tools and database design tools.andP;  Inaddition, AD/Cycle will provide the developer with access to other AD toolsthat participate in that environment.andP;  Many of these tools address tasks thatare potentially as relevant to the development of knowledge-basedapplications as to conventional applications.andM;Cross life-cycle tools are used over all life-cycle phases of AD/Cycle.andP;  Theyinclude documentation tools, project management tools, impact analysis tools,and query/report tools for the Repository Manager.andP;  &quot;Screen paintersc areused for the creation of text, object, or graphics-oriented dialogs.andP;  Otherapplication-enabling facilities, the high-level languages or the applicationgenerator, are available for the production of any parts of an applicationthat do not make use of the knowledge-based system.andP;  Tools are used toautomate regression testing (such as IBM's Workstation Interactive Test Tool)or to manage the testing process.andM;In some cases, such complementary AD tools will be accessed by the userthrough the work management facilities of AD/Cycle.andP;  In other cases, theywill be invoked directly from within the knowledge-based system developmentfacility.andM;Knowledge acquisition tools.andP;  Knowledge acquisition is the term given to thecollection of knowledge about some problem domain, in a form that allows itto be used within a knowledge base.andP;  In effect, knowledge acquisition is theanalysis and design front-end phase of knowledge-based technology, andsuccessful knowledge acquisition tool will improve development productivity.andM;In its simplest form, knowledge acquisition is simply manual systems analysiswith a pad and pencil (and perhaps a tape recorder).andP;  The term is more oftenused, though, to imply special tools or aids, or at least techniques, thatare oriented to the construction of knowledge base components such as rulesand frames.andP;  Well-known examples include repertory grid analysis andinduction.andP;  More recently, formal, structured techniques that are analogousto the structured analysis techniques of conventional enterprise analysis arebeginning to emerge, and it is likely that integrated methods and supportingtools that address the requirements of both conventional and knowledge-basedapplication development will evolve over time.andM;A review of knowledge acquisition is beyond the scope of this paper, but theimportant point is that as such tools become available, they will themselvesbe integrated with AD/Cycle and will communicate their results to theknowledge-based system development environment via appropriate data usingRepository Services and Library Services.andM;Library control of knowledge-based objects.andP;  The library control andautomated process control described in the last section contribute toenhanced productivity through reduced complexity and automation of manualtasks.andP;  The manual alternatives to an automated library control system aregenerally tedious, time consuming, and error prone.andM;Knowledge-based assistance of the development process.andP;  This paper hasfocused on the integration of knowledge-based application development intoAD/Cycle, the goal being to use the facilities of AD/Cycle to enhance thedevelopment of knowledge-based applications.andP;  However, the paper would beincomplete without mention of the &quot;mirror image&quot; topic, namely the use ofknowledge-based systems to benefit AD/Cycle by applying an AI assist factorto the AD tools and facilities of AD/Cycle.andP;  Leading-edge informationengineering tools available from some non-IBM developers already useknowledge-based technology extensively.andP;  It is expected that this trend willcontinue in the future and will allow AD tool builders (both IBM and non-IBM)to implement sophisticated development methodologies that will permit higherproductivities than could be achieved through conventional designs.andM;In addition to such truly breakthrough applications of knowledge-basedsystems, it is expected that this technology will become pervasive throughoutthe application development environment in a number of unobtrusive ways, suchas &quot;smart&quot; (expert system) help facilities that are tightly coupled to theexecution of a specific AD tool.andP;  Smart defaults may recommend a course ofaction or a parameter value to a developer based on a knowledge of the userand a history of the development session, and embedded knowledge bases mayperform a variety of (normally) invisible background tasks, such as checkingfor standards conformance.andP;  Almost any AD tool or facility within AD/Cycle isa candidate for one or more of these types of assitance.andM;SummaryandM;This paper has briefly reviewed the evolution of knowledge-based technology,described its current level of integration into mainstream commercial dataprocessing, and made the point that the logical end result of this evolutionis the full integration of knowledge-based systems with IBM's SystemApplication Architecture (SAA).andM;The paper has made the further key point to realize the potential of thisintegration with SAA, IBM's knowledge-based application developmentfacilities will also evolve to integrate with AD/Cycle.andP;  The expecteddirection of such AD/Cycle support was outlined, and its rationale wasdescribed in terms of the enhanced management control and productivity of theknowledge-based development process that will be essential to ensure itsacceptance by the commercial data processing community.andM;Cited references and noteandM;[1.] P. Harmon and D. King, Expert Systems--Artificial Intelligence inBusiness, Wiley-Interscience Publishers, New York, NY (1985).andM;[2.] D.A.andP;  Waterman, A Guide to Expert Systems, Addison-Wesley PublishingCo., REading, MA (1986).andM;[3.] E. H. Shortliffe, Computer-Based Medical Consultations: MYCIN, Elsevier,New York (1976).andM;[4.] R. Duda P. E. Hart, N. J. Nilsson, P. Barrett, J. G. Gaschnig, K.andO;Konolige, R. Reboh, and J. Slocum, Development of the PROSPECTOR ConsultationSystem for Mineral Exploration, SRI Report, Stanford Research Institute, 333Ravenswood Avenue, Menlo Park, CA (October 1978).andM;[5.] M. I. Schor, &quot;Declarative Knowledge Programming: Better thanProcedural,&quot; IEEE Expert, IEEE, 345 E. 47th St., New York (Spring 1986).andM;[6.] M. Minsky, &quot;A Framework for Representing Knowledge,&quot; in The Psychologyof Computer Vision, P. Winston, Editor, McGraw-Hill Book Co., Inc., New York(1975).andM;[7.] Expert Systems Development Environment User's Guide, SC38-7006, IBMCorporationandgt; available through IBM branch offices.andM;[8.] Expert Systems Consultation Environment User's Guide, SC38-7005, IBMCorporationandgt; available through IBM branch offices.andM;[9.] Expert Systems Environment Application Programming Guide, SC38-7020, IBMCorporationandgt; available through IBM branch offices.andM;[10.] Knowledge Tool, General Information Manual, GH20-9259, IBM Corporationandgt;available through IBM branch offices.andM;[11.] IBM Prolog for 370, General Information Manual, GH21-1005, IBMCorporationandgt; available through IBM branch offices.andM;[12.] The Integrated Reasoning Shell, General Information, GH21-1005, IBMCorporationandgt; available through IBM branch offices.andM;[13.] Support of the AIX platforms by The Integrated Reasoning Shell is notaddressed in this paper.andM;[14.] Systems Application Architecture--An Overview, GC26-4341, IBMCorporationandgt; available through IBM branch offices.andM;[15.] IBM System Journal 27, No.andP;  3 (1988, whole issue).andM;[16.] Rules, frames, procedural routines, data sources, and various othercomponents of a knowledge-based application are typically (and specifically,in The Integrated Reasoning Shell) referred to as &quot;objects&quot; to reflect theapplication developer's perception of these components.andP;  The knowledge-basedsystem development environment presents the components graphically asdiscrete objects that may be individually manipulated for the purposes ofdefinition and interrelation.andP;  In addition a knowledge-based system may,depending on its design, implement the knowledge-based application using theobject-oriented programming paradigm, with the frames, rules, etc.,andO;represented by objects in this sense.andP;  However, this latter characteristic isnot universal.andM;[17.] G. Chroust H. Goldman, and O. Gschwandtner, &quot;The Role of WorkManagement in Application Development,&quot; IBM Systems Journal 29, No.andP;  2,189-208 (1990, this issue).andM;[18.] Application Development Project Support/Application Development Modeland Application Development Project Support/Process Mechanism GeneralInformation Manual, GH19-8109, IBM Corporationandgt; available through IBM branchoffices.andM;Douglas M. Hembry  IBM Programming Systems, 2800 sand Hill Road, Menlo Park,CAlifornia 94025.andP;  Mr. Hembry's present assignment is in the technical officeof the knowledge-based systems development group at IBM's Menlo Parklaboratory.andP;  He joined IBM United Kingdom in 1965 as a system engineer, andfrom 1972 to 1975 worked as a data systems specialist at the UK SystemsCenter.andP;  From 1975 through 1982, he continued the role of data systemsspecialist at the International Systems Center (then the World Trade SystemsCenter) at Palo Alto, the Western Region Systems Center of IBM Canada atVancouver, and the Calgary, Alberta, branch office where he supported thedata systems operations of a number of large customers.andP;  In 1982 hetransferred to the Information Management Systems (IMS) development group ofthe IBM General Products Division in Santa Teresa, California, where he hadplanning responsibility for IMS's high availability characteristics.andP;  Mr.andO;Hembry moved to the technical office of the knowledge-based systems group in1987 and has been responsible for the planning and architecture of IBM'sknowledge-based system offerings toward full integration into SAA andAD/Cycle.andP;  Mr. Hembry received his B.S.andP;  degree from the University of Londonin 1964, with first-class honors in physics and mathematics.andO;</TEXT></DOC>