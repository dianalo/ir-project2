<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-486-422  </DOCNO><DOCID>08 486 422.andM;</DOCID><JOURNAL>Communications of the ACM  March 1990 v33 n3 p363(3)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Abstracts from other ACM publications.andM;</TITLE><DESCRIPT/><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Abstracts from Other ACM PublicationsandM;ACM Computing SurveysandM;Programming Languages for Distributed Computing SystemsandM;When distributed systems first appeared, they were programmed in traditionalsequential languages, usually with the addition of a few library proceduresfor sending and receiving messages.andP;  As distributed applications became morecommonplace and more sophisticated, this ad hoc approach became lesssatisfactory.andP;  Researchers all over the world began designing new programminglanguages specifically for implementing distributed applications.andP;  Theselanguages and their history, their underlying principles, their design, andtheir use are the subject of this paper.andM;We begin by giving our view of what a distributed system is, illustratingwith examples to avoid confusion on this important and controversial point.andO;We then describe the three main characteristics that distinguish distributedprogramming languages from traditional sequential languages, namely, how theydeal with parallelism, communication, and partial failures.andP;  Finally, wediscuss 15 representative distributed languages to give the flavor of each.andO;These examples include languages based on message passing, rendezvous, remoteprocedure call, objects, and atomic transactions, as well as functionallanguages, logic languages, and distributed data structure languages.andP;  Thepaper concludes with a comprehensive bibliography listing over 200 papers onnearly 100 distributed programming languages.andM;How to Write Parallel Programs: A Guide to the PerplexedandM;We present a framework for parallel programming, based on three conceptualclasses for understanding parallelism and three programming paradigms forimplementing parallel programs.andP;  The conceptual classes are resultparallelism, which centers on parallel computation of all elements in a datastructure; agenda parallelism, which specifies an agenda of tasks forparallel execution; and specialist parallelism, in which specialist agentssolve problems cooperatively.andP;  The programming paradigms center on live datastructures that transform themselves into result data structures; distributeddata structures that are accessible to many processes simultaneously; andmessage passing, in which all data objects are encapsulated within explicitlycommunicating processes.andP;  There is a rough correspondence between theconceptual classes and the programming methods, as we discuss.andP;  We begin byoutlining the basic conceptual classes and programming paradigms, and bysketching an example solution under each of the three paradigms.andP;  The finalsection develops a simple example in greater detail, presenting andexplaining code and discussing its performance on two commercial parallelcomputers, an 18-node shared-memory multiprocessor, and a 64-nodedistributed-memory hypercube.andP;  The middle section bridges the gap between theabstract and the practical by giving an overview of how the basic paradigmsare implemented.andM;We focus on the paradigms, not on machine architecture or programminglanguages.andP;  The programming methods we discuss are useful on many kinds ofparallel machines, and each can be expressed in several different parallelprogramming languages.andP;  Our programming discussion and the examples use theparallel language C-Linda for several reasons:andM;ACM Transactions on GraphicsandM;A Geometric Characterization of Parametric Cubic CurvesandM;In this paper, we analyze planar parametric cubic curves to determineconditions for loops, cusps, or inflection points.andP;  By expressing the curveto be analyzed as a linear combination of control points, it can betransformed such that three of the control points are mapped to specificlocations on the plane.andP;  We call this image curve the canonical curve.andO;Affine maps do not affect inflection points, cusps, or loops, so the analysiscan be applied to the canonical curve instead of the original one.andP;  The mainparadigms are all simple to express in Linda; efficient Linda implementationsexist on a wide variety of parallel machines; and a wide variety of parallelprograms have been written in Linda.andM;Conception, Evolution, and Application of FunctionalandM;Programming LanguagesandM;The foundations of functional programming languages are examined from bothhistorical and technical perspectives.andP;  Their evolution is traced throughseveral critical periods: early work on lambda calculus and combinatorycalculus, Lisp, Iswim, FP, ML, and modern functional languages such asMiranda and Haskell.andP;  The fundamental premises on which the functionalprogramming methodology stands are critically analyzed with respect tophilosophical, theoretical, and pragmatic concerns.andP;  Particular attention ispaid to the main features that characterize modern functional languages:higher-order functions, lazy evaluation, equations and pattern matching,strong static typing and type inference, and data abstraction.andP;  In addition,current research areas -- such as parallelism, nondeterminism, input/output,and state-oriented computations -- are examined with the goal of predictingthe future development and application of functional languages.andM;The Family of Concurrent Logic Programming LanguagesandM;Concurrent logic languages are high-level programming languages for paralleland distributed systems that offer a wide range of both known and novelconcurrent programming techniques.andP;  Being logic programming languages, theypreserve many advantages of the abstract logic programming model, includingthe logical reading of programs and computations, the convenience ofrepresenting data structures with logical terms and manipulating them usingunification, and the amenability to metaprogramming.andP;  Operationally, theirmodel of computation consists of a dynamic set of concurrent processes,communicating by instantiating shared logical variables, synchronizing bywaiting for variables to be instantiated, and making nondeterministicchoices, possibly based on the availability of values of variables.andM;This paper surveys the family of concurrent logic programming languageswithin a uniform operational framework.andP;  It demonstrates the expressive powerof even the simplest language in the family and investigates how varying thebasic synchronization and control constructs affect the expressiveness andefficiency of the resulting languages.andM;In addition, the paper reports on techniques for sequential and parallelimplementation of languages in this family, mentions their applications todate, and relates these languages to the abstract logic programming model, tothe programming language PROLOG, and to other concurrent computational modelsand programming languages.andM;Since the first three points are fixed, the canonical curve is completelycharacterized by the position of its fourth point.andP;  The analysis thereforereduces to observing which region of the canonical plane the fourth pointoccupies.andP;  We demonstrate that for all parametric cubes expressed in thisform, the boundaries of these regions are conics and straight lines.andP;  Specialcases include Bezier curves, B-splines, and Beta-splines.andP;  Such acharacterization forms the basis for an easy and efficient solution to thisproblem.andM;Blending Parametric SurfacesandM;A blending surface is a surface that smoothly connects two given surfacesalong two arbitrary curves, one on each surface.andP;  This is particularly usefulin the modeling operations of filleting a sharp edge between joining surfacesor connecting disjoint surfaces.andP;  In this paper we derive a new surfaceformulation for representing surfaces which are blends of parametricsurfaces.andP;  The formulation has the advantage over the traditional rationalpolynomial approach in that point and normal values have no gaps between theblending surface and the base surfaces.andP;  Shape control parameters thatcontrol the cross-sectional shape of the blending surface are also available.andO;In addition, the base surfaces are not restricted to any particular type ofsurface representation as long as they are parametrically defined and have awell-defined and continuous normal vector at each point.andP;  The scheme isextensible to higher orders qf geometric continuity, although we concentrateon G(1).andM;Automatic Parsing of Degenerate Quadric-Surface IntersectionsandM;In general, two quadric surfaces intersect in a nonsingular quartic spacecurve.andP;  Under special circumstances, however, this intersection may&quot;degenerate&quot; into a quartic with a double point, or a composite of lines,conics, and twisted cubics whose degrees, counted over the complex projectivedomain, sum to four.andP;  Such degenerate forms are important since they occurwith surprising frequency in practice and, unlike the generic case, theyadmit rational parameterizations.andP;  Invoking concepts from classical algebraicgeometry, we formulate the condition for a degenerate intersection in termsof the vanishing of a polynomial expression in the quadric coefficients.andO;When this is satisfied, we apply a multivariate polynomial factorizationalgorithm to the projecting cone of the intersection curve.andP;  Factors of thiscone which correspond to intersection components &quot;at infinity&quot; may be removeda priori.andP;  A careful examination of the remaining cone factors thenfacilitates the identification and parameterization of the various real,affine intersection elements that may arise: isolated points, lines, conics,cubics, and singular quartics.andP;  The procedure is essentially automatic(avoiding the tedium of case-by-case analyses), encompasses the full range ofquadric forms, and is amenable to implementation in exact (symbolic)arithmetic.andM;A Multisided Generalization of Bezier SurfacesandM;In this paper we introduce a class of surface patch representations, calledS-patches, that unify and generalize triangular and tensor product Beziersurfaces by allowing patches to be defined over any convex polygonal domain;hence, S-patches may have any number of boundary curves.andP;  Other properties ofS-patches are geometrically meaningful control points, separate control overpositions and derivatives along boundary curves, and a geometric constructionalgorithm based on de Casteljau's algorithm.andP;  Of special interest are theregular S-patches, that is, S-patches defined on regular domain polygons.andO;Also presented is an algorithm for smoothly joining together these surfaceswith [C.sup.k] continuity.andM;A Round Trip to B-Splines via de CasteljauandM;B-splines are constructed from Bezier curves solely using de Casteljau'sconstruction.andP;  Divided differences are not being used, nor is Mansfield'srecurrence formula presupposed.andP;  Yet, it is shown how to differentiate,subdivide, and evaluate a B-spline.andP;  These results are derived from thecorresponding techniques of Bezier curves.andM;ACM Transactions on Mathematical SoftwareandM;The Influence of Relaxed Supernode Partitions onandM;the Multifrontal MethodandM;In this paper we present an algorithm for partitioning the nodes of a graphinto supernodes, which improves the performance of the multifrontal methodfor the factorization of large, sparse matrices on vector computers.andP;  Thisnew algorithm first partitions the graph into fundamental supernodes.andP;  Next,using a specified relaxation parameter, the supernodes are coalesced in acareful manner to create a coarser supernode partition.andP;  Using this coarserpartition in the factorization generally introduces logically zero entriesinto the factor.andP;  This is accompanied by a decrease in the amount of sparsevector computations and data movement and an increase in the number of densevector operations.andP;  The amount of storage required for the factor isgenerally increased by a small amount.andP;  On a collection of moderately sized3-D structures, matrices speedups of 3 to 20 percent on the Cray X-MP areobserved over the fundamental supernode partition which allows no logicallyzero entries in the factor.andP;  Using this relaxed supernode partition, themultifrontal method now factorizes the extremely sparse electric powermatrices faster than the general sparse algorithm.andP;  In addition, there ispotential for considerably reducing the communication requirements for animplementation of the multifrontal method on a local memory multiprocessor.andM;The Multifrontal Method and Paging in Sparse CholeskyandM;FactorizationandM;In this paper, we show that the multifrontal method can have significantadvantage over the conventional sparse column-Cholesky scheme on a pagedvirtual memory system.andP;  A more than tenfold reduction in paging activitiescan be achieved, which saves as much as 20 percent in factorization time.andP;  Wealso introduce a hybrid sparse factorization method, which uses a mixture ofcolumn-Cholesky and submatrix-Cholesky operations.andP;  By switching to the useof frontal matrices from column-Cholesky operations at appropriate columns,we demonstrate that the proposed hybrid scheme has an advantage over thesparse column-Cholesky method in reducing paging activities and over themultifrontal method in its adaptability to the amount of available workingstorage.andM;A Comparison of Adaptive Refinement Techniques for EllipticandM;ProblemsandM;Adaptive refinement has proved to be a useful tool for reducing the size ofthe linear system of equations obtained by discretizing partial differentialequations.andP;  We consider techniques for the adaptive refinement oftriangulations used with the finite element method with piecewise linearfunctions.andP;  Several such techniques that differ mainly in the method fordividing triangles and the method for indicating which triangles have thelargest error have been developed.andP;  We describe four methods for dividingtriangles and eight methods for indicating errors.andP;  Angle bounds for thetriangle division methods are compared.andP;  All combinations of triangledivisions and error indicators are compared in a numerical experiment using apopulation of eight test problems with a variety of difficulties (peaks,boundary layers, singularities, etc.).andP;  The comparision is based on theL-infinity norm of the error versus the number of vertices.andP;  It is found thatall of the methods produce asymptotically optimal grids and that the numberof vertices needed for a given error rarely differs by more than a factor oftwo.andM;ALGORITHM 676andM;ODRPACK: Software for Weighted Orthogonal DistanceandM;RegressionandM;In this paper, we describe ODRPACK, a software package for the weightedorthogonal distance regression problem.andP;  This software is an implementationof the algorithm described in [2] for finding the parameters that minimizethe sum of the squared weighted orthogonal distances from a set ofobservations to a curve or surface determined by the parameters.andP;  It can alsobe used to solve the ordinary nonlinear least squares problem.andP;  The weightedorthogonal distance regression procedure has an application to curve andsurface fitting and to measurement error models in statistics.andP;  The algorithmimplemented is an efficient and stable trust region (Levenberg-Marquardt)procedure that exploits the structure of the problem so that thecomputational cost per iteration is equal to that for the same type ofalgorithm applied to the ordinary nonlinear least squares problem.andP;  Thepackage allows a general weighting scheme, provides for finite differencederivatives, and contains extensive error checking and report generatingfacilities.andM;ALGORITHM 677andM;[C.sup.1] Surface InterpolationandM;A method of bivariate interpolation and smooth surface fitting is developedfor rapidly varying z values given at points irregularly distributed in thex-y plane.andP;  The surface is constructed by means of [C.sup.1] triangularinterpolants defined on a triangulation of the convex hull of the points set.andO;The needed partial derivative values are estimated by a new method based on aminimization criterion making use of a tension parameter.andP;  This method, whichis shown to be efficient and accurate, gives the user an interactive tool tocontrol the behavior of the interpolant surface and to dampen unwantedoscillations near steep gradients.andP;  The algorithm of this proposed method isdescribed.andM;Indefinite Integration with ValidationandM;We present an overview of two approaches to validated one-dimensionalindefinite integration.andP;  The first approach is to find an inclusion of theintegrand, then integrate this inclusion to obtain an inclusion of theindefinite integral.andP;  Inclusions for the integrand may be obtained fromTaylor polynomials, Tschebyscheff polynomials, or other approximating formswhich have a known error term.andP;  The second approach finds an inclusion of theindefinite integral directly as a linear combination of function evaluationsplus an interval-valued error term.andP;  This requires a self-validating form ofa quadrature formula such as Gaussian quadrature.andP;  In either approach,composite formulae improve the accuracy of the inclusion.andM;The result of the validated indefinite integration is an algorithm which maybe represented as a character string, a subroutine in a high-levelprogramming language such as Pascal-SC or Fortran, or as a collection ofdata.andP;  An example is given showing the application of validated indefiniteintegration in constructing a validated inclusion of the error function,erf(x).andM;ALGORITHM 678andM;BTPEC: Sampling from the Binomial DistributionandM;The FORTRAN implementation of an exact, uniformly fast algorithm forgenerating the binomial random variables is presented.andP;  The algorithm isnumerically stable and is faster than other published algorithms.andP;  The codeuses only standard FORTRAN statements and is portable to most computers; ithas been tested on the IBM 370, 3033, 4381, DEC VAX 11/780, SUN 3/50, CDC6500-6600, ENCORE Multimax, and Apple Macintosh Plus.andP;  A driver program isalso included.andO;</TEXT></DOC>