<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-574-134  </DOCNO><DOCID>07 574 134.andM;</DOCID><JOURNAL>Government Computer News  August 21 1989 v8 n17 p72(1)* Full Text COPYRIGHT Ziff-Davis Pub. Co. 1989.andM;</JOURNAL><TITLE>Programmers shouldn't kiss off documentation. (DP Issues) (column)</TITLE><AUTHOR>Perry, William E.andM;</AUTHOR><SUMMARY>Documentation is an essential element of a computer program, butprogrammers are known to balk at the process of creating it.andO;There are three reasons for such a negative attitude towardsdocumentation: one, the documentation is not what the programmerswant; two, strict deadlines for finishing a program make thewriting of documentation a bother; and three, many programmersfeel that documentation is only done for the benefit of managersand auditors.andP;  To solve the problem, management could transferownership of the documentation to the programmers.andP;  Theprogrammers could, among themselves, establish their owndocumentation standards and be fully responsible for making themwork.andM;</SUMMARY><DESCRIPT>Topic:     DocumentationProgramming ManagementProgram Development ToolsProgrammersSoftware Packages.andM;</DESCRIPT><TEXT>Programmers Shouldn't Kiss Off DocumentationandM;DP ISSUESandM;One of the oldest debates in information systems is the value ofdocumentation.andP;  It almost falls into the same category as the opposite sex --you can't live with them, and you can't live without them.andM;Let's look at two typical scenarios involving the programmer anddocumentation.andM;Case 1: The New Program.andP;  Tom has been given general program specificationsfor an update program.andP;  Within a couple of hours, he has written enough codeto get his first rough version.andP;  A few syntactical errors are uncovered, andTom continues.andP;  Within a few days, the program is written and tested.andM;Now Tom begins the painful task of documentation.andP;  From the program code, hecarefully constructs the program specification.andP;  This way the program specsand the code will be identical.andP;  He adds comment statements to the sourcecode.andM;Tom now documents the unit test and, of course, the documentation is right ontarget with the test data.andM;Case 2: Maintaining a Program.andP;  Mary receives a change request for one of herprograms.andP;  She analyzes the code to determine how to make the change.andP;  Afterlooking at the portion of code she thinks is affected, she starts writingcode.andM;A quick run on the compiler points out a simple syntactical error.andP;  Marycreates a few test conditions, runs them in the program, and now hascompleted the change.andM;Oops!andP;  She still has to make changes to the documentation to keep it current.andM;These scenarios are typical.andP;  Programmers generally believe thatdocumentation is fiction and code is fact.andP;  The logic is simple: Because thecode is executing in operation, it has to be correct, the programmersbelieve.andP;  On the other hand, documentation may or may not be correct.andM;Further, they say documentation often is written in a personal style and ishard to comprehend.andP;  Code uses common verbs, structures and data elements,making it easy to understand.andM;In view of these beliefs, it is easy to understand why programmers like codeand do not like documentation.andP;  Why, then, would they even bother todocument?andM;Managers require documentation.andP;  The auditors look for it and cite the lackof it as a deficiency.andP;  Also, documentation is customary.andP;  It's the thing todo after you have completed the coding.andM;The lack of reliance on documentation contributes to the high cost of systemsmaintenance.andP;  Some estimates have said software maintenance is three to 10times as defect-prone as new systems development.andP;  This means maintenanceprogrammers are making three to 10 times as many errors as systemsdevelopers.andM;Obviously, much of the reason for this is that the programmers do notunderstand the code.andP;  Good documentation could help, but it does not exist.andO;Existing documentation is not what the programmers want.andM;There are three basic reasons why programmers do not like existing programdocumentation:andM;* Poor &quot;fit.&quot;andP;  The type of documentation being produced is obviously not whatthe programmers want, otherwise they would use it.andM;* Tight schedules.andP;  Programmers have constant pressure to get the programswritten, and documentation is an impediment to meeting schedules.andM;After all, it can be done after the program is written.andM;If documentation never gets done, it is not nearly as important as notmissing the schedule.andM;* Lack of ownership.andP;  Many programmers do not feel the documentation istheirs.andP;  They are preparing it for management or for the auditors.andM;The solution to the problem is not nearly as complex as one might think.andP;  Thesolution is to transfer ownership of the documentation from management to theprogrammer.andM;Transfer of ownership means the programmers will decide what type ofdocumentation they need and then prepare that documentation.andP;  This doesn'tmean that every programmer makes his own choice, but rather that programmersin general will decide what is needed, and then all will follow that lead.andM;Let the programmers write their own documentation standards.andP;  If theprogrammers own the standards, they have full responsibility to make themwork.andM;Managers might even be surprised at the extent of documentation programmerswould develop.andM;William E. Perry is executive director, Quality Assurance Institute, Orlando,Fla.andO;</TEXT></DOC>