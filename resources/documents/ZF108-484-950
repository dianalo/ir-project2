<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-484-950  </DOCNO><DOCID>08 484 950.andM;</DOCID><JOURNAL>Communications of the ACM  March 1990 v33 n3 p263(9)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Letters. (ACM Forum) (letter to the editor)</TITLE><AUTHOR>Goforth, Dave; Belmont, Peter; McCracken, Daniel D.; Lerner,Alexander; Bernstein, Danielle R.; Stern, Joshua; Ehrich, William;Dunlavey, Michael R.; Zettel, Leonard; Herbert, Bruce B.; Nelson,Mark; Smyth, W.F.; Walker, Bruce W.; Gordon, Robert M.; Cole,Stephen N.; Lightstone, David B.; Palma, Victor M., Jr.andM;</AUTHOR><DESCRIPT/><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>LETTERS acm forumandM;E-Mail Ham?andM;Serendipitously, I read John McCarthy's Viewpoint on the harmful effects ofnetworks on e-mail (December 1989 Communications, pp.andP;  1389-40) shortly afterfinishing an article by Hugh Kenner in the November '89 issue of Harper's(vol.andP;  279, #1674).andP;  Kenner described his fruitful and enjoyable experienceusing BIX, the Byte Information Exchange.andP;  He compared conferences on BIX toan old, rural party line.andP;  While he sprinkled the article with user-technicalterminology, his main point was the cooperative and productive ambience ofthe service.andP;  I was envious because, even though I am a computer scientist, Ihave never felt very comfortable using network e-mail.andM;McCarthy notes that fax technology is flourishing while network e-maillanguishes.andP;  Fax works for the same reason that telephones work: the userviews the world of faxes as a complete graph and the sending of a message asa point-to-point operation.andM;As a student in the 60s, I can recall how I righteously accused a telephonecompany executive of working for an evil monopoly.andP;  I also recall his smugreply that telephone communication is a natural monopoly -- in what other waywould everyone be able to talk to anyone else?andP;  Now there are certainly manycarriers involved in the telephone service, but the image of a point-to-pointconnection has been retained.andP;  This mental model is precisely what is missingin network-based e-mail.andM;Fibre optics and modem/fax/answering machine features in computers willproduce a generalized e-mail with the same point-to-point feel as thetelephone.andM;Even if point-to-point e-mail becomes a distributed phenomenon, users willstill be attracted to services which offer connections to and from manyothers at once.andP;  In the early 70s Gordon Thompson, formerly of Bell NorthernResearch in Ottawa, identified a set of features of communication media whichhe claimed would predict their attractiveness to potential users.andP;  One ofthese, which he called &quot;nascent consensus,&quot; measures how much a mediumprovides one with opportunity to encounter previously unknown ideas orpersons of interest.andP;  We browse the stacks in the vicinity of a knownreference; we listen in on the party line; we attend conferences.andP;  And wesign onto BIX to browse and join &quot;conferences.&quot;andM;BIX, Compuserve, and amateur BBS's all over the world are successful.andP;  Forthe user, they are conceptually not much more complex than e-mail:fundamentally, a star network offering two-step access to lots of places atonce.andP;  Not being a network hacker, I have no corresponding conceptual modelwith which to explore the similar potential of the &quot;substantially useless andactually harmful mail network industry,&quot; as McCarthy calls it.andM;Is there a long-term role for the mail network industry?andP;  Perhaps amateurradio provides the best analogy -- while not in the communication mainstream,hams are a vital but underrated resource group.andP;  They are known for providingemergency communication, but they are also a reservoir of technical expertiseengaged in considerable experimental activity and committed to a watchdogrole on the entire industry.andP;  Their interest is more the medium than themessage.andM;Computer network hackers could assume such an honourable role in datacommunication.andM;Scientific Freedom and HumanandM;Rights of Computer ProfessionalsandM;I wish to respond vigorously to Hank Nussbacher's recent letter (December1989 Communications, p. 1394), offensive to me both because it seems overtlyracist and because it seeks to confuse readers on an important issue of humanrights.andP;  (*)andM;First, as to racism, Nussbacher's lead paragraph unnecessarily connects Arabsgenerally, and presumed human rights violatee Munther Salah in particular,with &quot;mud&quot;:andM;There is an old Arab saying: &quot;When you throw mud at a wall, there is alwayssome that sticks.&quot;andM;Nussbacher's lead-in further suggests that a claim of human rights abuseagainst Israel is mud-throwing.andP;  As anyone aware of current events knows,this is simply silly.andP;  It is also racist: neither Jews generally nor Israelisin particular are so different from other people as to be incapable ofviolating human rights.andM;Second, as to substance, Nussbacher suggests that no victim of human rightsviolations would wish to return to the country in which the violationsoccurred.andP;  But this ignores the present complaint, namely, that Israel'srefusal to allow entry to Salah was itself the human rights abuse.andM;Since 1948, Israel has decided who should be admitted and who should berefused admittance (and readmittance) to a growing (now a total) part of 1947Palestine.andP;  Jews with no previous connection to the territory were generallyto be admitted; Arabs were generally to be refused admittance, even if bornand raised in the territory.andP;  The provision of the Uniform Declaration ofHuman Rights to the effect that every person has the right to return to hisown country has, as to Palestinian Arabs, been violated by Israel for 41years.andP;  The U.S.andP;  has voted many times in the U.N.andP;  for the right of returnto Palestine of the 1948 refugees.andM;Israel's expulsions of persons from the occupied territories and Israel'srefusal of re-entry for Palestinians who made proper exit from and return tothese territories constitute further violations.andM;Palestinians are deeply, and to some observers surprisingly, concerned not tolose their right to reside in their own country.andP;  This is so because ofIsrael's closing the doors on Palestinian refugees in 1949.andP;  Many wouldprefer life in prison within Palestine to forced exile.andP;  Even the U.S., nofriend of the Palestinians, has criticized Israel's current policy ofexpulsion.andM;Many Jews fail to understand this, recalling the Jewish experience inpost-World War II Europe, from which many of those Jews who were still alivewere all too willing to escape, never to return.andP;  Refugees ought not to wishto return seems to be their idea.andP;  Jews, who yearned for Palestine but neverlived there, should wish to live there; Palestinians who had had no need toyearn to live where they and their fore-fathers had lived should not wish toreturn.andP;  Perhaps Mr. Nussbacher shares these ideas.andP;  The readers of thisForum should not.andM;Nussbacher apparently thinks being shut out of one's own country should notbe experienced as a violation of one's human rights.andM;I invite Nussbacher to imagine that, as a result of negotiation or war,Palestinians came to control emigration and immigration in the part ofIsraeli territory where he lives and, after he left to attend an ACM meetingin the U.S., chose to deny Nussbacher his right of readmittance (as 80percent of the Arab inhabitants of pre-67 Israel were denied readmittanceafter the 1948 war and as Dr. Salah was refused entry more recently).andP;  I feelsure that this exercise will change his mind.andM;We are appalled at Olivier Fischer's letter in the November 1989Communications (p.andP;  1285) in which he criticizes Jack Minker's inclusion inhis report of a computer scientist whose human rights may have been violatedby Israel.andP;  Reasonable people may differ on whether the available evidence issufficient to call Israel's treatment of Dr. Munther Salah a violation of hishuman rights.andP;  Indeed, in an e-mail exchange with Mr. Fischer before thereport was published in the August 1989 Communications, Jack Minkeracknowledged this matter as a judgment call.andP;  The &quot;proof&quot; that Fischer wouldlike is just not available in almost all human rights cases.andM;As the other two members of the subcommittee of the Committee on ScientificFreedom and Human Rights (CSFHR), which was responsible for the Minkerreport, we agree with Jack's judgment as did Barbara Simons, the chair ofCSFHR.andP;  We note that no member of CSFHR objected at any time to the listingof Dr. Salah.andM;What appalls us is the implication by Olivier Fischer that Jack Minker isanti-Israel and the claim that he is &quot;not competent about human rights.&quot;andP;  Formany years, Minker has been and remains a strong supporter of Israel and hasbeen active in many Israeli causes.andP;  His experience in human rights isimmense, and he has a distinguished reputation among human rightsorganizations in the United States and abroad.andP;  He agonized over this caseand made various attempts, all unsuccessful, to elicit an Israeli reaction tothe evidence about Dr. Salah.andM;If there are errors in the Minker report, they should be identified.andP;  Butanyone criticizing the report should do his or her homework first.andP;  IfOlivier Fischer had done his homework nearly as well as Jack Minker had, hewould have found that Minker received the ACM Outstanding Contribution Awardin 1985 specifically for his work related to the human rights of computerscientists.andM;For many years, my human rights were violated in the U.S.S.R., and my namewas being mentioned in reports by Dr. Minker in Communications of the ACM.andM;In &quot;Dissent to the Publication of This [the 1989] Report&quot; (same issue, p.andO;982), however, the authors question the lists' composition and accuracy ofdata hereby presented.andP;  This attitude seems to me highly unjustified.andP;  I amconvinced that under those exceptionally difficult conditions of obtaininginformation on the violations of human rights in the U.S.S.R.andP;  and theobstruction by the Soviet authorities of this data being transferred abroad,it was impossible to collect more accurate data than those published by Dr.andO;Minker.andM;Personally, I am very grateful to Dr. Minker for his activity which helped meto become, eventually, a free man.andM;DebatableandM;I would like to comment on the essay &quot;On the Cruelty of Really TeachingComputing Science&quot; by Edsger W. Dijkstra in the &quot;Debate&quot; of the December 1989issue (pp.andP;  1397-1414, including comments and rejoinder) without using thewords &quot;elitist&quot; or &quot;accessible.&quot;andP;  Though overused in education, these wordsdo have meaning and imply that different people learn differently.andP;  There isno one correct way.andP;  Trying to impose such a way will just restrict thenumber and quality of computing professionals.andP;  Research in learning stylesshows that teaching concepts devoid of practical examples do not benefiteveryone.andP;  That is why even the first-term biology and chemistry courses havelaboratory work.andM;Some people do like to understand the concepts first.andP;  For these students,starting with formal mathematics might be better.andP;  It would give them thethorough grounding that Dijkstra feels is necessary to start out with.andP;  Butmany people want to do.andP;  They learn by experimentation and by feedback fromthe machine.andP;  At some point, these students get a mental model of the systemand exclaim, &quot;Ah, I get it.&quot;andP;  This is one of the most satisfying parts ofinstructing them.andP;  Now they are ready for the formalism and may even see aneed for it.andP;  Let us not spoil it for them.andM;I agree with Dijkstra's opening remark that &quot;computers represent a radicalnovelty in our history.&quot;andP;  Part of his problem in teaching computer sciencemay come from his use of methods which are not radical enough.andM;For instance, his idea of teaching the introductory course of a subject byreference only has a long history in American education.andP;  Meridith Wilson inthe play The Music Man (1955) documents Professor Harold Hill's use of &quot;theThink System&quot; to teach students in River City, Iowa, early in the 1900s.andM;Of course, this method only works when the teacher is an absolute master ofall aspects of the subject.andP;  In the huge, varied, and fast-changing computerfield, even Dijkstra may not want to claim omniscience.andP;  I think a variety ofpedagogical methods are needed today and for the forseeable future.andM;It seems to me that Professor Dijkstra wants to teach students to use formalmethods to write programs that are &quot;correct by construction&quot; (as incomputer-aided design), which is easier and less controversial than provingthe correctness of a program after it is written.andM;Before Dijkstra's word becomes law (again) and we are faced with a generationof June grads telling us anthropomorphizing is considered harmful, I wouldlike to register a little public protest.andP;  Dijkstra's insights arise fromthinking of algorithms and programs in terms of formal validity, and that isgood.andP;  Things like GOTO gum this up, so he tells everybody &quot;Hey, you guys,GOTOs are considered harmful!&quot;andP;  Then profs the world over say, &quot;Hey, neat!,&quot;andO;and they and their students, who pour into industry, carry it to ridiculousextremes.andP;  They forget that structured programming is only a means to an end,not an end in itself.andP;  It is more or less necessary, but it is far fromsufficient.andP;  In fact, some of the cures for GOTO are worse than the disease,in terms of validating software.andM;Having worked on both sides of the academic/real-world fence, I can see thatthere is a richness of ideas on both, but the flow of ideas tends to be onlyone-way, from academic to world, and many of those ideas start from Dijkstra.andO;If there were a little feedback, here are some of the things the world mightsay:andM;(1) No idea, tool, or programming technique is complete without knowledge ofwhen not to use it.andP;  For one true example, if the expected length of apriority queue is 0.8 items, it is not necessary to use an object-oriented,multiply-linked, balanced binary tree to hold it.andP;  For another, it is notnecessary to build a whole object-oriented graphic hierarchy complete withmessage-passing, multiple inheritance, and optimized method dispatching justto get a few pictures on a screen.andP;  For another, it is not necessary to buildan EMACS-style, event-action-mapping-binding input structure when all youwant is a few simple menus.andP;  Programmers tend to build these things becausethey have heard about them from enthusiastic young professors, and theirmanagers are too trusting/ignorant to control them.andP;  Multiplied overthousands of programmers throughout industry and government, the cost tosociety is enormous.andM;(2) Performance is important.andP;  Not just &quot;big-O&quot; performance, but the constantfactors (tip of hat to Jon Bentley).andP;  Programming staff turns over thesedays.andP;  Most programmers only program for about ten years before they moveinto management or sales, which is not enough time to learn that performanceis a real-valued function, not a boolean predicate.andP;  When industry buys acomputer for $100,000 instead of $20,000 because the application software is,say, a factor of six too slow, that is enough money for a whole collegeeducation down the drain.andP;  All because the forever-junior programmers neverlearned how to bum code intelligently.andP;  This all comes from Dijkstra'smovement.andP;  It is common to see layer upon layer of excessivelygeneral-purpose, beautifully structured modular tools chewing up gobs of CPUtime when something simple and direct is all that is needed.andM;(3) Potentiality is insufficient.andP;  If a technique can solve a problem &quot;inprincipal,&quot; all that means is you have not found a reason why it does notwork yet.andP;  For example, object-oriented programming is a beautiful technique,but the claims made for it go far beyond what the evidence warrants.andP;  Justbecause it simplifies certain kinds of applications does not mean that itsimplifies all applications.andP;  Logic programming is another example, andfunctional programming is another.andP;  It would be wonderful if programmerscould be taught the virtue of pushing a problem far enough to learn thingsfrom it that force them to revise their preconceptions.andP;  Too much of computerscience education is learning from professors, not learning from reality.andM;Finally, I would like to thank Professor Dijkstra for one of his points,namely, that lines of code are not a value, but a cost.andP;  Too many programmersspeak with pride of the size of the systems they have helped to build.andP;  Weneed a new philosophy: Less is More.andM;Dr.andP;  Dijkstra's example (December 1989 issue, p. 1403) does indeed exhibitthe power of &quot;down to earth mathematics.&quot;andP;  I believe it also illustrates wellits mystery.andP;  Where did the checkerboard coloring come from?andP;  It was not anexplicit part of the problem formulation.andP;  Of the mind-boggling number ofpotential implicit properties of the problem, why did Dijkstra pick that one?andM;It seems to me that the ability to find (create?) new checkerboards is theessential talent required of a mathematician, a programmer, or a softwareengineer, however you dress things up or change details.andM;Can that king of thing be taught? predicted? managed? sold? dispensed with?andO;computer assisted?andP;  If so, how?andM;M.H.andP;  van Emden, in his comments on Edsger W. Dijkstra's essay in theDecember 1989 Communications (pp.andP;  1047-1048), states: &quot;Yet, it turns outthat English majors are as likely to be as successful at programming asmathematics graduates are.&quot;andP;  Later he writes: &quot;Often, we will discover thatthe specification is wrong, or, rather, we discover that we want somethingdifferent than what we thought we did.andP;  I would like to teach that also tothe students.andP;  I would also like to teach students that it is necessary torun the programs, not to debug the programs, but to debug thespecifications.&quot;andM;I would like to point out that the adjective &quot;different&quot; is not acomparative: the correct structure is different from not different than.andM;In the same context and the same issue, Terry Winograd (pp.andP;  1412-1413)writes: &quot;I fully support his [Dijkstra's] pleas that as educators we demandrigorous thinking, teach the beauty of mathematics, and encourage the virtueof facing uncomfortable truths.&quot;andP;  He also makes a number of references topast experience.andP;  I am disappointed that such rigorous thinking has notrevealed that all experience is of the past, that the adjective &quot;past&quot; addsnothing to the meaning of the noun &quot;experience.&quot;andM;I believe that computing professionals stand to improve both theirperformance and their credibility by paying more attention to grammar,syntax, and meaning in their use of English.andM;Assistant Editor's Note: Various style books will argue for and against thevalidity of the usage of &quot;than&quot; and &quot;from&quot; with &quot;different&quot; (i.e., Strunk andWhite, The Elements of Style, which comes out against the former, versusWilson Follet, Modern American Usage, which claims that both arguments havemerit).andP;  Webster's Ninth New Collegiate Dictionary states that &quot;different&quot; isusually followed by &quot;form&quot; and &quot;than,&quot; in that order, indicating that bothare acceptable although the former is preferable to the latter.andP;  As to theuse of the expression &quot;past experience,&quot; it is this editor's opinion thatthis expression is idiomatic and should not be the object of undue cynicismin an informal letter of response to an essay.andP;  Unlike humans, computers donot have the ability to recognize an anomaly and make the necessarytranslation by saying, &quot;Oh yes, I know what you mean.&quot;andM;I was glad to see E.W.andP;  Dijkstra successfully defend his role as chief gadflyof computing science.andP;  I was particularly interested in the author'sbiographical notes, where it was mentioned:andM;...he writes, in fact, so much that he cannot afford the use of time-savingdevices such as word processors.andP;  He owns, however, several fountain pens,three of which are Mont Blancs, for which he mixes his own ink.andM;I would contrast this to the example set by Donald Knuth.andP;  He writes a greatdeal as well, so much that he chose to develop a sophisticated typesettingprogram for his work.andP;  Perhaps this makes him one of the &quot;compulsiveprogrammers&quot; sneeringly mentioned by Dijkstra.andM;I personally find it nearly impossible to take seriously the philosophicalthoughts of a man who shuns the most elemental tools created by hisprofession.andP;  I would feel just as bad about taking a commercial flightpiloted by a man who will travel only by bus on his personal business.andM;We may need a Moses to lead us out of the wilderness, but I would prefer thatmy Moses not be a practicing atheist.andM;If a CS nobody such as myself had submitted the essay by Dijkstra which waspublished in the December Communications, the referee's report would havesaid:andM;(1) the essay is far too long and is heavily padded with trite and/orirrelevant material (e.g., anthropormorphism in CS);andM;(2) the criticisms made in the essay are valid only insofar as they arecriticisms of the essay's own misinterpretations or misunderstanding (e.g.,andO;of software engineering);andM;(3) the essay's main proposal is not new and is merely a restatement of anextreme (and obviously flawed) position in the ongoing debate about CS andthe teaching of CS;andM;(4) the proposal deals only with a single introductory CS course, which theessay fails entirely to set in the context of any CS programme;andM;(5) in general, the essay is characterized by context-free thinking (leadingto context-free conclusions) and frequent, unnecessary use of the firstperson singular (egocentric rather than merely anthropomorphic);andM;(6) if reduced in length by a factor of five and completely rewritten, theessay might be of interest to a local meeting of SIGCSE.andM;It is astonishing and sad that Communications finds it necessary to publishmaterial at this level; it is even more astonishing that Communications wasable to find so many good computer scientists willing to waste their timereplying to it.andM;I feel compelled to take word processor to hand to reply to Edsger Dijkstra'sdiatribe &quot;On the Cruelty of Really Teaching Computing Science.&quot;andM;In fact, my view is just the reverse: Computers are the most fun you can havewith anything that isn't breathing.andM;Dijkstra says the scale in time and memory that programmers must deal withcovers a range of [10.sup.9].andP;  He fails to mention, however, a range of moreimportance in writing of programs, namely, the size of the programs that mustbe dealt with.andP;  This has a range of more than [10.sup.6], from singlestatements up to complete embedded programs.andM;The most important consequence of this to Dijkstra's arguments is the size ofspecifications for major programs -- the specifications are also hundreds ofthousands or millions of lines long, even when written in a natural language.andO;In my experience, formal specifications are several times larger than thesame specification written in natural language, and so are comparable in sizewith the actual program.andP;  Look, for example, at the formal definition of thePL/I language, as constructed by the IBM Vienna Laboratories, when comparedwith the PL/I User's Guide, or even the ANSI specification.andP;  Formalspecifications are as hard to write and as hard for others to understand andhave as many bugs as programs of that size which have only been deskchecked(namely, lots).andP;  All of which leads to the question, why bother?andP;  It may, atsome time in the future, be possible to prove that a program matches itsformal specification, but what is the value of that when there is no way ofproving that the formal specification matches the natural languagespecification?andP;  Remember, it is the natural language specification which camefrom the customer: that is the one that counts.andP;  The only way currently evencontemplated to show that a program satisfies its natural languagespecification is (whisper) testing (shudder).andP;  Natural languagespecifications have flaws, no doubt.andP;  They are occasionally inconsistent,usually incomplete, and every other line leaves the programmer to useindividual judgment about details.andP;  Thus, it is often unclear, when lookingat the results of a test, whether the results are right or not.andP;  But naturallanguage specifications are all you are going to get from your customer --unless, of course, you hope to change the entire population of the world andnot merely all the computer programmers.andM;Some will protest that no program should really be millions of lines long,that no problem is inherently that big.andP;  I propose to such idealists thatthey consider the problem of computing income tax (which is, currently, inits full complexity, beyond the state of the art).andP;  The laws, as passed byCongress, fill a bookcase.andP;  Those are the primary specifications.andP;  The caselaw, as determined by courts, fills a library.andP;  Each of those cases is asecondary specification.andP;  I submit that there is no way to reduce this to asmall program.andM;In considering whether a proof is possible that a million-line programsatisfies its formal specification (whatever that would be worth), one mustconsider how well methods that work on hundred-line programs with lots ofskilled labor will scale up by a factor of [10.sup.4]-[10.sup.5].andO;Unfortunately, many algorithms are not practical when you apply them toproblems much bigger than the problems for which they were considered, andthis is widely recognized even among the theoretical computer sciencecommunity.andP;  For example, people frequently use a Turing machine as atheoretical model for real computers and apply results (such as theundecidability of the halting problem on a Turing machine) to real programs.andO;However, real computers have finite memories, not infinite ones, and hence,the proper mathematical model for a real computer is a finite state machine(for which the halting problem is decidable).andP;  However, the finite statemachines typically considered have 10 or 20 possible states, while a computerwith a 1 megabyte memory has more than [2.sup.8,000,000] states, ignoringdisk storage.andP;  Now, [2.sup.8,000,000] is &quot;almost&quot; infinite, from a practicalstandpoint, and that is the way it is treated.andM;Dijkstra's comments on errors in programs are accurate, strictly speaking,but bear little relation to the real world.andP;  He implies that one should notuse a program with an error, a desirable but unrealistic wish.andP;  No one isremotely close to being able to write multimillion-line programs withouterror -- assuming, as discussed above, that one could define what it wouldmean to have a program of that size without error.andP;  Furthermore, this failsto recognize that not all errors are of equal severity -- some errors make aprogram unpredictable, and hence, unusable, while some arise only under veryspecial conditions.andP;  In those cases, the user can avoid the error by avoidingthe condition, an undesirable but often liveable-expedient condition.andP;  Forexample, one compiler I use cannot tolerate blank lines in some speciallocations.andP;  The requirements say a blank line is acceptable there: theauthors of that program doubtless would admit that it is an error.andP;  But it isan error that can be lived with, especially if the alternative is not havinga compiler.andM;Finally, I do not blame Dijkstra for making a prediction that it will bedifferent in 50 years; after all, geologists and astronomers make predictionsfor further in the future.andP;  I do blame him, however, for making a schedulewithout any intermediate milestones.andP;  That is not good engineering.andM;I wrote my first line of code, for an IBM 701, in December of 1953; at thetime, I was employed as a mathematician at the then-called Naval OrdnanceTest Station in China Lake, California.andP;  I make no claim to be either acomputer scientist or a software engineer; for that matter, I no longer thinkof myself as a mathematician.andP;  However, I have been &quot;involved&quot; with digitalcomputers -- and so-called computer scientists and software engineers -- formany of the intervening 46 years.andP;  Hence, I deem myself qualified tocontribute to the discussion on Dijkstra's essay, &quot;On the Cruelty of ReallyTeaching Computing Science.&quot;andM;First, I want to comment about engineering professions other than software.andO;An important one of the distinguishing characteristics of those otherengineering professions is discernible in the &quot;knowledge&quot; that is availableto their practitioners in the form of handbooks, dealers' catalogs ofavailable &quot;products,&quot; and other repositories too numerous to mention.andM;If I may be permitted the use of an analogy that is related to computers andcomputing, modern engineering practice rests on a bedrock of what might becalled, loosely, &quot;reusable things.&quot;andP;  It is not only the reusability thatcontributes to the bedrock; it is also that practicing engineers know how to,and can, find the things that can be reused, that is, that can be used toconstruct new objects.andP;  No civil engineer, for instance, has to design anddevelop from scratch an I-beam he proposes for use in the construction of abridge over a 50-foot wide river.andM;The characteristic identified above -- not just the concept of reusability,but the infrastructure necessary to enable one to find reusable things -- isvirtually nonexistent where computer programs are concerned.andP;  We will not bejustified in calling it software engineering, I claim, until any softwaredeveloper can easily seek and obtain answers to the question, &quot;Does therealready exist software I can use to complete the assignment I have just beengiven?&quot;andM;By &quot;I can use,&quot; I do not mean to imply that I am looking only for certifiablycorrect code that will run on my platform(s) of choice.andP;  I will settle forspecifications that will help me to better understand what it is I have beenasked to do; program designs, at least portions of which I can borrow to helpme get on with my assignment; the names and addresses of persons who haveexperience with the kind of software I am supposed to design and develop;etc.andP;  Of course, if I could get certifiably correct code that will run on myplatform(s) of choice, I would be happy to use it.andM;Nor do I mean that what I have described here is both a necessary andsufficient precondition to the justifiable use of the name &quot;softwareengineering.&quot;andP;  But, with all the conviction I can muster, I do mean to implythat it is a necessary precondition.andM;I first publicly proposed the creation of a (universal) &quot;Catalogue of ProgramDescriptions&quot; in April of 1974 when I was the Director of the ComputingServices Centre at Victoria University of Wellington (New Zealand).andP;  For therequired infrastructure, I proposed that the CPD be operated by a memex-likemachine: you will recall that &quot;memex&quot; was the name given, in 1945, byVannevar Bush to the device that would allow us to have access to &quot;the recordof the race.&quot;andP;  As I read Bush, I inferred that the most important attributeof the memex was its ability to store what he called &quot;trails of association,&quot;the paths that connected to each other the objects deemed to be related bythe people who consulted and used the collection.andP;  Of course, Bush meant thatevery user of a memexed collection should be able to display and to followany trail existing in the collection.andM;In the context of computer programs, a memex-like electronic catalog enablesits users to make requests of the following kind:andM;* I seek to know whether there exists software to realize the function calledX.andM;* For each piece of software that realizes X, identify also the pieces ofsoftware that are used by X.andP;  Call this collection (A).andM;* Identify also the pieces of software that are used by each member of theset (A).andP;  Call this collection (B).andM;* And so forth, until I tell the memex to quit.andM;* Also, identify each piece of software that uses X.andP;  Call this collection(T).andM;* Also, identify each piece of software that uses each member of (T).andP;  Callthis collection (S).andM;* And so forth, until I tell the memex to quit.andM;I repeat: what is virtually axiomatic about memex is that users of acollection of what I sometimes call information-containing objects (ICO) --surely, a program is an ICO -- come to know more about what the collection isabout than do those who merely administer the collection.andP;  Bush and I bothinsist that what the users come to know about the information in a collection-- perhaps, especially, about the relationships between and among the membersof the collection -- ought to be added to the description of the collection.andM;The ability to do these things is within our grasp.andP;  What is lacking is thewill to do them.andM;I have read with sustained interest &quot;On the Cruelty of Really TeachingComputing Science&quot; by Edsger Dijkstra and the responses from seven of hiscolleagues.andP;  The provocative ideas in this essay (congratulations to PeterDenning for orchestrating it) have stimulated me to draft my own response.andM;Dijkstra's arguments are persuasive, and I agree with many of hisconclusions.andP;  However, with regard to the central issue -- the teaching ofcomputing science -- there are elements in Dijkstra's treatise that areworthy of a much bolder conclusion: college students who are contemplating acareer in computing science should be encouraged to concentrate not incomputing science but in a traditional liberal arts field -- mathematics,physics, philosophy, chemistry, economics, English, etc.andM;I do not mean to imply by the above statement that Dijkstra's disguisedagenda is to reduce the computing science curriculum at the college level.andO;On the contrary, Dijkstra's suggestion of the name VLSAL (Very Large ScaleApplication of Logic) implies a commitment to expand the role of computingscience.andP;  But Dijkstra did say:andM;The same, silly tradition is reflected at the university level in differentintroductory calculus courses for the future physicist, architect, orbusiness major.andM;Indeed, the most appropriate department to teach introductory calculus is themathematics department.andP;  In the same vein:andM;It is well-known that formal systems should be dealt with in their own rightand not in terms of a specific model.andM;I agree, and a well-equipped philosophy department would be an excellentplace for a student to be exposed to formal systems.andM;I have observed that the better programmers are those who were trained inother fields and who have chosen computing as a profession after completing aBA (or higher) degree in one of the traditional academic disciplines.andP;  Is itthat these better programmers are mentally acute enough to deal with the&quot;more demanding&quot; study in their college field and have condescended to the&quot;easier&quot; arena of computing science because of employment opportunities?andP;  No,computing science is as intellectually demanding as other subjects.andP;  But Icontend that the mental discipline of physics or mathematics is bettertraining for programming than the courses that computing science departmentsoffer.andM;Computing science majors tend to be intellectually barren.andP;  They areacquainted with programming languages, databases, artificial intelligence,etc., and have very little beyond a high school education in the naturalsciences, social sciences, and humanities.andP;  But programming as a professiondemands much more.andP;  It requires a facility in expository writing that isunique among the sciences.andP;  This is because a great deal of human-humaninteraction is required: with other programmers working on the same project,with management, and with the ultimate user of the software.andP;  The student'sfreshman creative writing course is arguably the most important element ofhis preparation for the computing profession.andP;  A similar case can be made forthe importance of proficiency in oral presentation.andP;  The programmereventually discovers that nothing outweighs the importance of an ability tosell one's capabilities, ideas, or software.andM;A student should not squander his college education on career-directedcourses at the expense of intellectual pursuit (with equal conviction I wouldrecommend against taking very many college courses in businessadministration, architecture, law, or photography).andP;  But this leaves me witha difficult question: how to prepare the emerging college student for acareer in programming.andM;As a college physics major, the novice programmer may have acquired excellentmental discipline.andP;  But he still needs exposure to a variety of programminglanguages and operating systems; advanced concepts such as databases andmultitasking would be very useful; and an awareness of the life cycle of alarge software system (specification, cost and time estimation, coding, etc.)andO;would serve him very well.andP;  One possibility would be to encourage the studyof computing science at the postgraduate level -- very much like a 1-year or2-year program in business administration.andP;  Unfortunately, this approach willbe difficult to sell because programmers are in great demand, and manyprogrammer candidates lack the patience or financial resources to enroll inpostgraduate studies.andP;  It is more likely that we will see improvements inon-the-job training.andP;  For example, instead of filling the co-ops' tenureswith menial tasks, the employer can give responsibilities to co-ops that aresimilar to those of entry level programmers; the cost of supervising theco-op will be repaid when the programmer returns as a full-time employee withbetter job skills.andP;  Some companies have found that internship programs arevery successful in instilling high standards in the novice programmer's workhabits.andM;Is there an impetus for drastic change in the way computing science istaught?andP;  No; as prognosticators, Dijkstra and his colleagues are probablycorrect.andP;  We can continue -- with minor adjustments -- to teach computingscience as a major college field of study and maintain equanimity in the dataprocessing community.andP;  But there is a better way.andP;  It would be beneficial forthe students (and in the long run for their employers) to defer concentratedstudies in computing science.andP;  They can successfully acquire data processingskills on the job, and they can avail themselves of postgraduate courses forsupplemental training.andM;The December 1989 fireworks display was most amusing.andP;  Such debates should beencouraged, as without them we will never understand the real problems withinthe craft called computer science.andP;  Throughout my life, I have always enjoyedboth: (1) observing people talk at each other (usually this amounts toconfusing apples and oranges) and (2) watching people debate truly greatphilosophical questions.andP;  Such questions come to mind as: (1) How manyfairies can dance upon the head of a pin?andP;  (2) Which came first the chickenor the egg?andP;  (3) How many ways are there to skin a cat?andP;  (the enjoyment stemsfrom the intellectual contortions and not the ludicrousness of thediscussions).andP;  Both situations are present in the fireworks display.andP;  Forsome reason, certain of the experts choose to discuss the problems ofteaching software development and others choose to discuss the problems ofsoftware development.andP;  Without common perspectives resolving these coupledproblems will be an exercise in futility.andP;  The purpose of this letter is toinitiate the establishment of a common framework from which to view thesecoupled problems.andP;  This being accomplished via establishment of a context andthe interpretation of some scattered observations presented within thedebate.andM;In many ways, the debate addressed two of the philosophical questions(numbers 2 and 3 significant yet unanswerable questions).andP;  In this situationthe chicken is a computer program or system and the egg the program orsystem's requirements (or is it the other way around).andP;  The missing elementsare (1) a basic understanding of the consequences of the effects ofdifferential reproduction and growth (traditionally called evolution) and (2)the nature of the various feedback mechanisms which are present.andP;  Evolutionmanifests itself when for some unknown reason feedback stimulatesimprovements (differential growth occurs when a manager or funding agencydecides to consider certain proposals or problems, e.g., feedback, moresignificant than others).andP;  The consequences (of the lack of basicunderstanding) are something for which no real name exists to my knowledge.andO;The closest approximation which comes to mind is a series of problems whichwere collectively misnamed &quot;The Software Productivity Problem&quot; in the early70s and the &quot;Competitiveness Crisis&quot; in the 80s (new bottle, oldwine/vinegar).andM;From my perspective, the significance of feedback mechanisms in softwaredevelopment methodology is neglected.andP;  The general emphasis is probably onconstructive methodology rather than upon process understanding andcommunication of understanding (this is a speculation which can be resolvedvia a literature search).andP;  In a sense, the feedback mechanism exists for thevery same reason as Heisenberg's &quot;Uncertainty Principle&quot; (the act ofobserving changes the observed).andP;  The process of examining for requirementsclarifies the needs for which there are to be requirements.andP;  The act ofdesign creates needs for tools, processes, etc.andP;  which do not exist, yetwould be utilized if available.andP;  The act of implementation creates demand forthe nonexistent, yet needed, tools or processes.andP;  Developing these tools isnot necessarily within the project scope.andP;  There is feedback, yet for somereason it is ignored.andM;The spread of opinions articulated by the experts forces me to speculate thatthey are skinning the cat differently.andP;  To understand the possibility of suchdifferent skinning you have to understand the various feedback mechanismswhich each of the authors perceive within the design development process.andO;This is far beyond my ability.andP;  For those interested in becoming aware of thefeedback mechanisms present in a particular developmental model considerexamining a book edited by Martyn Ould and Charles Unwin titled Testing inSoftware Development (a work or our colleagues in the British ComputerSociety).andP;  The presence of these feedback mechanisms makes the entireSoftware Development Methodology game an exercise in reductionism, having asits goal the structuring and decoupling of the feedback mechanisms.andM;Within this context of feedback mechanisms the following should be meaningfulobservations (a liberal interpretation may be necessary):andM;(1) Gradual change is desirable, yet not always present.andP;  There are insightsinto problems which do not gradually evolve into existence.andP;  To quote (Ibelieve) Archimedes: &quot;Eureka!&quot;andP;  Additionally, there are limits which must beaddressed and resolved.andP;  When those limits are encountered, a new solutionarchitecture must come into existence.andP;  This is not a linear process.andP;  Surelymassive parallel computation (connectionism) and data flow architecturescannot be considered a gradual change from the von Neumann architecture.andO;There is a synergistic (e.g., non-linear) effect which has not been and mustbe considered.andP;  Within the discipline of mathematics there is a fieldpreviously called Catastrophe Theory, now apparently called Chaos Theory,which addresses models for phenomena having changes which are anything butgradual.andP;  Some very interesting physical phenomena are explainable usingthese models (continuous and probabilistic models were not overlysuccessful).andP;  To expect gradual change to be present in the systemdevelopment activity may not be wise.andP;  Perhaps the various authors haveassumed the conduct of a successful feasibility study, in which case gradualchange is a not unreasonable assumption.andM;(2) Certainly testing based upon statistical approximate identification canbe used to characterize phenomena and devices.andP;  It also can confirm thevalidity of the models upon which designs are based.andP;  The unansweredquestions are economies of scale (interpreted to mean there are limits),Dijkstra's &quot;radical novelty&quot; issue (which I interpret as equivalent to anobservation that the limits have or soon will be reached), and moreimportantly, the continuity properties of the software model.andM;There are always specialists in a given problem domain who can develop formalmodels for their domain and interpret the results of formal mathematicswithin the context of the utilized model.andP;  How such specialists (notnecessarily computer scientists) are trained is an issue to be addressed bythat academic chamber of commerce traditionally headed by someone titled Deanor Chancellor or President.andP;  Such specialists mitigate the detachmentassociated with formal mathematics.andP;  In the development process, both thecomputer specialist and the mathematician must assume as an act of faith thevalidity of the provided mathematical model.andP;  The real question is asindicated by Parnas -- Is the model valid and appropriate?andM;(4) A firewall is a valid means of decoupling the feedback mechanism betweenimplementation and design.andP;  Such an approach requires a managerial strategywhich will control the system evolution.andP;  The extent to which there ismanagerial expertise of such caliber is questionable.andP;  The existence of thesoftware development problem is one indication of the absence of suchexpertise.andM;Perhaps all this is obvious.andP;  Perhaps the issue which I raise is only one ofpresentation.andP;  Perhaps the discussion has implicitly been conducted withinthe context of evolution and feedback mechanisms.andP;  In any case, this readerhas concluded that the various authors have specialized the problem and arethereby missing the significant issue.andP;  Tell me now, is teaching not an artof making explicit the implicit?andP;  Surely something is amiss.andM;More On TrackandM;I am responding to Peter Kaiser's letter titled &quot;Wrong Track&quot; in the NovemberForum (p.andP;  1284).andP;  He was offended by a Newstrack item concerning a set ofaudio CDs of the Bible.andP;  Well, I was offended by his letter.andP;  BecauseChristianity is by far the dominant religion of the Western World, theNewstrack item certainly did not &quot;amount to an advertisement for sectarianreligious material.&quot;andM;Perhaps Kaiser should realize that the concerns of the ACM reflect theconcerns of its members.andP;  I am one of those members.andP;  I am also a RomanCatholic and believe that part of the reason this world is in such a sorrymess is the abandonment of most of the values put forth in the Bible.andO;Perhaps he should order the CDs and see what he is missing.andM;Previous comments notwithstanding, the Bible is the oldest and longestaccount of human civilization.andP;  Despite controversy surrounding it and otherreligious documents, it is historical and deserves to be recognized as such.andO;Having such a monumental document as the Bible on CDs is merely an example ofwhat CD technology has to offer as far as storing large documents.andP;  Perhapsif the advertisement had featured a history on evolutionary theory instead,he would not have been offended.andP;  To me there is no difference.andP;  Why shouldthe subject matter be of concern?andM;(*) The letter in question concerns the report &quot;Scientific Freedom and HumanRights of Computer Professionals&quot; in the August 1989 issue (pp.andP;  957-974).andO;See also related letters in the October, November, December, and Februaryissues and the two letters following.andO;</TEXT></DOC>