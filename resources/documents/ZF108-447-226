<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-447-226  </DOCNO><DOCID>08 447 226.andM;</DOCID><JOURNAL>Computer Language  May 1990 v7 n5 p65(12)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>C and the ANSI standard. (C language compilers rated forcompatibility with ANSI definition) (buyers guide)</TITLE><AUTHOR>Saks, Dan.andM;</AUTHOR><SUMMARY>Commercially available C language compilers are rated forcompliance with the newly finalized ANSI C standard.andP;  ANSI C isbased largely on the traditional C developed for UNIX systems butclarifies ambiguities that caused incompatibilities amongdifferent implementations.andP;  'Conforming' implementations willaccept any program that uses only explicitly defined features fromthe language and standard library and never exceeds minimumlimits.andP;  A conforming implementation may include languageextensions that to don interfere with the translation of theseprograms.andP;  Plum-Hall Inc markets a full ANSI-compliance validationsuite and 'sampler' set of 79 short programs that is used to testfor compilers for compatibility.andP;  Watcom C passes all 79 tests.andM;</SUMMARY><DESCRIPT>Topic:     StandardizationC Programming LanguageDirectoriesCompilersANSISoftware Selection.andO;Feature:   illustrationtable.andO;Caption:   Plum-Hall ANSI suite results. (table)andM;</DESCRIPT><TEXT>C and the ANSI StandardandM;Dan SaksandM;ANSI C is now an official ANSI standard.andP;  (1)  Many people, including myself,anticipated this for some time.andP;  After all, the ANSI X3J11 technicalcommittee started working on the standard almost seven years ago, and thedraft document has been in its final form since fall 1988.andP;  Unfortunately, aprocedural appeal delayed formal approval until the end of 1989.andM;Even though the standard only recently became official, we've been benefitingfrom it for some time.andP;  Many vendors of C translators (compilers orinterpreters) for the PC were involved in the process, and their productshave evolved with the standard.andP;  Since the draft standard has hardly changedin the past two years, several translators now on the market appear to bevery close to the formal standard.andP;  Some vendors have even advertised &quot;100%ANSI compatibility.&quot;andM;Just how close are today's MSDOS C translators to the ANSI standard?andP;  Forthat matter, what does it mean to say something is &quot;ANSI compatible&quot;?andM;More than just a pretty faceandM;ANSI C is not an entirely new language.andP;  It is based largely on thetraditional C defined by Brian Kernighan and Dennis Ritchie.andP;  (2)  Thestandard clarifies the ambiguities in Kandamp;R that caused conflicts amongdiffering implementations and adds a number of new features to correct themost glaring deficiencies.andM;Newcomers to ANSI C notice the new features first.andP;  Probably the mostsignificant and well-known addition is the new syntax for function prototypedeclarations.andP;  Other new features include enumerations, the void and void *types, the const and volatile type qualifiers, preprocessor operators forsymbol concatenation (#) and stringizing (##), and a well-defined set ofstandard headers and library functions.andM;The new features impact all C users.andP;  They enhance the expressive power ofthe language and improve program reliability through stricter compile-timechecking.andP;  They also provide compiler writers with greater opportunities tooptimize code and support ROM-based applications.andM;But the new features are only part of the story.andP;  The ANSI standardrigorously defines many features that were ambiguous or unspecified.andP;  Forexample, Kandamp;R never states whether the preprocessor operated on characters oron tokens.andP;  Given a macro such as:andM;#define show(X) (printf(&quot;X = %d_n&quot;, X))andM;a character-based preprocessor will expand show(i) as:andM;(printf(&quot;i = %d_n&quot;, i))andM;but a token-based preprocessor will expand it as:andM;(printf(&quot;X = %d_n&quot;, i)).andM;In other words, a character-based preprocessor will substitute insidecharacter literals, but a token-based one (such as ANSI C) won't.andM;By specifying explicit behavior for a larger class of language constructs,the standard makes it easier to write portable code.andP;  But you still have towork at it, because the standard doesn't define portable behavior for everyconstruct.andM;The standard as a treatyandM;One of C's real strengths is that you can use it in place of assembler towrite efficient, machine-specific code.andP;  Such code often relies oncompiler-specific behavior for certain constructs, so it's intentionallynonportable.andP;  Because the standard recognizes the virtue of this practice, itdoesn't outlaw it, but simply labels the behavior of various constructsnonportable and leaves it to the programmer to avoid them when portability isdesired.andP;  (The four categories of nonportable behavior as explained by P.J.andO;Plauger are implementation-defined, locale-specific, undefined, andunspecified.andP;  (3))  In the words of the rationale for ANSI C, the standardgives programmers &quot;a fighting chance to make powerful C programs that arealso highly portable, without demeaning perfectly useful C programs thathappen not to be portable.&quot; (4)andM;The standard adopts a similar position on implementation limits, for example,such as the range of values for type int.andP;  That range is defined by themacros INT_MIN and INT_MAX in the standard header andless;limits.bandgt;.andP;  The standardrequires that INT_MIN be less than or equal to -32,767 and that INT_MAX begreater than or equal to +32,767.andP;  This range of values can be represented ina 16-bit, one's-complement word.andP;  On most implementations, int actually has awider range.andP;  For example, on a 16-bit, two's-complement machine, the mostnegative integer is actually -32,768.andP;  An implementation can (and should)increase the magnitudes of limits such as INT_MAX and INT_MIN to correspondto the actual type ranges.andP;  This lets the translator select the preferredsize for its types and gives you a portable way to refer to the full range ofvalues.andP;  The code you write will be portable as long as it never assumes thatthe magnitude of an implementation limit is greater than the minimum requiredby the standard.andP;  It's your responsibility to stay within the minimum limits.andO;The standard doesn't require the translator to warn you when you don't.andM;In effect, the ANSI standard imposes rules on both implementers andprogrammers.andP;  That's why the rationale refers to the standard as &quot;a treatybetween the implementor and the programmer.&quot;andP;  The translator must implementall of the portable behavior defined in the standard, but it need not andcannot preclude the use of all nonportable constructs.andP;  Programmers trying towrite portable code must assume some of the responsibility for avoidingnonportable features.andM;Compatibility and conformanceandM;So what does it mean for a translator to be &quot;ANSI compatible&quot;?andP;  I'm not sure.andO;The standard doesn't define compatibility -- it defines conformance.andP;  (Isuspect that &quot;compatibility&quot; is a term recommended by lawyers for use incompiler advertising to avoid the legal entanglements associated withclaiming &quot;conformance.&quot;)andM;Anyway, the standard defines a &quot;conforming implementation&quot; as one that willaccept any strictly conforming program.andP;  This is just another term for amaximally portable program.andP;  That is, a &quot;strictly conforming&quot; program usesonly those features of the language and standard library with explicitlydefined portable behavior, and it never exceeds any minimum implementationlimit.andP;  (Again, Plauger (3) sheds more light on this definition.)andM;Conforming implementations may include language extensions as long as they donot interfere with the translation of any strictly conforming programs.andP;  Thismeans that conforming extensions cannot introduce any new reserved words noradd any new syntax.andP;  This may not seem to leave much room for extensions, butit does.andM;For example, the standard states that cast expressions are not lvalues.andP;  Thismeans that given void *p;, an expression such as *((char *)p)++ is notallowed in a strictly conforming program because ++ can only be applied to anlvalue.andP;  This expression is actually permitted by the syntax of ANSI C, butit violates a semantic constraint.andP;  A conforming implementation may beextended to allow this (and many do), but the implementation must still issuea warning whenever you use it.andM;As another example, the standard states that the type of a bit field, in astrictly conforming program, must be int, signed int, or unsigned int.andP;  Somecompilers will allow the use of any integral type (such as char or short) asa bit-field type, as in: struct s { int a: 1; short b: 1; char c: 1; 0;andM;This adds no new syntax and doesn't violate any constraints that must bediagnosed.andP;  A translator can be extended to accept this structure withouteven issuing a warning.andP;  The translator will still conform, even thoughprograms that use this structure are not strictly conforming.andM;Most MS-DOS C compilers provide language extensions in the form of additionalkeywords such as near, far, and huge to support mixed-memory models; cdecl,fortran, and pascal to support mixed-language programming; and interrupt tosupport interrupt handling.andP;  All of these extensions introduce new syntax andreserve identifiers normally available for user-defined symbols.andP;  Forexample, if near is a keyword, a strictly conforming program with adeclaration like int near; will not compile.andP;  This extension is nonconformingand renders the translator nonconforming.andM;Identifiers beginning with two underscores are reserved by the standard foruse by the implementation; they cannot be user-defined identifiers in astrictly conforming program.andP;  Therefore, a conforming implementation can addnew keywords like _____near and _____far and still conform.andM;An implementation can provide extended library macros and functions in thestandard headers as long as the names begin with an underscore.andP;  Thus,functions named _dos_setdate() and _Irot() are conforming extensions, butcgets() and strlwr() are not.andM;Most MS-DOS C compilers and interpreters have an option to disable languageextensions.andP;  Some compilers have a separate option to disable just theextended keywords.andP;  Strictly speaking, each of these translators is actuallytwo distinct implementations: (more or less) conforming when the extensionsare disabled and nonconforming when they are enabled.andM;To summarize, a strictly conforming program is a maximally portable program.andO;A conforming implementation will accept any strictly conforming program.andP;  Aconforming implementation may include extensions as long as they do notinterfere with the translation of any strictly conforming program.andM;One final definition: a conforming program is one that is acceptable by atleast one conforming implementation.andP;  It may use extensions that make itnonportable.andP;  This means a conforming implementation may accept programs thatare acceptable nowhere else.andM;The bottom line is that C code can be highly portable or nonportable.andP;  Youhave to decide what you want.andP;  If you opt for portability, you can expectsome help from the translator.andP;  Using ANSI-conforming translatorssubstantially increases the class of portable behavior, making it easier towrite portable code.andP;  But some nonportable constructs are just too hard forthe translator to catch, so it's your responsibility to learn to avoid them.andM;Assessing conformanceandM;Now, back to the first question.andP;  Just how close are today's MS-DOS Ctranslators to the C standard?andP;  Answering this question accurately requires aset of test programs called a compiler validation suite.andP;  Each rule in thestandard should be tested by at least one program in the set.andP;  Since a fullvalidation suite contains many thousands of lines of code and requires manyhours to run, it's beyond the scope of this review.andM;Last year Thomas Plum, chair of Plum-Hall Inc. (which markets a fullvalidation suite) and vice-chair of X3J11, released the Plum-Hall ValidationSampler (5) to the public domain.andP;  The sampler is a set of 79 short Cprograms, each of which tests a distinct feature of ANSI C.andP;  The first 50programs test language features; the remaining 29 test the standard library.andO;The sampler is not a formal measure of conformance; it simply indicates someareas in which a translator does not yet meet the standard.andP;  Nonetheless, theresults are very informative, and they were used in last year's C compilerreview.andM;Table 1 shows this year's performance of the reviewed compilers against thesampler.andP;  Where possible, translators were run with language extensionsdisabled.andP;  Table 1 lists the compile and link options used by each.andM;Obviously, a high score indicates that the translator is close toconformance, but a perfect score doesn't mean it's all the way there.andP;  Bothof the compilers with perfect scores had omissions and/or nonconformingextensions in their header files.andM;A very low score indicates that the translator is making little progresstoward conformance.andP;  As a base reference, the table also shows the resultsfor cc, a traditional UNIX C compiler (on UNIX 4.2 BSD).andP;  It passed 16 of the79 tests.andP;  I ran experiments on 4.2 BSD in which I added and/or updated fiveor six of the standard headers.andP;  The changes took only a few hours, yetraised the score for cc from 16 to 28.andP;  (6)andM;Aztec CandM;Aztec C 4.2B-1 passed 52 of the 79 tests in the sampler, a slight improvementover the 48 tests passed last year by v. 4.1C.andP;  Aztec's score last year wasslightly above average, but this year the others made more progress; Aztec isnow well below average.andP;  Aztec actually does very well in conforming to thelanguage section of the standard by passing 42 of the first 50 tests.andO;Unfortunately, it provides poor support for the newer parts of the standardlibrary and passes only 10 of the last 29 tests.andM;The compiler comes with all of the standard headers, but most are incomplete.andO;Some functions declared in the headers are not yet implemented in therun-time libraries.andP;  This is not as bad as it sounds; it avoids spuriouscompile-time error messages and leaves it to the linker to tell you whichfunctions are undefined.andM;The compiler provides an option (-ansi) to disable non-ANSI languageextensions.andP;  It also provides a few other options for disabling groups oflanguage features.andP;  Unfortunately, none of the options disables nonconformingextensions in the standard headers, and nothing in the documentation tellsyou which functions conform to ANSI.andM;C-terpandM;Since C-terp can only be used with a compiler, it doesn't provide its ownversions of the standard headers; it uses the headers from the compiler.andO;Therefore, C-terp's conformance to the standard depends somewhat on theconformance of the standard headers and libraries of that compiler.andP;  VersionM 3.03 of C-terp works with Microsoft C v. 4.0, 5.0, and 5.1.andM;Table 1 has two scores for C-terp.andP;  The first score was obtained by runningthe executable version of C-terp from the distribution diskettes using theheaders from Microsoft C 5.1.andP;  This configuration performs poorly, passingonly 36 of the 79 tests.andP;  It is weakest in the library section, passing onlyseven of the last 29 tests.andP;  This is surprising since Microsoft C 5.1supports many of the standard library functions.andP;  (The Plum-Hall samplerresults for Microsoft C 5.1 are also in Table 1; it passed 54 of the tests.)andM;Apparently the distributed version of C-terp includes only part of theMicrosoft run-time library but it comes with a command file all.bat that canbe used to add the missing functions.andP;  all.bat processes a file calledall.aug that contains a list of external names (functions and data) to bebound into C-terp.andP;  Unfortunately, the all.aug in the distribution doesn'tcontain all the names you need.andP;  You have to edit all.aug to remove somecomments and add a few missing externals.andP;  Running all.bat creates anenhanced version of C-terp that passes 10 more tests (for a total of 46).andO;This is better, but still well below average.andM;C-terp has no options for disabling language extensions or controlling theseverity of warnings.andP;  ANSI conformance is not mentioned in thedocumentation.andP;  Apparently, Gimpel Software doesn't consider this importantfor its product.andM;I found the documentation fairly disappointing.andP;  It never describes therelationship between C-terp and the compiler.andP;  It has no step-by-stepinstallation or configuration guide; you have to piece the details togetherfrom various parts of the manual and read.me file.andP;  I quickly figured outwhat to do, but only because I've had lots of practice installing compilersand interpreters.andP;  Others may not find it so easy.andM;Eco-C88 CandM;Ecosoft apparently doesn't consider ANSI conformance very important either.andO;Eco-C88 C 4.21 passed only 26 of the 79 tests (as did v. 4.15 last year) andfell to last place by standing still.andM;It provided only nine of the 15 standard headers and passed only three of thelast 29 tests in the sampler (which test the standard library).andP;  Incredibly,it's even missing andless;limits.handgt; and andless;stddef.handgt;, two of the simplest headers,which take only a few hours to write and debug.andM;Even though it passed only 10 more tests than cc on UNIX 4.2 BSD, Eco-C88 Cis more than just a traditional (Kandamp;R) C compiler.andP;  The documentation liststhe ANSI features supported by the compiler: function prototypes,enumerations, void, structure assignment, pragmas, unsigned constants, andadjacent string literal concatenation.andP;  Eco-C88 C is the only compiler thatdoesn't provide an option to disable non-ANSI extensions; however, it doesprovide a -p option (the &quot;picky&quot; flag) for selecting one of eight levels forwarning messages.andM;High CandM;Meta Ware's High C 1.6 passed at least 72 of the 79 tests.andP;  It might be moreaccurate to say it passed 74: tests 13 and 72 depend somewhat on the resultsof test 26, which High C failed.andP;  If tests 13 and 72 were modified slightlyto avoid the problem detected by test 26, High C would pass them both.andO;Either way, the compiler's ranking remains the same.andP;  Though only fifth inthe standings, it is clearly among the leaders in ANSI conformance.andM;The compiler provides the -Hansi (ANSI conformance) option to disablelanguage extensions.andP;  A few other options and pragmas let you disable certainchecks that may break older C programs.andM;Metaware has taken great care to make its library conform to the standard.andO;Most of the library extensions in the standard headers have names beginningwith an underscore, the proper naming convention for conforming extensions.andO;High C is also one of the few compilers that remove nonconforming libraryextensions when in ANSI-conforming mode.andP;  The library documentation alsoidentifies each function as being ANSI (part of the standard), extra-ANSI (aconforming extension), or non-ANSI (a nonconforming extension).andM;Instant-CandM;While C-terp can only be used with a compiler, Instant-C 4.0 can be used withor without one.andP;  Thus, Instant-C supplies its own headers, but not very well.andO;It provides only eight of the 15 headers, and most are incomplete.andM;Like C-terp, the distributed version of the interpreter has only a fractionof the run-time library bound in so it performed poorly on the sampler,passing only 34 of the tests.andM;Instant-C can be rebuilt to include the entire Microsoft C 5.1 run-timelibrary, and the environment can be configured to use Microsoft's headerfiles.andP;  This new configuration passes 46 of the tests (the same as C-terp),still well below average.andM;Instant-C has a configuration option for disabling non-ANSI keywords, but itdoesn't disable other language extensions.andP;  It also has a handful ofconfiguration switches that enable stricter program checking.andM;ANSI conformance is not mentioned in the documentation.andP;  This is surprisingsince Rational Systems has been an active participant in the C standard.andP;  Thenext release will probably conform much better.andM;Lattice CandM;Lattice C 6.02 is one of the two compilers to pass all 79 tests in thesampler.andP;  This is a remarkable improvement over last year's performance, inwhich v. 3.31 passed only 20 tests and finished dead last.andP;  Despite itsperfect score, minor errors and omissions in the standard headers indicatethat the compiler is not yet fully conforming.andP;  For example:andM;* The -- cu compiler option forces all char declarations to be treated asunsigned chars; however, the values for CHAR_MIN and CHAR_MAX in andless;limits.handgt;do not change accordingly (they always indicate the range for signed chars).andM;* The definitions for some macros, such as offsetof(), are not enclosed inparentheses.andP;  These macros could yield the wrong values in some expressions.andM;* NULL is missing from andless;string.handgt;.andM;Also, the documentation doesn't list implementation-defined behavior asrequired by the standard.andM;Lattice C supports a variety of nonconforming extensions, which can bedisabled by the -ca (ANSI conformance) compiler option.andP;  It provides severalother options that can enable or disable individual language extensions, butnothing to disable nonconforming extensions in the standard headers.andO;Fortunately, Lattice doesn't leave you guessing about which names areextensions; the documentation classifies each library component as eitherANSI, iAPX86, Lattice, MSDOS, UNIX, or XENIX.andM;Despite these few flaws, Lattice C offers an excellent implementation of ANSIC.andP;  It comes extremely close to full conformance with the standard.andM;Microsoft CandM;Microsoft C is another compiler that is rapidly approaching full conformancewith the standard.andP;  Last year, v. 5.1 passed only 54 of 79 tests.andP;  This year,v. 6.0 passed all but two.andM;The documentation on portability is excellent.andP;  It includes a lengthydiscussion on writing portable programs as well as an explicit description ofimplementation-defined behavior.andP;  It even enumerates the few ways Microsoft Cdeviates from the standard.andP;  Although the library documentation is sketchy(it's for the beta version), it classifies every component in the library asbeing from one or more of the following sources: ANSI, DOS, OS/2, UNIX, andXENIX.andM;The compiler features a variety of nonconforming language extensions, most ofwhich can be disabled by the /Za option.andP;  As with most other compilers, thisoption doesn't disable the nonconforming extensions in the standard headers.andO;Microsoft also provides six levels of warning messages.andM;Power CandM;Power C 2.0.0 passes 64 of the 79 tests in the sampler (10 more than lastyear) for a very respectable seventh place in the rankings.andM;Both language and library extensions can be disabled by the /k -- compileroption.andP;  A separate compiler option controls whether comments can be nested.andO;No other features can be selectively enabled or disabled.andM;Other than indicating which functions are defined by the ANSI standard, thedocumentation provides no further help in writing portable code.andM;TopSpeed CandM;TopSpeed C 1.02A burst onto the scene this year with a compiler that passesall but one test in the sampler.andP;  This excellent performance is backed bysolid documentation that includes explicit sections on implementation-definedbehavior, undefined behavior, and language extensions.andP;  The librarydocumentation clearly indicates ANSI features.andM;The language tutorial is an added bonus.andP;  It presents programming in ANSI Cwith a much greater emphasis on portability than TopSpeed-specific features.andO;The tutorial will help even experienced C programmers use ANSI C moreeffectively.andM;TopSpeed provides a rich variety of compiler switches and pragmas forenabling and disabling language features.andP;  You need two switches, /a+ and/e-, to disable nonconforming language extensions, but there's no way todisable nonconforming library extensions.andP;  Other options control warningmessages for a wide variety of language violations and possible programmingerrors.andP;  You can also elect to treat any or all warnings as errors.andO;Unfortunately, you can't use any of these compiler options from the DOScommand line if you also want to link your program in the same step; you haveto build a project file and use its make facility.andP;  It's not hard to do, butit's a slight inconvenience.andM;Overall, TopSpeed C provides excellent conformance to the ANSI standard.andM;Turbo CandM;Although Turbo C 2.0 passed 63 of the 79 tests (three more than last year),it fell from second to eighth place in the standings.andM;Turbo C offers a variety of compiler options to disable language extensions,but the offering is not as rich as TopSpeed C's.andP;  The -A option disablesnon-ANSI keywords but not other language or library extensions.andP;  Otheroptions control whether warnings will be issued for using nonconforminglanguage features; however, some extensions cannot be caught at all.andM;The reference manual documents the portability of each function in thelibrary but doesn't enumerate implementation-defined behavior.andM;Borland has been active in the standardization of C.andP;  Although Turbo C is nolonger a leader in conformance, it still does well.andP;  Expect the next releaseof Turbo C to be almost fully conforming.andM;Watcom CandM;Watcom C 7.0 is the only compiler besides Lattice to pass all the tests inthe sampler but, like Lattice, cannot quite claim full conformance to thestandard because of few minor flaws in its header files.andP;  For example, Watcomhas the same problem with its /j switch (which treats char as unsigned char)that Lattice does.andP;  However, Watcom appears to have fewer of these problemsthan Lattice.andM;Watcom C provides a /za option to disable nonconforming language extensions.andO;/za also turns off the declarations for nearly every nonconforming extensionin the runtime library.andP;  The compiler provides five levels for warningmessages but no control over individual language extensions.andM;Watcom's documentation is also first-rate.andP;  Not only does it include anexplicit list of implementation limits and implementation-defined behavior(as required by the standard), it also identifies the portability of eachlibrary function as either ANSI, POSIX, DOS, or WATCOM.andP;  The languagereference manual contains a programmer's guide with useful sections onmodularity and how to write portable programs.andM;Watcom C is probably closer to full conformance than any other MS-DOScompiler.andM;Zortech CandM;Zortech C/C++ 2.06 passed 69 of the 79 tests.andP;  This is a very solidperformance, especially considering that Zortech's primary focus is on C++and not C.andP;  This focus is more apparent in the documentation, which sayslittle about standard C other than which headers and functions are defined byANSI.andM;The compiler provides an -A option for disabling non-ANSI language extensionsbut, as with most compilers, doesn't disable library extensions.andP;  It has afew other options for controlling language features and a single control forwarnings (on or off).andM;Getting ANSIandM;Many DOS C compilers are making progress toward conforming with the ANSIstandard.andP;  A few are almost there.andP;  Although only two compilers, Lattice andWatcom, had perfect scores on the sampler, they were followed very closely bythree more: TopSpeed, Microsoft, and MetaWare.andP;  Few programmers will noticeany difference in conformance among the top five.andM;I was surprised that the interpreters lagged so far behind in ANSIconformance.andP;  They are sold as development, not production, tools.andP;  You'resupposed to be able to develop your code with the interpreter, then compileit to get production-quality performance.andP;  This strategy loses some benefitsif the interpreter restricts your ability to use the ANSI language featuressupported by your production compiler.andM;ReferencesandM;[1.] Prosser, D.F.andP;  American National Standard X3.159-1989, ProgrammingLanguage C. New York, N.Y.: American National Standards Institute, 1989.andM;[2.] Kernighan, B, and D. Ritchie.andP;  The C Programming Language.andP;  EnglewoodCliffs, N.J.: Prentice-Hall, 1978.andM;[3.] Plauger, P.J.andP;  &quot;Setting the standard,&quot; COMPUTER LANGUAGE 7(4): 17-25,Mar. 1990.andM;[4.] Hudson, R.andP;  Rationale for Draft Proposed American National Standard forInformation Processing Systems, Programming Language C. New York, N.Y.:andO;American NAtional Standards Institute, 1988.andM;[5.] Plum, T.andP;  &quot;The ANSI Validation Sampler,&quot; COMPUTER LANGUAGE 6(2): 60,Feb. 1989.andM;[6.] Saks, D.andP;  &quot;Writing Your Own Standard Headers,&quot; The C Users Journal 8(1):83-89, Jan. 1990, and 8(3): 95-101, Mar. 1990.andM;Dan Saks is the owner of Saks and Associates of Springfield, Ohio, whichoffers consulting and training in C and C++.andP;  He is a member of both the ANSIC and C++ standards committees.andO;</TEXT></DOC>