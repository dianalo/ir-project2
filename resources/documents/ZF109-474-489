<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-474-489  </DOCNO><DOCID>09 474 489.andM;</DOCID><JOURNAL>Computer Language  Oct 1990 v7 n10 p141(4)* Full Text COPYRIGHT Miller Freeman Publications 1990.andM;</JOURNAL><TITLE>How to survive the 1990s. (EOF) (column)</TITLE><AUTHOR>Hildebrand, J. D.andM;</AUTHOR><DESCRIPT>Topic:     ForecastingTrendsSoftware DesignProgramming LanguagesIndustry AnalysisOutlookProgram Development Techniques.andM;</DESCRIPT><TEXT>Check the masthead of this month's issue and you'll notice aninnocuous-looking change.andP;  Instead of appearing at the top of the list underthe title  editor,&quot; my name now goes with the corporate officers and I'midentified as COMPUTER LANGUAGE's editorial director.andP;  The fact is, I'll bedevoting most of my time in the months ahead to our sister publication, UNIXReview, of which I've just been named editor.andP;  I'll have more to say aboutthat in a moment; but first, a story.andM;Something interesting happened to me a few weeks ago.andP;  I had occasion tostart work on a new program - my first major project in almost a year.andP;  Inoticed as I began planning the code that it broke neatly into modules in myhead, that I was able to envision the structure of the application as a wholeand to decompose it easily into functional units.andM;It doesn't matter now what the project was, nor what language I'd chosen.andO;And I won't claim the whole design bloomed overnight in my head and I codedit over lunch hour the next day.andP;  I've met programmers like that, and I'm notone of them.andM;No, what I find really intriguing is that I returned to software developmentafter a year spent editing and reading, and found I was a better programmerthan before.andP;  I expected to be rusty, and T was; I spent a lot of timesearching through the language reference manual for functions whoseparticulars I could no longer dredge up from memory.andP;  But the bottom line isthat I finished the application faster than I expected and I'm more confidentin its structure.andM;How do I account for this growth in competence? Only one explanation fits.andO;I'm a better programmer because I've spent the past couple years poring overmanuscripts written by software wizards.andP;  I've been lucky to watch over theirshoulders as they puzzled over tricky programming problems and built solid,adaptable foundation structures.andP;  I conclude immodest as it may seem--thatediting COMPUTER LANGUAGE has made me a better programmer.andP;  This makes itdoubly difficult to leave the magazine's day-to-day operations in someoneelse's hands.andM;I'm an editing mercenary; my name's appeared on the masthead of 16 magazines(I just counted, with some amazement), 12 under the title &quot;editor.&quot; Eightwere launches.andP;  This gives me bragging rights around the office, of course,but it also gives me a certain detachment, usually, from the subject matterof the magazines that occupy my time.andP;  I find it easy to start 'em up andmove on to the next challenge.andM;COMPUTER LANGUAGE threatens to change all that.andP;  I think the work you do issignificant, and it's imbued me with the sense that the role the magazineplays in your lives is also significant.andP;  Cheering you on from the sidelineshas become an important thing to me.andM;I've been lucky to work with our industry's best programmer-authors.andP;  We'vepublished Ed Yourdon and Larry Constantine and Adele Goldberg, visionarieswho have shaped our way of thinking about software development and the toolswe apply to the craft.andP;  I've known the joy of reading P. J. Plauger'smanuscripts two or three months before they see the light of day in print.andO;I've brainstormed with Knowledge Systems' Reed Phillips, a lopsided activitythat's like filling a coffee mug from a firehose.andP;  I've had the support of anincredible support staff whose faces have changed over the years but who havecontinued to impress me with their achievements under the leadership ofmanaging editor Brett Warren.andM;Hard to leave? You bet it is.andP;  am left with some specific ideas about whereour industry is heading.andP;  Ordinarily I'd express them through setting up aneditorial calendar and scheduling particular articles, but that's not my jobanymore.andP;  So I offer them at a single gulp: 10 prescriptions for weatheringthe challenges that will face us in the 1990s.andM;1.andP;  Stop fighting the GUI wars.andM;Think about the capabilities PCs had 10 years ago, compared to what theyroutinely do for us today.andP;  Consider that in 1980 microcomputers didn't havemuch economic impact; they were toys for a tiny cadre of hobbyists andhackers.andP;  Today they're big business, and they're getting much of thebrainpower from some of the most powerful brains in the world.andP;  Computers andsystem software are evolving, and they're evolving toward graphical userinterfaces.andP;  You can switch now or you can switch later, but unless you'recontent to program microwave-oven timers for the rest of your life, there's agraphical user interface in your future.andM;2.andP;  Decouple the interface from the functional parts of your code.andP;  I'mconvinced this is the most important change you can make right now to getready for the way programming will work in the future.andP;  For an excellentoverview of the kind of architecture you ought to be using, check out MartinStitt's &quot;Capturing User Input&quot; (COMPUTER LANGUAGE, Apr. 1990).andM;3.andP;  Don't write off Extended DOS.andP;  MS-DOS and the DOS Protected-ModeInterface (DPMI) standard will be with us for a long time.andP;  I too hoped Icould forestall learning about DPMI until DOS extenders went away, but it'sclear that Extended DOS will be with us for a long, long time to come.andM;4.andP;  Take another look at &quot;low-performance&quot; languages.andP;  BASIC and Smalltalkspring to mind as languages &quot;real&quot; programmers eschew because of theirinefficiencies.andP;  I've got news for you: the world has changed.andP;  Languagevendors have made their offerings more efficient, and hardware vendors havetaken up more of the slack.andP;  The benefits of the highly interactivedevelopment environments provided by these languages are difficult toquantify, but nonetheless real and significant.andM;5.andP;  While you're at it, learn an object-oriented language.andP;  Jump into C++ orone of the new object-extended Pascals.andP;  Or go all the way and learn Actor orSmalltalk.andP;  I meet a lot of people who have switched to object-orientedprogramming and say they'll never go back; I never talk to people who havelearned how to use objects but have decided they're not worth the trouble.andO;Would you have stood on the sidelines during the structured programmingrevolution?andM;6.andP;  Never stop stalking algorithms.andP;  We always need better performance, butit's increasingly clear that clever tricks and fine-tuning are less effectivethan questioning your basic assumptions about algorithms and data structures.andM;7.andP;  Be realistic about CASE.andP;  Computer-aided software engineering has beenoversold to the point of ridicule, but there's some good in the technology.andO;I don't expect CASE tools to replace programmers during the next decade ortwo, but I think there's a place for CASE.andP;  If nothing else, it gives us afocus point for group discussions about a project's intended use and itsstructure.andP;  Coordinating our efforts--with the aid of even the lamest CASEtool--can only help.andM;8.andP;  Don't write your user interface one line at a time.andP;  it's clear that inthe future we will create interfaces with highly interactive prototypingtools that will generate code or dynamic link libraries or resources orsomething we haven't imagined yet.andP;  Some of those tools have already startedto appear.andP;  Try them out and get comfortable with them.andM;9.andP;  Develop an opinion about user-programmable systems.andP;  User-programming isa buzzword and a grail for systems designers.andP;  I think it's a goal worthpursuing.andP;  I've mused at length about user-programming's potential in my&quot;Object Soup&quot; editorials.andM;10.andP;  Make sure those who benefit from your efforts pay for those efforts.andP;  Myfirst consulting project wound up making me about $2 per hour.andP;  T didn't care- I was happy to have someone else's hardware to tinker with and learnprogramming.andP;  I would have paid for the privilege.andP;  Fact is, the work we dois important.andP;  Intangible though it seems at times, it has value.andP;  Don'ttrivialize it by giving it away.andM;That's it, my 10 rules for success in the 1990s.andP;  This pretty much sums upwhat I've learned during my tenure here.andM;Finally, a second story: Once upon a time a programmer came to visit us atthe COMPUTER LANGUAGE offices.andP;  He claimed to have stacks of programmingmagazines all over his home, including back issues of COMPUTER LANGUAGE.andP;  Sowe asked him what he thought of the magazine.andM;&quot;Most programming magazines do a great job of showing you how to draw theletter A, &quot; he said.andP;  &quot;They show you every stroke in great detail, filling inthe serifs and explaining the difference between block letters and script,capital and lowercase.andP;  Then they say,  Oh, by the way, you string a bunch ofthese together and you get a novel.'andM;&quot;I read COMPUTER LANGUAGE because it's the only programming magazine thatdiscusses sentences structure and characterization and plot and imagery,&quot; hecontinued.&quot;It's an important magazine for me.&quot;andM;We'd never heard anything quite so flattering, so we hired the guy.andP;  Heturned out to be Larry O'Brien, and the happy ending of this true story isthat his vision of COMPUTER LANGUAGE will serve as its mission through the1990s.andP;  It's not easy for me to leave the daily management of COMPUTERLANGUAGE and join the UNIX Review staff, but it would be impossible if Ididn't have such great confidence in Larry.andM;Go easy on him--he's new at all this.andP;  But expect COMPUTER LANGUAGE to beresponsive and authoritative, for it and we have your best interests atheart.andP;  You won't be disappointed.andM;J.D.andP;  Hildebrand has been a mediocre musician and a _passable programmer.andP;  Hebelieves he has finally found tasks that match his--ahem--unique skills aseditor of UNIX Review and editorial director of COMPUTER LANGUAGE.andO;</TEXT></DOC>