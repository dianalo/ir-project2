<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF110-438-675  </DOCNO><DOCID>10 438 675.andM;</DOCID><JOURNAL>EXE  Nov 1990 v5 n6 p62(4)* Full Text COPYRIGHT Process Communications Ltd. (England) 1990.andM;</JOURNAL><TITLE>The language that would not die. (SIMULA) (The Third Side)(tutorial)</TITLE><AUTHOR>Kerr, Ron.andM;</AUTHOR><SUMMARY>SIMULA, the first object-oriented programming language, is asuperset of ALGOL 60 that has influenced most modernobject-oriented languages.andP;  SIMULA is available on a wide range ofplatforms and has an international support organization.andP;  SIMULAcan be used to solve the 'Triangle Problem,' although the problemis not ideal for demonstrating SIMULA's object-oriented features.andO;The solution identifies a class of triangles, listing theapplicable properties of triangles and representing a triangle bystoring the lengths of its sides in an array.andP;  Manipulating thetriangles requires a flexible list structure, which is composed ofa head with individual link objects attached.andP;  Geometric aspectsof the problem can be solved using a separate geometric component.andM;</SUMMARY><DESCRIPT>Topic:     TutorialObject-Oriented LanguagesProgrammingSimulation LanguagesProgramming Languages.andO;Feature:   illustrationprogramchart.andO;Caption:   The triangle problem in SIMULA. (program)A simple linked list. (chart)A simple geometric component in SIMULA. (program)andM;</DESCRIPT><TEXT>The Language that Would Not Die Nearly 23 years ago, I decided to move from asecure job in the British aircraft industry to the Norwegian Computing Centrein order to work on the implementation of a programming language called'SIMULA'.andP;  My boss could not comprehend why I had chosen to move to a foreigncountry to work on what he called 'a dead language'.andP;  That was the firstoccasion on which I heard SIMULA described as 'dead', and reports of itsdemise have arrived repeatedly ever since.andP;  SIMULA has evidently suffered themost protracted death throes of any product in the history of our profession!andM;Since the arrival of block-structured programming languages, probably themost significant development in software design and construction techniqueshas been 'object-oriented' programming which is currently riding the crest ofa wave of enthusiasm from both technical and entrepreneurial quarters.andO;SIMULA was the first object-oriented language.andP;  In the words of MichaelCaine, 'Not a lot of people know that'.andP;  SIMULA laid down most of theprinciples now accepted as essential elements of object-oriented programming.andO;At a time when it may appear that the American software evangelists arebringing their latest 'religion' to Europe, make no mistake - object-orientedprogramming is European!andM;SIMULA has profoundly influenced virtually all the major object-orientedlanguages.andP;  The principal designer of Ada was a SIMULA compiler implementor.andO;Smalltalk owes its existence to Alan Kay, a visionary inspired by thisobscure language from Norway.andP;  C++ is the outcome of Bjarne Stroustrup'sfrustration at C's lack of SIMULA's expressive power.andP;  Eiffel was designed byBertrand Meyer, a major industrial SIMULA user and one-time chairman of theSIMULA user association.andM;The word 'SIMULA' suggests simulation.andP;  Indeed, an early version of SIMULAaddressed the particularly complex problems of dynamic simulation modelling.andO;However, the principles established by the early work - now termed'object-oriented' - were found to be valid for general software development.andO;Modern users may prefer to think of SIMILA as an acronym of SIMple UniversalLAnguage.andP;  Many years ago, one sceptic had the temerity to suggest to SIMULAco-designer Kristen Nygaard that the language was not a general-purposeprogramming language at all.andP;  Nygaard's riposte: 'FORTRAN and ALGOL aregenerally accepted to be geneal-purpose.andP;  SIMULA has their capability plus agood deal more, so what must be removed to make it general-purpose?andM;The Triangle ProblemandM;Followers of the 'Third Side' series will be aware that the 'TriangleProblem' is a recurrent theme through which language features can beillustrated and contrasted.andP;  For three reasons, it is an inadequate vehiclefor describing SIMULA.andP;  First, SIMULA is an almost pure superset of ALGOL 60.andO;The triangle problem could have been coded in a form indistinguishable fromALGOL, revealing nothing at all about SIMULA.andP;  Second, the simplicity of theproblem gives little scope to exercise the rich object-oriented featureswhich support the description of systems which are both structurally andconceptually complex.andP;  Third, the prescribed form of solution leads to aprogram structure which does not conform to the natural SIMULA style.andO;Nevertheless, I have attempted to code a solution (Figure 1) in somethingresembling SIMULA style - I will elaborate on this later.andM;Programmers of my generation will recognise the basic ALGOL constructs usedin the program: blocks, procedures etc.andP;  Storage for arrays is allocateddynamically on block entry with lower and upper subscript bounds determinedby the evaluation of arithmetic expressions.andP;  Procedures may be functions or'proper' procedures.andP;  They pass data to and from their environment viaparameters whose transmission modes may be by value, reference or name.andO;ALGOL scope rules apply to the ALGOL-based constructs.andP;  Among severalrepetition constructs is the for statement, illustrated here, in whichiteration is controlled by a variable incremented successively until atermination condition is satisfied.andP;  The elements of the iteration constructsmay be general expressions which are repeatedly re-evaluated, giving scopefor great ingenuity.andP;  Particular forms of Boolean operations and then and orelse are shown.andP;  These prematurely terminate the evaluation of Booleanexpressions in situations in which the outcome is already known.andP;  SIMULAincludes features for character and next string manipulation and upon theseare built part of the input/output scheme.andM;These are rather elementary matters, and much less interesting than otherfeatures which embody the object-oriented style of system description.andP;  Thesolution recognises the fact that we are dealing with objects calledtriangles which have some form of representation, and properties expressingthe contribution they make to the environment in which they exist.andP;  There maybe many different types of object, each with properties uniquely associatedwith its own class and not possessed by other classes.andP;  In SIMULA, we attemptto identify the various types of objects we are manipulating and to classifythem according to their properties.andM;Here, we have identified a class of triangles and, in its description, wehave encapsulated all the properties of triangles we need in the context ofthe problem we are addressing - three sides, types (isosceles, scalene etc).andO;We have chosen (or, rather, been requested) to represent a triangle by thedimensions of its three sides, stored in an array.andP;  Another property of thetriangle is the ability to display itself, expressed as the proceduralattribute (method) display.andM;In real life, we perceive objects intuitively.andP;  Some of these are entirelypassive, like parcels in a postal depot; others, like postal workers, areactive.andP;  Some may switch states between these two.andP;  This aspect of potentialactivity is preserved in our class definitions by providing an executablebody.andP;  In this case, for any specific triangle object created, the body isused to solicit the dimensions of the sides and from these to deduce the typeof the triangle.andP;  This could be regarded, here, as an initialisation processbut, in other situations, it might represent autonomous activity in whichobjects, while interacting with others, possess also a degree ofself-determination.andM;The execution of this program begins, as many do, near the end of the programtext.andP;  A new triangle object is constructed according to the pattern of thetriangle class definition.andP;  This contains the information structuresnecessary to distinguish it from other triangle objects.andP;  The body of theobject is executed and the user is prompted for the side dimensions enablingthe type to be computed.andP;  On completion of theandM;body, the object remains and is identified by the reference variable T which,by the nature of its declaration, is permitted only to access triangleobjects.andP;  Operations bound to the object can be executed on demand.andM;Classical O-OandM;So much for lip-service to the editorial edicts!andP;  Now let us look attriangles properly.andP;  Actually, this theme is not as inappropriate as I mayhave suggested earlier.andP;  One of the hurdles in converting traditionalists toobject-orientation is that, since it really comes into its own in complexsituations, it is difficult to demonstrate its benefits in terms of simpleexamples.andP;  Often the effort of understanding the problem disorts ourappreciation of the power of the tools we use in its solution.andP;  From itsearlier days, graphical examples have been used to demonstrate SIMULA'scapabilities, largely because this topic is easy to visualise.andM;Consider an application area concerned with modelling the activities adraughtsman performs with pencil, ruler, compass etc.andP;  A geometric figure canbe regarded as an assemblange of components which may be primitive geometricobjects such as points and circles, or composite objects like polygons.andP;  Wecan say that a figure is composed of components which themselves may becomposed of further components and so on.andP;  The computer representation ofsuch a figure will, therefore, consist of some sort of aggregate structureeach of whose elements represents a component.andP;  A flexible list structure iswell-suited for this purpose.andM;We can conceive of various types of manipulation of figures, eg translation,rotation, resizing...andP;  Any of these operations applied to a figure on thewhole will involve the application of some form of the same operation on eachof its individual components.andP;  Thus, the rotate operation of a completefigure will necessitate traversal of the list structure, applying anappropriate form of rotation to each component.andP;  Two observations can bemade.andP;  First, techniques for traversing lists can be described in termstotally independent of the types of object their elements represent.andP;  Second,although we wish to apply a rotate operation to each component, the mechanicsof rotation will depend upon the nature of the object itself.andP;  For example,rotating a circle involves repositioning its centre while rotating a triangleinvolves repositioning its thre apexes.andM;Since list structure and geometric issues are not really related, lifebecomes easier if we can temporarily separate them.andP;  The list processingproblem can be solved by regarding a list as composed of a head to which arelinked individual link objects (Figure 2).andP;  Procedural attributes, such asinto, will contain the mechanisms for introducing and removing new objectsand traversing the list.andM;The geometric aspects of the problem can be approached by introducing theconcept of a geometric component (Figure 3).andP;  Although thore will be manydifferent types of component, they will all share certain abstract notionssuch as rotation, translation etc.andM;This will encapsulate all properties of components in general.andP;  Theprocedures rotate, translate and so on are specified as virtual because,although they represent notions relevant to the geometric 'level ofabstraction', their implementation must be deferred to more specificdefinitions of the various types of component.andP;  Since we wish to expressfigures as aggregations of components, each component object has to becapable of being a member of a list.andP;  This fact is expressed by writing classcomponent (Figure 4) as a prefixed class which inherits all the properties ofclass link, its prefix.andM;At the same time, we wish to extend the notion of a list to reflect the factthat it contains geometric objects (Figure 5).andP;  In particular, we can expressthe fact that a diagram can be rotated and that this can be done by rotatingits constituent components.andP;  This now permits us to program operations suchas:andM;ref (diagram) drawing ; drawing:-new diagram ; new component.into (diagram) ;andM;This, in itself, is not useful - but illustrates how SIMULA can be used tofactorise out the separate issues of the problem.andP;  The next step will be toadd meaning to the component class.andP;  To do this we identify the variouscomponent types.andP;  These can be simple things such as circles, points, eventriangles, and more elaborate objects with a non-trivial internalcomposition.andP;  We express this by elaborating class component in variousdirections (Figure 6).andM;Here we give the implementation of the rotate procedure for points and thisis bound to the virtual specification supplied in class component.andP;  Thismeans that we can manipulate the list structure representing a diagram and,for each component, the meaning of rotate will be determined by the precisenature of the individual.andP;  In object-oriented parlance, this is called'dynamic binding', although SIMULA actually accomplishes it inexpensively atcompile time.andM;Finally, Figure 7 shows a more object-oriented representation of trianglesthan the one we began with.andP;  The rotation of the triangle is accomplished byrotating its apexes.andP;  incidentally, this is only a skeletal outline of how adrafting application could be tackled - you should not pay much attention tothe fine detail.andM;Ancient and ModernandM;In this short article, I have tried to show how, 23 years ago, SIMULAintroduced the basic object-oriented concepts including encapsulation,inheritance, dynamic binding and autonomous activity (coroutines), the lastnot yet to be found in all modern object-oriented products.andP;  As a sop to itssimulation heritage, the basic language sketched above is augmented byready-made classes for performing list processing and discrete eventsimulation.andP;  These are constructed and employed according to the inheritanceprinciples outlined here.andP;  In particular, the simulation class provides ageneral 'process' class containing the mechanisms for expressing theinteraction between autonomous processes with respect to simulated time.andP;  Itis up to the user to extend this with the various activities processesperformed and to express their synchronisation with other processes.andP;  Manypractitioners in the simulation field believe that this is still the besttool available for heavyweight modelling.andM;Despite perpetual predictions of its imminent demise, SIMULA compilerscontinue to appear on an ever-increasing range of equipment, from mainframes,through modern workstations such as the IBM-PC, Sun and Macintosh, to whatmany have, until now, regarded as the lowly hobby end of the market, Atari.andO;It is probably one of the most widely available of the object-orientedlanguages and, untied as it is to specialised hardware and operating systems,represents a most practical vehicle for bread-and-butter programmersventuring into the 'new world' of object-orientation.andP;  Moreover, SIMULA hassupported, for 18 years, its own international user organisation withnews-letter and annual conferences.andP;  It remains a mystery why this language,which has been so influential in so-called 'modern' software innovation, andwhich has shown such tenacity in survival, has itself attracted so littlerecognition in the international computing arena.andM;Ron Kerr is a systems programmer in the Computing Service at the Universityof Newcastle upon Tyne.andP;  By an accident of history he is arguably Britain'sfirst object-oriented programmer.andO;</TEXT></DOC>