<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-714-916  </DOCNO><DOCID>08 714 916.andM;</DOCID><JOURNAL>Data Based Advisor  June 1990 v8 n6 p94(7)* Full Text COPYRIGHT Data Based Solutions 1990.andM;</JOURNAL><TITLE>dBASE and SQL: mixing metaphors. (structured query language)</TITLE><AUTHOR>Buzzard, James.andM;</AUTHOR><SUMMARY>The problems associated with linking a system based on the dBASElanguage to a database server based on structured query language(SQL) are explored.andP;  A special focus is given to using acommand-mapping application programming interface (API) forconnecting dBASE to SQL.andP;  It is a big job involving a lot of hardcompromises.andP;  The link is inevitable if the dBASE developer wantsto maintain and upgrade large applications and use databaseservers for better data security and integrity.andM;</SUMMARY><DESCRIPT>Product:   dBASE (Data base management system) (usage).andO;Topic:     Structured Query LanguageData Base Management SystemsData Base ServersConnectivityTutorial.andM;</DESCRIPT><TEXT>This month I'll look at the problems inherent in connecting a system based onthe dBASE language (such as dBASE IV or Quicksilver) to a database serverbased on SQL.andP;  I'll concentrate on approaches that use a command-mappingapplication programming interface (API) to connect dBASE to SQL (see lastmonth's story).andP;  This API type transparently maps the data manipulationcommands native to the development tool (in this case, the dBASE language) tothe data access language used by the server (in this case, SQL).andP;  Mapping ofcommands let's you use existing applications and code to manipulate data onthe server.andM;I should note that when I use &quot;dBASE&quot; or &quot;the dBASE language,&quot; I don't refersolely to Ashton-Tate products but to all dBASE-compatible language productsand database management systems.andM;dBASE as a database serverandM;development languageandM;The idea of using dBASE to access SQL-based database servers seems natural.andO;After all, both are de facto standards-shouldn't they be able to worktogether? However, the difficulties in connecting dBASE to SQL-based systemsare considerable.andP;  Ironically, these difficulties stem largely from the veryfeatures that make dBASE popular as an application development language.andM;Unlike C, dBASE has built-in record and file handling commands that (to somedegree) provide the same types of functionality as a SQL-based databaseserver.andP;  dBASE applications use these built-in commands to manipulate datastored in DBF files.andP;  Applications written in C or some other traditionalprogramming language typically use either file handling routines written forthe application or those provided by third-party libraries or databasesubsystems.andP;  Since the dBASE community and its installed base of applicationsis dependent on dBASE's built-in commands, it seems that any commerciallyviable product would have to use a command-mapping API (to allow dBASEdevelopers to continue using the dBASE data manipulation commands).andP;  Then youcan use familiar commands and existing dBASE applications (and there are alot of them) to transparently access data on a SQL-based database server.andM;However, there are other ways of connecting dBASE applications to SQLdatabase servers.andP;  These include function-call APIs provided by libraries(such as The Planet Library for Clipper-now co-marketed by Gupta-whichconnects Gupta's SQLBase to Clipper applications) and load-and-call modules(such as dBSQL from DataWiz International, which connects Microsoft's SQLServer to any dBASE-language product that supports LOAD and CALL).andP;  When usedwith a database server, these products essentially replace all the dBASEdatabase and file handling commands.andP;  Applications built with these productsuse dBASE just as you might use a traditional programming language like C.andO;You code the user interface and program logic using dBASE commands, but youaccess the database through SQL statements passed as parameters to the API'sfunction calls.andM;In this article I'll concentrate on the problems inherent in transparentlyaccessing data in SQL database servers from dBASE.andP;  However, before that, Ishould address the question of dBASE as a suitable database serverdevelopment tool (more on this in a later article).andP;  Aside from itscommercial success, what makes dBASE a suitable tool for accessing data ondatabase servers? And why not use SQL directly rather than suffering theoverhead of mapping dBASE commands to SQL?andM;The argument against &quot;invisibleandM;SQL&quot;andM;One argument against dBASE-to-SQL command mapping is that it's impossible toproduce applications that effectively use a database server with only nativedBASE commands.andP;  A command-mapping API generates what's sometimes called&quot;invisible SQL,&quot; since it's hidden from the user and seen only by thedatabase server.andP;  The command-mapping API must use high-level invisible SQLto represent the typically low-level commands found in dBASE applications.andO;Thus, the interaction between server and client will be less than optimal andthe application programmer may not have enough control over the server (or sothe argument goes-it remains to be seen).andM;A typical dBASE command acts on only one record at a time.andP;  SQL (andrelational databases in general) typically acts on a set of records.andP;  Becauseof this, the invisible SQL generated by a dBASE command-mapping API isinefficient.andP;  With some exceptions, such as REPLACE ALL, individual dBASEcommands are rarely complete relational database operations.andP;  invisible SQLcommands result in needless overhead on the server.andP;  The command-mappinginterface converts a single command at a time, not taking into account thelarger picture of what the dBASE program is actually doing in terms ofmanipulating data on the server.andM;Also, the multiuser programming techniques used in most dBASE applicationsare a poor match for the central concurrency control mechanisms provided bydatabase servers.andP;  For example, to avoid deadlocks and incomplete updates,most dBASE applications use one of two techniques: 1) either lock all of therecords to be updated before starting the update, or 2) lock only one recordor file at a time, releasing each lock before trying to acquire the next.andO;These techniques are unnecessary on a database server-the server can detectand resolve deadlocks automatically without any special locking strategies(or any manual locking at all-we'll cover more in the section on locking yetto come).andM;These are certainly valid points-ones you shouldn't dismiss lightly if you'reconsidering converting dBASE applications to work with a database server.andO;Unfortunately, the alternative to invisible SQL is &quot;Visible SQL.&quot; In otherwords, take the source code of your dBASE application and rewrite it to useSQL rather than dBASE's data manipulation commands.andP;  This requires either anative SQL API (such as provided by dBASE IV or Oracle Quick-silver) or afunction-call library (such as The Library from Gupta Technologies, Inc.) toconnect to the database server.andM;As you can imagine, the tasks involved in converting from dBASE to SQL andtesting the conversion are formidable.andP;  Also, if you use a function-callinterface or third-party library to connect to the server, the convertedapplication will no longer work with local DBF files (which means the nextsite or client you work with must have a database server).andP;  Once you make theleap, there's no going back.andM;The problem ofandM;expression indexesandM;None of the major commercially available SQL-based database servers (SQLServer, Gupta's SQLBase, or Oracle Server) directly support expression-basedindex keys.andP;  You can build indexes based on groups of columns, but you can'tuse functions and operators in the index expression.andP;  To support dBASEexpression indexes on SQL database servers, vendors have two choices.andM;They can maintain the index as an indexed phantom table (one table ismaintained for each index) with pointers back to corresponding records in theactual table.andP;  Unfortunately, this technique incurs considerable overheadwhen updating key fields in the index expression.andP;  Every record added orupdated in the original table also means adding or updating a record in the&quot;index&quot; table.andP;  Also, since SQL doesn't support direct physical addressing ofrows in tables, the pointers used in the phantom index table require anadditional column in the data table to hold the unique pointer value.andM;Or you can maintain only the index key expression as a character string in aseparate table, with one record for each index.andP;  When the index is &quot;opened'using the dBASE SET INDEX TO or USE...INDEX command, the key expression isretrieved from the index expression table.andP;  It's then used by thedBASE-to-SQL mapping layer to create the equivalent SQL ORDER BY clauses.andO;Although this technique doesn't cause any additional overhead during keyfield updates (because no index is actually built or updated), retrievingrecords in index order requires the database server to work harder.andM;Of the pending or available dBASE-compatible products with command-mappingAPIs, dBASE IV Server Edition appears to use this first technique (with aphantom index table) and Oracle Quicksilver uses the second (with an indexkey expression table).andM;Navigating record numbersandM;dBASE uses a fixed record number pointer to move through records in the orderof their physical position in the file.andP;  As long as the file isn'trestructured by dBASE commands like PACK or ZAP, these numbers don't changeand can be used to select specific records.andP;  Also, every open data file hasan active pointer to the currently selected record.andM;The concept of locating records or rows by their physical position and beingable to point to a particular row isn't supported by SQL-based databasesystems.andP;  Record/row retrieval in SQL databases is done by supplying a uniquekey value matching the contents of a column for the specific row.andP;  Thisvalue-oriented positioning differs from dBASE's absolute physicalpositioning, since restructuring a SQL table won't change its key values.andM;One exception to SQL's value-oriented positioning are SQL cursors.andP;  These aresimilar to dBASE record pointers but apply only to a set of rows resultingfrom a SQL query rather than the actual table.andP;  The current row pointed to bya cursor can be directly updated or deleted.andP;  Unlike a dBASE record pointer,however, you can only move a cursor forward through a result set, notbackward or at random.andP;  Not all database servers support cursors; Oracledoes, SQL Server doesn't.andP;  Also, the order of the rows in the cursor's resultset usually isn't fixed unless some additional constraints (such as a SQLORDER BY clause) are specified when the cursor is declared.andM;The easiest (perhaps the only) way to map dBASE record-navigation commands toSQL database systems is to add a record number column to the SQL tables anduse the contents of this column as the unique key for the SQL table.andP;  Eitherthe database server or the mapping software must automatically generate aunique, sequential value for this column whenever a record is added or thetable restructured (using PACK).andM;Whenever a dBASE record-positioning command is used (like GOTO andless;nandgt; or SKIPandless;nandgt;), the mapping software converts the request to a SQL query thatreferences the record number column.andM;To avoid incompatibilities with existing dBASE applications, as well asproblems like missing or out-of-sequence record numbers, the record numbercolumn shouldn't be directly accessible to dBASE users or applications.andP;  ThedBASE-to-SQL command-mapping layer should automatically retrieve and updatethis column.andP;  The value for the current record should be accessible only tothe user through the dBASE RECNO() function.andM;Both dBASE IV Server Edition and Oracle Quicksilver add a record numbercolumn to server-based tables to emulate dBASE record number navigation.andO;However, dBASE IV Server Edition will apparently use the programmablefeatures of Microsoft SQL Server to have the server automatically update therecord number column.andP;  Because of this, front ends other than dBASE IV canadd rows to SQL tables to hold dBASE data without corrupting the recordnumber sequence.andP;  The disadvantage of this approach is that the servercomputer works harder, potentially slowing performance.andM;Recallable deletesandM;dBASE allows a user or application to delete a record using the DELETEcommand and then later recall the record without losing the information.andO;Unless the file is processed with a PACK command, the record and its contentsremain in place.andP;  The only change is that the record status can be detectedwith the DELETED() function and it can be excluded from searches and filters.andO;This form of recallable deletion is sometimes called a  soft' delete.andM;SQL-based systems also support a DELETE command to remove rows (records) fromtables.andP;  But the SQL DELETE command physically removes the record from thetable.andP;  There's no SQL equivalent to dBASE's RECALL command to resurrectdeleted records.andP;  This form of non-recallable deletion is usually referred toas a &quot;hard' delete.andM;Obviously, the dBASE DELETE command can't simply be mapped to the SQL DELETEcommand.andP;  (Well, I suppose it could be, but what would the dBASE RECALLcommand be mapped to?) To support the dBASE DELETE and RECALL commands on SQLdatabase systems, the actual physical structure of a dBASE data (DBF) filemust be mimicked in the SQL table layout.andM;When a record is deleted in a dBASE data file, the leading byte of eachrecord, usually a blank character, is changed to an asterisk (*).andP;  Thismarker character is the only change made to the record when it's deleted.andP;  Toemulate dBASE-style DELETEs with SQL tables, a special deletion status columnis added to the table by the mapping-layer software.andP;  When a record isdeleted, a marker character is put in this column.andP;  Recalling a record simplyrequires that this marker be cleared from the column.andP;  The dBASE PACK commandcan then be mapped to the SQL command that deletes all the rows with themarker character in the delete status column (for instance, DELETE FROM tableWHERE delete-column = marker).andM;If soft deletes are used by dBASE applications storing data on the server,any non-dBASE applications that share the same tables must be aware of thedeletion status column.andP;  Any queries issued by non-dBASE applications must bechanged to ignore records that are marked for deletion by the dBASEapplication.andM;Oracle Quicksilver and Oracle dBXL give the option of having recallabledeletes (as in standard dBASE) or permanent deletes (as in SQL).andP;  Another SETcommand, SET SQLDELETE ON/OFF, lets you switch between these two deletionmodes.andM;Like the record number column, the deletion status column should not bedirectly visible except through the DELETED() function.andP;  Only thedBASE-to-SQL mapping-layer software should be able to manipulate thesespecial columns.andM;Functions and UDFs in queriesandM;A benefit of database servers is that processing is done &quot;close&quot; to the databeing processed.andP;  When a user searches for a particular set of records on atraditional file server-based system (using a SET FILTER or LOCATE command),all records in the file are sequentially read from the file server's harddisk, sent across the network, and then searched for matching records at theworkstation.andP;  This results in excessive network traffic and poor performance.andM;Database servers avoid this excessive traffic problem.andP;  A small SQL query issent from the workstation to the server, where it's processed.andP;  Afterprocessing, only the matching records (if any) are returned to theworkstation.andP;  While this approach greatly reduces network traffic, itrequires that any dBASE query or record-selection condition from a user orapplication have an equivalent SQL statement.andM;Most SQL database servers include extensions to the standard SQL dialect tosupport a set of string, date, and numeric functions equivalent to dBASEfunctions such as SUBSTR(), RTRIM(), and UPPER().andP;  As part of the mappingprocess, dBASE functions and their arguments must be converted to equivalentSQL dialect functions.andM;There are two cases when direct mapping isn't possible:andM;* The dBASE function lacks a SQLandM;equivalent-for example, the dBASEandM;IV LOOKUP() function performs aandM;look-up in a logically related file andandM;returns the contents of the fields.andP;  NoneandM;of the database servers supportingandM;dBASE-compatible front ends includeandM;an equivalent SQL function.andM;*  The function is a UDF written inandM;dBASE (or another language).andP;  TheandM;value returned by the function canandM;only be determined by code that mustandM;be executed by the workstation.andM;If it isn't possible to directly map a particular function, the processingthat filters or selects records must be divided between server andworkstation.andP;  The mapping-layer software must use the portion of the selectcondition that can be converted to SQL to formulate a SQL query to retrieverecords.andP;  This set of records is returned to the workstation.andP;  Theworkstation's database software must then search the returned records usingthe dBASE function or UDF.andM;There's an alternative to this distributed filtering or selection process:Restrict the functions used in record-selecting expressions to dBASEfunctions that have direct SQL equivalents and prohibit UDFs in queries andfilters.andP;  This approach has problem's.andP;  Existing dBASE applications may beincompatible with the database server.andM;Reserved-word restrictionsandM;Unlike most computer languages, dBASE has no reserved words.andP;  Command andfunction names can be used as the names of memory variables and data filefields.andP;  You could, for example, use this:andM;REPLACE replace WITH with where &quot;replace&quot; is the name of a field and &quot;with&quot;is the name of a memory variable.andM;However, SQL database servers don't allow SQL command words (called reservedwords) to be used as column (field), table (data file), or index names.andP;  If adBASE application uses any of these reserved words as field, file, or indexnames, its data files can't be imported to the database server.andP;  Althoughrenaming the offending fields and files is relatively simple, all referencesto the changed names would also have to be found and changed in theapplication's code (and any other files such as report and label forms).andM;To get around this naming restriction, the mapping software could insert aspecial prefix into the field names defined for the dBASE file.andP;  For example,you could add &quot;DB_&quot; to field names.andP;  (Most SQL systems support column namesup to 30 characters.) The prefix is added by the mapping layer to any columnor table references before they're sent to the server and then stripped fromthe returned results.andP;  Any non-dBASE applications that access the same tableswould either have to be aware of the prefixing rules or use SQL views(virtual tables built from actual data when a query is issued) to access thedBASE-compatible tables.andM;This prefixing approach doesn't seem to be used in either Oracle Quicksilveror dBASE IV Server Edition.andP;  Instead, application data file, field, and indexnames will need to be altered where they conflict with the reserved word listfor particular servers.andM;Supported dBASE data typesandM;SQL database servers support data types different from, but comparable to,standard dBASE data types (character, date, floating, logical, memo, andnumeric).andP;  The mapping-layer software should be able to transparently convertbetween equivalent data types.andM;For example, a variable character column in a SQL table would beautomatically mapped to a dBASE memo field.andP;  The logical data type providedby dBASE doesn't have a direct counterpart in most SQL database systems.andP;  Inthis case, the logical true and false values can be mapped to a one-digitcharacter column containing either &quot;T&quot; or &quot;F,&quot;, or to a bit or integer columncontaining &quot;0&quot; (for true) or &quot;1&quot; (for false).andM;In some cases, database servers are more restrictive than dBASE-compatibleproducts operating in standalone mode (such as with ordinary DBF files).andP;  Forexample, SQL Server supports only date values later than January, 1, 1753while dBASE IV supports dates from January 1, 0100 (and you can get toearlier dates by subtracting from 01/01/0100).andM;While this may not be a concern with some applications, it can have a majoreffect on others, like genealogy systems.andP;  One work-around is to convert datecolumns to character columns and store dates as strings, then convert themwhen necessary.andP;  Unfortunately, comparisons between out-of-range dates indBASE search conditions or filters still won't be allowed since theseconditions will have to be mapped to SQL statements and sent to the server toexecute.andM;Explicit record lockingandM;A benefit to database servers is that they free the developer from beingoverly concerned with concurrency issues.andP;  In a dBASE application, you mustplan and control the record and file locking required by your application toensure that the actions of one user doesn't conflict with another.andP;  SQLdatabase servers automatically handle all the required locking.andP;  Not havingto issue (and test) numerous lock and unlock requests saves significantdevelopment effort.andM;However, most dBASE applications also use locking to reserve a particularresource (such as a unique key counter for invoice numbers).andP;  We need somemeans to emulate dBASE locks on server- based SQL tables.andM;Since the dBASE front end can only communicate with the database server usingSQL statements and SQL doesn't have a command to directly lock individualrows, some indirect method of emulating record locking must be used.andP;  Hereare three possible approaches:andM;* If the database server supports SQLandM;cursors, the SQL statement used toandM;define the query for the cursor canandM;include a clause requesting that eachandM;row be locked for updates as it'sandM;retrieved.andP;  Depending on the databaseandM;server, the cursor-based locks are heldandM;until the cursor is moved to the nextandM;row or the current server transactionandM;ends.andP;  Some database servers alsoandM;allow rows to be locked as they'reandM;selected or queried without requiringandM;SQL cursors.andM;* Use an emulation approach similar toandM;the deletion-marker-column techni -  que.andP;  A column can be added to the SQLandM;table and used to hold a lock statusandM;flag.andP;  The lock flag will be updated byandM;mapping the dBASE LOCK and UN-LOCKandM;commands to SQL UPDATEandM;statements.andP;  Like the deletion-statusandM;marker and record-number columns,andM;this lock flag column should be hiddenandM;from the user and application.andM;* They can use an approach similar toandM;the phantom index table technique.andM;An additional table is created for eachandM;SQL table or database.andP;  This tableandM;holds one record for each dBASE lockandM;held by a user.andP;  This is apparently theandM;method of lock emulation being usedandM;by dBASE IV Server Edition underandM;SQL Server.andP;  Triggers are used to up -  date the lock table and ensure thattheandM;emulated dBASE locks are respectedandM;even by non-dBASE front ends.andM;Even if explicit record locking is fully and transparently supported by thedBASE front end, it might be better to alter the code of a dBASE applicationto use as few locks as possible.andP;  Using any of these lock emulationtechniques can be expensive in processing and communication resources.andM;ConclusionandM;From the points I've covered, it would seem that matching the dBASE languageto SQL is a large job involving a number of difficult compromises.andP;  In fact,there are even more issues that I haven't touched on, such as controllingtransaction boundaries, setting up and administrating the database server,and recovering from errors and deadlocks.andP;  You might even conclude that dBASEand SQL aren't the best match.andM;But if you're a dBASE developer maintaining and enhancing applications withhundreds of thousands of lines of dBASE code (like I am) and you're lookingat database servers as a way to provide a better level of data security andintegrity, the combination is almost inevitable.andP;  Rewriting your existingapplications isn't practical, and most of the database servers currentlyavailable (with some exceptions, such as RSPI's Emerald Bay) only support SQLas a data-access language.andM;Next time I'll look at changes you may have to make to existing dBASEapplications to adapt them to a SQL database server.andM;CompaniesandM;Ashton-Tate, inc., (213) 329-8000andM;DataWiz International,andM;(415) 571-1300andM;Gupta Technologies, inc.,andM;(415) 321-9599andM;Microsoft Corp., (206) 882-8080andM;Oracle Corp., (415) 598-8000andM;Ratliff Software Production, inc.,andM;(818) 546-3850andM;James Buzzard owns a database and application design consulting firm,Hammerhead Systems.andP;  His industry experience includes four years as V.P.andP;  ofEngineering at SBT Corp. and a background in finance and accounting.andP;  You cancontact him through the Data Based Advisor Readers Exchange BBS, (619)270-2042, or on MCI Mail (JBUZZ).andO;</TEXT></DOC>