<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-161-698  </DOCNO><DOCID>07 161 698.andM;</DOCID><JOURNAL>Datamation  April 1 1989 v35 n7 p34(4)* Full Text COPYRIGHT Cahners Publishing Co. 1989.andM;</JOURNAL><TITLE>From CASE to software factories. (Technology Forum) (computeraided software engineering)</TITLE><AUTHOR>Weber, Herbert.andM;</AUTHOR><SUMMARY>Software factories providing large users with productionassistance in developing in-house programs is the vision ofEuropean software planners.andP;  These development centers wouldassist software creators in implementing Computer aided softwareengineering (CASE) tools.andP;  Software concepts would be directedtoward a specific task in a specific vertical market.andP;  Guidancewill include managing the overall process, resource management andcommunications between developers.andP;  Developers, however, are firstseeking out a standard interface for these public tools.andP;  Productscreated will evolve from simple beginnings to more sophisticatedprograms.andP;  The ultimate goal is total incorporation in a varietyof development environments.andM;</SUMMARY><DESCRIPT>Topic:     Computer-aided software engineeringEuropeStandardizationSoftware EngineeringSoftware DesignProgrammingFuture of Computing.andO;Feature:   illustrationtable.andO;Caption:   Toward IS factories. (table)andM;</DESCRIPT><TEXT>From CASE to Software FactoriesandM;The need for computer-assisted software engineering (CASE) products andsupport environments is clearly escalating around the world.andP;  So, too, arethe exepectations for CASE.andP;  In Europe, where the word CASE is reluctantlyused because of its broad interpretation, progmatic parameters have been putaround the term.andM;Today in Europe, the emphasis is on getting CASE products into the widestpossible industrial use via integrated software production environment(ISPE), which distinguish standalone systems needed in separate softwaredevelopment tasks from systems that support the complete software developmentprocess.andP;  The ISPE or &quot;Software Factory&quot; concept addresses industry-specificapplication needs.andM;Using this concept, European researchers are investigating ways to implementCASE in industry, examining how best to introduce these products into anorganization's existing software production operation.andP;  In order to do this,more work will be needed on developing standard interfaces, and on devisingan architecture for production environments that can support large-scalesoftware development.andM;While industry-specific application needs were understood, they were not metas expected by earlier software development projects launched in the early'80s in America, Europe, and Japan.andP;  Those initial efforts were encompassedby the evolutionary, if not revolutionary, integrated project systemsenvironment (IPSE) approach.andP;  Developed in 1983, the three-generationstrategy promised several advantages over traditional software developmentmethods: better management of complex development projects, enhanced softwarequality, productivity improvements, and cost savings.andM;It wasn't very long, however, before researchers came down to earth to facesome sovering realities.andP;  The so-called IPSE, they found out, soberingrealities.andP;  The difficult to staff with skilled people, and lacked theunifying standards so essential to portability.andM;Using Unix as the development platform, the first generation of the newsoftware development environments was born--a generation that wascharacterized by a collection of existing tools linked via a file base.andP;  Thesecond generation of this environment arrived when data-based toolsets andsupport for geographically distributed project teams became available.andP;  Thisis where the development on software production environments stands today.andM;Researchers expect that by the early '90s proto-types of CASE products ofthird generation software production environments will incorporate expertsystems.andP;  Also envisioned are tools for computer-aided design of VLSI ndhardware development.andP;  Such facilities will fuel the creation of informationsystem factories (ISF), the ultimate goal.andP;  But some of the sophisticatedproducts that were originally and optimistically predicted for the early '90swill not be available even by then.andP;  Nevertheless, steady progress iscurrently being made in the second generation phase.andM;Organizations in a range of industries all over the world are in the firststates of implementing the various types of software production environments.andO;The kinds of functions that individual tools perform and how they interactwith each other are the two main characteristics of these new softwareproduction environments.andP;  The sophistication level of the environment modeldetermines how the designer can use it--either in a single ask or eventhroughout the entire software development process.andM;The problem with CASE in these environment has been that it has notadequately capture software production requirements.andP;  This is compounded bythe fact that corporate users have not sufficiently stated theirrequirements.andP;  To help remedy the situation, Europe has moved toward more ofan industry orientation, as is reflected in its Randamp;D work on the ISPE, orSoftware Factory.andM;Software Factories, which are designed to help particular industry segmentswith their individual software production problems, will also provide genericdevelopment solutions.andP;  This work is centered around the followingobjectives:andM;* To provide large software production groups with help on organizationalproblems.andP;  Guidance will be given on controlling the overall process, onresource allocation, and on ways to achieve better communication betweenon-and off-site developers.andM;* To optimize software development concepts and tools to achieve unificationthroughout the different stages in the process.andP;  Help would also be furnishedin order to reach the highest possible degree of automation in convertingsoftware descriptions from one stage to another.andM;* To provide phased solutions that enable companies, at a low initialinvestment, to gradually begin using CASE in thier software developmentactivities.andM;* To address nontechnical issues, such as psychological factors, that couldhamper the usage of the new development environments.andM;A software technology group at the University of Dortmund in West Germany isworking with European industry and academia to reach some of these goals.andP;  Infact, the university is one of the few academic institutions in Europe todaythat is involved in both basic and industrial Randamp;D activities.andP;  The group isplaying a key role in Europe's Esprit and Eureka Software Factory (ESF)projects.andP;  Through its research, it is also helping to pinpoint the problemareas of CASE that need serious consideration.andM;The ESF is the largest software development project currently under wy inEurope.andP;  The results from this research, jointly conducted by industry andacademia, are expected to set the state for third generation softwareproduction environments.andM;The 10-year ESF effort has targeted three main goals.andP;  The first goal callsfor the creation of an industry consensus on public tool interfaces,reference models, and architectures.andP;  A consensus on these key elements isexpected to spawn an open market for CASE products in Europe.andP;  The secondgoal is to develop prototype CASE products in various evolutionary steps.andO;These products will later be evaluated in actual use and modified orredesigned for particular application needs.andP;  Under the final goal, conceptsfor software components and their intergration will be devised, making iteasier to incorporate changes as they occur in the worldwide softwaredevelopment marketplace.andM;The funding crucial to fulfilling such ambitious goals is shared byparticipating European companies, which pick up roughly 60% of ESF costs.andO;The remaining costs are absorbed by the sponsoring European countries.andO;Amoung the 13 firms involved in Eureka are Britain's ICL, West Germany'sNixdorf Computer, France's Cap Gemini Sogeti, and Norway's Norsk Data.andP;  Largeapplication software developers such as Germany's AEG, France's Matra, andSweden's Telelogic have also joined to ESF project.andM;In the past, funding for program of this type was mainly put together inEurope on a country-by-country basis.andP;  The European Commission's Esprit I wasthe first large-scale project to carry the Pan-European flag.andP;  Esprit II,which was launched in 1988, focuses more on industry applications than didEsprit I.andP;  This, too, is the intent of the Eureka plan, which concentratesmore on developing advanced products than on pursuing pure research.andM;Despite the Pan-European pooling of funds, lttle has actually beenaccomplished in the way of alleviating Europe's escalating software problem.andO;Nevertheless, software's strategic importance has been clearly recognized inEurope, and in the near future more money will be plowed into further CASEdevelopment efforts.andM;Currently, Europe is not a prosperous market for CASE products.andP;  WhileEuropean software developers understand the advantage of having automatedsupport for complex production chores, they are still not convinced thatCASE, despite its promise, will pay off in terms of productivity or improvedsoftware quality.andM;One thing that could greatly aid in the acceptance of CASE is the creation ofstandards that would fuel further work on software production environments.andO;The success of CASE depends upon agreement on platforms for theinterconnection of tools and user interfaces.andP;  To that end, a set ofinterface specifications for tool standards, called the portable common toolenvironment (PCTE), was developed under Esprit I.andM;The PCTE standardization procedures initiated in 1988 follow the standardrecommendation of the European Computer Manufacturers Association (ECMA).andP;  APCTE Interface Management Board, acting on behalf of PCTE developers in theEuropean Community, is expected to take the lead in this standardizationdrive.andP;  A standard proposal that incorporates recommendations from differentsoftware development interests within the European Program Group of NATO isslated to be ready by the end of this year.andM;After a recent debate in Europe over possible PCTE adoption, it now appearslikely that the framework and concepts that will meet the evolutionary needsof tool interfaces in the proposed production environments reference modelcan be established.andP;  The term &quot;reference model&quot; was chosen to emphasize thesimilarities between this model and the International Standard Organization's(ISO) Open Systems Interconnection (OSI) standard reference model.andM;Within the next two years, this software production reference model will alsobe part of the ECMA standard.andP;  Depite slow progress over the last two years,the ultimate goal is to unify the different interest groups and arrive at aconsensus on a standard that conforms to the ISO standard.andM;Standards are also intrinsic to integration, which is fundamental to allsoftware Factory efforts.andP;  But in order for a set of tools to be integratedwithin an environment, a common information repository is necessary.andO;Nevertheless, tools may still be integrated into an environment in variousways via a common data repository that allows different kinds of toolinteraction.andM;The automation or partial automation of software production hinges on theinteroperability of tools, and on the degree to which these tools areintegrated.andP;  Today's software production in an organization's daily cope withtwo conflicting requirements.andP;  On the one hand, they may be installed intheir original form, thus avoiding any disruption in an organization's dailyoperations; on the other hand, the environments may be developed toaccommodate technology changes that occur during their life cycle.andP;  Oneapproach gives you a stable environment, while the other provides you withextensibility for the future.andM;So far, only a few attempts have been made to align the work on standardinterfaces with the work being done on environment extensibility.andP;  Europeandevelopment activities are currently concentrated on the interconnection oftools and frameworks that provides the proper intergration mechanisms.andP;  Thatwork, which is being done under the Esprit umbrella, is also part of ESPefforts at the University of Dortmund.andM;Research projects that started with existing tools did not provide the degreeof integration that was initially expected.andP;  Therefore, this approach wasreplaced by a &quot;front-end&quot; integration concept that is based upon the mostreasonable commonalities of tools in a production environment.andP;  Thedisadvantage here is that you risk your investment if the tools turn out tobe of limited use in later upgrades.andM;Nevertheless, some of the more recent production environment projects haveadopted this front-end, or top-down, concept.andP;  As &quot;top-down&quot; suggests,development starts at the top with Software Factory requirements, which arethen transformed down into the detailed design of a system.andM;The various models exhibit distinctive integrationcharacteristics--characteristics that demonstrate the complexity upon whichthe CASE environment is actually built.andP;  The lowest degree of integrationcomes from interconnecting different computers into a communicationsinfrastructure.andP;  Tools tht are integrated into such a nonheterogeous systemare called &quot;communicative.&quot;andM;The next degree of intergration is represented by tools that share a commonobject storage system (OSS).andP;  The OSS stores all the objects that areproduced by the integrated tools.andP;  Tools that are integrated at this levelare referred to as &quot;OSS integrated.&quot; Further up the scale are &quot;interpreted&quot;tools, which can interoperate by interpreting objects produced with the helpof other tools.andP;  This degree of integration is accomplished through a commonobject store.andP;  While the interpreter needed to implement the ingration may bevery complex, it still only enable partial integration.andM;The specification of the types of tools and their application in the softwareproduction process is a more complex and process-oriented way of integration,known as &quot;production process integrated.&quot;andP;  A further step in integrationcomes when the methods used by individual tools understand each other.andP;  Toaccomplish this, it is essential that the tools' position andinteroperability in the production process are precisely specified.andP;  As mightbe expected, this &quot;method integrated&quot; approach requires a greater effort thanthe former concepts.andM;The ultimate degree of integration is achieved when only one method existsthroughout the entire development process.andP;  Here all tools are targeted towork on the same type of objects and would therefore use the same interpretercapability.andP;  The software production environment that supports this degree ofintegration is called &quot;method uniform.&quot;andM;Integration, in whatever form, is a constant.andP;  Today's software productionenvironment will almost certainly need additions tomorrow--additions thatwill require further integration.andP;  To accomodate this, the Software Factoryenvironment uses a reference model that furnishes an evolutionary frameworkfor tool integration.andP;  The main purposes of the reference model are:andM;* To help integrate a variety of software production environments and satisfydifferent development needs.andM;* To support any adjustments in the software production environment that areneeded to meet new development requirements.andM;* To help Software Factories to flexibly accommodate evolutionary changes intechnology, standards, interfaces, and tools.andM;The reference model consists of a number of integration levels.andP;  Each levelfacilitates the exchange of information between the tools that are integratedat that level.andP;  For example, the tools attached to certain levels canexchange different objects that are needed in the software developmentprocess.andM;The level are ordered hierarchically, allowing relationships between each ofthe various levels.andP;  This is known as &quot;mapping,&quot; which also defines therelationship between the tools attached to a particular level.andP;  In addition,it establishes how a level can interact with other levels.andP;  Under thissystem, tools can be integrated in two general ways--either horizontally(level) or vertically (cross-level).andM;What is needed to make sure that the reference model actually works inpractice is the physical socket attached to the tool itself.andP;  Using thissocket, a tool could be plugged into the equipment frame.andP;  (The standard toolsockets are specified in the reference model.)andP;  This plug-in mechanismenables ISPE developers to add or replace tools.andP;  These sockets, along withnew reference model levels and mappings, will also enable software designersto keep up with the constant changes in technology.andM;In addition to lingering technology problems, there are two key issues thathave to be resolved before further progress on Software Factories can bemade.andP;  first, there must be acceptance of user interfaces.andP;  And, second, acommitment must be made to train software specialists in the complexities oflarge systems development projects and processes.andP;  Many of today's softwaredevelopers in Europe and elsewhere lack the skills needed to take fulladvantage of new and evolving software production environments.andP;  Fortunately,educational institutions are slowly responding to these needs.andM;Within a company, training costs are usually not factored into the totalprice of a CASE product.andP;  An integrated CASE system that supports a number ofdevelopment tasks costs at least $100,000.andP;  Even more expensive is thetraining for the new environment.andP;  For every employee trained, you can addanother $100,000 to the CASE price tag.andP;  This calculation is based upon thefact that a salaried employee is pulled off his regular, revenue-generatingactivities during the learning process.andP;  Nonetheless, in the long run,companies must make these intellectual investments if they hope to partake inthe productivity gains promised by the Software Factories of tomorrow.andO;</TEXT></DOC>