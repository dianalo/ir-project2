<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF110-442-526  </DOCNO><DOCID>10 442 526.andM;</DOCID><JOURNAL>EXE  Dec 1990 v5 n7 p14(4)* Full Text COPYRIGHT Process Communications Ltd. (England) 1990.andM;</JOURNAL><TITLE>Wot, no psychotic? (methods for testing and debugging programs)</TITLE><AUTHOR>Ince, Darrell.andM;</AUTHOR><SUMMARY>There are several ways companies can effectively review theirsoftware programs for bugs.andP;  One rule of thumb is to make surethat the person who writes the program code is not the person whotests it.andP;  Another technique is to have the author of the programexplain the code line by line to another programmer.andP;  Programmerscan also use random testing using a random number generator whichis not biased by human intervention.andP;  Decision table processinginvolves testers determining all conditions that could occur as aresult of invoking a particular system feature.andP;  Testers thenexamine all possible events in the decision table.andP;  Error guessinginvolves testers using unusual values for test data that wouldnormally be considered as errors.andP;  The most effective way togenerate high quality test data is to generate an initial testusing a decision table and use error guessing and equivalencepartitioning to supplement data that will crash the system.andM;</SUMMARY><DESCRIPT>Topic:     DebuggingProgram TestingDecision TablesTest Data GeneratorsError CheckingGuidelines.andO;Feature:   illustrationtablechart.andO;Caption:   A simple decision table. (table)Decision table for the AVERAGE program. (table)Set of test data for the Triangle problem. (chart)andM;</DESCRIPT><TEXT>Wot, no psychotic? You may think that the story I am about to tell you haslittle relevance to testing.andP;  Please bear with me: the lesson it taught mehelped me sharpen up my testing considerably.andP;  Even if you think it haslittle relevance, it does contain some humor.andM;It was brought up in a small village in South Wales.andP;  My family was veryreligious and consequently I had to attend chapel every Sunday rather a largenumber of times.andP;  Each Sunday I would be scrubbed and buffed, and sent toboth the Sunday services and Sunday school.andP;  At al these events I had tolisten to rather forbidding preachers who would deliver the same message weekafter week: that the fruits of the present and afterlife would only begathered by those who worked hard.andP;  By the time I went to university, thismessage had been hard-wired into me.andM;After university, I worked for a company which developed real-time softwareon mainframe computers, in those days a notoriously hard thing to do.andP;  I wasgiven the task of programming one of the subsystems of a rather primitivetransaction system using an assembler language.andP;  Debugging facilities werefew and steam-powered.andP;  I found detecting all the errors in the system was anextremely difficult task.andM;I used to come in in the morning, on time, with my ham sandwhichs, collectthe printout from the previous night's run, and pour over octal dumps lookingfor errors.andP;  Because I believed that hard work would enable me to gather thefruits of the present life, I would work through lunch-time, printout in onehand, sandwhich in the other.andM;This approach was only partially successful.andP;  I was working very hard, andbeginning to suspect that the message about the present life and afterlifemight be flawed.andM;This suspicion was heightened by the fact that I shared a room with a moreexperienced programmer, whose frequent habit was to take long, liquidlunches.andP;  In the afternoons he would lurch into the room, belch, glance overmy shoulder and homein on the error I had just spent four hours looking for.andM;Drunk in chargeandM;So, here was I, with a non-conformist upbringing, beaten at debugging my ownprograms by a drunk.andP;  I ascribed his superior performance to the alcohol, anddevised a programme of experiments to test this hypothesis.andP;  fortunately,before I undertook any experiments, I mentioned my problem to a seniorprogrammer.andP;  He told me that my colleague's amazing debugging skills andandM;nothing whatsoever to do with the beer, but had everything to do with thefact that he hadn't written the program.andM;The senior programmer said that developing software was very like givingbirth to and bringing up a child: it is messy, uncomfortable and nothinguseful seems to emerge for a long time.andP;  We tend to exhibit the same faultsin the way we treat both our own software as we do our children.andP;  We havemisconceptions about what they do, we think that they are perfect and weinterpret their actions wrongly.andM;So the worst of person to debug a program, said this sage, is the person thatwrote it.andP;  It is this precept that has guided me both in my teaching and as aconsultant advising companies on quality assurance.andP;  My aim in this articleis to describe some techniques to increase this independence: some of themare managerial, others are technical.andM;Black teamandM;Probably the most extreme implementation of the maxim 'let somebody else testyour software' is the black team.andP;  This is a form of quality assuranceorganisation adopted by some of the divisions of IBM.andP;  A black team is acollection of staff who are called in after system testing has finished, andbefore acceptance testing starts.andP;  Its main function is to ensure that systemtesting has been carried out thoroughly, and that acceptance testing will notbe too big an embarrassment to the developer.andM;IBM has an enlightened employment policy.andP;  It considers that everybody thatit employs - even individuals who might, in most companies, be regarded ascompletely incompetent - is capable of doing some job well.andP;  A black teanoften contains staff who have not succeeded in other areas of a company.andP;  Oneblack team that I met contained a secretary who had crashed every wordprocessor which she had been given; a programmer who spent most of his salaryon stock-car racing; an analyst who had had a run-in with an IBM manager, andhad subsequently developed a pathological hatred of all IBM managers; and aprogrammer who was undergoing therapy.andP;  They formed the ideal team to carryout system testing.andP;  They had no interest in the software they tested andeach, in his or her own way, had a reason for testing a system to theextremes of its performance.andM;I asked some of the members of the team, 'What is a good test?'andP;  They told methat a good test was one which crashed the computer, and an excellent testwas one which crashed the computer and made it inoperative for hours on end.andO;The project managers at IBM hold out the prospect of a visit from the blackteam in order to encourage their staff to test a system more thoroughly thanthey would normally do.andM;Another American phenomenon is the bug bounty hunter.andP;  Small companiesusually resident in California are paid to test a system.andP;  They are usuallygiven a small retainer, with a bonus for each bug that they discover.andM;In the United Kingdom we are somewhat staid, and rely on independent qualityassurance departments who attach staff to projects.andP;  Such departments usuallyhave a separate reporting line to a senior manager.andP;  If a project manager isnot doing a good job testing a system, retribution descends upon him from aconsiderable height.andM;Small alternativesandM;Given that you might work in a small company without a quality assurancedepartment, or you do not have a ready supply of psychotics, what can you do?andO;There are a number of techniques that are available which, if they do notcompletely eliminate the bias that a software developer has in testing hissoftware, certainly reduce it.andM;One of the most effective techniques is the technical review.andP;  A review is ameeting of software staff who examine a document or program code in order todetect errors.andP;  A code review would be a meeting of three or four staff whowould systematically examine one module at a time looking for errors.andP;  Theywould not be involved in rectifying the errors, or suggesting corrections.andO;Their job is simply to find fault.andM;Reviews sound awfully borin - they are - but they are immensely successful.andO;At IBM, when they were introduced, they saved as much as 45% of projectcosts.andP;  The person who suggested reviews to IBM, Michael Fagan, received thelargest bonus in the history of the company.andM;But what if your outfit is too small to use the full review process?andP;  Thereare still some practical measures that you can take.andP;  Make sure that theperson who tests a given code module is not the same programmer that wroteit.andP;  Organise mini code reviews with just two programmers, where the authorof the module explains, line by line, exactly how it works.andP;  It's reallysurprising how many errors are detected by the program's author without thelistener so much as raising an eyebrow.andM;However, if you are a very small project, or you are an individual producingsoftware by yourself, or you are in the unlikely position of not being ableto find a psychotic in your company, then the rest of this article is aboutgenerating high-quality test data which is almost guaranteed to crash anysystem.andM;Random testingandM;The first technique is random testing.andP;  If your program processes a largequantity of numbers or characters strings, then use a random number generatorto produce a large initial test-set.andP;  The advantage of using such a device isthat a random number generator, as the name implies, is not biased by anyhuman intervention.andP;  About five years ago, researchers at the Open Universitycarried out a number of experiments to measure the effectiveness of randomtesting.andP;  During the experiments, which was performed on numerican software,(the sort of software used for simulating nuclear power stations or analysingthe effect of wind on the wings of an aeroplane) the random number generatorblew the software to pieces.andP;  It produced combinations of test data that nohuman tester had ever devised.andM;Another way of generating test data with no bias is to be methodical.andP;  Thereare three ways of generating test data in an organised way withoutintroducing very much bias.andP;  They are called: decision table processing,equivalence partitioning and error guessing.andM;A decision table is just a table which contains entries known as conditionsand actions.andP;  Actions will be carried out when a certain combination ofconditions occur.andP;  An example of a simple decision table is shown in Figure1.andP;  It has four entries.andP;  The first states that if the variable a is equal to3 and the variable c is equal to 5, then some values will be displayed.andP;  Thesecond entry states that if the variable a was not equal to 3 and thevariable b was equal to 4, then error one would be displayed.andM;Decision tables have had a long history.andP;  Originally, in the 1960s, they wereused as a primitive programming language for commercial data processingsystems.andP;  They were often implemented within COBOL compilers.andP;  For parts of asystem which contained a large number of conditions and actions, a programmerwould write a decision table in his program.andP;  a preprocessor would translatethis into COBOL code, which would then be compiled as usual.andM;Decision tables went out of fashion in the early 1970s.andP;  I don't know why - Ihad always regarded them as a neat solution to the problem of convoluted,over-complex code.andP;  However, they re-emerged a few years later in a way thatshocked the computing community.andM;Two American academics, Jim Goodenough and Susan Gerhard, were interested intesting techniques.andP;  Around about the time that they were carrying out theirresearch, there was a very heated debate over the merits of program provingand formal methods of software development.andP;  Proponents of mathematicalsoftware development were fond of stating that program proving (writing downa mathematical specification and then proving that a program implemented it)would render most testing obsolete.andM;Proof not GoodenoughandM;Gerhard and Goodenough devised a testing technique using decision tables, andthen generated test data which checked out a number of published programswhich a number of researchers had proved correct.andP;  The results weredevastating.andP;  Almost all the programs failed under test.andP;  Goodenough andGerhard's technique was so effective that it crashed high-quality programsthat were the product of a lot of effort.andM;Their technique is a very low-tech one.andP;  All it involves is the testeridentifying all the conditions that could occur when a particular feature ofa computer system is exercised, and then exhaustively generating test data byexamining all the possible combinations of events in the table.andP;  As anexample, consider the test of a command that finds the average of a set ofdata which has been gathered over a particular period.andP;  Let us assume thatwhen a user types the commandandM;AVERAGE DATE1, DATE2andM;the average of the data collected between date1 and date2 will be displayedon a VDU, where date1 is chronologically earlier than date2.andP;  The events thatcould occur with this feature are:andM;* The command named could be typed incorrectly.andM;* The first date could have the wrong format.andP;  For example, there could havebeen a reference to the 35th of September.andM;* The second date could have the wrong format.andM;* The first date may be chronologically later than the second date.andM;* The second date may be chronologically later than the date on which thecommand was typed.andM;* There may be no data collected for the period between the dates.andM;* Only one date was typed in.andM;An example of a fragment of a decision table showing some of these conditionsand the actions that should be taken is given in Figure 2.andP;  It is interpretedas follows.andP;  Each condition row will either contain a zero, a cross or beblank.andP;  If a zero occurs then the condition is true, if a cross occurs thenthe condition is false and if blank, then it is irrelevant that thiscondition occurs.andP;  Similarly, action columns will contain zeros, and blanks.andO;If a zero occurs, then the action is carried out; if a blank, then the actionis not carried out.andM;Each row of this column represents a specific test.andP;  For example, the firstrow states that if the command was typed in correctly, the first date (d1)was correct, the secondandM;date (d2) was correct, that data was available between d1 and d2, and twodates were typed in, then their results will be displayed.andM;These tables are produced from the system specification: the document thatdescribes the properties of the system to be developed.andP;  As well as being anexceptionally good way of developing system tests, the technique is athorough check of the system specification.andP;  Developers who use it to producetests have reported to me that, by exhaustively moving through the tablelooking at combinations of conditions, not only are they able to create agood initial test set, but also find massive holes in the systemspecification.andM;Error guessingandM;A second technique is called error guessing.andP;  This involves the testerthinking of outrageous values for test data which would normally be regardedas an error.andP;  These are often the values that the user inputs first beforethey have properly read user documentation, or values which, although theymight occur frequently, haven't been catered for in the software, and oftenblow it to pieces.andM;For example, a program for sorting integers could be tested by error guesseddata which contained:andM;* Alphabetic characters.andM;* The largest integer capable of being stored on the computer.andM;* The negative of the largest integer that can be stored on the computer.andM;* A number which contains a large number of zeros.andM;And so on.andM;A final strategy is called equivalence partitioning.andP;  It is easiest toexplain this technique with an example - the famous .EXE Triangle problem,which acoompanies the Third Side series.andP;  Assume that a program has beenwritten which reads in three integers and checks whether they represent thesides of a triangle, producing a suitable error message if they are not.andP;  Ifthey do, then the program classifies them as being either equilateral (allsides equal), isosceles (two sides equal) or scalene (no sides equal).andM;The behaviour of the program can be characterised in terms of its test data -see Figure 3.andP;  Each area represents test data which exercises the program thesame way.andP;  For example, the area marked Equilateral contains triangle datawhich will be classified as being equilateral.andM;Most programmers will generates test data which lies at the centre of one ofthese areas.andP;  However, the most effective test data is generated near to theboundaries, or at the boundaries.andP;  Such test data will normally discovercommon errors such as a loop being executed one time too many or too few, ora andless; less than operator being used instead of a andless;= less than or equal tooperator.andP;  That is why the test data 4,3,3, which tests for an isoscelestriangle, is much more revealing than the test data 17,17,5 - it lies muchnearer to the boundary of two areas.andM;The best mixandM;To sum up, the best way to generate high quality test data is to use decisiontables to generate an initial test set, then use error guessing andequivalence partitioning in order to supplement this with data which isalmost guaranteed to blow up the software under test.andM;It is worth stressing that the mix of data that is generated really dependson the problem.andP;  Some systems are heavily decision-based and a large amountof decision-table data should be generated.andP;  Other systems will generate asmall amount of decision-table data and a lot of error-guessing data.andM;As a final example, consider the testing of a moduleandM;FIND (a,n,x,t)andM;which sets the variable t to one if the integer x is contained in the first nlocations of the integer array a, otherwise clears it to 0.andP;  The maximum sizeof the array is 100 elements.andP;  The test data that I would generate for thisproblem is shown in Figure 4.andM;Note that error guessing data,such as character strings for numeric input,would not be used in this case as it is a test of a module.andP;  Instead theywould be used if a whole system was being tested, especially one whichrequired considerable interaction with the user.andM;And if all this generation of tables and study of results seems like too muchbother, you know what to do.andP;  Go out and hire a psychotic.andM;Darrell Ince is a Professor of Computing Science at the Open University.andO;Until recently, he was acting head of the computing department.andO;</TEXT></DOC>