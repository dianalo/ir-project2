<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF206-976-534  </DOCNO><DOCID>06 976 534.andM;</DOCID><JOURNAL>PC-Computing  Feb 1989 v2 n2 p130(10)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>Ted Codd: lion in winter. (the father of the relational model ofdatabase design)</TITLE><AUTHOR>DeJean, David.andM;</AUTHOR><SUMMARY>Dr Edgar F Codd built the model for a relational data basemanagement system (RDBMS) during his tenure at IBM in 1969.andP;  After20 years of rejection, the idea is becoming accepted in thecomputer industry.andP;  IBM has introduced DB2, its first relationalproduct.andP;  The PC industry is pushing relational data basedevelopment, especially in multi-hardware environments, where PCsregularly communicate with a central database.andP;  In an effort tocontrol this growth, Codd has established certain models fordefining relational data bases.andP;  Relational DBMS differ fromestablished hierarchical databases in that they are based onshorter tables of information that relate to each other.andO;Hierarchical data bases work in a complex tree structure and aretherefore much slower in the retrieval process.andM;</SUMMARY><DESCRIPT>Company:   Codd and Date International (officials and employees).andO;Topic:     Relational DBMSData Base DesignHistory of ComputingData Base Models.andO;Feature:   illustrationtableportrait.andO;Caption:   Codd's twelve rules for database design. (table)Ted Codd. (portrait)Person:    Codd, E.F. (attitudes).andM;</DESCRIPT><TEXT>TED CODD LION IN WINTERandM;Since Ted Codd first proposed the relational model in 1969, while working forIBM, his work has met a great deal of resistance--because it was tootheoretical, because it was insufficiently developed to solve actual businessproblems, and perhaps because Codd had turned the defense of his idea into apretty vigorous offensive.andM;History, of course, is all about winners, and right now the relational modellooks like a winner: IBM is at last pushing DB2, its relational databasemanager for its mainframes; PC software makers are struggling to squeeze asmuch relationality into their products as machines with limited memory cansupport; and Structured Query Language (SQL), based on the relational logicused by Codd, is quickly becoming a universal standard for accessing largedatabases from small computers.andM;After 20 years, Edgar Codd's struggle to see his work accepted is endingwell.andP;  He left IBM in 1984, and Codd and Date, Inc., which he operates withpartners C. J. Date and Sharon Weinberg, has turned his good idea into aconsulting and seminar business with offices in a handful of U.S.andP;  andEuropean cities and a worldwide network of database consultants who preachand practice the relational model.andM;Those two decades haven't been without their rewards.andP;  While IBM may haveinitially resisted the relational database, it gave Codd an OutstandingInnovation Award for it in 1979.andP;  He was elected a member of the NationalAcademy of Engineering in 1981.andP;  In that same year, he received from theAssociation for Computing Machinery (ACM) its prestigious Turing Award &quot;forfundamental and continuing contributions to the theory and practice ofdatabase management systems.&quot;andM;Still, Edgar Codd says, &quot;I've had an ongoing war to have this thingaccepted.&quot;andM;The Predicate: LogicandM;The relational model grew out of a failed project Codd undertook whileworking at IBM's Poughkeepsie, New York, laboratory in the late '60s todevelop a way of formally defining software and provide a communications toolto software engineers working on the operating system for the IBM 360computer.andM;&quot;It was a huge undertaking,&quot; says Codd, &quot;and IBM had parceled out work tovarious sites that were remote from one another, and the only communicationbetween these sites was expressed in the English language with regard to thespecifications, you see.andP;  And there was a feeling in IBM that what was neededwas something a lot more precise than English, and I agreed.&quot;andM;He proposed to the OS/360 designers a solution that leaned heavily onmathematical logic.andP;  &quot;They had what was to me an amazing reaction.andP;  Theysaid, 'This is a very foreign language, it's a mathematical language, andwe're not going to learn it in order to design OS/360.'andP;  So I said, 'Do youwant to continue with the very rough and ambiguous communication that you nowhave with the other labs?andP;  And they said, 'We'd rather do that than learnthis stuff.'&quot;andM;About the same time, Codd attended a talk given by the designer of a databasemanager for another company who had been invited to IBM Poughkeepsie to talkabout his product.andP;  &quot;The lecture convinced me that there was a greatopportunity for the ideas that I was developing [about a softwarespecification language] in database management because I asked this lecturer...andP;  I was going to ask him two questions about predicate logic.andP;  The firstone had to do with the existential quantifier, and the second was theuniversal quantifier, and I asked the question about the existentialquantifier and his reply was, 'I often get asked questions of a philosophicalnature, but this is the first time I've ever been asked a question aboutexistential philosophy.'andM;&quot;When he said that I knew that he didn't know the first thing about predicatelogic, and so I gave up on the second question.andP;  But that made me realizethat in database management system design there was a lot of opportunity forthe application of predicate logic.&quot;andM;That quote reveals much about Ted Codd's way of thinking, and also about histone and style.andP;  His excursion into formal logic was an unsurprising responseto an answer he'd found wanting.andM;To understand his &quot;predicate logic,&quot; we have to embark on a little excursioninto the mysterious realm of database concepts.andM;There are several database architectures.andP;  The most widely used is thehierarchical model, a tree structure in which individual data are defined asmembers of a group that becomes itself an item of data and member of a highergroup.andP;  An area code, for example, is part of a phone number, which is partof an address, which is part of a personnel record, which is part of adepartmental file.andM;The relational model takes as its basis a much simpler structure--thetwo-dimensional table, rows and columns--but a much more sophisticatedapproach to defining the relations among the data.andP;  Codd, a mathematician,bases the model on two mathematical principles: the theory of relations ofarbitrary degree and multivalued first-order predicate logic.andM;Predicate logic differs from the familiar two-valued propositional logic,used as the basic of many computer operations, which evaluates statements astrue or false: &quot;A equals B,&quot; &quot;A does not equal B.&quot;andP;  Predicate logic treatsvalues as the subjects of its statements and allows for more complexexpressions as predicates--&quot;is a number between,&quot; for example, is a predicatethat requires three subject values and is stated, &quot;A is a number between Band C.&quot;andM;A relational database uses predicate logic to govern its operation on columnsof data, taking the column headings as a operands.andP;  A query to produce a listof employees who live in cities where their company has regional salesoffices, for instance, might involve columns of data headed Empl, City, andOffc.andP;  The columns may all be in separate data files, and the files don'tneed to be indexed against one another for the query to produce a result.andM;The relations created among the data by these operations are treated asobjects by the system.andP;  The simplest relation is two tables stuck together ata common column, like Siamese twins.andP;  More complex relations carry thismetaphor into multiple dimensions.andP;  Still, even the most complex relation canbe displayed as a two-dimensional table and can be used as the basis forfurther queries.andM;The objective of the relational model is to make it as easy as possible toframe a very complex query and get back a usable answer.andP;  The relationalmodel also deals thoroughly with the integrity of the data and describes thisconceptual machine and its principal parts, which include a catalog, whereinformation about the database, previous queries, and permissible proceduresis stored in table from accessible by query, and the optimizer, and enginethat optimizes the execution of queries.andM;In order to help relate the relational model to real-world databasemanagement systems, Codd formulated a list of a dozen criteria a databasesystem must meet to be considered relational.andP;  Codd's rules (see sidebar)have become famous in their own right--if no more widely understood thantheir creator.andM;The complexity and abstraction of all this quickly becomes apparent.andP;  Therelational model is not a specification for a database program.andP;  It is not ananswer to any particular question about using database software, any morethan E=mc.sup.2 answers questions about building a bomb.andP;  Nor does therelational model lend itself to easy description.andP;  It is best describedmathematically.andP;  The relational model is pure science, at once completelyunreal and yet extremely precise.andM;Following the RulesandM;Like his relational model, Edgar Codd is himself complex and abstract, alittle bit unreal, and yet extremely precise.andP;  He is 65, on the tall side,hair thinning, and his British origins are betrayed by an accent that has notdiminished in his nearly 40 years in the United States, and by his love for astrong cup of tea.andM;He came to California to work at IBM's San Jose Laboratories and now livesnorth of that city, almost within sight of the Hoover Tower, which marks theStanford University campus, and at the heart, appropriately enough, of theSilicon Valley region.andM;Tea was first on his mind at a recent interview in his home.andP;  And as wesettled, mugs in hand, into his study, lined with pictures of his childrenand of a Flying Boat of the type he flew during Worl War II, his precisionasserted itself.andM;&quot;I have a little paper I ask interviewers to sign,&quot; he says.andP;  It was not theway most interviews begin:andM;In return for an interview of Dr.andP;  Edgar F. Codd for the trade magazine/paper(publication name) the interviewer (name) agrees to abide by the followingconstraints on what is published in this trade magazine/paper or in anyother:andM;1.andP;  He/she will ensure the correctness of my name and title (the first nameis Edgard, not Edward);andM;2.andP;  He/she will refrain from calling me a guru;andM;3.andP;  He/she will refrain from asserting that I am wealthy;andM;4.andP;  He/she will refrain from putting down research or theory.andM;a) two-thirds of my career in computing has been involved with IBM customers,examining their needs and applications;andM;b) the fact that something is theoretical does not make it impractical--goodtheory has practical application!andM;I agree to abide by these constraints:andM;(date) (signature)andM;These &quot;constraints&quot; grow out of Codd's unhappiness with what he sees assloppy reporting on his life and his life's work.andP;  Codd's nickname is Ted,unusual for someone whose given name is Edgar--and he intensely dislikesbeing identified in print as &quot;Edward&quot; by those who make the obvious leap from&quot;Ted.&quot;andP;  And his aversion to being called a &quot;guru&quot; is understandable ongrounds of simple modesty.andM;Wealthy?andP;  Codd lives comfortably but not ostentatiously in what Californianseuphemistically call &quot;clustered development&quot;--a rowhouse--in a relatively newsubdivision.andP;  The offices of Codd and Date in San Jose are unfashionablysuburban, cramped and bustling with most of the firm's dozen full-timeemployees.andP;  Edgar Codd seems an unlikely candidate for &quot;Lifestyles of theRich and Famous.&quot;andM;The value of research and theory?andP;  Codd's work is not easily accessible toother computer scientists, but time and the marketplace seem to be offeringincreasingly favorable judgments.andM;Taken together, Codd's little rules for interviewers form a first impression:a man intolerant of sloppy thinking, who does not suffer fools gladly.andP;  Asthe interview progressed, that impression grew more vivid.andM;Tackling von NeumannandM;Edgar Codd came to the United States in 1948 with bachelor's and master'sdegrees in mathematics from Oxford.andP;  He found work with IBM as a programmingmathematician for the Selective Sequence Electronic Calculator, a very earlyproto-computer that used 12,500 vacuum tubes and filled two floors of aManhattan office building.andM;He left the company in 1953: &quot;I left IBM because I had a quarrel with a vicepresident who was in charge of the whole Washington, D.C., area.andP;  I went upto Canada, and the reason I chose to go up to Canada was because of SenatorMcCarthy.&quot;andP;  Codd felt democracy was doomed in the United States because noone would demand that Senator Joseph McCarthy produce evidence of his chargesthat there were Communists in the government.andP;  &quot;I was very disappointed inthe United States being so lax about its concern for democracy.&quot;andM;In Canada he established a computing center for the Canadian guided missileprogram.andP;  He returned to the United States at IBM's invitation in 1957.andM;He headed the development of an operating system to manage the concurrentexecution of computer programs on the Stretch, an early IBM stored-programcomputer.andP;  &quot;It was the only computer at that time that had an interruptionmechanism so you could interrupt a program doing something to handlecompletion of I/O on some other program.andP;  You known, people today say, do youmean to tell me there was a time when you had to completely execute a givenprogram before you could go on to another?andP;  They can't believe that thingswere so archaic.&quot;andM;In the mid-'60s, IBM sent Codd to the University of Michigan for advancedstudy.andP;  He earned a Ph.D.andP;  and wrote a book, Cellular Automata, based onresearch into the logical aspects of computers put forth by computer pioneerJohn von Neumann, who outlined a logical creature with 29 &quot;states&quot; oractions.andM;The work came about, says Codd, because &quot;I went for a drink with someone, andhe was making reverent remarks about von Neumann's 29 states and I said, 'Doyou think that 29 states is a minimum in order to express that behavior?'andP;  Hesaid 'Yes,' and I said, 'Okay, let's have a bet.'andM;&quot;And I bet him a beer that within ten days I would have something that wouldconvince him that it wasn't a minimum.andP;  And I did convince him, though Ididn't have the problem completely solved in that time.andP;  I took quite a bitlonger.andM;&quot;I used levels of abstraction in order to jump from dealing with things atthat micro level to the macro, and so forth.andP;  Levels of abstraction are veryimportant in computing.andP;  You can't manage databases on a bits-and-bytesbasis.andP;  If you're only talking bits and bytes, you've lost a lot of the storyabout database management.andP;  Some people think if you don't talk bits andbytes that you haven't got anything, you must be talking philosophy.andM;&quot;It's not philosophy, otherwise you're going to think that all ofmathematics, which is very abstract, is philosophy.andP;  Euclidean geometry,&quot; hecontinues, &quot;is not philosophy, and there are lots of other geometries andalgebras and I can't think of any one of them as a philosophy.&quot;andM;Concrete AbstractionsandM;Abstraction is a subject that Codd speaks of very concretely, and he linksthe topic in conversation to criticisms made of his work for being tootheoretical:andM;&quot;During my fights--and I've had an ongoing war to have this thingaccepted--I've been told over and over again that it's theory and thereforeit's not practical and things like that.andM;&quot;It's because people are afraid of abstract concepts, even though they may beprogramming daily in FORTRAN and COBOL, which are abstract to a degree.andO;They're not the most abstract things you can find, but you can't kick them.andO;You can kick a computer, and you don't have to know all the ins and outs ofcomputers to program in FORTRAN.andP;  People in fact use Euclidean geometry tonavigate from New York to Bermuda in a sailboat.andP;  And yet I bet most of themwould probably disown Euclidean geometry.&quot;andM;In 1968 Codd began to study databases in earnest.andP;  His first objective was todevelop a theoretical foundation for commercial database management, which,he says, did not then exist.andM;Second, he felt &quot;one should try to unify at least two of the three field thatwere database-oriented at that time.&quot;andP;  The first of the three was commercialdatabases.andP;  The second was inferential systems: &quot;You have a number ofassertions, and from those assertions you have to make inferences, and thatfield was completely separate from commercial databases at that time.&quot;andM;The third field was called &quot;document retrieval&quot;--being able to accessinformation from a document that would indicate whether the book dealt withcertain aspects of some subject, and if so, what its approach was.andP;  &quot;Itreally involved document analysis and in fact analysis of English,&quot; saysCodd.andP;  &quot;And I felt at that time, and I still feel, that it's a huge problem,it's not a problem that's going to be suddenly solved, and therefore I didn'tattempt to amalgamate those two fields, but I did attempt to amalagate thecommercial database management with inferential, and the tool that I thoughtwould be applicable to both, and I still feel it is, is predicate logic.&quot;andM;He also began to explore relational theory in mathematics to see what wasapplicable, and, he says, he found something astonishing: every work onrelations he looked into asserted that any problem involving relations ofdegree higher than two (that is, involving more than two objects to berelated) could be reduced to a problem of relations of degree two.andM;&quot;I was surprised by that because I could imagine problems in which you couldattempt to interrelate relations of degree m with relations of degree n andso forth.andP;  So I saw that mathematics needed some extension and I dreamt upthe join of two relations, and I dreamt up relational division...andP;  The earlydays of my work on the relational model were involved with extendingmathematics to handle relations so that when applied to database management,these operators would do things that were useful.&quot;andM;The first public notice of Codd's work was an IBM research report published,he recalls, in August 1969 under the title &quot;Derivability, Redundancy andConsistency of Relations Stored in Large Data Banks.&quot;andP;  The paper that pushedthe relational model into the history books came the following year.andP;  &quot;Thetitle was 'A Relational Model of Data for Large Shared Data Banks,' and itwas in Communications of the ACM, so it got quite wide circulation.andP;  For thefirst half of the '70s, I got as many letters from overseas as I did fromU.S.andP;  sources.andP;  There was a lot of interest and it required there to be adebate in the United States before people really began to start implementingprototypes and products, and that was the debate in '74 in Ann Arbor which Ichallenged Charlie Bachman to.andP;  He said, 'Fine.'andP;  I was surprised.andM;&quot;I discovered later, much later, that he didn't understand the relationalapproach.andP;  He still doesn't, I think, understand it.&quot;andM;Taking on the WorldandM;Charles W. Bachman is the founder and chairman of Bachman InformationSystems, in Cambridge, Massachusetts, a developer of computer-aided softwareengineering tools, has had a long and successful career in databasemanagement systems, and has served as chairman of industry standards groups.andO;He is, like Edgar Codd, a winner of the ACM's Turing Award.andP;  He indicatesthat he thinks he understands the relational model.andP;  And he remembers thedebate.andM;&quot;There was a great deal of argument--some might say religious fervor--overdata management systems and, more particularly, the data model whichunderlies them...andP;  People, being the creatures they are, take sides.andP;  Thereal debate was, 'Is relational the end of all things or is network the endof all things?'andP;  Ted and I were set up as advocates for the two sides.&quot;andM;Bachman remains at some variance with Codd: &quot;I have my own thoughts, but asan engineer and a businessman my purpose is to provide useful tools to ourcustomers.andP;  Fervor is for the salesmen.andP;  I think in some sense Ted Codd hasbeen a salesman for his concept.andM;&quot;Ted says his relational model is based on a perfectly clear, concisemathematical model.andP;  You can say that's a good idea.andP;  The other side is touse database systems to try to help people run their businesses.andP;  If Ted andI have a difference, that's where we would differ.andP;  I'm less of a purist thanhe is.andP;  I'm trying to solve problems for database people, and he's trying topreserve the purity of his math.&quot;andM;As a result of Codd's writing and public appearances, his ideas began to finda home--at first in the academic environment.andP;  Michel Melkanoff, a professorof computer science and currently head of the manufacturing engineeringprogram at UCLA, recalled the impact of a 1970 talk Codd gave: &quot;I didn'tunderstand all the implications, but I could see that for the first timethere was a way to discuss how to organize these database systems, even howto organize knowledge in a more general sense.andP;  Immediately, with others, Ibegan to explore further.&quot;andM;The precision of Codd's mathematics provided what had been missing from thestudy of databases: the formalism of expression necessary for creating anacademic discipline, says Melkanoff.andM;The relational model cleared another hurdle in the '70s when IBM launched itsSystem R project, which was the first implementation of the relational modelin a real database management system, according to Melkanoff.andP;  &quot;System R cameout and, lo and wonder, it worked!andP;  It wasn't as fast as some others, but itwas amazingly easy to use by people who weren't experts.andP;  So now the userworld woke up and began to pressure the software world for this ease of use.&quot;andM;Still, victory for the relational model didn't come overnight.andP;  SaysMelkanoff, &quot;There was a time when every database meeting had an argumentbetween Codd and the other systems.andP;  For a long time he seemed to be fightingthe tide by himself.&quot;andM;Even IBM Can ChangeandM;As the 1970s moved on, Codd found himself more and more often in conflictwith his employer.andP;  Even though IBM had authorized System R, it was veryskittish about the relational idea.andP;  The principal reason was that IBMalready had a database manager product, the very successful IMS (forInformation Management System), a hierarchical database in which IBM--andmany customers--had made large investments.andM;SAys Codd, &quot;Someone in IBM, several times, by the way, and not just oneperson but several people, said one of my problems was I wanted to make a wareffort.andP;  And I said, 'I'm not the one who's making the war.andP;  You're standingpat on IMS and I contend that's a mistake.'&quot;andM;Codd left IBM in 1984, just after the company had finally begun to offerrelational database managers to run under its major operating systems: SQL/DSfor VM and DB2 for VMS.andP;  &quot;There is a continuing quality to this,&quot; says C.J.andO;Date, who is Codd's business partner, &quot;because it took about ten years forvendors to build products based on [the relational model]--partly because ofsome stonewalling and also because there were definitely difficulties indoing it.andP;  If IBM had been convinced from Day One that Ted's idea was a goodone, it would still have taken six or seven years.andP;  It actually took morelike 12 years, in part because of political reasons.&quot;andM;DB2 must give Codd some feeling of vindication, and he is careful tocompliment IBM on the fullest implementation of the relational model todate--even as he vigorously points out its deficiencies.andM;If Edgar Codd has been vindicated, he has not taken it lying down.andP;  The samerigorous application of intellect that produced the relational model is beingapplied unstintingly now, 20 years later, to advancing it.andP;  Codd has beenparticularly critical of SQL, which he watched develop in IBM's San Joselaboratories.andP;  Last summer he wrote a two-part article for Datamation, amagazine for mainframe system managers, pointing out technical deficienciesin the language.andP;  An IBM representative replied, and Codd found the responseunsatisfactory.andM;&quot;What he's saying is what IBM's doing is what the users want,&quot; says Codd,&quot;and I think it's what the designers felt was correct, but without doingenough analysis, do you see?andP;  In other words, what happens a lot in thisfield is designers of systems sit down in an easy chair somewhere, and theysay, 'Oh, wouldn't that be a nice thing to have,' and then they go andimplement it right away and don't think about the environment that it's tosit in, so that every piece of software that I've come across is just like apatchwork quilt, it's just a bunch of patches upon patches upon patches, andit's because the designers often dream up some very narrow solution to aspecific local problem, and they don't have a kind of analysis of the bigproblem.andM;&quot;So you get operating systems like MVS [for IBM mainframes], which are hugeassemblages of these little patches that solve little problems, and the netresult of that is I don't think there's one person in IBM who understands MVScompletely.&quot;andM;Relationality, Version 2andM;This disdain for intellectual laxity becomes one of the continuing themes ofCodd's life, reaching back to his brush with McCarthyism in the '50s andforward to a book that finally lays out completely the relational model.andM;He has just finished the manuscript and expects it to be published thisspring.andP;  &quot;Nothing is being given the heave-ho from the past.andP;  What I'm doingis extending ...&quot;andP;  This extended Version 2 deals with some 300 features ofthe relational model--up from 50 in the original paper.andM;Codd has also reevaluated his 12 rules, which have bedeviled PC databaseprograms in particular.andP;  In the past, he had dictated that any databasemanager that used a catalog and met seven of the 12 rules for relationalitycould be considered a relational product.andP;  No more.andP;  In the future,relational database managers must be in compliance with all the rules: &quot;I amrevising the number upwards because, as time goes by, I expect vendors toimprove their products.andP;  And Version 2 is an attempt to provide vendors witha goal for the '90s.&quot;andM;It may be well into the '90s before any package meets the goal.andP;  Codd speaksapprovingly of only one relational database manager for the PC, the NucleusRelational Database Engine, from Nucleus International, in Santa Monica,California.andP;  Nucleus is a combination of hardware and software.andP;  Such hybridproducts may be necessary to overcome the limitations of the PC in the shortrun, says Codd: &quot;If the PC has the kind of restricted memory capability thatwe now have, not connected to a mainframe or something, I would say youprobably will not get a full relational database management system.andP;  But onceyou have a large enough storage to contain a decent amount of code for thedatabase manager, as well as the data that you're either storing in thedatabase or retrieving from some other machine, then you'll need morecomplete support.&quot;andM;The same constraints of memory will keep SQL from being widely used on PCs inthe near term, Codd feels.andP;  &quot;It's the compiler, if you like, that's takingthe space.andP;  It's not that the database is going to consume a lot more spacebecause it's relational, as people have complained.andP;  That's not correct.andP;  Buteven if you were to implement SQL successfully, and I think the only onethat's done it on a PC is Nucleus, there is the problem that today therearen't any massive storage units that plug into a PC.andP;  Now tomorrow may bedifferent ...andP;  if we were holding this kind of conversation ten years fromnow, I suspect we would say that it's certainly time for relational structureto be used.&quot;andM;Another thing that may be missing in the near term, Codd indicates, issupport for distributed database management: &quot;That's because vendors don'tseem able to invest the effort needed in terms of analysts and programmersand designers to implement full distributed database management.&quot;andP;  By &quot;full&quot;he means the ability not only to read the data, but to update it with theassurance of integrity of the data even though the update commands may reachacross several machines.andM;&quot;So yes, we're all going to distributed, but it's going to be a little bitslow.andP;  I think sometime in the '90s we might see some full support fordistributed database management, but we'll be lucky if we get it in the '90s,actually.&quot;andM;From Theory Comes PracticeandM;All of this sounds remarkably practical for a man who has been famed--evenreviled--as a theorist.andM;&quot;I've always emphasized the practical use of these things,&quot; says Codd.andP;  &quot;Whenpeople get up and say, 'Oh, it's theoretical, therefore it can't bepractical,' or they say, 'That's theoretical whereas I have a practicalapproach,' it's like saying that because my approach has a theoreticalfoundation it cannot be practical.andM;&quot;Well, the fact is it can be more practical if it has a theoreticalfoundation, because if you want to invest in some database management systemand you don't know whether to choose a relational or a nonrelational, theadvantage that the relational has is that your investment is not suddenlygoing to be made obsolete, due to the fact that it's based on theory whichhas been thousands of years in the development.andM;&quot;Predicate logic has developed for 2,000 years, since the ancient Greeks.andO;The ancient Greeks were probably the first to realize that you can discusslogic independently of whatever it is applied to, and it's taken about 2,000years since then to develop predicate logic.andM;&quot;So I say to people, the relational approach isn't going to be made obsoletesuddenly.andP;  They'll have plenty of time, perhaps decades, to think about itbefore some brilliant mathematician invents a replacement.&quot;andO;</TEXT></DOC>