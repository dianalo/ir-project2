<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-429-944  </DOCNO><DOCID>08 429 944.andM;</DOCID><JOURNAL>Communications of the ACM  May 1990 v33 n5 p604(2)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Alan J. Perlis 1922-1990: a founding father of computer science asa separate discipline.andM;</TITLE><SUMMARY>Renowned as an educator and as a programming systems and languagedeveloper, Alan J. Perlis passed away on Feb 7, 1990 from a heartattack.andP;  Perlis was the first editor-in-chief of Communications ofthe ACM (Association for Computing Machinery), was president ofthe ACM from 1962-64 and was the first recipient, in 1966, of theACM's Turing Award.andP;  Along with writing dozens of papers onprogramming languages, systems and developments, Perlis authoredIntroduction to Computer Science, Harper and Row 1972, 1975, andwith co-author B.A.andP;  Galler, A View of Programming Languages,Addison-Wesley, 1970.andP;  Alan J. Perlis will be remembered for hispervasive joy and personal warmth as much as for his specifictechnical achievements.andP;  He believed that computing should be funand his enthusiasm set the tone for both his teaching andresearch.andM;</SUMMARY><DESCRIPT>Topic:     Computer industryAuthoring.andO;Feature:   illustrationportrait.andO;Caption:   Alan J. Perlis. (portrait)Person:    Perlis, Alan J. (biography).andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Alan J. Perlis died of a heart attack in New Haven, Connecticut on February7, 1990 at the age of 68.andM;Renowned as an educator and as a programming systems and language developer,he was the first editor-in-chief of Communications of the ACM (1958-62),president of ACM from 1962 to 1964, and the first recipient, in 1966, ofACM's Turing Award.andM;Perlis was born in Pittsburgh, Pennsylvania, on April 1, 1922.andP;  He received aB.S.andP;  in chemistry in 1942 from Carnegie Institute of Technology (nowCarnegie Mellon University).andP;  After serving in the U.S.andP;  Army Air Force from1942 to 1945, he did postgraduate work at the California Institute ofTechnology from 1946 to 47, receiving an M.S.andP;  in mathematics.andP;  He receivedhis Ph.D.andP;  in mathematics from M.I.T.andP;  in 1950 and spent 1951 as a researchmathematician in the multi-machine computing laboratory of the BallisticResearch Laboratories at Aberdeen Proving Grounds.andP;  He then returned toM.I.T.andP;  to work on Project Whirlwind, developing programs throughout 1952.andM;From September 1952 through 1956 he was assistant professor of mathematics atPurdue University and director of a computer center consisting of an IBM CPC(installed October 1952) that was replaced by a Datatron 205 in the spring of1954.andP;  In 1955 he headed a group at Purdue that defined a language IT (forInternal Translator) and developed a compiler for it.andP;  This work wascontinued on the IBM 650 when he took the position of associate professor ofmathematics and director of the Computation Center at Carnegie Tech in 1956.andO;A version of IT was running at the center in November 1956, and within a yearit was in wide use on 650s at a number of university computing centers.andP;  (Theone for Purdue's Datatron was also running in 1957; the succession ofalgebraic language compilers and assemblers were designed and built for the650 by Perlis, Joseph Smith, Harold van Zoren, and Arthur Evans.)andM;&quot;Research in programming languages dominated my life from then on,&quot; saidPerlis at the ACM SIGPLAN History of Programming Languages Conference in LosAngeles (June 1-3, 1978).andM;In 1957, ACM president John W. Carr III appointed Perlis chairman of aprogramming language committee to meet with a similar subcommittee of GAMM(Gesellschaft fur angewandte Mathematik und Mechanik) in Europe to design auniversal algebraic language.&quot; The group of eight met in Zurich and specifiedwhat was finally called Algol-58.andP;  The report on Algol-58 by Perlis andSamelson was the basis of a formal specification of Algol-60 by 13international scientists (including Perlis, of course).andM;Meanwhile, at Carnegie Tech a course on programming, distinct from numericalanalysis and available to all undergraduate students, was introduced.andP;  Perliswas professor and chairman of the mathematics department at Carnegie Techwhile continuing as director of the computation center from 1960 to 1964, andin 1962 he became co-chairman of an interdisciplinary doctoral program inSystems and Communication Sciences.andP;  This led to the establishment of anARPA-supported program in computer science, which, in turn, led in 1965 to agraduate department of computer science.andP;  He was its first chairman,remaining so until 1971.andP;  More than a dozen of the department's graduatestudents received their degrees under him; they include well-known leaders inteaching and research from coast to coast and a few abroad.andM;During the 1960s he developed such extensions to Algol as Formula Algol, anAlgol manipulator of formal mathematical expressions, and LCC, a form ofAlgol adapted to interactive incremental programming.andP;  After a tour asvisiting scientist at the Mathematische Centrum in Amsterdam, The Netherlands(1965-66), he held the title of University Professor of Computer Science atCarnegie Tech.andM;In 1971 he joined the new Computer Science Department at Yale University asEugene Higgins Professor of Computer Science, and played a leading role indeveloping that department.andP;  He was its chairman during the 1976-77 year, andfrom 1978-80, serving again as acting chairman in 1987.andP;  During these yearshe developed new computer courses at both the graduate and undergraduatelevels.andP;  From 1977-78 he was Gordon and Betty Moore Professor of ComputerScience at the California Institute of Technology.andP;  More than a dozengraduate students at Yale received their doctorate degrees under hissupervision.andM;He received honorary degrees from Davis and Elkins College, PurdueUniversity, Waterloo University, and Sacred Heart University.andP;  During the1960s and 1970s he gave numerous invited lectures abroad (3 in the SovietUnion, 2 in Copenhagen, 2 in Italy, 2 in China, 2 in Israel, as well asMexico, Peru, Venezuela, Edinburgh, and Holland).andM;In addition to writing dozens of papers, alone and with colleagues, onprogramming languages, systems and developments, he was the author ofIntroduction to Computer Science, Harper and Row 1972, 1975, and, with B.A.andO;Galler A View of Programming Languages, Addison-Wesley, 1970.andM;Throughout his career he continued to serve on national and internationalcommittees and boards for medical research, natural language processing andtranslation, and, for the last 20 years, on software engineering.andP;  Theseservices were in the National Science Foundation, The Pennsylvania Council onScience and Technology, The National Research Council Assembly onEngineering, and several projects of the Computer Science and TechnologyBoard of the National Research Council (one of the National Research NetworkReview Committee, and the last-in May 1989-for &quot;Keeping the U.S.andP;  ComputerIndustry Competitive&quot;).andP;  He was elected to the American Academy of Arts andSciences (1973), The National Academy of Engineering (1976), and he receivedthe Education Award from AFIPS in 1984.andM;Perlis will be remembered as much for his personal warmth and pervasive joyas for specific technical achievements.andP;  He believed that computing should befun; this contagious enthusiasm set the tone of both his research andteaching.andM;His dynamic view of programming languages was explicitly expressed in thepostscript, 20 years later, to his Turing Lecture.2 We quote: ..andP;  we areseduced into making ambitious experiments we were loath to try before ...andO;such as pipelining (APL), distributed programming (...andP;  calledobject-oriented programming, e.g., Smalltalk).... Functional programming (...andO;like USP, EP, or ML)....nonprocedural programming (  ...andP;  PROLOG).andM;&quot;.  .  .  these have captured our imaginations much as Algol did 25 yearsago.andP;  Strong efforts are being made to standardize a few languages.andP;  Thus farwe have resisted such a limitation, and we were wise to have done so.andP;  Newarchitectures and problem areas are sure to suggest new computational modelsthat will stir imaginations.&quot;andO;</TEXT></DOC>