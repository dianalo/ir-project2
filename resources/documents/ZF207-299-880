<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-299-880  </DOCNO><DOCID>07 299 880.andM;</DOCID><JOURNAL>Dr. Dobb's Journal of Software Tools  June 1989 v14 n6 p72(3)* Full Text COPYRIGHT Mandamp;T Publishing Inc. 1989.andM;</JOURNAL><TITLE>Creating TSR programs. (Terminate and Stay Resident computerprograms part 2) (technical)</TITLE><AUTHOR>Pottebaum, Ken L.andM;</AUTHOR><SUMMARY>Terminate-and-Stay-Resident (TSR) programs created with TurboPascal 5.0 and TSRUnit require four parameters: a character stringcontaining the name of the TSR, a procedure-type parameterspecifying the function called when the TSR is popped up, and twoparameters specifying the default hot-key combination the userpresses to pop up the TSR.andP;  Also necessary is a function whichTSRUnit can call when it pops up and a call to TSRInstall.andP;  Asample program, TSRDEMO.PAS, calls the procedure DemoTasks,creating a window on the screen which displays instructions andmiscellaneous information.andP;  Specified user input activatesroutines which demonstrate DemoTasks' special features.andM;</SUMMARY><DESCRIPT>Product:   Turbo Pascal 5.0 (Program development software) (usage).andO;Topic:     User-Written SoftwareFunctionsFunctional ProgrammingProceduresSoftware DesignMemory-Resident SoftwareProgramming.andM;</DESCRIPT><TEXT>Creating TSR ProgramsandM;This is the second part of a two-part article about creating TSR(Terminate-and-Stay-Resident) programs with Turbo Pascal 5.0 and TSRUnit.andO;The first part dealt with the inside workings of TSRUnit.andP;  This part focuseson how to use TSRUnit and provides an example program.andP;  Although the exampleprogram is simple, it illustrates mehtods for accessing files, printing,inserting characters into the keyboard input stream, and other useful tasks.andO;If you missed the first part of the series, you can still create your own TSRprograms because the INTERFACE section of TSRUnit (Listing One, page 106)provides information about how to use the unit.andM;Using TSRUnitandM;In order to use TSRUnit, your program must provide a function for TSRUnit tocall when the unit pops up and also perform a call to TSRInstall.andM;The function that TSRUnit calls when it pops up may have any valid functionname.andP;  For simplicity, I will refer to this function as DemoTasks.andO;(DemoTasks is also the name for this function in the example program TSRDemo,which is discussed later in this article.) DemoTasks must be compiled as afar function (without any parameters) that returns a WORD value.andP;  The WORDvalue is the number of characters to be inserted into the keyboard inputstream.andP;  (The character insertion option is a special feature provided byTSRUnit and is explained later, along with the other features illustrated inthe example program.)andP;  Generally speaking, the far function can contain anyvalid Turbo Pascal statement, including calls to other procedures andfunctions.andP;  Common sense is important, however, when any of the routines fromthe standard DOS UNIT are used.andP;  For example, it would not make sense to usethe keep procedure because keep has already been used.andP;  Also, if you use anyof the procedures that change interrupt vectors, be sure to restore thoseprocedures before exiting DemoTasks.andM;As shown in Listing One, the call to TSRInstall requires four parameters.andO;The first parameter is a character string that contains the name of the TSR;this name is displayed when the TSR is installed.andP;  The second parameter is aprocedure-type parameter that specifies the function that TSRUnit calls whenthe TSR is popped up.andP;  The last two parameters specify the default hot keycombination that is pressed in order to pop up the TSR.andP;  The first of the hotkey parameters contains a byte code that represents the shift keys that mustbe pressed while the key for the character specified in the last parameter ispressed.andP;  The shift key code can be any combination of the followingconstants: AltKey, CtrKey, LeftKey, and RightKey.andP;  The constants stand forthe Alt, Ctrl, Left Shift, and Right Shift keys, respectively.andP;  Combinationsof two or more shift keys may be formed by using either the OR or + operatorsto combine tha constants.andP;  The valid characters for the last parameter are 0- 9 and A - Z.andM;Example TSRandM;The example program, TSRDEMO.PAS, is shown in Listing Two, page 106.andO;Although Turbo Pascal normally defaults the stack size to 16K, the compilermemory directive may be used to set the stack and heap sizes.andP;  TSRDemo usesthe compiler directive to reduce its memory requirements by specifying a 2Kstack and no heap.andP;  To find the minimum stack size with which your programwill work, simply run the program with different stack sizes.andP;  In order forthe stack size check to be valid, test all of the program's features (unlessyou already know which feature of the program uses the most stack space).andP;  Ifyou know the worst case, limit the testing to the worst case operations.andP;  Setthe stack size for your program slightly higher than the minimum size forwhich the program worked, in order to allow for variations in stack usagethat occur due to differences in versions of DOS and BIOS used and due to thepresence of other TSR programs.andP;  Although you can reduce memory usage byspecifying a stack that is only as large as necessary, do not confuse thisstep with avoiding using the stack altogether -- the use of the stack forlocal variables and for passing information is an efficient allocation ofmemory.andM;When TSRDemo is popped up, its routine, DemoTasks, is called from TSRUnit.andO;DemoTasks creates a window on the screen, displays some instructions, anddisplays miscellaneous information about the computer system.andP;  It then echoesthe keyboard input to the screen until a key that activates a demopnstrationof one of DemoTasks' special features is pressed.andP;  Demotasks provides fourspecial features: file accessing, printing, accessing the saved screen image,and inserting characters.andM;File AccessingandM;When the F1 key is pressed, the standard file-handling routines are used towrite a short message to the TSRDEMO.DAT file.andP;  It is advisable to disablethe compiler I/O error-checking directive, and to use the IOResult functionto check for errors when files are accessed.andM;PrintingandM;When F2 is pressed, DemoTasks performs the operations that are required inorder to print a short message.andP;  Programs normally use the standard PRINTERunit to automatically assign, open, and close the printer device.andP;  The TSRinstallation process causes a printer device that was opened in this fashionto be closed.andP;  Therefore, the TSR program must treat the printer as a normalfile device, and use the Assign, Rewrite, and Close procedures to open andclose it.andM;Printing from a TSR poses a special hazard.andP;  If the TSR writes to the printerwhen the printer is not ready, an error occurs.andP;  When the standard IOResultfunction is used, the error is reported, but damage that may be caused by theerror is not prevented.andP;  The consequence of this &quot;device not ready&quot; error isthat the computer may crash when the TSR is popped back down.andP;  An easy way toprevent this problem is to always check the printer status before usng theprinter.andP;  TSRUnit provides two auxiliary functions for this purpose:PrinterOkay and PrinterStatus.andP;  PrinterOkay returns a TRUE value if theprinter is selected, the printer has paper, and no I/O or time-out error hasoccurred.andP;  PrinterStatus returns the actual status byte for the printer.andM;Accessing Saved Screen TextandM;When F3 is pressed, the program prompts you for the row number of the savedscreen text to be displayed.andP;  TSRUnit provides the pointer TSRScrPtr, whichpoints to the saved screen image.andP;  In addition, TSRUnit provides twoauxiliary routines that return the contents of one row of a text image.andP;  Thefunction ScreenLineStr returns all of the characters contained on the line ina character string.andP;  The procedure ScreenLine returns an array of records,where each record contains a character and the character's display attribute.andM;Inserting CharactersandM;DemoTasks' fourth special feature is the insertion of characters into thekeyboard input stream.andP;  Whe F8 is pressed, you are prompted to specify thecharacters to be inserted.andP;  After you type the characters, the TSR pops backdown and inserts them into the keyboard input stream.andP;  A useful applicationof this feature is to insert a result obtained from the TSR into aspreadsheet or word processor program.andM;In order for TSRUnit to insert the characters, the pointer TSRChrPtr must beset to point to the first character to be inserted, and the return value forDemoTasks must be set to the number of characters.andP;  The only restriction onthe number of characters to be inserted is that all of the characters mustreside in the same 64K segment of memory.andP;  Because the example programrestricts the number of characters to 255, it stores the characters in stringInsStr and puts the address of InsStr[1] in TSRChrPtr.andM;Overriding Default Hot KeysandM;To allow the users of TSRs to avoid hot key conflicts with other programs,TSRUnit permits the default hot key combination to be overriden when the TSRis installed.andP;  To replace the hot key combination, include some command-lineparameters along with the TSR's program name.andP;  The format for the parametersis [/A] [/C] [/R] [/L] [/&quot;[K[&quot;]]]andM;The square brackets surround optional items.andP;  (Do not include the brackets.)andO;Spaces or characters between the parameters are ignored and the parametersmay be listed in any order.andP;  Although the shift key parameters (/A, /C, /R,and /L) are cumulative, only the last character key specified is used.andP;  Thecommand to install TSRDemo with hot key combination Alt, Left Shift, T isTSRDEMO /A/L/&quot;TandM;Caution: The Effect of Run-Time ErrorsandM;Although it is always good programming technique to take steps to preventrun-time errors from occurring, it is especially important to do so in a TSRprogram.andP;  Depending upon the error-handling methods used, the occurrence ofan error can cause the execution of the TSR to be aborted.andP;  In some cases,execution will resume at the DOS prompt level.andP;  In more severe cases, thcomputer will &quot;hang up&quot; either immediately, or later when the TSR is poppedback down.andM;Several approaches can be used to deal with run-time error situations.andP;  Theexample program TSRDemo illustrates two approaches.andP;  One of these methods isto replace Turbo Pascal's standard I/O operation error-checking code withcode that simply displays an error message.andP;  (The default error-checking codeterminates the program after displaying an error message.)andP;  The standard I/Oerror checking is disabled with the compiler directives [$I-].andP;  As an exampleof a second type of error checking, TSRDemo uses TSRUnit's PrinterOkayfunction to verify that the printer is ready before writing to it.andP;  Thisapproach can also be used to prevent numerical errors, such as divide-by-zeroerrors.andP;  A third method, which is too complicated to cover in this article,is to intercept the error handling routines.andM;One important category of errors that should be prevented from occurring isthat of &quot;device not ready&quot; errors -- this type of error causes the computerto &quot;hang up&quot; either when the error occurs or when the TSR pops back down.andO;The most likely cause for this type of error is an attempt to use either adiskette drive or a printer when it is not ready.andP;  To prevent either of theseevents from occurring, the example program takes the precaution of queryingthe user and checking the printer status.andO;</TEXT></DOC>