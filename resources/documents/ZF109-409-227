<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF109-409-227  </DOCNO><DOCID>09 409 227.andM;</DOCID><JOURNAL>Hewlett-Packard Journal  August 1990 v41 n4 p24(7)* Full Text COPYRIGHT Hewlett Packard 1990.andM;</JOURNAL><TITLE>HP MAP 3.0 File Transfer, Access, and Management/800.andO;(Hewlett-Packard's Manufacturing Automation Protocolimplementation)</TITLE><AUTHOR>Manweiler, Steven W.andM;</AUTHOR><SUMMARY>HP's Manufacturing Automation Protocol (MAP) 3.0 implements theFile Transfer, Access and Management (FTAM) OSI standard in aproduct called MAP 3.0 FTAM/800.andP;  FTAM is defined by the ISOstandard in three parts: the virtual file store (VFS), theservices and the protocol.andP;  VFS defines how to handle various filestructures; the services define the functionality requestable byusers; and the protocol defines the order in which the servicescan be used.andP;  VFS file actions and attributes are described, andthe VFS file model is presented.andP;  Nested stages, or regimes, arebuilt by initiators and responders during protocol exchanges; thefour types of regimes are the FTAM regime, file selection regime,file open regime and data transfer regime.andP;  The three processes inHP MAP 3.0 FTAM/800 are a user process, a service provider processand a responder process; each is described.andM;</SUMMARY><DESCRIPT>Company:   Hewlett-Packard Co. (products).andO;Ticker:    HWP.andO;Product:   HP FTAM/800 (Communications software) (design and construction).andO;Topic:     Manufacturing Automation Protocol (Computer Network Protocol)SpecificationsOSI StandardFile Transfer Access and Management ProtocolComputer-Integrated ManufacturingSoftware DesignImplementation.andO;Feature:   illustrationchart.andO;Caption:   General FTAM file model. (chart)Structure of an FTAM-1 file. (chart)FTAM implementation for HP MAP 3.0. (chart)andM;</DESCRIPT><TEXT>[FIGURES HAVE BEEN OMITTED]andM;File Transfer, Access, and Management, or FTAM, is an OSI standard thatdefines the framework upon which layer seven file transfer services can bebuilt for accessing and managing files across open systems.andM;THE BASIC DISTRIBUTED file system capability for OSI communication is definedby the file service standard called File Transfer, Access, and Management(FTAM).andP;  FTAM defines facilities for the transfer of files between opensystems and provides a framework for accessing and managing files across opensystems.andM;While FTAM provides functionality similar to conventional file transferservices, FTAM is not strictly a file transfer service.andP;  It also provides theability to perform functions such as reading and writing parts of remotefiles, and obtaining or modifying attribute information associated with aremote file.andP;  FTAM should not be thought of only as a file transfer service,but rather as a framework on which services such as file transfer can bebuilt.andP;  In fact, a service such as a distributed file system could be builtusing a suitable FTAM implementation.andP;  However, the main strength of FTAM isthat it is a system independent file service.andP;  Any two vendors with FTAMimplementations can communicate with each other using FRAM regardless of thetypes of file systems supported by those vendors.andM;FTAM is defined in the International Standards Organization (ISO) documentISO 8571.1 This document defines the file service, the file protocol, and acommon model of a file system.andP;  However, it does not define a user interface.andO;Various committees are currently working on defining interfaces for FTAM, orhave already done so.andP;  One example of an existing programmatic interface forFTAM was defined by the North American NW/TOP (Manufacturing AutomationProtocol/Technical Office Protocol) Users Group.2andM;Another standards organization involved with FTAM is the U.S.A.andP;  NationalInstitute of Standards and Technology (NIST).&quot; Four times a year NIST hosts aworkshop in which vendors meet to develop implementation agreements forexisting OSI standards.andM;This article describes the basic concepts of FTAM, the functionality of FTAMin HP MAP 3.0, and some aspects of HP's design and development of FTAM.andM;Overview of FTAMandM;The FTAM standard (ISO 8571) defines FTAM in three parts: the virtual filestore (VFS), the services, and the protocol.andP;  The virtual file store defineshow to handle different files structures, the services define thefunctionality that can be requested by the user, and the protocol defines theorder in which the services can be used.andM;Virtual File StoreandM;The virtual file store, or VFS, is the most important aspect of FTAM.andO;Because of the wide variety of file systems and file structures available ondifferent systems, a common representation of a file system is needed tofacilitate the transfer and access of files between dissimilar systems.andP;  TheVFS is this common (virtual) file system.andP;  It defines a set of actions(operations) that can be performed on virtual files, a set of attributesassociated with virtual files, and the structure (model) of virtual files.andO;Each FTAM implementation is responsible for mapping the features of the VFSonto the mechanisms provided by its file system.andP;  VFS File Actions.andP;  Theactions that can be performed on VFS files are similar to those provided bymost file systems.andP;  Users can create and delete a file, open and close afile, read or change the attributes of a file, read or write all or parts ofa file, and erase or move to various locations in a file.andM;VFS File Attributes.andP;  A set of attributes is defined for each file in theVFS.andP;  These attributes are properties that, aside from the data in the file,completely describe the file.andP;  A file has basic attributes such as its name,its type, and the actions that may be applied to that file, along withattributes that specify accounting information, history, user accessrestrictions, security restrictions (e.g., passwords), and concurrent accessrestrictions.andM;The set of attributes supported by the VFS is large enough to have a logicalmapping to any file system.andP;  In fact, most real file systems support a muchsmaller set of attributes than that defined by the VFS.andP;  This set ofattributes contains mandatory and optional attributes.andP;  All FTAMimplementations must support the set of mandatory attributes, and may chooseto support an optional attribute if, for example, that attribute has anatural mapping onto that implementation's file system.andM;An example of a mandatory attribute is the permitted actions attribute.andP;  FTAMdefines a set of actions that can be performed on an existing file.andP;  Theseactions include read, insert, replace, extend, erase, read attributes, changeattributes, and delete file.andP;  The permitted actions attribute for a filedefines a subset of these actions that can be applied to that file.andP;  Any FTAMuser is capable of performing this subset of actions on the file.andP;  FRAMdefines an optional attribute called access control that is used when a finergranularity of access restriction is needed for a file.andP;  For example, itallows the creator of a file to designate the users that can access the file,and by setting the permitted actions for each user, designate how each usercan access the file.andP;  If this attribute is not used, any user can access thefile.andM;Another attribute of the virtual file store worth mentioning is its filelocking mechanism, which is called concurrency control.andP;  When accessing afile, an FTAM user can specify a separate lock for each file access action.andO;For example, a user can specify a shared lock for the read action andexclusive locks for the write actions such as insert, replace, extend, anderase.andP;  Virtual File Store File ModelandM;The most important feature of the virtual file store is its file model.andP;  Thisfile model specifies the file data types, the file structure, the file accessoperations, and the encoding of file data for transfer.andM;The VFS uses a very general hierarchical model to describe the structure ofall files (future addenda to ISO 8571 may include the definitions of otherfile models such as a network model or relational data bases).andP;  In thismodel, a virtual file is an ordered tree of any depth.andP;  Associated with eachnode in the tree is an access point in the file called a file access dataunit (FADU).andP;  These access points may or may not have user data associatedwith them.andP;  The user data is structured into groups called data units.andP;  Fig.andO;1 shows this file model.andM;It is possible to access all or part of the information stored in the tree.andO;When accessing a specific node in the tree, all data contained in the subtreeof a node is available to the user.andP;  Thus, to read a complete file, the usercan either traverse the entire tree (preorder traversal is used), or the usercan read all data associated with the root node of the tree in one operation.andM;Abstract Syntax Notation One (ASN.1) is used for specifying the types ofinformation in a file and how this information is encoded for transfer.andO;ASN.1 provides a common way to specify the format of the data that is to betransferred by FTAM.andP;  See the article on page 11 for more about ASN.L.andM;Most of the file structures of existing file systems are more restricted thanthat specified by the VFS file model.andP;  For this reason the VFS defines thenotion of a document type.andP;  A document type defines practical file types byimposing restrictions on:andM;* The structure of the fileandM;* The types of the data in the file and the amount of structuring informationpresent in the fileandM;* The actions that may be performed and when they may be performedandM;* The mechanism of encoding data for transfer.andP;  FIAM-1 models simple textfiles such as an HP-UX text file, which is simply a sequence of bytes withoutany structure.andP;  This type of file consists of one FADU that contains one dataunit.andP;  The data unit contains the contents of the entire file.andP;  The FTAM-1document type restricts the file's contents to text (i.e., the file may notcontain integers or floating-point numbers).andP;  The document type definitionalso places restrictions on how files may be transferred and accessed.andP;  Forexample, data in FTAM-1 files can only be written at the end of the file, andit is not possible to read parts of an FTAM-1 file, that is, the entire filemust be read.andM;Fig.andP;  3 shows another document type called FTAM-2.andP;  This document type modelsrecord-oriented files.andP;  In this model, each record is represented by a FADUand each FADU contains one data unit that represents the contents of therecord.andP;  In addition, a root node without an associated data unit is includedin the structure.andP;  This gives the user the ability to address the entire filein one operation.andP;  This is useful for situations in which the user wishes toread the entire file.andP;  If there were no root node, the user would have toread the file one record at a time in separate operations.andP;  Again, thecontents of data units for files of this document type are restricted totext.andM;The FTAM-2 document type definition also places restrictions on how variousoperations can be applied to files.andP;  For example, the erase operation canonly be applied to the root FADU (i.e., only the whole file may be erased).andO;Furthermore, new records can only be added to the end of the file andexisting records cannot be changed or updated (i.e., only read access isallowed on existing records).andM;Each FTAM implementation supports a certain set of document types.andO;Developers will usually choose to support document types that closely modelthe file types supported by their operating systems plus document types thatmodel files of other vendors for interoperability purposes.andP;  For example, thedocument types FTAM-1 and FTAM-3 map naturally onto HP-UX file systems, whilethe document type FTAM-2 maps naturally onto record-oriented file systems.andO;FTAM-3 is identical to FTAM-1 except that FFAM-3 files contain only binarydata.andP;  HP's MAP 3.0 FTAM/800 supports all three of these document types.andO;Services and the ProtocolandM;FTAM defines a set of services that can be requested by the user.andP;  Theservices available in FTAM allow users to establish, release, and abortconnections, create and delete files, open and close files, read and changethe attributes of a file, read, write, and erase a file, and move todifferent locations in a file.andP;  The order in which these services can be usedis also defined and represents the FRAM protocol.andP;  The protocol is strictlyconnection-oriented and follows the requestor/server model (see Fig.andP;  4).andP;  Inthis model, a requestor (initiator) makes requests to a specific server(responder).andP;  The responder can handle requests simultaneously from more thanone initiator.andP;  In FTAM, the initiator is the user and the responder acts asthe entity manipulating the (possibly remote) virtual file store.andM;During protocol exchanges, the initiator and responder build a series ofnested stages or regimes.andP;  There are four such regimes that can beconstructed during the course of an FTAM dialogue.andP;  These regimes are:andM;* The FTAM regime (a connection is made between initiator and responder)andM;* The file selection regime (a specific file is selected or created)andM;* The file open regime (the selected file is opened)andM;* The data transfer regime (data is transferred between the initiator andresponder).andM;FTAM Regime.andP;  The FTAM regime is entered when an initiator establishes aconnection with a responder.andP;  When establishing a connection, the initiatorand responder negotiate what can be done on the connection.andP;  This negotiationis necessary because implementations are not required to support all of theFTAM functionality.andP;  This negotiation takes place in two steps.andP;  First, theinitiator sends a connect request that contains information concerning whatoperations the initiator wishes to perform on the connection.andP;  Next, theresponder issues a connect response back to the initiator indicating which ofthe requested operations the responder supports.andM;The initiator may terminate the FTAM regime (i.e., close the connection)using the FRAM terminate request.andP;  A connection may be terminated at any timeusing the FTAM abort service.andP;  This is an unorderly method of terminating aconnection.andP;  For example, if a connection is aborted during a data transfer,the file being accessed may be left in an undefined state.andM;File Selection Regime.andP;  Once the FRAM regime has been established, the nextstep is to select or create a file.andP;  All operations in subsequent regimes areapplied implicitly to this file.andP;  When the initiator is finished with thisfile, a new file can be specified by exiting and reentering the fileselection regime.andP;  Once the file selection regime is established, theinitiator can request file management operations without entering any otherregimes.andP;  For instance, the initiator may read the attributes or modify theattributes of the currently selected file.andP;  The file selection regime can beterminated by the initiator by deselecting or deleting the file using theFTAM deselect or FTAM delete service.andP;  The FTAM protocol then reenters theFTAM regime.andP;  File Open Regime.andP;  Before any data transfer can take place, theselected file must first be opened.andP;  This is the purpose of the file openregime.andP;  When a file is being opened, the initiator specifies the datatransfer operations to be performed on the file.andP;  Once the file open regimeis established, two data access operations may be performed prior to theestablishment of the data transfer regime.andP;  The initiator may either eraseall or part of the file or move to a specific location in the file.andP;  When alldata access and data transfer operations are completed for the currentlyopened file, the file open regime can be terminated by the initiator usingthe FRAM file close service.andP;  The FRAM protocol then reenters the fileselection regime.andM;Data Transfer Regime.andP;  The innermost regime of the FTAM protocol is the datatransfer regime.andP;  In this regime, all or part of a file is transferredunidirectionally between the initiator and responder.andP;  There are three stepsinvolved in this regime.andP;  First, the initiator specifies the direction of thedata transfer (i.e., reading or writing) and the parts of the file to betransferred.andP;  Next, the specified data is transferred.andP;  Finally, an orderlyend-of-data transfer is performed.andP;  This entire process may be performed morethan once without having to close the file.andP;  Once the data transfer regime iscompleted, the FTAM protocol reenters the file open regime.andM;FTAM defines an optional error recovery protocol that facilitates recoveryfrom errors such as a broken connection or the failure and restart of aremote host.andM;HP MAP 3.0 and FTAMandM;HP's MAP 3.0 FTAM/800 product is completely compliant with the FTAM standardISO 8571 and the NIST Phase II Implemention Agreements.3 HP's virtual filestore supports a complete implementation of three document types: FTAM-1(unstructured text files), FTAM-3 (unstructured binary files), and FTAM-2(record-oriented text files).andP;  The VFS also supports the full functionalityof concurrency control, the majority of the access control functionality, andmany other attributes.andP;  The protocol implementation is also relativelycomplete.andP;  All major components of the protocol are implemented with theexception of restart and recovery.andM;HP MAP 3.0 FTAM/800 consists of three different processes: a user process, aservice provider process, and a responder process (see Fig.andP;  5).andP;  Thisimplementation follows the HP MAP 3.0 upper layer architecture described onpage II.andM;User ProcessandM;The user process contains the user's application program along with the MAPFTAM library.andP;  The MAP FTAM library is a set of C functions callable by auser's C program.andP;  The functions in the library provide the KUP FTAMapplication program interface for user applications.andP;  The library validatesparameters passed in calls to its functions and translates these calls intorequests to the service provider process.andP;  The service provider process andthe user process communicate using HP-UX domain sockets.andM;The MAP FTAM interface provides two types of calls: low-level calls andhigh-level calls.andP;  Low-level calls perform one FTAM service request whilehigh-level calls perform a sequence of FTAM service requests.andP;  An example ofa low-level call is ft_create(), which creates an FTAM file, and an exampleof a high-level call is ft_fcopy(), which performs all of the FTAM servicerequests necessary to copy a file from one location to another.andM;To establish a connection to a remote responder using the MAP FTAM interface,the user must specify the address of that responder.andP;  The MAP FTAM interfacesupports two forms of addressing: directory distinguished names andpresentation addresses.andP;  If the user supplies a directory distinguished name,the LM FTAM library issues a request to the X.500 directory service, whichresolves the name, and returns the appropriate presentation address.andP;  The MAPFTAM library can then issue the connect request to the lower layers of theOSI stack.andP;  If the user provides a presentation address, the X.500 service isnot used.andP;  See the article on page 15 for more information about X.500.andM;Each call has two modes of operation: synchronous and asynchronous.andP;  Insynchronous mode, the request completes entirely before control is returnedback to the caller.andP;  In asynchronous mode, the call returns once the requestis sent to the initiator protocol machine.andP;  Another call is provided so theuser can check the status of outstanding requests and receive the results ofrequests when they complete.andM;Service Provider ProcessandM;The service provider process, which is forked by the user process, containsthree modules: the MAP interface provider, the initiator protocol machine,and the VFS module.andP;  The function of the NM interface provider is totranslate MAP FTAM requests into requests to the initiator protocol machine.andO;For low-level KUP requests, this translation is trivial since the low-levelNUP FTAM requests are modeled after the initiator protocol machine services.andO;However, the high-level MAP FTAM requests like ft_fcopy must be issued in aseries of calls to the initiator protocol machine.andM;The initiator protocol machine accepts FTAM service requests from the MAPinterface provider and validates the requests to ensure that they are made invalid protocol sequence and that the parameters are compliant with ISO 8571and the NIST Phase II Implemention Agreements.andP;  After validation, one of twoactions takes place.andP;  If the request involves a file on a remote system, therequest is encoded using ASN.1 and sent to the responder operating on theremote system.andP;  If the request involves a local file, a request is issued tothe VFS module, which accesses the file from the local file store.andP;  Note thatrequests for local files could have been handled in the same manner asrequests for remote files.andP;  This different method of local file access wasadded as a performance enhancement.andM;Responder ProcessandM;The responder process, which runs as a daemon (server) process, contains theresponder protocol machine and the VFS modules.andP;  It waits for connectrequests from an initiator and when one is received, it forks the childprocess that handles all operations on that connection.andP;  When the connectionis terminated, the child process exits.andM;The VFS modules are a library of functions that are linked with both theservice provider process and the responder process.andP;  The implementation isstraightforward with a few exceptions.andP;  The exceptions occur in the areas ofconcurrency control and attribute support.andP;  Since HP-UX does not provide afile locking mechanism sufficient to handle FTAM's concurrency controlfeatures, shared memory was used to implement concurrency control.andP;  BecauseFRAM requires the support of attributes that do not map naturally to HP-UXfile systems, shadow files are used to store various FIAM file attributes.andO;One shadow file exists for each file accessible with FIAM.andP;  A shadow fileresides in the same directory as the file it describes and makes use of a&quot;._&quot; prefix on the filename to make it transparent on an HP-UX is (listcontents of a directory) command.andM;File Copy ScenariosandM;Three different scenarios exist when copying a file using FTAM.andP;  The firstand most common scenario occurs when a file is copied from a remote node tothe local node.andP;  In this scenario, one user process, one service providerprocess, and one responder process exist.andP;  The VFS in the service providerprocess handles all access to the local HP-UX file system while the VFS inthe responder process on the remote node handles all access to the remoteHP-UX file system.andP;  The data is transferred between the service providerprocess and the responder process using the lower layers of the OSI protocolstack.andM;The second scenario occurs when a file is copied from one location in thelocal file store to another location in that same local file store.andP;  In thiscase, there is one user process and one service provider process, but noresponder process.andP;  The VFS in the service provider process handles allaccess to the local file system.andM;The third and final scenario is the situation in which a file is copied fromone remote file store to another (or the same) remote file store.andP;  In thiscase, there is one user process, one service provider, and two responderprocesses.andP;  The responder on the source node transfers the contents of thesource file to the service provider process.andP;  The service provider processreceives the data from the responder process on the source node and sends thedata to the responder process on the destination node.andP;  The responder processon the destination node receives the data from the service provider processand writes the data to the destination file.andM;A more efficient method of transferring the data would be to have the tworemote responder processes communicate directly with each other.andP;  This methodof communication is not possible with the FTAM protocol.andM;FTAM Design and DevelopmentandM;The development of the FTAM product involved project teams from HP's ColoradoNetworks Division (CND) in Fort Collins, Colorado and Information NetworksDivision (IND) in Cupertino, California.andP;  There was also coordination withBP's Roseville Networks Division (RND) in Roseville, California, where the HPOSI Express card was developed.andP;  The FTAM initiator and responder protocolmachines and the VFS module were developed at IND at the same time the MAPFTAM interface was being developed at CND.andP;  Since some of the interface coderesides in the same physical process as the protocol machines, a great dealof communication was necessary to ensure the compatibility of the moduleinterfaces.andP;  The need for close communication between geographically separatedivisions, coupled with the large code size of FTAM (75 KNCSS), created acomplex engineering problem that forced the project teams to follow several&quot;best practices&quot; and to create a few of their own.andM;MAP FTAM interface DevelopmentandM;Because the design effort and FTAM expertise were distributed over twoorganizations,, the design of the MAP FTAM interface for FTAM was difficult.andO;At the time, the protocol machines and the VFS modules were already in thecoding phase.andP;  Working from the  FTAM interface specification and theexternal specifications of the FTAM protocol machine modules, the interfacedesigners used structured design methods for the initial design.andP;  Structurecharts were used to document the high-level design, and proved to be avaluable tool for communicating the design to IND FRAM engineers at ahigh-level design review.andP;  This review and the tools helped to uncover manydesign issues that would have gone unnoticed until the integration andtesting phase, which might have jeopardized the timely release of theproduct.andM;The next step was the low-level design.andP;  In this step, pseudocode for theinterface modules was developed that contained the major logic in the design.andO;Again, a design review was held to review this pseudocode and more defectswere uncovered.andP;  Next, the code was developed using a technique called slicedimplementation.andP;  In this approach, complete vertical slices of functionalityare implemented in several stages.andP;  This approach worked well with the MAPFTAM interface since this interface contains about thirty calls.andP;  These callswere grouped into four disjoint sets and implemented in four slices.andP;  Thefirst slice contained the connection management related calls, the secondslice contained the low-level file management calls (e.g., create, open,close), the third slice contained the low-level data transfer calls, and thelast slice contained the high-level calls.andP;  The development and moduletesting of each slice were performed in an efficient, pipeline fashion.andP;  Whenthe developers finished a slice, the code was handed to another engineer whowas in charge of module testing each slice.andP;  While this slice was beingmodule tested, the developers worked on the next slice.andM;Module TestingandM;The testing of the interface modules also posed an interesting problem forseveral reasons.andP;  First, as the slices were completed, they could not beintegrated with the protocol and VFS modules since those modules were notfinished with their early testing phases.andP;  Second, the interface modulesreside in two different processes (user process and service providerprocess), and when the initial slices were being completed the utilityroutines for such functions as interprocess communication (messaging) andmanaging connections with remote machines (connection management) were notfinished.andP;  Finally, the amount of code in the MAP FTAM interface modulesalone is about 26 KNCSS and their interfaces with other modules are numerousand complex.andM;Given these problems, we had to develop a special method of testing thesemodules.andP;  Writing C code to simulate the nonexistent modules would have beentoo time-consuming because each stub routine would have been too general, ornumerous sets of stubs would have been written generating numerous executablefiles.andP;  Also, because of the amount and complexity of the parameters at eachmodule interface, validation of results would have been difficult.andP;  To aid inthis testing effort, a general module testing tool was developed.andP;  This toolfacilitates the rapid development of module tests by alleviating some of theproblems mentioned above.andP;  Testing using this tool involves two steps.andO;First, the tester describes the relevant interfaces between the module beingtested and the nonexistent modules.andP;  Given this interface description, thetool generates an executable file that contains the code of the module to betested, the code for an interpreter for executing module test scripts, andcode for transferring control between the module interfaces and theinterpreter.andM;The second step is to write test scripts that are executed by the interpretermentioned above.andP;  These test scripts are written in a language designedspecifically for module testing.andP;  The language is similar to C but isscenario-oriented and contains facilities that simplify parameter validation.andO;Because the language is interpreted, errors in test scripts can be quicklychanged and rerun without having to recompile and relink.andP;  Using thislanguage, the tester can specify the order of events at the interface of themodule being tested.andP;  These events include calls to routines in the moduleand calls from the module to routines in nonexistent modules.andP;  Eachoccurrence of a call to a nonexistent routine is handled separately in thescenario.andP;  This simplifies the task of writing stubs yet allows a great dealof flexibility since the script code for each call can be tailored for thatspecific instance.andP;  By forcing the tester to specify the exact scenario for atest, a more rigid test environment is created where spurious calls by themodule or calls made out of order cannot go undetected.andM;At strategic points in a test script, the tester can place statements tovalidate various parameters and other data values.andP;  These statements areassertions or print statements.andP;  The printing facility provided by the toolautomatically formats the output according to the type of value printed.andP;  Itcan even print an entire recursive data structure.andM;While a script is running, the tool prints out information about the eventsthat have occurred.andP;  When any failure occurs, the tool reports the failureand exits.andP;  The exact location of the failure in the scenario is knownimmediately by the tester.andP;  This information helps in the debugging process.andO;If the information printed by the tool is insufficient to solve the problem,the script can be reexecuted in any conventional debugger such as xdb.andM;Product Test SuiteandM;The test suite for the integrated FTAM product was designed and developed asif it were an actual product.andP;  This means that in the early stages of design,much consideration was given to creating a simple but flexible test suitethat had all the characteristics of an HP product such as usability andsupportability.andM;Typically, there are multiple test suites for a product.andP;  For example, aproduct may have a functional test suite, a reliability test suite, a stresstest suite, a performance test suite, and so on.andP;  Instead of havingcompletely independent test suites for each type of testing, the FTAM testsuite encompasses all types of tests.andP;  These suites were developed under acommon umbrella, sharing a common architecture, interface and output format.andO;Among the advantages gained by using this philosophy are that a large amountof common code can be shared across tests and the learning curve forsupporting:and using the tests is reduced considerably.andM;The FTAM test suite features one uniform command line interface for all ofthe different types of tests.andP;  The interface contains many options that givethe user a great deal of flexibility in controlling the degree of testing.andO;Options exist for specifying the test or set of test cases to run, the numberof iterations for each test, how long to run the tests, the number ofconnections to use during testing, the names of the nodes (machines) to beused during testing, and so on.andP;  For example, the user can specify that a setof reliability tests run for 72 hours using a given set of nodes runningunder a certain level of stress.andP;  There is also a single configuration filethat can be used to specify the values of various parameters needed duringtesting.andM;The test suite can be run manually or automatically using an automated testtool such as the internal HP tool known as the scaffold.4 The output printedby the test suite contains only simple passed or failed messages.andP;  Thisallows a novice user to determine the results of a test easily.andP;  If a testfails, the parameter information of the call that failed is printed to aid insolving the problem.andP;  The output printed by the test suite is uniform (anddeterministic) across all tests.andM;Each test in the suite is written in a uniform manner so that all tests havesome similar characteristics such as the same architecture, interface, andnaming conventions.andP;  Once the design of one test is understood, the design ofall tests for the product is also understood.andP;  A large number of libraryroutines exist that were designed to be as test case independent as possible.andO;These two factors greatly simplify the addition, modification, and deletionof tests or test cases.andM;The time spent designing and developing the test suite has been worth thecost.andP;  The test suite has proven to be very usable and all members of theFTAM team have become expert users of the suite within a short time.andP;  Testshave been added and modified by different team members with very fewproblems.andP;  Other project teams have already adopted the architecture andmethodology of this test suite in the test suites for their products.andO;Finally, a point worth mentioning is that the amount of code for the testsuite is actually smaller than that of the product.andP;  This is a noteworthyachievement given the complex nature of the MAP FTAM interface.andM;PerformanceandM;Once the initial product was integrated, performance tests were run todetermine FTAM's file transfer throughput rate.andP;  We discovered that FTAMcould only transfer a file at a rate of 3 kbytes/s on an HP 9000 Series 815computer.andP;  For this reason, a performance task force was organized consistingof engineers representing all areas of the OSI architecture.andP;  This task forceidentified major improvement areas by taking performance numbers at differentlayers and then analyzing execution traces to determine the most significantareas for performance improvement.andM;The areas selected included the addition of the VFS to the service providerprocess in the initiator, modification of transport configuration parameters,and reduction in the use of heap memory.andP;  With these changes, FTAM'sthroughput increased from its initial value to 60 kbytes/s on two HP 9000Series 815 machines, and to 225 kbytes/s on two HP 9000 Series 835 machines.andM;AcknowledgmentsandM;Many individuals contributed to the design and development of the FTAMproduct.andP;  The engineers and managers involved with FTAM were Suhas Badve,Rajiv Batra, Atul Bhatnagar, Alan Burke, Jeff Conrad, Dave Hendricks, LisaKozlowski-Owen, Paul Melmon, John Smith, and Don Tiller.andM;RefrencesandM;1.andP;  Information Processing Systems - Open Systems Interconnection - FileTransfer, Access and Management, ISO 8571 (Parts 1-4), InternationalOrganization for Standardization, 1988.andM;2.andP;  Manufacturing Automation Protocol Specification, Version 3.0, GeneralMotors Corporation, 1988.andM;3.andP;  Stable Implementation Agreements for Open Systems InterconnectionProtocols, NIST Special Publication 500-162, National Institute of Standardsand Technology, December, 1988.andM;4.andP;  C.D.andP;  Fuget and B. J. Scott, &quot;Tools for Automating Software Test PackageExecution,&quot; Hewlett-Packard Journal, Vol.andP;  37, no.andP;  3, March 1986, pp.andO;24-28.andO;</TEXT></DOC>