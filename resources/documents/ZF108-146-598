<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-146-598  </DOCNO><DOCID>08 146 598.andM;</DOCID><JOURNAL>Communications of the ACM  Feb 1990 v33 n2 p177(13)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>Dynamic file migration in distributed computer systems.andO;(technical)</TITLE><AUTHOR>Gavish, Bezalel; Liu Sheng, Olivia R.andM;</AUTHOR><SUMMARY>Demand for information services is growing rapidly, increasing theimportance of file migration in distributed systems.andP;  Determiningthe level of file replication and the allocation of copies is amajor issue in distributed-system design.andP;  Recent systemsincorporate file migration in order to access remote files.andP;  Fileallocation may be static or dynamic; static allocations are usefulin systems where file-access intensities are stable, but dynamicallocation is more desirable in fast-growing systems.andO;Reallocation involves creating, relocating, and deleting filecopies over a period of time.andP;  File reallocation and filemigration models are compared, and it is concluded that filemigration models are generally more robust than dynamic fileallocation models and that dynamic file allocation models are lesscomputationally complex.andP;  Directions for possible future researchare suggested.andM;</SUMMARY><DESCRIPT>Topic:     Distributed SystemsFile TransferManagement of EDPTechnologyData CommunicationsDynamic Allocation.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Dynamic File Migration in Distributed Computer Systems The demand forinformation services is increasing at an explosive rate.andP;  Due to largegeographical regions of business operations and external competitivepressures, information services are expected to collect, store, retrieve,process, aggregate and distribute timely information from data generated atgeographically remote and dispersed sites.andP;  The traditional mode of providingcomputerized information services in large organizations has been to operatelarge centralized computer systems, with most of the processing, storage andretrieval of data performed at central sites.andP;  Such systems have thedisadvantages of high cost and high loads on the centralized computing andcommunication devices.andP;  Consequently, both communication with and processingat the central site have become system bottlenecks, access speeds have sloweddown, and the availability and reliability of information services hasdeteriorated.andM;Advances in communication technologies and the decreasing costs of computershave made distributed computer systems an attractive alternative forsatisfying the information needs of large organizations.andP;  Distributedcomputer systems are composed of multiple geographically dispersed computersites connected through communication networks.andP;  Each computer site has itsown processing, storage and communication devices as well as the necessarysoftware resources.andP;  Appropriate communication network and control protocolsenable users and applications to access local and remote system resources inan integrated manner.andP;  By taking advantage of resource sharing and loadbalancing, distributed computer system offer higher system reliability andavailability, reduced system and communication costs, shorter response timeand increased system through-put.andM;In distributed systems, data files are accessed for information retrieval andupdate activities by dispersed users and applications.andP;  A file may be aconventional single file, a file as part of the system database, a fragmentor a collection of any of these.andP;  Unlike those in centralized computersystems, data files in distributed systems can be replicated and allocated tocomputing sites so as to reduce communication costs and to increasereliability.andP;  Creation of multiple file copies requires the use ofsynchronization mechanisms to maintain data consistency among the replicatedcopies.andP;  As a result of concurrency control, update transactions must beprocessed on all the relevant copies of a file, while read-only queries canbe responded to from any copy of a file.andM;An important issue in the design of distributed information systems is how todetermine the file replication level and the allocation of the replicatedfile copies necessary to achieve satisfactory system performance.andP;  Thisproblem is referred to in past literature as the file allocation problem(FAP).andP;  Allocation of file copies in distributed systems involves tradeoffsbetween storage, processing and communication costs, and services based onthe anticipated usage of files.andP;  Computing sites to which file copies areassigned have the advantage of quick and inexpensive information retrieval,but must bear the overhead of file storage and maintenance.andP;  The remainingsites incur communication costs and transmission delays when remotelyreferencing a file.andM;File accessing in many distributed environments is characterized by thephenomenon of locality of reference in which we observe high-intensityperiods of file referencing by users in the same location, followed byperiods of low activity.andP;  Examples of such a phenomenon can be found inairline reservation sysems around flight arrival and departure times and inhotel booking systems when conferences and conventions take place.andP;  Duringbusy times, large volumes of communication traffic are generated at remotelocations.andP;  As a result, overall operating costs increase and communicationservices deteriorate.andP;  An alternative to this situation is to transfer a copyof the referenced files to the requesting site so that file accesses can bedone locally.andP;  This strategy, however, requires interrupting systemoperations across an entire system to perform a file reallocation or toincorporate file migration operations into distributed database managementsystems for on-line dynamic controls.andM;Unlike systemwide file reallocations, file migration operations, a termadopted from file migration procedures in computer storage hierarchies,represent procedures to create, transfer or delete a file copy in distributedsystems.andP;  Because file migration operations incur relatively little systeminterruption and therefore can be performed frequently, they are particularlyuseful to improve system performance by correcting file allocation duringshort bursts of busy file accessing activities.andP;  In addition, file migrationmay also lower system operating costs when different computer sites operateunder different operating cost scales, and when time zone differences allowthe use of regular shift operations at a remote site instead of a local lateshift, and the use of remote computer devices during off-peak periods ratherthan local resources within peak-load hours.andM;Recent developments of distributed computer systems, such as ROE [8], STORK[30], IBIS [38] AND LOCUS [32], have incorporated file migration operationsas options for accessing remote files.andP;  In most of these systems, filemigration operations are performed on an ad hoc basis only, without takingthe long-term impact of file migration operations into consideration.andP;  As aresult, only a fraction of the potential benefits of these operations arerealized under the appropriate conditions.andP;  File migration clearly has veryhigh potential to improve system performance and decrease system costssignificantly.andP;  On the other hand, improper control of file migrationoperations may lead to inferior performance levels.andP;  An elaborate analysis ofthe tradeoffs in file migration is required to fully realize the potentialbenefits of file migration.andP;  For easy reference, the problem that addressesproper control policies for file migration operations is referred to as thefile migration problem.andP;  It should be distinguished from the dynamic fileallocation problem, which considers file reallocations only.andM;While dynamic file allocation problems began to receive some attention morethan a decade ago, research on file migration in distributed computer systemsstarted only recently.andP;  The importance of the file migration problem is,however, increasing rapidly as distributed information systems, such asmanagerial, manufacturing and hospital applications, are beginning toevidence more and more dynamic changes in file accessing activities.andP;  To spurresearch interest in the problem, this article surveys previous research onthe problem, provides a detailed comparison of file migration and dynamicfile allocation (the closest kin of file migration) problems and identifiesimportant potential areas of research to support the development of effectivefile migration policies.andM;FILE ALLOCATION VERSUS FILE MIGRATION:andM;AN AIRLINE RESERVATION EXAMPLEandM;Differences between file allocation and file migration in distributedcomputer system must be considered when considering which option to use.andP;  Thedifferences and the problem-solving tradeoffs can be best illustrated by anexample of an airline reservation system.andM;In all computerized airline reservation systems, information regardingschedules, fares, reservations and other basic flight information isfrequently requested and changed by transactions generated by passengers andby operational and managerial personnel.andP;  A fictitious relational database,AIRLINE, is used in this example to maintain all flight and reservation data.andO;It has the simplified schema shown in Table I.andP;  Typical references to thedatabase are:andM;* Inquiries about flight schedules and air fares;andM;* Initiation, confirmation or cancellation of reservations;andM;* Ticketing, seat assignment, luggage handling and ordering of special meals;andM;* Flight and crew scheduling, changes in air fares, routine reports andinquiries about flight information by personnel at all levels.andM;Since the operations of an airline may span national or internationalboundaries, transactions directed to the AIRLINE database may originate fromwidely separated geographic areas.andP;  With the rapid price-performancerevolution in computing and communication technologies, a distributedcomputing approach for information processing in this airline reservationsystem had long become economically viable.andP;  This can be evidenced by therecent conversions from centralized systems to distributed computer systemsfor handling reservation information by American Airlines and United Airlines[31].andM;Static File AllocationandM;In a distributed system, the allocation of the AIRLINE database can rangefrom a single copy located at the central headquarters, similar to the designof a centralized system, to a fully replicated design which allocates a copyof the database to each branch office.andP;  Assuming that the criterion for fileallocation involves only system operating costs, the cost level depends uponhow well the allocation meets the demand generated by the whole airlineoperation and the maintenance costs associated with a given allocation.andP;  Forinstance, Figure 1 (a) and (b) depict two possible allocations of the AIRLINEdatabase.andP;  The query and update frequencies for various cities in the exampleare described in Table II.andM;Based on this data, the solution in Figure 1 (a), in which copies of thedatabase AIRLINE are allocated to Tucson and Syracuse, will result intransfers of data to remote locations for 80 percent of query transactions.andO;Communications between the transaction origination sites and both databasesites will be incurred for 85 percent of the database AIRLINE to Chicago andDenver in sites of the database AIRLINE to Chicago and Denver in as Figure 1(b), the total communication volume is reduced.andP;  Now only 40 percent of thequeries involve remote communication and the percentage of two-linkcommunication updates (interaction with both database sites) is reduced to 30percent.andP;  In addition to communication traffic, other determinants of systemoperating costs include database storage and processing costs, as well ascommunication costs which are dependent on the communicating locations andthe types of links used for communication.andM;A database can be fragemented when it is distributed to computing sites.andP;  Forexample, transactions generated in Tucson will most often referenceinformation on flights departing or arriving at Tucson.andP;  In order to reducethe amount of remote communications, the fragment of the AIRLINE databaseconsisting of local (Tucson) flight information could reside in Tucson.andO;Figure 2 shows an allocation of the fragmented AIRLINE database.andP;  Inallocating fragmented databases, a fragment of a database can be regarded asa file.andP;  Allocation of database copies is thereby reduced to the allocationof single file copies.andM;Dynamic File AllocationandM;Static file allocations are attractive for systems which have a stable levelof file access intensities.andP;  Systems in which access intensities vary overtime but are predictable, mainly as a result of predictable growth or declinein inforamtion needs, or periodic differences in usage patterns, can benefitfrom file allocations that adapt to those changes.andP;  In systems with highvariability in usage patterns, users experience degraded performance levelsand higher costs if file allocations remain static throughout the operationalperiod.andP;  To deprive dynamic file allocation based on anticipated changes infile access intensities, file reallocation costs incurred in later stageshave to be taken into consideration in the initial design process.andP;  Forexample, the semi-annual transaction frequencies for the AIRLIME databasedepicted in Table III indicate significant seasonal variation between thereservation activities in Tucson and Syracuse.andP;  To reduce remotecommunications in transaction processing, a sensible allocation would assigna copy of the database to Chicago, Denver and Tucson during the winter seasonand, to Chicago, Nashville and Syracuse during summer seasons.andP;  Thisallocation requires file reallocations to take place with seasons changes,moving database copies to Nashville and Syracuse.andP;  However, the reallocationcost can be lowered if an additional copy resides in Nashville from Novemberthrough April and in Denver from through October.andP;  The savings represent thefile transfer cost for the Nashville copy and the transmission of queryrequests from Denver during summer seasons and from Nashville during thewinter.andP;  Additional costs involve the sorage costs of the additional filecopy and the update overhead to keep it consistent with other copies.andP;  Suchtradeoffs can all the considered by dynamic file allocation models, leadingto file allocation and reallocation policies for a planning horizon withvarying activity levels.andP;  However, dynamic file allocation problems are moredifficult to solve than their static counterparts due to the increase instate space descriptions need to model the dynamic allocation options.andM;File Migration in distributed Computer SystemsandM;The dynamic file allocation example described in the previous sectionconsidered only file reallocations.andP;  File reallocations are costly, generatesystem-wide delays and require prior knowledge of potential changes in systemactivity levels.andP;  They are applicable only when changes in file accessintensity are observed over a significant portion of the system and remain ineffect for long periods of time (months or years).andP;  File migrationoperations, on the other hand, involve only a single copy of file, or ofclearly defined fragments of a database which can be treated as separatefiles.andP;  They react to significant temporary changes in usage patterns whichare difficult to predict beforehand and may extend over shorter period oftime.andP;  File migrations which are incorproated as part of a distributedoperating system offer additional advantages and should be considered for thefollowing reasons:andM;(1) Locality of reference is usually characterized by changes in accessintensity to files which originate from the same geographic area.andP;  In suchsituations, significant gains may be generated by temporarily assigning alocal copy.andP;  Single-copy file migration operations are sufficient to achievethis purpose.andM;(2) Dynaic file reallocations can be staged using file migration operations.andO;Hence, system-wide adjustments of file allocations can still be accomplishedby a sequence of single file migrations.andM;(3) Dynamic file reallocation models rely heavily on prior knowledgeregarding potential usage patterns of the system databases.andP;  File migrationswhen incorporated as part of the distributed operating system, are not verysensitive to prior estimates on system usage patterns.andP;  They automaticallyreact to temporary changes in access intensity by making the necessaryadjustments in file locations without human management or operatorinternvention.andM;The following example demonstrates the savings offered by file migration.andP;  Afew hours before and after a flight stops at an airport, a surge in accessactivity from the airport to the appropriate portions of the reservationdatabase is observed.andP;  During those periods, if the requested databasefragment is remotely located, a large volume of long distance traffic will begenerated.andP;  When the amount is substantial enough, the system can benefitfrom migrating the referenced database fragment to the cities at which alight stops a few hours before the flight arrives there.andP;  For instance, aflight that leaves Syracuse heading for Tucson stops over a Chicago fordeparting and connecting passengers.andP;  The database for the reservation systemmay reside at Chicago to be near the headquarters.andP;  However, a few hoursbefore the flight leaves Syracuse, intensive queries and updates ofreservation, ticketing, seat assignment, baggage handling, crew and fareinformation are likely to be generated from Syracuse.andP;  The numbers of varioustransactions and the volume of communicating generated by them are describedin Table IV.andP;  Overall, 58.4 Kbytes of communication can be saved at the costof file migration for each leg of this flight, since the transactions can beprocessed locally (in Syracuse) after the fragment migrates to Syracuse.andO;Taking into consideration that the same pattern repeats for every leg of thisflight, the net savings offered by file migration add up to 76.8 Kbytes forthe entire flight.andP;  The costs and savings of file migration for this exampleare depicted in Table V.andP;  A typical airline has a few thousand trip-legs perday.andP;  Even if the savings per leg are only one dollar, they can add up to afew million dollars per year.andP;  It is clear from the net savings that theairline reservation system can benefit significantly from file migration.andM;In view of this potential,  file migrations can be incorporated indistributed systems provided that they are closely monitored and are invokedwhenever they can generate benefits.andP;  The above example is a simplified oneand is used mainly to illustrate part of the tradeoffs involved.andP;  In reality,references to the migrating fragment from other locations also should beconsidered in determining the net savings generated by file migrations.andO;Furthermore, if the migrating fragment is only a duplicate of the existingcopy at Chicago, then occasional communication between the multiple copies ofthe fragment for update transactions has to be taken into account.andP;  In brief,the tradeoffs involved in file migration are extremely complex.andP;  Thederivation of a file migration policy thus requires elaborate analysis of theimpact of file migration on overall system performance.andM;PAST RESEARCH ON RELATED PROBLEMSandM;As can be seen from the airline reservation example, file migration problemsevolve from static and dynamic file allocation problems.andP;  Although modelingof file migration problems is more complex, the analytic and solutiontechniques employed for static and dynamic file allocation models stillprovide a foundation for developing the models and solution procedures forfile migration problems.andP;  This section reviews past research on fileallocation and file migration in distributed computer system in order toidentify the important research and implementation issues.andM;Static File AllocationandM;Static file allocation problems (static FAP) have received substantialattention in the literature.andP;  Based on the assessment of file access activitylevels, cost and system parameter values, the problem involves allocatingfile copies over a set of geographically dispersed computer sites so as tooptimize an optimality criterion, while satisfying a variety of systemconstraints.andP;  The optimality objective used in past treatments of the probleminclude system operating costs, transaction response time and systemthroughput, while the problem contraints stem from capacity limitations andperformance requirements.andP;  In these models, it is assumed that fileallocations do not change over time.andM;Investigations of static file allocation problems were pioneered by W. W. Chu[6], followed by extensive studies by other researchers.andP;  Essentially, staticfile allocation problems are formulated as combinatorial optimization modelsin which the objective function addresses the allocation tradeoffs in termsof the selected optimality criterion.andP;  The models differ in level of detailand in solution approaches.andP;  Examples of modeling approaches used in the pastinclude: distinction between query and update traffic in communicationnetworks [3], file and program dependencies [28], an M/M/1 queueing model forthe delay along a communication link [20, 27], system availability as afunction of network connectivity and probability of network failures [20, 22,27], and the isomorphism between the allocation of a single-copy file and&quot;multiple choice constraints&quot; knapsack problems [4].andM;Since the FAP has been shown to be NP-complete [9, 17], much attention hasbeen given to the development of heuristics that can generate goodallocations with lower computational complexity.andP;  Typical solution techniquesare branch-and-bound and graph searching methods to avoid enumeration of theentire solution space [3, 4, 10, 20, 21, 28].andP;  Most of the heuristics areiterative in nature.andP;  They start with a feasible allocation and try toimprove the allocation by repeatedly employing some decision rules until noimprovement is realized within two successive iterations.andP;  Examples ofdecision rules that have been adopted include the greedy algorithm [10, 20,29, 34, 40], the clustering method [26], the add-drop algorithm [27], anddecomposition of the global complex problem into a number of simple knapsackproblems [4].andM;In some studies [5, 14, 15, 20, 27, 39], file allocations are determined inconjunction with network design problems, such as processor location problemsand device capacity assignment.andP;  In contrast, Foster et al.andP;  [11] examinedthe file allocation problem for a central server environment (or,equivalently, a distributed system having a star topology).andP;  Unlike most ofthe earlier research, where independence of file references and single fileaccess always were assumed, Ghosh [16] explored file allocation problemstaking into account dependencies of file referencing resulting from query andupdate processing.andP;  Gavish [12, 13] examined the more general problem of theoverall architectural design, which consists of databases and computerallocation together with problems of data source (transactions) assignment tocomputer locations and report generation in a distributed system.andM;Detailed surveys on FAP can be found in [7, 19, 41].andP;  The isomorphism betweenthe (simple) file allocation problem and the single commodity warehouselocation problem [2] was proved by Ramamoorthy and Wah [35].andP;  As a result,many techniques which have been developed for the warehouse location problemscan be applied to solve the simple file allocation problem.andP;  While researchon static FAP can be pursued with the objective of incorporating morerealistic system constraints and requirements, integrating other designproblems and developing better heuristics, real-world problems are rarelystatic in nature.andP;  The contribution of the above research is in the analyticinsight that they provide for treating dynamic file allocation problems.andP;  Thedynamic FAP has not received much attention mainly due to itscomplexity--limited body of research in dynamic FAP is described in thefollowing section.andM;Dynamic File AllocationandM;The dynamic file allocation problem is one of determining file reallocationpolicies (schedules) over time.andP;  File reallocations involve simultaneouscreation, relocation and deletion of file copies.andP;  Since such operationsrequire an interruption of information services, they usually take place lessfrequently.andP;  Subsequently, the models developed by past research are mostlyapplicable to problems with very long time horizons such as months or years.andO;(1)andM;Dynamic file allocation models can be non-adaptive or adaptive.andP;  Non-adaptivemodels are employed at initial system design or upon system reorganization togenerate dynamic allocation policies that do not adjust (adapt) to variationsin system activities from the assessed levels.andP;  Adaptive models, on the otherhand, are implemented when the system senses a substantial deviation inaccess activities from the assessed level to determine a one-time(non-recurring) reallocation policy for a relatively short future period inorder to respond to changes in access levels.andP;  Initial research efforts ondynamic FAP focused on non-adaptive models, while more recent studies haveconcentrated on adaptive policies.andP;  Important past studies on dynamic FAP arehighlighted in this subsection.andM;Non-adaptive models.andP;  The dynamic FAP was addressed for the first time inSegall's unique attempt to treat cases in which reallocations of a singlecopy of a file were allowed at any point in time [36].andP;  Employing dynamicprogramming techniques, he formulated the static as well as the stochasticproblem as continuous time and discrete time Markov decision models.andP;  In thestatic analysis, it is assumed that access rates are known in advance,whereas only prior statistics of the access rates are available in thestochastic case.andP;  For the latter analysis, optimal controls can be obtainedby using estimates of the rates based on a separation theorem.andP;  Thestochastic model for the problem of dynamic file assignment in computernetworks was subsequently extended by Segall and Sandell [37] to include twodistributed control patterns: all information exchange with one-step delayand no information exchange.andP;  For both control patterns, the dynamic FAPproblem is modeled using dynamic programming or extended dynamic programmingprocedures.andP;  The optimal control for the information exchange pattern can beobtained from a sequential algorithm, while the solutions for the case of noinformation exchange are too complex to be explicitly calculated.andM;Levin and Morgan [24] extended their static one-period file allocation modelto a multi-period model by which non-adaptive control policies can begenerated for file reallocations that take place at the beginning of eachtime period.andP;  The problem they examined is isomorphic to the dynamicwarehouse location problem in which the cost of relocating warehouses iscomparable to the cost of file transmissions [35].andP;  The model has a dynamicprogramming formulation and takes into account file transfer costs resultingfrom file reallocations.andP;  The solution algorithm employes a branch-and-boundtechnique for reducing the state space.andM;Adaptive models.andP;  Most adaptive models have treated the dynamic FAP in twosteps.andP;  The first step determines whether to reallocate files or invoke anevaluation of file reallocations when a threshold level of a specifiedworkload measure is expected to be exceeded.andP;  The second step is activated todecide on a file reallocation policy.andP;  Adaptive models are employed atdiscrete time intervals, fixed or unfixed, using information about changes inaccess rates over the current and/or past periods.andP;  The main differencesbetween the models lie in the network topology, the procedure used toestimate the new workload measure, and the model employed to determinereallocation policies.andM;Ames and Foster [1] presented a dynamic algorithm for file assignment in starnetworks.andP;  The algorithm consists of two parts, an access activity predictionpart and a file redistribution process.andP;  In the file prediction process,current and past access patterns are examined to predict future accesspatterns.andP;  If the prediction differs from the last prediction by apre-specified threshold value, then the redistribution process is invoked.andO;The redistribution process employs a static file assignment model todetermine the new file assignment.andP;  The reallocation overhead and theimprovement in system performance are compared to determine if filereallocations should take place.andP;  However, neither the prediction method forfuture access patterns nor the reallocation model is explicitly described.andM;Levin [23] extended the model in [24] to an adaptive model in whichexponential smoothing techniques are suggested to forecast file accessintensities so that, as new information become available, the forecast, aswell as the assignment, will be revised.andP;  Based on the new estimate, the fileallocation for the next period is generated by a one-period look-ahead model[24] taking into account reorganization costs.andM;Adaptive file allocations in star computer networks were also studied by Yuet al.andP;  [42].andP;  The objective was to allocate files to non-central sites inorder to minimize system costs.andP;  An adaptive algorithm was presented toallocate files at system setup or to reassign files in real time duringsystem operation.andP;  The algorithm has two phases.andP;  The first phase generatesan initial allocation, while the second phase revises the allocation until nofurther improvement is realized.andP;  When used at system setup, both phases areexecuted, whereas during system operation, only phase two is used to come upwith a new assignment.andM;A summary of the models discussed in this section is presented in Table VI.andO;In essence, due to the problem complexity, only Levin et al., and Segall etal., analyzed optimization of dynamic file allocation.andP;  Among these studies,the modeling approaches of Segall and Sandell's optimal models [36, 37] werethe most elaborate, providing insight into suboptimal control schemes.andO;However, such elegant models were obtained for single-copy file systems only.andO;The dynamic file allocation scheme examined by Levin and Morgan [24] ispseudodynamic in that file reallocations are restricted to the beginning ofeach period.andP;  Most recent research on the dynamic FAP investigated adaptivemodels which yield lower computational complexity.andP;  This is achieved byrestricting the reallocations to single-file reallocations only.andP;  Thoseadaptive models are not well suited for real-time operations in that toperform dynamic control of file allocations during system operation, filereallocations are derived using static file allocation models which areNP-complete according to their approaches.andP;  To improve the applicability ofthe research results of dynamic FAPs, it is necessary to study the problemstructure under realistic schemes for file relocations, in conjunction witheffective control mechanisms and to develop specialized heuristics forpractical implementations.andM;File MigrationandM;As mentioned earlier, the primary difference between dynamic FAP and filemigration problems is in the operations used to change a file assignment.andO;Dynamic FAP considers file reallocations which might involve reallocatingmulliple copies of a file.andP;  Such major changes could lead to system-wideinterruptions of information services.andP;  In the file migration problems,migration operations which create, delete or transfer a single file copy areused to change the file assignment.andP;  Sincce migration operations take arelatively short time to complete, the operations can be incorporated intothe distributed operating system and their control automated without offlinemonitoring and decision-making.andP;  In recent development of distributedcomputer systems, especially local-area distributed systems such as IBIS[38], ROE [8], LOCUS [32] and STOCK [30], file migration has beenincorporated into the operating system level.andP;  Automated control of filemigration in distributed computer systems, however, was not investigateduntil the first study by Porcar [33].andP;  In what follows, we summarize the fewstudies on the development of automated file migration policies indistributed computer systems.andM;Evaluation of file migration policies in computer networks was firstundertaken by Porcar [33].andP;  Both the optimal and the suboptimal single-copyfile migration policies were investigated.andP;  A semi-Markov decision model wasused to obtain optimal single-copy policies.andP;  When studying the moreambitious multi-copy policies, only suboptimal policies were evaluated.andP;  Theoptimal policies are derived based on the distribution of interreferencepatterns assessed beforehand, and therefore are non-adaptive.andP;  The optimalmodel is similar to Segall's model [36] with the exception that Porcar'smodel assumes an infinite time horizon and considers only demand policies.andP;  Ademand policy is activated only when a file is demanded.andP;  The suboptimalpolicies are also predetermined independent of the assessed systemcharacteristics.andP;  Simulation experiments have been used to evaluate theperformance of suboptimal policies in selecting a migration control policy.andM;When addressing file placement in distributed computer systems, Wah paidspecial attention to the problem of file migration [41].andP;  He proved that theproblem of determining when to migrate multiple copies of a single file tominimize system costs is NP-hard, by showing that the corresponding decisionproblem is reducible from the knapsack decision problem.andP;  A simple heuristicwas proposed to permit limited migration in the locality of a specificcomputing site and to determine whether migration should take place.andP;  Thedecision to migrate is triggered at a file site by changes in accessintensities from the local site, while the intensities of remote accessesgenerated from other sites remain the same.andP;  Whenever file migration isnecessary, the static file allocation algorithm is called to find the optimalrelocation of the file copy in its locality.andM;Hac [18] discussed the impact of file replication, file transfer and processtransfer policies on the performance of a simple database system in a localarea network environment.andP;  The interrelationship among these policies and theproblems of data access, concurrency control, transaction serialization, anddeadlock control were addressed in the discussion.andP;  An algorithm forimproving the system performance by file replication and file and processtransfer was presented.andP;  The algorithm can be used at system initiation whennew files or processes are created or when significant changes in systemperformance are detected; it therefore can be regarded as either non-adaptiveor adaptive.andP;  The algorithm is not very explicit about how the locations offiles and processes are determined when migration is considered and about thedependency of migration delay on the origination and destination of amigration operation.andM;Liu Sheng [25] examined the most general file migration problem in which acomplete variety of file migration operations, creations, transfers anddeletions, can be performed at any point in time when a file is referenced(i.e., on-demand file migration).andP;  Furthermore, file reallocations at thebeginning of each time period were also considered, making the filemanagement policy over the entire horizon complete.andP;  Based on the recursiverelationship between successive migration decisions, the optimization modelfor optimal migration/reallocation policies is formulated as a Markovdecision model.andP;  Although the optimal policies will not change until systemredesign/reorganization, the execution of the optimal policies is dependentupon actual system conditions observed during system operations.andP;  Hence, thepolicies adapt to some extent to system changes.andP;  Such migration policies arereferred to as semi-adaptive throughout this article.andP;  The main disadvantageof this approach is high computational complexity due to the very large statespace needed to derive the overall optimal policies.andM;In view of the NP-complete time complexity of optimal file migration modelsand low accuracy of pre-assessed access rates, Liu Sheng [25] developed anadaptive heuristic for individual file migration decisions.andP;  Unlike most ofthe adaptive models, the proposed heuristic, employing greedy principles,decides on file creation or file deletion only when the file is referenced.andO;The model takes into consideration the observed system state and the impactof limited future file migration operations.andP;  Based on the sameconsiderations, a greedy heuristic for generating an initial file allocationwas also developed to provide a complete control mechanism for filemanagement over time.andM;A summary of the file migration models is provided in Table VII.andP;  Most ofthese models simplify the problem by allowing only a single file copy in thesystem [33] or employing heuristics to resolve file migration decisions [18,25].andP;  Non-adaptive and semi-adaptive models guarantee optimal migrationpolicies when provided with perfect estimates of future access rate [25, 33].andO;Adaptive models [18, 25, 41], on the other hand, have the potential to reactto unexpected system changes with low computational time and close to optimalimprovement.andP;  Of the developed models, only Liu Sheng [25] analyzedoptimization models for the general migration problem.andP;  As a result, theproposed model has a high computational complexity, limiting its applicationto large systems.andP;  However, its in-depth analysis of short-term and long-termimpacts of file migrations provides insight into developing simple heuristicrules of file migrations [25] for large-scale applications.andM;COMPARISON OF DYNAMIC FILE ALLOCATIONandM;AND FILE MIGRATION MODELSandM;Each migration operation deals with only a single file copy.andP;  As a result, anindividual file migration operation might be less effective than a completefile reallocation in improving system performance.andP;  However, selecting anoptimal or near-optimal single operation is less complex than determiningcomplete file reallocations.andP;  Hence, file migration can be invoked morefrequently, thereby responding to system changes more rapidly than filereallocations.andP;  To illustrate the merits and disadvantages of automated filemigration control over dynamic file allocation policies, comparable filemigration and dynamic file allocation models for the more general systemenvironment are compared in this section.andM;Among the dynamic file allocation and migration models summarized in TablesVI and VII, only Levin/Morgan's dynamic allocation model [24] and Liu Sheng'sfile migration model [25] generate optimal policies for general multiple-copydistributed database systems and are therefore readily comparable.andP;  These twomodels will be used to demonstrate the principal modeling differences and theimprovements that can be realized from their automated control policies.andM;Both Levin/Morgan's and Liu Sheng's models were formulated as Markov decisionmodels using dynamic programming techniques.andP;  The main differences betweenthem are in the definition of decision points for policy changes and therepresentation of system state at a decision point, which result in adistinguishing discrepancy in the robustness of the two models [25].andO;Specifically, file reallocations are restricted to the beginning of each timeperiod by both models.andP;  However, creations, transfers and deletions of asingle file copy are permitted whenever the file is referenced in Liu Sheng'smodel.andP;  In contrast, the file reallocation policies generated byLevin/Morgan's model are based on discrete time (period) dependent only, andtherefore their performance is extremely vulnerable to unexpected deviationsfrom the assessed file usage levels within.andP;  On the other hand, filemigration policies generated by Liu Sheng's model are both (continuous) timeand system state dependent, so that the execution of a file migrationoperation will not take place unless its underlying system condition and timeframe are present in the system.andM;System costs resulting from the policies generated by the two models werenumerically compared in [25] over an extensive set of examples based onCasey's five-site system [3].andP;  Casey's five-site system was selected becauseit is small enough to allow exact testing of the two models.andP;  The comparisonsshowed that dynamic file migration policies were able to generate about 10percent cost savings over dynamic file allocation policies in most cases andthe savings increased as the number of time periods or the length of eachtime period increased.andP;  Other properties of file migration policies examinedin [25] include the weak dependency of the effectiveness of file migration onthe initial file allocation at system initiation/reorganization, the increaseof cost improvements with the degree of reference locality and the low levelof sensitivity to deviations of estimated access patterns from the realizableaccess requests.andP;  Those properties demonstrate the robustness of optimal filemigration procedures.andP;  Interested readers may refer to [25] for an in-depthnumerical comparison of the two models as well as for a discussion andexamples of those properties.andM;While the computational complexity of Liu Sheng's model is higher than thatof Levin/Morgan's model by a factor proportional to the average number offile access requests, both models belong to the NP-complete family.andP;  Largedistributed systems, typically with tens of sites, may not find it practicalto adapt either model.andP;  However, file migration operations are expected to beparticularly effective in large systems in that they generate fewerinterruptions and provide automatic corrections to deficiencies in fileallocation caused by changes in usage levels across portions of a system.andO;Dynamic file allocation approaches, on the other hand, are less appropriatefor large systems since system-wide changes in database usage levels are lesslikely to occur frequently and total system interruptions by filereallocations are less tolerable.andP;  It is, therefore, rather important to findreliable approaches to satisfactory control of file migration in largesystems.andP;  One of the solutions may very well be polynomially-boundedheuristics.andP;  Our own experience with adaptive file migration heuristics [25]indicated that the cost improvement generated by heuristics over dynamic fileallocation is satisfactory (at close to 10 percent savings) for some casesand negligible (for less than 1 percent improvement) for other cases.andO;Continued research is needed to develop effective real-time heuristics forcontrolling file migration in large systems.andM;In summary, file migration models are typically more robust than dynamic fileallocation models, while dynamic file allocation models have a slightadvantage over file migration models in their computational complexity.andP;  Thistradeoff is mainly inherent in the nature of the two problems.andM;Another consideration is the amount of data required to represent the optimalfile migration policy.andP;  Specifically, the optimal policy generated by LiuSheng's model specifies the optimal time-dependent migration action to takefor all feasible system states, which become substantial for a large system.andO;In such cases, the optimal policy may have to be stored on external storagedevices.andP;  Its automated implementation, then, requires the employment of somedirect accessing scheme, e.g., hashing or indexing, to search for the optimalaction based on the system state at each decision point.andM;FILE MIGRATION: PRESENT STATE ANDandM;FUTURE DIRECTIONSandM;To provide timely and cost-effective information services in an ever-changingenvironment, distributed computer systems have to operate under automatedcontrol of file allocation, concurrency control and query processing, withoutinterruptions from offline administrators when unexpected changes occur.andO;File migration operations represent a way of adjusting file allocations toreact to both temporary and long-term changes in file usage patterns.andP;  Theyare more effective in distributed systems, particularly large systems, thatexperience short bursts of busy file access activities.andP;  With thecost/capacity revolution in data communication networks, such operations haverecently become technically viable [8, 30, 32, 38].andP;  Since their executionrequires relatively small amounts of time, file migration operations can beincorporated as part of the distributed operating system using automatedcontrol policies without offline monitoring and decision-making.andM;Since the early 1980s, experimental distributed computer systems, especiallylocal-area based distributed systems such as IBIS [38], ROE [8], LOCUS [32]and STORK [30], have supported file migration operations as part of thesystem or as user options for remote information retrieval.andP;  In most cases,the migration operations are either implemented on an ad hoc basis or subjectto user control, realizing only a fraction of the potential benefits of filemigration.andP;  Automated control of file migration in a distributed computersystem requires the development and implementation of mechanisms to determinethe control policy before the system is initiated/reinitiated or in real timeduring system operation.andM;Since the initial introduction of distributed file migration, very fewstudies of automated file migration control [18, 25, 33, 41] have beenconducted.andP;  Although some of the developed models [18, 25] attempted to treatthe problem in a general system environment, none of the studies consideredrealistic settings of migration control.andP;  As initial studies on the problem,however, they provide insights into the development of more practicalmechanisms for automated file migration.andP;  Continued research is essential tothe development of effective and practical control mechanisms for filemigration in a variety of distributed environments.andP;  The following directionsfor future research are suggested:andM;Developing simple file migration heuristics with low overhead.andP;  Optimizationmodels require a high computational effort even for moderate size problems.andO;Moreover, the optimality of an optimal policy does not hold when systemactivity deviates from the forecasted level.andP;  Optimization analysis is usedmainly as a means of gaining insight into a complex problem.andP;  For actualimplementations, heuristics with low computational complexity tend to be abetter choice for large applications.andP;  Therefore, the emphasis of futureresearch should be on the investigation of effective heuristic rules and theassociated implementation considerations in various file migrationenvironments.andM;Addressing file migration problems in local-area based distributed systems.andO;Network topologies have a significant impact on the effectiveness of filemigration in distributed systems.andP;  For example, the boradcastingcommunication property inherent in an Ethernet-class network may suggest thata full replication policy would be optimal for file allocations inEthernet-based distributed systems.andP;  The structure of optimal file migrationpolicies should be studied for specific network topologies.andM;Analyzing the impact of capacity constraints and reliability/availabilityrequirements on file migration.andP;  Most of the studies of file migrationproblems have not taken into consideration capacity constraints andreliability/availability requirements in model development.andP;  Varying as theydo with system failure patterns, recovery procedures and consumption ofsystem resources, analysis of the impact of these essential factors is animportant direction for future system investigation.andM;Incorporating performance analysis.andP;  In addition to operating costs, metricssuch as average transaction response time and system throughput are importantperformance measures of system designs.andP;  Models of file migration problemsthat take into consideration the stochastic behavior of such systems is animportant area for investigation.andP;  Elaborate queueing analysis will berequired to model such problems.andM;Examining file migration problems where references to different files can beinterrelated.andP;  In many systems, a transaction may make it necessary toreference multiple files.andP;  The interrelationships among the references todifferent files have an impact on file migration policies.andP;  Analysis ofsystems where interrelated file references occur frequently seems to be anopen research area.andM;Developing decentralized/distributed algorithms for controlling filemigration activities.andP;  Existing file migration heuristics and algorithms arecentralized in nature in that they require system-wide exchanges of statusinformation, increasing communication overhead and reducing systemreliability by requiring the availability of the centralized controllingsites.andP;  To reduce system overhead and increase reliability, future researchefforts could focus on developing decentralized/distributed algorithms forfile migration which utilize localized system information only.andM;In conclusion, to bring dynamic file migration to realworld installations ofdistributed computer systems, such implementation issues as dynamic filedirectory management, data compression techniques for reliable and fast filetransmission and design issues for the application layer of networkmanagement to effectively incorporate file migration operations need to beaddressed.andP;  Due to the proliferation of local- and wide-area networking andthe development of distributed operating systems and applications, weanticipate increased commercial and academic interest in these issues.andP;  Theseproblems will become fruitful areas for further investigation.andP;  In addition,in view of the diversity in commercial applications of distributedinformation systems, research in file migration control must continue toexamine the impact of new technologies such as hypertext, integrated voice,image and data service, optical disks, parallel architectures, neuralnetworks and distributed artificial intelligence on the design of dynamicfile migration in distributed computer systems.andM;(1) In past literature, the distinction between dynamic FAP and filemigration problems was not clearly made and the terms dynamic file allocationand file migration were frequently used interchangeably.andP;  The categorizationof past results into dynamic file allocation and file migration problems isentirely based on the authors' view of the distinction between the twoproblems.andM;REFERENCESandM;[1] Ames, J.E., and Foster, D. Dynamic file assignment in a star network.andP;  InProceedings of Computer Networks Symposium (Gaithersburg, Md., 1977), pp.andO;36-40.andM;[2] Baumol, W.J., and Wolfe, P.andP;  A warehouse location problem.andP;  Oper.andP;  Res.andO;6, 263 (1958), 252-263.andM;[3] Casey, R.G.andP;  Allocation of copies of a file in an information network.andO;In Proceedings of the Spring Joint Computer Conference IFIPS (1972), pp.andO;617-625.andM;[4] Ceri, S., Martella, G., and Pelagatt, G.andP;  Optimal file allocation in acomputer network: A solution method based on the knapsack problem.andP;  Comp.andO;Netw.andP;  6 (1982), 345-357.andM;[5] Chen, P.P., and Akoka, J.andP;  Optimal design of distributed informationsystems.andP;  IEEE Trans.andP;  Comput.andP;  C-29, 12 (Dec.andP;  1980), 1068-1080.andM;[6] Chu, W.W.andP;  Optimal file allocation in a minicomputer information system.andO;IEEE Trans.andP;  Comput.andP;  C-18, 10 (Oct.andP;  1969), 885-889.andM;[7] Dowdy, L.W., and Foster, D.V.andP;  Comparative models of the file assignmentproblem.andP;  Comput.andP;  Surv.andP;  14 (June 1982), 287-313.andM;[8] Ellis, C., and Floyd R.andP;  The ROE file system.andP;  In Proceedings of the 3rdSymposium on Reliability in Distributed Software Systems (Oct.andP;  1983), pp.andO;175-181.andM;[9] Eswaran, K.P.andP;  Placement of records in a file and file allocation in acomputer network.andP;  In Information Processing 74.andP;  IFIPS, N.Y., 1974.andM;[10] Fisher, M.L., and Hochbaum, D.S.andP;  Database location in computernetworks.andP;  J. ACM 27, 4 (1980), 718-735.andM;[11] Foster, D.V., Dowdy, L.W., and Ames, J.E.andP;  File assignment in a computernetwork.andP;  Comput.andP;  Netw.andP;  5 (1981), 341-349.andM;[12] Gavish, B.andP;  Models for configuring large scale distributed computingsystems.andP;  ATandamp;T TEchnical J. 64, 2 (1985), 491-532.andM;[13] Gavish, B.andP;  Optimization models for configuring distributed computersystems.andP;  IEEE Trans Comput.andP;  C-36, 7 (1987), 773-793.andM;[14] Gavish, B., and Pirkul, H.andP;  Allocation of data bases in distributedcomputing systems.andP;  In J. Akoka, Ed., Management of Distributed DataProcessing.andP;  North-Holland, 1982, pp.andP;  215-231.andM;[15] Gavish, B., and Pirkul, H.andP;  Computer and database location indistributed computer systems.andP;  IEEE Trans.andP;  Comput.andP;  C-35, 7 (1986), 583-590.andM;[16] Ghosh, S.P.andP;  Distributing a data base with logical associations on acomputer network for parallel searching.andP;  IEEE Trans.andP;  Softw.andP;  Eng.andP;  SE-2, 2(June 1976).andM;[17] Grapa, E., and Belford, G.G.andP;  Some theorems to aid in solving the fileallocation problem.andP;  Commun.andP;  ACM 20, 11 (Nov.andP;  1977), 878-882.andM;[18] Hac, A.andP;  File migration and process migration in a local area network.andO;In Proceedings of INFOCOM86 (1986), pp.andP;  488-495.andM;[19] Hevner, A.R., and Rao, A.andP;  Distribute data allocation strategies.andP;  In M.andO;C. Yovits, Ed., Advances in Computers, Vol.andP;  27.andP;  Academic Press, 1988, pp.andO;121-155.andM;[20] Irani, K.B., and Khabbaz, N.G.andP;  A methodology for the design ofcommunication networks and the distribution of data in distributedsupercomputer systems.andP;  IEEE Trans.andP;  Comput.andP;  C-31, 5 (May 1982), 419-434.andM;[21] Jenny, C.J.andP;  Placing files and processes in distributed systems: Ageneral method considering resources with limited capacity.andP;  Research Report,IBM Zurich Research Laboratory, Switzerland, 1982.andM;[22] Lanning, L.J., and Leonard, M.S.andP;  File allocation in a distributedcomputer communication network.andP;  IEEE Trans.andP;  Comput.andP;  C-32, 3 (1983),232-244.andM;[23] Levin, K.D.andP;  Adaptive structuring of distributed databases.andP;  InProceedings of National Computer Conference (1982), pp.andP;  691-696.andM;[24] Levin, K.D., and Morgan, H.L.andP;  A dynamic optimization model fordistributed databases.andP;  Oper.andP;  Res.andP;  26, 5 (Sept.-Oct.andP;  1978), 824-835.andM;[25] Liu Sheng, O.R.andP;  Models for dynamic file migration in distributedcomputer systems.andP;  Ph.D.andP;  dissertation, William E. Simon Graduate School ofBusiness Administration, University of Rochester, Rochester, New York, 1986.andM;[26] Loomis, M.E.S.andP;  Data base design: Object distribution andresource-constrained task scheduling.andP;  Ph.D.andP;  dissertation, Department ofComputer Science, University of California, Los Angeles, 1975.andM;[27] Mahmoud, S., and Riordan, J.S.andP;  Optimal allocation of resources indistributed information networks.andP;  ACM Trans.andP;  Database Syst.andP;  1, 1 (Mar.andO;1976), 67-78.andM;[28] Morgan, H.L., and Levin, K.D.andP;  Optimal program and data locations incomputer networks.andP;  Commun.andP;  ACM 20, 5 (May 1977), 315-322.andM;[29] Murthy, K., Kam, J.F., and Krishnamoorthy, M.S.andP;  An approximationalgorithm for the file allocation problem in computer networks.andP;  In 2ndSymposium on Principles of Data Base Systems (March 1983), pp.andP;  258-266.andM;[30] Paris, J., and Tichy, W.F.andP;  STORK: An experimental migrating file systemfor computer networks.andP;  IEEE Infocom, 1983.andM;[31] PCWeek.andP;  Connectivity supplemental, 1988.andM;[32] Popek, G., Walker, B., Chow, J., Edwards, D., Kline, C., Rudisin, G.,andO;and Thiel, G. LOCUS: A network transparent, high reliability distributedsystem.andP;  In Proceedings of the 8th ACM Symposium on Operating SystemsPrinciples, ACM SIGOPS Operating System Rev.andP;  15, 5 47-58, 1981.andM;[33] Porcar, H.M.andP;  File migration in distributed computer systems.andP;  Ph.D.andO;dissertation, Physics, Computer Science and Mathematics Division, LawrenceBerkeley Laboratory, University of California, Berkeley, 1982.andM;[34] Ramamoorthy, C.V., and Wah.andP;  B.W.andP;  Data management in distributed databases.andP;  In Proceedings of National Computer Conference (1979), pp.andP;  667-680.andM;[35] Ramamoorthy, C.V., and Wah, B.W.andP;  The isomorphism of simple fileallocation.andP;  IEEE Trans.andP;  Comput.andP;  C-32, 3 (Mar.andP;  1983), 221-232.andM;[36] Segall, A.andP;  Dynamic file assignment in a computer network.andP;  IEEE Trans.andO;Automatic Control, AC-21, 2 (Apr.andP;  1976), 161-173.andM;[37] Segall, A., and Sandell, Jr., N.R.andP;  Dynamic file assignment in acomputer network--Part II: Decentralized control.andP;  IEEE Trans.andP;  AutomaticControl, AC-24, 5 (Oct.andP;  1979), 709-715.andM;[38] Tichy, W., and Zuwang, R.andP;  Towards a distributed file system.andP;  InProceedings of the 1984 USENIX Summer Conf., (1984), pp.andP;  87-97.andM;[39] Trivedi, K.S., Wagner, R.A., and Sigmon, T.M.andP;  Optimal selection of CPUspeed, device capacities and file assignments.andP;  J. ACM 27, 3 (July 1980),457-473.andM;[40] Wah, B.W.andP;  An efficient heuristic for file placement on distributeddatabases.andP;  In COMPSACC 80 (Oct.andP;  1980), 462-468.andM;[41] Wah, B.W.andP;  File placement on distributed computer systems.andP;  IEEE Comput.andO;17, 1 (Jan.andP;  1984), 23-30.andM;[42] Yu, C.T., Siu, M., Lam, K., and Chen, C. H.andP;  Adaptive file allocation instar computer network.andP;  IEEE Trans.andP;  Softw.andP;  Eng., SE-11, 9 (Sept.andP;  1985),959-965.andM;CR Categories and Subject Descriptors: C.2.4 [Computer-CommunicationNetworks]: Distributed Systems--distributed databases; D.4.3 [OperatingSystems]: File Systems Management--Distributed file systems; H.2.4 [DatabaseManagement]: Systems--transactions processingandM;General Terms: Algorithms, Design, ManagementandM;Additional Key Words and Phrases: Dynamic control, file allocation, filemigrationandM;BEZALEL GAVISH is a professor of Business Administration at VanderbiltUniversity.andP;  His current research interests include the design and analysisof computer communication networks, design and analysis of distributedcomputing systems, systems analysis and design, combinatorial optimization,and scheduling and routing in logistic systems.andP;  Author's Present Address:Owen Graduate School of Management, Vanderbilt University, Nashville, TN37203.andM;OLIVIA R. LIU SHENG is an assistant professor of Management InformationSystems at the University of Arizona and a consultant to the ToshibaCorporation on database design for medical image data.andP;  Her current researchinterests include analysis and design of distributed database and knowledgesystems, image data management, automation of systems analysis and design,computer-mediated communication support, distributed group work support andintegrating office information systems.andP;  Author's Present Address: Departmentof Management Information Systems, Karl Eller Graduate School of Management,College of Business and Public Administration, University of Arizona, Tucson,AZ 85721.andM;Permission to copy without fee all or part of this material is grantedprovided that the copies are not made or distributed for direct commercialadvantage, the ACM copyright notice and the title of the publication and itsdate appear, and notice is given that copying is by permission of theAssociation for Computing Machinery.andP;  To copy otherwise, or to republish,requires a fee and/or specific permission.andO;</TEXT></DOC>