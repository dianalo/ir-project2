<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-508-556  </DOCNO><DOCID>07 508 556.andM;</DOCID><JOURNAL>Communications of the ACM  August 1989 v32 n8 p996(17)* Full Text COPYRIGHT Assn. for Computing Machinery, Inc. 1989.andM;</JOURNAL><TITLE>A graphics interface for linear programming.andO;</TITLE><AUTHOR>Pai-Chun Ma; Murphy, Frederic H.; Stohr, Edward A.andM;</AUTHOR><SUMMARY>The process of formulating linear programming models is greatlyassisted by an interface to a software system that provides newrepresentations that allow modelers to depict their problems ingraphical rather than mathematical form.andP;  The interface, calledLPFORM, uses artificial intelligence techniques to help usersformulate large linear programs.andP;  When the usefulness of LPFORMrelative to an algebraic language was tested, researchersdiscovered improvements in problem correctness, formulation timeand user satisfaction.andP;  The development of labeling schemes forthe rows and columns, the organization of data that determine thecoefficients and the construction of the model are all made easierby the LPFORM interface.andM;</SUMMARY><DESCRIPT>Topic:     Linear programmingInterfaceGraphics SoftwareImage processingComputer vision.andO;Feature:   illustrationchart.andO;Caption:   Software development and coverage of LP modeling stages. (chart)Integrated LP system diagram. (chart)Graphic view of energy problem. (chart)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>A Graphics Interface for Linear ProgrammingandM;1.andP;  INTRODUCTIONandM;Linear programming (LP) is a widely used optimization technique with manyapplications in industry.andP;  While there have been many improvements insolution techniques, the methods for building and managing LP models havechanged relatively little over the last 30 years.andP;  Currently, formulatinglinear programs is an art requiring considerable expertise and painstakingattention to detail.andP;  Large LPs may consist of thousands of decisionvariables and constraints and many small submodels.andP;  A small mistake may leadto an unbounded solution, infeasibilities that are hard to detect, or in theworst case, to a plausible model that gives wrong results.andM;Simon describes decision-making in terms of three stages of problem solving:1) intelligence; 2) design; and 3) choice.andP;  Most research has been directedtoward the choice stage.andP;  In fact, the purpose of linear programming itselfis to help users make optimal choices.andP;  Little research and few methods areavailable that can help in discovering a problem (intelligence) or informulating models (design).andP;  The research described in this article isdirected toward the latter problem.andM;We describe the design of an interface for a software system (LPFORM) thatuses artificial intelligence techniques to help operations researchers andmanagers formulate large linear programs.andP;  The design and knowledgeengineering aspects of LPFORM are described more fully in [18, 21, 22, 24].andO;Preliminary user reactions to the prototype are favorable.andP;  A laboratorystudy to test the usefulness of LPFORM relative to an algebraic languagefound improvements in problem correctness, time to formulate and usersatisfaction.andP;  We discuss the interface broadly, not only in terms of themenus and screens of the physical interface, but also in terms of the problemrepresentations and problem-solving strategies that are provided.andM;LPFORM helps users through the grueling steps of constructing the model,developing labeling schemes for the rows and columns and organizing the datathat determine the coefficients.andP;  It can handle any linear programmingproblem but is particularly useful in large models where there are manysubmodels.andP;  The interface allows users to depict real world objects andrelationships in a graphical form and to define LP problems innon-mathematical terms.andP;  Knowledge-based techniques are used to interpretthis problem statement, to build an internal representation of the model, andto generate the required input for an LP solver.andM;In Section 2, we describe the process of formulating an LP and discuss thesoftware systems that have been developed to help in this task.andP;  Section 3describes the architecture of LPFORM.andP;  Section 4 outlines the strategy usedto design the interface.andP;  Finally, Section 5 provides a detailed example thatillustrates many features of the interface.andM;2.andP;  STAGES IN SOLVING AN LP PROBLEMandM;The process of solving an LP problem can be decomposed into five conceptualstages: problem investigation, model formulation, data management,algorithmic solution and report generation and analysis.andP;  In this article weare concerned only with the first four stages.andP;  The report and analysis stageis discussed in [15].andP;  Each stage involves a translation between differentrepresentations of the problem or model (see Figure 1).andM;Stage 1, problem investigation, is fuzzy and informal due to the richness,variety, and ambiguity of the real world.andP;  Automation is difficult and humanswill probably always have a major role in this task.andP;  As noted in [16], humanexperts formulating LPs often: a) develop a systems diagram of blocks andarrows to depict the flows, inputs, outputs, and activities (see Figure 3);b) identify sub-structures of the problem that are identical or similar toexisting models; c) determine the relevant data and construct the appropriatedata tables; d) define the activity and constraint sets; and e) identifyspecial management policies and requirements.andP;  The interface to LPFORM isdesigned to accept all of the above information, which may be produced in arandom order and may be incomplete, necessitating later revision.andM;Stage 2, model formulation, uses the above information to create a symbolconvention (labeling scheme) for sets, variables, and coefficients, and togenerate a symbolic formulation in algebraic notation and/or a matrix format.andO;Currently, this step is performed by humans because the given information isoften vague and because it requires expertise on the nature of LP models, andknowledge of the syntax of the input language for the matrix generator.andO;LPFORM automates this part of the formulation process.andM;Stage 3, data management, associates numerical data values with the algebraicformulation and generates the input data file for the solver.andP;  Two majortasks must be performed.andP;  The data collection task requires human expertisebecause data sources are neither unique nor standard.andP;  For example, if a costcoefficient is stored in a relational database, then the formation of adatabase query to retrieve it requires knowledge of the database.andP;  Theproblem statement generation task is usually partially mechanized.andP;  Thistakes the data (labeling scheme, algebraic form and coefficients) andconstructs the LP problem statement using a &quot;matrix generator.&quot; Each datacoefficient in the symbolic statement must be assigned a value by explicitarithmetic assignment, by table declaration, or by a database query.andM;Stage 4, algorithmic solution, was the first to be computerized.andP;  Solver(&quot;optimizer&quot;) codes are relatively trouble-free due to the progress made bymanagement scientists and numerical analysts and to the advancement ofcomputer technology.andM;The evolution of LP software is shown in the lower half of Figure 1.andO;Optimizers accept the LP matrix as input and produce optimal activity levels.andO;The input format used by MPSX and APEX is a kind of standard.andP;  It involvesthe specification of all nonzero coefficient values together with their rowand column labels.andP;  While this is efficient in terms of computer resources,it is an error-prone and time-consuming format from the human point-of-view.andM;The second group of software systems are matrix generators, which helpautomate the clerical task of constructing the matrix input to the solver.andO;They accept data tables and a set of specially designed statements as input.andO;The translation from the problem specification to the matrix generatorstatement is done by writing computer programs in the matrix generatorlanguage.andP;  Thus, someone using a traditional matrix generator has to learn aspecialized language such as oMNI or DATAFORM.andM;The third group of LP software systems are extended model generators.andP;  Theyprovide data manipulation facilities and/or use an algebraic representationwithin a modeling language.andP;  Data manipulation capabilities include dataediting, acquiring data from databases, model editing, generating reports andanalyzing the solution.andP;  Examples of a systems in this class are AMPL, PAM,GAMS and PLATOFORM.andP;  Data generators for particular classes of problems havealso been developed.andP;  Finally, there are systems written in PL/1 and APL thatprovide data generation capabilities for MPSX.andM;LPFORM continues the trend in LP software by extending software support intoearlier formulation stages.andP;  It accepts graphical and textual informationfrom the user and translates it into an algebraic formulation.andP;  In &quot;symbolic&quot;mode, only the algebraic formulation is generated.andP;  In &quot;data&quot; mode the datacoefficients in the algebraic statement are explicitly associated with valuesin the database.andP;  We are aware of one other expert system that assists ingenerating LP problem statements for a class of production planning problems,the PLANET system (see.andP;  In addition, Binbasioglu has developed aknowledge-based formalism to describe and define PLs in the domain ofproduction planning in manufacturing.andM;We conclude this section by comparing alternative input representationschemes.andP;  It is inefficient for a modeler to work on the full matrix of anyproblem with reasonable complexity during all phases of model building.andP;  Thematrix does not have an appropriate level of abstraction for developing theinitial design or making major revisions.andP;  An algebraic statement is usefulfor expressing early trial versions of the model and for understanding thegeneral structure of a completed model.andP;  Moreover, the algebraic statement isconcise, provides good documentation and is independent of particular datavalues.andP;  However, it has three drawbacks as a representation scheme.andP;  First,it is still difficult to specify large models correctly (one has to ensurethat indices range over the correct sets and that all relevant constraintsare included and so on).andP;  Secondly, it does not give an immediate visualimage of the model Finally, and most importantly, it is not understandable byanyone other than an LP expert.andP;  The graphical interface described in Section5 involves a completely different interface.andP;  It uses icons to represent realworld entities (such as inventories, demand and supply points and materialflows) and abstract entities (such as LP activities and templates forpreviously defined problems).andP;  Thus, we have built a prototype for thecomputer-aided design of a mathematical model.andM;3.andP;  SYSTEM ARCHITECTUREandM;Figure 2 shows the architecture of the LPFORM system.andP;  The diagramillustrates the stages for formulating and solving LP problems given in theprevious section.andM;The integrated system is composed of five systems loosely coupled viacommunicating files:andM;1.andP;  The LPFORM system.andM;2.andP;  A Matrix Generator, which is similar in function to the GAMS system inthat both take an algebraic approach.andM;3.andP;  A Solver for linear and integer programming problems (LINDO).andM;4.andP;  A Data Base Management System (DBMS) similar to IBM's SQL.andM;5.andP;  A matrix and solution file analyzer (ANALYZE).andM;The LPFORM system consists of some 6000 lines of PROLOG code.andP;  The graphicalinterface was developed on an IBM PC/AT using a package of graphicalinterface development routines (EVA UIMS/GDB).andM;4.andP;  INTERFACE DESIGN STRATEGYandM;Our goal was to provide capabilities for model building similar to thoseprovided for computer-aided design.andP;  The interface therefore provides:andM;* A graphical, non-mathematical representation for LPs (etwork graphics,iconic representation, etc.)andM;* Intelligent support for a number of different problem-solving strategiesthat reduce the complexity of the formulation process.andM;* Capabilities that provide additional functionality such as databasemanagement, consistency checking and model management.andM;The following paragraphs describe these design features and theirimplementation.andP;  Some of them are fairly routine; others are based on our ownexperiences in model building.andM;4.1 A Graphical Problem RepresentationandM;Much of the expertise used by humans in formulating mathematical models isconcerned with a translation between reality and mathematical objects andrelationships.andP;  This involves both semantic and syntactic knowledge that maytake years to acquire.andP;  The first task in designing a system to helpformulate LPs is to provide a vocabulary (high level interface) to describethe real world, which is either the same as that used by experts and novicesor easily learned.andP;  Given a problem statement involving &quot;real&quot; objects andrelationships, the second task is to use whatever internal representationsare most convenient to translate to a valid mathematical problem statement.andM;The representation illustrated in Section 5 uses graphics to depict the timeand space dimensions of the problem, and icons to represent activities,inventories and other concepts.andP;  To define an LP it is not necessary tofollow a fixed sequence of steps or to identify essentially mathematicalobjects such as decision variables, constraints and objective functions.andP;  Infact, users may think in real terms and state their problem in a mannercloser to that used by managers than by mathematicians.andP;  For example, theycan begin by laying out a schematic of their model.andM;4.2 Reducing Cognitive ComplexityandM;The complexity of large-scale mathematical programming is a major economicand psychological deterrent to its effective use.andP;  The following ideas areincorporated in LPFORM to reduce this problem.andM;Top-down and Bottom-up Formulation.andP;  The use of hierarchical structures isknown to help human problem-solving.andP;  LPFORM allows objects and networks tobe specified in layers of increasing detail.andP;  Objects and arcs at lowerlevels inherit properties from their parents, thus avoiding repetitious entryof data or structure.andM;On the other hand, a model builder may want to explore several formulationsof a submodel before laying out the full model thereby following a bottom-upstrategy.andP;  The system supports this approach by allowing the model builder toconstruct submodels and add them to the template library for later use.andM;Alternative Approaches to Specifying Problems.andP;  There are many ways ofspecifying the same problem in LPFORM.andP;  For example, a large problem can bedefined in detail from &quot;first principles.&quot;andP;  In this approach, the userspecifies the model in terms of real world objects such as production,inventory and transportation activities.andP;  An alternative strategy is to use&quot;model mapping&quot; in which the model is defined by combining previously definedsubmodels.andP;  Any mixture of the two approaches can be used in the sameproblem.andP;  Thus, the model-mapping approach can be used to compose much of themodel and the first-principles approach to define additional activities orconstraints.andP;  Users are also given much freedom of choice in the datapreparation phase of model building.andP;  For example, data values can beassigned to the coefficients by direct input from the keyboard, by specifyingprestored tables or by database queries.andM;The trade-off is between a system that constrains users to a fixed inputrepresentation and sequence of specification steps or one that accommodatesindividual styles and situations.andP;  The danger of the latter approach is thatusers will find it complicated and confusing.andP;  The challenge is to buildenough intelligence into the system to enable it to correctly infer userintentions, and to be helpful in cases where it has insufficient evidence toproceed without more input from the user.andM;Piecemeal Approach to Problem Specification.andP;  A major design objective is tobuild a system that allows users to randomly specify small pieces of theproblems and to compose large models out of previously defined submodels.andO;The intelligence within the system is able to solve the resulting &quot;jigsaw&quot;puzzle by integrating the pieces into a single problem statement.andP;  Thisrelieves users of many tedious bookkeeping chores.andP;  While the benefits seemobvious at first sight, this approach also raises some interesting issues.andO;The first is technical.andP;  Can we buld a system that reliably infers correctformulations from partial specifications?andP;  The second is behavioral.andP;  Willthis approach reduce user understanding of the system they are building andthereby eliminate one of the major benefits of the modeling process?andP;  On theother hand, will the relief from tedious bookkeeping work afforded by thesystem encourage users to experiment with alternative specifications andthereby improve their understanding?andM;Multiple Problem Representations.andP;  LPFORM accepts a graphical form of inputand produces an algebraic specification for input to the matrix generator.andO;During this process, several other problem representations are generated tohelp increase understanding and provide documentation.andP;  The first is alisting and description of each activity in the model (especially its inputsand outputs).andP;  The second is an algebraic representation in which thealgebraic terms are arranged in columns and rows to display the structure ofthe model.andP;  Finally, a data dictionary is generated which provides ashort-term memory aid as well as documentation for other users of the system.andO;Experienced users should be able to use these representations to helpvalidate their models.andM;4.3 Added CapabilitiesandM;A necessary condition for adoption of any computerized system is that it addsnew capabilities and/or allows increased efficiency in performing necessaryprocesses.andP;  The design principles discussed above influence the efficiencyand effectiveness of the LPFORM interface.andP;  Those mentioned in this sectiondo so more directly by providing functions that are desirable in any modelingsystem.andP;  These include relational database access, consistency checking andmodel management.andM;Relational Database.andP;  A database allows direct access to application data and(perhaps more important to the formulation process) to meta knowledge aboutthe data.andP;  Users can learn about the data available in the system and specifydatabase queries as part of the process of formulating problems.andP;  LPFORMitself can use knowledge of the structure of the database at many points inthe inference process.andM;Consistency Checking.andP;  The current practice in linear programming is to firstgenerate and test a trial formulation in the form of a numerical matrix andthen to analyze it if there are problems.andP;  It is possible to usesophisticated algorithms that discover, a posteriori, the network structureunderlying the matrix representation and to diagnose problems.andP;  LPFORM allowsa different approach.andP;  Since the matrix is constructed from the underlyingnetwork and not vice versa, consistency checks can be performed as the LP isformulated.andP;  Checks on the generated tableau may still be necessary but fewererrors should be discovered and the total time to produce a correctformulation should be reduced because costly reruns will be avoided.andM;Model Management.andP;  LPFORM saves the data dictionary associated with eachmodel together with its mathematical structure.andP;  Together, these make a&quot;model base&quot; that can be extended and personalized by users.andP;  A retrievalcapability based on keyword values allows users to retrieve and inspect allmodels that have common data or variable names or that use a given resource,etc.andP;  These stored models can be combined into larger models quite simply.andM;5.andP;  COMPREHENSIVE EXAMPLEandM;This section contains an example in which LPFORM is used to model an energyproblem.andP;  The example progresses through a sequence of eight differentproblem representations: 1) a literal description of the problem; 2) agraphical view of the problem; 3) the mathematical formulation as it mightappear in a journal article or modeler's notebook; 4) the graphical screeninterfaces presented to the user; 5) the LPSPEC language statements producedby the interface subsystem; 6) an internal tableau representation; 7) thealgebraic statements output to the Matrix Generator, and finally, 8) the MPSform of the problem statement as input to the solver.andP;  The last fiverepresentations are part of LPFORM.andP;  The figures illustrating representations5) through 8) contain computer outputs from a test run.andP;  The design of theuser interface is discussed more fully in [2] and [19], the LPSPEC languagein [20], and the Matrix Generator in [32].andM;The model is developed using two alternative approaches.andP;  The first usesbasic concepts of LPFORM to construct the model from &quot;first principles.&quot;andP;  Thesecond involves the use of existing LP model templates that are &quot;mapped&quot; onto the energy problem.andP;  The interactive interface is illustrated in detailonly for the first-principles approach which is discussed in Section 5.2.andO;The model mapping approach is outlined in Section 5.3.andP;  The formulationsresulting from both approaches are the same.andM;5.1 The Energy ModelandM;Representation 1: English NarrativeandM;The problem is to determine the production and distribution of energy for anational economy.andP;  There are alternative sources (foreign and domestic) ofraw energy (oil, gas, and coal).andP;  Some forms of raw energy are transported toeach conversion center (refineries and electric utilities) and sink(residential, transportation, and industrial).andP;  The conversion centers takesome form of raw energy as input and produce processed energy (gasoline andelectricity) as output.andP;  The production processes at the conversion centerscan be modeled as simple &quot;product-mix&quot; or &quot;process-selection&quot; problems.andP;  Eachconversion center has its own technology coefficients for converting rawenergy to processed energy.andP;  Some form of processed energy is transported toeach of the three destinations.andP;  Each transportation route for each type ofraw energy has its own cost.andP;  Find the least cost transportation andproduction pattern.andM;Representation 2: GraphicalandM;The problem is sketched graphically in Figure 3.andP;  The &quot;block&quot; for conversionsis marked to indicate the existence of production activities.andM;Representation 3: Mathematical NotationandM;Let us define the following decision variables and coefficients:TSC.sub.so,co,re  amount of raw energy re transported from source so toconversion co. TSS.sub.so,si,re  amount of raw energy re transported fromsource so to sink si.andP;  TCS.sub.co,si,pe  amount of processed energy petransported from conversion co to sink si.andP;  X.sub.co,pe  amount of processedenergy pe produced at conversion center co. cc.sub.co,pe  cost of producingprocessed energy pe at conversion co. tcscr.sub.so,co,re  cost oftransporting raw energy re from source so to conversion co.andO;tcssr.sub.so,si,re  cost of transporting raw energy re from source so to sinksi.andP;  tccsp.sub.co,si,pe  cost of transporting processed energy pe fromconversion co to sink si.andP;  ssr.sub.so,re  supply limit of raw energy re atsource so.andP;  tc.sub.co,re,pe  technology coefficient of converting raw energyre into processed energy pe at conversion co. cu.sub.co,cp,pe  capacity cpused per unit of processed energy pe at conversion co. clc.sub.co,cp capacity cp limit at conversion co. dsr.sub.si,re  demand of raw energy re atsink si.andP;  dsp.sub.si,pe demand of processed energy pe at sink si.andM;The algebraic formulation for this problem is shown in Figure 4.andM;5.2 First-principles ApproachandM;In this section we follow the steps taken by a typical user of LPFORM informulating the above LP problem using graphical representations of itsnetwork and activity structure.andP;  The network structure is depicted by&quot;blocks&quot; of activities that are separated from other blocks by space and/ortime links.andP;  The blocks might represent factories or warehouses and the linksin a transportation network.andP;  Users can build the network in layers ofincreasing detail with the properties and connections of higher layers beinginherited by lower-level layers as a default.andP;  Blocks can also be&quot;replicated&quot; in space or time.andP;  This top-down approach simplifies thedefinition and reduces the amount of repetitive detail entered by the user.andO;Activities of different types (product-mix, blending, inventory, etc.) can beassociated with the blocks in a straightforward fashion.andP;  Previously definedproblem templates (e.g., for a catalytic converter in a refinery problem) canalso be associated with the blocks, thus mixing the &quot;first-principles&quot; and&quot;model-mapping&quot; approaches.andM;Representation 4: Graphics Interface To LPFORM.andP;  Figures 5-8 show some of thescreens generated by a user who is defining the energy problem from firstprinciples.andP;  The order in which aspects of the model are defined is somewhatarbitrary.andP;  The strategy, in this case, is to decompose the modelhierarchically into two layers.andP;  The first layer consists ofgeneralizations--the Sources, Conversions and Sinks and the transportationlinks between them.andP;  The second layer is a more detailed representation ofthe problem in terms of the various types of source (domestic and foreign),conversion (refineries and electric utilities) and sinks (residential andindustrial).andP;  This is actually the level of detail at which the model isfully defined.andM;The main screen used in the interaction (see Figure 5) is explained in detailin [19].andP;  Briefly, the commands on the right define the data and structure ofthe LP.andP;  The Appendix contains a brief explanation of each command.andP;  To placean object on the screen, users point (with the cursor or another device suchas a mouse) to the command and then to a position on the screen.andP;  They arethen led through a series of questions associated with the command.andM;In the energy example, the first step is to define the highest level ofblocks (for Sources, Conversions and Sinks) using the CREATE-BLOCK (C-B)command and to link them using the LINK-BLOCK (L-B) command.andP;  Figure 5 showsthe screen at the end of this step.andP;  Note that the linkages are directed.andM;In the second step, the user specifies the commodities that are transportedon each link using the DEF-TRANSPORT (D-T) command as shown in Figure 6.andP;  Asa documentation aid, the user may specify long descriptive names for the datacoefficients--this is illustrated in the figure.andP;  The system later promptsthe user for names that are more suitable for inclusion in the algebraicstatement.andM;In the third step, the user defines the next lower level of blocks (Figure7).andP;  If no further links or activities are defined at this level, thelower-level blocks and links automatically inherit all the properties oftheir parents.andP;  Thus, single link between Sources and Conversions in thefirst level is automatically translated to four links between the Sources andConversions in the second level.andP;  At this point, the network structure of theproblem is completely specified.andM;In the fourth step, the user specifies the production activites in theconversion blocks using the DEF-ACTIVITY (D-A) command.andP;  The screen in Figure8 is obtained by pointing to the D-A command on the right of the screen andthen to the electric utilities block.andP;  Activities are patterned after theactivity-modeling approach in Dantzig [10].andP;  An activity is defined by itsactivity set (which specifies the set of columns occupied by the variable inthe LP matrix) and by its inputs and outputs (from which the rows intersectedby the activity can be inferred).andP;  Activity coefficient values or names (onefor each input and output) and the objective function coefficient value orname must also be specified.andP;  Some slots in Figure 8 are optional and aretreated as hints to the user to enter the relevant information for anactivity.andP;  The user simply spaces over slots that are not relevant.andP;  Afterthe detailed specification of the activity has been completed, the networkrepresentation is restored but an activity icon is shown in the block toindicate that it is not a simple demand, supply or transshipment point.andM;In the fifth step, the user specifies the type of commodities in more detailusing the SET command.andP;  This is a simple promt-response type of interface inwhich, for example, the user specifies that Processed-Energy is really a setof different commodities (Electricity and Gasoline).andM;The sixth and final step in defining the problem is to specify the directionof optimization using the OPT command in the lower right corner of thescreen.andM;After this interaction, the user saves the problem (using the SAVE command inthe top of the screen) and then select the SOLVE command to generate theLPSPEC statements.andM;Representation 5: LPSPEC Statements.andP;  Each of the commands in the graphicinterface has a corresponding LPSPEC statement that captures the informationprovided by the user.andP;  The LPSPEC statements from the above interaction arelisted in Figure 9 in the order in which they were generated by the user.andO;The LPSPEC command processor can check for missing or ambiguous informationand request clarification from the user.andM;In LPSPEC, the value &quot;#&quot; represents information that is not available or notrelevant; inferences regarding this slot will be suppressed.andM;Representation 6: Internal Tableau.andP;  After compilation of the LPSPECstatements, the inferencing rules are invoked and pieces of the model arecreated and assembled into their proper positions in the tableau by areasoning process similar to that used in solving jigsaw puzzles (see [25]).andO;Finally, the model is cross-referenced to its data and to entries in the datadictionary.andM;The internal tableau representation (Figure 10) and model data dictionary(Figure 11) are the final result of the reasoning process in LPFORM.andP;  This isthe basic representation from which problem statements for different matrixgenerators can be constructed in a straightforward fashion.andP;  One example isshown in Figure 12.andM;The internal tableau is a precise mathematical statement of the problem thatincludes comments explaining the roles of the various symbols.andP;  It is used tocheck and document the model.andP;  The comments are added by LPFORM during itsinference process.andP;  The display presented to the user shows both thealgebraic and the tableau (block) structure of an LP problem.andP;  If the problemis large, the display is spread across several screens.andP;  It may also beprinted for documentation purposes.andM;In Figure 10, there are columns for each decision variable and rows for theobjective and each constraint.andP;  The columns and rows are labeled by thedecision variables and RHS constants together with their indices.andP;  Summationsare identified by an &quot;S&quot; followed by the list of indices over which thesummation is to be performed enclosed by braces.andP;  The short names for theindices and data coefficients were entered by the user in response to promptsduring the interpretation process.andP;  Note that the system has inferred theexistence of the RHS coefficients in the supply and use constraints and hasprompted the user for their names.andP;  Also, the balance equations for rawenergy and processed energy have been correctly synthesized.andM;The data dictionary for the energy model is shown in Figure 11.andP;  The setnames on the left help clarify the meanings of the variables andcoefficients.andP;  The user can annotate the model dictionary with longercomments.andM;Representation 7: Algebraic Statements For External Matrix Generator.andP;  Figure12 shows the algebraic statements that are output to the matrix generator.andO;Statements beginning with an &quot;*&quot; are comments and those beginning with an &quot;E&quot;are executable statements used to generate (or retrieve) and process the datafor the problem.andP;  In Figure 12, the execute statement is used to generate theneeded sets.andP;  The DATA = statement checks to see if the data items needed bythe problem are present in the workspace.andP;  If they are not present, or ifthey have nonconformable dimensions, the user is asked to input the dataitems interactively.andP;  Note that this provides a means to run LP programs thatwere defined in &quot;symbolic mode&quot; in LPFORM.andP;  The body of the LP specificationconsists of the objective and constraint sets separated by comment lines.andO;The correspondence between this part of the problem statement and normalmathematical notation is fairly close.andP;  The &quot;S&quot; symbol stands for the Greeksigma character used to specify a summation.andP;  The limits of the summationsare specified in the following line (as is common in mathematical notation).andO;The &quot;FOR&quot; lines specify the index sets for the rows of the constraint sets.andM;Representation 8: MPS Format.andP;  Figure 13 shows (parts of) the matrix input tothe mathematical programming solver LINDO [28] for a test of the energymodel.andP;  In this case the row labels are simply numbers and the column namesare the variable names qualified by numerical indices.andP;  The &quot;Rows&quot; sectiondefines the type of constraint (&quot;L&quot; for less-than-or-equal, &quot;G&quot; forgreater-than-or-equal, etc.).andP;  The &quot;Column&quot; section lists the row names andnon-zero values for each variable and the &quot;RHS&quot; section does the same for theRHS coefficients.andM;5.3 Model-Mapping ApproachandM;A useful facility in any modeling environment is to be able to combinepreviously defined and tested models into a larger system.andP;  In LPFORM, thecomponent models may be either standard LP models (such as Transportation,Blending, Product-mix, Process-selection) or standard constraint types (suchas inventory, supply availability, demand requirement, and so on).andP;  Thestandard models are provided by the system.andP;  In addition, users can definetheir own models and store them as model templates in the system's modelblank.andP;  Thus, to build a complete refinery model, one might start by buildingand testing standard models for the catalytic crackers and converters.andP;  Thenthese can be retrieved later for use in the complete refinery model.andM;Referring back to Figure 3, it seems intuitively obvious that the modelconsists of three separate transportation problems (one for each of the arcsin the top level diagram) and product-mix problems for the conversions.andP;  Thisapproach is implemented in LPFORM using the CALL-MODEL (C-M) command.andP;  Figure14 shows part of the interaction when the user is defining the transportationmodel between sources and conversions.andP;  The user is asked to &quot;map&quot; the namesused in the template model (for index sets, variable names and datacoefficients) to those to be used in the new model.andP;  LPFORM is able to linkautomatically the models based only on this information.andM;The user then selects this screen two more times for the other twotransportation models and again for the product-mix problem with raw energyand capacity inputs.andP;  Finally, the SET and OPT commands are used, as in thefirst-principles approach, to complete the specification of the model.andM;The LPSPEC statements corresponding to the model-mapping approach are shownin Figure 15.andP;  Taking the names and sets of names (enclosed in squarebrackets) in pairs, the first member of the pair contains the names that werestored with the template and the second member contains those supplied by thebuilder of the energy model.andP;  The template names are supposed to bemeaningful to the user but are simply place-holders to LPFORM.andP;  The templatesare defined at the greatest level of generality.andP;  If the user's model has noneed for some of the indices in the stored template, it can be converted to asimpler model with fewer indices simply by omitting the unneeded index.andO;Conversely, the user can add indices to a model by using the replicatecommand (see Appendix).andM;6.andP;  CONCLUSIONandM;In this article, we have described the design principles we are using todevelop an aid for formulating linear programs and have provided a detailedexample of the use of the system.andP;  LPFORM users can move back and forthbetween a broad overview of their problem and a detailed view of a part ofthe same problem.andP;  They can specify pieces of the final system randomly asthey come to mind rather than being forced to adhere to any strict order.andO;The users and the system jointly define the LP problem via a two-way flow ofinformation.andP;  The system will do what it can to build the problem statementbut will be in constant need of information and confirmation from the users.andM;As mentioned earlier, a laboratory test was conducted in which Ph.D.andP;  studentsubjects formulated LP models using both LPFORM and a conventional algebraiclanguage.andP;  Their performance was measured in terms of time to formulate,number of errors, user satisfaction and so on.andP;  While these results werefavorable, additional experiments with professional model builders arenecessary to confirm the effectiveness of the design principles incorporatedin the interface and to provide pointers to future improvements.andO;</TEXT></DOC>