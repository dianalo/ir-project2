<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-252-007 </DOCNO><DOCID>11 199 139</DOCID><JOURNAL>IBM Journal of Research and Development  Jan-March 1991 v35 n1-2p156(11)* Full Text COPYRIGHT International Business Machines Corp. 1991.andM;</JOURNAL><TITLE>Application of visualization tools in solid mechanics. (technical)</TITLE><AUTHOR>Moini, Samad.andM;</AUTHOR><SUMMARY>With increasingly complex digital simulations and computations,large volumes of numerical output are generated, and users mustselect more effective techniques for handling and displaying suchoutput in order to extract relevant information.andP;  In this study,visualization techniques such as animation, tracking, and 2D/3Dcolor displays are imbedded in implicit and explicit finiteelement codes for solving complex solid-mechanics problems.andP;  Withthese techniques, the investigator can more fully utilize computertime and better understand the results of long and costlycomputations.andP;  This investigation demonstrates the effectivenessof different visualization techniques and distributed computing onan IBM platform.andP;  (Reprinted by permission of the publisher.)andM;</SUMMARY><DESCRIPT>Topic:     VisualizationComputer GraphicsModelingMechanicsSolids ModelingTwo-Dimensional GraphicsThree-Dimensional GraphicsDistributed Processing.andO;Feature:   illustrationchartphotograph.andO;Caption:   Simplified visualization pipeline. (chart)Shaped charge, fringes of pressure. (chart)andM;</DESCRIPT><TEXT>IntroductionandM;Digital simulation is an essential tool for design and performanceevaluation.andP;  The quantity of output data is often very large, and extensivepostsimulation operations are required in order to produce visual images.andO;The idea of wanting to create visual output from a scientific simulation isnot new, but only recently have people begun to investigate the process ofvisualization and think about developing software and hardware withscientific visualization requirements in mind.andP;  In a very simple form, onecan define visualization as the process of aiding the scientist(investigator) in data analysis and comprehension by transforming numbers(symbolic) into images (geometric).andP;  For proper and successful implementationof any visualization tool, one must satisfy certain requirements.andP;  Theultimate visualization requirements include 1) accurate representation, 2)unambiguous interpretation, 3) multivariable interpretation, 4) volumetricdisplay capability for three-dimensional representation, 5) animation, and 6)interactive capability.andP;  There are several important factors involved in datavisualization.andP;  These include format conversion, storage, retrieval, userinterface, visualization methods, and final result representation (i.e.,andO;display and presentation format).andM;Visualization has always played an important process.andP;  For example, extensivestudies of crash analysis have been carrid out by means of very expensivephysical impact testing.andP;  Experimental visualization yields rich data sets ofvery high resolution, but they are essentially images and are well suited toconventional two-dimensional image processing and analysis.andP;  More recently,both experiments and numerical simulations have begun to yieldhigh-resolution multivariate data.andP;  these rich and complex data sets canconsist of up to six or more quantities defined at each of thousands,sometimes millions, of node points in a two-, three, or perhapsfour-dimensional domain.andP;  Often the quantities of interest are not directlyin the data set, but must be derived from it using information about theunderlying physics and mathematics.andP;  Given the large size of the data sets,this requires a combination of high-performance simulation withvisualization, effectively utilizing both the large bandwidth of the humanvisual system and the capacity of supercomputers for processing large amountsof data.andP;  Consequently, it is an extremely effective way to facilitate theunderstanding of large and complex data sets.andM;One of the major problems that confronts anyone attempting scientificvisualization is that workstations designed for interacting with users andproducing visual information do not typically have the processing power toperform large computational simulations.andP;  On the other hand, supercomputersdesigned for performing very large and complex computational simulations donot typically have methods of easily bringing the visual results of thesimulation to the desk of the investigator.andM;The traditional approach to addressing this problem has been the use ofpreprocessors and postprocessors.andP;  In that case, the computation-intensivepart of the simulation is handled by a supercomputer and binary outputtransferred to a workstation for postprocessing and visualization.andP;  Mostoften when the problem size is very large for a workstation to handle, or thesupercomputer CPU cycles ae not fully utilized and can be used freely, thepostprocessing also is performed on the host computer.andM;Another approach is to use distributed computing, having different computerson the network perform pieces of a large problem.andP;  During execution, the dataflow between program modules, any of which may reside on a remote machine.andO;The process of transforming the results of a simulation into an images or aseries of animations can be thought of as a pipeline.andP;  The information flowsthrough a set of programs (gates) which create the final image.andP;  Figure 1shows a simplified visualization pipeline model.andP;  The problem with thissimplified model is that all information (data) flows between process moveonly in one direction.andP;  This will ultimately limit the flexibility andinteractivity of the system.andP;  The steps shown in Figure 1 can be distributedamong different CPUs connected by a network.andP;  The local scientificworkstation is used to prepare the input data (preprocessing), set up thesimulation, monitor progress of the simulation, and prepare the final outputfor viewing (postprocessing).andP;  The supercomputer is used primarily for thecomputation-intensive calculations of the simulation model, and in some casesfor mapping from simulation phase to image phase.andP;  Ideally the intercomputerconnection should be fairly transparent to the scientist, and the overhead toset up such a task should be minimal.andM;Parallel to the idea of distributed visualization and the ultimate goal ofscientific visualization is the concept of &quot;pseudo&quot; real-time visualization(tracking and steering).andP;  Since the real-time events happen very rapidly(anywhere from picoseconds to microseconds), real-time visualization of thesevents is not practical.andP;  On the other hand, simulation of these events takesminutes or perhaps hours.andP;  Therefore, the terminology &quot;pseudo&quot; real time isused to reflect the simulation time rather than actual event time.andP;  asuccessful computing and visualization environment should allow theinvestigator to display the output of each time step of the simulation assoon as it is available, perhaps during the following time step, while thesimulation is in process.andP;  This technique lends itself to a fully interactivesimulation and visualization.andP;  If there is a problem with simulation, theuser can realize that there is an error and correct it immediately.andP;  Thismethod has drastically lower debugging and postprocessing time requirementsand associated costs than other methods.andP;  It can be implemented in two ways.andO;The easier method is tracking; visualization is done during simulation but itis not interactive.andP;  the better method, though it is extremely complex, issteering [1, 2].andP;  In this case visualization is accomplished duringsimulation, but analysis involves modifying the simulation interactivelyduring the simulation.andM;Advances in hardware and software technology permit a wide range of newtechniques for examining the global characteristics of each output variableand its interrelationship with other variables.andP;  With effective tools andappropriate methods for examining the entire output, there is a possibilityof improved problem understanding and the discovery of physical results thatmay not be observed in a limited review of selected output variables.andP;  theinvestigator can also confirm that the model is physically correct, that thenumerical computation is free of error, and that the iterative computationconverges rapidly to reasonable results.andM;As computational resources become more powerful, simulations become morecomplex, resulting in large volumes of numerical data.andP;  Most commonly usedgraphical methods limit the investigator to looking at a few critical outputvariables rather than examining the complete set of output data.andP;  Graphicalmethods range from simple x-y plots to three- dimensional displays.andP;  Thesemethods can also be used to obtain quantitative information such as, e.g.,andO;position, stress, strain, pressure, and temperature values at selected nodalpoints.andP;  In a research and development laboratory, both simulation andvisualization can be at a premium.andP;  For this reason, an efficient method ofutilizing both computational and graphical networks is required.andM;Applications in solid mechanicsandM;The application of finite element spatial discretization to the equations ofsolid and structural mechanics leads to a system of semi-discrete and, ingeneral, nonlinear equations.andP;  The methodologies for time integrating suchsystems may be divided into two classes, implicit and explicit, the essentialdifference being that the former requires the solution for a nontrivialsystem of equations.andP;  Each of these methods can be used in Lagrangian finiteelement programs for large-scale solid and structural dynamic calculations.andO;The explicit codes, while restricted by stability conditions, can attainefficient solutions to a wide class of large-deformation, contact-impactproblems.andP;  The implicit codes, using an unconditionally stabletime-integration scheme, can be more efficient when the physically relevanttime-step size is several orders of magnitude larger than that permitted byexplicit codes.andM;In two-dimensional problems, the computational cost of both implicit andexplicit schemes is dominated by the evaluation of nonlinear constitutiverelationships.andP;  This leads to a natural breakdown in the way they are used.andO;Explicit schemes are used for wave propagation, hydrodynamics, andhigh-frequency dynamics, and implicit schemes for statics, quasi-statics, andlow-frequency dynamics.andP;  Traditionally, the vast majority ofthree-dimensional problems have been solved with explicit codes, even forlow-frequency response, because the computational burden in both storage andCPU entailed in implicit codes by repeatedly factorizing a large system ofequations overwhelms available resources.andM;Visualization techniques are applied to implicit and explicit finite elementcodes for solving complex solid-mechanics problems.andP;  In these codes,automated step-size control is used to eliminate termination due todivergence.andP;  If convergence fails, it automatically backs up to the lastconverged state, restarts with a new step size, and continues to iterate.andO;This procedure continues until convergence is achieved.andP;  During theexecution, the user can monitor (track) the status of the program.andP;  Thesolution-tracking capability imbedded in these codes allows the investigatorto see the results of each simulation time step as it is advancing.andP;  The usermay halt execution at any time step by terminal sense-switch controls andener into an interactive graphics and rezoning phase.andP;  Rezoningimplementation consists of three parts.andP;  First, nodal values are generated onthe old mesh for all variables to be remapped.andP;  Then, the user can rezone oneor more materials either interactively or automatically with a command file.andO;In this phase, current results can be interactively displayed.andP;  Finally, theremeshed regios are initiatized by interpolating from nodal point values ofthe old mesh, and execution continues.andP;  In an interactive display phase,binary files generated at the time execution halted are read, and contours,time histories, and deformed shapes are plotted.andP;  If desired, they can becolored for better two- and three-dimensional visualization.andP;  Contours andfringes of nearly 100 different quartities may be plotted.andP;  A variety ofstrain, stress, pressure, displacement, and velocity measures can be computedand displayed.andP;  Momentum can be computed from material and interfacepressure, and shear profiles can be plotted along slidelines.andP;  (Slidelinesare interface lines between two meshes, on which sliding, voids, and frictionare permitted.)andP;  The tracking part is menu-driven, and the investigator canselect any of the nearly 100 different quantities to be displayed.andP;  the usercan switch from tracking one quantity to another at any time step byselecting that item on the menu.andP;  these feqaures reduce debugging time,increase users' knowledge of the simulation process, reduce human error, andincrease productivity [3].andM;Data from solid-mechanics simulationsandM;The visualization tools were imbedded in two- and three-dimensional implicitand explicit finite element codes developed at the Lawrence Livermore ationalLaboratory [4-6andrsqb; and used in the following experiments.andM;The two-dimensional explicit finite element program DYNA2D is used tosimulate the behavior of a type of shaped charge called a self-forgingfragment.andP;  Calculations were carried out to the formation of the fragment.andP;  Afinite element mesh consisting of 1112 elements is used in the shaped-chargesimulation model.andP;  Slidelines ae initially placed between theplate-high-explosive (HE), cylinder-HE, and plate-cylinder interfaces.andP;  By 10ms the HE had burned, and by 30 ms the pressure in the HE has dropped tonegligible levels.andP;  At 30 ms the cylinder and all the slidelines are removed,and only the plate calculations are continued to the termination time of 90ms.andP;  The first attempt at this experiment produced the error &quot;element number548 of material number 1 has a negative area,&quot; a restart file was written,and execution stopped after approximately 21 ms of simulation.andP;  (Materialnumber 1 is the HE).andP;  Reviewing the time history plots revealed that thefirst few nodes of th HE were being pushed right through the cylinder.andP;  Theprogram detected the error when the element boundaries crossed and produced anegative net element area.andP;  Figure 2 shows a few frames of this errorcondition.andP;  The error was caused by the very simple mistake of ot definingthe last interface node between cylinder and He as a slideline node.andP;  As soonas this simple input error was corrected, the program ran to completionwithout any error.andP;  Figure 3 displays a few snapshots of error-freesimulation results.andP;  Without the pseudo-real-time visualization method usedin this experiment, finding and correcting the error would have been adifficult task.andP;  Figures 4(a), 4(b), and 4(c) illustrate an animation ofcontours of pressure for cylinder and plant, and Figures 5(a), 5(c) displayan animation of displacement vectors.andP;  The mothion of the wavefront isclearly visible throughout Figures 4 and 5.andM;In another experiment, the three-dimensional explicit finite element programDYNA3D is used to simulate the behavior of two colliding pipes.andP;  It ispostulated that in the event of a pipe break, the highly pressurized fluid inthe pipe could cause the pipe toswing and strike other pipes.andP;  From 1680shell elements, a three-dimensional model is developed which consists of twosteel pipes, both having a length of 250 cm, O.D.andP;  of 8.5 cm, and thicknessof 1.0 cm.andP;  One pipe is oriented horizontally and fixed at both ends; theother pipe swings about one end in a plane normal to the horizontal pipe.andO;The angular velocity of the swinging pipe at the time of impact is assumed tobe 50 radians per second.andP;  Two hundred steps were used, with a terminationtime of 10 ms.andP;  The results of animated pressure contours are shown inFigures 6(a), 6(b), and 6(c).andP;  The pipe begins to rebound at approximately 7ms, which is in good agreement with experimental results [4].andM;In the third experiment, DYNAD3D is used to simulate the behavior of aself-forging fragment similar to that of the two-dimensional example.andO;Calculations were performed on the formation of the fragment produced by theplate.andP;  A finite element mesh consisting of 5200 elements ad 6816 nodes isused in the shaped-charge simulation model Slidelines are placed betwen theplate-HE, cylinder-HE, and plate-cylinder interfaces.andP;  Fifty time steps wereused, with a termination time of 10 ms.andP;  The animated sequence of contours ofpressure produced by the three-dimensional shaped-charge model is shown inFigures 7(a), 7(b), and 7(c).andM;In the fourth experiment, the two-dimensional implicit finite element prgramNIKE2D is used to simulate the behavior of an O-ring subjected to staticforces.andP;  An axisymmetric finite element model of a metal O-ring seal in asteel flange, shown in Figure 8(a), is used to investigate the interfacepressure between the seals and flanges.andP;  The mesh consists of 1126 nodes and three material types, steel flanges, an Inconel X-750 inner ring, and asilver O-ring.andP;  Slidelines ae placed between the O-ring and flangeinterfaces.andP;  Loads are imposed by specifiying the displacement of the nodealpoints along the top of the flange such that the final displace state of 0.83mm is reached after 14 increments.andP;  Eight additional increments are used tounload from the peak deformation.andP;  A total of 22 solution steps are used,with the termination time of 3.0 seconds.andP;  The animated sequence of contoursof plastic strain in Inconel and silver is shown in Figures 8(a), 8(b), and8(c).andP;  The last picture in the sequence shows the residual deformation afterunloading.andM;In the last experiment, NIKE2D is used to simulate the behavior of a contactinterface in a metal-forming test.andP;  A finite element model of a stainlesssteel sleeve and elastic die, shown in Figure 9(a), is used to investigatethe pressures required to collapse the sleeve into the die with a largeamount of sliding along the interface.andP;  The mesh consists of 583 nodes andtwo material types.andP;  A pressure loading is applied in 50 equal increments toa peak value of 0.5 GPa and is removed in two increments, for a total of 52solution steps.andP;  When the pressure reaches 0.48 GPa, the sleeve is completelycollapsed.andP;  An animated sequence of deformed shapes with contours of plasticstrains and displacement vectors superimposed on them is shown in Figures9(a)-9(e), respectively.andP;  The simulation results are in good agreement withexperiment [6].andM;DiscussionandM;At present, most investigators interact with data either in a veryquantitative way, using a single contour or a line mesh plot, or in a veryglobal way, by studying the deformation and displacement behavior of themodel.andP;  Distributed computing methods combined with tracking and limitedsteering capability provide two- and three-dimensional dispaly, animation,and multiple-window imaging capabilities as options for the investigator.andP;  Inthe course of this study, the trackig capabilities were used with distributedcomputing methods.andP;  A combination of an IBM 3090 (1), an RT (1) system, and aPS/2 (1) connected by a local area network were used.andP;  The main programsresided on the 3090 or RT, and results were displayed on an IBM 5080, 3279display, or RT display in a native mode, or on an RT display, PS/2 display,or other equipment manufacturers' machines by means of the X-Window (2)interface.andP;  The interface among the IBM 3090, RT, and PS/2 is transparent tothe user.andM;The techniques discussed here for viewing multivariate complex data inthree-dimensional space are very important tools for researchers.andO;Representation of 3D data as 3D images instead of a set of 2D slices isinvaluable for the interpretation and understanding of such data.andP;  Figures 6and 7 demonstrate the ease with which such complex physical processes modeledin three dimensions and be studied.andP;  Although the simulation itself is awell-known and well-established process, the tracking, partial steering, andvisualization techniques described are not yet used by most researchers andare shown here to be of paramount importance in debugging, understanding, andinterpretation of such complex 3D simulation processes and data.andM;The tracking, animation, 2D-3D display and multiple-window imaging techniquesdescribed in this paper are imbedded in three specific solid mechanicssimulation codes.andP;  However, these methods can be used in a wide range ofapplications.andP;  In complex simulation models, the entire output can beexamined for all parameter values, not just a few well-known outputvariables.andP;  With detailed results displayed for evaluation, the simulationprocess can be better understood, and new design criteria may be formulated.andO;Without these tools, a scientist or a design engineer may spend hundreds ofhours of CPU time and take weeks to find and correct a design error.andP;  Theinclusion of visualization tools in large and complex programs helps users tomonitor every state of the execution and obtain and correct results in theshortest time with minimum expense.andM;Samad Moini IBM Scientific Center, 1530 Page Mill Road, Palo Alto, California94304.andP;  Dr. Moini is a scientific staff member in the Numerically IntensiveComputing Applications group.andP;  His interests include semiconductor process,device, and circuit simulation, stress analysis by finite element methods,and scientific visualization.andP;  Before joining IBM, he was the lead engineerof a real-time hardware design team at the Advanced Product Division of LinkFlight Simulation.andP;  Dr. Moini received his M.S.andP;  and Ph.D.andP;  degrees from theUniversity of California at Davis.andP;  He has taught undergraduate engineeringat UC Davis and at the California State University at Chico, and VLSI desigat Santa Clara University.andP;  Dr. Moini is a member of the Institute ofElectrical and Electronics Engineers and Sigma Xi.andM;ReferencesandM;andlsqb;1andrsqb; W. E. Robbins and S. S. Fisher, Eds., &quot;Three-Dimensional Visualizationand Display Technologies,&quot; SPIE Proc.andP;  1983, 144-180 (January 1989).andM;andlsqb;2andrsqb; J. L. Martin and S. f. Lundstrom, Eds., &quot;Science and Applications,&quot;Proceedings of Supercomputing 88, IEEE Computer Society Press, Piscataway,NJ, 1988, pp.andP;  14-230.andM;andlsqb;3andrsqb; Edward J. Farrell, Steven E, Laux, Phillip L. Corson, and Edward M.andO;Buturla, &quot;Animation and 3D Color Display of Multiple-Variable Data:Application to Semiconductor Design,&quot; IBM J. Res.andP;  Develop.andP;  29, No.andP;  3,302-315 (1985).andM;andlsqb;4andrsqb; J. O. Hallquist and D. J. Benson, DYNA3D Users' Manual, LawrenceLivermore National Laboratory, Livermore, CA, 1987.andM;andlsqb;5andrsqb; J. O. Hallquist, DYNA2D Users' Manual, Lawrence Livermore NationalLaboratory, Livermore, CA, 1988.andM;andlsqb;6andrsqb; J. O. Hallquist, NIKE2D Users' Manual, Lawrence Livermore NationalLaboratory, Livermore, CA, 1986.andM;Received November 10, 1989; accepted for publication January 3, 1991andM;(1) 3090 is a trademark, and RT and PS/2 are registered trademarks, ofInternational Business Machines Corporation.andM;(2) The X-Window System is a trademark of MIT.andO;</TEXT></DOC>