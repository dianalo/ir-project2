<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO> ZF32-170-068 </DOCNO><DOCID>10 582 182</DOCID><JOURNAL>PC Magazine  April 30 1991 v10 n8 p397(3)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1991.andM;</JOURNAL><TITLE>Databases. (column) (tutorial)</TITLE><AUTHOR>Ricciardi, Sal.andO;AttFile:   PCMAG\V10N08\BKP.PRG;0 Program:  BKP.PRG  Clipper backup batch file.andO;PCMAG\V10N08\RAT.BIN;0 Program:  RAT.BIN  Return to substring in dBase.andO;PCMAG\V10N08\RAT.C;0 Program:  RAT.C  C source code.andO;PCMAG\V10N08\STRREV.BIN;0 Program:  STRREV.BIN  DBase String reversal.andO;PCMAG\V10N08\STRREV.C;0 Program:  STRREV.C  C source code.andM;</AUTHOR><DESCRIPT/><TEXT>.BIN FILES IN TURBO CandM;For quite some time, I've been writing.BIN files to extend the interpretedDBASE environment.andP;  Recently, I came across an extremely simple technique forwriting .BINs in Turbo C.andM;Most compiled C routines depend on a start-up module supplied by the compilervendor.andP;  This module sets up the C environment, examines the command line andprepares the command line arguments, sets up system global variables, andgenerally prepares things prior to passing execution to your C program.andM;Some programs, such as dBASE.BIN files, don't need all of this overhead.andO;Moreover, the interface requirements for BIN files make the use of thestandard C startup modules impossible.andM;After I had rewritten the start-up code for Turbo C in assembly languagedifferent ways, Len Zerman (now With Nantucket) showed me how to use TurboC's pseudoregister variables to set up a tiny-model C .BIN routine withoutany assembly start-up code.andM;This encouraged me to experiment.andP;  I found that by using Turbo's compactmemory model you can easily link-in many of the Turbo C runtime libraryroutines.andP;  Since the compact model library code makes no assumptions aboutthe relationship of the SS and DS registers, a BIN routine can use the DBASEinterpreter's large stack space freely, which keeps the size of the.BINroutine to a minimum.andP;  (Tiny-model.BlNs have to maintain their own stackwithin the BIN routine.)andM;Figure 1 shows a sample BIN routine written in Turbo C that takes only oneparameter, a character string, and reverses it using the Turbo C libraryroutine strrev().andP;  Since STRREV.BIN uses the dBASE III Plus parameter-passingconvention (the DS:BX register pair point to the passed parameter), it can beused from dBASE III Plus, dBASE IV, FoxBASE Plus, FoxPro, Quicksilver, dBXL,and any other dBASE-like environment that supports the dBASE III Plusconventions for .BIN routines.andP;  Since the compact model defaults to far dataaddresses, all that's necessary to reference the DBASE string is to declare afar pointer and load it with the macro MK_FP() The pointer can then be passedto the strrev() library routine.andM;There are limits to this approach: no memory can be allocated at runtimeexcept on the DBASE stack, and any library routines that reference globalsdeclared in the Turbo start-up code have to be dealt with as special cases.andO;But I find Turbo C's library routines for string manipulation to be free ofthese constraints, and I no longer have to reinvent the wheel every time Ineed to juggle some characters around.andP;  The size and speed of theresultant.BINs competes with anything I have written in assembly language.andO;STRREV.BIN is only 86 bytes!)andM;Maybe the biggest limitation of this approach is that if you need toreference static data, you have to get Turbo C to group the data and codesegments together as they are in a tiny model.andP;  Otherwise, references to datain Turbo C's _DATA segment will not work within the.BIN module.andM;A little experimentation showed that combining the data and code segments ina compact-model.BIN is as simple as inserting these two lines at the top ofthe C code:andM;asm DGROUP GROUP  _DATA,_BSS,_TEXTandM;asm ASSUME CS:DGROUP,DS:DGROUPandM;The C compiler warns you that these commands make no sense to it, but itpasses them on to TASM (Turbo Assembler), which is all we need.andP;  What we haveessentially done is to create a mixed-model .andP;  BIN routine.andP;  This enables usto use the Turbo C's compact-model library and dBASEs copious stack space,without losing the advantages of tiny-model BIN architecture.andM;With DBASE IV, BlNs become much more powerful.andP;  You can pass up to sevenparameters to a .BIN.andP;  They can be used in index expressions,calculated-field expressions, and even reports and queries.andM;The listing in Figure 2, for RAT.BIN, uses the DBASE IV extensions to the BINinterface to provide a function like dBASEs AT(), only it finds the lastoccurrence of a substring within a string instead of the first.andM;R.andP;  Russell FreelandandM;Ft.andP;  Lauderdale, FloridaandM;Creating routines to extend the dBASE environment with functions that aren'talready built-in often involves the creation of BIN routines.andP;  These routinesserve to supplement DBASE with added functionality.andP;  In fact, severalcommercial add-in libraries that extend the dBASE environment are actuallyBIN files, accessed through the DBASE LOAD and CALL interface.andM;Traditionally BIN files are written in assembly language, for severalreasons.andP;  First, there's the need to keep them small and fast.andP;  With assemblylanguage, you can control precisely the size of your BIN files.andP;  Such controlis not so easily accomplished with most high-level languages.andM;Second, the LOAD and CALL interface for .BIN files has specific interfacerequirements that used to be difficult to adhere to in high-level languages.andM;The technique presented by Mr. Freeland is a compromise: it gives you theopportunity to program BIN files in C although not without the limitationsmentioned above.andP;  Since it may be difficult to discover which Turbo C libraryroutines are-compatible with this approach, the name of the game is to testcarefully !andP;  The RAT function in Figure 2 uses the dBASE IV interfaceextensions, so it works only with DBASE IV.andP;  Clipper and FoxPro already havebuilt-in RAT functions.andM;Both RAT.BIN and STRREV.BIN are available on PC MagNet.andM;BATCH FILES IN CLIPPERandM;Here is a nondatabase example of Clipper usage.andP;  I needed a routine thatwould generate a backup procedure using the system date from within a menuprogram.andM;The Clipper program in Figure 3 reads the system date and writes its ownbatch file.andP;  I put the program in a batch file, followed by a command toexecute the backup procedure that ft creates (BAKKUP.BAT).andP;  The last line ofthe batch file transfers execution back to the menu program.andM;Reg BeckandM;Williams Lake, British ColumbiaandM;CanadaandM;This illustrates how easy it is to generate batch files using Clipper'slow-level file I/O commands.andP;  FoxPro also includes a suite of low-level, I/Ocommands.andM;If you're using a DBASE implementation that does not include low-level I/Osupport, you can generate ASCII files, such as batch files, using SETALTERNATE TO and the ? command.andP;  For example, to create a batch file thatwill set an environment variable to today's date, you could use thefollowing:andM;SET ALTERNATE TO TODAY.BATandM;SET ALTERNATE ONandM;? &quot;@echo off&quot;andM;? &quot; SET TODAY=&quot;+DTOC(DATE())andM;SET ALTERNATE OFFandM;This would create TODAY.BAT, which you could then run to create the TODAYenvironment variable.andM;LET US HEAR FROM YOUandM;Share your database experience, tips,  and techniques and we'll pay you $50for any tip we print.andP;  Submissions can be mailed to our office or uploaded toPC MagNet.andP;  Mailed submissions must be made ondisk, accompanied by aprintout, and sent to Databases, PC Magazine, One Park Avenue, New York, NY10016.andP;  To upload your contribution, see the PC MagNet News Page followingthe Utilities column for access instructions.andP;  You may also contact SalRicciardi via his CompuServe ID number: 72241,33.andO;</TEXT></DOC>