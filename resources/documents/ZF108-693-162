<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-693-162  </DOCNO><DOCID>08 693 162.andM;</DOCID><JOURNAL>IBM Systems Journal  June 1990 v29 n2 p170(19)* Full Text COPYRIGHT International Business Machines Corp. 1990.andM;</JOURNAL><TITLE>AD/Cycle strategy and architecture.andO;</TITLE><AUTHOR>Mercurio, V.J.; Meyers, B.F.; Nisbet, A.M.; Radin, G.andM;</AUTHOR><SUMMARY>Over the years, IBM has made progress in resolving many of theissues that deal with improving application development (AD)productivity and quality.andP;  Systems Application Architecture,together with IBM's recently announced AD/Cycle direction,provides a platform for even greater progress.andP;  This paperaddresses the IBM strategy that supports AD/Cycle and gives anoverview of the major components of the AD/Cycle architecture.andO;This paper is an introduction to other papers that follow in thisissue.andP;  (Reprinted by permission of the publisher.)andM;</SUMMARY><DESCRIPT>Company:   International Business Machines Corp. (products).andO;Ticker:    IBM.andO;Product:   AD/Cycle (CASE software) (product introduction).andO;Topic:     Applications ProgrammingProgram Development ToolsSAA.andO;Feature:   illustrationtablechartgraph.andO;Caption:   Application development life cycle. (table)Application development today. (chart)Evolution of programming technology. (graph)andM;</DESCRIPT><TEXT>AD/Cycle Strategy and architecture Over the years, IBM has made progress inresolving many of the issues that deal with improving application development(AD) productivity and quality.andP;  systems Applications Architecture[TM],together with IBM's recently announced AD/Cycle[TM] direction, provides aplatform for even greater progress.andP;  This papaer addresses the IBM strategythat supports AD/Cyclel and give an overview of the major components of theAD/Cycle architecture.andP;  This paper is an introduction to other papers thatfolow in this issue.andM;The requirement for significant improvements in productivity in theapplication development process has been present for several years.andP;  Theimportance of this requirement has been the subject of much attention, asevidenced by a recent joint project chartered by the five major internationalIBM user groups, [2] a GUIDE strategy paper on integration of developmenttools [3] and a SHARE task force, [4] as well as numerous research anddevelopment efforst in industry, [5-11] academia, [12] and government.andP;  [13] A recent survey [5] of over 1000 businesses indicted that the backlog formainframe applications is approximately four years, with the demand for mini-and personal computer applications being somewhat less.andP;  In addition to largebacklogs of applications, businesses are also faced with the high costs ofmaintaining existing inventories of applications and a shortage ofexperienced programming skills.andP;  Businesses are frustrated with the currentstate of applications development and are confronted with an inability togenerate the applications neded to support their business processes on atimely basis.andP;  This inability, accompanied by increasing dependency on dataprocessing applications, puts businesses at a potential disadvantage in themarketplace and becomes an inhibitor to their data processing growth.andM;The approach to improving application development productivity that evolvedin the late 1970s and 1980s with the emergence of computer-aided softwareengineering (CASE) tools, has been to focus on individual tools to processspecific activities within each phase of the application development lifecycle.andP;  Figure 1 is a representation of the traditional applicationdevelopment life cycle that groups specific application developmentactivities conceptually into five phases: requirements, analysis and design,produce, build and test, and production and maintenance.andP;  The activities ineach phase are dependent upon the completion of activities in the previousphase.andP;  For example, requirements gathering is followed by analysis, analysisby design, design by produce, produce by build and test, and so on.andP;  Inaddition to the activities within the five life-cycle phases, there isanother set of activities referred to as &quot;cross life-cycle activities&quot; thatspan or are common to multiple life-cycle phases.andM;The approach of focusing on individual tools to accomplish specificactivities has resulted in a proliferation of unrelated tools andmethodologies that have provided only incremental improvements, none of whichhas been significant enough to effectively reduce the backlog of customerapplications.andP;  Some of the reasons for this follow:andM;* The methdologies and tools to support the life-cycle activities usually donot share data.andM;* A lack of consensus on standards has made it difficult for tools to beintegrated.andM;* Where tools have been integrated into application development systems, thesystems have typically been built on closed architectures with private datainterfaces, making it difficult to add tools or extend existing tools toaccommodate different methodologies or technologies.andM;The management of the application development life-cycle process usuallyrequires that each phase be near completion before the next phase begins.andO;Prototypes are seldom used to provide early views of the product, andrequirements and specifications are passed on paper from product planners todesigners and from designers to coders, often requiring manual interventionbetween phases and activities.andP;  This proliferation of unrelated tools,methodologies, and manual data transformations results in a developmentprocess consisting of a series of discrete steps, with the boundaries of eachstep characterized by a manual or paper transfer from step to step, as shownin Figure 2.andP;  This process is very inefficient and requires intensive use ofpeople and paper.andM;To address the need for significant improvement in the productivity, quality,and manageability of the application development (AD) process, a collectionof offerings called AD/Cycle [TM], [14] was developed at IBM.andP;  Based onSystems Application Architecture [TM] (SAA [TM]) [15] and supported by astaged implementation of integrated tools, data storage facilities, and anopen architecture for interfaces, AD/Cycle follows an application developmentstrategy that is intended to enhance customers' ability to better meet theirdata processing business needs.andP;  The goals of AD/Cycle are to:andM;* Bring the latest application development technology to customers throughIBM- and vendor-supplied toolsandM;* Enable centralized control and management of customer applicationdevelopment dataandM;* Establish an open architecture and a base set of tool services forintegration of application development tools across the life cycleandM;* Complement and extend SAAandM;Conceptually, AD/Cycle can be thought of as a framework for, and a set of,application development tools.andP;  The framework is provided by an AD platformdesigned to support the integration of tools through a consistent userinterface, workstation services, an AD information model, tool services,Repository Services, and Library Services that provide control for definingand sharing application development data.andP;  AD tools will offer solutions forthe application development life cycle.andP;  Over time, it is planned thatAD/Cycle tools will conform to the architecture as is technically appropriatefor the function of each tool.andM;The application development tools can be from several sources: from IBM, fromvendors, and from the customers themselves.andP;  IBM has entered intorelationships with Bachman Information Systems, Index Technology Corporation,and Knowledge Ware, Inc. wherein selected products from these vendors will bemarketed through an IBM complementary marketing program to provide offeringsthat will help to achieve complete life-cycle coverage.andM;This paper discusses requirements for AD/Cycle tool function and the AD/Cycletools strategy that IBM has developed to satisfy these requirements.andP;  It alsodescribes the architecture of the AD/Cycle infrastructure and its interfaces,how it fits into SAA, and the technical constraints that have affected itsdesign.andP;  This paper serves as an introduction to two sets of papers thatfollow in this issue of the IBM Systems Journal.andP;  One set provides moredetailed discussions of some of the architectural componentsandgt; the other setdiscusses specific AD/Cycle tools.andM;Application development tool technologyandM;AD/Cycle will provide the capability for application development to focus onenterprise modeling and analysis and design--that is, toward the front end ofthe application development life cycle.andP;  At the same time, AD/Cycle willcontinue to provide continuous and enhanced tool function across thetradtional application development life-cycle phases through a staged set ofIBM- and vendor-supplied tools.andP;  These tools, while supporting many differenttechnologies, including application generators, traditional third-generationlanguages, and knowledge-based systems, should provide significantimprovments in application development productivity through integration withthe AD platform.andP;  This section highlights parts of the development life cycleto indicate the tool technology direction and some recommended toolsolutions.andM;Enterprise modeling.andP;  When businesses first started using computers, theytypically automated their processes on an application-by-application basis,with each application being a stand-alone entity having its own private setof input and output data files.andP;  As the state of data processing evolved,businesses continued to automate more and more of their processesandgt; however,in many cases, they failed to step back and look at the overall company orenterprise structure to focus on how data are used and how data could beshared by multiple processes within the enterprise.andP;  This lack of focus hasresulted in enterprises having to maintain multiple copies of the same dataand maintain applications whose data underpinnings and process requirementshave grown obscure over the years.andP;  Not only does this practice lead toinconsistent and unreliable values for the same data item used acrossdifferent areas of a business, it also creates a situation where it is almostimpossible to enhance, modify, and maintain existing applications.andM;For the above problem, AD/cycle offers an enterprise modeling approachsupported by tools that will assist in the creation of an enterprise model tobe validated, analyzed, and then used to generate applications.andP;  Enterprisemodeling is a technique that enables business professionals and businessanalysts to define, relate, and validate the data and processes that areused.andP;  As changes occur in the enterprise, the model can be updated orrelated applications can be viewed, and change can be effectively managed.andO;In the AD/Cycle implementation of enterprise modeling, the enterprise modeldata, i.e., data and process requirements, are centrally stored asentity-relationship data by the Repository Manager [TM] (discussed below),thus making that data available for subsequent life-cycle tools.andP;  Thisactivity also provides a permanent record of the process requirements and thedata underpinnings for each application to facilitate future enhancementsneeded to support a growing enterprise.andM;The enterprise modeling method of defining processes also enables prototypingof those processes early in the development life cycle.andP;  Early prototypingenables end-user interfaces and functionality to be evaluated at thebeginning of the life cycle, eliminating much of the rework thatcharacteristically faces developers after code has been developed and anapplication is in an executable state.andP;  Rework at this later stage is manytimes more costly and time-consuming than at the prototype stage.andM;The enterprise modeling information is created by business professionals andanalysts rather than data processing professionals such as programmers andsystems analysts.andP;  These business professionals are the experts in theirrespective processes, e.g., accounts receivable, finance, billing, orderentry, payroll, etc.andP;  This role change in application development providestwo major benefits:andM;* Knowledge of business processes does not have to be transferred to dataprocessing professionals to initiate the application development process.andO;Costs are reduced significantly and errors resulting from insufficientbusiness process knowledge are minimized.andM;* Cycle time for application development can be reduced through the directinitiation of application development and changes.andM;Additionally, assimilation of a process into a sequence of processes thatincludes input, process steps, and output--as in a payroll calculation andcheck statement printer operation--requires significant transformation andautomation from the enterprise model definition steps to productionapplication generation.andP;  Transformations will initially involve discretesteps of function requiring the collective effort of both business and dataprocessing professionalsandgt; however, as the integrated tools base develops,more of the transformation should be replaced by automatic tool function.andM;Figure 3 shows the evolution of programming technology from the use ofmachine language technology when computers were first introduced, to thecurrent leading edge technology incorporating enterprise models.andM;AD/Cycle tools offered by IBM that can be used for defining enterprise modelsand for validating models through prototyping are:andM;* IBM's DevelopMate[TM] that focuses on the definition, refinement, andvalidation of an enterprise model through prototypingandM;* Information Engineering Workbench[R]/Planning Workstation fromKnowledgeWare, Inc., for capturing, modeling, and analyzing data about anorganization and its use of informationandM;* PC PRISM[TM] from Index Technology Corporation for helping organizationsdevelop and analyze enterprise models and other planning models so that theycan better align their business and systems objectivesandM;Additional information on enterprise modeling can be found in Reference 16.andM;Analysis and design.andP;  In the analysis and design phase, business requirementsdefined in enterprise modeling can be used to help develop application designinformationandM;The selection of analysis and design tools is dependent on the designmethodology established by an enterprise.andP;  The AD/Cycle open frameworksupports the integration of analysis and design tools that use currentsoftware engineering principles, modern design methodologies, and commondiagramming techniques.andP;  AD/Cycle tools offered by IBM that can be used foranalysis and design are:andM;* Information Engineering Workbench/Analysis Workstation and DesignWorkstation products from KnowledgeWare, Inc., for refining and analyzingend-user requirements and for logically defining information systems based onthe analysis of end-user requirementsandM;* Excelerator[R] from Index Technology Corporation for developing process anddata models, validating design information, prototyping screens and reports,and generating system documentationandM;* THE BACHMAN Re-Engineering Product Set[TM] from Bachman Information Systemsthat includes tools for advanced data modeling and database designandM;Generators.andP;  The use of a generator is frequently seen as a more productiveway to produce an application.andP;  Applications created by generators may not beas error prone as coding in a procedural language, and the level ofapplication specification is often less detailed.andP;  Whereas IBM's Cross SystemProduct/Application DevElopment (CSP/AD) is the strategic SAA applicationgenerator, it is planned that AD/Cycle evolve to provide more automaticcreation of generator input.andP;  An initial step in this direction is providedby the external source format function of CSP/AD that allows CSP/AD to beused along with other application development tools such as IndexTechnology's Excelerator and KnowledgeWare's Information EngineeringWorkbench/Analysis Workstation and Design Workstation products.andM;See Reference 17 for additional information about CSP/AD.andM;Languages.andP;  Today's application development world has significant financialinvestments in procedural languages, sometimes called third-generationlanguages.andP;  The vast majority of existing customer code has been writtenusing third-generation languages, and recent use of the C programminglanguage indicates the continuing importance of procedural languages fordeveloping sophisticated software.andM;In AD/Cycle, third-generation language products will be enhanced to provideintegrated functions to increase the productivity of the developmentprogrammer.andP;  Increased programmer productivity should be achieved throughintegration of language-sensitive editors, preprocessors, compilers,front-end tools, static and dynamic debuggers, and other support functions.andO;This integrated function should give cohesive edit/Compile/Debug capabilityand will facilitate the integration of code from generators andknowledge-based applications with traditionally produced code.andP;  It is plannedthat information captured from the front-end analysis and design tools, suchas prototypes, code skeletons, data structures, screen definitions, andreport formats, will be accessible by users of tools supporting thethird-generation languages.andM;Most large third-generation development projects rely heavily on librarymanagement systems to control source code versions and synchronize programmeraccess to code.andP;  In AD/Cycle, Library Services will provide the function oflibrary management as well as the function of configuration management thatautomatically keeps track of module interdependences and synchronizescompilations and link-edits when necessary.andM;Integration will extend to the execution environment.andP;  A common run-timeenvironment would streamline calls between programs written in differentlanguages.andP;  With communication among languages, customers will be able totake advantage of the special strengths of each programming language, withouthaving to write function all in one language.andP;  It is also planned thatlanguage debugging and test analysis tools will be integrated with editorsand compilers to provide a consistent context for programmers as they testapplications.andM;This capability will evolve to take full advantage of the productivity of theprogrammable workstation, from program creation through unit testing.andP;  Overtime, it is planned that AD/Cycle will give the development programmer thecapability to edit/compile/debug and unit test applications on theworkstation, thus offering improved productivity and usability.andP;  The SAAlanguages will continue to support system test and execution on the host forworkstation-developed applications.andM;Knowledge-based systems.andP;  Strategic application-enabling tools forknowledge-based systems will participate in the AD/Cycle tools strategy.andO;Many application solutions can be developed with knowledge-based systemsalone, but many can be more effectively developed using a combination ofknowledge-based systems and other approaches such as procedural code.andP;  Thisintent is that developers of procedural and knowledge-based code applicationswill be able to develop entire applications with tools that work consistentlyand that provide for seamless tool-to-tool transition.andP;  (IBM's The IntegratedREasoning Shell, Expers System Environment, and Knowledge Tool[TM] areapplication-enabling tools for knowledge-based systems.)andM;REference 18 describes the role knowledge-based systems will play inAD/Cycle.andM;Testing and maintenance.andP;  Testing new applications and maintaining existingones are key activities in the development life cycle, along with the processmanagement facilities to manage and control these activities.andP;  It is our planthat new tools for analysis, creation, management, and coverage of test datawill be provided as part of a comprehensive verification environment.andP;  IBMwill provide aids such as the COBOL Structuring Facility to help usersunderstand and maintain existing applications.andP;  Additional integrated toolswill help programmers assess the impact of making changes to existingsystems, which is the most time-consuming part of application maintenance.andM;Support for program testing and debugging is aided by IBM's INSPECT for C/370and PL/I.andP;  INSPECT is a single product that allows application developers tocontrol the execution of C and PL/I programs, inspecting and modifyingvariables as they execute.andP;  INSPECT runs in either an interactive mode withmultiple windows and extensive on-line help or it will operate in a batchmode.andP;  Over time, it is planned that program debugging will be extended tosupport all of the SAA languages from a single source-level debugging tool.andM;IBM also provides the Software Analysis Test Tool for test coverage analysisof PL/I and COBOL programs, and the Workstation Interactive Test Tool forregression testing support of interactive applications in SAA environments.andM;Cross life-cycle tools.andP;  Whereas some application development tools providefunctional support for a single phase of the application development lifecycle, management of projects, the process itself, documentation, and changes(impact analysis) extend across all phases.andM;Process management (discussed in Reference 19) is one of the key functionsprovided in AD/Cycle.andP;  This function, implemented as an AD/Cycle tool itself,is based on the IBM product, Application Development Project Support.andP;  Theproduct enables the user to define a model of the application developmentprocess, to save that model, and then to guide the process by execution ofthe activities defined in the model.andP;  Control over the applicationdevelopment process is expected to improve the quality, as well as decreasethe time required for development.andM;The direction of AD/Cycle is to also provide the ability to identify andlocate components across the life cycle (for example, enterprise models,designs, programs, etc.) that can or must be integrated in new applicationdefinitions.andM;AD/Cycle architectureandM;The AD/Cycle architecture has been defined as an infrastructure of servicesand interfaces to enable integration of application development tools acrossthe life cycle.andP;  Figure 4 illustrates the layered architecture of AD/Cycle.andO;The technical objectives, requirements, and constraints that influenced thisarchitecture are discussed first.andP;  Following this discussion each of thearchitectural components is described.andM;AD/Cycle technical objectives.andP;  Meeting the objective of accelerating andimproving the delivery of application systems requires not only a fullcomplement of AD tools that apply existing and emerging developmenttechniques and methodologies to activities across the development life cycleandgt;it also requires a supporting architecture that delivers and fully utilizesboth well-established and evolving technologies and facilities within theoperating systems and their application-enabling components.andP;  The technicalobjectives that influenced the design of the AD/Cycle architecture are nowdiscussed.andP;  Many of these objectives and architectural fundamentals areidentified in Reference 9, which is a description of the internal IBMapplication development architecture that evolved into AD/Cycle.andM;A major objective for AD/Cycle is to provide the user or tool developer withthe capability to incrementally extend functional capabilities and to allowselective substitution of existing functions.andP;  This objective dictated thatthe architecture would clearly define interfaces to be published so thatothers could become part of our solution.andP;  The Repository Interface providesthe functional interface to the Repository Manager, and the AD informationmodel provides the model of shared data so that an AD tool conforming to thearchitecture can work in concert with other conforming AD tools.andM;The architecture must define the central control facility for enterpriseadministration.andP;  The scope of such a facility is necessarily larger than justapplication development.andP;  The Repository Services, which uses the recovery,integrity, and data-sharing capabilities of an underlying relational databasemanagement system (DBMS), and the Library Services, which controls storage ofmultiple versions of flat file data, provide this facility for data used byAD/Cycle tools.andM;Aset of generic and reusable AD services that will be used by AD/Cycle toolsand developers is required in order to ensure consistency in AD toolimplementation and semantics, and to avoid redundant programming.andP;  The ADtool services and AD workstation services provide this capability.andM;The objective of having consistency and integration at the end-user interfaceis a major factor in the structure of the AD/Cycle architecture.andP;  It isnecessary to give a common &quot;look and feel&quot; to the various AD tools.andO;Consistency is especially important because AD tools from various sourceswill become part of the solution.andP;  Initially, AD/Cycle user interfaceconsistency is based on the use of PResentation Manager[TM] of OperatingSystem/2[TM] Extended Edition (OS/2[R] EE)--the operating system on aworkstation--and the graphical model guidelines of the Common User Access(CUA).andP;  [20]  This is the base from which the user interface will evolve intoa common workplace model.andP;  This user interface component will be extendableso as to make tools accessible in a consistent way by using work management.andO;[19]  A significant prototyping activity developed the user interface [21]and ensured that the interface would be well-designed from the human factorspoint of view.andM;Technical requirements and constraints.andP;  In addition to the major objectivesdiscussed above, several other technical requirements and constraintsaffected the design of the AD/Cycle architecture.andM;Cooperative SAA development environment.andP;  A requirement of the architectureof AD/Cycle was to merge the advanced graphical presentation and interactivecharacteristics of the intelligent workstation with the ability of mainframefacilities that centrally control and share application developmentresources.andP;  The Personal System/2[R] (PS/2[R]), with its supporting softwarein PS/2 EE, provides the application developer with an interactive, graphicaluser interface and provides AD tools with a multiwindowed, concurrentactivity display needed to integrate multiple AD tool functions at theend-user level.andP;  The Repository Services and the Library Services willprovide the ability to centrally control, administer share, and recoverapplication development data across the enterprise.andP;  Additionally, mergingthe workstation and host capabilities permits optimizing the activities of anindividual developer (such as editing a single source program) and theactivities of an administrator (such as building a complete applicationsystem comprised of numerous parts).andM;To support a cooperative environment between the PS/2 workstation and theApplication System/400[R] (AS/400[TM]) or System/370 hosts, the AD/Cyclearchitecture permits optimum placement of data and function between theprocessors.andP;  In other words, the architecture has the ability to routefunction requests to data location, bring data to the function location, androute single data requests from the workstation to the host.andP;  Additionally,these facilities are designed so that the location of function and data, onworkstation or host, will be transparent to the end user.andM;It was required that the AD/Cycle architecture specify the applicationdevelopment solution for SAA.andP;  This requirement led to a cooperativestructure with a PS/2 workstation running OS/2 EE as a front end and an SAAhost--either the Multiple Virtual Storage/Time Sharing Option-Extensions(MVS/TSO-E) or Virtual Machine/Conversational Monitor System (VM/CMS)operating system on the System/370 hardware architecture, or OperatingSystem/400[TM] (OS/400[TM]) on the AS/400 hardware architecture--as a backend.andM;Multiple data storage facilities.andP;  To support shared, centrally controlleddata, the AD/Cycle architecture was required to support applicationdevelopment data, within a single framework, with a wide range of storagerequirements.andP;  Data captured at the front end of the development cycle, suchas enterprise or design models, can be most naturally structured intoentities and relationships between the data elements.andP;  Much of the data atthe back end of the development cycle, such as source programs, are typicallystored in flat file forms.andP;  The AD/Cycle architecture supports both storageforms with control information and relationships between the data beingmaintained with the entity-relationship model.andM;Data integrity and library management functions.andP;  The AD/Cycle architecturewas required to merge the data integrity and recovery requirementstraditionally supported by dtabase management systems with the version,configuration, and build facilities traditionally offered by library controlsystems.andP;  The AD/Cycle data handling architecture addresses theserequirements with a mixture of protocols that will be provided by theunderlying relational database managers, the Repository Services, and theLibrary Services.andP;  Over time, it is planned to have enhancements defined anddelivered to improve the level of consistency among protocols regardless ofthe storage form of the data.andM;Software technology.andP;  The AD/Cycle architecture was itself required to use,as well as allow AD tools to fully utilize, currently existing softwaretechnology so as to bring it to bear on the problem of improving bothproductivity and quality within application development.andP;  The existingtechnologies thus supported include advances in graphical displays,interactive techniques, connectivity and networking capabilities, databasemanagement and control facilities, configuration and library controlfunctions, and mainframe capacity and performance.andP;  In addition to thesetechnologies, it also implements other important technologies such as theentity-relationship (ER) model [22] and the object-oriented paradigm forpersistent data.andM;Technology extensions.andP;  Finally, the AD/Cycle architecture was required toprovide an infrastructure that is extendable and able to accommodate advancesin technology within the AD/Cycle structure itself, within the underlying SAAenterprise system, and within the AD tools and methodologies that operatewithin this environment.andP;  AD/Cycle architecture is required, for example, tobe extendable to a local area network (LAN) server and fully distributedconfigurations, incorporate artificial intelligence technology, and enablethe use of extensions to SAA.andM;Components of the AD/Cycle architectureandM;Each component of the AD/Cycle architecture plays a role in enabling toolintegration.andP;  The totality of the base consisting of the user interface,workstation services, AD information model, tool services, and RepositoryServices is referred to as the AD platform.andP;  AD tools, which supply specificAD function, are built using the services of this platform.andP;  The followingdiscussion parallels Figure 4 from the top to the bottom, giving adescriptive overview of the AD platform and AD tools and relating their rolesin the AD/Cycle architecture.andP;  More detailed descriptions of some of thesecomponents are found in other papers in this issue to which the reader isreferred.andM;User interace.andP;  The AD/Cycle user interace implements the CUA rules andguidelines and will evolve to the workplace model [20] as the consistentpoint of display integration for all AD tools and support functions needed byan application developer using the workstation.andP;  CUA, complemented by workmanagement facilities discussed below, will result in these independentlydeveloped AD tools presenting a reasonably consistent interface toapplication developers.andM;More information on the use of CUA in AD/Cycle can be found in Reference 21.andM;Workstation services.andP;  Code running on the workstation requires theavailability of services for displaying information on the screen and forproviding access to application development data.andP;  The workstation servicescomponent uses the SAA Presentation Manager [23] for screen display and a setof user interface services [21] that enhances tool builder productivity inbuilding displays and consistent display formats.andP;  Workstation services alsoprovides OS/2 services that allow Repository Manager data and library data tobe accessed by workstation-resident AD tools.andP;  They materialize the data onthe workstation either as a flat file or in entity-relationship structures.andO;Workstation services also allows routing function invocation to a hostfunction and direct Repository Manager access by workstation-resident ADtools.andM;Work management.andP;  Work management is the facility in the AD/Cyclearchitecture that provides for consistency of AD tool invocation for allAD/Cycle tools.andP;  This facility is a common one that allows the user to listpossible activities and to select one on which to work.andP;  This consistent taskinvocation capability includes how lists are displayed, selected from,manipulated, updated, and refreshed.andM;In a given enterprise, the methodology preferred to develop applications maybe encoded using a process manager.andP;  Such a methodology will embrace apreferred set of AD tools for application development and a specific sequenceof process steps.andP;  The process management facilities of work management canbe used to encode the methodology to accomplish AD tool initiationautomatically.andP;  The use of process management within application developmentis given in Reference 9.andM;Architecturally, work management is classified within AD tools.andP;  It is in thetool category known as cross life-cycle tools, since it is used across theentire AD life cycle.andP;  However, it has a special architectural role since itcontrols the invocation of the other tools and has thus been singled outhere.andM;More information about work management can be found in Reference 19.andM;AD tools.andP;  On the AD platform base, IBM and IBM's Business Partners aredeveloping AD tools that either are applicable across all of the developmenttasks or are specific to a single activity.andP;  In addition, IBM encouragesvendors to enable their AD/Cycle tools to operate with this architecture tocomplement the IBM offerings.andP;  Ad tool function can be delivered as acombination of OS/2 programs, objects, Repository Manager functions, and hostprograms.andP;  These tools, and the categories into which they have beenclassified in AD/Cycle, were discussed above.andM;Tool services.andP;  Tool services is common function that multiple tools requireregardless of whether they execute on the host, the workstation, orcooperatively.andP;  Examples are profile and error message services.andP;  Toolservices can be implemented as a combination of OS/2 programs, objects,Repository Manager functions, and host programs.andP;  Definition and deliverywill be staged over time.andM;Repository Services and Library Services.andP;  The Repository Services componentprovides centralized, shared manaement of all application development data.andO;It is the point-of-control for defining, administering, and controllingaccess to AD data shared by users through multiple workstations.andP;  It is builton top of the SAA relational DBMS, which provides facilities for safe, sharedaccess to all of the data that define applications in the enterprise.andP;  Itextends the SAA Common Programming Interface (CPI) by means of the SAARepository Interface.andP;  On MVS, Repository Manager/MVS[TM] is the product thatimplements Repository Services.andM;Repository Services presents an entity-relationship (ER) model of these data.andO;The ER services allows the specification of relationships among thesedefinitional data, constraints on the data and on the relationships, and viewthat different programs may have of these data.andM;For example, an entity called PROGRAM and another called PROGRAMMER can bedefined, with a set of attributes on each.andP;  A relationship called OWNSbetween PROGRAMMER and PROGRAM (and an inverse relationship called OWNED--BY)can be defined.andP;  It can be specified that a PROGRAM may be owned by only onePROGRAMMER, but that it must always have an owner.andP;  (So, if an attempt ismade to delete a PROGRAMMER, it is prevented if either he or she owns anyPROGRAMS or these PROGRAMS are deleted.)andP;  It can be specified that if anattempt is made to update the SALARY attribute of PROGRAMMER so that itexceeds a specified amount, a message is to be sent, and an authority chekcis to be made.andP;  A view available to a set of AD tools that does not includethe SALARY attribute can be defined.andM;Some uses of the Repository Services require manipulation of many entitiesand relationships.andP;  Because of this, a need for a higher-level interface toAD/Cycle data has been identified.andP;  To address these problems, the RepositoryServices has provided object capability whereby a set of programs, calledmethods, can be registered in the Repository Manager to present a high-levelabstraction of the data to the AD tools.andP;  If objects are used, the AD toolcode need not see the data model directly, but rather see a set of objecttypes and the method programming interfaces for these types.andP;  Note thatobjects can be used by tool services as well as by individual tools that wantthe benefits of the higher level of abstraction provided by objects.andM;More information about the Repository Services component is found inReference 24.andM;AD/Cycle has populated the Repository Manager with a set of entities,relationships, and constraint definitions that represent the data that may beshared between AD tools at various stages in the development life cycle.andP;  Astandard model specifying, for example, the representation of COBOL datastructures and Information Management System (IMS) database definitionsnecessary in building an application has been created.andP;  This model ofAD/Cycle data that may be shared is the AD information model.andP;  As enterprisemodeling, design, generator, and editor AD tools populate the RepositoryManager with these elements, the tool data from each tool will be integratedwith data from other tools.andM;It is planned to have the interfaces to the Repository Services available toAD tools whether they execute on the host or on an attached workstation.andM;Library Services provides support for versioning and automatic applicationbuild.andP;  It allows an installation to set up a project database in which datareside in flat file data sets.andP;  The project database is organized intogroups, each group being subordinate to the one above it.andP;  This form of dataorganization is known as a hierarchy.andP;  Hierarchies are allocated from bottomto top, each level being a different version of the application.andP;  Thus, whendata is referenced, the lower positions in the hierarchy take precedence overmembers at a higher position.andP;  Figure 5 shows an example of a libraryhierarchy, with the root PRODUCTION.andP;  When a user wants to edit a file thatis not currently at the USER level of the hierarchy, the file is brought downto the USER level and locked at the PRODUCTION level.andP;  When the USER levelhas completed its changes, it is moved back up tree, one level at a time(e.g., USER to TEST, TEST to PRODUCTION).andP;  The upward process is calledpromote.andP;  Library functions allow the user to browse, create, update, delete,compile, link, build, promote up the hierarchy, and report on data stored inthe database of a project.andP;  The build functions, sometimes calledconfiguration management, ensures project integrity by verifying that allcomponents are present and complete.andP;  It keeps track of data setinterdependences and will automatically perform necessary compilations andlinks so that out-of-date components are replaced with up-to-date ones.andM;On MVS, Library Services is implemented by the Software Configuration andLibrary Manager (SCLM), [25] which is a component of the Interactive SystemProductivity Facility/Program Development Facility (ISPF/PDF) Version 3.andM;Over time, it is planned that AD/Cycle define and deliver additional supportto enhance the integration of tool services, Repository Services, and LibraryServices with the goal of providing consistent versioning across all AD/Cycledata, maintaining relationships between modeled and file data, and ensuring asingle point of control for all operations.andM;The AD information model: the data architecture of AD/Cycle.andP;  One key to bothopening the AD/Cycle architecture to other vendors' and customers' functionsand providing an integrated solution is delivering and publishing consistentdata specifications used across the life cycle.andP;  These data specification cancapture the structure of data used by applications and the applicationspecification itself.andP;  aS discussed above, the AD/Cycle architecture definesthe data specifications that will be populated and used by AD/Cycle toolsthroughout the development of applications.andP;  It contains definitions of theentities, attributes, and relationships of the Repository Manager data.andM;The data architecture is also characterized by three points of dataintegration:andM;1.andP;  An enterprise model, which represents the point of data integration afteran enterprise-modeling AD tool has completed its task.andP;  A good industryconsensus on this model has been obtained, and its implementation and use areplanned by various enterprise-modeling tools from IBM and its BusinessPartners.andM;2.andP;  A design model, which represents the point of data integration after adesign AD tool has completed its task.andP;  Initially, there is no industryagreement on a common design modelandgt; so, although it is part of thearchitecture, it will not be standardized in early versions of AD/Cycle.andM;3.andP;  A technology model, which represents the point of data integration aftera &quot;produce&quot; AD tool has completed execution.andP;  (&quot;Produce&quot; AD tools consist ofsuch things as compiler, generator, and knowledge-based system AD tools,i.e., AD tools that &quot;produce&quot; user application code.)andP;  The technology modelreflects the types of tools that use it, and thus it is expected to grow overtime as new tools are added.andM;It is planned to have these points of integration met by all applicableAD/Cycle tools in an AD/Cycle system, thus allowing data to be shared amongAD tools from many different sources, both within and outside of IBM.andP;  Theyare used regardless of the Methodoogy being followed or the style of userinteraction being offered.andM;More information about the AD data architecture can be found in Reference 26.andM;AD/Cycle complements and extends SAAandM;AD/Cycle is based on IBM's Systems Application Architecture and will evolveusing the same elements.andP;  The functions provided by AD/Cycle will beSAA-conforming applications and will support the range of SAA environments.andO;An example is the incorporation into AD/Cycle of the graphical model of theSAA Common User Access support [19] provided by the OS/2 Extended EditionPresentation Manager for use by the AD/Cycle application development toolsand tool services.andM;With AD/Cycle based on SAA, the skills learned in one implementation ofAD/Cycle will be transferable to the other SAA environments.andP;  Training costsand migration costs to move to a new application development environment, toadd tools to an existing one, or to change methodologies will besubstantially reduced.andM;An example of SAA extension introduced by AD/Cycle is the programminginterface to Repository Manager, defined as a new element of the SAA CommonProgramming Interface (CPI).andP;  This component of the SAA CPI will be importantto AD/Cycle by providing for controlled communications and sharing of databetween the tools.andM;AD/Cycle utilizes an evolutionary strategy.andP;  It is designed to build uponexisting IBM and vendor products in a staged manner, allowing users todevelop their own timetable for moving into new application developmenttechnologies and methodologies.andP;  The AD/Cycle implementation is based onenhancements to existing application development tools and on theintroduction of new tools by IBM, customers, and software vendors.andP;  Existingcapabilities will be enhanced and new functions will be added in stages inthe different SAA environments.andP;  This evolution will result in consistent,integrated application development tools and services across the SAAenvironments.andM;Application development under AD/CycleandM;The key difference in application development as it emerges under AD/Cycle(portrayed in Figure 6), as opposed to application development today (SeeFigure 2), is in the following four areas unique to AD/Cycle:andM;1.andP;  AD tools share data through common use of the AD information model.andM;2.andP;  Tool-to-tool user transition will be simplified as a result of havingAD/Cycle tools conform to the CUA guidelines and the standards associatedwith a tool developer's guide to be published for application development.andM;3.andP;  Reduction in the necessity for unique skills is achieved in theapplication development process by enabling application development throughrefinements of the enterprise model.andP;  The analysis and refinement tools canbe invoked by the same individual who creates the application model, and thisindividual is assisted by automated transformation operations that create theexecutable application from the refined application design.andP;  Thesetransformations occur by using tools such as application generators orcompilers.andM;4.andP;  The open architecture of the AD platform provides a mechanism throughservices and standard definitions to enable IBM, customers, and tool vendorsto add and extend the capability of the application development process.andP;  Forexample, new technology emerging in user interface facilities can be easilyenhanced through ongoing tool additions to this foundation.andM;Figure 7 shows the AD/Cycle application development function model thatprovides the foundation for an integrated and efficient applicationdevelopment process.andP;  At the top of the figure, SAA is shown as an umbrellaunder which AD/Cycle serves as an SAA application and the IBM SAA solutionfor application development.andP;  THe AD/Cycle tools encompassing the applicationdevelopment life-cycle model will provide support for the entire applicationdevelopment life cycle.andP;  Then be provided by IBM, customer-written, orvendor-supplied because of the openness of AD/Cycle established by the ADinformation model.andP;  Supporting the life-cycle tools at the bottom of thefigure, the AD platform provides access to the Repository Manager forapplication development data, an interface to the Repository Manager for theaccess and manupulation of the data, and an information model that definesthe structure and format of the data.andP;  The platform also provides aCUA-conforming user interface and a tool invocation and execution environmentlocated at the workstation.andP;  This function model defines the key tool areasrequired for full life-cycle support of application development.andP;  It alsoincludes the key AD platform services that provide the base for all tools andensures their integration and sharing of appropriate application developmentdata, processes, and parts.andM;SummaryandM;The application development process under AD/Cycle is markedly different fromcurrent application development processes.andP;  Tool integration, both data andfunctional, along with the relationships established between parts ofapplications and the successive stages of application refinement, combine toenhance and simplify application construction and control.andP;  Figure 8 portraysthis simplified application development environment.andP;  (Contrast Figure 8 withFigure 2, showing the current application development process as aninefficient people- and paper-intensive process characterized by manualintervention and paper transfers of information from step to step.)andO;Integration and efficiency are supported by AD/Cyle, which provides multiplemethodologies and enables tools to share data throughout the life cycle, andby the centralized Repository Services for the control and management ofapplication development data.andM;Although the AD/Cyle tools strategy and architecture has focused on toolintegration and tool technology, the overall net effect is a strategy thatwill eliminate the application development inhibitors to customer dataprocessing and overall customer growth.andP;  Tool builders are able to focus moreon tool specifics without having to be concerned about implementingunderlying data facilities.andP;  Thus they can provide a wealth of high-quality,integrated tools for tool users.andP;  Tool users in turn are able to move easilyfrom tool to tool and are assured of a high degree of integration and datasharing.andP;  Application data can be defined and entered once and can be easilyshared and reused at different steps along the development process.andO;Applications can now be defined at the source of the requirements to improvedresponsiveness to end-user requirementsandgt; they can be evaluated earlier,reducing costly and time-consuming rework at later stages.andP;  As informationconcerning the underlying processing and data requirements of an applicationare stored in the Repository Manager, applications are able to grow ascustomers' businesses grow.andM;AcknowledgmentsandM;The AD/Cycle strategy and architecture summarized by this paper represent thejoint work of a team of people throughout IBM.andP;  The authors would like toacknowledge the work done by Dave Harvey and his staff in Cary who workedwith the Santa Teresa and Toronto Programming Systems developmentlaboratories in the formulation of the AD/Cycle tools strategy.andP;  We wouldalso like to acknowledge the work on the AD/Cycle architecture done in SantaTeresa in Bob Costain's and Steve Uhlir's departments working with the Caryand Toronto development laboratories, with internal tools efforts, and withIBM's Business Partners.andP;  We also wish to acknowledge the leadership of JimArcher, the IBM director of integrated development environments in SantaTeresa, for his overall AD/Cycle product and strategy coordination.andM;AD/Cycle, Systems Application Architecture, SAA, Repository Manager,DevelopMate, KnowledgeTool, Presentation Manager, Operating System/2, AS/400,Operating System/400, OS/400, and Repository Manager/MVS are trademarks, andOS/2, Personal System/2, PS/2, and Application System/400 are regiteredtrademarks, of International Business Machines Corporation.andM;PC PRISM is a trademark, and Excelerator is a registered trademark, of IndexTechnology Corporation.andM;BACHMAN Re-Engineering Product Set is a trademark of Bachman InformationSystems.andM;Information Engineering Workbench is a registered trademark of KnowledgeWare,Inc.andM;Cited references and notesandM;[1.] Application Development Productivity Strategy, worldwide IBM user groupmade up of Australasian SHARE/GUIDE, GUIDE International (U.S.A.), G.U.I.D.E.andO;(Europe), SHARE European Association (SEAS), and SHARE (U.S.A.) ApplicationDevelopment Joint Project (ADJP) (May 1989).andM;[2.] Application Development Productivity, A GUIDE Top Concern, GUIDE(December 1986).andM;[3.] MP-1409 Integration of Development Tools Project Strategy Paper, GUIDE,Montreal, Canada (November 1986).andM;[4.] SHARE Interactive Systems Task Force Report, SSD #223, SHARE (1983).andM;[5.] CASE87, a survey conducted in August 1987 and published by SoftwareNews' Sentry Research Division.andM;[6.] J. Martin, Application Development Without Programmers, Prentice-Hall,Inc., Englewood Cliffs, NJ (1982).andM;[7.] W. S. Humphrey, &quot;The IBM Large-Systems Software Development Process:Objectives and Direction,&quot; IBM Systems Journal 24, No.andP;  2, 76-78 (1985).andM;[8.] R. A. Radice, J. T. Harding, P. E. Munnis, and R. W. Phillips, &quot;AProgramming Process Study,&quot; IBM Systems Journal 24, No.andP;  2, 91-101 (1985).andM;[9.] G. F. Hoffnagle and W. E. Beregi, &quot;Automating the Software DevelopmentProcess,&quot; IBM Systems Journal 24, No.andP;  2, 102-120 (1985).andM;[10.] &quot;Programming Aids,&quot; Section D80, Datapro Directory of Software 15, No.andO;11, D80-000-001-D80-900-005, Datapro Research, McGraw-Hill InformationServices Company, Delran, NJ (November 1989).andM;[11.] ICP Software Directory, Mainframe andamp; Minicomputer Series--Systems andUtilities, 62nd Edition, International Computer Programs, ICP Incorporated(Autumn 1989).andM;[12.] T. Teitelbaum and T. Reps, &quot;The Cornell Program Synthesizer: ASyntax-Directed Programming Environment,&quot; Communications of the ACM 24, No.andO;9, 563-573 (1981).andM;[13.] D. E. McConnell, An Investigation of the State of the Art Trends in theLife Support of Complex Embedded Computer Systems, Naval Weapons Center,Dahlgren, VA (September 1979).andM;[14.] AD/Cycle: Application Development for the SAA Environments, ProgrammingAnnouncement 289-456, IBM US Marketing andamp; Services (19 September 1989)andgt;available through IBM branch offices.andM;[15.] Systems Application Architecture: An Overview, GC26-4341, IBMCorporationandgt; available through IBM branch offices.andM;[16.] K. P. Hein, &quot;DevelopMate: A New Paradigm for Information SystemEnabling,&quot; IBM Systems Journal 29, No.andP;  2, 250-264 (1990, this issue).andM;[17.] M. E. Dewell, &quot;Cross System Product Application Generator: ApplicationDesign,&quot; IBM Systems Journal 29, No.andP;  2, 265-273 (1990, this issue).andM;[18.] D. M. Hembry, &quot;Knowledge-Based Systems in the AD/Cycle Environment,&quot;IBM Systems Journal 29, No.andP;  2, 274-286 (1990, this issue).andM;[19.] G. Chroust, H. Goldmann, and O. Gschwandtner, &quot;The Role of workManagement in Application Development,&quot; IBM Systems Journal 29, No.andP;  2,189-208 (1990, this issue).andM;[20.] Systems Application Architecture, Common User Access--AdvancedInterface Design Guide, SC26-4582, IBM Corporationandgt; available through IBMbranch offices.andM;[21.] J. M. Artim, J. M. Hary, and F. J. Spickhoff, &quot;User Interface Servicesin AD/Cycle,&quot; IBM Systems Journal 29, No.andP;  2, 236-249 (1990, this issue).andM;[22.] P. P. S. Chen, &quot;The Entity-Relationship Model--Toward a Unified View ofData,&quot; ACM Transactions on Database Systems 1, No.andP;  1, 9-36 (March 1976).andM;[23.] Systems Application Architecture, Common Programming InterfacePresentation Reference, SC26-4359, IBM Corporationandgt; available through IBMbranch offices.andM;[24.] J. M. Sagawa, &quot;Repository Manager Technology,&quot; IBM Systems Journal 29,No.andP;  2, 209-227 (1990, this issue).andM;[25.] Interactive System Productivity Facility/Program Development Facility(ISPF/PDF) Software Configuration and Library Manager (SCLM) Guide andReference, Version 3 for MVS, SC34-4235, IBM Corporationandgt; available throughIBM branch offices.andM;[26.] R. W. Matthews and W. C. McGee, &quot;Data Modeling for SoftwareDevelopment,&quot; IBM Systems Journal 29, No.andP;  2, 228-235 (1990, this issue).andM;General referencesandM;D.andP;  R. Barstow, H. E. Shrobe, and E. Sandewall, Editors, InteractiveProgramming Environments, McGraw-Hill Book Co., Inc., New York (1984).andM;Common APSE Interface Set (CAIS), Proposed Military Standard, Version 1.3,Report AD-A134825/9, Office of the Secretary of Defense, Ada Joint ProgramOffice, Washington, DC (August 1984).andM;C.andP;  Davis, et al., Editors, Entity-Relationship Approach to SoftwareEngineering, North Holland Publishers, Amsterdam (1983).andM;Proceedings of a Conference on Language Issues in Programming Environments,Seattle, WA, June 1985, ACM SIGPLAN Notices 20, No.andP;  7 (July 1985).andM;Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium onPractical Software Development Environments, Pittsburgh, PA, April 1984, ACMSIGPLAN Notices 19, No.andP;  3 (May 1984).andM;Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium onPractical Software Development Environments, Palo Alto, CA, December 1986,ACM SIGPLAN Notices 22, No.andP;  1 (January 1987).andM;Proceedings of the ACM SIGSOFT/SIGPLAN Software Engineering Symposium onPractical Software Development Environments, Boston, MA, November 1988, ACMSIGPLAN Notices 24, No.andP;  2 (February 1989) and SIGSOFT Software EngineeringNotes 13, No.andP;  5 (November 1988).andM;Systems Application Architecture: AD/Cycle Concepts, GC26-4531, IBMCorporationandgt; available through IBM branch offices.andM;Vincent J. Mercurio  IBM Programming Systems, P.O. Box 60000, Cary, NorthCarolina 27512-9968.andP;  Mr. Mercurio is currently an advisory planner in theAD/Cycle systems planning and architecture department in the applicationdevelopment products business area at the Programming Systems DevelopmentLaboratory, Cary.andP;  Since joining IBM in 1970, he has been involved in thedevelopment of Multiple Virtual Storage in Poughkeepsie, New York, storesystems and point-of-sale control programs in Raleigh, North Carolina, andthe Realtime Programming System and Event Driven Executive Series/1 operatingsystems in Boca Raton, Florida.andP;  In addition to his involvement in systemsdevelopment, Mr. Mercurio has also worked in telecommunications marketanalysis and in product assurance as the product administrator forapplication development tools.andP;  Mr. Mercurio obtained a B.S.andP;  degree inmathematics from Ohio State University and an M.S.andP;  degree in operationsresearch from Union College.andM;Barbara F. Meyers  IBM Programming Systems, Santa Teresa Laboratory, P.O. Box49023, San Jose, California 95161-9023.andP;  Dr. Meyers was educated at theUniversity of California, Los Angeles, obtaining her Bachelors, Masters, andPh.D.andP;  degrees in computer science in 1969, 1970, and 1975, respectively.andO;She joined IBM in 1975 as a performance analyst and worked on the performanceof disks and control units, databases, transaction management, and datamanagement.andP;  In 1980, she started and managed a performance group for theprogramming language area at the Santa Teresa Laboratory of IBM's GeneralProducts Division.andP;  Dr. Meyers has held technical staff positions in theprogramming language and application development area in the Santa TeresaLaboratory, with responsibility for helping to determine strategy, plans, andadvanced technology directions in these areas.andP;  In her current position assenior programmer, she is a member of the AD/Cycle architecture department.andM;Al M. Nisbet  IBM Programming Systems, P.O. Box 60000, Cary, North Carolina27512-9968.andP;  Mr. Nisbet is currently manager of application developmentproducts--systems planning and architecture at the Programming SystemsDevelopment Laboratory in Cary, involved in AD/Cycle plan and architecture.andO;Mr. Nisbet joined IBM in 1964 in Chicago where he worked in program fieldsupport.andP;  He then moved to Raleigh to participate in research and developmentfor many software support programs as programmer, planner, planning manager,and development manager.andP;  Some of the systems and products he supportedinclude the Telecommunications Test Center, the Retain System, and the BranchOffice Support System.andP;  He was development manager for IBM's Cross SystemProduct and ISPF/PDF.andM;George Radin  IBM Programming Systems, Santa Teresa Laboratory, P.O. Box49023, San Jose, California 95161-9023.andP;  Mr. Radin, an IBM Fellow, hasMasters degrees in both mathematics and English literature from ColumbiaUniversity.andP;  He joined IBM in 1963.andP;  Mr. Radin has held several key technicalpositions throughout his career including: leader of the PL/I languagedefinition, member of the design team of both the OS/360 and TSS operatingsystems, systems design and architecture manager in the former SystemsDevelopment Division, member of the IBM Corporate Technical Committee,Director of Architecture in the System Products Division, and manager ofseveral projects in IBM Research (including the 801 minicomputer projectwhich defined IBM's RISC architecture).andP;  He is currently Chief Architect ofthe AD/Cycle project in Programming Systems at the Santa Teresa Laboratory.andO;</TEXT></DOC>