<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF107-975-832  </DOCNO><DOCID>07 975 832.andM;</DOCID><JOURNAL>Communications of the ACM  Dec 1989 v32 n12 p1426(13)* Full Text COPYRIGHT Association for Computing Machinery 1989.andM;</JOURNAL><TITLE>Lessons learned from modeling the dynamics of softwaredevelopment. (management of software projects) (technical)</TITLE><AUTHOR>Abdel-Hamid, Tarek K.; Madnick, Stuart E.andM;</AUTHOR><SUMMARY>A model for the study of software-development management isdiscussed.andP;  Many attempts have been made to apply scientificdiscipline to the software-production process; structuredprogramming, formal verification, and diagnostic compilers areamong the results of these efforts.andP;  Software project managementis highly complex, but can be described in terms of a feedbackloop.andP;  Applying integrative system dynamics to softwaredevelopment produces an effective model for support of managementdecision making.andP;  Possible future directions for softwaremanagement research include extending the feedback-loop modelingapproach to investigate development organizations andinvestigating the usefulness of incorporating AI-based modulesinto the model.andM;</SUMMARY><DESCRIPT>Topic:     Project ManagementSoftware EngineeringProgramming ManagementManagement ScienceProgram TestingDebugging.andO;Feature:   illustrationchart.andO;Caption:   A model of software project management. (chart)Model structure. (chart)Reported percentage of work completed. (chart)andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>Lessons Learned from Modeling the Dynamics of Software Development Theimpressive improvements that are continuously being made in thecost-effectiveness of computer hardware are causing an enormous expansion inthe number of applications for which computing is becoming a feasible andeconomical solution.andP;  This, in turn, is placing greater and greater demandsfor the development and operation of computer software systems.andP;  Aconservative estimate indicates a hundredfold increase in the demand forsoftware in the last two decades [32].andM;The growth of the software industry has not, however, been painless.andP;  Therecord shows that the development of software has been marked by costoverruns, late deliveries, poor reliability, and users' dissatisfaction [16,34, 41].andM;In an effort to bring discipline to the development of software systems,attempts have been made since the early 1970s to apply the rigors of scienceand engineering to the software production process.andP;  This led to significantadvances in the technology of software production (e.g., structuredprogramming, structured design, formal verification, language design for morereliable coding, diagnostic compilers).andM;The managerial aspects of software development, on the other hand, haveattracted much less attention from the research community [51].andP;  Cooper [17]provides an insightful explanation for the reasons why:andM;Perhaps this is so because computer scientists believe that management per seis not their business, and the management professionals assume that it is thecomputer scientists' responsibility.andM;This &quot;deficiency&quot; in the field's research repertoire may account for thepersistence of the difficulties in producing software systems.andP;  A chiefconcern expressed is that, as of yet, we still lack of a fundamentalunderstanding of the software development process.andP;  Without such anunderstanding the possibility or likelihood of any significant gains on themanagerial front is questionable [13, 30].andM;This article reports on a stream of research designed to address theseconcerns.andP;  Specifically, our goal is to develop a comprehensive model of thedynamics of software development that enhances our understanding of, providesinsight into, and makes predictions about the process by which softwaredevelopment is managed.andP;  The following examples illustrate some of thecritical management decisions that have been addressed in this researcheffort:andM;1.andP;  A project is behind schedule.andP;  Possible management actions include:revise completion date; hold to planned completion date, but hire more staff;hold to planned completion date, but work current staff overtime, etc.andP;  Whatare the implications of these alternatives?andM;2.andP;  How much of the development effort should be expended on qualityassurance and how does that affect completion time and total cost?andM;3.andP;  What is the impact of different effort distributions among project phases(e.g., should the ratio of effort between development and testing be 80 : 20or 60 : 40)?andM;4.andP;  What are the reasons for and implications of the differences betweenpotential productivity, actual productivity, and perceived productivity?andM;5.andP;  Why does the &quot;90% completion syndrome&quot; chronically recur?andM;In the rest of this article we discuss the integrative dynamic model ofsoftware project management that has been developed.andP;  We will provide anoverview of both the model's structure and its behavior followed by adiscussion of the insights gained.andP;  We begin our presentation, however, byfirst presenting arguments for the necessity of an integrative and dynamicmodeling approach in the study of software project management.andM;THE HIGH COMPLEXITY OF THE SOFTWAREandM;PROJECT MANAGEMENT PROCESSandM;A simple view of the dynamics of project management is illustrated by thesingle-loop model shown in Figure 1 [45].andP;  The model portrays how projectwork is accomplished through the use of project resources (manpower,facilities, equipment; see item 1 in Figure 1).andP;  As work (2) is accomplishedon the project, it is reported (3) through some project control system.andP;  Suchreports cumulate and are processed to create the project's forecastcompletion time (4) by adding to the current date the indicated timeremaining on the job.andP;  Assessing the job's remaining time involves figuringout the magnitude of the effort (e.g., in man-days) believed by management tobe remaining to complete the project, the level of manpower working on theproject, and the perceived productivity of the project team.andP;  The feedbackloop is completed (closed) as the difference, if any, between the scheduledcompletion date (5) and the forecast completion date (4) causes adjustments(6) in the magnitude or allocation of the project's resources (1).andP;  This newlevel of resources results in a new work rate (2) and the loop is repeatedagain.andM;What is attractive about the above model is that it is reasonable, simple,and manageable.andP;  It is the mental model that many project managers rely on[45].andP;  But is it an adequate model of the dynamics of software projectmanagement?andM;The software project management system is a far more complex conglomerate ofinterdependent variables that are interrelated in various nonlinear fashions.andO;By excluding vital aspects of the real software project environment, themodel depicted in Figure 1 could seriously misguide the unsuspecting softwaremanager.andP;  To see how, let us consider just a few of the many typicaldecisions pondered in a software project environment.andM;Adding More People to a Late Project.andP;  The mental picture of Figure 1suggests a direct relationship between adding people resources and increasingthe rate of work on the project, i.e., the higher the level of projectresources, the higher the work rate.andP;  This ignores one vital aspect ofsoftware project dynamics, namely, that adding more people often leads tohigher communication and training overheads on the project, which can in turndilute the project team's productivity.andP;  Lower productivity translates intolower progress rates, which can, therefore, delay the late project evenfurther.andP;  This, in turn, can trigger an additional round of work forceadditions and another pass around this vicious cycle.andP;  These dynamic forcescreate the phenomenon often referred to as Brooks' Law, i.e., adding morepeople to a late software project makes it later [15].andP;  In Figure 2a we,therefore, amend Figure 1 by incorporating the vital link between the workforce level and productivity.andM;Adjusting the Schedule of a Late Project.andP;  Another part of the real systemthat is ignored by Figure 1 concerns the impact of schedule pressures on thesoftwasre developers' actions and decisions.andP;  For example, w hen faced withschedule pressures that arise as a project falls behind schedule, softwaredevelopers typically respond by putting in longer hours and by concentratingmore on the essential tasks of the job [25].andP;  In one experiment, Boehm [14]found that the number of man-hours devoted to project work increased by asmuch as 100 percent.andP;  This additional link between schedule pressure andproductivity is captured in Figure 2b.andM;The impact of schedule pressures on software development, however, is notlimited to the above relatively direct role.andP;  Schedule pressures can alsoplay less visible roles.andP;  For example, as Figure 2c suggests, schedulepressures can increase the error rate of the project team and thus the amountof rework on the project [31, 40].andM;People under time pressure don't work better, they just work faster....andP;  Inthe struggle to deliver any software at all, the first casuality has beenconsideration of the quality of the software delivered [19, p. 34].andM;The rework necessary to correct such software errors obviously diverts theproject team's effort from making progress on new project tasks, and thus canhave a significant negative impact on the project's progress rate.andM;How Late is a Late Software Project?andP;  Because software remains largelyintangible during most of the development process, it is often difficult forproject managers to assess real progress on the project [12].andP;  To the extentthat the perceived progress rate differs from the real progress rate, anerror in perceived cumulative progress will gradually accumulate (Figure 2d).andO;Furthermore, bias, often in the form of overoptimism, and delay in gatheringand processing control information additionally distorts the reportedprogress.andP;  This undoubtedly poses yet another complication that is too realfor the software project manager to exclude from a model of the process.andM;AN INTEGRATIVE SYSTEM DYNAMICSandM;PERSPECTIVE OF SOFTWARE DEVELOPMENTandM;While the preceding discussion is still far less than a complete picture, itdoes illustrate that many variables, both tangible and intangible, impact thesoftware development process.andP;  Furthermore, these variables are notindependent, but are related to one another in complex fashions.andP;  Perhapsmost importantly, understanding the behavior of such systems is complex farbeyond the capacity of human intuition [45].andM;A major deficiency in much of the research to date on software projectmanagement has been the inability to integrate our knowledge of themicrocomponents of the software development process such as scheduling,productivity, and staffing to derive implications about the behavior of thetotal socio-technical system.andP;  In the research effort described in thisarticle we build upon and extend what has been learned about themicrocomponents, to construct a holistic model on the software developmentprocess.andP;  It integrates the multiple functions of software development,including both the management-type functions (e.g., planning, controlling,staffing) as well as the software production-type activities (e.g.,andO;designing, coding, reviewing, testing).andM;A second unique feature of our modeling approach is the use of the feedbackprinciples of system dynamics to structure and clarify the complex web ofdynamically interacting variables.andP;  Feedback is the process in which anaction taken by a person or thing will eventually affect that person orthing.andP;  Examples of such feedback systems in the software project environmenthave already been demonstrated in the preceding discussion and are evident inFigures 1 and 2.andM;The significance and applicability of the feedback systems concept tomanagerial systems has been substantiated by a large number of studies [45].andO;For example, Weick [49, p. 7] observes thatandM;The cause-effect relationships that exist in organizations are dense andoften circular.andP;  Sometimes these causal circuits cancel the influences of onevariable on another, and sometimes they amplify the effects of one variableon another.andP;  It is the network of causal relationships that impose many ofthe controls in organizations and that stabilize or disrupt the organization.andO;It is the patterns of these causal links that account for much of whathappens in organizations.andP;  Though not directly visible, these causal patternsaccount for more of what happens in organizations than do some of the morevisible elements such as machinery, timeclocks, ....andM;One of the planning works in the field is Roberts' [44] published doctoraldissertation, which involved the development of a comprehensive systemdynamics model of Randamp;D project management.andP;  The model traces the full lifecycle of a single Randamp;D project and incorporates the interactions between theRandamp;D product, the firm, and the customer.andP;  Roberts' work spurred a largenumber of system dynamics studies of project management phenomena.andP;  Forexample, Nay [33] and Kelly [26] extended Roberts' work in their research onmultiproject environments.andP;  Richardson [42] took a different tack, focusingon the development group.andP;  His model reproduces the dynamics of a developmentgroup over an eight-year period as a continuous stream of products aredeveloped and placed into production.andM;While the bulk of the system dynamics modeling work in the project managementarea has been devoted to the Randamp;D environment, the applicability of themethodology to the domain of software production has been alluded to in theliterature (e.g., [24, 28, 39]).andP;  Perhaps this should come as no surprise,since &quot;the stages of research and development are similar in many respects tothe stages of software analysis and design&quot; [23].andP;  In the remainder of thissection we describe how the system dynamics modeling technique was extendedto the software project domain.andM;Model Development and StructureandM;The model was developed on the basis of a field study of software projectmanagers in five organizations.andP;  The process involved three informationgathering steps:andM;First, we conducted a series of interviews with software development projectmanagers in three organizations.andP;  The purpose of this set of interviews wasto provide us with a first-hand account of how software projects arecurrently managed in software developing organizations.andP;  The informationcollected in this phase, complemented with our own softwasre developmentexperience, formed the basis for formulating a skeleton system dynamics modelof software project management.andM;The second step was to conduct an extensive review of the literature.andP;  Theskeleton model served as a useful road map in carrying out this literaturereview.andP;  When this exercise was completed, many knowledge gaps were filled,giving rise to a second much more detailed version of the model.andM;In the third, and final step:andM;The model is exposed to criticism, revised, exposed again and so on in aniterative process that continues as it proves to be useful.andP;  Just as themodel is improved as a result of successive exposures to critics asuccessively better understanding of the problem is achieved by the peoplewho participated in the process [45, p. 6].andM;The setting for this was a second series of intensive interviews withsoftware project managers of three organizations (only one of which wasincluded in the first group).andM;Figure 3 depicts a highly aggregated view of the model's four subsystems,namely: (1) the human resource management subsystem; (2) the softwareproduction subsystem; (3) the controlling subsystem; and (4) the planningsubsystem.andP;  The figure also illustrates some of the interrelationships amongthe four subsystems.andP;  Similarities to Figure 2d can be recognized.andP;  Since theactual model is very detailed, containing over a hundred causal links, only ahigh-level description of the model can be presented in the limited space ofthis article.andP;  For a full discussion of the model's structure and itsmathematical formulation the reader is referred to [1, 9].andM;Human Resource Management SubsystemandM;The human resource management subsystem captures the hiring, training,assimilation, and transfer of the human resource.andP;  The project's total workforce is segregated into different types of employees, e.g., newly hired workforce and experienced work force.andP;  Segregating the work force into suchcategories is necessary for two reasons.andP;  First, newly added team members arenormally less productive (on the average) than the &quot;old timers&quot; [18].andO;Secondly, it allows us to capture the training processes involved inassimilating the new members into the project team.andM;On deciding upon the total work force level needed, project managers considera number of factors.andP;  One important factor, of course, is the project'scompletion date.andP;  As part of the planning subsystem (to be discussed later),management determines the work force level that it believes is necessary tocomplete the project on time.andP;  In addition, though, consideration is alsogiven to the stability of the work force.andP;  Thus, before adding new projectmembers, management contemplates the duration for which the new members willbe needed.andP;  In general, the relative weights given to work force stabilityversus on-time completion is dynamic, i.e., will change with the stage ofproject completion.andP;  For example, toward the end of the project there couldbe considerable reluctance to bring in new people.andP;  This reluctance arisesfrom the realization that there just wouldn't be enough time to acquaint thenew people with the mechanics of the project, integrate them into the projectteam, and train them in the necessary technical areas.andM;Software Production SubsystemandM;This software production subsystem models the software development process.andO;The operation and maintenance phases of the software life cycle are, thus,not included.andP;  The development life cycle phases incorporated include thedesigning, coding, and testing phases.andP;  Notice that the initial requirementsdefinition phase is also excluded.andP;  There are two resons for this.andP;  Theprimary reason relates to the desire to focus this study on the endogenoussoftware development organization, i.e., the project managers and thesoftware development professionals, and how their policies, decisions,actions, etc., affect the success/failure of software development.andP;  Therequirements definition phases was, thus, excluded since in many environmentsthe definition of user requirements is not totally within the control of thesoftware development group [29].andP;  As software is developed, it is alsoreviewed to detect any errors, e.g., using quality assurance activities suchas structured walkthroughs.andP;  Errors detected through such activities arereworked.andM;The formulation of software productivity is based on the work of thepsychologist Ivan Steiner [47].andP;  Steiner's model can simply be stated asfollows:andM;Actual Productivity = Potential Productivity - Losses Due to Faulty ProcessandM;Potential productivity is defined as &quot;the maximum level of productivity thatcan occur when an individual or group...makes the best possible use of itsresources.&quot;andP;  It is a function of two sets of factors, the nature of the task(e.g., product complexity, database size) and the group's resources (e.g.,andO;personnel capabilities, experience level, software tools).andP;  Losses due tofaulty process refer to the losses in productivity incurred as a result ofthe communication and coordination overheads and/or low motivation.andM;Control SubsystemandM;Decisions made in any organizational setting are based on what information isactually available to the decision maker(s).andP;  Often, this availableinformation is inaccurate.andP;  Apparent conditions may be far removed from theactual or true state, depending on the information flows that are being usedand the amount of time lag and distortion in these information flows.andP;  Thus,system dynamicists go to great lengths to differentiate between actual andperceived model variables [21].andM;True productivity of a software project team is a good example of a variablethat is often difficult to assess.andP;  To know what the true value ofproductivity is at a particular point in time requires accurate knowledgeregarding the rates of accomplishment and resources expended over that periodof time.andP;  However, because software is basically an intangible product duringmost of the development process.andP;  &quot;It is difficult to measure performance inprogramming...It is difficult to evaluate the status of intermediate worksuch as undebugged programs or design specification and their potential valueto the complete project&quot; [31, p. 57].andM;How, then, is progress measured in a software project's control system?andP;  Ourown field study findings corroborate those reported in the literature,namely, that progress, especially in the earlier phases of softwaredevelopment, is typically measured by the actual expenditure of budgetedresources rather than by some count of accomplishments [19].andP;  Baber [12, p.andO;188] explains:andM;It is essentially impossible for the programmers to estimate the fraction ofthe program completed.andP;  What is 45% of a program?andP;  Worse yet, what is 45% ofthree programs?andP;  How is he to guess whether a program is 40% or 50% complete?andO;The easiest way for the programmer to estimate such a figure is to divide theamount of time actually spent on the task to date by the time budgeted forthat task.andP;  Only when the program is almost finished or when the allocatedtime budget is almost used up will he be able to recognize that thecalculated figure is wrong.andM;When progress in software development is measured solely by the expenditureof budgeted resources, status reporting ends up being nothing more than anecho of the original plan.andM;As the project advances toward its final stages, work accomplishments becomerelatively more visible and project members become increasingly more able toperceive how productive the work force has actually been.andP;  As a result,perceived productivity gradually ceases to be a function of projectedproductivity and is determined instead on the basis of actual tasksdeveloped.andM;Planning SubsystemandM;In the planning subsystem, initial project estimates (e.g, for completiontime, staffing, man-days) are made at the beginning of the project using avariety of techniques [27].andP;  These estimates are then revised, as necessary,throughout the project's life.andP;  For example, to handle a project that isperceived to be behind schedule, plans can be revised to add more people,extend the schedule, or do a little of both.andP;  Such planning decisions aredriven by variables that can change dynamically throughout the project lifecycle.andP;  For example, while it is common for management to respond to a delayin the early stages of the project by increasing staff level, there is oftengreat reluctance to do that later in the life cycle.andP;  This reluctance arisesfrom the realization that there just wouldn't be enough time to acquaint thenew people with the mechanics of the project, integrate them into the projectteam, and train them in the necessary technical areas.andM;MODEL VALIDATIONandM;Validation Tests PerformedandM;The process of judging the validity of a system dynamics model includes anumber of objective tests [43] all of which were performed to validate thismodel:andM;* Face validity.andP;  To test the fit between the rate/level/feedback structureof the model and the essential characteristics of the real system.andP;  This wasconfirmed by the software project managers involved in the study.andM;* Replication of reference modes.andP;  To test whether the model can endogenouslyreproduce the various reference behavior modes characterizing the systemunder study.andP;  Reference modes are the observed behavior patterns over time ofimportant variables characterizing the system under study, includingproblematic behavior patterns and observed responses to past policies [43].andO;Reference modes reproduced by the model include: work force staffing patternsin the human resource management area [5], the &quot;90% syndrome&quot; in the controlarea [4], the impact of schedule compression on project cost and schedule inthe planning area [6], and the deadline effect on software productivity inthe software production area [10].andM;* Extreme condition simulations: To test whether the model behaves reasonablyunder extreme conditions or extreme policies.andP;  As noted by Forrester andSenge [22, p. 203].andM;It is not an acceptable counterargument to assert that particular extremeconditions do not occur in real life and should not occur in the model; thenonlinearities introduced by approaches to extreme condition can haveimportant effect in normal operating ranges.andP;  Often the nonlinearities in thetransition from normal to extreme conditions are the very mechanisms thatkeep the extreme conditions from being reached.andM;To make the extreme condition tests, we examined each policy, represented bya rate equation in the model, traced it back through any auxiliary equationsto the state variables, represented as state variables, on which the ratedepends, and tested the implications of imaginary maximum and minimum valuesof each state variable and combination of state variables to determine theplausibility of the resulting rate equations.andP;  Examples of extreme conditionsexamined include: if the work force level reaches zero, then the softwareproduction rate must be zero; even if the turnover rate is set to extremelyhigh values, the work force level should never become negative; if the sizeof the project is suddenly and dramatically increased, then adjustments inthe work force level and/or the schedule will not be instantenous (delayswill be incurred); if the error generation rate is set to zero, then norework effort will be incurred but effort would still be allocated to QA andtesting.andM;* Case study.andP;  After the model was completely developed, a case study wasconducted at NASA's Goddard Space Flight Center (GSFC) to validate the model.andO;(NASA was not one of the five organizations studied during modeldevelopment.)andP;  The case study involved a simulation of one of GSFC's softwareprojects, namely, the DE-A project.andM;DE-A Case StudyandM;The objective of the DE-A project was to design, implement, and test asoftware system for processing telemetry data and providing attitudedetermination and control for the DE-A satellite.andP;  The project's size was24,000 delivered source instructions (24 KDSI), the development and targetoperations machines were the IBM S/360-95 and -75, and the programminglanguage was FORTRAN.andP;  Initially, the project was estimated to require 1,100man-days and to be completed in 320 working days.andP;  The actual results were2,200 man-days and 380 days, respectively.andM;The model's DE-A simulation run is depicted in Figure 4.andP;  As shown, themodel's results (represented by lines) conformed quite accurately to theproject's actual behavior (represented by the circular points in the figure).andO;Notice how project DE-A's management was inclined not to adjust the project'sestimated schedule in days during most of the development phase of theproject.andP;  Adjustments, in the earlier phases of the project.andP;  were insteadmade to the project's work force level.andP;  This behavior is not atypical.andP;  Itarises, according to DeMarco [19, p. 10] because of political reasons:andM;Once an original estimate is made, it's all too tempting to pass upsubsequent opportunities to estimate by simply sticking with your previousnumbers.andP;  This often happens even when you know your old estimates aresubstantially off.andP;  There are a few different possible explanations for thiseffect: It's too early to show slip...If I re-estimate now, I risk having todo it again later (and looking bad twice)....andP;  As you can see all suchreasons are political in nature.andM;The work force pattern, on the other hand, is quite atypical.andP;  In theliterature, work force buildup tends to follow a concave curve that rises,peaks, and then drops back to lower levels as the project proceeds toward thesystem testing phase [14].andP;  Because NASA's launch of the DE-A satellite wastied to the completion of the DE-A software, serious schedule slippages werenot tolerated.andP;  Specifically, all software was required to be accepted andfrozen three months before launch.andP;  As this date was approached, pressuresdeveloped that overrode normal work force stability considerations.andP;  That is,project management became increasingly willing to pay any price necessary toavoid overshooting the three months before-launch date.andP;  This translated, asthe figure indicates, into a management that was increasingly willing to addmore people.andP;  (In [5] we investigate whether that staffing policy did or didnot contribute to the project's late completion.)andM;On the other hard, various typical behavior patterns can be seen, such as the90% completion syndrome [4, 19]:andM;...estimates of the fraction of the work completed (increase) as originallyplanned until a level of about 80-90% is reached.andP;  The programmer'sindividual estimates then increase only very slowly until the task isactually completed [12, p. 188].andM;Its manifestation in the DE-A project is depicted in Figure 5.andP;  By measuringprogress in the earlier phases of the project by the rate of expenditure ofresources, status reporting ended up being nothing more than an illusion thatthe project was right on target.andP;  However, as the project approached itsfinal stages (e.g., when 80 to 90% of the resources are consumed),discrepancies between the percentage of tasks accomplished and the percentageof resources expended became increasingly more apparent.andP;  At the same time,project members became increasingly able to perceive how productive the workforce has actually been.andP;  This resulted in a better appreciation of theamount of effort actually remaining.andP;  As this appreciation developed, itstarted to, in effect, discount the project's progress rate.andP;  Thus, althoughthe project members proceeded toward the final stages of the project at ahigh work rate because of schedule pressures, their net progress rate sloweddown considerably.andP;  This continued until the end of the project.andM;EXPERIMENTS UNDERTAKEN ANDandM;IMPLICATIONS OF RESULTSandM;&quot;In software engineering it is remarkably easy to propose hypotheses andremarkably difficult to test them&quot; [50, p. 57].andP;  Many in the field have,thus, argued for the desirability of having a laboratory tool for testingideas and hypotheses in software engineering [48].andM;The computer simulation tools of system dynamics provide us with such anexperimentation vehicle.andP;  The effects of different assumptions andenvironmental factors can be tested.andP;  In the model system, unlike the realsystems, the effectof changing one factor can be observed while all otherfactors are held unchanged.andP;  Internally, the model provides complete controlof the system's organizational structure, its policies, and its sensitivitiesto various events.andM;Currently, the model is being used to study and predict the dynamicimplications of managerial policies and procedures on the softwaredevelopment process in a variety of areas.andP;  This has produced three kinds ofresults: (1) Uncovered dysfunctional consequences of some currently adoptedpolicies (e.g., in the scheduling area); (2) Provided support for managerialdecision making (e.g., on the allocation of the quality assurance effort);and (3) provided insight into software project phenomena (e.g., 90% syndromeand Brooks' Law).andM;Dysfunctional Consequences ofandM;Some Current PoliciesandM;We investigated the project scheduling practices in a major U.S.andO;minicomputer manufacturer [2].andP;  In the particular organization, softwareproject managers use Boehm's [14] COCOMO model to determine initial projectestimates, which are then adjusted upward using a judgmental safety factor tocome up withthe project estimates actually used.andP;  In this organization,project managers were rewarded based upon how closely their project estimatesmatched actual project results.andP;  The purpose of the experiment was toinvestigate the implications of this safety factor policy.andM;To test the efficacy of various safety factor policies, we ran a number ofsimulations on a prototypical software project that we will call projectExample.andP;  Project Example's actual size is 64,000 DSI.andP;  At its initiation,however, it was incorrectly estimated to be 42.88 KDSI in size (that is, 33percent smaller than 64 KDSI).andP;  This incorrectly perceived project size of42.88 KDSI was the input used in COCOMO's estimation equations.andP;  Weexperimented with safety factor values ranging from 0 (the base run) to 100percent.andP;  For a 50 percent safety factor, for example, the actual estimateused on the project would be (1 + 50/100) * COCOMO's estimates.andM;In Figure 6, the percent relative error in estimating man-days, defined as100 X | Actual - Estimate | Actual, is plotted against different values ofthe safety factor.andP;  Notice that the safety factor policy seems to beworking--the larger the safety factor, the smaller the estimation error.andM;The rationale for using a safety factor is based on the followingassumptions:andM;1.andP;  Past experience indicates a strong bias among software developers tounderestimate the scope of software projects [14].andM;2.andP;  One might think biases are the easiest of estimating problems to correctsince they involve errors moving always in the same direction.andP;  But as [19]suggests, biases are almost by definition invisible; the same psychologicalmechanism that creates the bias (for example, the optimism of softwaredevelopers) works to conceal it.andM;3.andP;  To rectify such bias, project managers often use a safety factor.andO;Pietrasanta [37] observes that when project managers add contingency factors(raing, say, from 25 to 100 percent), they are saying in essence: I don'tknow all that is going to happen, so I'll estimate what I don't know as apercentage of what I do know.andM;In other words, the assumption is that safety factors are simply mechanismsto bring initial man-day estimates closer to true project size in man-days(see Figure 7a).andP;  Such an assumption cannot be contested solely on the basisof Figure 6 which provides only part of the story.andP;  Figure 7b presents a morecomplete picture; here, we used the model to calculate the actual man-daysconsumed by the project Example when different safety factors were applied toits initial estimate.andP;  The Figure 7a assumption is obviously invalidated.andP;  Aswe use higher safety factors, leading to increasingly generous initialman-days allocations, the actual amount of man-days consumed does not remainat some inherently defined value.andP;  In the base run, for example, projectExample would be initialed with a man-day estimate of 2,359 man-days andwould consume 3,795 man-days.andP;  When a 50 prcent safety factor is used,leading to a 3,538 man-day initial estimate.andP;  Example ends up consuming not3,795 man-days but 5,080 man-days.andM;These results clearly indicate that by imposing different estimates on asoftware project we would, in a real sense, be creating different projects.andO;This can be explained by realizing that schedules have a direct influence ondecision-making behavior throughout a software project's life.andP;  In TRW'sCOCOMO model [14], for example, the project's average staff size would bedetermined by dividing the man-day estimate by the development time estimate(TDEV).andP;  Thus, a tight time schedule means a larger work force.andP;  Also,scheduling can dramatically change manpower loading throughout the life of aproject.andP;  For example, the work force level in some environments shootsupward toward the end of a late project wh en there are strict constraints onthe extent to which the project's schedule is allowed to slip.andP;  Through itseffects on the work force level, a project's schedule also affectsproductivity (as illustrated in Figure 3).andP;  For example, a higher work forcelevel means more communication and training overhead, affecting productivitynegatively.andM;Productivity is also influenced by how tight or slack a project schedule is.andO;If a project falls behind under a tight schedule, software developers oftendecide to work harder in an attempt to compensate for the perceived shortageand bring the project back on schedule.andP;  Conversely, man-day excesses couldarise if project management initially overestimates a project; as a result,the project would be perceived ahead of schedule.andP;  When such a situationoccurs, &quot;Parkinson's law indicates that people will use the extra time for...andP;  personal activities, catching up on the mail, etc.&quot;andP;  [14].andP;  Of course,this means that they become less productive.andM;One important managerial lesson learned from the above experiment is this:more accurate estimates are not necessarily &quot;better&quot; estimates.andP;  Anestimation method should not be judged only on how accurate it is; it shouldalso be judged on how costly the projects it creates are.andP;  For example, inone situation studied, we found that the estimation error which would havebeen 38 percent had been reduced to 9 percent by the safety factor policy.andO;But, that policy resulted in a 43 percent cost increase in the project.andP;  Forthe first time management had a realization of the cost of their moreaccurate schedule estimation policy.andM;Provide Support for Management Decision MakingandM;The quality assurance (QA) function has, in recent years, gained therecognition of being a critical factor in the successful development ofsoftware systems.andP;  However, because the use of QA tools and techniques canadd significantly to the cost of developing software, the cost effectivenessof QA has been a pressing concern to the software quality manager.andP;  As ofyet, though, this concern has not been adequately addressed in theliterature.andM;We have investigated the tradeoffs between the economic benefits and costs ofQA in [6] and [8].andP;  To do this, we used the model as a laboratory vehicle toconduct controlled experiments on QA policy.andP;  Effects considered in thisexperiment included error generation rate factors, such as schedule pressuresand phase of project, and error detection factors, such as productivity,error types, error density.andP;  The results showed that the percent of theeffort allocated to QA dramatically affects the total project cost.andP;  In onecase studied (Figure 8a), the resulting total project cost ranged from 1,648man-days to 5,650 man-days with the optimal QA allocation being 15 percent ofthe development effort.andM;Two important conclusions can be drawn from Figure 8a.andP;  The first, moregeneralizable conclusion, is that QA policy does have a significant impact ontotal project cost.andP;  At low values of QA expenditures, the increase in costresults from the high cost of the testing phase.andP;  On the other hand, at highvalues of QA expenditures, the excessive QA expenditures are themselves theculprit.andP;  The relationship between QA effort and the percentage of errorsdetected is shown in Figure 8b.andP;  Notice the &quot;diminishing returns&quot; of QAexhibited as QA expenditures extend beyond 10 to 15 percent of developmenteffort.andP;  This type of behavior has been observed by others in the literature(e.g., [14, 46]).andM;The second important conclusion we can draw, concerns the 15 percent valuefor the optimal QA expenditure level.andP;  What, in our opinion, is reallysignificant about this result is not its particular value, since this cannotbe generalized beyond the DE-A software project used for this study, butrather the process of deriving it, namely, this article's integrative systemdynamics simulation approach.andP;  Beyond controlled experimentation (which wouldbe too costly and time consuming to be practical), as far as we know, thismodel provides the first capability to quantitatively analyze thecosts/benefits of QA policy for software production.andP;  This, it is encouragingto note, is generalizable in the sense that one can customize the model fordifferent software development environments to derive environment-specificoptimality conditions.andM;New Insights into Software Project PhenomenaandM;One oft-cited software project phenomenon is Brooks' Law, which states thatadding manpower to a late software project makes it later [15].andP;  Since itspublication, Brooks' Law has been widely reference in the literature eventhough it has not been formally tested.andP;  Furthermore, it has often beenapplied indiscriminately e.g., for applications-type projects as well assystems programming-type projects, both large and small [38], even thoughBrooks was quite explicit in specifying the domain of applicability of hisinsights, to what he called &quot;jumbo systems programming projects.&quot;andM;We have studied Brooks' Law in the context of medium-size applications-typeprojects in [5].andP;  Recall the work force staffing pattern experienced onNASA's medium-sized DE-A project of Figure 4.andP;  It indicates that managementis (implicitly if not explicitly) oblivious to the lesson of Brooks' Law.andO;Because NASA's launch of the DE-A satellite was tied to the completion of theDE-A software, serious schedule slippages could not be tolerated.andO;Specifically, all software was required to be accepted and frozen threemonths before launch.andP;  As the project slipped and this date approached,management reacted (or overreacted) by adding new people to the project tomeet the strict launch deadline ...andP;  as evidenced by the rising work forcecurve in the final stages of the project.andM;The lesson of Brooks' Law would, of course, suggest that by adding new peopleto the late DE-A project, management actually delayed it further.andP;  To testthis hypothesis, we resimulated the DE-A project under different staffingpolicies.andP;  The experimental results showed that while adding more people to alate project of this type does cause it to become more costly, it does notalways cause it to complete later.andP;  The increase in the cost of the projectis caused by the increased training and communication overheads, which ineffect decrease the average productivity of the work force and thus increasethe project's cost in man-days.andP;  For the project's schedule to also suffer,the drop in productivity must be severe enough and late enough in theproject's life cycle to render an additional person's net cumulativecontribution to the project to be, in effect, a negative contribution.andP;  Ourexperimental results indicate that this happens only where management'swillingness to add new staff members persists until the very final stages ofthe testing phase.andP;  In the particular case of the DE-A project where hiringdid continue until the very end (as seen in Figure 4), our analysis indicatesthat the project period could have been cut by two calendar weeks bycurtailing hiring during the testing phase.andM;CONCLUSIONandM;The objective of this research effort is to enhance our understanding of thesoftware development process and how it is managed.andP;  There are two principalfeatures that characterize our research paradigm, which we would like toreiterate in these concluding remarks.andP;  First, we emphasize the integrativeperspective.andP;  We have attempted to demonstrate how the software managementsystem is a conglomerate of interrelated and interdependent functions.andO;Action taken by one subsystem (e.g., human resource management) can be tracedthroughout the entire management system (e.g., software production, planning,and control).andP;  The behavior of an individual subsystem in isolation may bevery different from its behavior when it interacts with other subsystems(e.g., the lesson of Brooks' Law).andP;  Furthermore, differences in theenvironment and management policies between companies could explain why asoftware engineering technique that is effective in one organization may beineffective in another organization [7].andM;Second, our research approach is grounded in the feedback systems principlesof system dynamics.andP;  Feedback processes are universal in social systems ingeneral.andP;  We have attempted to show how, when applied to software projectmanagement, they do provide a powerful lens to view and understand softwareproject behavior.andP;  This is particularly important because:andM;Most managers get into trouble because they forget to think in circles.andP;  Imean this literally.andP;  Managerial problems persist because managers continueto believe that there are such things as unilateral causation, independentand dependent variables, origins, and terminations [49, p. 86].andM;What is gained in understanding through the use of such a model to portray aportion of the real world is achieved by comprehending the law or laws builtinto the model.andP;  Hundreds of variables affect software development.andO;Furthermore, these variables are not independent; many of them are related toone another.andP;  So far the many studies on the subject emphasize the difficultyand complexity of the process, but have done little to reveal a well-definedmethodology or to delineate precise relationships among project variables[36].andP;  We feel that the research paradigm presented in this article providesa viable vehicle.andM;If understanding is the intellectual outcome of a theoretical model, thenprediction is its practical outcome.andP;  This model is also being used as anexperimentation vehicle to study and predict the dynamic behavior of thesoftware development process and of the implications of managerial policiesand procedures pertaining to the development of software.andP;  The exerciseproduced three kinds of results (1) uncovered dysfunctional consequences ofsome currently adopted policies (e.g., in the scheduling area); (2) providedguidelines for managerial policy (e.g., on the allocation of the qualityassurance effort); and (3) provided new insights into software projectphenomena (e.g., Brooks' Law).andM;These results are obviously limited by the model boundary selected for thisstudy, our literature search, and our interviews.andP;  Our system dynamicssoftware management model is not a model of small one-programmer-typeprojects nor large projects involving hundreds of software professionals overa period of several years.andP;  Instead, our research results specificallypertain to the domain of medium-sized projects that are 10,000 to 250,000lines of code.andP;  Second, the type of projects investigated are the so-calledorganic type projects, i.e., projects conducted in familiar in-houseenvironments [14].andP;  Third, our current results are limited to projects thatfollow that traditional waterfall life cycle using third-generationprogramming languages.andP;  Finally, this approach is intended to provide ageneral understanding of the nature of the dynamic behavior of a project(e.g., how work force levela nd productivity change over time and why) ratherthan to provide point-predictions (e.g., exactly how many errors will begenerated.)andM;Finally, a note a possible future research directions.andP;  Two such researchareas are particularly promising.andP;  The first involves extending this modelingapproach to investigate, not the dynamics of a single software project, butrather to study the software development organization as a continuous streamof software products are developed, placed into operation, and maintained.andP;  Anumber of research questions are ripe for investigation, including: (1) theefficacy of different organizational structures (e.g., project, functional,and matrix); (2) personnel turnover, its costs (e.g., recruiting and trainingoverheads), its benefits (e.g., access to new ideas and methodologies), andits causes (e.g., schedule pressures, maintenance load); and (3) theorganizational/environmental determinants of productivity (e.g., standards,software tools, use of librarians, documentation requirements).andP;  Again, oneneeds to investigate both short-term as well as long-term implications.andP;  Forexample, an investment in developing powerful software development tools(e.g., compilers, automated testing tools) might hamper productivity in theshortrun, but may lead to better software in the long-run.andM;Second, we are investigating the utility of incorporating AI-based modulesinto the model [11].andP;  According to Nielsen [35], an expert-system form ofrepresentation for decision making can be particularly advantageous insituations where the actual system being modeled is not fully automated but,instead, relies upon human judgment or direct human intervention for aportion of its operation or behavior &quot;A knowledge-based programming approachmay be used to capture the human element of the decision making, so that suchknowledge may be appropriately reflected in the model&quot; [35].andM;The management of software projects is such an application area.andP;  Capturingthe decision-making process (e.g., in the staffing area) in a rule-basedknowledge base, rather than using the traditional representation inprocedural code has a number of benefits.andP;  For example, it allows for theincorporation of an explanation capability to the model.andM;The experiments that have been performed already, described in the previoussection, illustrate the insights that can be gained from applying thisparadigm to the myraid of concerns facing software development managers.andO;Further work in these directions will help to resolve many more of theseconcerns.andM;Acknowledgments.andP;  We appreciate the contribution of each of the individualsin the organizations providing perspectives and data to this research effort.andO;In addition, we thank Robert Zmud and Chris Kemerer, whose suggestions haveimproved this article's organization and readability.andP;  Work reported hereinwas supported, in part, by NASA research grant NAGW-448.andM;REFERENCESandM;[1] Abdel-Hamid, T.K.andP;  The dynamics of software development projectmanagement: An integrative system dynamics perspective.andP;  Ph.D.andP;  dissertation,Sloan School of Management, MIT, 1984.andM;[2] Abdel-Hamid, T.K., and Madnick, S.E.andP;  Impact of schedule estimation onsoftware project behavior.andP;  IEEE Softw.andP;  3, 4 (July, 1986).andM;[3] Abdel-Hamid, T.K.andP;  The economics of software quality assurance: Asimulation-based case study.andP;  MIS Q., in press, 1988b.andM;[4] Abdel-Hamid, T.K.andP;  Understanding the '90% syndrome' in software projectmanagement: A simulation-based case study.andP;  J. Syst.andP;  Softw., in press,1988c.andM;[5] Abdel-Hamid, T.K.andP;  The dynamics of software project staffing: A systemdynamics based simulation approach.andP;  IEEE Trans.andP;  Softw.andP;  Eng.andP;  15, 2 (Feb.andO;1989a).andM;[6] Abdel-Hamid, T.K.andP;  Investigating the cost schedule tradeoff in softwaredevelopment.andP;  IEEE Softw., in press, 1989b.andM;[7] Abdel-Hamid, T.K., and Madnick, S.E.andP;  On the porrtability of quantitativesoftware estimation models.andP;  Inf.andP;  Manag.andP;  13, 1 (Aug.andP;  1987a).andP;  1-10.andM;[8] Abdel-Hamid, T.K., and Madnick, S.E.andP;  The economics of software qualityassurance: A systems dynamics based simulation approach.andP;  Annuals of theSociety of Logistics Eng.andP;  1, 2 (October 1987b), 8-32.andM;[9] Abdel-Hamid, T.K., and Madnick, S.E.andP;  Dynamics of Software ProjectManagement.andP;  Prentice-Hall, Englewood Cliffs, N.J.: in press, 1990.andM;[10] Abdel-Hamid, T.K., and Madnick, S.E.andP;  Software productivity: Potential,actual, and perceived.andP;  Syst.andP;  Dynamics Rev.andP;  5, 2 (Sum.andP;  1989).andP;  93-113.andM;[11] Abdel-Hamid, T.K., a Sivasankaran, T.R.andP;  Incorporating expert systemtechnology into simulation modeling: An expert-simulator for projectmanagement.andP;  In Proceedings of the 1988 Society for Computer SimulationMulticonference, February, 3-5, 1988, pp.andP;  268-274.andM;[12] Baber, R.L.andP;  Software Reflected.andP;  North Holland, New York, 1982.andM;[13] Basili, V.R.andP;  Improving methodology and productivity through practicalmeasurement.andP;  Lecture at the Wang Institute of Graduate Studies, Lowell,Mass., November, 1982.andM;[14] Boehm, B.W.andP;  Software Engineering Economics, Prentice-Hall, EnglewoodCliffs, N.J., 1981.andM;[15] Brooks, F.P.andP;  The Mythical Man Month.andP;  Addison-Wesley, Reading, Mass.,andO;1978.andM;[16] Buckley, F., and Poston, R. Software quality assurance.andP;  IEEE Trans.andO;Softw.andP;  Eng.andP;  10, 1(Jan.andP;  1984), 36-41.andM;[17] Cooper, J.D.andP;  Corporate level software management.andP;  IEEE trans.andP;  Softw.andO;Eng.andP;  SE-4, No.andP;  4 (July 1978), 319-325.andM;[18] Cougar, J.D., and Zawacki, R.A.andP;  Motivating and Managing ComputerPersonnel.andP;  John Wiley, New York, 1980.andM;[19] DeMarco, T.andP;  Controlling Software Projects.andP;  Yourdon Press, New York,1982.andM;[20] Devenny, T.J.andP;  An exploration study of software cost estimating at theelectronics systems division.andP;  U.S.andP;  Department of Commerce, July, 1976.andM;[21] Forrester, J.W.andP;  Industrial Dynamics.andP;  MIT Press, Cambridge, Mass.,andO;1961.andM;[22] Forrester, J.W., and Senge, P.M.andP;  Tests for Building Confidence inSystem Dynamics Models.andP;  In A.A.andP;  Legasto et al., Eds., studies in theManagement Sciences: System Dynamics, North-Holland, Amsterdam.andP;  1980.andM;[23] Gehring, P.F., and Pooch, V.W.andP;  Software development management.andP;  DataManag.andP;  (Feb.andP;  1977), 14-38.andM;[24] Graham, A.K.andP;  Software design: Breaking the bottleneck.andP;  IEEE Spectrum19, 3 (Mar.andP;  1982), 43-50.andM;[25] Ibrahim, R.L.andP;  Software development information system.andP;  J. Syst.andO;Manag.andP;  29, 12 (Dec.andP;  1978), 34-39.andM;[26] Kelly, T.J.andP;  The dynamics of Randamp;D project management.andP;  Master's thesis,Sloan School of Management, MIT, 1970.andM;[27] Kemerer, C.F.andP;  An empirical validation of software cost estimationmodels.andP;  Commun.andP;  ACM 30, 5 (May 1987), 416-428.andM;[28] Lehman, M.M.andP;  Laws and conservation in large program evaluation.andP;  InProceedings of the Second Software Lifecycle Management Workshop (Atlanta,Ga., Aug. 1978), pp.andP;  21-22.andM;[29] McGowan, C.L., and McHenry, R.C.andP;  Software Management.andP;  In P. Wegner,Ed., Research Directions in Software Technology.andP;  MIT Press.andP;  Cambridge,Mass., 1980.andM;[30] McKeen, J.D.andP;  Successful development strategies for business applicationsystems.andP;  MIS Q. 7, 3 (Sept.andP;  1983).andM;[31] Mills, H.D.andP;  Software Productivity.andP;  Little, Brown andamp; Co., Boston, 1983.andM;[32] Musa, J.D.andP;  Software engineering: The future of a profession.andP;  IEEESoftw.andP;  (Jan.andP;  1985), 55-62.andM;[33] Nay, J.N.andP;  Choice and allocation in mulitple markets: A research anddevelopment systems analysis, Master's thesis, Department of ElectricalEngineering, MIT, 1965.andM;[34] Newport, J.P., Jr.andP;  A growing gap in software.andP;  Fortune (Apr.andP;  28,1986), 132-142.andM;[35] Nielsen, N.R.andP;  Knowledge-based simulation programming.andP;  In Proceedingsof the National Computer Conference (June 16-19, 1986), pp.andP;  126-136.andM;[36] Oliver, P.andP;  Estimating the Cost of Software.andP;  In J. Hannan, Ed.,andO;Computer Programming Management.andP;  Auerbach Publishers, Pennsauken, N.J.,andO;1982.andM;[37] Pietrasanta, A.M.andP;  Managing the Economics of Computer Programming.andP;  InNational Conference Proceedings of the ACM, 1986.andM;[38] Pressman, R.S.andP;  Software Engineering: A Practitioner's Approach.andO;McGraw-Hill, New York, 1982.andM;[39] Putnam, L.H.andP;  The Real Metrics of Software Development.andP;  EASCON 80,1980.andM;[40] Radice, A.andP;  Productivity Measures in software.andP;  In R. Goldberg, Ed., TheEconomics of Information Processing: Operations, Programming, and SoftwareModels.andP;  Volume II.andP;  Whiley, New York, 1982.andM;[41] Ramamoorthy, C.V.andP;  et al.andP;  Software engineering: Problems andperspectives.andP;  IEEE Comput.andP;  17, 10 (Oct.andP;  1984), 191-210.andM;[42] Richardson, G.P.andP;  Sources of rising product development times.andP;  Tech.andO;Rep.andP;  D-3321-1, SD Group, MIT, 1982.andM;[43] Richardson, G.P., and Pugh, G.L.andP;  III.andP;  Introduction to System DynamicsModeling with Dynamo.andP;  The MIT Press.andP;  Cambridge, Mass., 1981.andM;[44] Roberts, E.B.andP;  The Dynamics of Research and Development.andP;  Harper andRow, New York, 1964.andM;[45] Roberts, E.B., Ed.andP;  Managerial Applications of System Dynamics.andP;  The MITPress, Cambridge, Mass., 1981.andM;[46] Shooman, M.L.andP;  Software Engineering--Design, Reliability and Management,McGraw-Hill, New York, 1983.andM;[47] Steiner, I.D.andP;  Group Process and Productivity.andP;  Academic Press, NewYork, 1972.andM;[48] Thayer, R.H.andP;  Modeling a software engineering project management system.andO;Ph.d.andP;  Dissertation, Dept.andP;  of Computer Science, University of California,Santa Barbara, 1979.andM;[49] Weick, K.E.andP;  The Social Psychology of Organization.andP;  2nd ed.andO;Addison-Wesley, Reading, Mass, 1979.andM;[50] Weiss, D. M.andP;  Evaluating software development by error analysis.andP;  J.andO;Syst.andP;  Softw.andP;  1, 1 (1979), 57-70.andM;[51] Zmud, R.W.andP;  Management of large software development efforts.andP;  MIS Q. 4,2 (June 1980), 45-56.andM;CR Categories and Subject Descriptors: D.2.9 [Software Engineering]:Management: D.2.5 [Software Engineering]: Testing and Debugging; K.6[Management of Computing and Information Systems]: Project and PeopleManagement--Systems developmentandM;General Terms: Design, ManagementandM;Additiona Key Words and Phrases: Brook's Law, 90 percent syndrome, softwareproject teamsandM;TAREK K. ABDEL-HAMID is an assistant professor of information systems in theDepartment of Administrative Science at the Naval Postgraduate School.andP;  Hisresearch interests focus on software project management, system dynamics,expert simulators, and management information systems.andP;  Author's PresentAddress: Dept.andP;  of Administrative Sciences, Naval Postgraduate School,Monterey, CA 93943.andM;STUART E. Madnick is a professor of management science/informationtechnologies at MIT's Sloan School of Management.andP;  His current researchinterests include connectivity among disparate distributed informationsystems, database technology, and software project management.andP;  Author'sPresent Addess: Center for Information Systems Research, Sloan School ofManagement, MIT, E53-321, 50 Memorial Dr., Cambridge, MA 02139.andO;smadnick@sloan.mit.edu.andM;Permission to copy without fee all or part of this material is grantedprovided that the copies are not made or distributed for direct commercialadvantage, the ACM copyright notice and the title of the publication and itsdate appear, and notice is given that copying is by permission of theAssociation for Computing Machinery.andP;  To copy otherwise, or to republish,requires a fee and/or specific permission.andO;</TEXT></DOC>