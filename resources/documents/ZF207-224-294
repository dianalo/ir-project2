<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-224-294  </DOCNO><DOCID>07 224 294.andM;</DOCID><JOURNAL>UNIX Review  April 1989 v7 n4 p73(4)* Full Text COPYRIGHT Review Publications Co. 1989.andM;</JOURNAL><TITLE>Philosophical foolishness. (C Advisor) (humorous look atprogramming languages) (column)</TITLE><AUTHOR>Arnold, Ken.andM;</AUTHOR><SUMMARY>The philosophical nature of computer languages is humorouslypondered.andP;  Major programming languages are considered reflectionsof the times in which they came into vogue; FORTRAN, for instance,like the fifties, is rigid and procedural; LISP is thetranscendental-meditation language of the sixties; and BASIC isthe language equivalent of the utopian commune philosophy.andP;  The Clanguage can get programmers into trouble faster than other majorprogramming languages, and examples which illustrate this arepresented.andM;</SUMMARY><DESCRIPT>Topic:     Programming LanguagesC Programming LanguageProgrammersHistory of ComputingSoftware Engineering.andM;</DESCRIPT><TEXT>C ADVISORandM;Since this is April, I get to be a little unserious.andP;  The common thing to dowould be to write a column which looked normal, but actually contained someharmless misinformation that made you do much more work than you had to.andO;Then, three years from now, when someone looked at your code, they couldlaugh at how much more contorted it was than it had to be, and you would feellike an idiot, wondering where you had learned such a stupid thing.andP;  But, dueto the passage of time, you would have forgotten that it was here that youhad picked it up, and I would be able to safely snicker about how awful I hadmade lots of C programmers feel.andM;Unfortunately, due to malpractice law and the violent intercession of myeditor (from which I am still recovering) I can't do that.andP;  You will have tohave such tricks played on you elsewhere.andP;  Anyway, I'm sure you can find someother way to have your knowledge corrupted.andP;  Like my next column, forexample.andP;  [Don't bet on it if you want to keep your other leg.]andM;Instead, we will depart from the examination of code and tools to ponder thephilosophical nature of the computer language.andP;  What the heck--it beatswriting a real column.andM;For several years now, a friend of mine named Richard Curtis has beenpropounding the argument that the major programming languages reflect thetimes in which they came into vogue.andP;  It runs something like this:andM;* FORTRAN was like the fifties: it's rigid and procedural, and doesn't evendistinguish between cases.andP;  It's motto is: &quot;Do my thing&quot;.andM;* C is a real sixties language, because it just doesn't care.andP;  It doesn'ttype check, and it lets you get into as much trouble as you can--you own yourown life.andP;  C's motto: &quot;Do your own thing&quot;.andM;* Pascal is the seventies.andP;  It tries to seize control of the wild and woollysixties, without getting too restrictive.andP;  It thus ends up pleasing no one.andO;It's full of self-justification and self-importance--going from C to Pascalis like going from Janis Joplin to Donna Summer.andP;  It is smooth and flashy anduseless for major work--truly the John Travolta of programming languages.andO;The Pascal motto is: &quot;Do your thing may way&quot;.andM;* ADA is the eighties.andP;  There is no overarching philosophy; everything ispossible, but there is no ethical compass to tell you what ought to be done.andO;(Actually, I know of two things you can't do in ADA, but I'm not telling forfear they'll be added.)andP;  It reflects the eighties notion of freedom, which isthat you are free to do anything, as long as you do it the way the governmentwants you to--that is, in ADA.andP;  It's credo: &quot;Do anything anyway you want&quot;.andM;Those are the major languages, and their introduction roughly corresponds tothe epoch lines.andP;  But there are, of course, a host of other languages whichhave found their niches.andP;  Let's try to map them to subcultures of theparticular eras from which they came.andM;* LISP is the transcendental-meditation language of the sixties.andP;  With LISP,you don't write programs--you write programs that write programs.andP;  This senseof detachment allows you to float serenely above any pretense of writing codeand contemplate the inner beauty of statements about code.andP;  This is why LISPis a good Artificial Intelligence language--if a program written in LISP canever understand itself, we will have reached true cyber-nirvana.andM;* BASIC is the language equivalent of the utopian commune philosophy--anyoneequipped with a sharpened stick can cultivate the computer ground.andP;  What thecommune founders didn't tell you was that the BASIC stick was sharpened atboth ends, and that the way to push it into the ground was to sit on it.andP;  Atthis point I have no choice, according to the C Advisor Columnist's Code ofEthics, but to quote Dijkstra's definitive statement about BASIC: &quot;It ispractically impossible to teach good programming style to students that havehad prior exposure to BASIC; as potential programmers they are mentallymutilated beyond hope of regeneration.&quot;andM;* Forth is minimalist; it's a real personalized language.andP;  A good Forthinterpreter can be written in a week, so everyone can have one.andP;  Itrepresents the Bauhaus school of computer languages--it resembles thearchitectural style that dictated the creation of the Big Glass Boxskyscraper: clean, simple, and boring.andP;  Forth came along with the pocketcalculator, and really was an expansion of it.andP;  This places it squarely inthe Engineering Nerd subculture, which goes on forever, or at least seemsthat way.andM;* What such discussion would be complete without an analysis of APL?andM;* I don't know what to say about COBOL.andP;  It seems almost like a fortieslanguage--government-inspired, born of naive optimism and lots of enthusiasm.andO;Reading a COBOL program is like trying to watch complex graphics on one ofthe original TV's--if you squint your eyes and look sort of sideways and haveyour kids hold onto the rabbit ear antennas, you could get a vague idea ofwhat was going on, but you'd never really understand it.andP;  It was a promise ofthings to come, maybe, but is now antiquated and hard to use.andP;  This isprobably why it is still the choice of many business programmers.andM;That's all the languages I can think of to make snide remarks about for themoment.andP;  So let's start a deeper examination of C and what it all means.andM;The Meaning of CandM;Among the major programming languages, there is none that lets you getyourself in trouble faster than C, with the possible exception of assemblylanguage (which has led to the unofficial C Slogan: &quot;A language that combinesthe flexibility of assembly language with the power of assembly language.&quot;) andO;You can run pointers off the end of data, you can assign a char * to adouble, you can de-reference a char, you can take the address of a goto labeland start stuffing data into it.andP;  You can create code that is impenetrable tothe point of being amusing.andP;  (See, for example, the annual Obfuscated C Codecontest run by Chongo, where awards are given for code that exhibits new andexciting forms of incomprehensibility.)andM;The concept underlying C is that the programmers know what they're doing.andO;This is a wonderful concept if you do know what you're doing, but Hell OnWheels if you don't.andP;  This is why getting started in C involves a largelearning curve where you are bitten by lots of things you don't understand.andO;Then suddenly you achieve enlightenment as you come over the top of the hill.andO;It is an almost mystical experience, and many don't even notice they're thereuntil they're past it.andP;  One day you realize that your code actually workspretty easily; that it's been a couple of months since you forgot thatpointers and integers weren't the same size; that you haven't used &quot;=&quot; whereyou meant &quot;==&quot; in at least three minutes!andM;This is when you can start to consider yourself competent.andP;  You are not aGuru yet, but you are clearly on the way.andP;  To achieve Guru-hood, you must beable to write statements like: void *((**flp)[ARSIZE])(); without blinking,and be able to explain them unhesitatingly.andP;  You must be able to write macrosthat are inscrutable, yet elegant.andP;  The ?: construct must be second nature toyou, and the vagaries of the comma operator should be exploited cleverly.andO;You must be able to think in C, which may be hard on you during historytests: if (cur_prez == president(LINCOLN)) [ if ((child = fork()) == 0)execl(&quot;/virginia/richmond/confederacy&quot;, &quot;-p&quot;, &quot;davis&quot;, NULL); elsewait(andamp;victory); cur_prez-andgt;next = president(GRANT); cur_prez = cur_prez-andgt;next;] but anything that happened before 1 Jan 1970 is pretty irrelevant to theReal World anyway.andM;Of course, once you've achieved Guru status, you must speak in UnknownTongues to maintain your status as a Holder of Great Knowledge.andP;  Sentenceslike &quot;You fork an excecl of a cat onto a pipe, and then you stat the pipe&quot;,&quot;It's not an int star star; it's an int star star star&quot;, and &quot;Remember thedays before longs?&quot; must trip lightly from your lips.andP;  You must engage indebates over whether you pronounce char as the first syllable of &quot;character&quot;or the first syllable of &quot;charcoal&quot;.andP;  You must, above all, be able to invokeKandamp;R by chapter and verse (either edition) to support Talmudic distinctionsover the subtle meanings of certain obscure side effects of expressions.andP;  Italso doesn't hurt to say things like &quot;The other day, when Dennis and I weredoing lunch, he agreed with me that.andP;  .  .&quot;andM;Of coursE, true aficionados are quickly becoming C++ experts so that they cankeep ahead of the hoards of budding C experts.andP;  When this column becomes the&quot;C++ Advisor&quot;, you'll know it's time to switch.andM;Programming Tip of the MonthandM;Well, that's about the extent of our discourse on the philosophy ofprogramming languages as they relate to C.andP;  But it looks like we have alittle space here for a programming tip, so we'll just cover a quick one.andO;That way, this column won't be a total loss.andM;It is a little known fact that, despite the commonality of two's-complementmachines, there is some disagreement about the representation of somenumbers.andP;  For example, on a two's-complement machine, the representation of-1 is (in 8 bits) 11111111, whereas in a one's-complement machine it would be10000001.andP;  Generally speaking, you cannot rely upon the underlyingrepresentation of even integers (most people know already that floating-pointrepresentations vary widely).andM;Portability can be enhanced, therefor, if you don't use literal integers inyour expressions, but use the conversion routines for symbolic names toprevent any mix-up with the representation.andP;  For example, instead of thecommon i++; you should really say i +=atoi(&quot;1&quot;);.andP;  If you pass in a stringversion of the number you want, the atoi() routine knows how to decode itinto the true representation for the current machine (atoi() takes a stringas a parameter and returns the integer translation of it, halting its scan ofthe string at the first non-digit).andP;  Similarly, for relative comparisons youshould say if (countandless;atoi(&quot;10&quot;)).andP;  This kind of mechanism gives you maximumportability, and prevents subtle bugs that might pop up and bite you longafter you've written the code.andP;  Never be complacent about yourenvironment--it has a tendency to change when you least expect it.andP;  [Soundsgood to me.]andO;</TEXT></DOC>