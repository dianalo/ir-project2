<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-279-822  </DOCNO><DOCID>08 279 822.andM;</DOCID><JOURNAL>Government Computer News  March 19 1990 v9 n6 p56(2)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1990.andM;</JOURNAL><TITLE>Bringing UNIX into real time. (Unix for real-time applications)</TITLE><AUTHOR>Singh, Inder M.andM;</AUTHOR><SUMMARY>The Unix operating system is designed for time-sharing, whichmakes it poorly suited to such real-time applications as robotics,machine and process control, signal processing, command andcontrol, data communications and high-speed data acquisition.andO;Unix's portability secures software investments by allowingprograms to be upgraded to new hardware, and applicationsportability encourages development of standard real-timeapplications.andP;  There is a full range of program development toolsavailable for Unix, and its popularity assures that there are manytrained Unix programmers.andP;  Researchers have taken severalapproaches to modifying the Unix kernel to overcome itslimitations for real-time applications, but to succeed, sevenattributes are required: fast, deterministic response;user-specified, priority scheduling; full pre-emptible kernel;efficient I/O handling; from-the-ground-up design as a real-timesystem; compatibility with leading Unix versions; and full Uniximplementation.andM;</SUMMARY><DESCRIPT>Topic:     UNIXReal-Time SystemsApplications ProgrammingProgram Development ToolsEnhancementsSoftware ModificationProduct DevelopmentIndustry AnalysisSoftware Design.andM;</DESCRIPT><TEXT>Bringing UNIX Into Real TimeandM;Unfilfilled promises have brought confusion about the viability of UNIX forrealtime applications such as robotics, machine and process control, signalprocessing, command and control, data communications and high-speed dataacquisition.andM;UNIX, designed for time-sharing, is ill suited to real-time applicationsbecause it cannot provide fast, predictable response to external events.andP;  YetUNIX has many advantages.andP;  Its popularity has created many new applications.andM;UNIX portability helps preserve software investments and avoid obsolescenceas faster processors arrive.andP;  Hardware vendors do not have to develop a massof new supporting software for their new products.andM;Application portability, meanwhile, encourages software vendors to developstandard real-time applications for a wider market.andP;  The popularity of UNIXhas created a large pool of programmers who do not have to learn aproprietary operating system for each new real-time application.andM;UNIX also represents a good development environment with a rich set of tools.andO;That can be significant for applications where on-schedule projects are morethe exception that the rule, and where software development dominates systemcosts.andM;Finally, UNIX already has strong momentum for non-real-time systems in someof the same environments addressed by real-time operating systems, such asmilitary, scientific and factory settings.andM;Real-time UNIX facilities connectivity to other systems through suchprotocols as Ethernet, TCP/IP, Sun Microsystems Inc.'s Network File Systemand the Manufacturing Automation Protocol.andM;Several efforts have been undertaken to modify the UNIX kernel incrementallyto overcome its real-time limitations.andP;  While the response is much betterthan that of plain-vanilla UNIX, it still is an order of magnitude slowerthan mainstrea realtime operating systems and kernels.andM;Others have tried libraries of UNIX-like functions that add file systems andother features to real-time kernels.andP;  They do not come close to full UNIXcompatibility.andM;Another effort involves coupling a UNIX computer with a real-time kernelrunning on a separate processor.andP;  The UNIX-plus-kernel approach meansseparate operating environments, a complex communications link and loss ofportability.andM;To be a true real-time, UNIX-compatible operating system, a system needs allseven of the following attributes:andM;Fast, deterministic response.andP;  The fundamental requirement of a real-timeoperating system is to support applications that interact with the world andreact to events within bounded delays.andP;  That means dispatching a critical,high-priority task in response to an interrupt as quickly as possible,regardless of lower-priority tasks.andM;The shorter the worst-case response time, the wider the range of real-timeapplications.andM;With regular UNIX, the worst-case response delay can be measured in seconds.andO;Modifying the UNIX code can yield significantly better numbers in the 10millisecond to 100 millisecond range.andP;  Proprietary realtime systems andkernels deliver a millisecond or better response on similar hardware.andM;True real-time UNIX should deliver worst-case response of the same order asnon-UNIX real-time operating systems of similar functionality, or better than1 millisecond on a 1 MIPS processor.andP;  On a 25-MHz 68030 processor, it shouldbe around 200 microseconds.andM;User-specified, priority scheduling.andP;  A real-time application runs multipletasks with different requirements for time criticality and system resources.andO;For maximum control, the user must be able to set task priorities.andP;  Thehighest-priority task must be ready to run as soon as possible.andM;In contrast, UNIX, like most time-sharing systems, is designed to optimizethroughput and provide fairness.andP;  It recomputes priorities based on usage andensures all users get reasonable response.andM;Fully pre-emptible kernel.andP;  To ensure fast response, a true real-timeoperating system must be able to pre-empt an executing task quickly.andP;  Becausea task could be in the kernel executing a system call at any time, the kernelmust be fully pre-emptible without long critical sections where interrupts orcontext switches are disabled.andM;In the regular UNIX kernel, once a task issues a system call, contextswitches are disabled until the call is completed.andM;Efficient input/output handling and interprocess communication, includingmemory sharing.andP;  Real-time applications often interact with external devicessuch as sensors, analog-digital and digital-analog converters, motors andsolenoids.andM;Efficient interfacing to such devices is important.andP;  It should be easy towrite device drivers, preferably in a high-level language such as C.andP;  Thedevice driver interface should be well-documented.andP;  Overhead for accessingthe devices should be kept to a minimum, and interrupt latency kep low.andM;From-the-ground-up design as a real-time system.andP;  Inherent limitations, suchas the non-pre-emptible kernel design, mean that real-time UNIXimplementations with changes to the original ATandamp;T UNIX code have been unableto achieve the response of other real-time systems.andM;To get performance similar to that of proprietary real-time operating systemsand kernels, the operating system must be built from the ground up, designingin performance features and UNIX compatibility.andM;Compatibility with leading UNIX flavors and emerging standards.andP;  A truereal-time UNIX solution must be source code-compatible with ATandamp;T System VInterface Definition, Berkeley 4.3 and IEEE Portable Operating SystemStandard for Computer Environments (Posix) 1003.1.andM;Fl implementation of UNIX.andP;  Some real-time solutions use a subset of UNIX.andO;Worse, they may be UNIX-like but have some incompatible features.andP;  Oneadvantage of UNIX for real-time is such connectivity features as TCP/IPsupport over Ethernet, BSD sockets and NFS.andM;One strength of UNIX is its portability.andP;  A true real-time UNIX should besimilarly portable across hardware architectures and be  upported on suchmicroprocessors as the Intel 80386, Motorola 680x0 and the new RISCprocessors.andM;Inder M. Singh is president and chief executive officer of Lynx Real-TimeSystems, Campbell, Calif.andO;</TEXT></DOC>