<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF208-017-920  </DOCNO><DOCID>08 017 920.andM;</DOCID><JOURNAL>EXE  Nov 1989 v4 n6 pS10(2)* Full Text COPYRIGHT Process Communications Ltd. (England) 1989.andM;</JOURNAL><TITLE>PC Unix for developers. (why DOS developers should considerporting applications to UNIX)</TITLE><AUTHOR>Stott, Chris.andM;</AUTHOR><SUMMARY>Porting MS-DOS applications to UNIX is increasingly desirable asUNIX becomes more important in the microcomputer world.andP;  Many UNIXimplementations for 386 and 486-based microcomputers are nowavailable, and the merging of the source code base of UNIX andXENIX has produced a consistent interface.andP;  UNIX supportsmultitasking and multiuser applications and offers a powerfulfile-locking system.andP;  It is designed for systems with largesystems and supports the large amounts of memory and disk spacesupplied with today's high-end microcomputers.andP;  Thestandardization of UNIX is resulting an a 'portable' applicationprogram interface which reduces the need for extensive source-codemaintenance.andP;  A standard application binary interface is emerging,letting developers ship products that are guaranteed to run on anymicrocomputer UNIX system.andM;</SUMMARY><DESCRIPT>Topic:     UNIXSoftware MigrationProgrammingSystem SelectionOperating SystemsMS-DOS.andM;</DESCRIPT><TEXT>PC UNIX FOR DEVELOPERSandM;As the sales of UNIX for the super microcomputers (those based around theIntel 386 or 486 CPU) increase and the major microcomputer manufacturersstart to back UNIX on their top end machines, it is becoming important forsoftware developers to consider porting their mainstream products to the UNIXoperating system.andM;Contributing to the increasing sales of UNIX for PCs are the factors whichallow software developers to start to think of UNIX as a stable platform forwhich it is worth their while developing software.andP;  These factors include themerging of the PC UNIX source base (ie the merging of SCO XENIX with ATandamp;TUNIX) which has produced a consistent binary and application interface, andthe enhancement of the features available under PC UNIX which provide thecommercial software developer with the functionality required to writeapplications for today's PC users.andP;  Also, the increase in power ofsupermicros far outstrips the requirements of MS-DOS, first written for the8088-based PC.andM;This article describes some of these features and the standardisation of theoperating system interface.andP;  This will make the developer more confident thatsoftware he produces may have features unavailable to the DOS user and willwork across the whole range of PC hardware architectures.andM;UNIX FeaturesandM;The obvious features of PC UNIX which provide developers with the possibilityof producing software which is more 'marketable' than their DOS counterpartsare the ones that confront them when they first consider a UNIX system.andP;  Thesystem provides support for multi user applications and also supportsmultitasking.andP;  This means that with one software product the developer canproduce a package which is scalable, that is it can be shipped with supportfor different numbers of users and, therefore, can be priced incrementally.andO;Software developers can provide for passing data between users of theirsoftware and break into the 'groupware' market without addressing the problemof network programming.andM;Why is multitasking such an important part of many of the operating systemsin use today?andP;  It is not only because multitasking is necessary to supportmultiple users, it also provides the means to deliver a number of differentfunctions running simultaneously, and the appearance that the computer canget on with non-interactive tasks while the user continues to use anotherfunction (eg entering words into a document while calculating a largespreadsheet).andM;These are the main features of a UNIX system.andP;  With them come a plethora ofother features which allow the application developer to control hismultitasking application, including shared memory, semaphores, file locking,inter-process communication facilities (IPC) and file protection mechanisms.andO;The shared memory features of UNIX allow many processes to access the samedata space, protected from simultaneous access (if necessary) by the use ofsemaphores.andP;  These features can be used to quickly pass complete datastructures between co-operating processes.andM;LockingandM;File locking is an important requirement for any serious multiuserapplication, as many users may want to access the same piece of data in afile at any one time.andP;  UNIX files may be locked in total, or any number ofbytes at a time.andP;  The locks may either be mandatory, ie no access to thelocked region is allowed until the file or region is unlocked, or advisory,where the application is required to negotiate a locking protocol.andM;One of the oldest features of UNIX is its main IPC mechanism, namely pipes.andO;A pipe provides a FIFO stream of data between a number of processes.andP;  (AFIFO, First In First Out stack of bytes).andP;  Over the years these have evolvedin functionality and commercial usefulness.andP;  The named pipes that areavailable with UNIX today exist on the filesystem and are processindependent, that is any process (with permission) may read or write a pipewith a known name.andM;A prerequisite for a multiuser system is protecting data which exists infiles, from other users.andP;  On UNIX this has been achieved by the use of filepermissions and the concepts of 'user', 'group' and 'other' identification.andO;The 'user' is the file's actual owner and has usually created the file.andP;  The'group' is a set of users, and other' is everyone else on the system.andP;  Usersare identified by the '/etc/passwd' file, groups of users by the file'/etc/group'.andP;  Types of permission are read, write and executable.andP;  Using acombination of these mechanisms, a system administrators or application maycontrol the access or execution of a file by others on the system.andP;  UNIX,quite undeservedly, has acquired a poor reputation for file security, butthis is usually due to the abuse of passwords, of the file permissions, andthe abuse of the 'superuser' account which effectively overrides thepermission system.andP;  Today's PC UNIX systems are overcoming the abuse ofsecurity overrides by implementing security features as defined byspecifications on security issued by government bodies.andM;UNIX has always required a hard disk to exist, whereas DOS is continuallybeing extended to cope with the larger and larger disk drives that come withsuper micros.andP;  With today's cheaper disk drives, large hard disks (ie greaterthan 20 MB of storage) are commonplace on the higher performance PCs.andP;  UNIXcan deal with files as-large as the capacity of any 5.25&quot; disk drivecurrently on the market, and the theoretical limit is 2 GB (the size of asigned 32-bit long integer).andP;  There are facilities which exist in PC UNIXwhich allow new filesystem formats to be implemented within the kernel.andP;  Thefilesystem switch allows applications to use the standard UNIX system callsof open, close, read and write to access files on different filesystemformats, eg DOS, High Sierra for CD ROM, or Networked filesystems.andM;Multitasking systems are developing a reputation for requiring excessiveamounts of memory.andP;  This must deter the present day PC software developersbecause they do not see the purchaser of a PC system as one who buys amachine with 6 MB of memory and 120 MB of high speed Winchester disk drive.andO;Developers need their customer base to be large and the most common machinesin the marketplace today may have around 1 MB of memory and 40 MB of diskspace.andP;  PC UNIX for 386 and 486 systems minimises the memory usage for thetypical application by adopting advanced memory management techniques.andP;  Theuse of the demand page virtual memory features of the 386/486 chip allows aminimal part of the application to be resident in memory at any one time.andO;This provides for quick execution time and low memory overhead at runtime.andO;PC UNIX also uses a low overhead method of process inception.andP;  The 'fork'system call, used for process duplication, has often been criticised forproducing a high performance overhead on UNIX's ability to execute manyapplications quickly.andP;  Present day implementations of PC UNIX use thecopy-on-write 'fork' technology first adopted by BSD UNIX systems on DEC VAXminicomputers.andP;  Using this method a process is duplicated only by duplicatingthe process tables and context; the data is not copied until it is writtento.andP;  At this point copying is no greater an overhead than demand paging.andO;These memory management methods used by PC UNIX allow processes of a verylarge size to run even though there is not enough memory to hold the wholeprocess.andP;  This important feature allows the developer to ship hisapplications onto a range of PC hardware configurations.andM;Program InterfaceandM;A number of features have been discussed that an application developer couldcall on to produce products which would be richer in features and havegreater performance than those available on the DOS-based 386/486 PCplatform.andP;  However, another pressing concern for the developer is themaintenance required for his source code and the changes in the range ofhardware he has to support for his application to have a sufficient hardwarebase to make selling it worthwhile.andP;  To do this, the application developerhas to be confident of the stability of the operating system's ApplicationProgram Interface (API).andM;The currently available versions of PC UNIX provide the ATandamp;T defined System VInterface Definition (SVID) API.andP;  Today, however, various hardware supplierscommitted to open systems (the definition of an open system is a system thatis not tied to a single vendor but is backed by many vendors) have formed theX/OPEN Group and are working together with software vendors to define anoperating system interface specification that will be applicable to alloperating systems (not just UNIX).andP;  This effort will not produce a de factostandard, however, but will produce a guideline for application developers towork to.andP;  Many operating system vendors today have backed the IEEE POSIXstandard portable operating system effort.andP;  This standard API is not just forUNIX systems but for operating systems in general.andP;  Hence we see Microsoftproducing a POSIX-compatible OS/2, DEC producing a POSIX-compatible VMS etc.andM;Application developers are thus being offered increasingly 'portable' APIs,ie APIs that will exist on many different hardware/operating system bases,which will allow them to develop software for a number of different systems.andO;PC UNIX offers a precursor to the standards, ieSVID, but the most recentofferings in the marketplace are the first to begin to comply with POSIX andX/OPEN requirements.andM;VolumeandM;However portable an API that an application is written to, a softwaredeveloper's money is made by shipping volume product.andP;  In the PC world thisis especially so.andP;  Therefore, what a developer really needs to see on astandard hardware base is a standard software Application Binary Interface(ABI).andP;  Up to now that has been (on Intel based PCs) the DOS- defined ABI tothe Intel microprocessor.andP;  One of the main reasons for not mass producingproduct to the PC UNIX ABI is that there used to be many offerings in themarketplace.andP;  ISC's 386/ix and SCO Xenix System V version 2.3, to name two,used to have different ABI's.andP;  The SCO Xenix ABI is called x.out and the UNIXABI is COFF.andP;  The latest versions of PC UNIX, based on the merged source fromATandamp;T, SCO, and Microsoft, support both COFF and x.out on the Intel386/486-based PCs, so the developer can now ship products in either formatand be sure that his product will run on any PC UNIX 386/486 operatingsystem.andM;Strengths of DOSandM;One of the strengths of DOS-based PC systems that developers have become usedto is how easy it is to obtain maximum performance of their applications byaccessing hardware directly rather than through the DOS-defined API.andP;  Suchmethods are commonly used in applications with attractive user interfaces orgraphics based applications.andP;  In a multiuser and/or multitasking environment,users must be protected against other users or processes crashing the systemwhilst they are using it.andP;  PC UNIX is no exception.andP;  It uses the IO andprocess protection schemes available in the 3860486 processor to protectprocesses from each other and from corrupting data on attached devices, egdisk drives.andP;  For this reason the application developer may feel that he willnot get the performance the market requires from his PC UNIX basedapplication.andP;  This may mean that the developer needs to write UNIX kernelbased drivers which are associated with his application, or perhaps, herequires a new filesystem format to implement, say, a database or some otherapplication.andP;  The problem with writing drivers for the UNIX kernel is thateach kernel that one comes across has slightly different routine interfacesfor doing the same thing, eg locking resident a page of memory or mappinglogical addresses to physical addresses.andP;  With PC UNIX System V 386, theseroutines are the same and the offerings on the market are driver sourcecompatible as long as they are based on the ATandamp;T UNIX System V 386 version3.2 source.andM;The PC UNIX market place is keeping up with developments in the rest of theUNIX world.andP;  These developments include comprehensive networking support,graphical interface APIs, support for 8-bit and 16-bit character sets amongstothers.andP;  The X/OPEN group have published an API for the networking featuresin the latest release of their Portability Guide (version 3).andP;  This API iscalled XTI (X/OPEN Transport Interface) and is a slight variation on thatdefined by ATandamp;T in UNIX System V release 3.2 (called TLI - Transport LayerInterface).andM;On the graphical interface side a variation of the X-Windows system isbecoming an increasingly strong candidate for the standard API for UNIXgraphical user interfaces.andP;  However, a major decision will need to be made bythe application developer.andP;  He will need to determine which API to developgraphical applications for-Presentation Manager or an X-Windows standard.andO;Presentation Manager is Microsoft's GUI for OS/2.andP;  In the applicationdeveloper's eyes it will be very difficult to choose between learning the'standard' X Windows API and learning the Presentation Manager API because ofthe significant investment required for learning either.andP;  In this emergingmarket place it will be the suppliers who come out with popular solutionsfirst who are likely to win the lion's share.andM;ConclusionandM;PC hardware manufacturers are the driving force behind the operating systemstandards that application developers will need, in the future, to be able toinvest in application software development for the new powerful PCs.andP;  UNIX iscurrently leading the field in the implementation of these standards.andP;  PCUNIX, with its conformity in ABI and increasingly standard API, provides anideal starting point for the application developer to start moving hisapplications from the standard of the past (DOS) to the standards of thefuture (POSIX compatible operating systems).andM;Coupled with the standard API, the features of UNIX allow the applicationdeveloper to produce software with more sophisticated features and higherperformance on the new range of personal computers.andM;Chris Stott is with the Santa Cruz Operation based in Watford, Herts.andO;</TEXT></DOC>