<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-551-566  </DOCNO><DOCID>08 551 566.andM;</DOCID><JOURNAL>Dr. Dobb's Journal  June 1990 v15 n6 p40(5)* Full Text COPYRIGHT Mandamp;T Publishing 1990.andM;</JOURNAL><TITLE>Building an efficient help system: knowing how help files and thehypertext engine interact is essential. (includes related articleon functioning of the HELPMAKE utility) (tutorial)</TITLE><AUTHOR>Notenboom, Leo; Vose, Michael.andM;</AUTHOR><SUMMARY>The architecture of a hypertext-based on-screen help facility isexplained using Microsoft's Advisor software as an example.andO;On-screen and help-systems have become a standard component ofsoftware packages, but such systems are not useful if they do notprovide the needed information quickly.andP;  Hypertext technology canimplement the organizational and speed requirements of helpsystems.andP;  The effecting relationship between an area on the screen(a 'button') and a help screen may be an implicit link, wherein anapplication looks up and displays help text for a selected word,or an explicit link, wherein help text relates to a region of textin the application.andP;  A help file consisting of one or more helpdatabases of words and related help text maps their relationships.andO;A 'help engine' is a data retrieval tool that effects a search forthe help text strings related to a button.andM;</SUMMARY><DESCRIPT>Topic:     HypertextApplicationsUser AidsSystem DevelopmentTutorialFunctionsImplementation.andO;Feature:   illustrationchartphotograph.andO;Caption:   The look-up tables for mapping context strings to topic text.andO;(chart)The help engine's place within the hierarchy of an application.andO;(chart)andM;</DESCRIPT><TEXT>Building an Efficient Help SystemandM;On-screen documentation has become ubiquitous in contemporary software, frombusiness applications to programming tools.andP;  Like anything else, the qualityand usefulness of this aid varies from package to package.andP;  The technology ofhypertext, however, promises to solve many of the organizational and speedproblems currently found in some on-screen help systems.andM;On-screen documentation is useless unless it makes finding information easy,provides that information quickly, and delivers all the information usersneed.andP;  Some kinds of information -- command references, API references,example code, and the like -- lend themselves more readily to on-screen helpthan do others.andP;  Hypertext can equip a help-system programmer with the toolsneeded to create on-screen documentation that is fast, easy to navigate (eventhrough voluminous text), and comprehensive.andP;  Hypertext isn't magic; it'sactually quite a simple idea.andP;  In a help system, it's the association of aprogrammed action with an area of viewed text.andM;This article explains how help files and the hypertext help engine of atypical hypertext-based on-screen help system fit together, using theMicrosoft Advisor as the example.andP;  With an understanding of how thistechnology works, you can use it and associated tools to add on-screendocumentation to your libraries and programs or access on-screen helpprovided by any other program that uses similar technologies.andM;Hypertext in ContextandM;As already defined, hypertext is simply the association of an action with anarea on the screen.andP;  Thus a &quot;button,&quot; which is just a visible region on ascreen, might have associated with it the action of looking up help text on apredefined string of characters.andP;  When a user selects the button, theassociated help text is located and displayed.andM;In practice, this movement between help screens via buttons or an action suchas pressing a help key is generally referred to as a link or cross-reference.andO;There are two primary types of links:andM;Implicit LinksandM;When a user selects a word on the screen and requests help by pressing F1 orclicking a mouse, the application looks up help on that word and displays theresulting help text.andP;  Within the help text itself, a user can place thecursor on any word within the help text and press F1 again to get furtherhelp.andP;  This second lookup operation is made possible by implicit links.andM;Explicit LinksandM;Encoded by the help file author, explicit links specify a region within thetext (often represented by a button) and the help text to which that regionrefers.andP;  For example, a help screen may present an area labeled andless;Exampleandgt;that was defined by the help author to be linked to the phrase abs.example.andO;When the user selects that button, the application looks up the phraseabs.example, nd displays the resulting help screen.andM;Explicit links come in two flavors -- normal and local.andP;  Normal explicitlinks operate exactly as in the previous example.andP;  They differ from localexplicit links in that they can reference different help files from the oneactually containing the button.andP;  Local explicit links, on the other hand, arerestricted to linking to help text present in the same help file as thatcontaining the button.andP;  As we'll see later, local links have advantages anddisadvantages.andM;To implement these hypertext links to assist users in navigating help text, ahelp-system author can benefit from understanding the data structure known asa help database.andM;Help Files and DatabasesandM;To make on-line help fast requires a way to quickly map individual words orphrases to some textual or graphic information.andP;  Associating the explanatorytext or graphic information with more than one word or phrase may also benecessary.andP;  The help file contains the information that allows help retrievalto be both fast and flexible.andP;  A help file comprises one or more helpdatabases.andP;  A help database contains the words that help is available for andthe information associated with those words.andM;The words and phrases for which help can be requested, called &quot;contextstrings,&quot; and their associated help text, referred to as &quot;topic text,&quot; areauthored using a text editor or word processor and are compiled into helpfiles using the HELPMAKE utility.andP;  HELPMAKE creates the links between thecontext strings and topic text and also compresses the topic text.andP;  HELPMAKEcan also decompress, or &quot;uncompile,&quot; an entire help file into its original,editable form.andP;  (See the accompanying text box, &quot;Turning the Tables&quot; forinformation about the structure of a help database and the techniques used tocompress it.)andM;During help-file compilation, the actual connections between context stringsand topic text are made through a series of three lookup tables used by theAdvisor when a help request is made (see Figure 1).andP;  The context stringssupported by the help file are stored as a simple array in the first table,and the help text contained in the file can also be viewed as an array oftopics.andP;  The job at lookup time, then, is to map the given context string tothe correct piece of topic text to which it refers.andM;The first table, the context-string table, is just a simple array of contextstrings.andP;  The index of a string in this table comes its &quot;context number.&quot;andO;The second table maps the context number to its corresponding topic.andP;  theentry indexed by the context number in this &quot;context map&quot; contains thecorresponding &quot;topic number.&quot;andP;  The last table maps the topic number to theactual position within the help file that contains the topic text.andP;  From thislast table, the compressed size of the topic can be calculated (thedifference between two successive file offsets; this number can then be usedfor memory allocation) along with the predicted end of the help file (thefile offset of the last-plus-one help topic used for concatenated help files,described later).andM;The Advisor optimizes this lookup process by loading the mapping tables (andthe decompression tables described in the text box) into memory once,wherever possible, and leaving them there until the application instructs itto discard them.andM;Because a context string is transformed into a number representing itsposition in the context-string table, an application can discard this stringonce the transformation has been made.andP;  In fact, this context number isreturned to the appliction in a form that also identifies the specific helpdatabase to which it applies when more than one help database is being used.andO;This context number can be used to map backward if necessary to determinewhat string was originally looked up and what database it came from.andM;One special type of context number provided by the Advisor for the applicatinis called a &quot;local context number,&quot; or simply &quot;local context.&quot;andP;  Localcontexts are not associated with a context string; rather, they are directlyencoded with the desired topic number.andM;Local contexts are identified by the help-file author at the time the file iswritten and are compiled specially by the HELPMAKE utility.andP;  Explicit linksoften use local contexts instead of normal contexts because the 2-byte topicnumber with which a local context is encoded is much smaller than the stringnormally coded into an explicit link.andP;  The only restriction on local contextsis that explicit links that reference local contexts must have the topic textassociated with each local context present in the same hlep database.andM;Multiple help databases can be concatenated to form a single help file for agiven application.andP;  When a help file is opened, the hypertext system, usingthe three tables previously mentioned, examines what should be the end of thedatabase in that file.andP;  If instead it finds the beginning of another helpdatabase, it opens that as well and repeats the end-of-database examination.andO;By repeating this operation, multiple help data files can be combined simplyby using MS-DOS Copy command, and even applications that support only onehelp file can be &quot;fooled&quot; into using several help files disguised as one.andM;The Help EngineandM;The help engine is nothing more than a data retrieval tool.andP;  The engine takesa string and maps it to the appropriate topic text.andP;  It simply searches thedata structure that is a help file and makes the desired informationavailable to an application.andM;The Advisor help engine knows very little about its environment -- except forthe OS/2 version, which does make some assumptions about memory managementand file I/O.andP;  The MS-DOS version of the help engine relies on theapplication to handle memory management and file I/O.andM;The engine enforces the help-file format and its data structures but leavesdeterminations about how to use retrieved data to an application.andP;  The helpengine has to be told what help files to deal with, and an application canspecify multiple help files.andM;In addition to routines to query for and retrieve help text, the help engineprovides routines that the application must use to perform decompressionafter the topic text has been located.andP;  The help engine also has routinesthat an application can query to discover if a topic has cross-references orto read only the color or control information in a topic.andM;The help engine uses application-provided handles for memory management andfor file I/O and can therefore deal with many different memory and I/Oschemes.andM;The Application's JobandM;The application program that uses the help system must perform severalimportant functions of its own (see Figure 2), including providing the userinterface to the help system and supplying the interface to its environment.andM;The most important of these functions is the user interface for displayinghelp information and interacting with the user and the help screens.andP;  Theapplication defines what text gets parsed into a context string when a helprequest is made, and it then passes that string to the help engine, whichmounts the search for that string.andP;  For example, if the cursor resides on amenu or an open dialog box, the application's parser must be able to decideif help is appropriate for that object.andP;  The application also interprets allcontrol and cross-reference commands, as well as handling multiple helpfiles.andP;  For example, if an application has five open help files and a userasks for help on a string, the application must use the Advisor to query eachhelp file in turn to find the desired string match.andM;The application must also handle failures and be able to display a message orbeep the speaker when no help is available.andP;  Conversely, the application mustdetermine what action to take if there is help on the same context string inmore than one help database.andM;In addition, the application must process control information.andP;  The Advisoroffers a history function that lets a user move backward through the 20 mostrecently viewed help screens.andP;  Because the context numbers returned by thehypertext system uniquely identify each help database and context string, thehistory function simply keeps a circular queue of the 20 most recentlyaccessed context numbers.andP;  The application must provide a keystroke orclickable screen button to engage this history function.andP;  The applicationparses a history request and then calls the help engine's history function toretrieve and display previous help screens.andM;Under MS-DOS, the application must also provide the interface between theAdvisor and its environment, including memory management and all direct fileI/O support.andM;Taking AdvantageandM;The hypertext technology described here can be leveraged in two ways: Bysupplying supplemental help files for use by applications using the hypertextsystem and by incorporating the system into new applications.andP;  Supplementalhelp files offer the ability to customize and expand on-line help to fill avariety of needs.andP;  New applications being written can benefit from theenforced consistency in file format in that all help files can be used by anyapplication that also uses the Advisor.andP;  This technology also provides asimple framework for implementing hypertext in any application and provides apainless way to compress text without any significant access-speed penalties.andM;Searching for information was the primary application of computers from thebeginning.andP;  Today's hypertext-based on-screen help systems can begin to makethe information that people need the most more readily accessible than everybefore.andM;Leo, a software development engineer and manager for Microsoft, is thedesigner of the Microsoft Advisor.andP;  Michael is a coeditor of OS/2 Reportnewsletter.andO;</TEXT></DOC>