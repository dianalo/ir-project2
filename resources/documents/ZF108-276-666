<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-276-666  </DOCNO><DOCID>08 276 666.andM;</DOCID><JOURNAL>IBM Systems Journal  March 1990 v29 n1 p90(16)* Full Text COPYRIGHT International Business Machines Corp. 1990.andM;</JOURNAL><TITLE>Porting DPPX from the IBM 8100 to the IBM ES/9370: feasibility andoverview. (DPPX operating system)</TITLE><AUTHOR>Abraham, R.; Goodrich, B.F.andM;</AUTHOR><SUMMARY>The DPPX/SP operating system was converted from its originalimplementation on the IBM 8100 Information System architecture toa new implementation - DPPX-370 - on the System/370 architectureof the ES/9370 Information System processors.andP;  Portability was notan original design objective for DPPX, and yet the conversion ofthe operating system was straightforward and successful.andP;  Thispaper investigates the design fundamentals and technicalapproaches that led to the successful porting of DPPX/SP to theES/9370.andP;  (Reprinted by permission of the publisher.)andM;</SUMMARY><DESCRIPT>Product:   IBM ES/9370 (Mainframe computer) (programming).andO;Topic:     Operating SystemsConversionProcessor ArchitectureCase StudyMethodsPerformanceSoftware Migration.andO;Feature:   illustrationchart.andO;Caption:   A typical DPPX network. (chart)I-O layer structure. (chart)Minimal changes required for multiprocessing. (chart)andM;</DESCRIPT><TEXT>Porting DPPX from the IBM 8100 to the IBM ES/9370: Feasibility and overviewThe DPPX/SP operating system was converted from its original implementationon the IBM 8100 Information System architecture to a newimplementation--DPPX/370--on the System/370 architecture of the ES/9370Information System processors.andP;  Portability was not an original designobjective for DPPX, and yet the conversion of the operating system wasstraight-forward and successful.andP;  This paper investigates the designfundamentals and technical approaches that led to the successful porting ofDPPX/SP to the ES/9370.andM;In 1978 IBM announced the IBM 8100 Information System and the DistributedProcessing Programming Executive (DPPX) operating system.andP;  These productswere designed to provide distributed processing capabilities in a centrallycontrolled and managed network.andP;  The 8100 processors were relativelyinexpensive, occupied little space, and were capable of being run in anoperatorless environment.andP;  The control in an operatorless environment wasdone by providing such features as autolIPL after power failure, softwarecontrolled reIPL, and extensive error notification prior to hard failure,DPPX was similarly designed to operate in a centrally controlled network.andP;  Noprogrammer or operator was required at the remote sites.andP;  This capability wasunique within the IBM product line and generally throughout the industry.andO;These hardware and software products were improved and expanded up throughthe announcements of the 8150 multiprocessor in 1983 and the DistributedProcessing Progamming Executive System Product (DPPX/SP), Release 4, in 1987.andO;DPPX/SP had by then grown to over one million lines of code.andP;  At this time,there were many hundreds of customers worldwide running a total of manythousands of DPPX systems, some with individual networks of hundreds of DPPXnodes.andP;  The smooth operation of their businesses was dependent on DPPX/SP andthe 8100.andM;A typical network is shown in Figure 1.andP;  In this example, the host system isan MVS (Multiple Virtual Storage) complex.andP;  There is one or more central 8100system for application development, initial service installation, and pilottesting.andP;  The central system is used to create a master copy that isreplicated to the remote systems.andP;  The remote network consists of many 8100s.andO;Corporate data can be kept in the remote processors or may be kept in masterfiles at the host.andP;  Transactions are run in the 8100, and they in turn caninteract with host transactions on either the Information Management System(IMS) or the Customer Information Control System (CICS).andP;  Additionally,terminal users on a remote system can directly access applications on eitherthe host or other remote systems.andP;  Network management programs on both thehost and the remote systems are coordinated with one another to keep thecentral network operator informed of any problems.andP;  A more detailed overviewcan be found in Reference 1.andM;During this same time period (1983 to 1986), IBM was struggling with havingtoo many hardware and software systems with similar processing power andfunction.andP;  In addition to the 8100 there were the System/36, the System/38,the Series/1, the 4300 family, and even the personal computer, with a totalof ten operating systems among them]  Ohter products had in fact added manyof the features that had made DPPX and the 8100 unique.andM;Beginning in 1986, IBM made four significant announcements: (1) In March 1986IBM announced that the 8100 hardware line would not be expanded.andP;  IBM wouldinvestigate moving DPPX/SP to System/370 processors.andP;  (2) In October 1986 theIBM ES/9370 processors were announced.andP;  These provided many of the samefeatures that made the 8100 attractive for distributed processing but withinthe framework of System/370 architecture.andP;  (3) In March 1987 IBM announcedthat the investigation of moving DPPX/SP to System/370 was successful and IBMintended to provide a version of DPPX that ran on the ES/9370 processors in1989.andP;  (4) In March 1988 IBM made a formal product announcement of DPPX/370,the version of DPPX that executes on the ES/9370 family of processors.andO;DPPX/370 [2] was made available to customers in December 1988.andM;Moving DPPX/SP to the ES/9370 family offered customers the advantages ofpreserving their investment in software and training while at the same timeallowing them to use the System/370 family of processors, a family with largegrowth potential and capable of supporting several different operatingsystems.andM;Portability was not an objective of the original DPPX desing.andP;  The decisionto do the port was done only after extensive examination of the alternativesand thorough planning of how the port would be accomplished.andM;The alternativesandM;Before deciding that DPPX/SP must be ported to System/370, extensive analysiswas done on the feasibility of providing migration tools that would allowcustomers to migrate to other IBM systems.andP;  DPPX/SP customers have largeinvestments in their application programs.andP;  Some customers have many millionsof lines of application code.andP;  Any alternative to DPPX/SP would have toprovide a clear and clean migration from DPPX/SP.andP;  A number of alternativeIBM operating systems were investigated.andM;There are many attributes of operating systems that make each one unique.andO;During the study several major areas stood out that prevented us fromproviding a general migration path from DPPX to another operating system.andO;Typical customer applications were structured in ways that depended on thefollowing facilities.andM;* Data Base Manager.andP;  DPPX Data Base Manager (DBM) provides indexed,sequential, and random access to data.andP;  It allows up to eight indexes anddoes not require any to have unique keys.andP;  When index tree structures becomeunbalanced or when room to insert new records is no longer available, theindex or data structure is reorganized automatically, while still on line.andM;* Transaction Processing Manager.andP;  DPPX Transaction Processing Manager (TPM)allows a large number of users to share relatively limited storage resources.andO;It provides recovery scope management, which allows all actions taken by atransaction to be viewed by all other users as a single, atomic operation.andO;That is, all database updates are made visible together when the transactioncompletes successfully, and none is made visible if the transaction signalsan error or if the system should fail.andP;  It provides the ability to keep atransaction's recovery scope open across several terminal interactions.andP;  Itprovides the ability to create work for another user or terminal (orprinter), all under the control of the originating user's recovery scope.andM;* Display Manager.andP;  DPPX Display Manager allows programmers to interactivelydescribe the layout for variable data and static descriptive text.andP;  It savesthis information in data sets known as maps.andP;  When the application programruns, the display manager merges maps with the variable data provided by theapplication program to write panels on display terminals and output toprinters.andP;  For input operations it does the reverse, separating data enteredat the terminal from the static text and delivering the data to theapplication in an easy-to-use format.andM;* Unattended operation.andP;  There are many functions in DPPX/SP that allowunattended operation.andP;  These include components that interact with the DSX,[3] HCF, [4] and NetView[tm] [5] products of the host.andP;  DPPX/SP service isprovided in a format that allows simple distribution, installation, and, ifnecessary, backout on remote systems.andP;  Service can be installed while theysystem is on lineandgt; it is activated by a remotely requested,software-initiated IPL (Initial Program Load).andP;  If the newly providedprograms fail, a reIPL can be automatically triggered to reload the oldversion of the syste.andP;  Disk shadow volumes can be provided to protect againstdisk failures.andM;* embedded commands.andP;  DPPX/SP commands can be embedded in applicationprograms.andP;  As an example, a transaction program can contain a DEFINE.DATASETcommand, then proceed to write into the data set, and then issue aSUBMIT.BATCH command to submit that data set as a batch job.andM;* The router.andP;  The router allows a user at a single IBM 3270 terminal to belogged on concurrently to several different applications of differentprocessors in the SNA (Systems Newtwork Architecture) network and to switchamong them at any time.andP;  It is in many ways similar to the multiple-sessioncapabilities of the IBM 3270 PC or the IBM 3194 display.andM;These facilities and other user requirements were matched against otheroperating systems, and no suitable match could be found.andP;  The other operatingsystems did not have the centrally managed, unattended environment of DPPX,and their application program interfaces were significantly different.andP;  Theeffort for IBM to alter a potential target operating system to provideequivalent support, or for customers to recode around the missing function,was deemed too expensive or disruptive to the customer to be a viablealternative to actually moving DPPX/SP to the ES/9370.andM;What makes DPPX/SP portable?andM;There are many success stories for operating systems that did haveportability as an objective, either originally or during some intermediatereimplementation.andP;  Perhaps most notable of these is UNIX[R].andP;  [6]  DPPXinstead was designed to be extendable and reliable and was implemented in amanner to provide high productivity.andP;  It is these attributes that have madeit portable in practice, though not in intent]andM;The extendability objective led to a highly structured design that providesI/O services via layers of components.andP;  The lowest layers deal with physicalI/O concerns, whereas the upper layers deal with ever-increasing generality.andO;The layers have highly architected interfaces that force any given layer tobe implemented independently of its surrounding layers.andP;  The layers for aparticular connection between a program and the I/O device are chosen anddynamically bound together at &quot;open time,&quot; using information provided by theprogram and, optionally, the user (Figure 2).andP;  A more detailed descriptioncan be found in Reference 7.andM;Furthermore, the reliability objective led to a highly structured design.andO;Components tended to encapsulate data that they controlled, not externalizingtheir internal structure to other components.andP;  Interfaces between componentswere strictly monitored during the development of DPPX/SP to prevent numerousprivate protocols from being invented.andM;Last, the high productivity objective led to the exclusive use of a singlehigh-level language for implementation.andP;  The language used was PL/DS,available externally as part of the Distributed Processing DevelopmentSystem.andP;  [8]  This, plus extensive rules for standardized module prologs,copious comments, and structured programming led to a standardizedprogramming style across a large programming organization.andM;DPPX benefitted from these objectives long before the port to the ES/9370 wasundertaken.andP;  Major functions and complex hardware support were continuallyadded to DPPX/SP for a relatively small amount of programming cost.andP;  Some ofthe functions include the following.andM;* Added support for attached processor and multiple processor architectures.andO;The strict interfaces requirements isolated components that managed theprocessors and the actual I/O devices.andP;  The changes required to assure thatI/O requests were executed on the processor side that attached the desireddevice were limited to just these two areas (see Figure 3).andP;  There were nochanges required in application programs.andM;* Change in address space structure.andP;  The 8140 Model C processor quadrupledthe amount of logical storage available, and the 8150 processors changed thestorage protection scheme from a nested format to a keys-and-locks format.andO;Both of these changes were accommodated for relatively minor amounts ofprogramming because of the strict adherence to component boundaries.andP;  Again,there were no changes required in application programs.andM;* The insertion of new layers to provide additional function.andP;  The disk I/Opaths have had two additional layers added without requiring any change touser programs and minimal changes elsewhere (see Figure 4).andP;  One new layerprovides the DASD cache function, increasing performance by using otherwiseunused main storage to hold an image of most recently used disk records.andP;  Theother new layer provides the DASD shadow function, which provides increasedreliability by duplicating one volume on a backup (shadow) volume.andP;  Allwrites are done to both volumesandgt; reads are done from either.andP;  In the event ofa disk failure, the remaining volume is automatically used until the brokenone can be repaired.andP;  Once again, there were no changes required inapplication programs in order to take advantage of these additions.andM;* A new communications protocol.andP;  The OSI (open systems interconnection) X.25communications protocols were inserted without the need to change majorportions of the other communication I/O layers.andM;* Tolerance toward personnel turnover and changes of responsibility.andP;  Theprogrammers and sometimes even development locations for nearly every moduleof DPPX have changed since DPPX was first implemented.andP;  The single high-levellanguage and strict adherence to programming standards have made thosechanges much less disruptive than they would otherwise have been.andM;The extendability and reliability objectives had the same effect for the portas they did for the 8100 product.andP;  although the System/370 architecture ofthe ES/9370 processors is radically different from the 8100, the componentsneeding major changes were limited to a relative few (Figure 5).andP;  These were:andM;* Supervisor.andP;  The major areas needing change involved interrupt handlers andserialization, storage mapping, and timer formats.andM;* I/O Adapter Services (IOAS).andP;  Changes were needed for different statusreorting mechanisms from devices, different low-level command formats andfunctions, and use of real addresses for I/O rather than logical addresses.andM;* Data management.andP;  The fixed block architecture (FBA) for System/370 disksdid not support the 256-byte block size that was standard for 8100 disks.andP;  Asa result, the lower layers of data management were changed to simulate the256-byte interface to upper layers when necessary.andM;Similar changes were required in the DPPX/SP standalone utilities.andP;  Theextensive use of a Programming Language for Distributed Systems (PL/DS)allowed most components to be recompiled using a new PL/DS compiler targetedfor System/370.andP;  Since the PL/DS language allowed programmers to &quot;drop down&quot;to machine instructions (within a macro) for functions not supported by thelanguage, some programs had to have these few lines recorded.andM;In the course of porting, other changes were made to the operating system.andO;Most of these were done to remove previous implementation constraints.andP;  Forinstance, the size of an important systemwide identifier (the environment id)was changed from 8 to 16 bits.andP;  Although not strictly required for the port,this was done in recognition of the full range of processing power availablein the System/370 product line power available in the System/370 productline.andM;This change, although bothersome at the time, would be a major change tointroduce if needed at a later time.andP;  It was quite simple to do when theentire system was being recompiled and retested anyhow.andP;  Another such changewas for the DATE function to return four digits of the year rather than husttwo.andP;  The year 2000 looms near, and it is no longer acceptable to assume theyear falls within the 1900s]andM;The remainder of this paper describes the feasibility and results of portingthis large operating system.andM;Feasibility of portingandM;Code classification.andP;  an early feasibility study of porting DPPX examinedeach DPPX/SP base system component (and licensed programs) and identifiedareas with the following requirements:andM;* Redesign (high-level design necessar for hardware, RAS [Reliability,Availability, and Serviceability], etc.andgt; inspection of component structurerequired because of changed module-to-module interfaces)andM;* Rewrite (only low-level desing necessaryandgt; some changes necessary forhardware, RAS, etc., but no change to module-to-module interfaces)andM;* Recompile (little or no change, affected only by items in a checlist)andM;Estimates were made of thousands of lines of code (KLOC) in each category pereach system component.andP;  These were continually refined throughout theimplementation cycle.andP;  An early estimate for the DPPX/370 base system(exluding licensed programs, such as the COBOL compiler) is shown in Table 1.andM;Programmer productivity.andP;  An estimate of programmer productivity rates ishown in Table 2.andP;  These productivity rates translate to an overallproductivity rate of 6204 shipped source instructions (SSI) per programmeryear, or 1440 changed source instructions (CSI) per programmer year.andP;  Thisincludes development activity for high-level design, low-level design, code,functional verification (FV) tes, independent component tes, [9] and supportof system test, based on the following assumptions:andM;* Redesign is the same as crating anew and could occur at the prevailing ratefor DPPX-SO 8100.andM;* Rewrite could occur at a faster rate due to a well-defined list of changesto be made to well-structured and well-commented code by an experienced teamfamiliar with each component.andP;  Also, only the changed code flows would be FVtested.andM;* Recompilation could occur at a very fast rate.andP;  This was based on thefollowing:andM;* A reliable System/370 compiler would be available.andM;* No code changes would be necessary to the majority of DPPX moduled for asuccesfful compilation.andM;* No specific FV test would be required for these recompiled modules.andM;* No additional system interface changes would be needed other than the feworiginally defined.andM;Implementation compilerandM;Compiler choices.andP;  Various technical approaches had to be considered.andP;  One ofthe most important to the sucess of the project was the choise of theimplementation compiler.andM;Over 90 percent of DPPX/SP 8100 had been coded using the Programming Languagefor Disturbed Systems (PL/DS), which was also available to DPPX/SP customersas Programming RPQ P88016.[8]  The PL/DS language provides PL/I-like codingpower and is very similar to the Programming Language/Systems (PL/S) andProgramming Language/Advanced Systems (PL/AS) languages used internally byIBM to produce other Systems/370 operating systems and control programs.andP;  Itis a high-level programming language with preprocessor-like macro support,and provides simplified intramodular linkage for programs that will beexecuted under DPPS/SP.andP;  PL/DS provides and optimization option thatgenerates highly optimized code, allowing a skileed PL/DS programmer toproduce very efficient code.andM;A task force consisting of DPPS/SP designers and developers, a PL/DS expert,and a PL/AS expert defined the recompilation requirements and consideredthree compiler alternatives.andM;The recompilation requirements were:andM;1.andP;  Generate optimal System/370 object code.andM;2.andP;  Support structured declarations of registers of length 1, 2, or 4 bytes.andM;3.andP;  Map 8100 registers to System/370 registers and generate System/370 codesequences that simulate the register operation of the 8100.andM;4.andP;  Support assignment and comparison statements of all bits (that is, notjust 1 bit and multiple of 8 bits).andM;5.andP;  Support a small set of 8100 built-in instructions (BIIs), based onfrequency of use in existing DPPX/SP modules considered as recompilation, andgenerate System/370 code sequences that simulate their operation.andP;  A built-ininstructions is a PL/DS compiler statements that corresponds to a machineinstruction.andP;  The operands of the BII are PL/DS expressions.andM;6.andP;  Support DPPX/SP linkage conventions (that is, CALL/END/LINK/EXIT and DPPXPROCEDURE statement options) and generate System/370 code sequences thatsimulate the action of the conventions of DPPX/SP.andM;7.andP;  Support 8100 DECLARE Defaults--that is, default declare precision ofBIT(15).andM;The three compiler alternatives considered were:andM;1.andP;  Get the PL/AS compiler to support all DPPX/370 requirements.andM;2.andP;  Get minimum PL/AS compiler support and develop macros and tools toconvert DPPX/SP source from PL/DS to PL/AS.andM;3.andP;  Get the PL/DS compiler to support all DPPX/370 requirements.andP;  This meantretargeting the PL/DS compiler to generate System/370 Assebmler (the PL/DScompiler was in the process of being restructured).andP;  This is the alternativethat was chosen.andP;  The second version of the PL/DS compiler is called PL/DS2.andM;The decision to develop and use the PL/DS2 compiler was made on the basis ofthe following objectives:andM;* Minimizing development cost for recompile effort (that is, the number ofDPPX/SP modules requiring manual rewrite must be kept to a minimum).andM;* Minimize the risk to quality, schedules, and cost.andM;* Maximize the overall DPPX/370 development resource (that is, minimize costcompiler, macros, and conversion tools).andM;* Maximize the performace of DPPX/370 on the ES/9370 hardware.andM;Following the comletion of the tast force, a compiler development group wasformed and a group consisting of DPPX designers and developers, DPPX toolsupport personnel, and PL/DS compiler personnel developed a detailed set ofrequirements for the PL/DS System/370 compiler (called PL/DS2).andP;  Theserequirements addressed the following areas:andM;* Support for key 8100 DPPX/SP conventions, including mapping of 8100registers on System/370 hardware and linkage conventions.andM;* PL/DS language compatiblityandM;* New language requirementsandM;* New like convention requirementsandM;* Support for System/370 operationsandM;* Support for built-in instructions (BIIs), both 8100 and System/370andM;* Compiler optimizationandM;Compiler development.andP;  Compiler development proceeded in parallel with thedevelopment of DPPX/370.andM;Incremental versions of the PL/DS2 compiler were made available, as follows:andM;1.andP;  Most language function supportedandM;2.andP;  Some BII support, some optimizationandM;3.andP;  All language function and BIIs supported, additional optimizationandM;4.andP;  Significant optimizationandM;5.andP;  Some incremental optimizationandM;DPPX/370 development personnel knowledgeable with DPPX linkage conventionsdeveloped the compiler function for the linkage conventions for DPPX/370(6000 lines of compiler code).andM;In addition to the incremental versions, a &quot;throw-away&quot; version of a PL/DS2compiler was used to identify parts of DPPX impacted by the sort.andP;  The&quot;throw-away&quot; version of the compiler generated unique messages when aspecified condition was encountered--for example, multiplication ofFIXED(15).andP;  The entire DPPX/SP system (over 5000 modules) was compiled withthe &quot;throw-away&quot; PL/DS2 compiler, and the compiler-produced message fileswere scanned for the condition under study.andM;Also, as incremental versions of the PL/DS2 compiler became available, theentire DPPX/SP system was &quot;quick compiled&quot; and scanning of compiler-generatedmessages occured.andP;  This was done to assess the overall extent of the DPPXrecompilation effort and to identify which DPPX components were significantlyaffected.andP;  The first occurence of the &quot;quick compile&quot; showed that 2123DPPX/SP modules, out of 5158 total, successfully compiled and assembled usingthe PL/DS2 compiler (using only 32 macros modified for DPPX/370).andP;  The third(and last) occurence of the &quot;quick compile&quot; showed that 3632 DPPX/SP modulessuccessfully compiled and assembled (using 100 macros and 75 control blocksmodified for DPPX/370).andP;  This activity also allowed assesment of incrementalPL/DS2 compiler improvements.andP;  Note that all &quot;quick compiles&quot; and the use ofa throw-away compiler were auxillary to the real process of porting code toDPPX/370, since they were performed with minimal development programmerinvolvement and only the PL/DS2 compiler and System 370 Assembler messagefiles were saved (not the listing and assembler output files).andM;Compiler optimization.andP;  When the first version of the compiler becameavailable, there were over 600 DPPX/SP modules, all of which had to executeas re-entrant with no automatic storage, that failed to compile.andP;  Re-entrantmodules provide the ability to have a single copy of a module be invokedconcurrently by two or more tasks.andP;  Re-entrant modules with no automaticstorage are usually invoked very frequently and can not afford theperformance over-head of allocating and deallocatin automatic storage eachtime the module is invoked, or they are a part of the supervisor core thatdoes not have storage management services available to it.andP;  Re-entrantmodules with no automatic storage must have all module variables assigned tohardware registers by the compiler.andP;  (A register can have more than onevariable assigned, depending upon where in the module each variable is used.)andM;The compiler was unable to assign all of a module's variables to registersbecause the level of compiler optimization available used to many registersfor intermediate calculations.andP;  Also, there is one less register availablefor compiler use on System/370, as compared to 8100, because of the 16registers has to be used as a base register.andM;If a frequently invoked module cannot be compiled as re-entrant with noautomatic storage, then one alternative is to change the module to benonre-entrant and serialize the module's invocation via system disable (themodule runs to completion un-interrupted).andP;  But this would have serializedexecution of key portions of the DPPX/370 operating system and would not bepractical in many cases (some modules invoke system services which have torun enabled).andM;An analysis of the compiler-generated object code resulted in a set ofadditional compiler optimization requirements, which were scheduled forimplementation in subsequent versions of the compiler in time to have almostall of these 600 modules compile successfully.andM;DPPX/370 designers and developers, DPPX/370 tool support personnel, andPL/DS2 compiler personnel met periodically (usuall monthly) to disculladditional requirements, problems, compiler usage, etc.andP;  Plans forincremental improvements to the PL/DS2 compiler were jointly arrived at andperiodically reviewed.andP;  Compiler problems found by DPPX/370 development wereformally reported and tracked via the same problem-reporting tool used fortracking DPPX problems.andM;The compiler group was provided a set of 40 DPPX/370 modules to use fortesting of the compiler.andP;  Also provided was a particularly large DPPX/370modules that was re-entrant and required zero automatic storage to compilesuccessfully.andM;The performace of the object code generated by the PL/DS2 compiler wasclosely monitored.andP;  One person kept a single program, an efficiency test casewritten in PL/DS2, containing numerous situations where the System/370 objectcode produced by the PL/DS2 compiler needed to be improved to shortedexecution time.andP;  Whenever an incremental version of the PL/DS2 compilerbecame available, the program was compiled and the object code analyzed.andP;  Asdevelopers discovered other instances of object code that could be improved,the efficiency test case was expanded.andP;  Requirements were prioritized andadded to the PL/DS2 compiler implementation plan to improve the performanceof situations in this program.andM;Throughout the development of DPPX/370, PL/DS2 compiler ugrapdes werereceived as significant compiler fixes became available.andP;  The upgradedversion of the PL/DS2 compiler would be established as the version to be usedfor all subsequent development of PDDX/370.andM;Also, many instances of compromise occured between PL/DS2 compilerdevelopment and DPPX/370 development.andP;  If a problem prevented a DPPX/370module from compilin or executing correctly, and a PL/DS2 compiler fix wouldbe difficult, then an analysis would determine whether the PL/DS2 compiler orDPPX/370 should be changed.andP;  The impact to DPPX/370 development of how manymodules and lines of code change are required (sometimes requiring extensivescanning of DPPX/370 modules)--plus testing, etc.--would be compared with theimpact on PL/DS2 compiler external or scheduled availability of optimizationimprovements.andP;  A joint decision would be arrived at to change either thePL/DS2 compiler or DPPX/370 modules, or sometimes both.andM;When the first version of the PL/DS2 compiler became available, it wasrealized that significant optimization improvements would be needed toachieve reasonable performance.andP;  This meant that the DPPX/370 system wouldhave to be recompiled when compiler optimization improvements becameavailable.andM;Two major system-wide recompiles of DPPX/370 occurred during its development.andO;The end result was 25 percent reduction in both DPPX/370 instruction path andmodule size and a good quality compiler used for all DPPX/370 modules.andM;ChecklistandM;A checklist was developed to provide a list of items a developer mustconsider when porting an existing DPPX/SP component or subcomponent toDPPX/370, for both recompilation and partial rewrite.andP;  This checklist wasupgraded periodically as n ew items apppeared.andP;  It listed items for each ofthe following areas:andM;* Operating System Architecture changes (for example, the size of anenvironment ID expanded from 1 byte to 2 bytes, usage of 24-bit addressingconverted to 32-bit addressing, page size changed from 2K to 4Kb, maximumlogical record length increased from 4Kb to 15Kb, etc.)andM;* DPPX command changes (for example, deleted command for specific 8100hardware and devices not supported by System/370, etc.)andM;* DPPX macro changes (for example, deleted or changed macros due to 8100System/370 hardware differences, etc.)andM;* System control block changes (for example, changes to supervisor servicescontrol blocks, etc.)andM;* Error processing (for example, recovery from process checks)andM;* 8100 built-in instructions (BIIs) and assembly code (for example, onlyeight 8100 BIIs [out of more than 150] are supported by PL/DS2, changedfullword division routines, etc.)andM;* PL/DS2 source language differences (for example, higher-precisionarithmetic, implicit truncation, compiler-created temporaries for CALLparameters, diffrent result for some signed-unsigned comparisons, etc.)andM;* PL/DS2 linkage convention differences (for example, base register [calledCODEREG] PER EACH 4Kb of module code storage, changed format of module savearea, labels on secondary entry points, etc.)andM;A list of DPPX modules impacted developed for the majority of checklist itemsvia automated scanning of DPPX module source code, scanning DPPX modulecompilation listings produced by both the PL/DS compiler and early versionsof the PL/DS2 compiler.andM;Choise of COBOL compilerandM;The DPPX COBOL compiler supports a dialect of COBOL that is unique to DPPX.andO;There are two reasons for this.andP;  First, the compiler was written to compilethe COBOL languages as specified by the then-proposed 1978 standard.andP;  Thestandard was later adopted, but not before some very subtle but importantchanges were made to the proposal, mainly dealing with such scope-endingphrases as END-READ.andM;In addition, the compiler supports the extensions to the language that areunique to DPPX.andP;  These extensions were added to integrate the TransactionProcessing Manager and Data Base Manager control statements closer into theapplication programs.andM;Two approaches were examined the handle these COBOL problems.andP;  The first torecode the DPPX COBOL compiler to produce System/370 object code and then tocompile it using PL/DS2 like the rest of the system.andP;  The othe alternativewas to convert the existing System/370 COBOL compiler, VS COBOL II, to run onDPPX/370.andP;  The latter approache was chosen so as to provide closer affinityto the COBOL compiler available to our customers on their MVS host.andP;  Thisapproach also provides a cross-compilation capability, allowing DPPX/370programs to be compiled on System/370 VM and MVS hosts.andM;The COBOL II compiler and run-time library were modified to request systemservices using the DPPX macros rather than the MVS macros in the existingproduct.andP;  The language incompatibility problems were solved by providing apreprocessor that can convert the DPPX incompatibilities and extensions intoa form that can be successfully compiled and run by the modified VS COBOL IIcompiler and runtime library.andM;System performanceandM;The main impact on the performance of DPPX/370, versus 8100 DPPX/SP, comesfrom the different hardware instruction set.andP;  Specifically, if a DPPX/SPfunction took n 8100 instructions, then how many System/370 instructionswould be required for the same function? An early study examined five modulesthat existed in both a DPPX 8100 licensed program and a System/370 licensedprogram.andP;  The programs were written in a common subset of the PL/DS and PL/Slanguages.andP;  All five were compiled with PL/DS (which generated 8100 objectcode) and PL/S (which generated System/370 object code) and a comparisonshowed:andM;* System/370 object code size, in bytes, was approximately 25 percent largerthan 8100 (due to predominance of 4-byte instructions on System/370 comparedwith 2-byte instructions on 8100).andM;* System/370 object code took approximately 18 percent fewer System/370instructions than the corresponding 8100 object code (due to the morepowerful System/370 instruction set).andM;These numbers assumed a 10 percent penalty on System/370 for byte andhalfword register manipulation.andP;  Also, it was assumed that the PL/DS2compiler would be as efficient as that of PL/S.andM;A separate comparison of 8100 and System/370 ES/9370 hardware instructiontimings concluded that the midrange ES/9370 models were about as powerful asthe high-end 8150B processor, in terms of instruction processing capability.andO;Thus, no drastic redesign of DPPX was necessary to achieve an increasedsystem throughput with DPPX/370 executing on the most powerful models of theES/9370.andP;  The supervisor functions GETMAIN/FREEMAIN and LOAD/DELETE are theonly exceptions to this.andM;DPPX/370 is designed to run on today's ES/9370 class machines, including thelargest model, the IBM ES/9370 Model 90 processor.andP;  Performance analysis ofexisting DPPX/SP systems showed that in some configurations a large amount ofsystem time was spent in GETMAIN/FREEMAIN processing.andP;  The Model 90 providessignificantly more throughput than the IBM 8150B.andP;  It was feared that &quot;largesystem effects&quot; might start appearing when running on this model.andP;  Sincestorage management needed redesigning anyhow to account for the differencesin the logical storage mapping mechanism between the IBM 8100 and the IBMSystem/370 architectures, performance enhancements were included.andP;  DPPX/SPhad a simple linked list structure for maintaining free storage blocks inascending address order.andP;  The DPPX/370 implementation uses a similarstructure but maintains multiple pointers into the list to locate the firstentry greater than or equal to specific sizes.andP;  These sizes were determinedby analysis of DPPX/SP trace data.andM;It was also discovered that DPPX/SP systems running large Cross SystemProduct [10] applications tended to spend a large amount of time in thesupervisor LOAD/DELETE functions, even if the modules were already residentor were not actually deleted.andP;  Changes were made to these functions toexecute much faster paths, both in the event that a LOAD Ded module wasalready resident and when a DELETEd module would not be deleted (eitherbecause of other users or because it had been preloaded during IPL).andO;Essentially, the appropriate control block updates are done while executingdisabled rather than going to the expense of obtaining software locks tocontrol concurrency.andM;MigrationandM;Functions to aid migration were added to the DPPX/370 development effort.andO;This was done to ensure that a customer moving from DPPX/SP 8100 to DPPX/370would be able to migrate the system and not have to undertake a costlyconversion.andP;  Migration of customer applications occurs as follows: TheDPPX/SP COBOL application programs are preprocessed and recompiled.andP;  TheCross System Product applications on DPPX/370 are object-code-compatible withDPPX/SP 8100 (no regeneration is required).andP;  The command lists (CLISTs) arecopied unchanged to DPPX/370.andP;  The Display Manager maps are copied toDPPX/370 (no regeneration is required).andP;  the user data and most profiles [11]are copied to DPPX/370.andM;However, it was necessary to provide assistance to enable easy movement ofuser applications and data.andM;Three methods of transmitting customer parts (including customized parts)from DPPX/SP 8100 to DPPX/370 are provided for different customerenvironments:andM;1.andP;  Via tape, using stand-alone DASD dump/restore (SADDR), which allowsdumping of DASD volumes on the 8100 to tape and a subsequent restoration fromtape to DASD on ES/9370andM;2.andP;  Via host transmission, using Distributed Systems Executive (DSX) orNetView Distribution Manager (NetView DM), which allows data to betransmitted from DPPX/SP 8100 to DPPX/370 via a System/370 hostandM;3.andP;  Via peer-to-peer transmission, using Peer Data Transfer (PDT), new forDPPX/370, which allows data transfer between a DPPX/SP system and DPPX/370system or between two DPPX/370 peer systemsandM;Refer to &quot;Porting DPPX from the IBM 8100 to the IBM ES/9370: Migration,&quot; acompanion article in this issue, for additional migration information.andP;  [12]andM;ResultsandM;All of DPPX/370 (including the first- and second-level interrupt handlers) iswritten in the PL/DS language.andP;  Components that had been changed because ofitems in the checklist did not experience the usual high rate of errors perKLOC associated with changed code.andP;  This was attributed to the availabilityof the checklist with its detailed descriptions of changes required.andP;  Theresult is a System/370 operating system that was developed by reusing morethan 800 KLOC of code originally implemented for the 8100.andM;Total effort expendedandM;Table 3 illustrates total thousand lines of code (KLOC) required to developthe base DPPX/370 system.andM;The increase in the KLOC for redesign is due to several new functions addedto DPPX/370.andP;  Table 4 shows the planned and actual productivity rates, whereCSI is changed source instructions and SSI is shipped source instructions.andM;The SSI includes the recompiled lines of code.andP;  The actual rates includedevelopment activity for high-level design, low-level design, code and FVtest.andP;  In both cases the productivity rate exceeded the original estimate.andO;Some recompilation components were ported at a rate in excess of 30 KLOC perprogrammer year (versus the original estimate of 24 KLOC per programmeryear).andP;  Some new components were developed for DPPX/370 at a rate high as 8KLOC per programmer year (versus the original estimate of 1.9 KLOC perprogrammer year).andM;PerformanceandM;The original comparison of 8100 and ES/9370 hardware instruction timings,which predicted that the midrange ES/9370 processors were about as powerfulas the high-end 8150B processor, turned out to be correct.andP;  Figure 6 showsthis, comparing internal throughput rates ratio (ITRR) measured for DPPX/SPon the 8150B processor versus those measured for DPPX/370 on the variousES/9370 models.andP;  ITRR is the number of completed jobs or transactions perprocessor busy second.andM;CompatibilityandM;With few exceptions, the functions provided by DPPX/370 are essentially thesame as DPPX/SP 8100.andP;  These functions have the same user externals onDPPX/370 as on DPPX/SP 8100, so no retraining of end users or operators isnecessary.andP;  Also, DPPX/SP and DPPX/370 have a similar appearance and cancoexist in the same network.andM;New functionsandM;A number of new functions were incorporated into DPPX/370:andM;* IBM token-ring network support, to take advantage of the ES/9370 token-ringadapterandM;* System Configuration Manager to simplify hardware configurationandM;* Maintenance via tape, not disketteandM;* Enhancements to SADDR to improve performanceandM;* Peer Data Transfer (PDT), to aid migrating user data, plus customermaintenance and development within a mixed network.andP;  PDT is a batch transferfacility to send data sets, catalogs, and CLISTS between two DPPX systemsusing communications facilities.andM;* Enhancements to IPL to improve usabilityandM;* Use of display panels by stand-alone I/O functions to improve usabilityandM;* Performance functions such as multivolume user catalogs (also known as datastriping)andM;* New printer office support for printing Document Content Architecture (DCA)documents on Intelligent Printe Data Stream (IPDS) printersandM;* New data management functions--for example, on-line compression of catalogsand logical disk volumeandM;* Migrator tool to assist the customer moving application programs and datafrom the DPPX/SP system to the DPPX/370 systemandM;A detailed description of these and other functions incorporated intoDPPX/370 can be found in Reference 2.andP;  The lines of code necessary and theresource needed to implement these additional functions are shown in Tables 3and 4.andM;ConclusionandM;The port of DPPX demonstrates the unplanned value of structured design beyondthe expected benefits of extendability, reliability, and high productivity.andM;The port of the DPPX/SP operating system from the 8100 to the ES/9370processors was made possible due to a number of factors.andP;  Originally DPPX/SPhad been designed to be extendable and reliable, with highly structureddesign and data encapsulation, and had been coded in a single high-levellanguage.andP;  The PL/DS implementation compiler was retargeted to System/370.andO;There was close cooperation between the development of DPPX/370 and thePL/DS2 compiler, both of which were developed in parallel.andP;  An experiencedsynergistic team with detailed knowledge of DPPX performed the developmentand test of DPPX/370.andP;  The function used to migrate user applications anddata were incorporated into DPPX/370.andM;As a result, DPPX/370 provides new function as well as DPPX/SP functions withthe same user externals, and can coexist with DPPX/SP.andM;AcknowledgmentandM;It is not possible to list all the people who contributed to the originaldesign of DPPX, to the analysis of alternatives to the 8100, and to theactual porting.andP;  Therefore, we wish to acknowledge the work of all theskilled professionals who have contributed to DPPX since its inception.andM;NetView is a trademark of International Business Corporation.andM;UNIX is a registered trademark of ATandamp;T.andM;Cited references and notesandM;[1.] DPPX/SP General Information, GC23-0600, IBM Corporationandgt; availablethrough IBM branch offices.andM;[2.] DPPX/370 General Information, GC23-0640, IBM Corporationandgt; availablethrough IBM branch offices.andM;[3.] DSX is the Distributed Systems Executive product.andP;  It managestransmission of data sets between a host system (MVS or VSE) and remote nodesof the network.andP;  When used with DPPX, it can also execute command lists(CLISTs) on those remote systems.andP;  This product has been superceded byNetView Distribution Manager (NetView DM).andM;[4.] HCF is the Host Command Facility product.andP;  It allows a user at ahost-attached terminal (which itself can be anywhere in the network) to logon to a remote system and appear to that system as a local user.andM;[5.] NetView provides centralized error management capabilitiy.andP;  It provideddisplays useful to a central network operator to highlight trouble spotsthroughout the network.andP;  It also provides programmed operator capability andallows access to HCF and other applications from NetView DM terminals.andM;[6.] D.E.andP;  Bodenstab, T.F.andP;  Houghton, K. A. Kelleman, G. Ronkin, and E. P.andO;Schan, &quot;UNIX Operating System Porting Experiences,&quot; ATandamp;T Bell Lab TechnicalJournal 63, Part 2, No.andP;  8, 1769-1790 (October 1984).andM;[7.] H.R.andP;  Albrecht and L. C. Thomason, &quot;I/O Facilities of the DistributedProcessing Programming Executive (DPPX),&quot; IBM Systems Journal 18, No.andP;  4,526-546 (1979).andM;[8.] Distributed Processing Development System (DPDS) General Information,GC27-0505, IBM Corporationandgt; available through IBM branch offices.andM;[9.] Independent component test is described in the companion article by G.andO;E. Boehm, A. M. Palmiotti, and D. P. Zingaretti, &quot;Porting DPPX from the IBM8100 to the IBM ES/9370: Installation and Testing,&quot; IBM Systems Journal 29,No.andP;  1, 124-140 (1990, this issue).andM;[10.] Cross System Product is IBM's primary fourth-generation languageapplication generator for data processing professionals.andP;  Cross SystemProduct/Application Development (CSP/AD) is a licensed program that guidesusers in writing application programs by requesting responses in prompts atdisplay terminals.andP;  Cross System Product/Application Execution (CSP/AE) is alicensed program that executes application programs developed with CSP/AD.andM;[11.] A profile is data that describes the significant characteristics of oneor more computer resources.andP;  Examples of these resources are data sets,programs, catalogs, commands, and users.andM;[12.] C. Goodrich and M. B. Loughlin, &quot;Porting DPPX from the IBM 8100 to theIBM ES/9370: Migration,&quot; IBM Systems Journal 29, No.andP;  1, 106-123 (1990, thisissue).andM;Robert Abraham  IBM Industrial Sector Division, Atlanta, Georgia.andP;  Mr.andO;Abraham is a senior programmer in the Engineering Management System group atIBM's Atlanta Laboratory.andP;  He joined IBM in 1971 at the Advanced SystemsDevelopment Division (ASDD) Mohansic laboratory.andP;  In 1976 he started work onthe CPU management component of DPPX in Kingston, New York.andP;  He continued towork on DPPX in Kingston in various development and design activities untilJune 1987.andP;  These activities included work on the attached processor andmultiple processor designs and the DPPX follow-on activity.andP;  Mr. Abrahamreceived his B.A.andP;  in applied mathematics from Brown University in 1971.andP;  Heis a member of the Association for Computing Machinery.andM;Brian F. Goodrich  IBM Data Systems Division, Neighborhood Road, Kingston,New York 12401.andP;  Mr. Goodrich is a senior programmer in the DistributedSystems Programming Development group at IBM's Kingston laboratory.andP;  Hejoined the Kingston Programming Center in 1968 as a junior associateprogrammer and worked on Dos and OS BTAM support for the IBM 3270 terminal.andO;From 1972 to 1976 he participated in the design of VTAM.andP;  Since early 1976 hehas been active in the design and development of several components of DPPX,including data management (for which he received a Division Award), HostTransaction Facility, and DASD cache.andP;  Since 1981 he has been active in thedevelopment and coordination of DPPX follow-on plans.andP;  Mr. Goodrich receivedhis M.S.andP;  in mathematics from the State University of Ne York at Albany in1964.andO;</TEXT></DOC>