<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF208-034-342  </DOCNO><DOCID>08 034 342.andM;</DOCID><JOURNAL>Data Based Advisor  Nov 1989 v7 n11 p163(10)* Full Text COPYRIGHT Data Based Solutions 1989.andM;</JOURNAL><TITLE>The many-to-many relationship. (dBASE programming language;includes related article on relational data bases, structuredquery language and many-to-many relationships) (tutorial)</TITLE><AUTHOR>Gutierrez, Dan D.andM;</AUTHOR><SUMMARY>This tutorial examines the use, implementation and programmingaspects of many-to-many relationships between databases.andO;Real-life data base use often requires handling such situations,and dBASE has the capability to easily manage them.andP;  One solutionis to create a third database that maintains common data and whichlinks the two databases in the many-to-many relationship.andP;  Thetutorial offers step-by-step instruction on how to implement thissolution, as well as another solution that involves using thedBASE III PLUS Assistant to create a view file.andP;  A similarsolution for dBASE IV is provided as well, and it takes advantageof the Query by Example feature.andP;  A further section of thetutorial then provides an explanation of how to use many-to-manyrelationships when programming.andM;</SUMMARY><DESCRIPT>Product:   dBASE (Data base management system) (usage).andO;Topic:     TutorialData Base Management SystemsProgramming Instruction.andO;Feature:   illustrationchart.andO;Caption:   How the tables are linked using the PS_LINK table. (chart)The many-to-many design problem and the solution. (chart)Logical design of the Part/Suppliers database, including linkingcolumns. (chart)andM;</DESCRIPT><TEXT>The Many-to-Many RelationshipandM;When considering database structures, as with monsters, a many-headedarrangement is often scary, though needlessly so.andP;  One such structure is themany-to-many (m:m) relationship that has become a much overlooked andmisunderstood method of relating databases.andP;  There are no dBASE versions--ordialects, for that matter--that automatically handle m:m.andP;  In this article,I'll examine the use, implementation, and programming aspects of the m:mrelationship.andM;DefinitionandM;A many-to-many relationship, as it turns out, is an important alternativewhen designing database systems that represent real- life situations.andO;Consider the typical scenario of a company maintaining supplier and partinformation.andP;  Perhaps the company gets a certain part from a single supplier;this is easily represented in dBASE as a one-to-one (1:1) relationshipbetween the PART.DBF and SUPPLIER.DBF databases.andM;Now what happens if you have the same part being supplied by severalsuppliers?andP;  dBASE also handles this extension easily; it's called aone-to-many relationship (1:m).andP;  But what if you need to go one step further?andO;Let's say a part can be obtained by several suppliers and each supplier cansupply several different parts.andP;  This creates a many-to-many relationship(m:m) and is an entirely possible--even probable--situation.andP;  If a databasesystem can't handle it, you'll have to ignore portions of reality whenworking with it.andM;Luckily, dBASE has certain, often overlooked, capabilities where am:mrelationship can easily be created, maintained, and used.andM;MethodologyandM;Using dBASE, you can implement a m:m relationship in two ways.andP;  One isreasonable, and the other silly, with very little flexibility.andP;  Let medescribe the latter.andP;  The database designer tries to implement a m:mrelationship by cooking up a &quot;theoretical maximum&quot; of suppliers for aparticular part.andP;  Using this method, the parts database is inflexiblystructured with a fixed number of supplier code slots.andP;  If this number ofslots needs to be expanded in the future, the database will needrestructuring; plus, any screens, reports and programs that depend on thismaximum will need rewriting.andP;  In addition, space will be wasted every time arecord has blank supplier code slots.andM;The following database structure listings depict this technique:andM;Notice that the PART database allows for up to five different suppliers perpart.andP;  If the majority of the parts can only be obtained from a singlesupplier, then 24 bytes will be wasted in each record.andP;  This space adds up ifyour PART database has thousands of records.andM;This set-up also has problems when you try to use dBASE with related files(as should always be the case).andP;  For example, we can establish a relationshipvia the following commands:andM;select 1  andamp;andamp; Indexed on PART NO so use part index part no  andamp;andamp; results in partorder select 2  andamp;andamp; Indexed on SUPP NO for use supplier index supp no  andamp;andamp;relation select 1  andamp;andamp; Relate on 1st supp no set relation to part-andgt;supp no 1into supplierandM;With this set-up you must establish a link between PART and SUPPLIER via onesupplier code at a time.andP;  In dBASE III PLUS, you can only have one relationset &quot;out of&quot; a specific work area; you have to process each supplier codefield separately.andP;  dBASE IV eliminates this limitation, but you can't havemultiple relations set out of a work area to the same database; only the lastrelation set is remembered.andP;  The record pointer in the subsidiary database(in this case, SUPPLIER) would get confused.andP;  You may choose, of course, toforget about relations completely and just use SEEKs to do look-ups, but thenyou wouldn't be using dBASE's automatic features.andM;A better solutionandM;Another, much more reasonable, implementation is to create a third linkagedatabase that acts as the vehicle to support the m:m relationship.andP;  The ideagoes something like this: the linkage database contains a key field (possiblya complex key) from both databases.andP;  In our example, you'd use PART NO fromPARTS.DBF and SUPP NO from SUPPLIER.DBF as the fields of PS LINK.DBF.andP;  Byencountering a record in this database, such as (WIDGO1, AMU001), you'reactually using a tuple that says part number WIDG01 is supplied by vendorAMU001.andP;  PS LINK would have a record defining each occurrence of a part beingsupplied by a vendor.andP;  You can even go a small step further by insertinganother field into PS LINK, such as PRICE.andP;  This way you can specify a uniqueprice for a part coming from a particular supplier.andP;  Other such fields could,of course, be added.andM;Here are the revised database structures:andM;See Fig.andP;  1 to see how this relationship works.andM;When dealing with a m:m relationship you'll always have two orientations toconsider.andP;  In our example, we have the &quot;part-by-supplier&quot; and the&quot;supplier-by-part&quot; orientations.andP;  Both are useful--simply use the one youneed.andM;The index files associated with the three databases also play an importantrole in implementing the m:m relationship.andP;  To create them, enter thefollowing dot prompt commands:andM;use part index on part no to part no use supplier index on supp no to supp nouse ps link index on supp no+part no to ps supp index on part no+supp no tops partandM;All four index files should be activated during data entry since rebuildingthem is time-consuming during a query operation.andP;  PART NO.DDX and SUPP NO.NDXare used for one of two reasons: to link the databases they describe to thelinkage database, or for ordering if they describe the controlling databasein a relationship.andM;Establishing a m:m relationship withandM;dBASE III PLUSandM;Let's consider how to establish a m:m relationship by creating a view fileusing the dBASE III PLUS Assistant.andP;  When dealing with complex m:mrelationships, view files can be quite helpful in quickly specifying all theingredients, i.e.andP;  opening the databases and indexes and setting relationsand filters.andM;Select Create from the Assistant main menu and View from the Create Menu.andO;You can also type CREATE VEIW from the dot prompt to get the same results.andO;You'll be asked for the drive letter, presumably C:, and the name of the newview file.andP;  Enter PS VIEW, since the view file will set up the requiredrelationships for the &quot;part-by-supplier&quot; perspective.andP;  Next, assuming youhave no other files in your test directory, a screen like the one in Fig.andP;  2should appear.andP;  Here, you must select SUPPLIER.DBF and SUPP NO.NDX as thecontrolling database represented in this view.andP;  Note that the index fileisn't necessary when setting the required relations.andP;  It's active in order toarrange the resulting display (or report) by supplier number.andP;  Continue byselecting PS LINK.DBF with the index PS SUPP.NDX (since we want the key, SUPPNO+PART NO, to be in effect when processing the m:m linkage database) andPART.DBF with the index PART NO.andM;Now that the databases and indexes involved are specified, let's set therelations between them.andP;  While still in the CREATE VIEW series of menus,select Relate.andP;  As shown in Fig.andP;  3, select SUPPLIER.DBF again and PSLINK.DBF as the database that will accept the relation.andP;  You must also enteran expression to be used as a key to link the two databases.andP;  In this case,enter SUPP NO.andP;  Notice that the master key index expression (SUPP NO+PART NO)of PS LINK.DBF is shown at the bottom of the screen.andP;  This helps youdetermine what to use for the relation key.andP;  Next, select PS LINK.DBF as thedatabase to set the relation &quot;out of&quot; and PART.DBF as the database that willaccept the relation.andP;  For the key, enter PART NO.andP;  Now, save the view fileusing the name PS VIEW (which creates the file PS VIEW.VUE for future use)and return to Assist.andM;This builds a m:m relationship using the part-by-supplier orientation.andO;You've used three databases, three index files, two relations, and one viewfile.andP;  Of course, to invoke this rather complex view, all you have to do isenter SET VIEW TO PS VIEW at the dot prompt or within your program.andM;If you're a hardcore user, you may prefer to enter a series of commands atthe dot prompt to establish the m:m relationship.andP;  The following commandsequence provides the same function as the previous Assist dialog:andM;select 3  andamp;andamp; Open the &quot;dragged&quot; database use part index part no  andamp;andamp; indexedon PART NO select 2  andamp;andamp; Next, open m:m linkage dbf use ps link index ps supp andamp;andamp; indexed on SUPP NO+PART NO set relation to part no into part  andamp;andamp; Relate byPART NO select 1  andamp;andamp; Open the &quot;controlling&quot; dbf use supplier index supp no andamp;andamp; indexed on SUPP NO set relation to supp no into ps link  andamp;andamp; Relate by SUPPNOandM;Issue a DISPLAY STATUS command from the dot prompt to have dBASE document theenvironment:andM;Select area:1, Database in Use:C:SUPPLIER.DBF Alias:SUPPLIER Master indexfile: C:SUPP NO.NDX Key: supp no Related into: PS LINK Relation: SUPP NOandM;Select area:2, Database in Use: C:PS LINK.DBF Alias: PS LINK Master indexfile: C:PS SUPP.NDX Key: supp no+part no Related into: PART Relation: PART NOandM;Select area:3, Database in Use: C:PART.DBF Alias: PART Master index file:C:PART NO.NDX Key: part noandM;If you decide you want to create a view file using all the open databases,and current relations, after the fact, enter:andM;create view from environmentandM;at the dot prompt and supply a view file name.andP;  The requested VUE file iscreated and available for use.andM;Establishing a m:m relationship with dBASE IVandM;Establishing a m:m relationship from within the dBASE IV Control Center issimilar to doing it with the dBASE III PLUS Assistant--though more intuitivethanks to Query by Example (QBE), now let's dBASE IV's slick new queryprocessor.andP;  Now let's set up a &quot;supplier-by-part&quot; orientation for our query.andM;As before, you'll need the three databases, PART, SUPPLIER and PS LINK.andP;  Inaddition, master index files should exist: PART.MDX with a master index tagnamed PART NO using the key PART NO SUPPLIER.MDX with a tag SUPP NO using thekey SUPP NO; and PS LINK.MDX with two tags, one named PS SUPP using the keySUPP NO+PART NO and the other named PS PART using the key PART NO SUPP NO.andM;With these in place, begin by clearing the Control Center, i.e.andP;  make sure nofiles are open.andP;  Select the andless;Dandgt;ate option from the Query panel.andP;  Once insideQBE, select Add File To Query from the Layout menu.andP;  Then select SUPPLIER, PSLINK, and finally PART.andP;  At this point you should see all three fileskeletons on the screen.andM;If you're working from the dot prompt, simply enter CREATE VIEW andless;filenameandgt; orCREATE QUERY andless;filenameandgt;.andP;  dBASE IV combined the dBASE III PLUS concepts ofsetting filters (QRY files) and defining views (VUE files) into a singleprocess, QBE.andM;The next step is to define the relationships between the files.andP;  First, pressF3 (previous) to get back to the SUPPLIER file skeleton, then highlight theSUPP NO field.andP;  Pull down the Layout menu again and select Create Link ByPointing.andP;  This will insert the word LINK1 under the SUPP NO field name inthe file skeleton.andP;  To complete the link, press F4 (next) to get to the PSLINK file skeleton, highlight the SUPP NO field, and press Enter.andP;  Noticethat LINK1 appears here also.andM;Now we have to link the PART database.andP;  Repeat the process, establishing thelink between PS LINK-andgt;PART NO and PART-andgt;PART NO.andP;  For the second link, theword LINK2 is used in the related file skeletons.andP;  At this point, therelations have been set.andP;  As an alternative to using the pointing method ofsetting a relationship, you can type in the &quot;example variables&quot; LINK1 andLINK2 (and, in fact, use more meaningful names).andM;The final step is to construct the view skeleton.andP;  This is QBE's way ofletting you define what fields to include in the query and selectioncriteria.andP;  We want to select the following fields from the three databases:PART-[is greater than]PART NO, PART-[is greater than]DESC, SUPPLIER-[isgreater than]SUPP NO, SUPPLIER-[is greater than] NAME, and PS LINK-[isgreater than]PRICE.Press F5 (field) after each.andP;  The complete QBE screenshould resemble the one shown in Fig.andP;  4andM;Now, to get the query results, save the query under the name MTOM, whichcreates a file with a QBE extension, then return to the Control Center.andO;Highlight MTOM in the Query panel and sit back and watch.andP;  Query results,similar to those in Fig.andP;  5, appear.andP;  Notice the READ ONLY mark in the statusline.andP;  This is an unfortunate limitation in dBASE IV--you can only look atthe results, not modify them.andM;In the future, to get the m:m relationship, select MTOM from the Query panel.andO;From the dot prompt or program control you can use the statement, SET VIEW TOMTOM.andM;To document the environment, issue a DISPLAY STATUS command from the dBASE IVdot prompt:andM;Select area:1, Database in Use: C:SUPPLIER.DBF (Read Only) Alias:SUPPLIERProduction MDX file: C:SUPPLIER.MDX Master Index TAG:  SUPP NO Key: supp noRelated into: PART Relation: B-andgt;PART NOandM;Currently Selected Database: Select area: 2, Database in Use: C:PS LINK.DBF(Read Only) Alias:PS LINK Production  MDX file:  C:PS LINK.MDX Index TAG:  PSSUPP Key: supp no+part no Index TAG:  PS PART Key: part no+supp no Filter:FOUND(1) .AND.andP;  FOUND(3) Related into: SUPPLIER Relation: B-andgt;SUPP NOandM;Select area:3, Database in Use: C:PART.DBF (Read Only) Alias: PART ProductionMDX file:  C:PART.MDX Master Index TAG:  PART NO  Key: PART NOandM;As in dBASE III PLUS, you can manually set up the environment from the dotprompt, then issue the command, CREATE VIEW FROM ENVIRONMENT, to build a VUEfile.andP;  dBASE IV is able to use dBASE III PLUS-style view files.andP;  In fact,when programming, this may be a better alternative to QBE files.andM;Building the linkage databaseandM;It's tough to find a good description of the m:m relationship in books aboutdBASE.andP;  But right now I want to show you how to enter records into thelinkage database.andP;  Entering the records, believe it or not, requires someintelligence.andP;  It can't simply be an &quot;intersection&quot; of parts and suppliers,because some parts aren't supplied by some suppliers.andM;So how does the data get entered?andP;  Two ways come to mind.andP;  First, you cancreate a very simple data entry screen, prompting for the two key fields andany data unique to the tuple (such as PRICE, in our example).andP;  This requiresthat someone sit down and define who supplies what.andM;Alternately, an automatice process could take some machine readable sourcedocument and scan for the necessary data, then stuff it into the linkagedatabase.andP;  For example, you could use a C program to scan a word processingdocument containing the information.andP;  Then the program could write an ASCIItext file in a format that would later be run through an APPEND FROM command,populating the linkage database.andP;  I once wrote a similar program for aconstruction company client that had a CD-ROM drive containing a largecatalog of vendors and hardware items.andP;  The company had so much data,entering it manually was prohibitive.andM;Besides C, another choice might be to use a dBASE dialect like Clipper or alibrary that accesses to ASCII files from within the dBASE programmingenvironment to load the information dynamically.andM;Programming using m:m relatinshipsandM;Now that we've investigated how to set up a m:m relationship, let's cover theprogramming aspects of m:m.andP;  First, consider a typical requirement wheresomeone needs a list of all parts obtained from each supplier.andP;  To satisfythis request using dBASE III PLUS, we can use the PS VIEW view file to openthe database and indexes and set up the relationships necessary to processthe query.andP;  From within a program (or at the dot prompt) simply enter SETVIEW TO PS VIEW.andP;  As you can see from the program in Listing 1, this is quitesimple.andP;  The rest of the program just operates on the environment establishedby the view.andP;  The output produced by the program is shown in Fig.andP;  6.andM;Listing 1--PART.PRGandM;* PART.PRG - Parts by Supplier Query will display information *  for allparts obtained from a specific supplier.andM;clear all set talk off * Invoke PS VIEW which links SUPPLIER-andgt;PS LINK-andgt;PARTand * where the controlling index for PS LINK is PS SUPP * (supp no+part no)andM;set view to ps view  andamp;andamp; Active DBF is SUPPLIERandM;do while .not.andP;  eof()  andamp;andamp; Loop through all suppliersandM;? supp no, name, phone, contact andamp;andamp; Display supplier information select pslink  andamp;andamp; Switch to m:m linkage databaseandM;* Loop through all (if any) parts supplied by current * supplier and displaypart informationandM;do while ps link-andgt;supp no=supplier-andgt;supp no .and.andP;  .not.andP;  eof() ? &quot; andO;&quot;+part-andgt;part no+&quot; &quot;+part-andgt;desc+&quot; &quot;+; part-andgt;warehse, part-andgt;qty oh skip  andamp;andamp;Next m:m link record enddo select supplier  andamp;andamp; Back to controlling databaseskip  andamp;andamp; Next supplier record enddoandM;set talk on clear allandM;Another equally valid method of processing this sort of query is shown inListing 2.andP;  The requirement here was to display all suppliers who supply aspecific part.andP;  For each part found in PART.DBF, we display all associatedsuppliers.andP;  This works almost the same as the program in Listing 1, exceptthat PART will be the controlling index, SUPPLIER will be the one beingdragged around, and PS LINK will still be in the middle.andP;  Also, the indexused for PS LINK has to be PS PART where the key is PART NO+SUPP NO.andM;Instead of using another view file called, say, SP VIEW, we'll define therelations manually.andP;  The program code method of defining relations is oftenfavored over view files, since you must only at the code to see the status ofthe environment.andP;  With view files, you have to Modify View or Display Statusto see what's going on.andM;Listing 2--SUPPLIER.PRGandM;* SUPPLIER.PRG - Suppliers by PArt Query will display *  information for allsuppliers who *  supply a specific part.andM;clear all set talk offandM;* Manually define SP VIEW which links PART-andgt;PS LINK-andgt;SUPPLIER * and where thecontrolling index for PS LINK is PS PART * (part no+supp no)andM;select 3  andamp;andamp; Begin with &quot;dragged&quot; database use supplier index supp no  andamp;andamp;indexed on SUPP NO select 2  andamp;andamp; Open m:m linkage database use ps link indexps part  andamp;andamp; indexed on PART NO+SUPP NO set relation to supp no into supplier andamp;andamp; Relate by SUPP NOandM;select 1  andamp;andamp; Use controlling database use part index part no  andamp;andamp; indexed onPART NO set relation to part no into ps link  andamp;andamp; Relate by PART NO andamp;andamp; tolinkageandM;do while .not.andP;  eof()  andamp;andamp; Loop through all partsandM;? part no, desc, warehse, qty oh  andamp;andamp; Display part information select ps link andamp;andamp; Switch to m:m andamp;andamp; linkage databaseandM;* Loop through all (if any) suppliers who supply current * part and displaysupplier information do while ps link-andgt;part no = part-andgt;part no .and.andP;  .not.andO;eof() ? &quot;  &quot;+supplier-andgt;supp no+&quot; &quot;+supplier-andgt;name+&quot; &quot;+; supplier-andgt;phone+&quot;&quot;+supplier-andgt;contact skip  andamp;andamp; next m:m link record enddoandM;select part  andamp;andamp; Back to controlling database skip  andamp;andamp; Next part record enddoandM;set talk on clear allandM;If you're using dBASE IV, the programs in Listing 1 and 2 can be simplified abit by using a new looping construct called SCAN/ENDSCAN.andP;  In dBASE IV,however, it's best to define the environment manually, as in Listing 2; usinga QBE file to do this isn't as simple as in dBASE II PLUS.andM;A couple of problems exist that limit the QBE filehs usefulness.andP;  First, whencreating a query in dBASE IV, you absolutely must specify the view skeleton,which generates a SET FIELDS command to define what the result query shouldcontain.andP;  This presents a problem.andP;  In our programming examples, we usealmost all the fields in each of the three database.andP;  This sounds trivialenough, but when you try to add all fields (by placing the cursor under thename of the file skeleton and pressin F5) to the view skeleton, you'll findthat QBE won't allow for duplicate field names, in spite of the fact thatwhen they're brought down, they'll be unique (since they're qualified by adatabase alias name).andP;  A dialog box pops up to let you assign a pseudo fieldname; but using this name later generates &quot;Variable not found&quot; messages.andM;To overcome this limitation, Ashton-Tate offers a workaround.andP;  Unlike VUEfiles in dBASE III PLUS, you can loadup QBE files and edit them using MODICOMM.andP;  The trick is to delete the SET FIELDS command.andP;  (I'll leave thedetails of working this out to you.)andM;A better approach is to modify Listing 2 to set the environment for thesupplier by part orientation and use the SCA/ENDSCAN construct to handle theloops.andP;  Listing 3 shows this.andM;Listing 3--MTOM.PRGandM;* MTOM.PRG - dBASE IV version of Suppliers by Part QueryandM;clear all set talk offandM;select 3  andamp;andamp; Open &quot;dragged&quot; database use supplier order supp on  andamp;andamp; indexedby tag SUPP NO select 2  andamp;andamp; Open m:m linkage database use ps link order pspart  andamp;andamp; indexed by tag PS PART set relation to ; ps link-andgt;supp no intosupplier  andamp;andamp; Relate by SUPP NO select 1  andamp;andamp; Open controlling database usepart order part no  andamp;andamp; indexed by tag PART NO set relation to ; part-andgt;part nointo ps link  andamp;andamp; Relate by PART NOandM;scan  andamp;andamp; Loop through all parts ? part-andgt;part no, part-andgt;desc, part-andgt;warehse,part-andgt;qty oh select ps link  andamp;andamp; Switch to m:m linkage databaseandM;scan while ps link-andgt;part no = part-andgt;part no ?&quot;andP;  &quot;+supplier-andgt;supp no+&quot;&quot;+supplier-andgt;name+&quot; &quot;+; supplier-andgt;phone+&quot; &quot;+supplier-andgt;contact endscanandM;select part  andamp;andamp; Back to controlling database endscanandM;set talk on clear allandM;A logical extension using dBASE IVandM;If you're using dBASE IV and other dBASE language dialects that have theability to assign multiple relations &quot;out of&quot; a work area, here's a logicalextension of our programming considerations.andP;  Think of PART-andgt;WAREHSE as awarehouse code and create another database called WAREHSE.DBF that is linkedto PART.DBF via the code field.andP;  This would be a m:1 relation betweenPART.DBF and WAREHSE.DBF.andP;  The structure of this new database is as follows:andM;This arrangement isn't possible in dBASE III PLUS because of the limitationof allowing only a single relation set out of a work area.andP;  Listing 4 shows amodification of Listing 3 that illustrates this extension.andM;Listing 4--MTOM EX.PRGandM;* MTOM EX.PRG - dBASE IVE version of Suppliers by Part Query *  With multiple&quot;out of&quot; relations.andM;clear all set talk offandM;select 4  andamp;andamp; Open 1:m dragged database use warehse order wh no  andamp;andamp; indexed bytag WH NO select 3  andamp;andamp; Open m:m dragged database use supplier order supp no andamp;andamp; indexed by tag SUPP NO select 2  andamp;andamp; Open m:m linkage database use ps linkorder ps part  andamp;andamp; indexed by tag PS PART set relation to ; ps link-andgt;supp nointo supplier  andamp;andamp; Relate by SUPP NO select 1  andamp;andamp; Open controlling databaseuse part order part no  andamp;andamp; indexed by tag PART NO set relation to ;part-andgt;part no into ps link  andamp;andamp; Relate by PART NO set relation to ;part-andgt;warehse into warehse  andamp;andamp; Relate by WAREHSE scan  andamp;andamp; Loop through allparts ? part-andgt;part no, part-andgt;desc, warehse-andgt;wh name, part-andgt;qty oh select pslink  andamp;andamp; Switch to m:m linkage databaseandM;scan while ps link-andgt;part no = part-andgt;part no ? &quot;  &quot;+supplier-andgt;supp no+&quot;&quot;+supplier-andgt;name+&quot; &quot;+; supplier-andgt;phone+&quot; &quot;+supplier-andgt;contact endscanandM;select part  andamp;andamp; Back to controlling database endscanandM;set talk on clear allandM;For the few or the many?andM;Whether or not you use the power of the m:m relation is a matter of need.andP;  Aspower dBASE users and programmers, you might find it of benefit to have thisknowledge in your bag of tricks.andP;  When that real-life situation arises and am:m relationship seems to make sense, you'll be able to represent itefficiently.andM;Dan D. Gutierrez is President of The AMULET Consulting Group, a LosAngeles-based microcomputer consulting firm specializing in dBASE languageprogramming.andP;  In addition, Dan teaches dBASE programming for UCLA Extension.andO;He can be contacted at (213) 824-0947.andO;</TEXT></DOC>