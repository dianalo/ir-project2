<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-330-138  </DOCNO><DOCID>08 330 138.andM;</DOCID><JOURNAL>Communications of the ACM  April 1990 v33 n4 p391(2)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>In response to the fate of Fortran-8x. (rebuttal to argument thatANSI and ISO should not standardize new FORTRAN specification)</TITLE><AUTHOR>Bailey, David H.andM;</AUTHOR><DESCRIPT>Topic:     Programming LanguagesStandardizationAmerican National Standards InstituteInternational Organization for StandardizationFORTRAN.andM;</DESCRIPT><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>In Response to the Fate of Fortran-8x Geoffrey Hunter raises some interestingissues regarding the proposed ANSI/ISO Fortran standard, commonly known asFortran-8x (although in 1990 the designation &quot;8x&quot; appears inappropriate!).andO;My overall reaction to his objections is that the issues most important tohim are not very important to the actual heavy-duty Fortran users, and theissues most important to the heavy-duty Fortran users are ignored by Hunter.andM;Hunter's central objection to the proposed Fortran standard is that it is nota modern block-structured language.andP;  Who ever said that it would be?andP;  Ifsomeone has an application that critically relies on a block-structuredlanguage, he or she is not likely to try to implement it using Fortran.andM;What is Fortran used for today?andP;  It is used primarily for large-scalescientific computations.andP;  Such applications typically have relatively simplesubroutine trees and data structures, and performance is a major concern.andO;The currently proposed design of the Fortran language is entirely adequatefor accommodating such applications.andP;  An equivalent statement of Hunter'sprincipal objection is that the proposed Fortran standard should be rejectedbecause it would not be suitable for writing operating systems.andM;Among my colleagues here at NASA Ames there are a large number of highlyexpert programmers and scientists who write serious applications on oursupercomputers.andP;  Many of them have completed courses in computer science, andmost have significant experience using other languages.andP;  And yet, indiscussions with them on possible enhancements to our Fortran languageenvironment, I have yet to hear anyone mention Hunter's primary concerns.andO;Similarly, in discussions with others at large government laboratories andthe like, I have heard expressions of concern about other features of theproposed Fortran standard, but I have never heard anyone mention Hunter'scentral objections.andM;There are other flaws in Hunter's arguments.andP;  I simply do not believe that itis realistic to hope that serious Fortran application programs could beautomatically translated to Ada or Algol-68.andP;  Also, the language Algol-68 mayhave merit, but the fact that it is used in the U.S.S.R.andP;  is not a compellingreason to adopt it in the U.S.andM;One of Hunter's central objections, that the Fortran language is inherentlybased on static memory allocation, is not really true either in theory or inpractice.andP;  For example, the Fortran compilers available on Craysupercomputers have featured stack allocation for data and stack-basedsubroutine calls for some time.andP;  His warnings about the SAVE Time Bomb aresimilarly misplaced--scientists running codes on our Crays have found theadjustment to using SAVE statements virtually painless.andM;It is unquestionably true that there are flaws in the proposed Fortranstandard, and many of them are inescapable consequences of the fact thatFortran is an old language designed before the theory and practice ofprogramming was well-understood.andP;  I, for one, am disappointed in theclumsiness of a number of the proposed features of Fortran-8x.andP;  Hunter'spoint that Fortran-8x is contrary to the trend of computer languages to besimple, concise, and elegant is well-taken.andP;  Hunter's concern about thepotential difficulty of writing efficient and bug-free compilers forFortran-8x is particularly valid.andM;However, there are some very important advantages to the proposed Fortranstandard.andP;  In particular, its inclusion of array computation constructs is,in my view, a very important step forward and by itself outweighs most of theobjections that have been raised against it.andP;  It is noteworthy that the&quot;obsolete&quot; Fortran language is the first major language to take thisstep--such constructs are not yet proposed as part of the standard for any&quot;modern&quot; language.andM;We in the large-scale scientific computation community are now moving aheadvery seriously with plans to utilize the highly parallel, teraflops-classsystems that will be available before the year 2000.andP;  In a fairly wide rangeof applications that we wish to map to these systems, the centraltime-intensive computations can be expressed easily as array operations.andO;This class of computations certainly includes the large-grid PDE codes thatare the mainstay of centers such as ours.andP;  The array constructs of theproposed Fortran standard are perfectly suited for this type of computation.andO;They represent the first serious step to providing standard parallelprogramming constructs that can be efficiently supported across a variety ofparallel systems, including both SIMD and MIMD designs.andM;Because of the delay in the adoption of the Fortran-8x standard, a number ofmanufacturers of advanced systems have already taken the step of implementingthe basic array computation features into their compilers.andP;  Among the vendorswho now support these features are Cray Research, Inc. and Thinking Machines,Inc.andP;  So far, however, programmers are reluctant to incorporate theseconstructs into their codes for the very valid reason that until theseconstructs are part of the Fortran standard, their codes may not be portableto other systems.andM;Hunter summarizes by saying &quot;the only technically rational way of advancingthe art of scientific and engineering programming is to abandon Fortran infavor of a modern block-structured language such as Algol-68 or Ada.&quot;andP;  Thissuggestion will simply not be taken seriously by the heavy-duty scientificcomputation community.andP;  These users simply cannot walk away from largeapplication programs with 100,000+ lines of code.andP;  Also, this suggestion willnot be taken seriously by those of us who are exploring highly parallelscientific computation, since at present, there is no prospect ofstandardizing array computation constructs in any major language exceptFortran-8x.andM;A case can be made that scientists should be encouraged to consider otherlanguages for writing new applications.andP;  At NASA Ames, for example, a numberof the scientists are writing scientific applications in the C language.andO;Also, vendors of heavy-duty scientific computers need to be encouraged tosupport alternative languages on their system.andP;  Further, standards committeesworking on other languages need to consider incorporating array constructsand possibly multitasking constructs in their designs.andP;  But for theforeseeable future, Fortran will indisputably be the major language forscientific computation.andP;  It is totally unrealistic to pretend otherwise.andM;David H. Bailey NASA Ames Research Center Moffet Field, CA 94035andM;(4) A major deficiency of the draft specification is its failure toexplicitly recognize that some of the new features imply Dynamic MemoryAllocation.andP;  This semantic shortcoming parallels Fortran-77's failure toexplicitly recognize its implicit constraint of Static Memory Allocation.andO;</TEXT></DOC>