<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-250-143  </DOCNO><DOCID>07 250 143.andM;</DOCID><JOURNAL>PC Week  Jan 9 1989 v6 n1 p46(1)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>The key to success with CASE is integration. (part 1) (AppliedIntelligence) (column)</TITLE><AUTHOR>Martin, James.andM;</AUTHOR><SUMMARY>Integrated computer-aided software engineering (I-CASE) willprovide a competitive edge to organizations implementing thispower tool.andP;  I-CASE overcomes the shortcomings infourth-generation language (4GL) tools in the development ofcomplete applications.andP;  I-CASE gives stronger support to theanalysis and design phases of program development.andP;  I-CASE alsogenerates much more efficient, high-performance code than do 4GLprogramming tools.andP;  I-CASE tools generate executable applications,unlike individually-oriented CASE tools.andP;  I-CASE takes a programfrom specification stage up to run-time.andP;  The applications in userdemand require too much diagramming and outlining to be completedwithout an electronic assist from CASE.andM;</SUMMARY><DESCRIPT>Topic:     Computer-Aided Software EngineeringIntegrated SystemsApplications ProgrammingProgram Development ToolsSoftware Design.andO;Feature:   illustrationchart.andO;Caption:   Key components of an integrated CASE product. (chart)andM;</DESCRIPT><TEXT>The Key to Success with cASE Is IntegrationandM;Much has been written about what is wrong with data processing today.andP;  Thereare backlogs of several years.andP;  It takes too long to build systems and thecost is too high.andP;  The difficulties of maintenance are outrageous.andO;Management can't get information from computers when needed.andP;  Tape and disklibraries are a mess of redundant, chaotic data.andP;  Many programs are fragilespaghetti code.andM;When management needs to change business procedures or introduce new productsand services, data processing frequently cannot make the requiredmodifications.andM;Today, computers are assuming more important roles in business, governmentand the military.andP;  We have entered the age when computing and informationsystems are strategic weapons, not backroom overhead.andP;  The terms&quot;mission-critical&quot; and &quot;strategic systems&quot; have become popular.andM;There are many examples of corporations that have grown faster than theircompetitors because they had better information systems.andP;  In some cases,corporations have been put out of business by competitors with bettercomputing resources.andP;  As computing become critical to competitive thrusts, itis vital to both develop and modify applications quickly.andM;Many of today's competitive business thrusts require application software farmore integrated and complex than in the past.andP;  It's necessary to build--in ashort time and without excessive cost--applications that are highly complex,of high quality and that truly meet the needs of end users.andP;  Theseapplications must be easy and quick to modify and maintain.andM;It's important for executives to realize that there are solutions forsoftware-development problems.andM;A sweeping revolution has begun in the methodologies of putting computers towork.andP;  This revolution depends on power tools.andP;  The methodologies of the pastused pencils and templates; the methodologies of the future use designautomation techniques linked to code generators, along with computer-aidedplanning and analysis.andM;It would not be possible to build today's cities or microchips or jetaircraft without power tools.andP;  Our civilization depends on power tools; yet,the application of computing power to corporate systems is done by handmethods.andM;Design of the interlocking computer applications of a modern enterprise is noless complex than the design of a microchip or a jet aircraft.andP;  To attemptthis design by hand methods is to ask for trouble.andM;The use of power tools changes the methods of construction.andP;  Now that suchtools exist, it's desirable that the entire application-development processby reexamined and improved.andP;  Advanced power tools rise to the need for anengineeringlike discipline.andM;From the business point of view, it is vital that power tools change what canbe constructed.andM;To stay competitive in the future, corporations will depend on being able tocreate effective computer applications quickly.andP;  In addition to the use oftools for designing and building programs, methodologies are needed to takeadvantage of these tools and harness the knowledge and creativity of computerusers.andP;  Along with the revolution in power tools, we are likely to see arevolution in development methodology.andM;These changes need to be understood by management at every level.andP;  Making thechanges is a business-critical success factor.andP;  Top management needs toensure that its information-systems organization is adopting the newsolutions as quickly as possible.andM;The term CASE has become popular for describing the new generation of powertools.andP;  The term I-CASE is used to describe a workbench environmentintegrating tools for all aspects of the software-development life cycle.andO;These tools include computer-aided planning and modeling, compuer-aideddesign linked to code generation, documentation generation andproject-management aids.andM;I-CASE represents one of the most important changes in thesoftware-development process to date.andP;  The technology overcomes many of thelimitations that prevented the widespread acceptance of fourth-generationlanguage (4GL) tools.andP;  A primary limitation of 4GL tools is that they do notcover the entire life-cycle process.andP;  In other words, they don't adequatelysupport the analysis and design phases.andP;  In addition, 4GL tools do notproduce code that runs as fast as hand-generated code.andP;  For manyapplications, 4GLs do not provide adequate run-time performance.andM;I-CASE tools overcome these limitations by supporting all phases of thelife-cycle process and by generating highly efficient code.andP;  Front-endcomponents of I-CASE tools provide the ability to specify applications indiagram form, using an integrated set of planning, analysis and design tools.andM;As shown in the accompanying figure, a tightly integrated back-end codegenerator produces program code that runs efficiently.andM;Additional automated tools support database and documentation generation andproject-management aids.andP;  I-CASE tools offer the best of both worlds--supportfor the entire life-cycle process and efficient run-time performance.andM;The systems analyst interacts with a CASE design workbench tool by means ofdiagrams.andP;  Diagrams are used to represent planning information, an overviewof systems, data models and data flows, detailed designs and programstructures.andP;  A principle of CASE is that, whenever possible, diagrams areused as an aid to clear thinking.andM;A critical characteristic of an I-CASE tool (as opposed to CASE) is that itgenerates executable programs.andP;  A code generator is driven by designinformation stored in a central design repository.andP;  The design information inthe repository is created via interaction with front-end workbenches.andP;  Theuse of a common repository ensures that the code is generated directly frominformation developed by the front-end design tool.andP;  The tight integration ofthe planning, analysis and design tools with a code generator gives muchhigher productivity than the use of tools that are not closely coupled.andM;Benefits of I-CASE TechnologyandM;I-CASE tools use automated techniques to reduce the cost and time to developand maintain programs.andP;  Due to the use of automated analysis techniques,program quality is substantially improved.andP;  Potentially, I-CASE canaccelerate development, drastically reduce maintenance costs; simplifydevelopment techniques; free developers to focus on the creative aspects ofdevelopment; facilitate end-user involvement; improve software quality; andimprove software portability.andM;The use of I-CASE technology provides a wide range of additional benefits.andO;It enforces discipline; enforces good structuring of data and code andpromotes rigor in design; catches most design and coding errors; enablesdesign modifications to be made quickly and consequences checked forvalidity; automates documentation; creates standards for diagrams, techniquesand documentation; accommodates an encyclopedia, which is essential forbuilding a fully computerized organization; and aids project management andcontrol.andM;Today, business, government and the military need highly complex andintegrated computer applications.andP;  The size and complexity of theseapplications are too great for there to be any hope of accurate diagrammingwithout the aid of a computer.andP;  The magnitude of the diagrammaticrequirements for information engineering dictates that automated tools beused.andM;Next week, I'll look at the techniques that are used to convertspecifications in diagram form directly into operational code.andO;</TEXT></DOC>