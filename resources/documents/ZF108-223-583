<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-223-583  </DOCNO><DOCID>08 223 583.andM;</DOCID><JOURNAL>Data Based Advisor  Dec 1989 v7 n12 p58(3)* Full Text COPYRIGHT Data Based Solutions 1989.andM;</JOURNAL><TITLE>Do you make these common database design mistakes? Part 2(Database Design) (column)</TITLE><AUTHOR>Watterson, Karen.andM;</AUTHOR><SUMMARY>Some common problems that must be avoided when designing adatabase management system are discussed.andP;  The problems include:allowing null keys, not enforcing business rules, not enforcingreferential integrity, improperly using index files,over-normalization, not enough attention on performance,inadequate database security, too few defaults on data entryforms, poor back-up procedures, inadequate archiving procedures,poorly designed multiuser systems, failure to document the design,and failing to maintain single-theme tables and files.andP;  Each ofthese problem areas is discussed at some length, including theramifications of not correcting the deficiencies.andM;</SUMMARY><DESCRIPT>Topic:     ErrorsData Base Management SystemsTroubleshootingData Base Design.andM;</DESCRIPT><TEXT>In last month's column I started this list of common dangers in databasedesign.andP;  This month I'll finish up...andM;Allowing null keysandM;Most of today's DBMSs let you design tables or files that don't have keyfields.andP;  They'll also generally let users skip over entering data into a keyfield.andP;  Imagine, for example, that the personnel department wants to add anew employee into its database, and that social security numbers are used asthe key field.andP;  The new employee, however, doesn't remember his or hernumber.) Most database purists will say that the DBMS shouldn't let newemployee data be entered unless the key field is also entered.andP;  Otherwise,there might not be a unique way to retrieve data about the new employee.andO;Some DBMSs let you design tables where key field data must be entered.andO;Others don't.andM;Not enforcing business rulesandM;From the perspective of database integrity, it's important to incorporatebusiness rules into the database design.andP;  Some business rules are easy.andP;  Forexample, there shouldn't be duplicate invoice numbers.andP;  Another might be thatemployees shouldn't be paid overtime unless they work more than 40 hours in aweek.andP;  Another one might be that hourly wages fall between $3.25 and $12.50an hour.andP;  Each DBMS has a method or combination of methods for integratingbusiness rules into the database design.andP;  Establishing valid ranges for datacan often help avoid database corruption by detecting data entry errors &quot;upfront.&quot;andM;Not enforcing referential integrityandM;A lot of ink has been spilled over the topic of referential integrity, butwhat it amounts to is really pretty straightforward.andP;  When tables arerelated, you want to make sure that there's corresponding data in bothtables.andP;  To use our customer-invoice example, it would be a mistake if youdeleted the customer record, but left all the invoice records for thatcustomer linked to a customer number that no longer exists.andP;  Referentialintegrity is the idea that cross-linked references must be intact.andO;Referential integrity can be maintained either via business rules or, in somecases, within the table definitions.andM;Improperly using index filesandM;Many DBMSs use index files to help retrieve requested information quickly.andO;You have to set up index files based on the kind of information you thinkwill be used in queries.andP;  Key fields are generally designated as the basisfor index files, while address fields generally aren't, since a user is morelikely to know a customer or vendor I.D.andP;  than a complete address.andP;  Indexfiles have overhead associated with them: they take up disk space and require&quot;maintenance&quot; by the DBMS.andP;  They essentially &quot;look&quot; like a look-up table,with index field values along the left column and corresponding diskaddresses along the right column.andM;Over-normalizationandM;If you do any reading about relational database design, you're bound to runinto a discussion of normalization and the five normal forms.&quot; The &quot;standard&quot;normal forms are usually referred to as 1NF, 2NF, 3NF, 4NF, and 5NF, whichcorrespond to progressively more relational table characteristics.andP;  Although5NF is theoretically the ultimate, most database professionals agree that 3NF(or nearly equivalent variations like Boyce-Codd Normal Form (BCNF)) ordomain-key normal form is a practical goal.andM;So what is normalization? It's generally an analytical (as opposed tosynthetic) process of taking an arbitrary initial design and decomposingmulti-thematic tables (in other words, splitting up tables to reduceredundancy).andP;  For example, you often see table designs with addresses thatconsist of city, state, and zip code (with city/state duplications throughoutthe table).andP;  Since there's a unique city/state for each zip code (92103 canonly refer to San Diego, Calif.), you could use only the zip code in theaddress record.andP;  An additional table containing a list of all the cities andstates keyed on zip code would eliminate city/state duplicates.andM;Over-zealous adherence to the dictates of normalization, however, can lead toa design that is impractical or so fragmented that performance is strangled.andO;For example, to implement city/state/zip code normalization would require atable of all possible city/state/zip code combinations.andP;  Can you acquire sucha database? Do you have the disk storage space? Can the DBMS print labelsfast enough when pulling in city/state from another table?andM;Not enough attention on performanceandM;This one's related to the ivory tower syndrome.andP;  Remember, the goal is tocreate a database that contains accurate data and is functional.andP;  If dataentry personnel have to wait 90 seconds for the system to store eachthree-field record, someone's going to complain about poor productivity.andO;Your design goal shouldn't be academic purity; you're designing for peoplewho are probably trying their best to help the company's bottom line.andM;Inadequate database securityandM;Almost all DBMSs allow you to establish some form of password protection.andO;You're a negligent designer if you fail to do so.andP;  Some organizations areslow to realize the value of their databases, the importance of databaseintegrity, and the legal implications of privacy and confidentiality.andP;  It maybe your duty as the database designer to do some educating.andP;  Learn about whatyour system has to offer as far as passwords and views go.andM;Too few defaults on data entry formsandM;Most DBMSs let you establish default values for your data entry forms.andP;  Talkto data entry personnel and other users to find out which fields should beset up with default values.andP;  For example, find out how your system doesautonumbering to generate sequential client or invoice numbers.andP;  By savingdata entry keystrokes, you'll enhance productivity.andM;Poor back-up proceduresandM;Back-up procedures may not fall into the realm of database design, but thebest-designed databases will be for naught without solid back-up procedures.andO;Do a breakeven analysis, if you must.andP;  How much would it cost to replicate anentire day's, or even an hour's data entry? How much is it going to cost, indown time, to do the back-up? Keep at least two generations of back-ups, andconsider off-site storage for back-ups of mission-critical data.andM;Inadequate archiving proceduresandM;This problem is often related to attention to performance.andP;  Databases growand grow and grow, unless old data is periodically deleted and archived.andO;Archiving is different from backing up.andP;  Archiving means offloading inactivedata.andP;  Properly archived data can always be reactivated and referred to whennecessary.andP;  Closed invoices might be archived weekly, monthly, or yearly,depending on activity.andM;Poorly designed multiuser systemsandM;Security and performance are special concerns in multiuser database systems.andO;Multiuser systems designers need to bring a high level of sophistication tothe design process, understanding not only how and when to use views andpasswords, but also the intricacies of locking.andP;  System performance anddatabase integrity depend on the designer's clear understanding of how theDBMS implements these features.andM;Failure to document the designandM;Whether your design consists of entity-relationship (ER) diagrams sketched ona piece of notebook paper or a printout of your system's data dictionary, tryto leave something for posterity that illustrates the tables, keys, andrelationships.andP;  Let's face it-it's easy to put off writing up thedocumentation (&quot;but it's so obvious...&quot;) or making the data dictionaryentries.andP;  Don't.andP;  You're being negligent otherwise.andM;Failing to maintain single-theme tables and filesandM;This is deliberately restating the first mistake-the spreadsheet design.andO;Tables should each correspond to a single entity.andP;  They should each have asingle theme.andP;  You shouldn't lump customers and their purchases together, orstudents and their classes, or little league members and their performancesin each of 20 games.andM;Whew, that's a lot that can go wron.andM;SummaryandM;Don't try to design your first database based on this article! Read yourdatabase management system's documentation, because it will probably includea section on design.andP;  Get your hands on past Data Based Advisor columns(Jan., March, July, and Nov. 1988 and Jan. 1989).andP;  They provide a &quot;cookbook&quot;approach to database design.andP;  If you want more theoretical background, referto any of Chris Date's books, or the excellent volume by Fleming and vanHalle, Handbook of Relational Database Design, reviewed in the Sept. issue.andO;</TEXT></DOC>