<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-240-377  </DOCNO><DOCID>07 240 377.andM;</DOCID><JOURNAL>PC-Computing  Jan 1989 v2 n1 p25(1)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>Esther Dyson. (Object-Oriented Programming and Systems) (column)</TITLE><AUTHOR>Dyson, Esther.andM;</AUTHOR><SUMMARY>Object-oriented programming and systems (OOPS) languages startwith objects in stead of procedures.andP;  While the typical softwarelanguage starts with verbs, rules for using the verbs, and acompiler or interpreter that translates the verbs into machinelanguage, an OOPS language starts with classes, or objects withoutdata, and defines the behavior of those classes.andP;  OOPS provides amore natural way to model the world and the procedures to beautomated, making it easier to use.andP;  Most computer languages arefairly fixed, but OOPS languages are designed to be extended bythe addition of new classes of objects.andP;  OOPS also representsrelationships among objects, including the relationship known asinheritance, the term for how classes of objects are specializedinto subclasses.andP;  OOPS has characteristics of both real-world andcomputer languages.andM;</SUMMARY><DESCRIPT>Topic:     Programming LanguagesObject-Oriented LanguagesCritique.andM;</DESCRIPT><TEXT>ESTHER DYSONandM;What is object oriented programming, and why is everyone so excited about it?andM;There are lots of ways to define it, and lots of criteria that some peopleconsider essential for a program to qualify as object-oriented.andP;  Basically,though, the fundamental approach of object-oriented programming and systems(or OOPS) is to start with objects instead of procedures--with nouns, notverbs.andP;  The typical software language consists of verbs and rules for usingthem, plus a program (a compiler or interpreter) that translates those verbsinto machine instructions (the nouns are either data or references to data).andO;Object-oriented languages start with classes, which are objects without data,and define the behavior of those classes (which is where their verbs comein).andM;Consider a recipe.andP;  You don't start by mixing and blending: first you get theeggs and the sugar.andP;  And you can't blend an egg without removing its shell.andO;That kind of move is similarly impossible in an object-oriented program,because each &quot;egg&quot; comes with instructions.andM;The result is a much more natural way to model the world and the procedureswe want to automate, because OOPS involves real objects with real behavior.andO;OOPS not only feels more natural than most computer languages, it's mucheasier to use (specially if someone else has created the objects).andM;While most computer languages are fairly fixed--they have defined sets ofverbs that you can combine as you wish--OOPS languages are designed to beextended by adding new classes of objects.andP;  Of course, you can do the same toother languages by adding subroutines or macros, but the languages aren'tstructured to make it easy to incorporate additions.andM;By contrast, an object-oriented language includes specific knowledge, notjust verbs and rules of syntax.andP;  Indeed, the system builder's part of an OOPSlanguage is indistinguishable from the user's.andP;  OOPS gets people to buildtheir own languages, structured so that others can easily use or extend them.andM;The representation of relationships among objects is another majorcharacteristic of OOPS.andP;  Objects can have all kinds of relationships(ownership, part of, lives in, and so on), including the special one known asinheritance.andP;  Inheritance is how classes of objects specialize intosubclasses; for example, an object-oriented language is a specific kind oflanguage that inherits the general behavior of languages, tempered byspecific quirks of its own.andP;  Each particular object-oriented languageinherits those specialized characteristics.andM;The kind of specialization is how we learn, too.andP;  We start with me/not-me,then not-me/mother.andP;  Our first restaurant teaches us about eating out; later,we learn to discriminate between McDonald's and tablecloth establishments.andO;We perceive new things as being like old things, only different.andP;  This saveswork: rather than describe a whole thing, we only note the differences.andM;In fact, OOPS has a little of what, in object-ese, is called &quot;multipleinheritance&quot;: it shares characteristics of both real-world and computerlanguages.andM;I was thinking about this as I roamed around OOPSLA last fall (that's theconference on Object-Oriented Programming Systems, Languages, andApplications), learning more about OOPS than I could ever hope to explain.andP;  Iwasn't learning a bunch of facts; I was learning the language.andP;  I sat inmeetings as they discussed the finer points of the Common LISP Object System,the differences between Objective C and C++, and the intricacies of multipleinheritance.andM;To know a language, you need to know the culture; you can't speak Frenchproperly until you've sat in a cafe on the Champs Elysees.andP;  And you can'tunderstand OOPS until you've sat in countless meeting rooms, hearinginterminable discussions.andP;  A real language isn't just grammar: to learn it,you have to know the things the language is about and their relationships.andO;Conversely, if you really know the language, you end up knowing the subject,too.andO;</TEXT></DOC>