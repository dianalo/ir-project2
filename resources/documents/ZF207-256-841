<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-256-841  </DOCNO><DOCID>07 256 841.andM;</DOCID><JOURNAL>Government Computer News  Jan 9 1989 v8 n1 p64(2)* Full Text COPYRIGHT Ziff-Davis Pub. Co. 1989.andM;</JOURNAL><TITLE>UNIX users struggle with interface to run-time Ada. (Spotlight onUNIX)</TITLE><AUTHOR>Toth, Bernie.andM;</AUTHOR><SUMMARY>It may be possible to use the Posix interface for someapplications in an Ada run-time system as a stopgap untilreal-time extensions are ready.andP;  Many military and other users areusing Ada as an interface to the ATandamp;T UNIX SVID until the IEEEPosix standard is fully operational.andP;  Some issues that may causeproblems when using an Ada run-time environment as an interface tothe SVID include Ada bindings, run-time autonomy, hardwarecontrol, real-time performance and multiprogramming.andP;  Althoughthere are commercial Ada compilers available for a variety ofoperating systems, including UNIX, there is no standard Adainterface to an operating system, and efforts to standardize havenot yet been successful.andP;  Other problems that can arise from anAda-SVID interface include differing resource control philosophiesand dissimilar handling of program strings.andP;  Users should notexpect hard Ada real-time applications to work well when embeddedin a SVID-based operating system.andM;</SUMMARY><DESCRIPT>Topic:     UNIXADAPOSIX StandardInterfaceOperating Systems.andM;</DESCRIPT><TEXT>UNIX Users Struggle With Interface to Run-Time AdaandM;Can UNIX System V function as an interface to an ADA run-time system?andP;  TheSystem V interface definition (SVID) is not equipped for this task, but thePosix interface may be suitable for some applications when its real-timeextensions are ready.andP;  Other options are in the works.andM;Military and other users want applications portability via standard operatingsystem interfaces to the mandated Ada run-time environment.andP;  Many are usingAda as an interface to the ATandamp;T Co. UNIX SVID until the Institute ofElectrical and Electronics Engineers' (IEEE) Posix standard is fullyoperational.andM;But there are basic problems in using an Ada run-time environment as aninterface to the SVID: Ada bindings, run-time autonomy, hardware control,real-time peformance and multiprogramming.andM;Commercial Ada compilers are available for a variety of operating systems,including UNIX.andP;  However, there is no standard Ada interface to an operatingsystem.andP;  Efforts to standardize an Ada interface in both the United Statesand Europe have not progressed to the point where such a standard could bemade commercially available.andM;The IEEE Posix Ada Bindings Working Group, the Association for ComputingMachinery's SIGAda Group, Europe's portable Common Toolset EnvironmentCommittee and the Defense Department's Common APSE Interface Set Committeeare working on an Ada interface definition for host computers.andM;In addition, the SIGAda Ada Run-time Working Environment Group is concernedwith a real-time environment interface to support embedded real-time systems.andO;This group is examining run-time interfaces, distributed Ada and faulttolerance.andM;The SVID for current UNIX V.3 focuses on time-sharing.andP;  The SVID for thenot-yet-released UNIX V.4 will take real time into account.andM;Ada and SVID: A troubled MarriageandM;The Posix interface will have a real-time version when the IEEE subcommitteeon Posix real time finishes its work at some point in the future.andM;Neither the SVID nor Posix is geared to &quot;hard&quot; real time in embedded systems.andO;Posix regards an interrupt response time of 2 milliseconds to 8 millisecondsas real time.andP;  In many embedded avionics applications, more than 50microseconds' response time is unacceptable.andM;Posix is less of a problem in real-time applications on, for example, afactory floor.andP;  While response time is important, the key element thatdistinguishes &quot;hard&quot; real time from response time is the absolute requirementfor a guaranteed response in a fixed time window.andM;Because the SVID is available as an operating system interface, it might seemthat Ada could be coupled to it if bindings were developed.andP;  But there areadditional problems.andM;Ada real-time environments are designed so that the application programcontrols computer resources as needed.andP;  However, the SVID resource controlphilosophy is just the opposite: The SVID assumes that the operating systemcontrols all computer resources.andM;This difficulty can be overcome, but only at the cost of inefficiency in theresource call.andP;  If the Ada real-time environment directly accesses a timerinterrupt instead of going through the SVID for this resource, the real-timeenvironment task scheduler enjoys a much reduced overhead.andM;Similarly, several layers of SVID services must be encountered before areal-time environment that has been coupled with the SVID can be notifiedthan an interrupt has occurred.andM;In scheduling response to interrupts, proprietary real-time environments thatdo not need the SVID but deal directly with the operating system performbetter than software that requires SVID.andM;Ada, the language for embedded systems, was designed to run on a bare machinewith no operating system.andP;  It needs only a clock, a timer, a memory block andnotification of errors caused by its tasks.andP;  The SVID model inhibits suchautonomy.andM;If a real-time environment were written to use SVID services extensively, theresult would be slower than if it were designed with Ada facilities.andM;The SVID is written in C, and its interface is well-suited to the C language.andO;Any interface to Ada from this C interface requires data translation from theAda format to the C format.andM;A separate software interface is required to convert Ada strings or recordsto C.andP;  The difficulties of this conversion slow down the execution of theprogram.andM;C uses contiguous memory locations to store the multiple characters in astring.andP;  The string then is terminated by an ASCII null.andP;  Although Ada doesnot define how to handle strings, they usually are executed the same way asin C, except without a null terminator.andP;  Because the Ada program always knowsthe string sizes, the C string storage method is inappropriate.andM;There are other problems involved in an Ada-SVID interface.andP;  The SVID allowsmany programs to share processing resources; Ada allows many tasks to shareresources.andM;Both the SVID and Ada use a scheduler to time the use of the sharedresources, and the simultaneous presence of two schedulers causes conflicts.andM;Each scheduler allows high-priority programs or tasks to take control ofcomputing resources when necessary.andP;  But if the Ada tasking scheduler isbuilt on a single SVID process, as is usually the case, the switch from atask in one application program to a task in another application programrequires the intervention of both the Ada and the SVID schedulers.andM;Clearly this system is inefficient, compared with using a single scheduler.andM;Conflicting RequirementsandM;Even worse, if the two programs have tasks of different priorities, it ispossible that one or more of the programs can have higher priority than tasksin the other program.andM;Process and task priorities cannot be set to preserve the correct hierarchy.andM;It is unrealistic to expert hard Ada real-time applications to worksuccessfully when embedded in an operating system based on the SVID.andO;</TEXT></DOC>