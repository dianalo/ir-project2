<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF108-751-762  </DOCNO><DOCID>08 751 762.andM;</DOCID><JOURNAL>Communications of the ACM  August 1990 v33 n8 p14(3)* Full Text COPYRIGHT Association for Computing Machinery 1990.andM;</JOURNAL><TITLE>ACM forum. (letter to the editor)</TITLE><AUTHOR>Maurer, W.D.; Johnson, Jeff; Ruete, Edward S.; Stutz, Brett C.;andO;Grudin, Jonathan; Cole, Charles L.andM;</AUTHOR><DESCRIPT/><NOTE>Only Text is presented here; see printed issues for graphics.andO;</NOTE><TEXT>ACM FORUMandM;Six-Digit CodingandM;The recently published paper entitled &quot;Six-Digit Coding Method,&quot; by Qiao etal., makes the claim that &quot;SDCM is the first method of coding based on theshape of characters&quot; ([3], p. 494).andP;  This is not quite accurate.andM;In the Proceedings of a 1987 conference held in Beijing there appeared mypaper [2], describing a system based on the shape of characters.andP;  My systemis simplicity itself: every stroke has a direction (horizontal, vertical,etc.), and these directions are coded.andP;  The user enters a code for eachstroke, in the same order as the strokes would be drawn.andP;  Since my paper waspresented as a proposed method for children, it was probably very easy forQiao et al.andP;  to overlook it.andM;I welcome the new Six-Digit Coding Method (SDCM) as a definite improvementover my system.andP;  I would like to suggest that certain difficulties seen byQiao et al.andP;  are not really as bad as they might seem.andP;  For example, theexistence of several printing fonts, leading to different codes, does notmean that a single standard must be chosen, as suggested in [3], p. 491.andP;  Weneed only to have all these fonts stored in machine readable form, much as isalready done in the West.andP;  (For example, on German keyboards, the Y and Zcharacters are interchanged from their positions on English keyboards.)andM;Also, those who criticize six digits as being too many ([3], p. 494) areoverlooking the possibility of standard glossaries for very commonly usedcharacters.andP;  In a typical glossary system (see, for example, [1], pp.andO;79-83), the user presses a key (or key combination) meaning &quot;glossary entry,&quot;followed by a code for this entry.andP;  It would be very easy to choose 100 verycommonly occurring characters and form them into a glossary, with only threecharacters to be typed for each of these entries.andP;  There are many otherpossibilities of further simplification.andM;Finally, I should like to mention a fifth important requirement for such asystem, in addition to the four proposed in [3].andP;  This requirement issatisfied by both my system and that of [3], namely, that it may beimplemented using a hand-held numeric keypad.andP;  In my opinion, this isimportant because of the population of China, which is so much greater thanthat of the United States, so that more input devices will be needed.andM;User InterfaceandM;ConsistencyandM;I am writing to express both agreement and disagreement with JonathanGrudin's article, &quot;The Case Against User Interface Consistency&quot;(Communications, October 1989, pp.andP;  1164-73).andM;Agreement, because it is true that naive notions of consistency are rampantin the industry and that some astonishingly bad designs have been produced inpursuit of consistency.andP;  Since design spaces are multi-dimensional, as Grudinpoints out, consistency is not a simple concept, and designers can (and do)interpret and twist it to suit their purposes.andP;  Worse, designers are oftenunaware of dimensions other than the one they are attending to, so their&quot;consistency&quot; decisions are not only misguided, but blind.andM;Agreement, because naive belief in consistency causes designers to designgeneric interfaces for applications and generic applications for users tasks.andO;Systems that use hierarchies of menus or forms for all interactions, basedupon the faulty belief that the advantages of cross-functional consistencyoutweigh the disadvantages of lack of appropriateness of menu or forminterfaces for many functions, come to mind.andP;  Grudin is correct when heargues for more of a &quot;focus on users' work environments&quot;: we should worryless about consistency and more about giving users the right tools for theirjobs.andM;Disagreement, because some of Grudin's examples fall prey to the sameunidimensional, absolutist view of consistency that he is arguing against.andO;For example, his analysis of the knife-placement problem is a straw man, anexample of a placement rule that is poor, though not for the reasons hegives.andP;  His criterion for consistency amounts to putting objects whose nameincludes the word &quot;knife&quot; in the same drawer.andP;  A similar and even more absurdexample would be to put juice glasses, wine glasses, eye glasses, magnifyingglasses, and opera glasses in the same cabinet.andP;  That isn't consistent; it'sjust dumb.andP;  When one distributes the &quot;knives&quot; around one's house based uponfunction, one is not being inconsistent; nor is putting all the knives in thesame drawer consistent.andP;  One could place the knives according to any of thefollowing criteria: shape, use, place of use, name.andP;  These criteria wouldresult in different placements, but none of them are inconsistent in anyabsolute sense because consistency is multidimensional.andM;Disagreement, because while recommending consistency may leave designers freeto look for it where they will, recommending against it and in favor of taskanalysis can lead to the same pitfalls if done (as it will be) naively.andP;  Forexample, programmers have argued with me (their UI designer): &quot;Yes, I knowthat most prompts require a RETURN after the users' typed response, but thisprompt takes only a single letter (Y or N); so efficiency dictates that noRETURN be required.&quot;andP;  And they do it their way, and, lo and behold, userstype RETURNs after their Y/N responses anyway.andP;  Or the Mac designers decidethat dragging files within disks is a Move whereas between disks it is a Copybecause &quot;that's what users will usually want.&quot;andP;  And, lo and behold, Mac usersgripe about not knowing when their files will be moved versus copied.andP;  Userssearch for consistency along the dimensions that are salient to them and makeit up even when it is not there.andP;  Users gladly expend physical effort to savemental effort, so that considerations of consistency may be more importantthan Grudin suggest even though they may not yield the most efficientbehavior.andP;  A user once said: &quot;I'm in a hurry so I'll do it the long way.&quot;andO;That sort of choice is the rule rather than the exception.andM;I do not believe that the solution is to abandon the notion of consistency,but rather is to refine it to remove the slop.andP;  My examples in the previousparagraph indicate that there is something to the notion, and we need to findout what it is.andP;  Never mind how designers define consistency, the key will beto make our definition user centered.andM;Jonathan Grudin, in his article &quot;The Case Against User Interface Consistency&quot;in the October 1989 issue, makes an important point about the futility ofestablishing user interface consistency standards.andP;  Because he does not makethe point in quite the same way as I would and does not apply it as broadlyas I would, I feel compelled to use his article as a starting point for alarger view of the counterproductive nature of standards.andM;In spite of the best efforts of software engineering theorists, includingmyself, to convince us otherwise, programming is essentially a creativeactivity.andP;  Standards can no more guarantee a good program than they canguarantee a good play, novel, or Communications article.andP;  Structured methods,prototyping, programming standards, and interface standards are tools thatcan help improve program quality, but only if they are used creatively andwith an eye towards the overall quality of the product.andM;Many authors have talked of the importance of good language skills, includingcommand of the written language, to good programming ([1] for example).andP;  Theidea that good programmers must first be good writers should be taken with agrain of salt: first, because all the people who express that idea inarticles, books, and letters are by definition writers and therefore biasedand second, because we can all think of some significant counterexamples.andO;Some of the basic skills involved in programming, however, can be learnedfrom writing.andP;  One of the most important is the ability to critically examineones own work and determine if it is any good.andM;In the article, Grudin mentions that a primary difficulty arises when tryingto define user interface consistency, quoting one interface designer assaying &quot;I know consistency when I see it.&quot;andP;  In a landmark work of the &quot;tunedin&quot; seventies, Zen and the Art of Motorcycle Maintenance [2], Robert Pirsiggrapples with another undefinable but easily recognizable commodity, Quality.andO;His entire book is devoted to the thesis that Quality is undefinable becauseit comes before definition and gives meaning to all other definitions.andO;Pirsig was a rhetorician--a teacher of English composition.andM;Pirsig used the undefinable nature of Quality to teach his students how towrite well.andP;  He used a series of demonstrations to prove to his class thateven though they could not define Quality they &quot;knew it when they saw it.&quot;andO;Here is a quote from Pirsig:andM;Now, in answer to that eternal student question, &quot;How do I do this?&quot; he couldreply, &quot;It doesn't matter how you do it, just so it's good!&quot;andP;  The reluctantstudent might ask in class, &quot;But how do we know it's good?&quot;andP;  But almostbefore the question was out of his mouth he would realize the answer hadalready been supplied.andP;  Some other student would usually tell him, &quot;You justsee it.&quot;andP;  If he said, &quot;No I don't,&quot; he'd be told, &quot;Yes, you do.andP;  He provedit.&quot;andP;  The student was finally and completely trapped into making qualityjudgements for himself.andP;  And it was just exactly this and nothing else thattaught him to write.andM;Once the students in [1] believed that they could recognize good writing ontheir own part, he gave them the tools to improve.andP;  Outlines helped withorganization; footnotes and references helped build the authority ofarguments; and knowledge of audience helped with readability.andM;Developing software is a similar activity to writing.andP;  It does not matter howyou do it, just so it is good.andP;  You have to know it is good.andP;  Once thatprinciple is accepted, it puts all the tools and techniques of programdevelopment in perspective.andP;  Structured methods improve organization.andO;Prototyping improves acceptance of systems.andP;  Knowledge of the audience andits work methods improves useability.andP;  The tools are good only insofar astheir application results in good programs.andM;This does not mean that the tools are unimportant, nor does it imply thatsoftware engineering is any less of a real engineering discipline.andP;  Fewpeople will argue that there is some undefined striving for quality at workin designing a superior automobile or airplane.andP;  These activities aresimultaneously real engineering and creative activities.andP;  In both hardwareand software engineering, the design tools give us the capability torecognize and make engineering tradeoffs.andP;  It is the creativity we bring tomaking these tradeoffs that determines the superiority or inadequacy of ourefforts.andM;The endless debates over programming practices that provide so much enjoyablereading and food for thought on these pages miss this basic point, whilemaking thorough use of it.andP;  The letters on the GOTO issue, for example,consisted chiefly of one person saying &quot;Here is an example in my program inmy environment where not using a GOTO obviously resulted in bad code&quot; andanother person saying &quot;Here is an example doing the same thing in myenvironment where avoiding the GOTO resulted in code that is obviously betterthan yours.&quot;andP;  These letters are trying to generalize to standards fromspecific examples of quality.andP;  They are probably written by people working inan environment where there is a large body of development standardsmaintained by an active standards group.andP;  These people are sharing with usthe arguments they are using to get their standards organization to eitherallow or banish GOTOs.andP;  Standards that do either are standards gone wild.andM;Grudin's article is fundamentally making the point that consistentapplication of interface standards will not make for consistently useablesoftware interfaces.andP;  This does not mean that a subliminal awareness ofconsistency, an overt attempt to remain consistent where it makes sense to beconsistent, or a formal step of consistency review do not have a place indeveloping software, especially software intended for widespread use bypeople with varied experience.andM;Grudin's Design Exercise #3, default menu selections, illustrates theusefulness of not having a consistent rule for default menu selections.andP;  Yetthis example appears to be taken from the Apple MacIntosh, a system whosemain selling point is the consistency of its user interface.andP;  The beauty ofthe interface comes not from slavish adherence to simple rules but to elegantand creative application of a complex series of design considerations, onesituation at a time.andP;  He later shows us that even this elegant solution forthe single-application, small-screen world may become inadequate in adifferent environment where other engineering tradeoffs are important.andP;  AsGrudin's impressive list of references and credentials shows, a standardsdocument is no replacement for extensive knowledge of and experience withthese tradeoffs and considerations.andM;This article is worthy of study, not because Grudin is completely right, butbecause he takes an apparently contrarian position in the user interfacedebate.andP;  He is right that relevance to the user's tasks is more importantthan an abstract syntatic or system architecture consistency.andP;  It would bewrong, however, to take his article as a justification for capriciouslyintroducing or carelessly admitting inconsistency into a system.andP;  Ifanything, Grudin makes a case for thinking harder about the user and workingharder to design usable systems.andM;He makes a particular point of cases where ease of learning conflicts withease of use.andP;  But even in cases where ease of learning has been sacrificedfor ease of use, consistency can still be important.andP;  In particular, if theuser is frequently shifting among several different tasks, the cognitive loadof shifting between inconsistent interfaces forms a barrier to ease of useand ease of learning.andP;  Even if the interface for each task has beenindividually optimized for ease of use, the burden of recognizing andadapting to the interface of a new task can overcome the ease of use of theindividual task.andM;Consider Grudin's typewriter keyboard example.andP;  In this case, decreased easeof learning has clearly resulted in increased ease of use.andP;  Yet there aremany different keyboard layouts, each equally difficult to learn.andP;  A keyboardcan be optimized for the relative frequency of characters, digraphs, andtrigraphs in a language.andP;  These relative frequencies might differ greatly inUnix commands and ordinary English.andP;  But few would suggest that a systemshould use one keyboard layout for entering commands and a second layout forentering text.andM;Therefore, ease of use can only be optimized globally over the task domain ofthe user.andP;  The number of tasks, the length of time spent on each, and theclustering of tasks in time are all important factors in the overall ease ofuse of a system.andP;  In general, frequent task changes would argue for a greaterlevel of perceived consistency among those tasks.andP;  But if long sessions aredevoted to a particular task, its interface could justifiably be optimizedaway from consistency with the rest of the system and towards ease of use ofthat individual task.andM;AUTHOR'S RESPONSEandM;My intention in writing &quot;The Case Against User Interface Consistency&quot; was toelicit discussion of that topic, including criticisms.andP;  If interestingletters such as these appear in the ACM Forum, great.andP;  I had already seen theletter from Jeff Johnson.andP;  Although he disagrees with me on several points itseems a balanced, thoughtful discussion.andP;  He seriously misunderstood onepoint, however, and his discussion there simply muddies the water.andP;  He statedthat the example of knives (used for the cover illustration) consists ofobjects grouped together because they share the word &quot;knife&quot; in their name,and he goes on to make a reductio ad absurdum argument around &quot;glass&quot;objects.andP;  However, the knives were grouped by their physical similarity, nottheir names--I stated this early on and even invented a &quot;Martian&quot; in theconcluding section to make this exact point: the Martian would be forced togroup according to physical features, not names.andM;Another KruegerandM;NumberandM;I read with interest Richard Mentock's letter in the April 1990 issue ofCommunications (p.andP;  395), shortly after a visit from such a number which tooksome time to exorcise.andP;  This number manifested itself in a student's programfor an assignment involving building a hash table and testing various hashfunctions and collision-handling techniques for table densities ranging from40 percent to 95 percent.andM;The students created a file of random integers to store in the hash table.andO;One of the collision-handling functions used the quadratic technique andinvolved the line of codeandM;Spot: = (Spot + Increment) Mod TableSizeandM;Several students obtained range errors using the above statement.andP;  Afterissuing a disclaimer that good style precludes the use of controlled integeroverflow and that a hashing implementation would never be used which wouldallow this many collisions, I gave them the fixandM;Spot: = Abs (Spot + Increment) Mod TableSizeandM;in order to complete the assignment.andM;Much to my dismay, one student was still obtaining an index out of rangeerror.andP;  After using the appropriate tracing techniques, she presented me withevidence that the value of Spot was becoming negative even with the fix.andO;After more investigation, I discovered that Spot + Increment happened to be-32768 (-maxint-1).andP;  The Abs function, detecting this as a negative value,negated it.andP;  However, in 16-bit twos complement notation, -32768 is1000000000000000.andP;  When we take the twos complement of this value, we obtain1000000000000000, that is, -32768!!!andM;The bug, once discovered, provided excellent material for a class discussionon the need to understand data representation and the problems involved withtrying to prove program correctness by testing.andP;  This Krueger number maysurface again in programs, but I believe my students will now have a betterunderstanding of how to unravel the mystery.andM;ReferencesandM;[1] Hoffman, P.E.andP;  Microsoft Word 4.0 for the Macintosh.andP;  Addison-Wesley,Reading, MA., 1989.andM;[2] Maurer, W.D.andP;  A Chinese character input system for education.andP;  InProceedings of the 1987 International Conference on Chinese InformationProcessing.andP;  Chinese.andP;  Information Processing Society of China, 1987, pp.andO;266-269.andM;[3] Qiao, J. et al.andP;  Six-digit coding method.andP;  Commun.andP;  ACM 33, 5 (May 1990),491-494.andM;ReferencesandM;[1] Linger, R.C., Mills, H.D., and Witt, B.I.andP;  Structured Programming, Theoryand Practice.andP;  Addison-Wesley, Reading, MA.andP;  1979.andM;[2] Pirsig, R. Zen and the Art of Motorcycle Maintenance.andP;  William Morrow,New York, 1974.andM;W.D.andP;  Maurer Dept.andP;  of EE/CS The George Washington University School ofEngineering and Applied Sciences Washington, D.C.andP;  20052andM;Jeff Johnson User Inferface Researcher Hewlett-Packard Labs Palo Alto, CA94303andM;Edward S. Ruete Information Resources Management Project Coast Guard Researchand Development Center Avery Point Groton, CT 06430andM;Brett C. Stutz Mentor Graphics Corp. 1940 Zanker Road San Jose, CA 95112andM;Jonathan Grudin Datalogisk Afdeling Aarhus Universitet Ny Munkegade, Bygn 5408000 Arhus C daimi @ daimi.dkandM;Charles L. Cole Associate Professor of Computer Science East StroudsburgUniversity East Stroudsburg, PA 18301</TEXT></DOC>