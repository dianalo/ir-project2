<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF207-577-968  </DOCNO><DOCID>07 577 968.andM;</DOCID><JOURNAL>Hewlett-Packard Journal  August 1989 v40 n4 p87(14)* Full Text COPYRIGHT Hewlett Packard 1989.andM;</JOURNAL><TITLE>Product development using object-oriented software technology.andO;(includes a related on object-oriented life cycles)</TITLE><AUTHOR>Kraemer, Thomas F.andM;</AUTHOR><SUMMARY>The development of Hewlett-Packard's HP VISTA software for theHP3565S signal processing system by the firm's Lake StevensInstrument Division illustrates the nature and use ofobject-oriented technology (OOT).andP;  OOT consists of object-orientedprogramming (OOP) languages and object-oriented designmethodologies.andP;  The fundamental concepts include encapsulation,messaging, polymorphism, inheritance and ownership, and class.andO;Each of these is briefly described.andP;  OOT must be able to ensurethat resulting products offer modifiability, portability,reusability, utility, reliability, sufficient performance, easysupport, and compatibility.andP;  HP VISTA was developed in theObjective-C OOP language to ensure sharing of code and conceptswith other HP groups.andP;  Details of the development, architecture,and functioning of HP VISTA are described.andM;</SUMMARY><DESCRIPT>Company:   Hewlett-Packard Co. (product development)Hewlett-Packard Co. (products).andO;Ticker:    HWP.andO;Product:   Hewlett-Packard VISTA (Computer program) (product development).andO;Topic:     Product DevelopmentGoals and ObjectivesObject-Oriented LanguagesSoftware PackagesImplementation.andO;Feature:   illustrationchart.andO;Caption:   Chronology of object-oriented languages since 1960. (chart)Mapping messages to code in a object. (chart)Object encapsulation. (chart)andM;</DESCRIPT><TEXT>Product Development Using Object-Oriented Software TechnologyandM;OBJECT-ORIENTED SOFTWARE TECHNOLOGY is rapidly changing the way softwaresystems are being designed and developed, and the way we think about and usecomputers.andP;  Over the last eight years HP has been active in the research anduse of this technology.andP;  HP has completed several products that use anobject-oriented approach, and the technology continues to be used in newproduct development.andP;  The essential idea in the object-oriented approach isthat data and procedures are represented in a structure called an object, andthe data is only accessible through the procedures contained in the object.andO;Also, objects are the basic building blocks for any system designed using anobject-oriented approach.andP;  The reason for such interest in this technology isthat it provides a productive and powerful paradigm for software development,and it addresses such issues as code reuse and software maintainability.andM;Since object-oriented technology requires a new way of thinking aboutsoftware development, some questions exist regarding its origin, itsdifference from established software development methodologies, and theadvantages its offers the developer and the end user.andP;  This paper addressesthese questions by presenting a brief history and some basics ofobject-oriented technology, and a description of the design and developmentof a product from HP's Lake Stevens Instrument Division that uses anobject-oriented language.andM;HistoryandM;Computer science researchers started to look at object-oriented concepts inthe late 1960s.andP;  The concept of data hiding, in which data is accessed onlythrough a well-defined interface and the data structure is unknown to theaccessing routines, formed the foundation of the object concept.andP;  This wasfollowed by the development of abstract data type systems.andP;  Abstract datatypes implement the data hiding concept and include local procedures, whichhave exclusive knowledge of the data structures within the data type andtherefore perform all operations on the local data.andP;  One of the firstlanguages to explore and implement object-oriented concepts was Simula67.andO;Simula67 was developed in the 1960s in Norway for modeling and simulationprograms.andP;  Fig.andP;  1 shows a chronology of object-oriented languages since1960.andP;  With the exception of Eiffel all of these languages had their originsin a non-object-oriented language.andP;  Also, because the technology is stilldeveloping there are several competing object-oriented languages and nosingle approach has become a standard.andM;Object-oriented programming gaines popularity with the introduction of theSmalltalk language.andP;  [1]  Smalltalk was originally implemented as part of theresearch work done at Xerox Corporation's Palo Alto Research Center (PARC) inthe 1970s and early 1980s.andP;  The language attempted to represent everythingfrom individual bits to whole systems as objects.andP;  In 1981 HP Laboratoriesported Smalltalk to an HP research computer as part of an investigation ofpersonal computer environments.andP;  [2].andP;  The fine granularity of itsimplementation was adequate for research purposes, but because of poorperformance Smalltalk was impractical on generally available computers.andO;However, many of the ideas demonstrated by Smalltalk are still models fortoday's object-oriented systems, and Smalltalk is being commerciallydeveloped on today's more powerful workstations.andM;By 1983 several research and commercial organizations, including HP, wereprototyping practical implementations of object-oriented languages.andP;  Most ofthese implementations use a preprocessor that translates object-orientedprograms into a conventional language such as C or Pascal.andP;  This permits ahybrid approach in which the developer can choose to program in C, Pascal, oreven assembly language when appropriate.andP;  The idea is to provide anevolutionary rather than revolutionary path toward object-orientedprogramming.andP;  The designer is able to fall back on established methods if theobject-oriented approach causes problems.andM;The artificial intelligence community has produced several object-orientedlanguages.andP;  The language Flavors inspired a series of languages leading tothe Common Lisp Object System (CLOS).andP;  CLOS includes object-orientedextensions to the Common Lisp system and is primarily an evolving platformused by researchers.andP;  It is being designed as part of the ANSI X3J13 CommonLisp standardization process.andP;  HP played a role in the invention anddevelopment of CLOS.andP;  The Standard Artificial Intelligence Language (SAIL)was based primarily on Algol and evolved into a language called Mainsailwhich was used in the development of HP's Electronic Design System.andM;Pascal has been used as a foundation for several object-oriented languages.andO;Additions made to Pascal to implement an object-oriented concept calledclasses resulted in the language Clascal and more recently Object Pascal.andO;Clascal was used to develop the Lisa computer from Apple Computers.andP;  Pascalwas used for an early implementation of HP's Softnet which influenced HP'sversion of Objective-C.andP;  HP's Objective-C modifications provided facilitiesto design systems in which customers could add new features without requiringany changes to the original system, including compiling and linking.andP;  HP'suse of this modified version of Objective-C is covered later in this paperwhen the development of HP VISTA is described.andM;The C language has been used as the foundation for several object-orientedlanguage implementations.andP;  The Objective-C language, developed by Stepstone,Inc. [3] is a C preprocessor that permits intermixing standard C code withstatements similar to Smalltalk.andP;  C + + [4] developed by ATandamp;T BellLaboratories is another preprocessor that generates C code.andP;  The latestobject-oriented derivative from C is NextStep which is being codeveloped byNext Computers and Stepstone using the Objective-C language.andM;Eiffel is a relatively new language whose goal is to support softwareengineering more effectively than C-based languages can.andP;  Eiffel is a typed,object-oriented programming language from Interactive Software Engineering,Inc..andP;  It is compiled into C and comes with a class library includinggraphics classes based on X11 (the X Window System, Version 11).andP;  Eiffel isavailable on HP 9000 Series 300 HP-UX workstations.andM;Object-oriented technology includes object-oriented programming languages andobject-oriented design methodologies and processes.andP;  Because object-orientedconcepts are so very different from conventional procedure-based designtechniques and programming languages like C and Fortran, developing anobject-oriented design is initially difficult for software designers.andM;The following sections describe some fundamental concepts aboutobject-oriented technology.andP;  Because object-oriented technology is rapidlyevolving and researchers are exploring new approaches to object-orientedimplementation, there are concepts presented that cannot be fully describedin this article.andM;Encapsulation and MessagingandM;In procedure-based systems, software developers are concerned with creatingglobal data structures and procedures and functions that operate on the data.andO;In an object-oriented environment, developers are concerned with using andcreating objects to build a system.andP;  Objects contain local data structuresand local procedures to operate on the data.andP;  The technical term for this isencapsulation.andP;  (*1)  The current values of an object's internal data definethe object's current state and the object's behavior is dependent on itscurrent state.andP;  The concept of data abstraction makes the data inside anobject private and accessible only through one of the procedures associatedwith the object.andP;  Procedures inside an object are called methods.andP;  Fig.andP;  2shows a representation of object encapsulation.andM;Restricting access to data in this manner may appear to be a seriousrestriction to programmers accustomed to accessing shared data structuresdirectly from any procedure.andP;  However, there are some advantages to imposingthis restriction:andM;* The software can be tested more thoroughly because the data is private tothe object and is only modified by the object's methods.andP;  A common source ofdefects is conventional software is a situation in which a shared datastructure is modified by one procedure unknown to a second procedure.andP;  Thesecond procedure then uses the modified data and generates errors.andP;  Incontrast the definition of the object's interface can be guaranteed to workwhen used by other objects because the data structure is private to theobject.andM;* Because all data is accessed by methods associated with the object, theinternal representation of the data structure can change without changing anyof the software that uses the data.andP;  This is another common problem inconventional software; it can be difficult to modify a data structure becauseit requires finding and modifying all references to the data structure.andP;  Inan object, the methods can be improved and become immediately availableeverywhere without having to change anything else.andM;Objects communicate with other objects by sending messages.andP;  An object'sinterface is defined by the messages that can be send to it.andP;  The set ofmessages an object's interface will respond to is sometimes called anobject's protocol.andP;  These messages cause methods to be invoked to performvarious functions or to obtain data.andP;  A message typically consists of thename of the object to which the message is to be sent, the methods to beinvoked, and any arguments required.andP;  For example, a print message sent to anoutput object would cause the object to invoke the method responsible fordoing printing.andP;  See &quot;Objective-C Coding Example,&quot; on page 95 for an exampleof sending messages.andM;This message scheme is one of the fundamental differences betweenobject-oriented programs and procedural programs.andP;  In procedural languagesthe routine to perform any function is directly invoked by another, whereasin an object-oriented language methods are not directly invoked.andP;  Eachmessage to an object is mapped to a table containing pointers to the codesegments for each method.andP;  Therefore, a method in an object consists of itspointer and code.andP;  Fig.andP;  3 illustrates this concept.andP;  This scheme enableseach object to decide what specific code segment is run to fulfill anexternal request.andP;  The physical implementation of this concept varies betweenlanguages.andM;PolymorphismandM;Polymorphism in object-oriented methodology means that the same message canbe sent to different objects without concern for the method implementationsor the type of data structures in each object.andP;  Only the functionalspecifications and the message protocol for dealing with the object areimportant.andP;  The same message may yield a different response depending on theobject receiving the message.andP;  For example, in Fig.andP;  4 a message called show,which causes an object to display itself on the screen, is sent to twodifferent objects.andP;  In object_a the data type represents graphic coordinatesand the code performs graphics operations.andP;  In object_b the data type issimply an array of real numbers and the code performs formatted printoperations.andP;  Note that the functional specification (i.e., cause an object todisplay itself) and the message protocol for show remain the same for bothobjects.andP;  From this example it can be seen that a good application ofpolymorphism is an iconic user interface, where many different objects,determined by the user, can appear on the screen.andM;To handle different types in a procedural language, the programmer mustanticipate and provide for all the different types of data structures.andP;  Forexample, in Pascal to contend with different data types a programmer mightuse an IF-THEN-ELSE construct or CASE statement to execute differentprocedures depending on whether the data structure contains integers or realnumbers.andP;  This may work initially, but it becomes a maintenance problem if anew data type is added, causing the programmer to modify the programstatements to include the new type.andP;  Then the program must be recompiled andreloaded.andM;Inheritance and OwnershipandM;Object definitions can be shared and reused among objects without having tomake duplicate copies.andP;  Also, the functionality of an object can be expandedwithout modifying the original object.andP;  This capability is referred to asinheritance--the object inherits functionality from another object which itcan expand and build on by adding data and new methods.andP;  Fig.andP;  5 illustrateinheritance: object_b inherits method_1 from object_a.andP;  The data structure inobject_b that is used by method_1 from object_a must be in the same form asin object_a.andP;  However, the data values used by method_1 in object_b are stillprivate to object_b.andP;  Method_1 gains access to the data structure in object_bthrough a pointer that is set up when object_b is created or by pointer thatis passed to it from object_b.andM;Inheritance can be implemented easily since messages are mapped via a tablethat points to what code should be executed.andP;  This table can just as easilypoint to another object's message table, thereby inheriting the otherobject's functionality.andP;  In some languages, like Smalltalk and Objective-C, astrict hierarchy is imposed.andP;  Inheritance is only allowed from one otherclass of objects.andP;  Other languages allow object to inherit functionality frommore than one class of objects.andP;  Advantages resulting from being able toinherit functionality include:andM;* Inheritance results in a significantly smaller amount of code for identicalfunctionality.andP;  This is because objects can be defined incrementally in termsof other kinds of objects.andM;* Inheritance can provide a convenient way of organizing and describing therelationships between objects.andP;  For example, a class of objects called&quot;employee record&quot; contains all of the generic information about an employeesuch as name, rank, and serial number.andP;  If there are multiple types ofemployees such as managers, professionals, and nonprofessionals, a new typeof object could be defined for each of these groups that would include dataand operations specific to each group.andP;  For managers, this might be thedepartment budget, number of employees, and other data that might not berelevant to the categories of professionals and nonprofessionals.andP;  Since eachnew object type inherits from the same employee object definition, thegeneric employee methods, such as a request to print out the employee's name,are executed in the same way.andP;  These new objects do not need to copy orreimplement the &quot;print&quot; employee method.andM;There are three typical approaches to inheritance.andP;  First, a method can beinherited from another object and used as is with no modifications as shownin Fig.andP;  5.andP;  Second, the same method and the same interface to the method canbe inherited and modifications to the method can be made.andP;  Thesemodifications might include code to handle new data structures as well as theinherited data structure.andP;  The same interface means that the inherited andmodified method will respond to the same messages it did before.andP;  This isillustrated in Fig.andP;  6a where the same message that invokes method_1 inobject_x can also be used to invoke method_1 in object_a.andP;  Finally, all themethods of object_x can be inherited and new methods and additional datastructures can be added to the inheriting object.andP;  This is illustrated inFig.andP;  6b.andM;Inheritance is sometimes confused with ownership.andP;  An object might ownanother object because the other object is part of its internal data (seeFig.andP;  7).andP;  Owned objects communicate with the owner with the same messages asbefore.andP;  However, the owned object is not directly accessible or visible toobjects outside the owner.andM;ClassandM;Many object-oriented languages allow the definition of a class of objects.andP;  Aclass is a template that can be used to create multiple instances.andP;  Eachinstance is an independent object with its own data and state but it sharesidentical methods with all other objects of the same class.andP;  Objective-C andSmalltalk support classes.andM;There is not a universal agreement about the importance of classes in anobject-oriented language.andP;  Some object-oriented languages are classless.andO;These include prototypical languages which support inheritance, andactor-like languages which support concurrency but not inheritance.andM;Desired CharacteristicsandM;Regardless of the implementation, there are some characteristics thatobject-oriented languages and methodologies should have to ensure that theycontinue to be useful as a software development technology.andP;  Thesecharacteristics include:andM;* Modifiability.andP;  It should be possible to &quot;plug&quot; new software objects intoan existing system without having to change the original system.andP;  This allowsthe customer to enhance the expand a system just like plugging new hardwarecards into a computer.andP;  This has been called a software card cage or softwareIC, [5] to use a hardware analogy.andP;  In the context of software engineeringthis means dynamically linking and loading a software module after theprogram has started running.andP;  Today, new functionality is normally added tosoftware systems by recompiling and relinking the entire software system.andO;This is a tedious and time-consuming process and usually impractical to do byend users.andP;  Dynamic linking allows a user to add a new object to a systemmore quickly than relinking and reloading the entire system.andP;  This kind ofmodularity allows software objects to be designed in relative isolation andat different times while remaining compatible.andM;* Portability.andP;  Objects should be able to move from system to system and beusable in a wide range of software products.andP;  This should be as easy as theuser's popping up a window (possibly connected over the network to anothersystem), selecting the desired object, and then selecting what to do with it.andM;* Reusability.andP;  It should be possible for newly created objects to havefunctionality that represents an incremental expansion of the functionalityof existing objects.andP;  This allows reuse without having to waste extra time ormemory space to duplicate previous work.andP;  There should be catalogs of thesestandard software objects available for general use.andM;* Usability.andP;  At the user's request most objects should be viewable.andP;  Withmore familiarity and experience the user should be able to view andmanipulate objects that may not be prominently visible to a novice user.andO;Each object should be storable and retrievable by the user.andP;  The objectenvironment needs to follow modern user interface conventions and de factostandards.andP;  It is widely accepted that objects are an excellent way toimplement modern human-to-computer interfaces.andM;* Reliability.andP;  Since objects are fundamental system building blocks, eachobject must be tested as if it were a complete software unit and all thestandard structural and functional testing methods must be applied to it.andO;[6]  Also, process and defect monitors should be built into every system.andM;* Performance.andP;  Object-oriented systems should not prevent the encapsulationof high-performance or highly tuned software.andM;* Supportability.andP;  Regression test suites must exist to retest objectswhenever they are changed to ensure that no new defects are introduced andtheir interaction with other objects remains the same.andP;  This implies thatobjects must have hooks included to ensure testability.andM;* Compatibility.andP;  Object-oriented systems should work with existingconventional software.andP;  This is important to preserve previous investmentsand allow compatibility with emerging software standards.andM;These characteristics have been implemented in some object-orientedimplementations and some are still topics of research.andP;  Together they form avision of what object-oriented systems are trying to achieve.andP;  No systemtoday implements everything.andP;  formal design methods can be used to expressand communicate an object-oriented design.andP;  This is essential for buildingcomplex software systems since it allows a design to be analyzed and improvedin a systematic way.andP;  Like any other design methodology the successful use ofobject-oriented techniques depends on good project management and tools, suchas a defect tracking system and configuration management.andM;Recent HP ExperienceandM;Several products at Hewlett-Packard have used object-oriented approaches.andO;They include the NewWave environment, [7] a chemical data editor, a dynamicsignal measurement and analysis system, and an electronic engineeringcomputer-aided design system.andM;NewWave objects typically correspond to the kinds of data ordinarilyassociated with traditional office application programs: complete documents,spreadsheets, charts, drawings, and so on.andP;  the most noticeable feature of aNewWave object is that a user never needs to know what program actuallymanages the object.andP;  The user simply asks to perform some operation on anobject and the NewWave object management facility (OMF) automaticallyassociates the object with the correct application.andM;The chemical data editor is part of an HP ChemStation used to performchemical analysis.andP;  The editor portion is written in an object-orientedmanner by using Pascal records as objects containing a pointer to a classdispatch table.andP;  Seven classes of objects represent the different data typescorresponding to chemical spectra.andP;  The editor allows the user to manipulatethe data.andP;  The key benefit of object-oriented programming to this editor isthe ability to treat different styles of spectra (data types) in a similarway.andP;  This makes the manipulation of the test results much easier for theuser.andM;HP's Electronic Design System is written in the Mainsail language withobject-oriented extensions.andP;  this system allows software objects to becreated incrementally and linked dynamically to the existing system.andO;Polymorphism is used to help implement generic routines that handle a widevariety of computer-aided design data.andM;Recently, HP's Lake Stevens Instrument Division introduced the HP VISTAsoftware product which is a dynamic signal measurement and analysis systemimplemented with the Objective-C programming language.andP;  HP VISTA is describedin more detail in the next section.andM;More HP products are under development using object-oriented technologies.andO;In many cases the use of objects is not directly observable by the end user.andO;In other cases the user has explicit control over creating and using newobjects.andM;Design ExampleandM;There are no cookbook procedures or formal methods that can be used togenerate and analyze an object-oriented design and this is still an area ofactive research.andP;  The architecture documented here illustrates one way ofapplying object-oriented techniques for product development.andM;HP VISTAandM;HP VISTA is the software portion of the HP 3565S Signal Processing System.andO;the system is used for dynamic signal analysis.andP;  Real and imaginarycomponents of electrical signals are measured and digital signal processingtechniques, like the fast Fourier transform, are used to calculate thefrequency-domain components.andP;  The measured electrical signals can come from awide range of sources and transducers.andP;  Knowledge gained from thesemeasurements can be used to improve a design or detect faulty machinery.andM;One common application of a dynamic signal processing system is in the designand testing of mechanical structures (modal analysis).andP;  A mechanicalstructure, such as an airplane body, can be drawn on a computer-aided designsystem and analyzed with finite element methods.andP;  A prototype can be builtand tested by measuring the outputs of accelerometers attached to differentpoints on the structure while shaking the structure with a random input.andM;The random input has a broad bandwidth and will cause all of the modes ofvibration of the structure to be excited.andP;  The frequency spectrum plot ofeach transducer will peak at a frequency associated with the naturalvibration of the structure.andP;  A structure can be formally modeled byparameters that describe each mode of vibration (see Fig.andP;  8).andP;  The resultingmodal model is useful for simulating modifications to the structure.andM;The HP 3565S hardware (see Fig.andP;  9) provides a rack that can hold up tosixty-three input modules.andP;  Each input module conains analog-to-digitalconverters for data acquisition, memory buffers for one or more inputchannels, and hardware dedicated to digital filtering and zoom analysis.andP;  Themaster module contains a dedicated 16-bit processor and additional digitalsignal processing hardware to fetch data from each input buffer forwindowing, transforming, and uploading data to a host computer via an HP-1B(IEEE 488, IEC 625) interface.andM;The HP VISTA software resides on the host computer and provides the userinterface and processes for interactive control of the measurement andanalysis functions and stimulus-response testing.andP;  It is also responsible fordownloading software to the master module in the signal processing hardware.andO;The host computer is an HP 9000 Series 300 Computer running the HP-UXoperating system.andP;  The multi-tasking capabilities of the HP-UX operatingsystem.andP;  the multi-tasking capabilities of the HP-UX operating system allowHP VISTA to perform several measurements simultaneously, plot results, writea report, and receive electronic mail from a local area network.andP;  Measurementresults can be used directly by the design and analysis tools.andP;  The HP-UXsystem also provides real-time extensions such as a preemptive kernel, sharedmemory, and memory lockable processes, which are required to handleinstrument I/O.andM;Selection of an Object-Oriented LanguageandM;The developers of the HP VISTA product had previous experience with severallarge instrument firmware projects written in Pascal.andP;  the complexity andsize of HP VISTA required a new software engineering approach.andP;  Since therange of applications for dynamic signal analysis is very large, the majorgoals for HP VISTA were to provide a system that enabled customers toconfigure their own software and add new hardware into the system.andP;  It wasalso important to be able to add new features to the product incrementally.andM;Object-oriented software was able to satisfy these goals.andP;  The HP VISTAproduct was initially based on the Softnet technology developed by a group atHP's Ft.andP;  Collins Engineering Operation.andP;  These concepts were ported to C forcompatibility with the HP-UX system.andP;  This C-based object-oriented system wasenhanced to include encapsulation, messaging to support polymorphism, andinheritance.andM;During the early development stages of HP VISTA, a group at HP's LovelandMeasurement System Operation was using and extending the Objective-Cprogramming language.andP;  The HP VISTA C code was ported to Objective-C halfwaythrough the project to permit sharing of code and ideas with other HPdevelopment groups.andP;  Software engineering issues such as source code controland configuration management were worked out in parallel (see&quot;Object-Oriented Life Cycles&quot; on page 98).andM;Faceless InstrumentsandM;The use of a general-purpose HP workstation as the primary interface toinstruments is a fairly new concept.andP;  Instruments traditionally have beencontained in a dedicated box with a display and buttons on the front panelfor control and observation.andP;  The development of the HP-IB interfacepermitted these stand-alone instruments to be controlled froma centralcomputer, but the primary interface remained via the front panel.andM;A &quot;faceless&quot; instrument transfers the primary interface from the front panelof the instrument to the screen of a general-purpose computer.andP;  This makes iteasier to interface with a group of instruments, and it is a lower-costsolution since it eliminates the redundant displays and front panels on eachinstrument.andP;  The HP PC Instruments (8) family was the first HP product lineto build faceless instrument modules with the user interface displayed on apersonal computer screen.andP;  these software displays mimic the buttons anddisplays seen on a normal instrument front panel.andM;HP VISTA software also controls a group of faceless instruments that cansupport hundreds of input channels.andP;  Because of the number of input channels,the HP VISTA computer display cannot duplicate a standard front panel on itssmaller display.andP;  A method was devised for controlling and viewingmeasurement activity via windowed user interface (see Fig.andP;  10).andP;  HP VISTAdoes this by using the standard HP Windows/9000 system.andP;  Each object in HPVISTA is capable of displaying itself in a window on the screen.andP;  the usercan also have other software applications displayed simultaneously in otherwindows.andP;  For example, the user can view a drawing of a device whileperforming measurements on it.andP;  It also allows the user to reconfigure thedisplay as required since windows can be added, deleted, and moved todifferent regions on the screen.andM;The user interface required several iterations to achieve the goals of userconfigurability and ease of use.andP;  One version of the design considered use ofthe entire display filled with tiled (*2) information.andP;  The display tiles arenonoverlapping and adjust in size if additional tiles are added to thescreen.andP;  The advantage to this approach is that it provides the user with aconsistent view of the system.andP;  the disadvantage is that it is difficult toadd new objects as they are developed and the user may not want the exactdisplay chosen by the program.andP;  another design proposed to display everyobject in a directory from where it could be selected and displayed.andP;  Theadvantage here is total flexibility.andP;  The major disadvantage is confusion bynew users on where to start work.andP;  also, each window creates a new HP-UXprocess, and too many processes can reduce system performance.andP;  The finaldesign for the user interface settled on limiting the display windows to asmall number of objects and tiling objects within these windows in acontrolled manner.andP;  Different-sized displays can be accommodated with thistechnique and still provide the user with the advantages of windows.andM;Object Model/View/ControllerandM;The HP VISTA system is based on three types of objects: model objects, viewobjects, and controller objects (see Fig.andP;  11).andP;  this organization is similarto that used in the Smalltalk language.andM;In HP VISTA, model objects contain data about the hardware, data collectedfrom measurements, and data associated with computations.andP;  They also containthe methods to retrieve and manipulate the data.andP;  view objects own modelobjects and they contain the methods to draw the information contained in themodel objects on a display.andP;  View objects send messages to model objects toretrieve the information to be displayed.andM;With the model object separated from the view object each can specialize inwhat it does best.andP;  A single model object can be viewed in more than one wayby creating multiple view objects that own the same model object.andP;  In Fig.andO;12 a single model object that contains the current value of the time of dayis owned by two view objects.andP;  The view objects use the time-of-day valuefrom the model to display two different representations of the time on thedisplay.andP;  Likewise, a single view object can be used to display manydifferent model objects.andP;  Because of the dynamic linking and loadingcapability of objects, new objects can be dynamically added to a view object,thus eliminating the need to provide for all combinations of models andviews.andM;The controller object handles all of the user's input devices, such as themouse and keyboard.andP;  The controller interprets the user inputs and maintainsinformation about the state of the input devices.andP;  The inputs can even comefrom a computer-generated sourc} such as an automatic test program.andP;  Astandard controller object can be used by many different view objects.andM;Views and SubviewsandM;HP VISTA has several general classes of view objects that are widely reusedeither through inheritance or simply by reusing the whole object.andP;  These viewobjects include text displays, scroll bars, pushbuttons, and so on.andP;  A windowdisplay can be constructed from several of these view objects in ahierarchical manner.andP;  The subviews of a view object are owned by and nestedwithin the view when it is displayed (see Fig.andP;  13).andP;  Subviews are usuallyadded to a view when it is created and are set up to display the individualobjects that make up the model object.andM;Each view has the ability to calculate its size automatically from thepositions and sizes of its subviews.andP;  This permits subviews to change in sizewithout requiring any changes in code.andP;  A subview can operate as it would byitself, or it can transfer responsibility to its superview.andP;  This allowsgeneral-purpose subviews to be created which can be selectively overridden bythe superview.andM;Dependent View ObjectsandM;Each view object can automatically update the display whenever the modelobject changes.andP;  The model object maintains a list of all objects that wantto be informed whenever a change takes place.andP;  This list called a dependencylist.andP;  An object can request to be added to this list by sending a message tothe model object it wants to be notified by when something changes.andP;  HP VISTAadded this capability to the Objective-C system.andM;Exception HandlingandM;To prevent the system from crashing because of errors in user input ormeasurement computations, Objective-C was extended to include a try/recoverexception handling capability.andP;  Different sections of the code are declared atry region, where if anything disrupts the normal sequence of processing,such as division by zero or a hardware error, the recover block of code isexecuted either to patch things up and continue, or to inform the user that aproblem exists.andP;  Every attempt was made to provide the user with helpfulerror messages so that any problem can be corrected and a successfulmeasurement made.andM;A try/recover block was also placed around the entire HP VISTA system.andP;  Thesystem is then protected against all undetected software defects.andP;  Thesedefects are trapped and the user can continue to operate the system.andP;  Some ofthese undetected defects might cause the system to freeze up and require theuser to restart the program.andP;  Despite rigorous quality assurance testing, itis well known that software defects can remain undetected for a long time.andO;Object-oriented programming improves this situation but it will not guranteezero defects.andM;HP VISTA ArchitectureandM;Between the model and view object categories, HP VISTA has more than 300different types of objects, which are further categorized into three groups:virtual instrument objects, measurement objects, and result objects.andP;  Eachgroup is made up of model and view objects, that is, there are virtualinstrument model and view objects, measurement model and view objects, andresult model and view objects.andP;  These categories and the relationship betweenthe objects and the display windows are shown in Fig.andP;  14.andM;Virtual instrument objects encapsulate the instrument hardware, whichincludes input modules, source modules, and the hardware configuration setup.andO;All of the software in HP VISTA interfaces with the hardware via the virtualinstrument objects.andM;The measurement objects perform generic measurement functions such as arm,pause, continue, abort, and averaging, as well as functions specific to aparticular measurement type.andP;  Typical measurement types include frequencyresponse functions and power spectrums.andM;The result objects store the computed measurement data.andP;  This data iscorrected for calibration variances and is available for display by variousview objects.andP;  The result objects can also be used for additional computationand processing by the user.andM;The measurement folder, which appears in the virtual instrument displaywindow, lists all of the measurement objects accepting data from the virtualinstrument (see the bottom window in Fig.andP;  10).andP;  The user can request thatmultiple measurements be computed simultaneously from the data collected bythe virtual instrument objects.andM;A standard interface is defined between the virtual instrument objects andmeasurement objects as well as between the measurement objects and the resultobjects.andP;  These interfaces permit one category to change its implementationwithout affecting the other two categories of objects.andP;  For example, as newinstrument hardware is introduced, only the virtual instrument objects needto change.andP;  The measurement and result objects can remain the same.andM;Virtual Instrument Objects and DependencyandM;All instrument hardware handled by HP VISTA is encapsulated by virtualinstrument objects.andP;  The term virtual instrument was chosen to represent thefact that the software representation is a virtual image of theinstrumentation hardware.andP;  The letters of the word VISTA stand for VirtualInstrument System for Test and Analysis.andP;  The virtual instrument objectsencapsulate the hardware setup state, the input module states, and sourcemodule states.andM;Virtual instrument objects read and update the state of the hardware.andP;  HPVISTA's object dependency feature described in a previous section is used toautomate updating these objects whenever the state of the hardware changes ornew modules are added.andP;  The use of dependency eliminates the need for eachobject to poll periodically for any changes.andM;Each hardware input module is represented by an input module object.andP;  Inputmodule objects are displayed in the input setup window.andP;  When an input moduleobject changes for any reason, it informs the appropriate virtual instrumentview object that a change has occurred.andP;  The virtual instrument view objectcan then take appropriate action.andP;  A common use for this scheme is toindicate when a new block of data has been acquired.andP;  The input module loadsits buffer memory and signals all of its dependent objects that it has newdata.andP;  The objects signaled can then choose to use or ignore the new data.andM;A standard interface exists between the virtual instrument objects andmeasurement objects.andP;  The virtual instrument collects one block of data fromeach input module and creates an object containing an array of data blockobjects.andP;  This general-purpose object contains the data from the input moduleobject and methods for performing measurement calculations (e.g., add twoblocks of data, complex conjugate addition, etc.).andP;  This object can be usedby all measurement objects.andP;  Measurement objects can also make requests tothe virtual instrument objects to activate instrument source modules througha standard protocol of messages.andM;ConcurrencyandM;The process of collecting data and passing it on for further computation iseffectively an endless loop.andP;  A deferred messaging system was created in HPVISTA to allow messages from the user to be executed while a measurement istaking place.andP;  For example, the user may wish to change the voltage settingof a source output while performing some measurement process.andP;  Instead offorcing each object to waste CPU time in a software loop that polls for newmessages, a deferred message queue was created.andP;  This queue is a list ofmessages waiting to be executed.andM;All messages sent to objects on the dependency list are sent to this deferredmessage queue.andP;  Also, all messages that result from the user's pushing abutton or selecting a menu item are sent to this deferred message queue.andP;  Themain measurement loop is dividided so that a deferred message is sentfrequently enough to objects on the dependency list to allow a user's messageto be executed in a timely fashion.andP;  This creates the illusion of twooperations occurring at the same time even though there is only one programand one HP-UX process.andP;  Users can modify and display instrument settingsinteractively while watching on-line updates of the measurement in progress.andO;The spawning of extra processes is not required and objects do not need topoll for input--they just need to respond to message sent to them.andO;Significant performance advantages are achieved by reducing the number ofprocesses required.andM;Measurement ObjectsandM;Measurement objects perform specific measurement functions using the datacollected by the virtual instrument objects.andP;  The concept of inheritance isused by all measurement objects to provide new measurement functionsincrementally.andP;  All measurement objects inherit key functionality from asuper class object which implements a state machine that handles all genericmeasurement functions, such as arm, pause, continue, abort, and averaging.andM;Several different measurement objects can make themselves dependent on thevirtual instrument objects.andP;  Each time a new set of data has been collected,a virtual instrument object informs each object on its dependency list thatnew data is available.andP;  More than one measurement object can be on adependency list to permit the simultaneous calculation of several measurementresults from the same data.andM;One specific measurement performed by HP VISTA is a multiple-input,multiple-output (MIMO) frequency response function.andP;  There is a significantincrease in measurement throughput and measurement accuracy associated withprocessing multiple simultaneous inputs.andP;  The calculation of this measurementrequires a matrix computation combining data from multiple channels.andP;  (9) The MIMO frequency response measurement object uses the data collected by thevirtual instrument objects to do these computations.andM;Other measurement objects perform 1/3-octave measurements, power spectrummeasurements, and time-domain measurements.andP;  Depending on the application,one or more measurement objects might be using the virtual instrument outputsimultaneously.andP;  The measurement objects are set up and started inmeasurement windows on the display.andP;  The measurement windows sometimescontain views of the measured results.andM;Result ObjectsandM;Results computed by the measurement objects are stored in  special resultobjects that include special information about the measurement.andP;  Thisinformation includes data correction information, units, input range factors,pointers to where the measurement is documented, and so on.andP;  The resultobjects inherit functionality from general-purpose math objects.andP;  Theseresults are displayed in result and trace view windows.andM;Result objects can be saved on disc by using an automatic I/O feature of HP'sObjective-C.andP;  Every object in HP VISTA has the ability to save itself onrequest.andP;  The save procedures are nested so that a single message to anobject will save the object and all of the objects it uses.andP;  Therefore, theuser can save just the results, the virtual instrument setup objects, themeasurement setup objects, or everything except the actual hardware.andM;Each result view object can be a dependent of a result model object.andO;Separating the view function allows each measurement result to be displayedin more than one way by creating a new object.andP;  Also, more than one viewobject can be simultaneously displaying the measurement results.andP;  Each timethe measurement object computers a new result, it sends a message to a resultmodel object informing it that there has been a change.andP;  The result modelobject then informs all of the result view objects on its dependency listthat it has new results.andP;  The result view objects can then take the newresults and update the trace plots in the display windows.andP;  For example, auser can be viewing the same measurement results both as a frequency responseplot and as a Nyquist plot in two different windows.andM;The user of HP VISTA has a large amount of control over what measurementobjects and results objects are created and displayed.andP;  This makes setting upa custom measurement display easy.andP;  The user can open the specificmeasurements and results views required and position these on the screenwhere desired using standard HP Windows/9000 menu commands.andP;  For users notrequiring this flexibility, object can be treated that will manage andperform a specific measurement application.andP;  These applications require lessknowledge about the windows and object system and are easier to use.andM;A user programming language is provided by HP VISTA to permit users to sendmessages to any object visible in the system.andP;  With this feature the user cancreate automatic scripts to set up and perform measurements without humaninteraction.andP;  The user can also create a user program to process the resultsfurther if required by the application.andM;PerformanceandM;Since HP VISTA measurements must be performed in real time and on-line,consideraton was given to designing the system for performance.andP;  Commonfolklore says that object-oriented systems are slower than conventionalsystems because data can use only be accessed by sending a large number ofmessages.andM;HP VISTA was designed with an object-oriented language that permits theinclusion of standard C rode where required for performance reason.andP;  Early inthe design an estimate was made concerning what items should be objects andwhat items should be coded in C to increase performance.andP;  For example, directpointing into an array of numbers was allowed in a controlled manner sincemillions of array computations are performed.andM;Most of the anticipated bottlenecks did not become problems.andP;  Optimizationwork on the Objective-C language by Stepstone Corporation and a group withinHP resulted in message execution times only a fraction slower than a standardprocedure call.andP;  Several major performance problems were solved during atuning phase by modifying the offending algorithms and repartitioning someobjects.andP;  Performance was also improved by measuring and determining wherethe bottlenecks were and then rewriting those sections of code.andP;  Thisincluded eliminating objects in some places and creating new objectselsewhere.andM;A common design issue related to object-oriented programming is thegranularity of objects created.andP;  A fine-grain object is one that performs avery small function in the overall system.andP;  A large-grain object is one thatencapsulates a large amount of functionality.andP;  A common perception says thata system with fine-grain objects will have poor performance because of thelarge number of messages required.andP;  On the other hand, a system with too manylarge-grain objects will not provide the user with many of the advantages of objects.andM;HP VISTA designers discovered that both large-grain and fine-grain objectsmust be carefully chosen and designed to balance system features withperformance.andP;  Granularity is an important system design issue that is stillnot well-understood.andP;  For example, a very fine-graine integer object wascreated to aid in the display of integer numbers on the screen.andP;  This objectturned out to be a good use of an object since it was able to fit into thestandard view object structure and was updated automatically at a fairly lowfrequency.andP;  Only a couple of message are sent to it and so it is not aperformance bottleneck.andP;  However, this is a poor object to use in anumerically intensive application such as a fast Fourier transform whichrequires fast and frequent access to each integer value in an array.andP;  Afaster design would create an object with a fast Fourier transform methodcoded using an array of integers rather than an array of integer objects.andO;This array of integers would be classified as a coarser-grained object.andM;Additional performance tuning was done with HP VISTA's interface to the HPWindows/9000 system and the HP-UX operating system real-time extensions.andP;  Anadditional memory-locked process was created to store incoming blocks of datainto an area of memory shared by the main HP VISTA program.andP;  This memoryqueue buffers the statistical time variations caused by hardware andoperating system response time.andM;Memory ManagementandM;The creation and destruction of objects requires that system memory beallocated and deallocated.andP;  These actions can result in two problems: memorycan be fragmented into small and unusable pieces, and memory can run outbecause memory space occupied by old objects is not reclaimed.andP;  The processof cleaning up memory is often referred to as garbage collection.andP;  Theprogram must periodically reconfigure system memory space to avoid runningout of memory for new objects.andM;The garbage collections process can take a significant amount of time andcould interfere with a real-time measurement process.andP;  HP VISTA designerscarefully designed the main real-time measurement loops so that memorymanagement is not required during operation.andP;  This is done by recycling oldobjects every time through the measurement loop and avoiding the creation ordestruction of new objects.andP;  Outside of the measurement loop, a simple memorygarbage collection takes place in the background.andP;  The user can also requesta more complete garbage collection when spare time is available.andM;SummaryandM;Object-oriented technology represents a fundamentally new way of creatingsoftware.andP;  It has not yet been quantified into a textbook procedure.andP;  To besuccessufl, object-oriented approaches must be applied in conjunction withgood project management and tools, such as a defect tracking system andconfiguration management.andP;  There are no panaceas that will eliminate softwareengineering problems, but object-oriented approaches will help producesoftware that is far more tolerant of change.andP;  HP VISTA and other HP productsare examples demonstrating these advantages.andM;AcknowledgementsandM;I would like to acknowledge the vision, determination and support shown byHoward Hilton to build an object-oriented software product.andP;  Howard servedinitially as section manager and later as lab manager for the HP VISTAproduct development.andP;  This product could not have been done without Howard'sinsights and understanding of object-oriented technology.andP;  The HP VISTAproduct was able to implement only a small portion of Howard's vision of howsoftware should be done.andP;  Also, the Instrument System Laboratory under theleadership of David Palermo helped to develop and champion these ideascompanywide.andP;  John Uebbing and Charles Young of HP Laboratories demonstratedwhat could be done with Objective-C and real-time measurement graphics.andP;  TheHP VISTA design team, too numerous to list here, invented many innovativesolutions while pioneering in no less than six major technologies: a newreal-time HP-UX operating system, a new HP 9000 Series 300 workstation, newsignal processing hardware, object-oriented programming, faceless instrumentand windowed user interface, and multiple input/output frequency responsemeasurements.andP;  The design team's solutions to technological problems in eachof these areas helped in the successful completion of the HP VISTA product.andM;ReferencesandM;[1] A. Goldberg and D. Robson, Smalltalk-80: The Language and itsImplementation, Addison-Wesley, 1983.andM;[2] G. Krasner, Snalltalk-80: Bits of History, Words of Advice,Addison-Wesley, 1983, pp.andP;  79-112 and pp.andP;  207-237.andM;[3] B. Cox, Object-oriented Programming: An Evolutionary Approach,Addison-Wesley, 1986.andM;[4] B. Stroutstrup, The C++ Programming Language, Addison-Wesley, 1986.andM;[5] B. Cox and B. Hunt, &quot;Objects, Icons, and Software ICs,&quot; Byte, August1986, pp.andP;  161-176.andM;[6] S. P. Fiedler, &quot;Object-Oriented Unit Testing,&quot; Hewlett-Packard Journal,Vol.andP;  40, no.andP;  2, April 1989, pp.andP;  69-74.andM;[7] Hewlett-Packard Journal, this issue, pp.andP;  6-64.andM;[8] Hewlett-Packard Journal, Vol.andP;  37, no.andP;  5, May 1986, pp.andP;  4-32.andM;[9] T. Kraemer, &quot;Software Architecture for a Multiple Input/Output DynamicSignal Analyzer,&quot; 4th International Modal Analysis Conference, 1986.andM;(*1) This is not the same as NewWave encapsulation described in the Article&quot;Encapsulation of Applications in the NewWave Environment,&quot; on page 57.andM;(*2) Tiled information refers to a window system in which windows are shapedand sized to fit together without overlapping each other.andO;</TEXT></DOC>