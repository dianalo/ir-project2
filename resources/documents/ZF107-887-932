<?xml version='1.0' encoding='UTF-8'?>
<DOC><DOCNO>  ZF107-887-932  </DOCNO><DOCID>07 887 932.andM;</DOCID><JOURNAL>PC Magazine  Dec 12 1989 v8 n21 p329(5)* Full Text COPYRIGHT Ziff-Davis Publishing Co. 1989.andM;</JOURNAL><TITLE>Windows and PM: friendly companions or deadly competitors?andO;(Environments)(Microsoft Windows and Presentation Manager)(column)</TITLE><AUTHOR>Petzold, Charles.andM;</AUTHOR><SUMMARY>Microsoft's Windows graphical user interface is competing with theOS/2 Presentation Manager interface for user attention.andP;  Windowsis part of a set of DOS extensions that were originally created asstop-gap measures.andP;  It bumps against the DOS 640Kbyte memorybarrier, requiring expanded memory schemes, DOS extenders, and the80386's Virtual-86 multitasking mode to function properly.andP;  OS/2is a better long-term solution, but Microsoft plans to introduceWindows 3.0, which adds to the confusion by allowing Windowsapplications to run in protected mode under DOS.andP;  OS/2 is theoperating system of the future, but Microsoft perverselydiscourages users from upgrading with its strong commitment toWindows.andP;  Presentation Manager's application programming interfaceis better than that in Windows and users are unlikely to turn awayfrom PM in the long term despite Microsoft's strategy.andM;</SUMMARY><DESCRIPT>Product:   Microsoft Windows (Graphical user interface) (usage)OS/2 Presentation Manager (Graphical user interface) (usage).andO;Topic:     Operating EnvironmentsGraphical User InterfaceCompetitionSoftware Design.andM;</DESCRIPT><TEXT>Windows and PM: Friendly Companions or Deadly Competitors? Everything used tobe so simple in the IBM-compatible world.andP;  Sigh.andP;  Five years ago we had onedominant operating system and one memory architecture.andP;  DOS was asingle-tasking operating system that allowed programs to run in the then-huge640K memory space defined by the 8088 microprocessor and the architecture ofthe IBM PC.andP;  That was our happy and consistent universe.andM;Then IBM introduced the first PC AT in 1984, and it became evident that somesignificant changes loomed just over the horizon.andP;  The AT was built aroundthe Intel 80286 microprocessor.andP;  Unlike the 8088 in IBMs's earlier machines,the 286 could operate in a &quot;protected mode.&quot;andP;  Protected-mode operation givesprograms access to 16MB of memory and is suitable for implementing realmultitasking on the PC.andM;No sooner was the AT introduced than people began to speculate about &quot;the newprotected-mode operating system&quot; that IBM or Microsoft would inevitablydevelop.andP;  At that time, no one could have guessed that the first version ofthis new operating systems--which eventually evolved into OS/2--would not bereleased until three years later, in October 1987.andP;  Nor could anyone thenhave guessed that two years after its initial releasE, OS/2 would still besurrounded by controversy over its future.andM;STILL CONTROVERSIALandM;Why the continuing controversy?andP;  It's not because we have come to accept the640K barrier as satisfactory.andP;  Even in 1984, PC users were beginning to bumpinto the 640K memory barrier.andP;  And it's not because we don't wantmultitasking.andP;  Even in 1984, RAM-resident pop-up programs were becomingpopular, and it was obvious that users wanted the ability to switch quicklyamong multiple applications.andM;The years since 1984, however, have seen a number of extensions to DOS thatseemingly solve its limitations and hence (in the view of some) render OS/2unnecessary.andP;  These DOS extensions include:andM;* various bank-switched memory schemes (called expanded memory) that allowspecially coded DOS programs access to more than 640K of memory;andM;* Dos extenders that allow specially coded DOS programs to take advantage ofextended memory on the 286 and 386 by running the program in protected mode;andM;* windowing environments, such as Microsoft Windows and DESQview, thatsupport task switching and even multitasking for existing DOS applicationsand that provide an API (application program interface) for new applicationswritten for the environment; andandM;* the Virtual-86 mode of the 386 microprocessor, which is used to supportmultitasking of existing DOS programs and to perform a number of memorymanagement tricks, such as allowing RAM-resident programs to be loaded inextended memoryandM;What do I think about these extensions?andP;  To my mind, they are clearly nothingmore than stop-gap measures.andP;  They may give DOS an extended lease on life,but they do not provide long-term solutions to the problems of DOS.andP;  Thepurpose of an operating system is to provide support for applications.andP;  Yetmany of these DOS extensions shift that burden either to the applicationitself or to another system that runs on top of DOS.andM;And it's all so confusing!andP;  If you're running a program that uses a DOSextender, you want extended memory; if you're running a program that usesexpanded memory, you want expanded memory.andP;  Or perhaps you need a devicederiver that converts extended memory to expanded memory.andP;  And if you'rerunning windows/386 or DESQview 386 as well, maybe it's best to divide yourextra memory between extended and expanded.andP;  But how much of each is optimum?andM;Under OS/2, of course, memory is memory is memory.andP;  It is much easier toconfigure a pure OS/2-based system than a DOS-based system that makes use ofone or more of these DOS extensions.andP;  Still these DOS extensions system toprovide hope to users that converting to a whole new operating system issimply not necessary.andM;MORE CONFUSION FROM MICROSOFTandM;As I write this column (in August 1989), there is a product coming down thepike that is guaranteed to add to this confusion.andP;  This product is MicrosoftWindows 3.0, and it has everyone in a tizzy.andM;By the time you read this column, Windows 3.0 may or may not be officiallyreleased to the public.andP;  Even at this stage, however, enough information isalready available about the product--disclosed publicly by Microsoft anddiscussed in the trade weeklies--to make clear what the product will do.andM;Windows 3.0 will allow Windows applications to run in protected mode underDOS on either a 286- or a 386-based machine.andP;  For Windows programs, Windows3.0 breaks the 640K barrier without requiring the user to upgrade to a wholenew operating system.andP;  The promise of this product has some peoplespeculating that Windows 3.0 will sound the death knell for OS/2.andP;  They askwhy we need OS/2 for protected mode when Windows 3.0 will give us protectedmode under DOS.andM;Why is Microsoft adding to the confusion surrounding the future of PCoperating systems?andP;  Will Windows 3.0 really kill OS/2?andP;  I don't know if I cananswer these questions, but I'll try at least to grapple with them.andM;I BELIEVE IN MAGICandM;Program developers who received beta-test versions of Windows 3.0 sawsomething new on the initial Windows logo screen: the words &quot;I believe inmagic.&quot;andM;It is magic of a sort that Microsoft has been able to bring protected mode toWindows while still running under DOS.andP;  If large Windows programs such asPage-Maker or Microsoft Excel need more than 640K, windows 3.0 will give itto them.andP;  With sufficient memory the programs will require fewer diskaccesses and run faster.andM;Yet in a sense, Microsoft anticipated the Windows 3.0 &quot;magic.&quot;andP;  As I'lldiscuss more fully farther on in this column, Microsoft intended Windows tobe part of &quot;the future protected-mode operating system.&quot;andP;  Right from thestart, then, the developers of Windows attempted to emulate protected-modefeatures within real mode.andM;Even the first retail release of Windows 1.0, when running on an 8088machine, was capable of some very sophisticated memory management.andP;  Windows1.0 could move program code and data segments in memory, allow multipleinstances of a program to share code allow programs to share code and datalocated in dynamic link libraries, and discard program code segments frommemory when not being used and later reload them from .EXE files when needed.andO;If you're interested in the details, Chapter 8 of my book Programming Windows(Microsoft Press, 1988) discusses how windows accomplishes these feats inreal mode.andP;  The memory management implemented in Window is truly one of itsmajor achievements.andM;Many savvy Windows programmers, recognizing Microsoft's goals in the designof this protected-mode style of memory management, wrote Windows programsthat carefully followed the windows programming rules and did not attempt todo anything that would cause problems if the program were someday run inprotected mode.andM;It thus became possible for Microsoft to consider actually running theseWindows programs in protected mode.andP;  It's not quite as easy as it may sound.andO;Windows still has to switch back to real mode when a Windows program makes aDOS function call, and running existing non-windows DOS programs is still aproblem.andP;  Indeed, even some Windows programs will require small changes tosuccessfully run under Windows 3.0.andM;MICROSOFT'S STRATEGYandM;To those of us who long ago wrote off DOS and who see OS/2 as the salvationof the PC-compatible industry, the advent of Windows 3.0 is indeeddisturbing.andM;Microsoft is the largest software company in the personal computer industry.andO;It is responsible for DOS (the most popular operating system in the world),for Windows (which currently outsell's the Macintosh), and (in league withIBM) for OS/2.andP;  The personal computer industry looks to Microsoft fordirection.andP;  Microsoft has been telling us that OS/2 is the future, yet withWindows 3.0, microsoft suddenly looks like the Scarecrow in The Wizard of Oz,who points in one direction and then another.andM;Perhaps we're making the mistake here of overinterpreting Microsoft'sstrategy.andP;  There has been no indication that Microsoft is falling back fromits support for OS/2.andP;  And certainly it can't be expected simply to abandonDOS and its existing DOS-based products for the sake of OS/2.andM;Windows has been a very successful product for Microsoft.andP;  It is softwareengineers know how to make Windows better by running Windows programs inprotected mode, should Microsoft halt this work because the improve productwill compete with OS/2?andP;  Imagine the uproar if it became public knowledgethat the company was deliberately suppressing this newer technology!andM;Thus, if the magic of Windows 3.0 is possible, then it must be realized,Micosoft has no real choice in the matter.andM;THE PROBLEM FOR DEVELOPERSandM;The introduction of a new operating system such as OS/2 poses the classicchicken-and-egg paradox.andP;  Users can't consider a new operating system untilthere are sufficient applications that run under it.andP;  Yet software developersare very reluctant to commit major resources to writing commercialapplications for a new operating system until they are sure that there willbe enough users of the operating system to buy the applications.andM;The creators of a new operating system (or an operating environment that runson top of an operating system) must persuade developers that the operatingsystem will be a success.andP;  Microsoft did this with Windows, and that's whyWindows is a success.andP;  IBM failed to do so with TopView, and TopView died.andM;Microsoft now has two different graphical user interfaces--Windows and theOS/2 Presentation Manager.andP;  Program developers interested in writing for agraphical interface on the PC must make a choice.andP;  They can program forWindows, for PM, or--separately--for both.andM;The last alternative sounds like the best, but it's a difficult one.andP;  WhileWindows and PM are similar in overall structure and the user interface, theyare different in the details of the application program interface.andO;Converting a Windows program to the Presentation Manager (or vice versa) isnot an easy task.andM;Prior to Windows 3.0, the choice was clear: for immediate payoff in themarket, go with Windows.andP;  For the long term, it's the Presentation Manager.andO;For very large programs, the Presentation Manager was the only possibility.andM;But that's changed now.andP;  Windows 3.0 will give programmers the memory theyneed for large sophisticated applications, and Windows has the establisheduser base to provide an immediate payoff.andP;  Indeed, it appears that somesoftware manufacturers who previously had ignored Windows and focused insteadon PM are now reevaluating their original decision in the light of Windows3.0.andM;It wasn't supposed to be like this.andP;  Back in the early days of Windows,Microsoft never intended to put itself in the unenviable situation ofsupporting two different graphical user interfaces.andM;BALLMER'S PLEDGEandM;In June 1986, I attended a two-day Windows Development Seminar in NewYork--part of Microsoft's effort to persuade developers to write for Windows.andO;The first speaker at that seminar was Steve Ballmer, the vice president ofMicrosoft's System Software Group.andP;  Ballmer outlined the benefits of Windowsand emphasized Microsoft's commitment to the product.andM;Ballmer went on to discuss the long-term future of Windows, which looked rosyindeed.andP;  Here, transcribed from cassette tapes provided by Microsoft, is whathe said on that subject:andM;&quot;I think it's fairly well known, from [the] press, etc., that Microsoft isworking on a future version of DOS that supports the 286 in its so-calledprotected mode, where you have a full 16MB of address space and you getaccess to the memory management features of the 286.andP;  We have committed tomake sure that the Windows API exists in a completely compatible fashionbetween real mode, or today's Windows, and this new protected-mode OS[operating system].andP;  We've also told people, and I'll tell you again today,that it'll be a fairly transparent process to take an application that runson Windows today on top of DOS 3.0 and to move it to a new version of Windowsthat runs on top of this new 286 protected-mode version of DOS.&quot;andM;This statement had a big impact on me, as I'm sure it had on otherprogrammers.andP;  I used to tell people that by programming for the Windows API,I was also programming for the future protected-mode operating system.andM;The &quot;protected-mode version of DOS&quot; turned out to be OS/2, officiallyannounced by IBM and Microsoft less than a year after this seminar.andP;  Alas,however, things did not turn out quite as Ballmer had promised.andP;  Not a singlefunction call in Windows was preserved in the Presentation Manager API.andP;  The&quot;fairly transparent process&quot; of which Ballmer spoke has turned out to be amajor headache for programmers.andM;Imagine the situation if what Ballmer said had actually been realized.andO;Imagine that you could take existing Windows programs and run them underOS/2.andP;  Imagine that these Windows programs would now suddenly have access tothe 16-megabyte protected-mode memory space.andP;  If this scenario had come topass, OS/2 would already be a success.andP;  Many Windows users would make thejump to OS/2 just to gain access to the extra memory.andM;WHY THE DIFFERENT API SETS?andM;Surely it was to Microsoft's advantage to preserve the Windows API in OS/2.andO;What happened to prevent it?andM;No one can be sure, of course, for the decisions were reached in top-secretnegotiations between IBM and Microsoft.andP;  But the consensus of speculation(and I must emphasize that it is speculation) goes something like this:andM;It was obvious both to IBM and to Microsoft that a graphical user interfacewas necessary for the new protected-mode operating system.andP;  IBM wanted todesign their own GUI.andP;  Microsoft thought that this was unnecessary becauseWindows 1.0 had already been developed and was headed for success in the DOSworld.andP;  Although Microsoft convinced IBM to use Windows in the new operatingsystem, there was a little catch: IBM wanted some changes.andM;Some of these changes were cosmetic.andP;  They involved the Windows userinterface and had little impact on the API.andP;  Windows 1.0 had tiled windows,and IBM wanted overlapping windows, for example.andP;  IBM also wanted some moresubtle changes in the menu interface.andP;  Many of these changes wereincorporated into Windows 2.0, and in retrospect, we can see that product asa prototype for the user interface of the OS/2 Presentation Manager.andM;Other changes that IBM wanted had a more serious impact, however: IBM wantedto use a derivative of its mainframe GDDM (Graphical Data Display Manager)graphics system in the Presentation Manager.andP;  This became known as GPI(Graphics Programming Interface), which replaced the Windows GDI (GraphicsDevice Interface).andM;IBM was also at this time committed to SAA (Systems ApplicationArchitecture), a set of guidelines designed to establish consistency amongits mainframes, mini-computers, and PCs.andP;  Part of SAA involves a consistentAPI function call format, and rules about the parameters to these functions.andO;By this time, the changes were so severe that Microsoft apparently decided torevamp other aspects of Windows in its conversion to the PresentationManager.andM;To Windows programmers like me, who were expecting to see a fairlystraight-forward path from Windows to OS/2, the Presentation Manager API cameas a real shock.andP;  It was as if we had crossed a border into another country.andO;Everything was still recognizable, but the language was completely different.andM;THE PROGRAMMER'S AND USER'S VIEWSandM;The result of the collaboration between IBM and Microsoft in creating theOS/2 Presentation Manager was a healthy one because PM represents the bestthat IBM and Microsoft have to offer.andP;  It was truly a synergistic enterprise.andM;I have found no programmer who will claim that the Presentation Manager APIis not significantly superior to the Windows API.andP;  The IBM graphics system isdefinitely superior; the windowing functions are cleaner, more orthogonal,more versatile than their Windows counterparts.andP;  The API has been largelystripped of its reliance on the segmented memory architecture of the 8088 and80286 microprocessors.andM;It's easy for program developers to see the advantages of the PresentationManager over Windows, and of OS/2 over DOS.andP;  Programmers can recognize thevalue of the better graphics interface, the use of multiple threads, and thevarious interprocess communication mechanisms.andP;  Yet these features are not soevident to users.andM;What is evident to users is the larger memory space, because this isquantifiable.andP;  It doesn't take much in the way of technical ability torecognize a difference between 640 kilobytes and 16MB.andP;  Both OS/2 and Windows3.0 provide this 16MB address space, so to users there seems to be littlereason to replace DOS with OS/2.andP;  And if program developers see that Windowsusers don't feel a need to move to OS/2, then they will concentrate onwriting Windows applications rather than PM applications.andM;What the users can't see and so fail to understand is that the significantlybetter OS/2 and Presentation Manager APIs would give developers much morepowerful tools with which to create substantially better applications thanwill ever be possible under Windows 3.0, DOS, or any of the extensionsmentioned previously.andM;SOME GOOD NEWSandM;I realize that I've been painting a bleak picture for OS/2 and thePresentation Manager.andP;  OS/2 had been experiencing a sluggish start evenbefore the news about Windows 3.0 began to emanate from Microsoft.andP;  Windows3.0 seems to make things worse, but let's see if there's a silver lining inthese ominous storm clouds.andM;First, perhaps Microsoft's strategy is not as perverse as it may seem.andP;  WhenWindows 3.0 is released and can run Windows applications in protected mode,Windows users are going to want more memory.andP;  A good machine for runningWindows 3.0 comprises a 386 or a fast 286 microprocessor, a large hard disk,a medium-resolution color display such as the VGA, and several megabytes ofmemory.andM;And guess what?andP;  These are precisely the hardware requirements for OS/2!andO;Given that Windows applications and OS/2 Presentation Manager applicationshave the same user interface, it will be a relatively transparent process forusers to move from a DOS and Windows 3.0 environment to an OS/2 environment.andM;Secondly, is it really so bad that developers may turn away from thePresentation Manager and concentrate on writing Windows 3.0 applicationsinstead?andP;  Not in the long term.andP;  Learning to program for any graphicalinterface is a big job for programmers, and much of what they must learn towrite for Windows can be carried over into writing for the PresentationManager.andM;Moreover, Micrographx (the creators of several very good Windows programs)has been working on a product called Mirrors that will help Windowsprogrammers convert their programs to the Presentation Manager.andP;  It involvesrecompiling the Windows program, using an OS/2 dynamic link library toconvert the Windows function calls to PM function calls.andM;It's also likely that in the next couple of years we'll see adequateobject-oriented programming tools that will let us write single programs thatcan be compiled for multiple graphical interfaces.andP;  This also would helpsoftware manufacturers write programs that run under both Windows and thePresentation Manager.andM;Third, there are enhancements to OS/2 to be expected in the next year.andP;  Bythe time you read this column, OS/2 1.2 (which includes the new HighPerformance File System, or HPFS) should be close to being released, if ithas not been already.andP;  Judging from some preliminary benchmarks, HPFS willhave significant speed performances over the DOS file system.andM;Finally, OS/2 2.0, which takes advantage of the 386 microprocessor, isexpected in mid-1990 or thereabouts.andP;  This will give OS/2 applications theuse of 32-bit registers and a 32-bit flat address space, as well as theability to run multiple DOS sessions using Virtual-86 mode.andM;BALLMER'S PLEDGE REDEEMED?andM;Consider the following for a moment: With the advent of Windows 3.0,Microsoft is emphasizing to programmers the importance of fixing theirexisting Windows applications so they don't violate any protected-mode rulesand will run without problems under the new environment.andP;  Micrographx hasdemonstrated that it is possible to create an OS/2 dynamic link library thatconverts Windows function calls to Presentation Manager function calls.andM;Wouldn't it make sense for Microsoft to include such a dynamic link librarywith OS/2 2.0, allowing Windows programs to run in the Presentation Managersession alongside PM programs?andM;In fact, there have already been rumors and speculation about thispossibility in the trade weeklies.andP;  It's an enticing prospect.andP;  We know nowthat OS/2 2.0 will be able to run existing DOS programs, existing OS/2 kerneland PM programs written for the 16-bit system, and new OS/2 programs writtenfor the 32-bit system.andP;  The additional capability of running Windows 3.0programs would undoubtedly be a big plus.andM;And that is how Windows and the Presentation Manager could become truecompanions rather than competitors.andP;  We'd have one system that would run bothtypes of applications.andP;  Steve Ballmer's 1986 pledge to Windows programmerswould finally be realized, albeit four years later.andM;I can only hope that Microsoft will be able to carry it off.andP;  OS/2 and thePresentation Manager (particularly when taking advantage of the 386) areobviously more tuned to the future than DOS and Windows--even Windows 3.0.andO;But DOS and Windows have achieved such a heavy penetration that they cannotsimply be abandoned.andP;  They must be incorporated into OS/2 in a way that isnearly seamless to users.andP;  It is only when users can finally see andunderstand the real benefits of OS/2 that the PC industry will be able totake the next legitimate step into the future.andO;</TEXT></DOC>